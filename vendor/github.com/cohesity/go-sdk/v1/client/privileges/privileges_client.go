// Code generated by go-swagger; DO NOT EDIT.

package privileges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new privileges API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new privileges API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new privileges API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for privileges API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetPrivileges(params *GetPrivilegesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPrivilegesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetPrivileges lists the privileges defined on the cohesity cluster

	**Privileges:** ```PRINCIPAL_VIEW``` <br><br>If the 'name' parameter is not specified, all privileges defined

on the Cohesity Cluster are returned.
In addition, information about each privilege is returned such as the
associated category, description, name,  etc.
If an exact privilege name (such as PRINCIPAL_VIEW) is specified in the
'name' parameter, only information about that single privilege is returned.
*/
func (a *Client) GetPrivileges(params *GetPrivilegesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPrivilegesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivilegesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPrivileges",
		Method:             "GET",
		PathPattern:        "/public/privileges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPrivilegesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivilegesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPrivilegesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
