// Code generated by go-swagger; DO NOT EDIT.

package vaults

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new vaults API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new vaults API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new vaults API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for vaults API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVault(params *CreateVaultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVaultCreated, error)

	DeleteVault(params *DeleteVaultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVaultNoContent, error)

	GetArchiveMediaInfo(params *GetArchiveMediaInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArchiveMediaInfoOK, error)

	GetBandwidthSettings(params *GetBandwidthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBandwidthSettingsOK, error)

	GetVaultByID(params *GetVaultByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultByIDOK, error)

	GetVaultEncryptionKey(params *GetVaultEncryptionKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultEncryptionKeyOK, error)

	GetVaults(params *GetVaultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultsOK, error)

	UpdateBandwidthSettings(params *UpdateBandwidthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBandwidthSettingsOK, error)

	UpdateVault(params *UpdateVaultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVaultOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateVault creates a new vault external target

	**Privileges:** ```CLUSTER_EXTERNAL_TARGET_MODIFY``` <br><br>Returns the created Vault.

A Vault is equivalent to an External Target in the Cohesity Dashboard.
*/
func (a *Client) CreateVault(params *CreateVaultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVaultCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVaultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVault",
		Method:             "POST",
		PathPattern:        "/public/vaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVaultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVaultCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateVaultDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	DeleteVault deletes a vault external target

	**Privileges:** ```CLUSTER_EXTERNAL_TARGET_MODIFY``` <br><br>Returns delete status upon completion.

A Vault is equivalent to an External Target in the Cohesity Dashboard.
*/
func (a *Client) DeleteVault(params *DeleteVaultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVaultNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVaultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVault",
		Method:             "DELETE",
		PathPattern:        "/public/vaults/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVaultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVaultNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteVaultDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetArchiveMediaInfo lists the media information for the specified archive service

	**Privileges:** ```RESTORE_VIEW``` <br><br>Returns the media information about the specified archive service uid

(such as a QStar tape archive service).

An archive service uid is uniquely identified using a combination of the
following fields: clusterIncarnationId, entityIds and clusterId.
These are all required fields.
*/
func (a *Client) GetArchiveMediaInfo(params *GetArchiveMediaInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArchiveMediaInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArchiveMediaInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetArchiveMediaInfo",
		Method:             "GET",
		PathPattern:        "/public/vaults/archiveMediaInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchiveMediaInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArchiveMediaInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetArchiveMediaInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBandwidthSettings lists the upload and download bandwidth limit and bandwidth overrides settings

**Privileges:** ```CLUSTER_VIEW``` <br><br>Returns the upload and download bandwidth limits.
*/
func (a *Client) GetBandwidthSettings(params *GetBandwidthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBandwidthSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBandwidthSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBandwidthSettings",
		Method:             "GET",
		PathPattern:        "/public/vaults/bandwidthSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBandwidthSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBandwidthSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBandwidthSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetVaultByID lists details about a single vault external target

	**Privileges:** ```CLUSTER_EXTERNAL_TARGET_VIEW``` <br><br>Returns the Vault corresponding to the specified Vault Id.

A Vault is equivalent to an External Target in the Cohesity Dashboard.
*/
func (a *Client) GetVaultByID(params *GetVaultByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVaultByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVaultById",
		Method:             "GET",
		PathPattern:        "/public/vaults/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVaultByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVaultByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVaultByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetVaultEncryptionKey gets encryption information for a vault external target a vault is equivalent to an external target in the cohesity dashboard

	**Privileges:** ```CLUSTER_MODIFY``` <br><br>Get encryption information (such as the encryption key)

for the specified Vault (External Target).
To restore data to a remote Cluster (for example to support a disaster
recovery scenario), you must get the encryption key of the Vault
and store it outside the local source Cluster, before disaster strikes.
If you have the encryption key and the local source Cluster goes down,
you can restore the data to a remote Cluster from the Vault.
The local source Cluster is the Cluster that archived the data on the Vault.
*/
func (a *Client) GetVaultEncryptionKey(params *GetVaultEncryptionKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultEncryptionKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVaultEncryptionKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVaultEncryptionKey",
		Method:             "GET",
		PathPattern:        "/public/vaults/encryptionKey/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVaultEncryptionKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVaultEncryptionKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVaultEncryptionKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetVaults lists the vaults external targets registered on the cohesity cluster filtered by the specified parameters

	**Privileges:** ```CLUSTER_EXTERNAL_TARGET_VIEW``` <br><br>If no parameters are specified, all Vaults (External Targets) currently

registered on the Cohesity Cluster are returned.
Specifying parameters filters the results that are returned.
A Vault is equivalent to an External Target in the Cohesity Dashboard.
*/
func (a *Client) GetVaults(params *GetVaultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVaultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVaults",
		Method:             "GET",
		PathPattern:        "/public/vaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVaultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVaultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVaultsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateBandwidthSettings updates bandwidth limits

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the updated bandwidth limits.
*/
func (a *Client) UpdateBandwidthSettings(params *UpdateBandwidthSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBandwidthSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBandwidthSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateBandwidthSettings",
		Method:             "PUT",
		PathPattern:        "/public/vaults/bandwidthSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBandwidthSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBandwidthSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateBandwidthSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateVault updates a vault external target

	**Privileges:** ```CLUSTER_EXTERNAL_TARGET_MODIFY``` <br><br>Update the settings of a Vault.

A Vault is equivalent to an External Target in the Cohesity Dashboard.
Returns the updated Vault.
*/
func (a *Client) UpdateVault(params *UpdateVaultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVaultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVault",
		Method:             "PUT",
		PathPattern:        "/public/vaults/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVaultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateVaultDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
