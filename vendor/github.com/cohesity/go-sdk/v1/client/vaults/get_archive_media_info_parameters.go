// Code generated by go-swagger; DO NOT EDIT.

package vaults

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetArchiveMediaInfoParams creates a new GetArchiveMediaInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetArchiveMediaInfoParams() *GetArchiveMediaInfoParams {
	return &GetArchiveMediaInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetArchiveMediaInfoParamsWithTimeout creates a new GetArchiveMediaInfoParams object
// with the ability to set a timeout on a request.
func NewGetArchiveMediaInfoParamsWithTimeout(timeout time.Duration) *GetArchiveMediaInfoParams {
	return &GetArchiveMediaInfoParams{
		timeout: timeout,
	}
}

// NewGetArchiveMediaInfoParamsWithContext creates a new GetArchiveMediaInfoParams object
// with the ability to set a context for a request.
func NewGetArchiveMediaInfoParamsWithContext(ctx context.Context) *GetArchiveMediaInfoParams {
	return &GetArchiveMediaInfoParams{
		Context: ctx,
	}
}

// NewGetArchiveMediaInfoParamsWithHTTPClient creates a new GetArchiveMediaInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetArchiveMediaInfoParamsWithHTTPClient(client *http.Client) *GetArchiveMediaInfoParams {
	return &GetArchiveMediaInfoParams{
		HTTPClient: client,
	}
}

/*
GetArchiveMediaInfoParams contains all the parameters to send to the API endpoint

	for the get archive media info operation.

	Typically these are written to a http.Request.
*/
type GetArchiveMediaInfoParams struct {

	/* ClusterID.

	     Specifies the id of the Cohesity Cluster that archived to a
	QStar media Vault.

	     Format: int64
	*/
	ClusterID int64

	/* ClusterIncarnationID.

	     Specifies the incarnation id of the Cohesity Cluster that archived
	to a QStar media Vault.

	     Format: int64
	*/
	ClusterIncarnationID int64

	/* EntityIds.

	     Specifies an array of entityIds to optionally filter by.
	An entityId is a unique id for a VM assigned by the Cohesity Cluster.
	*/
	EntityIds []int64

	/* QstarArchiveJobID.

	   Specifies the id of the Job that archived to a QStar media Vault.

	   Format: int64
	*/
	QstarArchiveJobID int64

	/* QstarRestoreTaskID.

	     Specifies the id of the restore task to optionally filter by.
	The restore task that is restoring data from the specified media Vault.

	     Format: int64
	*/
	QstarRestoreTaskID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get archive media info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetArchiveMediaInfoParams) WithDefaults() *GetArchiveMediaInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get archive media info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetArchiveMediaInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get archive media info params
func (o *GetArchiveMediaInfoParams) WithTimeout(timeout time.Duration) *GetArchiveMediaInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get archive media info params
func (o *GetArchiveMediaInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get archive media info params
func (o *GetArchiveMediaInfoParams) WithContext(ctx context.Context) *GetArchiveMediaInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get archive media info params
func (o *GetArchiveMediaInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get archive media info params
func (o *GetArchiveMediaInfoParams) WithHTTPClient(client *http.Client) *GetArchiveMediaInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get archive media info params
func (o *GetArchiveMediaInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the get archive media info params
func (o *GetArchiveMediaInfoParams) WithClusterID(clusterID int64) *GetArchiveMediaInfoParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get archive media info params
func (o *GetArchiveMediaInfoParams) SetClusterID(clusterID int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the get archive media info params
func (o *GetArchiveMediaInfoParams) WithClusterIncarnationID(clusterIncarnationID int64) *GetArchiveMediaInfoParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the get archive media info params
func (o *GetArchiveMediaInfoParams) SetClusterIncarnationID(clusterIncarnationID int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithEntityIds adds the entityIds to the get archive media info params
func (o *GetArchiveMediaInfoParams) WithEntityIds(entityIds []int64) *GetArchiveMediaInfoParams {
	o.SetEntityIds(entityIds)
	return o
}

// SetEntityIds adds the entityIds to the get archive media info params
func (o *GetArchiveMediaInfoParams) SetEntityIds(entityIds []int64) {
	o.EntityIds = entityIds
}

// WithQstarArchiveJobID adds the qstarArchiveJobID to the get archive media info params
func (o *GetArchiveMediaInfoParams) WithQstarArchiveJobID(qstarArchiveJobID int64) *GetArchiveMediaInfoParams {
	o.SetQstarArchiveJobID(qstarArchiveJobID)
	return o
}

// SetQstarArchiveJobID adds the qstarArchiveJobId to the get archive media info params
func (o *GetArchiveMediaInfoParams) SetQstarArchiveJobID(qstarArchiveJobID int64) {
	o.QstarArchiveJobID = qstarArchiveJobID
}

// WithQstarRestoreTaskID adds the qstarRestoreTaskID to the get archive media info params
func (o *GetArchiveMediaInfoParams) WithQstarRestoreTaskID(qstarRestoreTaskID *int64) *GetArchiveMediaInfoParams {
	o.SetQstarRestoreTaskID(qstarRestoreTaskID)
	return o
}

// SetQstarRestoreTaskID adds the qstarRestoreTaskId to the get archive media info params
func (o *GetArchiveMediaInfoParams) SetQstarRestoreTaskID(qstarRestoreTaskID *int64) {
	o.QstarRestoreTaskID = qstarRestoreTaskID
}

// WriteToRequest writes these params to a swagger request
func (o *GetArchiveMediaInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param clusterId
	qrClusterID := o.ClusterID
	qClusterID := swag.FormatInt64(qrClusterID)
	if qClusterID != "" {

		if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
			return err
		}
	}

	// query param clusterIncarnationId
	qrClusterIncarnationID := o.ClusterIncarnationID
	qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
	if qClusterIncarnationID != "" {

		if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
			return err
		}
	}

	if o.EntityIds != nil {

		// binding items for entityIds
		joinedEntityIds := o.bindParamEntityIds(reg)

		// query array param entityIds
		if err := r.SetQueryParam("entityIds", joinedEntityIds...); err != nil {
			return err
		}
	}

	// query param qstarArchiveJobId
	qrQstarArchiveJobID := o.QstarArchiveJobID
	qQstarArchiveJobID := swag.FormatInt64(qrQstarArchiveJobID)
	if qQstarArchiveJobID != "" {

		if err := r.SetQueryParam("qstarArchiveJobId", qQstarArchiveJobID); err != nil {
			return err
		}
	}

	if o.QstarRestoreTaskID != nil {

		// query param qstarRestoreTaskId
		var qrQstarRestoreTaskID int64

		if o.QstarRestoreTaskID != nil {
			qrQstarRestoreTaskID = *o.QstarRestoreTaskID
		}
		qQstarRestoreTaskID := swag.FormatInt64(qrQstarRestoreTaskID)
		if qQstarRestoreTaskID != "" {

			if err := r.SetQueryParam("qstarRestoreTaskId", qQstarRestoreTaskID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetArchiveMediaInfo binds the parameter entityIds
func (o *GetArchiveMediaInfoParams) bindParamEntityIds(formats strfmt.Registry) []string {
	entityIdsIR := o.EntityIds

	var entityIdsIC []string
	for _, entityIdsIIR := range entityIdsIR { // explode []int64

		entityIdsIIV := swag.FormatInt64(entityIdsIIR) // int64 as string
		entityIdsIC = append(entityIdsIC, entityIdsIIV)
	}

	// items.CollectionFormat: ""
	entityIdsIS := swag.JoinByFormat(entityIdsIC, "")

	return entityIdsIS
}
