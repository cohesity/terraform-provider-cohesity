// Code generated by go-swagger; DO NOT EDIT.

package vaults

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetVaultsParams creates a new GetVaultsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVaultsParams() *GetVaultsParams {
	return &GetVaultsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVaultsParamsWithTimeout creates a new GetVaultsParams object
// with the ability to set a timeout on a request.
func NewGetVaultsParamsWithTimeout(timeout time.Duration) *GetVaultsParams {
	return &GetVaultsParams{
		timeout: timeout,
	}
}

// NewGetVaultsParamsWithContext creates a new GetVaultsParams object
// with the ability to set a context for a request.
func NewGetVaultsParamsWithContext(ctx context.Context) *GetVaultsParams {
	return &GetVaultsParams{
		Context: ctx,
	}
}

// NewGetVaultsParamsWithHTTPClient creates a new GetVaultsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVaultsParamsWithHTTPClient(client *http.Client) *GetVaultsParams {
	return &GetVaultsParams{
		HTTPClient: client,
	}
}

/*
GetVaultsParams contains all the parameters to send to the API endpoint

	for the get vaults operation.

	Typically these are written to a http.Request.
*/
type GetVaultsParams struct {

	/* GlobalID.

	     Specifies the global Identifier of the vault to be returned. If empty,
	all Vaults are returned.
	*/
	GlobalID *string

	/* ID.

	   Specifies the id of Vault to return. If empty, all Vaults are returned.

	   Format: int64
	*/
	ID *int64

	/* IncludeFortKnoxVault.

	   Specifies if Vaults that are RPaaS vaults should be returned.
	*/
	IncludeFortKnoxVault *bool

	/* IncludeMarkedForRemoval.

	   Specifies if Vaults that are marked for removal should be returned.
	*/
	IncludeMarkedForRemoval *bool

	/* Name.

	     Specifies the name of the Vault to return. If empty, all Vaults are
	returned.
	*/
	Name *string

	/* TenantIds.

	     Specifies a list of tenant ids. Only vaults assigned to these tenants
	will be returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get vaults params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVaultsParams) WithDefaults() *GetVaultsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get vaults params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVaultsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get vaults params
func (o *GetVaultsParams) WithTimeout(timeout time.Duration) *GetVaultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get vaults params
func (o *GetVaultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get vaults params
func (o *GetVaultsParams) WithContext(ctx context.Context) *GetVaultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get vaults params
func (o *GetVaultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get vaults params
func (o *GetVaultsParams) WithHTTPClient(client *http.Client) *GetVaultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get vaults params
func (o *GetVaultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGlobalID adds the globalID to the get vaults params
func (o *GetVaultsParams) WithGlobalID(globalID *string) *GetVaultsParams {
	o.SetGlobalID(globalID)
	return o
}

// SetGlobalID adds the globalId to the get vaults params
func (o *GetVaultsParams) SetGlobalID(globalID *string) {
	o.GlobalID = globalID
}

// WithID adds the id to the get vaults params
func (o *GetVaultsParams) WithID(id *int64) *GetVaultsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get vaults params
func (o *GetVaultsParams) SetID(id *int64) {
	o.ID = id
}

// WithIncludeFortKnoxVault adds the includeFortKnoxVault to the get vaults params
func (o *GetVaultsParams) WithIncludeFortKnoxVault(includeFortKnoxVault *bool) *GetVaultsParams {
	o.SetIncludeFortKnoxVault(includeFortKnoxVault)
	return o
}

// SetIncludeFortKnoxVault adds the includeFortKnoxVault to the get vaults params
func (o *GetVaultsParams) SetIncludeFortKnoxVault(includeFortKnoxVault *bool) {
	o.IncludeFortKnoxVault = includeFortKnoxVault
}

// WithIncludeMarkedForRemoval adds the includeMarkedForRemoval to the get vaults params
func (o *GetVaultsParams) WithIncludeMarkedForRemoval(includeMarkedForRemoval *bool) *GetVaultsParams {
	o.SetIncludeMarkedForRemoval(includeMarkedForRemoval)
	return o
}

// SetIncludeMarkedForRemoval adds the includeMarkedForRemoval to the get vaults params
func (o *GetVaultsParams) SetIncludeMarkedForRemoval(includeMarkedForRemoval *bool) {
	o.IncludeMarkedForRemoval = includeMarkedForRemoval
}

// WithName adds the name to the get vaults params
func (o *GetVaultsParams) WithName(name *string) *GetVaultsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get vaults params
func (o *GetVaultsParams) SetName(name *string) {
	o.Name = name
}

// WithTenantIds adds the tenantIds to the get vaults params
func (o *GetVaultsParams) WithTenantIds(tenantIds []string) *GetVaultsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get vaults params
func (o *GetVaultsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetVaultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.GlobalID != nil {

		// query param globalId
		var qrGlobalID string

		if o.GlobalID != nil {
			qrGlobalID = *o.GlobalID
		}
		qGlobalID := qrGlobalID
		if qGlobalID != "" {

			if err := r.SetQueryParam("globalId", qGlobalID); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.IncludeFortKnoxVault != nil {

		// query param includeFortKnoxVault
		var qrIncludeFortKnoxVault bool

		if o.IncludeFortKnoxVault != nil {
			qrIncludeFortKnoxVault = *o.IncludeFortKnoxVault
		}
		qIncludeFortKnoxVault := swag.FormatBool(qrIncludeFortKnoxVault)
		if qIncludeFortKnoxVault != "" {

			if err := r.SetQueryParam("includeFortKnoxVault", qIncludeFortKnoxVault); err != nil {
				return err
			}
		}
	}

	if o.IncludeMarkedForRemoval != nil {

		// query param includeMarkedForRemoval
		var qrIncludeMarkedForRemoval bool

		if o.IncludeMarkedForRemoval != nil {
			qrIncludeMarkedForRemoval = *o.IncludeMarkedForRemoval
		}
		qIncludeMarkedForRemoval := swag.FormatBool(qrIncludeMarkedForRemoval)
		if qIncludeMarkedForRemoval != "" {

			if err := r.SetQueryParam("includeMarkedForRemoval", qIncludeMarkedForRemoval); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetVaults binds the parameter tenantIds
func (o *GetVaultsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
