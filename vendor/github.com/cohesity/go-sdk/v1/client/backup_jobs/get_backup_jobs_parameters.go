// Code generated by go-swagger; DO NOT EDIT.

package backup_jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetBackupJobsParams creates a new GetBackupJobsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBackupJobsParams() *GetBackupJobsParams {
	return &GetBackupJobsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBackupJobsParamsWithTimeout creates a new GetBackupJobsParams object
// with the ability to set a timeout on a request.
func NewGetBackupJobsParamsWithTimeout(timeout time.Duration) *GetBackupJobsParams {
	return &GetBackupJobsParams{
		timeout: timeout,
	}
}

// NewGetBackupJobsParamsWithContext creates a new GetBackupJobsParams object
// with the ability to set a context for a request.
func NewGetBackupJobsParamsWithContext(ctx context.Context) *GetBackupJobsParams {
	return &GetBackupJobsParams{
		Context: ctx,
	}
}

// NewGetBackupJobsParamsWithHTTPClient creates a new GetBackupJobsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBackupJobsParamsWithHTTPClient(client *http.Client) *GetBackupJobsParams {
	return &GetBackupJobsParams{
		HTTPClient: client,
	}
}

/*
GetBackupJobsParams contains all the parameters to send to the API endpoint

	for the get backup jobs operation.

	Typically these are written to a http.Request.
*/
type GetBackupJobsParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if logs of all the tenants under the hierarchy
	of tenant with id TenantId should be returned.
	*/
	AllUnderHierarchy *bool

	/* EnvTypes.

	   EnvTypes are the types of backup jobs to return e.g. VMWare, View etc.
	*/
	EnvTypes []int64

	/* Ids.

	   Ids are the ids of the backup jobs to filter.
	*/
	Ids []int64

	/* IsActive.

	     IsActive is the parameter to filter active/inactive jobs. If it is
	specified as true, only active jobs are returned. If it is specified as
	false, only inactive jobs are returned.
	*/
	IsActive *bool

	/* IsDeleted.

	     IsDeleted is the parameter to filter deleted/non-deleted jobs. If it is
	specified as true, only deleted jobs are returned. If it is specified as
	false, only non-deleted jobs are returned.
	*/
	IsDeleted *bool

	/* IsLastRunSLAViolated.

	     IsLastRunSlaViolated is the parameter to filter the Protection Jobs based
	on the SLA violation status of the last Protection Run.
	*/
	IsLastRunSLAViolated *bool

	/* Names.

	   Names are the names of backup jobs to filter.
	*/
	Names []string

	/* OnlyReturnDataMigrationJobs.

	     OnlyReturnDataMigrationJobs specifies if only data stubbing jobs should be
	returned. If not set, no data migration job will be returned.
	*/
	OnlyReturnDataMigrationJobs *bool

	/* PolicyIds.

	   PolicyIds are the Ids of policies to filter by.
	*/
	PolicyIds []string

	/* PruneExclusionSources.

	     If true, the list of exclusion sources will be omitted from the response.
	This can be used to improve performance when the exclusion sources are
	not needed.
	*/
	PruneExclusionSources *bool

	/* PruneSources.

	     If set to true, all backup sources within the requested jobs will be
	omitted from the response. Callers may use this to avoid overfetching
	when information about entities in the job is not needed.
	*/
	PruneSources *bool

	/* ReturnCompleteSourceTree.

	     ReturnCompleteSourceTree specifies if the full source tree should be
	returned if the protected node is a container node.
	Mostly used in case of run now where we currently get the container node
	in the source in case of autoprotect of container node.
	*/
	ReturnCompleteSourceTree *bool

	/* TenantID.

	   TenantId specifies the tenant whose action resulted in the audit log.
	*/
	TenantID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get backup jobs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBackupJobsParams) WithDefaults() *GetBackupJobsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get backup jobs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBackupJobsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get backup jobs params
func (o *GetBackupJobsParams) WithTimeout(timeout time.Duration) *GetBackupJobsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get backup jobs params
func (o *GetBackupJobsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get backup jobs params
func (o *GetBackupJobsParams) WithContext(ctx context.Context) *GetBackupJobsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get backup jobs params
func (o *GetBackupJobsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get backup jobs params
func (o *GetBackupJobsParams) WithHTTPClient(client *http.Client) *GetBackupJobsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get backup jobs params
func (o *GetBackupJobsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get backup jobs params
func (o *GetBackupJobsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetBackupJobsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get backup jobs params
func (o *GetBackupJobsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithEnvTypes adds the envTypes to the get backup jobs params
func (o *GetBackupJobsParams) WithEnvTypes(envTypes []int64) *GetBackupJobsParams {
	o.SetEnvTypes(envTypes)
	return o
}

// SetEnvTypes adds the envTypes to the get backup jobs params
func (o *GetBackupJobsParams) SetEnvTypes(envTypes []int64) {
	o.EnvTypes = envTypes
}

// WithIds adds the ids to the get backup jobs params
func (o *GetBackupJobsParams) WithIds(ids []int64) *GetBackupJobsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get backup jobs params
func (o *GetBackupJobsParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithIsActive adds the isActive to the get backup jobs params
func (o *GetBackupJobsParams) WithIsActive(isActive *bool) *GetBackupJobsParams {
	o.SetIsActive(isActive)
	return o
}

// SetIsActive adds the isActive to the get backup jobs params
func (o *GetBackupJobsParams) SetIsActive(isActive *bool) {
	o.IsActive = isActive
}

// WithIsDeleted adds the isDeleted to the get backup jobs params
func (o *GetBackupJobsParams) WithIsDeleted(isDeleted *bool) *GetBackupJobsParams {
	o.SetIsDeleted(isDeleted)
	return o
}

// SetIsDeleted adds the isDeleted to the get backup jobs params
func (o *GetBackupJobsParams) SetIsDeleted(isDeleted *bool) {
	o.IsDeleted = isDeleted
}

// WithIsLastRunSLAViolated adds the isLastRunSLAViolated to the get backup jobs params
func (o *GetBackupJobsParams) WithIsLastRunSLAViolated(isLastRunSLAViolated *bool) *GetBackupJobsParams {
	o.SetIsLastRunSLAViolated(isLastRunSLAViolated)
	return o
}

// SetIsLastRunSLAViolated adds the isLastRunSlaViolated to the get backup jobs params
func (o *GetBackupJobsParams) SetIsLastRunSLAViolated(isLastRunSLAViolated *bool) {
	o.IsLastRunSLAViolated = isLastRunSLAViolated
}

// WithNames adds the names to the get backup jobs params
func (o *GetBackupJobsParams) WithNames(names []string) *GetBackupJobsParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the get backup jobs params
func (o *GetBackupJobsParams) SetNames(names []string) {
	o.Names = names
}

// WithOnlyReturnDataMigrationJobs adds the onlyReturnDataMigrationJobs to the get backup jobs params
func (o *GetBackupJobsParams) WithOnlyReturnDataMigrationJobs(onlyReturnDataMigrationJobs *bool) *GetBackupJobsParams {
	o.SetOnlyReturnDataMigrationJobs(onlyReturnDataMigrationJobs)
	return o
}

// SetOnlyReturnDataMigrationJobs adds the onlyReturnDataMigrationJobs to the get backup jobs params
func (o *GetBackupJobsParams) SetOnlyReturnDataMigrationJobs(onlyReturnDataMigrationJobs *bool) {
	o.OnlyReturnDataMigrationJobs = onlyReturnDataMigrationJobs
}

// WithPolicyIds adds the policyIds to the get backup jobs params
func (o *GetBackupJobsParams) WithPolicyIds(policyIds []string) *GetBackupJobsParams {
	o.SetPolicyIds(policyIds)
	return o
}

// SetPolicyIds adds the policyIds to the get backup jobs params
func (o *GetBackupJobsParams) SetPolicyIds(policyIds []string) {
	o.PolicyIds = policyIds
}

// WithPruneExclusionSources adds the pruneExclusionSources to the get backup jobs params
func (o *GetBackupJobsParams) WithPruneExclusionSources(pruneExclusionSources *bool) *GetBackupJobsParams {
	o.SetPruneExclusionSources(pruneExclusionSources)
	return o
}

// SetPruneExclusionSources adds the pruneExclusionSources to the get backup jobs params
func (o *GetBackupJobsParams) SetPruneExclusionSources(pruneExclusionSources *bool) {
	o.PruneExclusionSources = pruneExclusionSources
}

// WithPruneSources adds the pruneSources to the get backup jobs params
func (o *GetBackupJobsParams) WithPruneSources(pruneSources *bool) *GetBackupJobsParams {
	o.SetPruneSources(pruneSources)
	return o
}

// SetPruneSources adds the pruneSources to the get backup jobs params
func (o *GetBackupJobsParams) SetPruneSources(pruneSources *bool) {
	o.PruneSources = pruneSources
}

// WithReturnCompleteSourceTree adds the returnCompleteSourceTree to the get backup jobs params
func (o *GetBackupJobsParams) WithReturnCompleteSourceTree(returnCompleteSourceTree *bool) *GetBackupJobsParams {
	o.SetReturnCompleteSourceTree(returnCompleteSourceTree)
	return o
}

// SetReturnCompleteSourceTree adds the returnCompleteSourceTree to the get backup jobs params
func (o *GetBackupJobsParams) SetReturnCompleteSourceTree(returnCompleteSourceTree *bool) {
	o.ReturnCompleteSourceTree = returnCompleteSourceTree
}

// WithTenantID adds the tenantID to the get backup jobs params
func (o *GetBackupJobsParams) WithTenantID(tenantID *string) *GetBackupJobsParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the get backup jobs params
func (o *GetBackupJobsParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *GetBackupJobsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.EnvTypes != nil {

		// binding items for envTypes
		joinedEnvTypes := o.bindParamEnvTypes(reg)

		// query array param envTypes
		if err := r.SetQueryParam("envTypes", joinedEnvTypes...); err != nil {
			return err
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IsActive != nil {

		// query param isActive
		var qrIsActive bool

		if o.IsActive != nil {
			qrIsActive = *o.IsActive
		}
		qIsActive := swag.FormatBool(qrIsActive)
		if qIsActive != "" {

			if err := r.SetQueryParam("isActive", qIsActive); err != nil {
				return err
			}
		}
	}

	if o.IsDeleted != nil {

		// query param isDeleted
		var qrIsDeleted bool

		if o.IsDeleted != nil {
			qrIsDeleted = *o.IsDeleted
		}
		qIsDeleted := swag.FormatBool(qrIsDeleted)
		if qIsDeleted != "" {

			if err := r.SetQueryParam("isDeleted", qIsDeleted); err != nil {
				return err
			}
		}
	}

	if o.IsLastRunSLAViolated != nil {

		// query param isLastRunSlaViolated
		var qrIsLastRunSLAViolated bool

		if o.IsLastRunSLAViolated != nil {
			qrIsLastRunSLAViolated = *o.IsLastRunSLAViolated
		}
		qIsLastRunSLAViolated := swag.FormatBool(qrIsLastRunSLAViolated)
		if qIsLastRunSLAViolated != "" {

			if err := r.SetQueryParam("isLastRunSlaViolated", qIsLastRunSLAViolated); err != nil {
				return err
			}
		}
	}

	if o.Names != nil {

		// binding items for names
		joinedNames := o.bindParamNames(reg)

		// query array param names
		if err := r.SetQueryParam("names", joinedNames...); err != nil {
			return err
		}
	}

	if o.OnlyReturnDataMigrationJobs != nil {

		// query param onlyReturnDataMigrationJobs
		var qrOnlyReturnDataMigrationJobs bool

		if o.OnlyReturnDataMigrationJobs != nil {
			qrOnlyReturnDataMigrationJobs = *o.OnlyReturnDataMigrationJobs
		}
		qOnlyReturnDataMigrationJobs := swag.FormatBool(qrOnlyReturnDataMigrationJobs)
		if qOnlyReturnDataMigrationJobs != "" {

			if err := r.SetQueryParam("onlyReturnDataMigrationJobs", qOnlyReturnDataMigrationJobs); err != nil {
				return err
			}
		}
	}

	if o.PolicyIds != nil {

		// binding items for policyIds
		joinedPolicyIds := o.bindParamPolicyIds(reg)

		// query array param policyIds
		if err := r.SetQueryParam("policyIds", joinedPolicyIds...); err != nil {
			return err
		}
	}

	if o.PruneExclusionSources != nil {

		// query param pruneExclusionSources
		var qrPruneExclusionSources bool

		if o.PruneExclusionSources != nil {
			qrPruneExclusionSources = *o.PruneExclusionSources
		}
		qPruneExclusionSources := swag.FormatBool(qrPruneExclusionSources)
		if qPruneExclusionSources != "" {

			if err := r.SetQueryParam("pruneExclusionSources", qPruneExclusionSources); err != nil {
				return err
			}
		}
	}

	if o.PruneSources != nil {

		// query param pruneSources
		var qrPruneSources bool

		if o.PruneSources != nil {
			qrPruneSources = *o.PruneSources
		}
		qPruneSources := swag.FormatBool(qrPruneSources)
		if qPruneSources != "" {

			if err := r.SetQueryParam("pruneSources", qPruneSources); err != nil {
				return err
			}
		}
	}

	if o.ReturnCompleteSourceTree != nil {

		// query param returnCompleteSourceTree
		var qrReturnCompleteSourceTree bool

		if o.ReturnCompleteSourceTree != nil {
			qrReturnCompleteSourceTree = *o.ReturnCompleteSourceTree
		}
		qReturnCompleteSourceTree := swag.FormatBool(qrReturnCompleteSourceTree)
		if qReturnCompleteSourceTree != "" {

			if err := r.SetQueryParam("returnCompleteSourceTree", qReturnCompleteSourceTree); err != nil {
				return err
			}
		}
	}

	if o.TenantID != nil {

		// query param tenantId
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenantId", qTenantID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetBackupJobs binds the parameter envTypes
func (o *GetBackupJobsParams) bindParamEnvTypes(formats strfmt.Registry) []string {
	envTypesIR := o.EnvTypes

	var envTypesIC []string
	for _, envTypesIIR := range envTypesIR { // explode []int64

		envTypesIIV := swag.FormatInt64(envTypesIIR) // int64 as string
		envTypesIC = append(envTypesIC, envTypesIIV)
	}

	// items.CollectionFormat: ""
	envTypesIS := swag.JoinByFormat(envTypesIC, "")

	return envTypesIS
}

// bindParamGetBackupJobs binds the parameter ids
func (o *GetBackupJobsParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetBackupJobs binds the parameter names
func (o *GetBackupJobsParams) bindParamNames(formats strfmt.Registry) []string {
	namesIR := o.Names

	var namesIC []string
	for _, namesIIR := range namesIR { // explode []string

		namesIIV := namesIIR // string as string
		namesIC = append(namesIC, namesIIV)
	}

	// items.CollectionFormat: ""
	namesIS := swag.JoinByFormat(namesIC, "")

	return namesIS
}

// bindParamGetBackupJobs binds the parameter policyIds
func (o *GetBackupJobsParams) bindParamPolicyIds(formats strfmt.Registry) []string {
	policyIdsIR := o.PolicyIds

	var policyIdsIC []string
	for _, policyIdsIIR := range policyIdsIR { // explode []string

		policyIdsIIV := policyIdsIIR // string as string
		policyIdsIC = append(policyIdsIC, policyIdsIIV)
	}

	// items.CollectionFormat: ""
	policyIdsIS := swag.JoinByFormat(policyIdsIC, "")

	return policyIdsIS
}
