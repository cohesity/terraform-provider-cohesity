// Code generated by go-swagger; DO NOT EDIT.

package backup_jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetBackupJobRunsParams creates a new GetBackupJobRunsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBackupJobRunsParams() *GetBackupJobRunsParams {
	return &GetBackupJobRunsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBackupJobRunsParamsWithTimeout creates a new GetBackupJobRunsParams object
// with the ability to set a timeout on a request.
func NewGetBackupJobRunsParamsWithTimeout(timeout time.Duration) *GetBackupJobRunsParams {
	return &GetBackupJobRunsParams{
		timeout: timeout,
	}
}

// NewGetBackupJobRunsParamsWithContext creates a new GetBackupJobRunsParams object
// with the ability to set a context for a request.
func NewGetBackupJobRunsParamsWithContext(ctx context.Context) *GetBackupJobRunsParams {
	return &GetBackupJobRunsParams{
		Context: ctx,
	}
}

// NewGetBackupJobRunsParamsWithHTTPClient creates a new GetBackupJobRunsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBackupJobRunsParamsWithHTTPClient(client *http.Client) *GetBackupJobRunsParams {
	return &GetBackupJobRunsParams{
		HTTPClient: client,
	}
}

/*
GetBackupJobRunsParams contains all the parameters to send to the API endpoint

	for the get backup job runs operation.

	Typically these are written to a http.Request.
*/
type GetBackupJobRunsParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* CopyRunTypes.

	     Following field contains a list of valid CopyTarget i.e Replication,
	Archival representing the types of copy runs needed to be looked at
	the given time window, denoted via TimeRange.
	This input is only considered valid when
	filterByCopyTaskEndTime is set to true. Else it is ignored.
	*/
	CopyRunTypes []string

	/* EndTimeUsecs.

	     EndTimeUsecs is the end time in usecs. If not set, "now" is treated as the
	end time.

	     Format: int64
	*/
	EndTimeUsecs *int64

	/* EntityID.

	     EntityId is the parameter to filter job runs by sources being protected(VM,
	view,SQL etc.). EntityId is the Id of the entity protected by jobs whose
	runs will be returned.

	     Format: int64
	*/
	EntityID *int64

	/* ExactMatchStartTimeUsecs.

	     ExactMatchStartTimeUsecs is the start time (in usecs) of a particular run
	in a job to fetch. If this is provided, job_id must also be provided. If
	this is not provided, then all job runs (for a single job or all jobs) that
	match other filter criteria will be fetched.

	     Format: int64
	*/
	ExactMatchStartTimeUsecs *int64

	/* ExcludeErrorRuns.

	     ExcludeErrorRuns specifies whether to exclude runs with error. If no value
	is specified, then runs with errors are included.
	*/
	ExcludeErrorRuns *bool

	/* ExcludeNonRestoreableRuns.

	     Exclude runs that cannot be restored. Runs without any successful object
	will be excluded. The default value is false.
	*/
	ExcludeNonRestoreableRuns *bool

	/* ExcludeTasks.

	     ExcludeTasks is the parameter to exclude tasks from the runs. This will
	make the JSON lighter weight.
	*/
	ExcludeTasks *bool

	/* FilterByCopyTaskEndTime.

	     If true, then the details of the backup runs along with CopyRuns will be
	returned where those backup run has atleast one CopyTask that is completed
	in the given Time Range. If this field is true, then other filters such as
	filterByEndTime should not be applied.
	*/
	FilterByCopyTaskEndTime *bool

	/* FilterByEndTime.

	     If true, the runs with end time within the specified time range will be
	returned. Otherwise, the runs with start time in the time range are
	returned.
	*/
	FilterByEndTime *bool

	/* ID.

	     Id is the id of the backup job. If this is not specified, runs for all
	backup jobs will be returned.

	     Format: int64
	*/
	ID *int64

	/* IncludeExtensionInfo.

	   Include proto extensions if they are extended.
	*/
	IncludeExtensionInfo *bool

	/* IncludeRpoSnapshots.

	     If true, then the snapshots for Protection Sources protected by Rpo
	policies will also be returned.
	*/
	IncludeRpoSnapshots *bool

	/* IncludeSourceDeletedJobs.

	   If set, Magneto will also return the deleted jobs for the given EntityId.
	*/
	IncludeSourceDeletedJobs *bool

	/* NumRuns.

	     NumRuns is the number of runs. If specified, at most these many runs will
	be returned.

	     Format: int64
	*/
	NumRuns *int64

	/* OnlyIncludeSourceTask.

	     If set, Magneto will return only given source tasks in the job runs for
	the given source(EntityId).
	*/
	OnlyIncludeSourceTask *bool

	/* OnlyIncludeSuccessfulCopyRuns.

	     If marked false, all CopyTasks in any finished state like cancelled,
	failed in the given time window will be considered. Otherwise if kept
	empty or marked as true, only the copy_tasks with kSuccess status will
	be considered.
	This input is only considered valid when
	filterByCopyTaskEndTime is set to true. Else it is ignored.
	*/
	OnlyIncludeSuccessfulCopyRuns *bool

	/* OnlyReturnDataMigrationJobs.

	     OnlyReturnDataMigrationJobs specifies if only data stubbing jobs should be
	returned. If not set, no data migration job will be returned.
	*/
	OnlyReturnDataMigrationJobs *bool

	/* OnlyReturnShellInfo.

	     OnlyReturnShellInfo returns only shell info such as run's start time,
	type, error if any.
	*/
	OnlyReturnShellInfo *bool

	/* OutputFormat.

	     OutputFormat is the Output format for the output. If it is not specified,
	default is json.
	*/
	OutputFormat *string

	/* RunTypes.

	   Filter by run type i.e. kFull, kRegular, kLog.
	*/
	RunTypes []string

	/* StartTimeUsecs.

	     StartTimeUsecs is the start time in usecs. If not set, historical
	information all the way to the beginning is looked at.

	     Format: int64
	*/
	StartTimeUsecs *int64

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	/* UseCaseType.

	     UseCaseType represents various types of usecases for the backupjobruns
	api. According to the value of UseCaseType, various redundant information
	will be removed or cleaned up.
	UseCaseType represents various types of usecases for the backupjobruns
	api.
	'KUseCaseType_kObjectRunsPage' indicates that the caller is object runs
	page.
	*/
	UseCaseType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get backup job runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBackupJobRunsParams) WithDefaults() *GetBackupJobRunsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get backup job runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBackupJobRunsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get backup job runs params
func (o *GetBackupJobRunsParams) WithTimeout(timeout time.Duration) *GetBackupJobRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get backup job runs params
func (o *GetBackupJobRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get backup job runs params
func (o *GetBackupJobRunsParams) WithContext(ctx context.Context) *GetBackupJobRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get backup job runs params
func (o *GetBackupJobRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get backup job runs params
func (o *GetBackupJobRunsParams) WithHTTPClient(client *http.Client) *GetBackupJobRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get backup job runs params
func (o *GetBackupJobRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get backup job runs params
func (o *GetBackupJobRunsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetBackupJobRunsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get backup job runs params
func (o *GetBackupJobRunsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithCopyRunTypes adds the copyRunTypes to the get backup job runs params
func (o *GetBackupJobRunsParams) WithCopyRunTypes(copyRunTypes []string) *GetBackupJobRunsParams {
	o.SetCopyRunTypes(copyRunTypes)
	return o
}

// SetCopyRunTypes adds the copyRunTypes to the get backup job runs params
func (o *GetBackupJobRunsParams) SetCopyRunTypes(copyRunTypes []string) {
	o.CopyRunTypes = copyRunTypes
}

// WithEndTimeUsecs adds the endTimeUsecs to the get backup job runs params
func (o *GetBackupJobRunsParams) WithEndTimeUsecs(endTimeUsecs *int64) *GetBackupJobRunsParams {
	o.SetEndTimeUsecs(endTimeUsecs)
	return o
}

// SetEndTimeUsecs adds the endTimeUsecs to the get backup job runs params
func (o *GetBackupJobRunsParams) SetEndTimeUsecs(endTimeUsecs *int64) {
	o.EndTimeUsecs = endTimeUsecs
}

// WithEntityID adds the entityID to the get backup job runs params
func (o *GetBackupJobRunsParams) WithEntityID(entityID *int64) *GetBackupJobRunsParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the get backup job runs params
func (o *GetBackupJobRunsParams) SetEntityID(entityID *int64) {
	o.EntityID = entityID
}

// WithExactMatchStartTimeUsecs adds the exactMatchStartTimeUsecs to the get backup job runs params
func (o *GetBackupJobRunsParams) WithExactMatchStartTimeUsecs(exactMatchStartTimeUsecs *int64) *GetBackupJobRunsParams {
	o.SetExactMatchStartTimeUsecs(exactMatchStartTimeUsecs)
	return o
}

// SetExactMatchStartTimeUsecs adds the exactMatchStartTimeUsecs to the get backup job runs params
func (o *GetBackupJobRunsParams) SetExactMatchStartTimeUsecs(exactMatchStartTimeUsecs *int64) {
	o.ExactMatchStartTimeUsecs = exactMatchStartTimeUsecs
}

// WithExcludeErrorRuns adds the excludeErrorRuns to the get backup job runs params
func (o *GetBackupJobRunsParams) WithExcludeErrorRuns(excludeErrorRuns *bool) *GetBackupJobRunsParams {
	o.SetExcludeErrorRuns(excludeErrorRuns)
	return o
}

// SetExcludeErrorRuns adds the excludeErrorRuns to the get backup job runs params
func (o *GetBackupJobRunsParams) SetExcludeErrorRuns(excludeErrorRuns *bool) {
	o.ExcludeErrorRuns = excludeErrorRuns
}

// WithExcludeNonRestoreableRuns adds the excludeNonRestoreableRuns to the get backup job runs params
func (o *GetBackupJobRunsParams) WithExcludeNonRestoreableRuns(excludeNonRestoreableRuns *bool) *GetBackupJobRunsParams {
	o.SetExcludeNonRestoreableRuns(excludeNonRestoreableRuns)
	return o
}

// SetExcludeNonRestoreableRuns adds the excludeNonRestoreableRuns to the get backup job runs params
func (o *GetBackupJobRunsParams) SetExcludeNonRestoreableRuns(excludeNonRestoreableRuns *bool) {
	o.ExcludeNonRestoreableRuns = excludeNonRestoreableRuns
}

// WithExcludeTasks adds the excludeTasks to the get backup job runs params
func (o *GetBackupJobRunsParams) WithExcludeTasks(excludeTasks *bool) *GetBackupJobRunsParams {
	o.SetExcludeTasks(excludeTasks)
	return o
}

// SetExcludeTasks adds the excludeTasks to the get backup job runs params
func (o *GetBackupJobRunsParams) SetExcludeTasks(excludeTasks *bool) {
	o.ExcludeTasks = excludeTasks
}

// WithFilterByCopyTaskEndTime adds the filterByCopyTaskEndTime to the get backup job runs params
func (o *GetBackupJobRunsParams) WithFilterByCopyTaskEndTime(filterByCopyTaskEndTime *bool) *GetBackupJobRunsParams {
	o.SetFilterByCopyTaskEndTime(filterByCopyTaskEndTime)
	return o
}

// SetFilterByCopyTaskEndTime adds the filterByCopyTaskEndTime to the get backup job runs params
func (o *GetBackupJobRunsParams) SetFilterByCopyTaskEndTime(filterByCopyTaskEndTime *bool) {
	o.FilterByCopyTaskEndTime = filterByCopyTaskEndTime
}

// WithFilterByEndTime adds the filterByEndTime to the get backup job runs params
func (o *GetBackupJobRunsParams) WithFilterByEndTime(filterByEndTime *bool) *GetBackupJobRunsParams {
	o.SetFilterByEndTime(filterByEndTime)
	return o
}

// SetFilterByEndTime adds the filterByEndTime to the get backup job runs params
func (o *GetBackupJobRunsParams) SetFilterByEndTime(filterByEndTime *bool) {
	o.FilterByEndTime = filterByEndTime
}

// WithID adds the id to the get backup job runs params
func (o *GetBackupJobRunsParams) WithID(id *int64) *GetBackupJobRunsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get backup job runs params
func (o *GetBackupJobRunsParams) SetID(id *int64) {
	o.ID = id
}

// WithIncludeExtensionInfo adds the includeExtensionInfo to the get backup job runs params
func (o *GetBackupJobRunsParams) WithIncludeExtensionInfo(includeExtensionInfo *bool) *GetBackupJobRunsParams {
	o.SetIncludeExtensionInfo(includeExtensionInfo)
	return o
}

// SetIncludeExtensionInfo adds the includeExtensionInfo to the get backup job runs params
func (o *GetBackupJobRunsParams) SetIncludeExtensionInfo(includeExtensionInfo *bool) {
	o.IncludeExtensionInfo = includeExtensionInfo
}

// WithIncludeRpoSnapshots adds the includeRpoSnapshots to the get backup job runs params
func (o *GetBackupJobRunsParams) WithIncludeRpoSnapshots(includeRpoSnapshots *bool) *GetBackupJobRunsParams {
	o.SetIncludeRpoSnapshots(includeRpoSnapshots)
	return o
}

// SetIncludeRpoSnapshots adds the includeRpoSnapshots to the get backup job runs params
func (o *GetBackupJobRunsParams) SetIncludeRpoSnapshots(includeRpoSnapshots *bool) {
	o.IncludeRpoSnapshots = includeRpoSnapshots
}

// WithIncludeSourceDeletedJobs adds the includeSourceDeletedJobs to the get backup job runs params
func (o *GetBackupJobRunsParams) WithIncludeSourceDeletedJobs(includeSourceDeletedJobs *bool) *GetBackupJobRunsParams {
	o.SetIncludeSourceDeletedJobs(includeSourceDeletedJobs)
	return o
}

// SetIncludeSourceDeletedJobs adds the includeSourceDeletedJobs to the get backup job runs params
func (o *GetBackupJobRunsParams) SetIncludeSourceDeletedJobs(includeSourceDeletedJobs *bool) {
	o.IncludeSourceDeletedJobs = includeSourceDeletedJobs
}

// WithNumRuns adds the numRuns to the get backup job runs params
func (o *GetBackupJobRunsParams) WithNumRuns(numRuns *int64) *GetBackupJobRunsParams {
	o.SetNumRuns(numRuns)
	return o
}

// SetNumRuns adds the numRuns to the get backup job runs params
func (o *GetBackupJobRunsParams) SetNumRuns(numRuns *int64) {
	o.NumRuns = numRuns
}

// WithOnlyIncludeSourceTask adds the onlyIncludeSourceTask to the get backup job runs params
func (o *GetBackupJobRunsParams) WithOnlyIncludeSourceTask(onlyIncludeSourceTask *bool) *GetBackupJobRunsParams {
	o.SetOnlyIncludeSourceTask(onlyIncludeSourceTask)
	return o
}

// SetOnlyIncludeSourceTask adds the onlyIncludeSourceTask to the get backup job runs params
func (o *GetBackupJobRunsParams) SetOnlyIncludeSourceTask(onlyIncludeSourceTask *bool) {
	o.OnlyIncludeSourceTask = onlyIncludeSourceTask
}

// WithOnlyIncludeSuccessfulCopyRuns adds the onlyIncludeSuccessfulCopyRuns to the get backup job runs params
func (o *GetBackupJobRunsParams) WithOnlyIncludeSuccessfulCopyRuns(onlyIncludeSuccessfulCopyRuns *bool) *GetBackupJobRunsParams {
	o.SetOnlyIncludeSuccessfulCopyRuns(onlyIncludeSuccessfulCopyRuns)
	return o
}

// SetOnlyIncludeSuccessfulCopyRuns adds the onlyIncludeSuccessfulCopyRuns to the get backup job runs params
func (o *GetBackupJobRunsParams) SetOnlyIncludeSuccessfulCopyRuns(onlyIncludeSuccessfulCopyRuns *bool) {
	o.OnlyIncludeSuccessfulCopyRuns = onlyIncludeSuccessfulCopyRuns
}

// WithOnlyReturnDataMigrationJobs adds the onlyReturnDataMigrationJobs to the get backup job runs params
func (o *GetBackupJobRunsParams) WithOnlyReturnDataMigrationJobs(onlyReturnDataMigrationJobs *bool) *GetBackupJobRunsParams {
	o.SetOnlyReturnDataMigrationJobs(onlyReturnDataMigrationJobs)
	return o
}

// SetOnlyReturnDataMigrationJobs adds the onlyReturnDataMigrationJobs to the get backup job runs params
func (o *GetBackupJobRunsParams) SetOnlyReturnDataMigrationJobs(onlyReturnDataMigrationJobs *bool) {
	o.OnlyReturnDataMigrationJobs = onlyReturnDataMigrationJobs
}

// WithOnlyReturnShellInfo adds the onlyReturnShellInfo to the get backup job runs params
func (o *GetBackupJobRunsParams) WithOnlyReturnShellInfo(onlyReturnShellInfo *bool) *GetBackupJobRunsParams {
	o.SetOnlyReturnShellInfo(onlyReturnShellInfo)
	return o
}

// SetOnlyReturnShellInfo adds the onlyReturnShellInfo to the get backup job runs params
func (o *GetBackupJobRunsParams) SetOnlyReturnShellInfo(onlyReturnShellInfo *bool) {
	o.OnlyReturnShellInfo = onlyReturnShellInfo
}

// WithOutputFormat adds the outputFormat to the get backup job runs params
func (o *GetBackupJobRunsParams) WithOutputFormat(outputFormat *string) *GetBackupJobRunsParams {
	o.SetOutputFormat(outputFormat)
	return o
}

// SetOutputFormat adds the outputFormat to the get backup job runs params
func (o *GetBackupJobRunsParams) SetOutputFormat(outputFormat *string) {
	o.OutputFormat = outputFormat
}

// WithRunTypes adds the runTypes to the get backup job runs params
func (o *GetBackupJobRunsParams) WithRunTypes(runTypes []string) *GetBackupJobRunsParams {
	o.SetRunTypes(runTypes)
	return o
}

// SetRunTypes adds the runTypes to the get backup job runs params
func (o *GetBackupJobRunsParams) SetRunTypes(runTypes []string) {
	o.RunTypes = runTypes
}

// WithStartTimeUsecs adds the startTimeUsecs to the get backup job runs params
func (o *GetBackupJobRunsParams) WithStartTimeUsecs(startTimeUsecs *int64) *GetBackupJobRunsParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the get backup job runs params
func (o *GetBackupJobRunsParams) SetStartTimeUsecs(startTimeUsecs *int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WithTenantIds adds the tenantIds to the get backup job runs params
func (o *GetBackupJobRunsParams) WithTenantIds(tenantIds []string) *GetBackupJobRunsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get backup job runs params
func (o *GetBackupJobRunsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithUseCaseType adds the useCaseType to the get backup job runs params
func (o *GetBackupJobRunsParams) WithUseCaseType(useCaseType *string) *GetBackupJobRunsParams {
	o.SetUseCaseType(useCaseType)
	return o
}

// SetUseCaseType adds the useCaseType to the get backup job runs params
func (o *GetBackupJobRunsParams) SetUseCaseType(useCaseType *string) {
	o.UseCaseType = useCaseType
}

// WriteToRequest writes these params to a swagger request
func (o *GetBackupJobRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.CopyRunTypes != nil {

		// binding items for copyRunTypes
		joinedCopyRunTypes := o.bindParamCopyRunTypes(reg)

		// query array param copyRunTypes
		if err := r.SetQueryParam("copyRunTypes", joinedCopyRunTypes...); err != nil {
			return err
		}
	}

	if o.EndTimeUsecs != nil {

		// query param endTimeUsecs
		var qrEndTimeUsecs int64

		if o.EndTimeUsecs != nil {
			qrEndTimeUsecs = *o.EndTimeUsecs
		}
		qEndTimeUsecs := swag.FormatInt64(qrEndTimeUsecs)
		if qEndTimeUsecs != "" {

			if err := r.SetQueryParam("endTimeUsecs", qEndTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.EntityID != nil {

		// query param entityId
		var qrEntityID int64

		if o.EntityID != nil {
			qrEntityID = *o.EntityID
		}
		qEntityID := swag.FormatInt64(qrEntityID)
		if qEntityID != "" {

			if err := r.SetQueryParam("entityId", qEntityID); err != nil {
				return err
			}
		}
	}

	if o.ExactMatchStartTimeUsecs != nil {

		// query param exactMatchStartTimeUsecs
		var qrExactMatchStartTimeUsecs int64

		if o.ExactMatchStartTimeUsecs != nil {
			qrExactMatchStartTimeUsecs = *o.ExactMatchStartTimeUsecs
		}
		qExactMatchStartTimeUsecs := swag.FormatInt64(qrExactMatchStartTimeUsecs)
		if qExactMatchStartTimeUsecs != "" {

			if err := r.SetQueryParam("exactMatchStartTimeUsecs", qExactMatchStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.ExcludeErrorRuns != nil {

		// query param excludeErrorRuns
		var qrExcludeErrorRuns bool

		if o.ExcludeErrorRuns != nil {
			qrExcludeErrorRuns = *o.ExcludeErrorRuns
		}
		qExcludeErrorRuns := swag.FormatBool(qrExcludeErrorRuns)
		if qExcludeErrorRuns != "" {

			if err := r.SetQueryParam("excludeErrorRuns", qExcludeErrorRuns); err != nil {
				return err
			}
		}
	}

	if o.ExcludeNonRestoreableRuns != nil {

		// query param excludeNonRestoreableRuns
		var qrExcludeNonRestoreableRuns bool

		if o.ExcludeNonRestoreableRuns != nil {
			qrExcludeNonRestoreableRuns = *o.ExcludeNonRestoreableRuns
		}
		qExcludeNonRestoreableRuns := swag.FormatBool(qrExcludeNonRestoreableRuns)
		if qExcludeNonRestoreableRuns != "" {

			if err := r.SetQueryParam("excludeNonRestoreableRuns", qExcludeNonRestoreableRuns); err != nil {
				return err
			}
		}
	}

	if o.ExcludeTasks != nil {

		// query param excludeTasks
		var qrExcludeTasks bool

		if o.ExcludeTasks != nil {
			qrExcludeTasks = *o.ExcludeTasks
		}
		qExcludeTasks := swag.FormatBool(qrExcludeTasks)
		if qExcludeTasks != "" {

			if err := r.SetQueryParam("excludeTasks", qExcludeTasks); err != nil {
				return err
			}
		}
	}

	if o.FilterByCopyTaskEndTime != nil {

		// query param filterByCopyTaskEndTime
		var qrFilterByCopyTaskEndTime bool

		if o.FilterByCopyTaskEndTime != nil {
			qrFilterByCopyTaskEndTime = *o.FilterByCopyTaskEndTime
		}
		qFilterByCopyTaskEndTime := swag.FormatBool(qrFilterByCopyTaskEndTime)
		if qFilterByCopyTaskEndTime != "" {

			if err := r.SetQueryParam("filterByCopyTaskEndTime", qFilterByCopyTaskEndTime); err != nil {
				return err
			}
		}
	}

	if o.FilterByEndTime != nil {

		// query param filterByEndTime
		var qrFilterByEndTime bool

		if o.FilterByEndTime != nil {
			qrFilterByEndTime = *o.FilterByEndTime
		}
		qFilterByEndTime := swag.FormatBool(qrFilterByEndTime)
		if qFilterByEndTime != "" {

			if err := r.SetQueryParam("filterByEndTime", qFilterByEndTime); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.IncludeExtensionInfo != nil {

		// query param includeExtensionInfo
		var qrIncludeExtensionInfo bool

		if o.IncludeExtensionInfo != nil {
			qrIncludeExtensionInfo = *o.IncludeExtensionInfo
		}
		qIncludeExtensionInfo := swag.FormatBool(qrIncludeExtensionInfo)
		if qIncludeExtensionInfo != "" {

			if err := r.SetQueryParam("includeExtensionInfo", qIncludeExtensionInfo); err != nil {
				return err
			}
		}
	}

	if o.IncludeRpoSnapshots != nil {

		// query param includeRpoSnapshots
		var qrIncludeRpoSnapshots bool

		if o.IncludeRpoSnapshots != nil {
			qrIncludeRpoSnapshots = *o.IncludeRpoSnapshots
		}
		qIncludeRpoSnapshots := swag.FormatBool(qrIncludeRpoSnapshots)
		if qIncludeRpoSnapshots != "" {

			if err := r.SetQueryParam("includeRpoSnapshots", qIncludeRpoSnapshots); err != nil {
				return err
			}
		}
	}

	if o.IncludeSourceDeletedJobs != nil {

		// query param includeSourceDeletedJobs
		var qrIncludeSourceDeletedJobs bool

		if o.IncludeSourceDeletedJobs != nil {
			qrIncludeSourceDeletedJobs = *o.IncludeSourceDeletedJobs
		}
		qIncludeSourceDeletedJobs := swag.FormatBool(qrIncludeSourceDeletedJobs)
		if qIncludeSourceDeletedJobs != "" {

			if err := r.SetQueryParam("includeSourceDeletedJobs", qIncludeSourceDeletedJobs); err != nil {
				return err
			}
		}
	}

	if o.NumRuns != nil {

		// query param numRuns
		var qrNumRuns int64

		if o.NumRuns != nil {
			qrNumRuns = *o.NumRuns
		}
		qNumRuns := swag.FormatInt64(qrNumRuns)
		if qNumRuns != "" {

			if err := r.SetQueryParam("numRuns", qNumRuns); err != nil {
				return err
			}
		}
	}

	if o.OnlyIncludeSourceTask != nil {

		// query param onlyIncludeSourceTask
		var qrOnlyIncludeSourceTask bool

		if o.OnlyIncludeSourceTask != nil {
			qrOnlyIncludeSourceTask = *o.OnlyIncludeSourceTask
		}
		qOnlyIncludeSourceTask := swag.FormatBool(qrOnlyIncludeSourceTask)
		if qOnlyIncludeSourceTask != "" {

			if err := r.SetQueryParam("onlyIncludeSourceTask", qOnlyIncludeSourceTask); err != nil {
				return err
			}
		}
	}

	if o.OnlyIncludeSuccessfulCopyRuns != nil {

		// query param onlyIncludeSuccessfulCopyRuns
		var qrOnlyIncludeSuccessfulCopyRuns bool

		if o.OnlyIncludeSuccessfulCopyRuns != nil {
			qrOnlyIncludeSuccessfulCopyRuns = *o.OnlyIncludeSuccessfulCopyRuns
		}
		qOnlyIncludeSuccessfulCopyRuns := swag.FormatBool(qrOnlyIncludeSuccessfulCopyRuns)
		if qOnlyIncludeSuccessfulCopyRuns != "" {

			if err := r.SetQueryParam("onlyIncludeSuccessfulCopyRuns", qOnlyIncludeSuccessfulCopyRuns); err != nil {
				return err
			}
		}
	}

	if o.OnlyReturnDataMigrationJobs != nil {

		// query param onlyReturnDataMigrationJobs
		var qrOnlyReturnDataMigrationJobs bool

		if o.OnlyReturnDataMigrationJobs != nil {
			qrOnlyReturnDataMigrationJobs = *o.OnlyReturnDataMigrationJobs
		}
		qOnlyReturnDataMigrationJobs := swag.FormatBool(qrOnlyReturnDataMigrationJobs)
		if qOnlyReturnDataMigrationJobs != "" {

			if err := r.SetQueryParam("onlyReturnDataMigrationJobs", qOnlyReturnDataMigrationJobs); err != nil {
				return err
			}
		}
	}

	if o.OnlyReturnShellInfo != nil {

		// query param onlyReturnShellInfo
		var qrOnlyReturnShellInfo bool

		if o.OnlyReturnShellInfo != nil {
			qrOnlyReturnShellInfo = *o.OnlyReturnShellInfo
		}
		qOnlyReturnShellInfo := swag.FormatBool(qrOnlyReturnShellInfo)
		if qOnlyReturnShellInfo != "" {

			if err := r.SetQueryParam("onlyReturnShellInfo", qOnlyReturnShellInfo); err != nil {
				return err
			}
		}
	}

	if o.OutputFormat != nil {

		// query param outputFormat
		var qrOutputFormat string

		if o.OutputFormat != nil {
			qrOutputFormat = *o.OutputFormat
		}
		qOutputFormat := qrOutputFormat
		if qOutputFormat != "" {

			if err := r.SetQueryParam("outputFormat", qOutputFormat); err != nil {
				return err
			}
		}
	}

	if o.RunTypes != nil {

		// binding items for runTypes
		joinedRunTypes := o.bindParamRunTypes(reg)

		// query array param runTypes
		if err := r.SetQueryParam("runTypes", joinedRunTypes...); err != nil {
			return err
		}
	}

	if o.StartTimeUsecs != nil {

		// query param startTimeUsecs
		var qrStartTimeUsecs int64

		if o.StartTimeUsecs != nil {
			qrStartTimeUsecs = *o.StartTimeUsecs
		}
		qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
		if qStartTimeUsecs != "" {

			if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.UseCaseType != nil {

		// query param useCaseType
		var qrUseCaseType string

		if o.UseCaseType != nil {
			qrUseCaseType = *o.UseCaseType
		}
		qUseCaseType := qrUseCaseType
		if qUseCaseType != "" {

			if err := r.SetQueryParam("useCaseType", qUseCaseType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetBackupJobRuns binds the parameter copyRunTypes
func (o *GetBackupJobRunsParams) bindParamCopyRunTypes(formats strfmt.Registry) []string {
	copyRunTypesIR := o.CopyRunTypes

	var copyRunTypesIC []string
	for _, copyRunTypesIIR := range copyRunTypesIR { // explode []string

		copyRunTypesIIV := copyRunTypesIIR // string as string
		copyRunTypesIC = append(copyRunTypesIC, copyRunTypesIIV)
	}

	// items.CollectionFormat: ""
	copyRunTypesIS := swag.JoinByFormat(copyRunTypesIC, "")

	return copyRunTypesIS
}

// bindParamGetBackupJobRuns binds the parameter runTypes
func (o *GetBackupJobRunsParams) bindParamRunTypes(formats strfmt.Registry) []string {
	runTypesIR := o.RunTypes

	var runTypesIC []string
	for _, runTypesIIR := range runTypesIR { // explode []string

		runTypesIIV := runTypesIIR // string as string
		runTypesIC = append(runTypesIC, runTypesIIV)
	}

	// items.CollectionFormat: ""
	runTypesIS := swag.JoinByFormat(runTypesIC, "")

	return runTypesIS
}

// bindParamGetBackupJobRuns binds the parameter tenantIds
func (o *GetBackupJobRunsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
