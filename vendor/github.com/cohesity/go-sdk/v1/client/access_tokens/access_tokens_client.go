// Code generated by go-swagger; DO NOT EDIT.

package access_tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new access tokens API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new access tokens API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new access tokens API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for access tokens API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GenerateAccessToken(params *GenerateAccessTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateAccessTokenCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GenerateAccessToken generates an access token

	```No Privileges Required``` <br><br>Before making other REST API requests, your REST client must make a

'POST /public/accessToken' request with a valid Cohesity username and
password. This POST request returns an access token and type
in the response that is generated by the Cohesity Cluster.
Subsequent requests to other Cohesity REST API operations must
specify the returned access token and type by setting 'Authorization'
in the http header in the following format:

Authorization: token_type access_token

The generated token is valid for 24 hours. If a request is made with
an expired token, the 'Token expired' error message is returned.
Add code to your REST client to check for this error and request
another access token before reissuing the request.
*/
func (a *Client) GenerateAccessToken(params *GenerateAccessTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateAccessTokenCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GenerateAccessToken",
		Method:             "POST",
		PathPattern:        "/public/accessTokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateAccessTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateAccessTokenCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GenerateAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
