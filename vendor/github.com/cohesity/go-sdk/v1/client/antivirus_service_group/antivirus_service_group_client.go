// Code generated by go-swagger; DO NOT EDIT.

package antivirus_service_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new antivirus service group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new antivirus service group API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new antivirus service group API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for antivirus service group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AntivirusServiceGroupState(params *AntivirusServiceGroupStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AntivirusServiceGroupStateOK, error)

	CreateAntivirusServiceGroup(params *CreateAntivirusServiceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAntivirusServiceGroupCreated, error)

	DeleteAntivirusServiceGroup(params *DeleteAntivirusServiceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAntivirusServiceGroupNoContent, error)

	DeleteInfectedFiles(params *DeleteInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInfectedFilesOK, error)

	GetAntivirusServiceGroup(params *GetAntivirusServiceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAntivirusServiceGroupOK, error)

	GetIcapConnectionStatus(params *GetIcapConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIcapConnectionStatusOK, error)

	GetInfectedFiles(params *GetInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInfectedFilesOK, error)

	UpdateAntivirusServiceGroup(params *UpdateAntivirusServiceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAntivirusServiceGroupOK, error)

	UpdateInfectedFiles(params *UpdateInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateInfectedFilesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AntivirusServiceGroupState changes the state of an antivirus service group

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the state of an antivirus service group upon completion.
*/
func (a *Client) AntivirusServiceGroupState(params *AntivirusServiceGroupStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AntivirusServiceGroupStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAntivirusServiceGroupStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AntivirusServiceGroupState",
		Method:             "PUT",
		PathPattern:        "/public/antivirusGroups/states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AntivirusServiceGroupStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AntivirusServiceGroupStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AntivirusServiceGroupStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAntivirusServiceGroup creates an antivirus service group

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the created Antivirus service group.
*/
func (a *Client) CreateAntivirusServiceGroup(params *CreateAntivirusServiceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAntivirusServiceGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAntivirusServiceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAntivirusServiceGroup",
		Method:             "POST",
		PathPattern:        "/public/antivirusGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAntivirusServiceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAntivirusServiceGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAntivirusServiceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAntivirusServiceGroup deletes an antivirus service group corresponding to the specified antivirus service group Id

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteAntivirusServiceGroup(params *DeleteAntivirusServiceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAntivirusServiceGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAntivirusServiceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAntivirusServiceGroup",
		Method:             "DELETE",
		PathPattern:        "/public/antivirusGroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAntivirusServiceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAntivirusServiceGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAntivirusServiceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteInfectedFiles deletes the list of infected files

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the list of delete succeeded and delete failed infected files.
*/
func (a *Client) DeleteInfectedFiles(params *DeleteInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInfectedFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInfectedFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteInfectedFiles",
		Method:             "DELETE",
		PathPattern:        "/public/infectedFiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInfectedFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInfectedFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteInfectedFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAntivirusServiceGroup lists the antivirus service groups

**Privileges:** ```CLUSTER_VIEW``` <br><br>Returns all the antivirus service group.
*/
func (a *Client) GetAntivirusServiceGroup(params *GetAntivirusServiceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAntivirusServiceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAntivirusServiceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAntivirusServiceGroup",
		Method:             "GET",
		PathPattern:        "/public/antivirusGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAntivirusServiceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAntivirusServiceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAntivirusServiceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIcapConnectionStatus checks the icap server connection status

**Privileges:** ```CLUSTER_VIEW``` <br><br>Returns the list of succeeded and failed connection statuses of Icap servers.
*/
func (a *Client) GetIcapConnectionStatus(params *GetIcapConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIcapConnectionStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIcapConnectionStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIcapConnectionStatus",
		Method:             "GET",
		PathPattern:        "/public/icapConnectionStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIcapConnectionStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIcapConnectionStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIcapConnectionStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInfectedFiles lists the infected files

**Privileges:** ```CLUSTER_VIEW``` <br><br>Returns all the infected files matching with query parameters.
*/
func (a *Client) GetInfectedFiles(params *GetInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInfectedFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfectedFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInfectedFiles",
		Method:             "GET",
		PathPattern:        "/public/infectedFiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInfectedFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInfectedFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInfectedFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAntivirusServiceGroup updates an antivirus service group

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the updated antivirus service group.
*/
func (a *Client) UpdateAntivirusServiceGroup(params *UpdateAntivirusServiceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAntivirusServiceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAntivirusServiceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAntivirusServiceGroup",
		Method:             "PUT",
		PathPattern:        "/public/antivirusGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAntivirusServiceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAntivirusServiceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAntivirusServiceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateInfectedFiles updates the list of infected files

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the list of update succeeded and update failed infected files.
*/
func (a *Client) UpdateInfectedFiles(params *UpdateInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateInfectedFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInfectedFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateInfectedFiles",
		Method:             "PUT",
		PathPattern:        "/public/infectedFiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInfectedFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInfectedFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateInfectedFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
