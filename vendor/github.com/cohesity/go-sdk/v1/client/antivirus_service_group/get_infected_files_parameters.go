// Code generated by go-swagger; DO NOT EDIT.

package antivirus_service_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetInfectedFilesParams creates a new GetInfectedFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetInfectedFilesParams() *GetInfectedFilesParams {
	return &GetInfectedFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetInfectedFilesParamsWithTimeout creates a new GetInfectedFilesParams object
// with the ability to set a timeout on a request.
func NewGetInfectedFilesParamsWithTimeout(timeout time.Duration) *GetInfectedFilesParams {
	return &GetInfectedFilesParams{
		timeout: timeout,
	}
}

// NewGetInfectedFilesParamsWithContext creates a new GetInfectedFilesParams object
// with the ability to set a context for a request.
func NewGetInfectedFilesParamsWithContext(ctx context.Context) *GetInfectedFilesParams {
	return &GetInfectedFilesParams{
		Context: ctx,
	}
}

// NewGetInfectedFilesParamsWithHTTPClient creates a new GetInfectedFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetInfectedFilesParamsWithHTTPClient(client *http.Client) *GetInfectedFilesParams {
	return &GetInfectedFilesParams{
		HTTPClient: client,
	}
}

/*
GetInfectedFilesParams contains all the parameters to send to the API endpoint

	for the get infected files operation.

	Typically these are written to a http.Request.
*/
type GetInfectedFilesParams struct {

	/* FilePath.

	     Specifies the path of a file. If this is provided, infected file list
	would contain the scan and infection state of the file and pagination
	cookie will be ignored.
	*/
	FilePath *string

	/* IncludeQuarantinedFiles.

	   Specifies whether to include quarantined files in the result.
	*/
	IncludeQuarantinedFiles *bool

	/* IncludeUnquarantinedFiles.

	   Specifies whether to include unquarantined files in the result.
	*/
	IncludeUnquarantinedFiles *bool

	/* PageCount.

	     Specifies the number of items to return in the response for pagination
	purposes. Default value is 1000.

	     Format: int64
	*/
	PageCount *int64

	/* PaginationCookie.

	     Pagination cookie should be used from previous call to list infected
	files. It resumes (or gives the next set of values) from the result of the
	previous call.
	*/
	PaginationCookie *string

	/* ViewNames.

	   Filter by a list of View names.
	*/
	ViewNames []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get infected files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInfectedFilesParams) WithDefaults() *GetInfectedFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get infected files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInfectedFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get infected files params
func (o *GetInfectedFilesParams) WithTimeout(timeout time.Duration) *GetInfectedFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get infected files params
func (o *GetInfectedFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get infected files params
func (o *GetInfectedFilesParams) WithContext(ctx context.Context) *GetInfectedFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get infected files params
func (o *GetInfectedFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get infected files params
func (o *GetInfectedFilesParams) WithHTTPClient(client *http.Client) *GetInfectedFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get infected files params
func (o *GetInfectedFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilePath adds the filePath to the get infected files params
func (o *GetInfectedFilesParams) WithFilePath(filePath *string) *GetInfectedFilesParams {
	o.SetFilePath(filePath)
	return o
}

// SetFilePath adds the filePath to the get infected files params
func (o *GetInfectedFilesParams) SetFilePath(filePath *string) {
	o.FilePath = filePath
}

// WithIncludeQuarantinedFiles adds the includeQuarantinedFiles to the get infected files params
func (o *GetInfectedFilesParams) WithIncludeQuarantinedFiles(includeQuarantinedFiles *bool) *GetInfectedFilesParams {
	o.SetIncludeQuarantinedFiles(includeQuarantinedFiles)
	return o
}

// SetIncludeQuarantinedFiles adds the includeQuarantinedFiles to the get infected files params
func (o *GetInfectedFilesParams) SetIncludeQuarantinedFiles(includeQuarantinedFiles *bool) {
	o.IncludeQuarantinedFiles = includeQuarantinedFiles
}

// WithIncludeUnquarantinedFiles adds the includeUnquarantinedFiles to the get infected files params
func (o *GetInfectedFilesParams) WithIncludeUnquarantinedFiles(includeUnquarantinedFiles *bool) *GetInfectedFilesParams {
	o.SetIncludeUnquarantinedFiles(includeUnquarantinedFiles)
	return o
}

// SetIncludeUnquarantinedFiles adds the includeUnquarantinedFiles to the get infected files params
func (o *GetInfectedFilesParams) SetIncludeUnquarantinedFiles(includeUnquarantinedFiles *bool) {
	o.IncludeUnquarantinedFiles = includeUnquarantinedFiles
}

// WithPageCount adds the pageCount to the get infected files params
func (o *GetInfectedFilesParams) WithPageCount(pageCount *int64) *GetInfectedFilesParams {
	o.SetPageCount(pageCount)
	return o
}

// SetPageCount adds the pageCount to the get infected files params
func (o *GetInfectedFilesParams) SetPageCount(pageCount *int64) {
	o.PageCount = pageCount
}

// WithPaginationCookie adds the paginationCookie to the get infected files params
func (o *GetInfectedFilesParams) WithPaginationCookie(paginationCookie *string) *GetInfectedFilesParams {
	o.SetPaginationCookie(paginationCookie)
	return o
}

// SetPaginationCookie adds the paginationCookie to the get infected files params
func (o *GetInfectedFilesParams) SetPaginationCookie(paginationCookie *string) {
	o.PaginationCookie = paginationCookie
}

// WithViewNames adds the viewNames to the get infected files params
func (o *GetInfectedFilesParams) WithViewNames(viewNames []string) *GetInfectedFilesParams {
	o.SetViewNames(viewNames)
	return o
}

// SetViewNames adds the viewNames to the get infected files params
func (o *GetInfectedFilesParams) SetViewNames(viewNames []string) {
	o.ViewNames = viewNames
}

// WriteToRequest writes these params to a swagger request
func (o *GetInfectedFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilePath != nil {

		// query param filePath
		var qrFilePath string

		if o.FilePath != nil {
			qrFilePath = *o.FilePath
		}
		qFilePath := qrFilePath
		if qFilePath != "" {

			if err := r.SetQueryParam("filePath", qFilePath); err != nil {
				return err
			}
		}
	}

	if o.IncludeQuarantinedFiles != nil {

		// query param includeQuarantinedFiles
		var qrIncludeQuarantinedFiles bool

		if o.IncludeQuarantinedFiles != nil {
			qrIncludeQuarantinedFiles = *o.IncludeQuarantinedFiles
		}
		qIncludeQuarantinedFiles := swag.FormatBool(qrIncludeQuarantinedFiles)
		if qIncludeQuarantinedFiles != "" {

			if err := r.SetQueryParam("includeQuarantinedFiles", qIncludeQuarantinedFiles); err != nil {
				return err
			}
		}
	}

	if o.IncludeUnquarantinedFiles != nil {

		// query param includeUnquarantinedFiles
		var qrIncludeUnquarantinedFiles bool

		if o.IncludeUnquarantinedFiles != nil {
			qrIncludeUnquarantinedFiles = *o.IncludeUnquarantinedFiles
		}
		qIncludeUnquarantinedFiles := swag.FormatBool(qrIncludeUnquarantinedFiles)
		if qIncludeUnquarantinedFiles != "" {

			if err := r.SetQueryParam("includeUnquarantinedFiles", qIncludeUnquarantinedFiles); err != nil {
				return err
			}
		}
	}

	if o.PageCount != nil {

		// query param pageCount
		var qrPageCount int64

		if o.PageCount != nil {
			qrPageCount = *o.PageCount
		}
		qPageCount := swag.FormatInt64(qrPageCount)
		if qPageCount != "" {

			if err := r.SetQueryParam("pageCount", qPageCount); err != nil {
				return err
			}
		}
	}

	if o.PaginationCookie != nil {

		// query param paginationCookie
		var qrPaginationCookie string

		if o.PaginationCookie != nil {
			qrPaginationCookie = *o.PaginationCookie
		}
		qPaginationCookie := qrPaginationCookie
		if qPaginationCookie != "" {

			if err := r.SetQueryParam("paginationCookie", qPaginationCookie); err != nil {
				return err
			}
		}
	}

	if o.ViewNames != nil {

		// binding items for viewNames
		joinedViewNames := o.bindParamViewNames(reg)

		// query array param viewNames
		if err := r.SetQueryParam("viewNames", joinedViewNames...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetInfectedFiles binds the parameter viewNames
func (o *GetInfectedFilesParams) bindParamViewNames(formats strfmt.Registry) []string {
	viewNamesIR := o.ViewNames

	var viewNamesIC []string
	for _, viewNamesIIR := range viewNamesIR { // explode []string

		viewNamesIIV := viewNamesIIR // string as string
		viewNamesIC = append(viewNamesIC, viewNamesIIV)
	}

	// items.CollectionFormat: ""
	viewNamesIS := swag.JoinByFormat(viewNamesIC, "")

	return viewNamesIS
}
