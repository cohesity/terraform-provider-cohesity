// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetJobRunInfoParams creates a new GetJobRunInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetJobRunInfoParams() *GetJobRunInfoParams {
	return &GetJobRunInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetJobRunInfoParamsWithTimeout creates a new GetJobRunInfoParams object
// with the ability to set a timeout on a request.
func NewGetJobRunInfoParamsWithTimeout(timeout time.Duration) *GetJobRunInfoParams {
	return &GetJobRunInfoParams{
		timeout: timeout,
	}
}

// NewGetJobRunInfoParamsWithContext creates a new GetJobRunInfoParams object
// with the ability to set a context for a request.
func NewGetJobRunInfoParamsWithContext(ctx context.Context) *GetJobRunInfoParams {
	return &GetJobRunInfoParams{
		Context: ctx,
	}
}

// NewGetJobRunInfoParamsWithHTTPClient creates a new GetJobRunInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetJobRunInfoParamsWithHTTPClient(client *http.Client) *GetJobRunInfoParams {
	return &GetJobRunInfoParams{
		HTTPClient: client,
	}
}

/*
GetJobRunInfoParams contains all the parameters to send to the API endpoint

	for the get job run info operation.

	Typically these are written to a http.Request.
*/
type GetJobRunInfoParams struct {

	/* JobID.

	   Specifies the job id of the needed run.

	   Format: int64
	*/
	JobID int64

	/* JobRunID.

	   Specifies the job run id of the needed run.

	   Format: int64
	*/
	JobRunID int64

	/* JobType.

	   Specifies the job type of the needed run.
	*/
	JobType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get job run info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetJobRunInfoParams) WithDefaults() *GetJobRunInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get job run info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetJobRunInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get job run info params
func (o *GetJobRunInfoParams) WithTimeout(timeout time.Duration) *GetJobRunInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get job run info params
func (o *GetJobRunInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get job run info params
func (o *GetJobRunInfoParams) WithContext(ctx context.Context) *GetJobRunInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get job run info params
func (o *GetJobRunInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get job run info params
func (o *GetJobRunInfoParams) WithHTTPClient(client *http.Client) *GetJobRunInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get job run info params
func (o *GetJobRunInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJobID adds the jobID to the get job run info params
func (o *GetJobRunInfoParams) WithJobID(jobID int64) *GetJobRunInfoParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get job run info params
func (o *GetJobRunInfoParams) SetJobID(jobID int64) {
	o.JobID = jobID
}

// WithJobRunID adds the jobRunID to the get job run info params
func (o *GetJobRunInfoParams) WithJobRunID(jobRunID int64) *GetJobRunInfoParams {
	o.SetJobRunID(jobRunID)
	return o
}

// SetJobRunID adds the jobRunId to the get job run info params
func (o *GetJobRunInfoParams) SetJobRunID(jobRunID int64) {
	o.JobRunID = jobRunID
}

// WithJobType adds the jobType to the get job run info params
func (o *GetJobRunInfoParams) WithJobType(jobType string) *GetJobRunInfoParams {
	o.SetJobType(jobType)
	return o
}

// SetJobType adds the jobType to the get job run info params
func (o *GetJobRunInfoParams) SetJobType(jobType string) {
	o.JobType = jobType
}

// WriteToRequest writes these params to a swagger request
func (o *GetJobRunInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param jobId
	qrJobID := o.JobID
	qJobID := swag.FormatInt64(qrJobID)
	if qJobID != "" {

		if err := r.SetQueryParam("jobId", qJobID); err != nil {
			return err
		}
	}

	// query param jobRunId
	qrJobRunID := o.JobRunID
	qJobRunID := swag.FormatInt64(qrJobRunID)
	if qJobRunID != "" {

		if err := r.SetQueryParam("jobRunId", qJobRunID); err != nil {
			return err
		}
	}

	// query param jobType
	qrJobType := o.JobType
	qJobType := qrJobType
	if qJobType != "" {

		if err := r.SetQueryParam("jobType", qJobType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
