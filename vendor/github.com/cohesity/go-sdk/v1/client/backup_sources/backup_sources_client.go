// Code generated by go-swagger; DO NOT EDIT.

package backup_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup sources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new backup sources API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new backup sources API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for backup sources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAppOwnerRegistration(params *DeleteAppOwnerRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAppOwnerRegistrationOK, error)

	DeleteBackupSource(params *DeleteBackupSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackupSourceOK, error)

	GetBackupEntities(params *GetBackupEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupEntitiesOK, error)

	GetBackupEntityByID(params *GetBackupEntityByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupEntityByIDOK, error)

	GetDatastores(params *GetDatastoresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatastoresOK, error)

	GetNetworkEntities(params *GetNetworkEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkEntitiesOK, error)

	GetResourcePools(params *GetResourcePoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourcePoolsOK, error)

	GetVirtualMachines(params *GetVirtualMachinesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVirtualMachinesOK, error)

	GetVmwareFolders(params *GetVmwareFoldersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVmwareFoldersOK, error)

	ListAppEntities(params *ListAppEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAppEntitiesOK, error)

	ListBackupSources(params *ListBackupSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBackupSourcesOK, error)

	ListEntitiesOfType(params *ListEntitiesOfTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEntitiesOfTypeOK, error)

	ListRegisteredSourcesReport(params *ListRegisteredSourcesReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRegisteredSourcesReportOK, error)

	RegisterAppOwner(params *RegisterAppOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterAppOwnerOK, error)

	RegisterBackupSource(params *RegisterBackupSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterBackupSourceOK, error)

	UpdateAppOwnerRegistration(params *UpdateAppOwnerRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAppOwnerRegistrationOK, error)

	UpdateBackupSourceAccessInfo(params *UpdateBackupSourceAccessInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBackupSourceAccessInfoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAppOwnerRegistration deletes an application owner registration

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Returns success if the application owner registration is deleted.
*/
func (a *Client) DeleteAppOwnerRegistration(params *DeleteAppOwnerRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAppOwnerRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppOwnerRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAppOwnerRegistration",
		Method:             "DELETE",
		PathPattern:        "/applicationSourceRegistration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAppOwnerRegistrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppOwnerRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAppOwnerRegistrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteBackupSource deletes a backup source

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Returns success if the backup source is deleted.
*/
func (a *Client) DeleteBackupSource(params *DeleteBackupSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackupSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBackupSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBackupSource",
		Method:             "DELETE",
		PathPattern:        "/backupsources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBackupSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBackupSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBackupSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBackupEntities lists backup entities based on the input parameters

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns a list of backup entities based on the input parameters.
*/
func (a *Client) GetBackupEntities(params *GetBackupEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupEntities",
		Method:             "GET",
		PathPattern:        "/backupEntities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBackupEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBackupEntityByID lists backup entity based on the input id

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns a backup entity based on the input id.
*/
func (a *Client) GetBackupEntityByID(params *GetBackupEntityByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupEntityByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupEntityByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupEntityById",
		Method:             "GET",
		PathPattern:        "/backupEntities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupEntityByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupEntityByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBackupEntityByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatastores lists data stores for a resource pool

**Privileges:** ```PROTECTION_VIEW``` <br><br>Return the data stores for a resource pool.
*/
func (a *Client) GetDatastores(params *GetDatastoresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatastoresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatastoresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDatastores",
		Method:             "GET",
		PathPattern:        "/datastores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatastoresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatastoresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatastoresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworkEntities lists network entities for a resource pool

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns network entites for a resource pool.
*/
func (a *Client) GetNetworkEntities(params *GetNetworkEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetworkEntities",
		Method:             "GET",
		PathPattern:        "/networkEntities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworkEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetResourcePools lists resource pools for a v center

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns resource pools for a vCenter.
*/
func (a *Client) GetResourcePools(params *GetResourcePoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourcePoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcePoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetResourcePools",
		Method:             "GET",
		PathPattern:        "/resourcePools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcePoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcePoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetResourcePoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVirtualMachines lists virtual machines for a v center

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns a list of virtual machines for a vCenter.
*/
func (a *Client) GetVirtualMachines(params *GetVirtualMachinesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVirtualMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualMachinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVirtualMachines",
		Method:             "GET",
		PathPattern:        "/virtualMachines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVirtualMachinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualMachinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVirtualMachinesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVmwareFolders lists folder entities for a selected resource pool

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns folder entites for a resource pool.
*/
func (a *Client) GetVmwareFolders(params *GetVmwareFoldersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVmwareFoldersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmwareFoldersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmwareFolders",
		Method:             "GET",
		PathPattern:        "/vmwareFolders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVmwareFoldersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmwareFoldersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVmwareFoldersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListAppEntities lists the application entites

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns the application entities.
*/
func (a *Client) ListAppEntities(params *ListAppEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAppEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListAppEntities",
		Method:             "GET",
		PathPattern:        "/appEntities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAppEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListAppEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListBackupSources lists backup sources based on a particular criteria

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns a list of backup sources based on particular criteria.
*/
func (a *Client) ListBackupSources(params *ListBackupSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBackupSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBackupSourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBackupSources",
		Method:             "GET",
		PathPattern:        "/backupsources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBackupSourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBackupSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListBackupSourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListEntitiesOfType lists entities of certian type for example it can be used to list v ms and physical servers

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns a list of entities.
*/
func (a *Client) ListEntitiesOfType(params *ListEntitiesOfTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEntitiesOfTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEntitiesOfTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListEntitiesOfType",
		Method:             "GET",
		PathPattern:        "/entitiesOfType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEntitiesOfTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEntitiesOfTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListEntitiesOfTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListRegisteredSourcesReport lists registered sources report based on the input parameters

**Privileges:** ```REPORTS_VIEW``` <br><br>Returns a registered sources report based on the input parameters.
*/
func (a *Client) ListRegisteredSourcesReport(params *ListRegisteredSourcesReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRegisteredSourcesReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRegisteredSourcesReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRegisteredSourcesReport",
		Method:             "GET",
		PathPattern:        "/reports/backupsources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRegisteredSourcesReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRegisteredSourcesReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRegisteredSourcesReportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RegisterAppOwner registers an entity for an application

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Returns success if the entity is registered for an application.
*/
func (a *Client) RegisterAppOwner(params *RegisterAppOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterAppOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterAppOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterAppOwner",
		Method:             "POST",
		PathPattern:        "/applicationSourceRegistration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterAppOwnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterAppOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterAppOwnerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RegisterBackupSource registers a backup source

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Returns the registered backup source.
*/
func (a *Client) RegisterBackupSource(params *RegisterBackupSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterBackupSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterBackupSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterBackupSource",
		Method:             "POST",
		PathPattern:        "/backupsources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterBackupSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterBackupSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterBackupSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAppOwnerRegistration updates credentials for an application owner

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Returns success if the application owner credential is updated.
*/
func (a *Client) UpdateAppOwnerRegistration(params *UpdateAppOwnerRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAppOwnerRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppOwnerRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAppOwnerRegistration",
		Method:             "PUT",
		PathPattern:        "/applicationSourceRegistration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAppOwnerRegistrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAppOwnerRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAppOwnerRegistrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateBackupSourceAccessInfo updates a backup source s access info

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Returns success if the backup source's access info.
*/
func (a *Client) UpdateBackupSourceAccessInfo(params *UpdateBackupSourceAccessInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBackupSourceAccessInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBackupSourceAccessInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateBackupSourceAccessInfo",
		Method:             "PUT",
		PathPattern:        "/backupsources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBackupSourceAccessInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBackupSourceAccessInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateBackupSourceAccessInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
