// Code generated by go-swagger; DO NOT EDIT.

package backup_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListRegisteredSourcesReportParams creates a new ListRegisteredSourcesReportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListRegisteredSourcesReportParams() *ListRegisteredSourcesReportParams {
	return &ListRegisteredSourcesReportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListRegisteredSourcesReportParamsWithTimeout creates a new ListRegisteredSourcesReportParams object
// with the ability to set a timeout on a request.
func NewListRegisteredSourcesReportParamsWithTimeout(timeout time.Duration) *ListRegisteredSourcesReportParams {
	return &ListRegisteredSourcesReportParams{
		timeout: timeout,
	}
}

// NewListRegisteredSourcesReportParamsWithContext creates a new ListRegisteredSourcesReportParams object
// with the ability to set a context for a request.
func NewListRegisteredSourcesReportParamsWithContext(ctx context.Context) *ListRegisteredSourcesReportParams {
	return &ListRegisteredSourcesReportParams{
		Context: ctx,
	}
}

// NewListRegisteredSourcesReportParamsWithHTTPClient creates a new ListRegisteredSourcesReportParams object
// with the ability to set a custom HTTPClient for a request.
func NewListRegisteredSourcesReportParamsWithHTTPClient(client *http.Client) *ListRegisteredSourcesReportParams {
	return &ListRegisteredSourcesReportParams{
		HTTPClient: client,
	}
}

/*
ListRegisteredSourcesReportParams contains all the parameters to send to the API endpoint

	for the list registered sources report operation.

	Typically these are written to a http.Request.
*/
type ListRegisteredSourcesReportParams struct {

	/* RefreshDateEndUsecs.

	     RefreshDateEndUsecs is the filter to report sources refreshed by magneto
	before specified time in usecs. If no value is provided, value will be
	assumed to be present time.

	     Format: int64
	*/
	RefreshDateEndUsecs *int64

	/* RefreshDateStartUsecs.

	     RefreshDateStartUsecs is the filter to report sources refreshed by magneto
	after specified time in usecs. If no value is provided, value will be
	assumed to be beginning of time.

	     Format: int64
	*/
	RefreshDateStartUsecs *int64

	/* RegistrationDateEndUsecs.

	     RegistrationDateEndUsecs is the filter to report sources registered before
	specified time in usecs. If no value is provided, value will be assumed
	to be present time.

	     Format: int64
	*/
	RegistrationDateEndUsecs *int64

	/* RegistrationDateStartUsecs.

	     RegistrationDateStartUsecs is the filter to report sources registered
	after specified time in usecs. If no value is provided, value will be
	assumed to be beginning of time.

	     Format: int64
	*/
	RegistrationDateStartUsecs *int64

	/* SourceIds.

	   SourceIds specifies the Ids of the registered sources to filter.
	*/
	SourceIds []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list registered sources report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRegisteredSourcesReportParams) WithDefaults() *ListRegisteredSourcesReportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list registered sources report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRegisteredSourcesReportParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) WithTimeout(timeout time.Duration) *ListRegisteredSourcesReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) WithContext(ctx context.Context) *ListRegisteredSourcesReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) WithHTTPClient(client *http.Client) *ListRegisteredSourcesReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRefreshDateEndUsecs adds the refreshDateEndUsecs to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) WithRefreshDateEndUsecs(refreshDateEndUsecs *int64) *ListRegisteredSourcesReportParams {
	o.SetRefreshDateEndUsecs(refreshDateEndUsecs)
	return o
}

// SetRefreshDateEndUsecs adds the refreshDateEndUsecs to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) SetRefreshDateEndUsecs(refreshDateEndUsecs *int64) {
	o.RefreshDateEndUsecs = refreshDateEndUsecs
}

// WithRefreshDateStartUsecs adds the refreshDateStartUsecs to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) WithRefreshDateStartUsecs(refreshDateStartUsecs *int64) *ListRegisteredSourcesReportParams {
	o.SetRefreshDateStartUsecs(refreshDateStartUsecs)
	return o
}

// SetRefreshDateStartUsecs adds the refreshDateStartUsecs to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) SetRefreshDateStartUsecs(refreshDateStartUsecs *int64) {
	o.RefreshDateStartUsecs = refreshDateStartUsecs
}

// WithRegistrationDateEndUsecs adds the registrationDateEndUsecs to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) WithRegistrationDateEndUsecs(registrationDateEndUsecs *int64) *ListRegisteredSourcesReportParams {
	o.SetRegistrationDateEndUsecs(registrationDateEndUsecs)
	return o
}

// SetRegistrationDateEndUsecs adds the registrationDateEndUsecs to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) SetRegistrationDateEndUsecs(registrationDateEndUsecs *int64) {
	o.RegistrationDateEndUsecs = registrationDateEndUsecs
}

// WithRegistrationDateStartUsecs adds the registrationDateStartUsecs to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) WithRegistrationDateStartUsecs(registrationDateStartUsecs *int64) *ListRegisteredSourcesReportParams {
	o.SetRegistrationDateStartUsecs(registrationDateStartUsecs)
	return o
}

// SetRegistrationDateStartUsecs adds the registrationDateStartUsecs to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) SetRegistrationDateStartUsecs(registrationDateStartUsecs *int64) {
	o.RegistrationDateStartUsecs = registrationDateStartUsecs
}

// WithSourceIds adds the sourceIds to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) WithSourceIds(sourceIds []int64) *ListRegisteredSourcesReportParams {
	o.SetSourceIds(sourceIds)
	return o
}

// SetSourceIds adds the sourceIds to the list registered sources report params
func (o *ListRegisteredSourcesReportParams) SetSourceIds(sourceIds []int64) {
	o.SourceIds = sourceIds
}

// WriteToRequest writes these params to a swagger request
func (o *ListRegisteredSourcesReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RefreshDateEndUsecs != nil {

		// query param refreshDateEndUsecs
		var qrRefreshDateEndUsecs int64

		if o.RefreshDateEndUsecs != nil {
			qrRefreshDateEndUsecs = *o.RefreshDateEndUsecs
		}
		qRefreshDateEndUsecs := swag.FormatInt64(qrRefreshDateEndUsecs)
		if qRefreshDateEndUsecs != "" {

			if err := r.SetQueryParam("refreshDateEndUsecs", qRefreshDateEndUsecs); err != nil {
				return err
			}
		}
	}

	if o.RefreshDateStartUsecs != nil {

		// query param refreshDateStartUsecs
		var qrRefreshDateStartUsecs int64

		if o.RefreshDateStartUsecs != nil {
			qrRefreshDateStartUsecs = *o.RefreshDateStartUsecs
		}
		qRefreshDateStartUsecs := swag.FormatInt64(qrRefreshDateStartUsecs)
		if qRefreshDateStartUsecs != "" {

			if err := r.SetQueryParam("refreshDateStartUsecs", qRefreshDateStartUsecs); err != nil {
				return err
			}
		}
	}

	if o.RegistrationDateEndUsecs != nil {

		// query param registrationDateEndUsecs
		var qrRegistrationDateEndUsecs int64

		if o.RegistrationDateEndUsecs != nil {
			qrRegistrationDateEndUsecs = *o.RegistrationDateEndUsecs
		}
		qRegistrationDateEndUsecs := swag.FormatInt64(qrRegistrationDateEndUsecs)
		if qRegistrationDateEndUsecs != "" {

			if err := r.SetQueryParam("registrationDateEndUsecs", qRegistrationDateEndUsecs); err != nil {
				return err
			}
		}
	}

	if o.RegistrationDateStartUsecs != nil {

		// query param registrationDateStartUsecs
		var qrRegistrationDateStartUsecs int64

		if o.RegistrationDateStartUsecs != nil {
			qrRegistrationDateStartUsecs = *o.RegistrationDateStartUsecs
		}
		qRegistrationDateStartUsecs := swag.FormatInt64(qrRegistrationDateStartUsecs)
		if qRegistrationDateStartUsecs != "" {

			if err := r.SetQueryParam("registrationDateStartUsecs", qRegistrationDateStartUsecs); err != nil {
				return err
			}
		}
	}

	if o.SourceIds != nil {

		// binding items for sourceIds
		joinedSourceIds := o.bindParamSourceIds(reg)

		// query array param sourceIds
		if err := r.SetQueryParam("sourceIds", joinedSourceIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListRegisteredSourcesReport binds the parameter sourceIds
func (o *ListRegisteredSourcesReportParams) bindParamSourceIds(formats strfmt.Registry) []string {
	sourceIdsIR := o.SourceIds

	var sourceIdsIC []string
	for _, sourceIdsIIR := range sourceIdsIR { // explode []int64

		sourceIdsIIV := swag.FormatInt64(sourceIdsIIR) // int64 as string
		sourceIdsIC = append(sourceIdsIC, sourceIdsIIV)
	}

	// items.CollectionFormat: ""
	sourceIdsIS := swag.JoinByFormat(sourceIdsIC, "")

	return sourceIdsIS
}
