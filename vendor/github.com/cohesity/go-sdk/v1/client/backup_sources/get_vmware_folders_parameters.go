// Code generated by go-swagger; DO NOT EDIT.

package backup_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetVmwareFoldersParams creates a new GetVmwareFoldersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVmwareFoldersParams() *GetVmwareFoldersParams {
	return &GetVmwareFoldersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVmwareFoldersParamsWithTimeout creates a new GetVmwareFoldersParams object
// with the ability to set a timeout on a request.
func NewGetVmwareFoldersParamsWithTimeout(timeout time.Duration) *GetVmwareFoldersParams {
	return &GetVmwareFoldersParams{
		timeout: timeout,
	}
}

// NewGetVmwareFoldersParamsWithContext creates a new GetVmwareFoldersParams object
// with the ability to set a context for a request.
func NewGetVmwareFoldersParamsWithContext(ctx context.Context) *GetVmwareFoldersParams {
	return &GetVmwareFoldersParams{
		Context: ctx,
	}
}

// NewGetVmwareFoldersParamsWithHTTPClient creates a new GetVmwareFoldersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVmwareFoldersParamsWithHTTPClient(client *http.Client) *GetVmwareFoldersParams {
	return &GetVmwareFoldersParams{
		HTTPClient: client,
	}
}

/*
GetVmwareFoldersParams contains all the parameters to send to the API endpoint

	for the get vmware folders operation.

	Typically these are written to a http.Request.
*/
type GetVmwareFoldersParams struct {

	/* ResourcePoolID.

	   ResourcePoolId specifies the entity Id of the resource pool.

	   Format: int64
	*/
	ResourcePoolID *int64

	/* ReturnOnlyDatastoreClusters.

	   Flag if set to true, only the datastore clusters would be returned.
	*/
	ReturnOnlyDatastoreClusters *bool

	/* SkipDatacenterLevel.

	     SkipDatacenterLevel specifies if we should skip fetching the Datastores
	from Datacenter level. If no Datastore is found at Cluster level,
	Datastores are fetched from Datacenter level. Set this param to true to
	avoid call at Datacenter level.
	*/
	SkipDatacenterLevel *bool

	/* VCenterID.

	   VCenterId specifies the entity Id of the vCenter.

	   Format: int64
	*/
	VCenterID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get vmware folders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVmwareFoldersParams) WithDefaults() *GetVmwareFoldersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get vmware folders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVmwareFoldersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get vmware folders params
func (o *GetVmwareFoldersParams) WithTimeout(timeout time.Duration) *GetVmwareFoldersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get vmware folders params
func (o *GetVmwareFoldersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get vmware folders params
func (o *GetVmwareFoldersParams) WithContext(ctx context.Context) *GetVmwareFoldersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get vmware folders params
func (o *GetVmwareFoldersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get vmware folders params
func (o *GetVmwareFoldersParams) WithHTTPClient(client *http.Client) *GetVmwareFoldersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get vmware folders params
func (o *GetVmwareFoldersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithResourcePoolID adds the resourcePoolID to the get vmware folders params
func (o *GetVmwareFoldersParams) WithResourcePoolID(resourcePoolID *int64) *GetVmwareFoldersParams {
	o.SetResourcePoolID(resourcePoolID)
	return o
}

// SetResourcePoolID adds the resourcePoolId to the get vmware folders params
func (o *GetVmwareFoldersParams) SetResourcePoolID(resourcePoolID *int64) {
	o.ResourcePoolID = resourcePoolID
}

// WithReturnOnlyDatastoreClusters adds the returnOnlyDatastoreClusters to the get vmware folders params
func (o *GetVmwareFoldersParams) WithReturnOnlyDatastoreClusters(returnOnlyDatastoreClusters *bool) *GetVmwareFoldersParams {
	o.SetReturnOnlyDatastoreClusters(returnOnlyDatastoreClusters)
	return o
}

// SetReturnOnlyDatastoreClusters adds the returnOnlyDatastoreClusters to the get vmware folders params
func (o *GetVmwareFoldersParams) SetReturnOnlyDatastoreClusters(returnOnlyDatastoreClusters *bool) {
	o.ReturnOnlyDatastoreClusters = returnOnlyDatastoreClusters
}

// WithSkipDatacenterLevel adds the skipDatacenterLevel to the get vmware folders params
func (o *GetVmwareFoldersParams) WithSkipDatacenterLevel(skipDatacenterLevel *bool) *GetVmwareFoldersParams {
	o.SetSkipDatacenterLevel(skipDatacenterLevel)
	return o
}

// SetSkipDatacenterLevel adds the skipDatacenterLevel to the get vmware folders params
func (o *GetVmwareFoldersParams) SetSkipDatacenterLevel(skipDatacenterLevel *bool) {
	o.SkipDatacenterLevel = skipDatacenterLevel
}

// WithVCenterID adds the vCenterID to the get vmware folders params
func (o *GetVmwareFoldersParams) WithVCenterID(vCenterID *int64) *GetVmwareFoldersParams {
	o.SetVCenterID(vCenterID)
	return o
}

// SetVCenterID adds the vCenterId to the get vmware folders params
func (o *GetVmwareFoldersParams) SetVCenterID(vCenterID *int64) {
	o.VCenterID = vCenterID
}

// WriteToRequest writes these params to a swagger request
func (o *GetVmwareFoldersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ResourcePoolID != nil {

		// query param resourcePoolId
		var qrResourcePoolID int64

		if o.ResourcePoolID != nil {
			qrResourcePoolID = *o.ResourcePoolID
		}
		qResourcePoolID := swag.FormatInt64(qrResourcePoolID)
		if qResourcePoolID != "" {

			if err := r.SetQueryParam("resourcePoolId", qResourcePoolID); err != nil {
				return err
			}
		}
	}

	if o.ReturnOnlyDatastoreClusters != nil {

		// query param returnOnlyDatastoreClusters
		var qrReturnOnlyDatastoreClusters bool

		if o.ReturnOnlyDatastoreClusters != nil {
			qrReturnOnlyDatastoreClusters = *o.ReturnOnlyDatastoreClusters
		}
		qReturnOnlyDatastoreClusters := swag.FormatBool(qrReturnOnlyDatastoreClusters)
		if qReturnOnlyDatastoreClusters != "" {

			if err := r.SetQueryParam("returnOnlyDatastoreClusters", qReturnOnlyDatastoreClusters); err != nil {
				return err
			}
		}
	}

	if o.SkipDatacenterLevel != nil {

		// query param skipDatacenterLevel
		var qrSkipDatacenterLevel bool

		if o.SkipDatacenterLevel != nil {
			qrSkipDatacenterLevel = *o.SkipDatacenterLevel
		}
		qSkipDatacenterLevel := swag.FormatBool(qrSkipDatacenterLevel)
		if qSkipDatacenterLevel != "" {

			if err := r.SetQueryParam("skipDatacenterLevel", qSkipDatacenterLevel); err != nil {
				return err
			}
		}
	}

	if o.VCenterID != nil {

		// query param vCenterId
		var qrVCenterID int64

		if o.VCenterID != nil {
			qrVCenterID = *o.VCenterID
		}
		qVCenterID := swag.FormatInt64(qrVCenterID)
		if qVCenterID != "" {

			if err := r.SetQueryParam("vCenterId", qVCenterID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
