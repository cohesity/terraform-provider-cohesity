// Code generated by go-swagger; DO NOT EDIT.

package backup_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListBackupSourcesParams creates a new ListBackupSourcesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListBackupSourcesParams() *ListBackupSourcesParams {
	return &ListBackupSourcesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListBackupSourcesParamsWithTimeout creates a new ListBackupSourcesParams object
// with the ability to set a timeout on a request.
func NewListBackupSourcesParamsWithTimeout(timeout time.Duration) *ListBackupSourcesParams {
	return &ListBackupSourcesParams{
		timeout: timeout,
	}
}

// NewListBackupSourcesParamsWithContext creates a new ListBackupSourcesParams object
// with the ability to set a context for a request.
func NewListBackupSourcesParamsWithContext(ctx context.Context) *ListBackupSourcesParams {
	return &ListBackupSourcesParams{
		Context: ctx,
	}
}

// NewListBackupSourcesParamsWithHTTPClient creates a new ListBackupSourcesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListBackupSourcesParamsWithHTTPClient(client *http.Client) *ListBackupSourcesParams {
	return &ListBackupSourcesParams{
		HTTPClient: client,
	}
}

/*
ListBackupSourcesParams contains all the parameters to send to the API endpoint

	for the list backup sources operation.

	Typically these are written to a http.Request.
*/
type ListBackupSourcesParams struct {

	/* AfterCursorEntityID.

	   Specifies the entity id starting from which the items are to be returned.

	   Format: int64
	*/
	AfterCursorEntityID *int64

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* AppEnvironmentType.

	     AppEnvironmentType is specified to return only application specific view.
	For example if AppEnvironmentType of type SQL is specified, only SQL VMs
	are returned. Also, higher level entities are omitted if they do not have
	any application specific children.

	     Format: int64
	*/
	AppEnvironmentType *int64

	/* BeforeCursorEntityID.

	   Specifies the entity id upto which the items are to be returned.

	   Format: int64
	*/
	BeforeCursorEntityID *int64

	/* EncryptionKey.

	     Key to be used to encrypt the source credential. If
	include_source_credentials is set to true this key must be specified.
	*/
	EncryptionKey *string

	/* EntityID.

	   EntityId specified the Id of backup source for which to get the hierarchy.

	   Format: int64
	*/
	EntityID *int64

	/* EnvTypes.

	   EnvTypes are the types of sources to return e.g. VMWare, SQL, View etc.
	*/
	EnvTypes []int64

	/* ExcludeAwsTypes.

	     ExcludeAwsTypes specifies an array of AWS entity types to be excluded from
	the entity hierarchy. Entities of this type along with their children, if
	any, will be filtered out.
	*/
	ExcludeAwsTypes []int32

	/* ExcludeAzureTypes.

	     ExcludeAzureTypes specifies an array of Azure entity types to be excluded
	from the entity hierarchy. Entities of this type along with their
	children, if any, will be filtered out.
	*/
	ExcludeAzureTypes []int32

	/* ExcludeKubernetesTypes.

	     ExcludeKubernetesTypes specifies an array of K8s entity types to be
	excluded from the entity hierarchy. Entities of this type along with
	their children, if any, will be filtered out.
	*/
	ExcludeKubernetesTypes []int32

	/* ExcludeOffice365Types.

	     ExcludeOffice365Types specifies an array of Office 365 entity types to be
	excluded from the entity hierarchy. Entities of this type along with their
	children, if any, will be filtered out.
	*/
	ExcludeOffice365Types []int32

	/* ExcludeTypes.

	     ExcludeTypes specifies an array of types to exclude from the entity
	hierarchy. Entities of this type along with their children will be
	filtered out.
	*/
	ExcludeTypes []int32

	/* HasValidMailbox.

	   If set to true, users with valid mailbox will be returned.
	*/
	HasValidMailbox *bool

	/* HasValidOnedrive.

	   If set to true, users with valid onedrive will be returned.
	*/
	HasValidOnedrive *bool

	/* IncludeDatastores.

	     IncludeDatastores specifies whether to include datastore folder in the
	entity hierarchy. If it is not specified, the default is false.
	*/
	IncludeDatastores *bool

	/* IncludeEntityPermissionInfo.

	     If specified, then a list of entities with permissions assigned to them are
	returned.
	*/
	IncludeEntityPermissionInfo *bool

	/* IncludeExternalMetadata.

	     Specifies if entity external metadata should be included within the
	response to get entity hierarchy call.
	*/
	IncludeExternalMetadata *bool

	/* IncludeNetworkEntities.

	     IncludeNetworkEntities specifies whether to include network entities in
	the entity hierarchy. If it is not specified, the default is false.
	*/
	IncludeNetworkEntities *bool

	/* IncludeObjectProtectionInfo.

	   If specified, the object protection of entities(if any) will be returned.
	*/
	IncludeObjectProtectionInfo *bool

	/* IncludeSourceCredentials.

	     If specified, then crednetial for the registered sources will be included.
	Credential is first encrypted with internal key and then reencrypted with
	user supplied 'encryption_key'.
	*/
	IncludeSourceCredentials *bool

	/* IncludeSystemVApps.

	     IncludeSystemVApps specifies whether to include system generated vApps in
	the respone. The defauult behavior is false.
	*/
	IncludeSystemVApps *bool

	/* IncludeVMFolders.

	     IncludeVMFolders specifies whether to include VM folders in the
	entity hierarchy. If it is not specified, the default is false.
	*/
	IncludeVMFolders *bool

	/* IsSecurityGroup.

	   If set to true, Groups which are security enabled will be returned.
	*/
	IsSecurityGroup *bool

	/* NodeID.

	     Specifies the entity id for the Node at any level within the Source entity
	hierarchy whose children are to be paginated.

	     Format: int64
	*/
	NodeID *int64

	/* NumLevels.

	     Specifies the number of levels from the root node in the entity hierarchy
	to be returned.

	     Format: int32
	*/
	NumLevels *int32

	/* OnlyReturnOneLevel.

	     OnlyReturnOneLevel if set to true, only returns information one-level deep
	This is only valid if 'entity' is not set.
	*/
	OnlyReturnOneLevel *bool

	/* PageSize.

	   Specifies the maximum number of entities to be returned within the page.

	   Format: int64
	*/
	PageSize *int64

	/* PruneNonCriticalInfo.

	     Specifies whether to prune non critical info within entities.
	Incase of VMs, virtual disk information will be pruned.
	Incase of Office365, metadata about user entities will be pruned.
	This can be used to limit the size of the response by caller.
	*/
	PruneNonCriticalInfo *bool

	/* RefreshEntityHierarchy.

	     RefreshEntityHierarchy specifies whether entity hierarchy should be
	refreshed from VCenter. If set to true and an already existing 'entity' is
	specified, the entity hierarchy is refreshed prior to returning it. If
	'entity' is not set when this is set, an error will be returned. Setting
	this to true might cause the RPC to take a long while and result in
	timeouts.
	*/
	RefreshEntityHierarchy *bool

	/* Sids.

	   Filter the list of entities for the sids given in the list.
	*/
	Sids []string

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	/* UseCachedData.

	     Specifies whether we can serve the GET request to the read replica cache.
	setting this to true ensures that the API request is served
	to the read replica. setting this to false will serve the request to
	the master.
	*/
	UseCachedData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list backup sources params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListBackupSourcesParams) WithDefaults() *ListBackupSourcesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list backup sources params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListBackupSourcesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list backup sources params
func (o *ListBackupSourcesParams) WithTimeout(timeout time.Duration) *ListBackupSourcesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list backup sources params
func (o *ListBackupSourcesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list backup sources params
func (o *ListBackupSourcesParams) WithContext(ctx context.Context) *ListBackupSourcesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list backup sources params
func (o *ListBackupSourcesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list backup sources params
func (o *ListBackupSourcesParams) WithHTTPClient(client *http.Client) *ListBackupSourcesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list backup sources params
func (o *ListBackupSourcesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfterCursorEntityID adds the afterCursorEntityID to the list backup sources params
func (o *ListBackupSourcesParams) WithAfterCursorEntityID(afterCursorEntityID *int64) *ListBackupSourcesParams {
	o.SetAfterCursorEntityID(afterCursorEntityID)
	return o
}

// SetAfterCursorEntityID adds the afterCursorEntityId to the list backup sources params
func (o *ListBackupSourcesParams) SetAfterCursorEntityID(afterCursorEntityID *int64) {
	o.AfterCursorEntityID = afterCursorEntityID
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the list backup sources params
func (o *ListBackupSourcesParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *ListBackupSourcesParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the list backup sources params
func (o *ListBackupSourcesParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithAppEnvironmentType adds the appEnvironmentType to the list backup sources params
func (o *ListBackupSourcesParams) WithAppEnvironmentType(appEnvironmentType *int64) *ListBackupSourcesParams {
	o.SetAppEnvironmentType(appEnvironmentType)
	return o
}

// SetAppEnvironmentType adds the appEnvironmentType to the list backup sources params
func (o *ListBackupSourcesParams) SetAppEnvironmentType(appEnvironmentType *int64) {
	o.AppEnvironmentType = appEnvironmentType
}

// WithBeforeCursorEntityID adds the beforeCursorEntityID to the list backup sources params
func (o *ListBackupSourcesParams) WithBeforeCursorEntityID(beforeCursorEntityID *int64) *ListBackupSourcesParams {
	o.SetBeforeCursorEntityID(beforeCursorEntityID)
	return o
}

// SetBeforeCursorEntityID adds the beforeCursorEntityId to the list backup sources params
func (o *ListBackupSourcesParams) SetBeforeCursorEntityID(beforeCursorEntityID *int64) {
	o.BeforeCursorEntityID = beforeCursorEntityID
}

// WithEncryptionKey adds the encryptionKey to the list backup sources params
func (o *ListBackupSourcesParams) WithEncryptionKey(encryptionKey *string) *ListBackupSourcesParams {
	o.SetEncryptionKey(encryptionKey)
	return o
}

// SetEncryptionKey adds the encryptionKey to the list backup sources params
func (o *ListBackupSourcesParams) SetEncryptionKey(encryptionKey *string) {
	o.EncryptionKey = encryptionKey
}

// WithEntityID adds the entityID to the list backup sources params
func (o *ListBackupSourcesParams) WithEntityID(entityID *int64) *ListBackupSourcesParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the list backup sources params
func (o *ListBackupSourcesParams) SetEntityID(entityID *int64) {
	o.EntityID = entityID
}

// WithEnvTypes adds the envTypes to the list backup sources params
func (o *ListBackupSourcesParams) WithEnvTypes(envTypes []int64) *ListBackupSourcesParams {
	o.SetEnvTypes(envTypes)
	return o
}

// SetEnvTypes adds the envTypes to the list backup sources params
func (o *ListBackupSourcesParams) SetEnvTypes(envTypes []int64) {
	o.EnvTypes = envTypes
}

// WithExcludeAwsTypes adds the excludeAwsTypes to the list backup sources params
func (o *ListBackupSourcesParams) WithExcludeAwsTypes(excludeAwsTypes []int32) *ListBackupSourcesParams {
	o.SetExcludeAwsTypes(excludeAwsTypes)
	return o
}

// SetExcludeAwsTypes adds the excludeAwsTypes to the list backup sources params
func (o *ListBackupSourcesParams) SetExcludeAwsTypes(excludeAwsTypes []int32) {
	o.ExcludeAwsTypes = excludeAwsTypes
}

// WithExcludeAzureTypes adds the excludeAzureTypes to the list backup sources params
func (o *ListBackupSourcesParams) WithExcludeAzureTypes(excludeAzureTypes []int32) *ListBackupSourcesParams {
	o.SetExcludeAzureTypes(excludeAzureTypes)
	return o
}

// SetExcludeAzureTypes adds the excludeAzureTypes to the list backup sources params
func (o *ListBackupSourcesParams) SetExcludeAzureTypes(excludeAzureTypes []int32) {
	o.ExcludeAzureTypes = excludeAzureTypes
}

// WithExcludeKubernetesTypes adds the excludeKubernetesTypes to the list backup sources params
func (o *ListBackupSourcesParams) WithExcludeKubernetesTypes(excludeKubernetesTypes []int32) *ListBackupSourcesParams {
	o.SetExcludeKubernetesTypes(excludeKubernetesTypes)
	return o
}

// SetExcludeKubernetesTypes adds the excludeKubernetesTypes to the list backup sources params
func (o *ListBackupSourcesParams) SetExcludeKubernetesTypes(excludeKubernetesTypes []int32) {
	o.ExcludeKubernetesTypes = excludeKubernetesTypes
}

// WithExcludeOffice365Types adds the excludeOffice365Types to the list backup sources params
func (o *ListBackupSourcesParams) WithExcludeOffice365Types(excludeOffice365Types []int32) *ListBackupSourcesParams {
	o.SetExcludeOffice365Types(excludeOffice365Types)
	return o
}

// SetExcludeOffice365Types adds the excludeOffice365Types to the list backup sources params
func (o *ListBackupSourcesParams) SetExcludeOffice365Types(excludeOffice365Types []int32) {
	o.ExcludeOffice365Types = excludeOffice365Types
}

// WithExcludeTypes adds the excludeTypes to the list backup sources params
func (o *ListBackupSourcesParams) WithExcludeTypes(excludeTypes []int32) *ListBackupSourcesParams {
	o.SetExcludeTypes(excludeTypes)
	return o
}

// SetExcludeTypes adds the excludeTypes to the list backup sources params
func (o *ListBackupSourcesParams) SetExcludeTypes(excludeTypes []int32) {
	o.ExcludeTypes = excludeTypes
}

// WithHasValidMailbox adds the hasValidMailbox to the list backup sources params
func (o *ListBackupSourcesParams) WithHasValidMailbox(hasValidMailbox *bool) *ListBackupSourcesParams {
	o.SetHasValidMailbox(hasValidMailbox)
	return o
}

// SetHasValidMailbox adds the hasValidMailbox to the list backup sources params
func (o *ListBackupSourcesParams) SetHasValidMailbox(hasValidMailbox *bool) {
	o.HasValidMailbox = hasValidMailbox
}

// WithHasValidOnedrive adds the hasValidOnedrive to the list backup sources params
func (o *ListBackupSourcesParams) WithHasValidOnedrive(hasValidOnedrive *bool) *ListBackupSourcesParams {
	o.SetHasValidOnedrive(hasValidOnedrive)
	return o
}

// SetHasValidOnedrive adds the hasValidOnedrive to the list backup sources params
func (o *ListBackupSourcesParams) SetHasValidOnedrive(hasValidOnedrive *bool) {
	o.HasValidOnedrive = hasValidOnedrive
}

// WithIncludeDatastores adds the includeDatastores to the list backup sources params
func (o *ListBackupSourcesParams) WithIncludeDatastores(includeDatastores *bool) *ListBackupSourcesParams {
	o.SetIncludeDatastores(includeDatastores)
	return o
}

// SetIncludeDatastores adds the includeDatastores to the list backup sources params
func (o *ListBackupSourcesParams) SetIncludeDatastores(includeDatastores *bool) {
	o.IncludeDatastores = includeDatastores
}

// WithIncludeEntityPermissionInfo adds the includeEntityPermissionInfo to the list backup sources params
func (o *ListBackupSourcesParams) WithIncludeEntityPermissionInfo(includeEntityPermissionInfo *bool) *ListBackupSourcesParams {
	o.SetIncludeEntityPermissionInfo(includeEntityPermissionInfo)
	return o
}

// SetIncludeEntityPermissionInfo adds the includeEntityPermissionInfo to the list backup sources params
func (o *ListBackupSourcesParams) SetIncludeEntityPermissionInfo(includeEntityPermissionInfo *bool) {
	o.IncludeEntityPermissionInfo = includeEntityPermissionInfo
}

// WithIncludeExternalMetadata adds the includeExternalMetadata to the list backup sources params
func (o *ListBackupSourcesParams) WithIncludeExternalMetadata(includeExternalMetadata *bool) *ListBackupSourcesParams {
	o.SetIncludeExternalMetadata(includeExternalMetadata)
	return o
}

// SetIncludeExternalMetadata adds the includeExternalMetadata to the list backup sources params
func (o *ListBackupSourcesParams) SetIncludeExternalMetadata(includeExternalMetadata *bool) {
	o.IncludeExternalMetadata = includeExternalMetadata
}

// WithIncludeNetworkEntities adds the includeNetworkEntities to the list backup sources params
func (o *ListBackupSourcesParams) WithIncludeNetworkEntities(includeNetworkEntities *bool) *ListBackupSourcesParams {
	o.SetIncludeNetworkEntities(includeNetworkEntities)
	return o
}

// SetIncludeNetworkEntities adds the includeNetworkEntities to the list backup sources params
func (o *ListBackupSourcesParams) SetIncludeNetworkEntities(includeNetworkEntities *bool) {
	o.IncludeNetworkEntities = includeNetworkEntities
}

// WithIncludeObjectProtectionInfo adds the includeObjectProtectionInfo to the list backup sources params
func (o *ListBackupSourcesParams) WithIncludeObjectProtectionInfo(includeObjectProtectionInfo *bool) *ListBackupSourcesParams {
	o.SetIncludeObjectProtectionInfo(includeObjectProtectionInfo)
	return o
}

// SetIncludeObjectProtectionInfo adds the includeObjectProtectionInfo to the list backup sources params
func (o *ListBackupSourcesParams) SetIncludeObjectProtectionInfo(includeObjectProtectionInfo *bool) {
	o.IncludeObjectProtectionInfo = includeObjectProtectionInfo
}

// WithIncludeSourceCredentials adds the includeSourceCredentials to the list backup sources params
func (o *ListBackupSourcesParams) WithIncludeSourceCredentials(includeSourceCredentials *bool) *ListBackupSourcesParams {
	o.SetIncludeSourceCredentials(includeSourceCredentials)
	return o
}

// SetIncludeSourceCredentials adds the includeSourceCredentials to the list backup sources params
func (o *ListBackupSourcesParams) SetIncludeSourceCredentials(includeSourceCredentials *bool) {
	o.IncludeSourceCredentials = includeSourceCredentials
}

// WithIncludeSystemVApps adds the includeSystemVApps to the list backup sources params
func (o *ListBackupSourcesParams) WithIncludeSystemVApps(includeSystemVApps *bool) *ListBackupSourcesParams {
	o.SetIncludeSystemVApps(includeSystemVApps)
	return o
}

// SetIncludeSystemVApps adds the includeSystemVApps to the list backup sources params
func (o *ListBackupSourcesParams) SetIncludeSystemVApps(includeSystemVApps *bool) {
	o.IncludeSystemVApps = includeSystemVApps
}

// WithIncludeVMFolders adds the includeVMFolders to the list backup sources params
func (o *ListBackupSourcesParams) WithIncludeVMFolders(includeVMFolders *bool) *ListBackupSourcesParams {
	o.SetIncludeVMFolders(includeVMFolders)
	return o
}

// SetIncludeVMFolders adds the includeVmFolders to the list backup sources params
func (o *ListBackupSourcesParams) SetIncludeVMFolders(includeVMFolders *bool) {
	o.IncludeVMFolders = includeVMFolders
}

// WithIsSecurityGroup adds the isSecurityGroup to the list backup sources params
func (o *ListBackupSourcesParams) WithIsSecurityGroup(isSecurityGroup *bool) *ListBackupSourcesParams {
	o.SetIsSecurityGroup(isSecurityGroup)
	return o
}

// SetIsSecurityGroup adds the isSecurityGroup to the list backup sources params
func (o *ListBackupSourcesParams) SetIsSecurityGroup(isSecurityGroup *bool) {
	o.IsSecurityGroup = isSecurityGroup
}

// WithNodeID adds the nodeID to the list backup sources params
func (o *ListBackupSourcesParams) WithNodeID(nodeID *int64) *ListBackupSourcesParams {
	o.SetNodeID(nodeID)
	return o
}

// SetNodeID adds the nodeId to the list backup sources params
func (o *ListBackupSourcesParams) SetNodeID(nodeID *int64) {
	o.NodeID = nodeID
}

// WithNumLevels adds the numLevels to the list backup sources params
func (o *ListBackupSourcesParams) WithNumLevels(numLevels *int32) *ListBackupSourcesParams {
	o.SetNumLevels(numLevels)
	return o
}

// SetNumLevels adds the numLevels to the list backup sources params
func (o *ListBackupSourcesParams) SetNumLevels(numLevels *int32) {
	o.NumLevels = numLevels
}

// WithOnlyReturnOneLevel adds the onlyReturnOneLevel to the list backup sources params
func (o *ListBackupSourcesParams) WithOnlyReturnOneLevel(onlyReturnOneLevel *bool) *ListBackupSourcesParams {
	o.SetOnlyReturnOneLevel(onlyReturnOneLevel)
	return o
}

// SetOnlyReturnOneLevel adds the onlyReturnOneLevel to the list backup sources params
func (o *ListBackupSourcesParams) SetOnlyReturnOneLevel(onlyReturnOneLevel *bool) {
	o.OnlyReturnOneLevel = onlyReturnOneLevel
}

// WithPageSize adds the pageSize to the list backup sources params
func (o *ListBackupSourcesParams) WithPageSize(pageSize *int64) *ListBackupSourcesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list backup sources params
func (o *ListBackupSourcesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPruneNonCriticalInfo adds the pruneNonCriticalInfo to the list backup sources params
func (o *ListBackupSourcesParams) WithPruneNonCriticalInfo(pruneNonCriticalInfo *bool) *ListBackupSourcesParams {
	o.SetPruneNonCriticalInfo(pruneNonCriticalInfo)
	return o
}

// SetPruneNonCriticalInfo adds the pruneNonCriticalInfo to the list backup sources params
func (o *ListBackupSourcesParams) SetPruneNonCriticalInfo(pruneNonCriticalInfo *bool) {
	o.PruneNonCriticalInfo = pruneNonCriticalInfo
}

// WithRefreshEntityHierarchy adds the refreshEntityHierarchy to the list backup sources params
func (o *ListBackupSourcesParams) WithRefreshEntityHierarchy(refreshEntityHierarchy *bool) *ListBackupSourcesParams {
	o.SetRefreshEntityHierarchy(refreshEntityHierarchy)
	return o
}

// SetRefreshEntityHierarchy adds the refreshEntityHierarchy to the list backup sources params
func (o *ListBackupSourcesParams) SetRefreshEntityHierarchy(refreshEntityHierarchy *bool) {
	o.RefreshEntityHierarchy = refreshEntityHierarchy
}

// WithSids adds the sids to the list backup sources params
func (o *ListBackupSourcesParams) WithSids(sids []string) *ListBackupSourcesParams {
	o.SetSids(sids)
	return o
}

// SetSids adds the sids to the list backup sources params
func (o *ListBackupSourcesParams) SetSids(sids []string) {
	o.Sids = sids
}

// WithTenantIds adds the tenantIds to the list backup sources params
func (o *ListBackupSourcesParams) WithTenantIds(tenantIds []string) *ListBackupSourcesParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the list backup sources params
func (o *ListBackupSourcesParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithUseCachedData adds the useCachedData to the list backup sources params
func (o *ListBackupSourcesParams) WithUseCachedData(useCachedData *bool) *ListBackupSourcesParams {
	o.SetUseCachedData(useCachedData)
	return o
}

// SetUseCachedData adds the useCachedData to the list backup sources params
func (o *ListBackupSourcesParams) SetUseCachedData(useCachedData *bool) {
	o.UseCachedData = useCachedData
}

// WriteToRequest writes these params to a swagger request
func (o *ListBackupSourcesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AfterCursorEntityID != nil {

		// query param afterCursorEntityId
		var qrAfterCursorEntityID int64

		if o.AfterCursorEntityID != nil {
			qrAfterCursorEntityID = *o.AfterCursorEntityID
		}
		qAfterCursorEntityID := swag.FormatInt64(qrAfterCursorEntityID)
		if qAfterCursorEntityID != "" {

			if err := r.SetQueryParam("afterCursorEntityId", qAfterCursorEntityID); err != nil {
				return err
			}
		}
	}

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.AppEnvironmentType != nil {

		// query param appEnvironmentType
		var qrAppEnvironmentType int64

		if o.AppEnvironmentType != nil {
			qrAppEnvironmentType = *o.AppEnvironmentType
		}
		qAppEnvironmentType := swag.FormatInt64(qrAppEnvironmentType)
		if qAppEnvironmentType != "" {

			if err := r.SetQueryParam("appEnvironmentType", qAppEnvironmentType); err != nil {
				return err
			}
		}
	}

	if o.BeforeCursorEntityID != nil {

		// query param beforeCursorEntityId
		var qrBeforeCursorEntityID int64

		if o.BeforeCursorEntityID != nil {
			qrBeforeCursorEntityID = *o.BeforeCursorEntityID
		}
		qBeforeCursorEntityID := swag.FormatInt64(qrBeforeCursorEntityID)
		if qBeforeCursorEntityID != "" {

			if err := r.SetQueryParam("beforeCursorEntityId", qBeforeCursorEntityID); err != nil {
				return err
			}
		}
	}

	if o.EncryptionKey != nil {

		// query param encryptionKey
		var qrEncryptionKey string

		if o.EncryptionKey != nil {
			qrEncryptionKey = *o.EncryptionKey
		}
		qEncryptionKey := qrEncryptionKey
		if qEncryptionKey != "" {

			if err := r.SetQueryParam("encryptionKey", qEncryptionKey); err != nil {
				return err
			}
		}
	}

	if o.EntityID != nil {

		// query param entityId
		var qrEntityID int64

		if o.EntityID != nil {
			qrEntityID = *o.EntityID
		}
		qEntityID := swag.FormatInt64(qrEntityID)
		if qEntityID != "" {

			if err := r.SetQueryParam("entityId", qEntityID); err != nil {
				return err
			}
		}
	}

	if o.EnvTypes != nil {

		// binding items for envTypes
		joinedEnvTypes := o.bindParamEnvTypes(reg)

		// query array param envTypes
		if err := r.SetQueryParam("envTypes", joinedEnvTypes...); err != nil {
			return err
		}
	}

	if o.ExcludeAwsTypes != nil {

		// binding items for excludeAwsTypes
		joinedExcludeAwsTypes := o.bindParamExcludeAwsTypes(reg)

		// query array param excludeAwsTypes
		if err := r.SetQueryParam("excludeAwsTypes", joinedExcludeAwsTypes...); err != nil {
			return err
		}
	}

	if o.ExcludeAzureTypes != nil {

		// binding items for excludeAzureTypes
		joinedExcludeAzureTypes := o.bindParamExcludeAzureTypes(reg)

		// query array param excludeAzureTypes
		if err := r.SetQueryParam("excludeAzureTypes", joinedExcludeAzureTypes...); err != nil {
			return err
		}
	}

	if o.ExcludeKubernetesTypes != nil {

		// binding items for excludeKubernetesTypes
		joinedExcludeKubernetesTypes := o.bindParamExcludeKubernetesTypes(reg)

		// query array param excludeKubernetesTypes
		if err := r.SetQueryParam("excludeKubernetesTypes", joinedExcludeKubernetesTypes...); err != nil {
			return err
		}
	}

	if o.ExcludeOffice365Types != nil {

		// binding items for excludeOffice365Types
		joinedExcludeOffice365Types := o.bindParamExcludeOffice365Types(reg)

		// query array param excludeOffice365Types
		if err := r.SetQueryParam("excludeOffice365Types", joinedExcludeOffice365Types...); err != nil {
			return err
		}
	}

	if o.ExcludeTypes != nil {

		// binding items for excludeTypes
		joinedExcludeTypes := o.bindParamExcludeTypes(reg)

		// query array param excludeTypes
		if err := r.SetQueryParam("excludeTypes", joinedExcludeTypes...); err != nil {
			return err
		}
	}

	if o.HasValidMailbox != nil {

		// query param hasValidMailbox
		var qrHasValidMailbox bool

		if o.HasValidMailbox != nil {
			qrHasValidMailbox = *o.HasValidMailbox
		}
		qHasValidMailbox := swag.FormatBool(qrHasValidMailbox)
		if qHasValidMailbox != "" {

			if err := r.SetQueryParam("hasValidMailbox", qHasValidMailbox); err != nil {
				return err
			}
		}
	}

	if o.HasValidOnedrive != nil {

		// query param hasValidOnedrive
		var qrHasValidOnedrive bool

		if o.HasValidOnedrive != nil {
			qrHasValidOnedrive = *o.HasValidOnedrive
		}
		qHasValidOnedrive := swag.FormatBool(qrHasValidOnedrive)
		if qHasValidOnedrive != "" {

			if err := r.SetQueryParam("hasValidOnedrive", qHasValidOnedrive); err != nil {
				return err
			}
		}
	}

	if o.IncludeDatastores != nil {

		// query param includeDatastores
		var qrIncludeDatastores bool

		if o.IncludeDatastores != nil {
			qrIncludeDatastores = *o.IncludeDatastores
		}
		qIncludeDatastores := swag.FormatBool(qrIncludeDatastores)
		if qIncludeDatastores != "" {

			if err := r.SetQueryParam("includeDatastores", qIncludeDatastores); err != nil {
				return err
			}
		}
	}

	if o.IncludeEntityPermissionInfo != nil {

		// query param includeEntityPermissionInfo
		var qrIncludeEntityPermissionInfo bool

		if o.IncludeEntityPermissionInfo != nil {
			qrIncludeEntityPermissionInfo = *o.IncludeEntityPermissionInfo
		}
		qIncludeEntityPermissionInfo := swag.FormatBool(qrIncludeEntityPermissionInfo)
		if qIncludeEntityPermissionInfo != "" {

			if err := r.SetQueryParam("includeEntityPermissionInfo", qIncludeEntityPermissionInfo); err != nil {
				return err
			}
		}
	}

	if o.IncludeExternalMetadata != nil {

		// query param includeExternalMetadata
		var qrIncludeExternalMetadata bool

		if o.IncludeExternalMetadata != nil {
			qrIncludeExternalMetadata = *o.IncludeExternalMetadata
		}
		qIncludeExternalMetadata := swag.FormatBool(qrIncludeExternalMetadata)
		if qIncludeExternalMetadata != "" {

			if err := r.SetQueryParam("includeExternalMetadata", qIncludeExternalMetadata); err != nil {
				return err
			}
		}
	}

	if o.IncludeNetworkEntities != nil {

		// query param includeNetworkEntities
		var qrIncludeNetworkEntities bool

		if o.IncludeNetworkEntities != nil {
			qrIncludeNetworkEntities = *o.IncludeNetworkEntities
		}
		qIncludeNetworkEntities := swag.FormatBool(qrIncludeNetworkEntities)
		if qIncludeNetworkEntities != "" {

			if err := r.SetQueryParam("includeNetworkEntities", qIncludeNetworkEntities); err != nil {
				return err
			}
		}
	}

	if o.IncludeObjectProtectionInfo != nil {

		// query param includeObjectProtectionInfo
		var qrIncludeObjectProtectionInfo bool

		if o.IncludeObjectProtectionInfo != nil {
			qrIncludeObjectProtectionInfo = *o.IncludeObjectProtectionInfo
		}
		qIncludeObjectProtectionInfo := swag.FormatBool(qrIncludeObjectProtectionInfo)
		if qIncludeObjectProtectionInfo != "" {

			if err := r.SetQueryParam("includeObjectProtectionInfo", qIncludeObjectProtectionInfo); err != nil {
				return err
			}
		}
	}

	if o.IncludeSourceCredentials != nil {

		// query param includeSourceCredentials
		var qrIncludeSourceCredentials bool

		if o.IncludeSourceCredentials != nil {
			qrIncludeSourceCredentials = *o.IncludeSourceCredentials
		}
		qIncludeSourceCredentials := swag.FormatBool(qrIncludeSourceCredentials)
		if qIncludeSourceCredentials != "" {

			if err := r.SetQueryParam("includeSourceCredentials", qIncludeSourceCredentials); err != nil {
				return err
			}
		}
	}

	if o.IncludeSystemVApps != nil {

		// query param includeSystemVApps
		var qrIncludeSystemVApps bool

		if o.IncludeSystemVApps != nil {
			qrIncludeSystemVApps = *o.IncludeSystemVApps
		}
		qIncludeSystemVApps := swag.FormatBool(qrIncludeSystemVApps)
		if qIncludeSystemVApps != "" {

			if err := r.SetQueryParam("includeSystemVApps", qIncludeSystemVApps); err != nil {
				return err
			}
		}
	}

	if o.IncludeVMFolders != nil {

		// query param includeVMFolders
		var qrIncludeVMFolders bool

		if o.IncludeVMFolders != nil {
			qrIncludeVMFolders = *o.IncludeVMFolders
		}
		qIncludeVMFolders := swag.FormatBool(qrIncludeVMFolders)
		if qIncludeVMFolders != "" {

			if err := r.SetQueryParam("includeVMFolders", qIncludeVMFolders); err != nil {
				return err
			}
		}
	}

	if o.IsSecurityGroup != nil {

		// query param isSecurityGroup
		var qrIsSecurityGroup bool

		if o.IsSecurityGroup != nil {
			qrIsSecurityGroup = *o.IsSecurityGroup
		}
		qIsSecurityGroup := swag.FormatBool(qrIsSecurityGroup)
		if qIsSecurityGroup != "" {

			if err := r.SetQueryParam("isSecurityGroup", qIsSecurityGroup); err != nil {
				return err
			}
		}
	}

	if o.NodeID != nil {

		// query param nodeId
		var qrNodeID int64

		if o.NodeID != nil {
			qrNodeID = *o.NodeID
		}
		qNodeID := swag.FormatInt64(qrNodeID)
		if qNodeID != "" {

			if err := r.SetQueryParam("nodeId", qNodeID); err != nil {
				return err
			}
		}
	}

	if o.NumLevels != nil {

		// query param numLevels
		var qrNumLevels int32

		if o.NumLevels != nil {
			qrNumLevels = *o.NumLevels
		}
		qNumLevels := swag.FormatInt32(qrNumLevels)
		if qNumLevels != "" {

			if err := r.SetQueryParam("numLevels", qNumLevels); err != nil {
				return err
			}
		}
	}

	if o.OnlyReturnOneLevel != nil {

		// query param onlyReturnOneLevel
		var qrOnlyReturnOneLevel bool

		if o.OnlyReturnOneLevel != nil {
			qrOnlyReturnOneLevel = *o.OnlyReturnOneLevel
		}
		qOnlyReturnOneLevel := swag.FormatBool(qrOnlyReturnOneLevel)
		if qOnlyReturnOneLevel != "" {

			if err := r.SetQueryParam("onlyReturnOneLevel", qOnlyReturnOneLevel); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PruneNonCriticalInfo != nil {

		// query param pruneNonCriticalInfo
		var qrPruneNonCriticalInfo bool

		if o.PruneNonCriticalInfo != nil {
			qrPruneNonCriticalInfo = *o.PruneNonCriticalInfo
		}
		qPruneNonCriticalInfo := swag.FormatBool(qrPruneNonCriticalInfo)
		if qPruneNonCriticalInfo != "" {

			if err := r.SetQueryParam("pruneNonCriticalInfo", qPruneNonCriticalInfo); err != nil {
				return err
			}
		}
	}

	if o.RefreshEntityHierarchy != nil {

		// query param refreshEntityHierarchy
		var qrRefreshEntityHierarchy bool

		if o.RefreshEntityHierarchy != nil {
			qrRefreshEntityHierarchy = *o.RefreshEntityHierarchy
		}
		qRefreshEntityHierarchy := swag.FormatBool(qrRefreshEntityHierarchy)
		if qRefreshEntityHierarchy != "" {

			if err := r.SetQueryParam("refreshEntityHierarchy", qRefreshEntityHierarchy); err != nil {
				return err
			}
		}
	}

	if o.Sids != nil {

		// binding items for sids
		joinedSids := o.bindParamSids(reg)

		// query array param sids
		if err := r.SetQueryParam("sids", joinedSids...); err != nil {
			return err
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.UseCachedData != nil {

		// query param useCachedData
		var qrUseCachedData bool

		if o.UseCachedData != nil {
			qrUseCachedData = *o.UseCachedData
		}
		qUseCachedData := swag.FormatBool(qrUseCachedData)
		if qUseCachedData != "" {

			if err := r.SetQueryParam("useCachedData", qUseCachedData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListBackupSources binds the parameter envTypes
func (o *ListBackupSourcesParams) bindParamEnvTypes(formats strfmt.Registry) []string {
	envTypesIR := o.EnvTypes

	var envTypesIC []string
	for _, envTypesIIR := range envTypesIR { // explode []int64

		envTypesIIV := swag.FormatInt64(envTypesIIR) // int64 as string
		envTypesIC = append(envTypesIC, envTypesIIV)
	}

	// items.CollectionFormat: ""
	envTypesIS := swag.JoinByFormat(envTypesIC, "")

	return envTypesIS
}

// bindParamListBackupSources binds the parameter excludeAwsTypes
func (o *ListBackupSourcesParams) bindParamExcludeAwsTypes(formats strfmt.Registry) []string {
	excludeAwsTypesIR := o.ExcludeAwsTypes

	var excludeAwsTypesIC []string
	for _, excludeAwsTypesIIR := range excludeAwsTypesIR { // explode []int32

		excludeAwsTypesIIV := swag.FormatInt32(excludeAwsTypesIIR) // int32 as string
		excludeAwsTypesIC = append(excludeAwsTypesIC, excludeAwsTypesIIV)
	}

	// items.CollectionFormat: ""
	excludeAwsTypesIS := swag.JoinByFormat(excludeAwsTypesIC, "")

	return excludeAwsTypesIS
}

// bindParamListBackupSources binds the parameter excludeAzureTypes
func (o *ListBackupSourcesParams) bindParamExcludeAzureTypes(formats strfmt.Registry) []string {
	excludeAzureTypesIR := o.ExcludeAzureTypes

	var excludeAzureTypesIC []string
	for _, excludeAzureTypesIIR := range excludeAzureTypesIR { // explode []int32

		excludeAzureTypesIIV := swag.FormatInt32(excludeAzureTypesIIR) // int32 as string
		excludeAzureTypesIC = append(excludeAzureTypesIC, excludeAzureTypesIIV)
	}

	// items.CollectionFormat: ""
	excludeAzureTypesIS := swag.JoinByFormat(excludeAzureTypesIC, "")

	return excludeAzureTypesIS
}

// bindParamListBackupSources binds the parameter excludeKubernetesTypes
func (o *ListBackupSourcesParams) bindParamExcludeKubernetesTypes(formats strfmt.Registry) []string {
	excludeKubernetesTypesIR := o.ExcludeKubernetesTypes

	var excludeKubernetesTypesIC []string
	for _, excludeKubernetesTypesIIR := range excludeKubernetesTypesIR { // explode []int32

		excludeKubernetesTypesIIV := swag.FormatInt32(excludeKubernetesTypesIIR) // int32 as string
		excludeKubernetesTypesIC = append(excludeKubernetesTypesIC, excludeKubernetesTypesIIV)
	}

	// items.CollectionFormat: ""
	excludeKubernetesTypesIS := swag.JoinByFormat(excludeKubernetesTypesIC, "")

	return excludeKubernetesTypesIS
}

// bindParamListBackupSources binds the parameter excludeOffice365Types
func (o *ListBackupSourcesParams) bindParamExcludeOffice365Types(formats strfmt.Registry) []string {
	excludeOffice365TypesIR := o.ExcludeOffice365Types

	var excludeOffice365TypesIC []string
	for _, excludeOffice365TypesIIR := range excludeOffice365TypesIR { // explode []int32

		excludeOffice365TypesIIV := swag.FormatInt32(excludeOffice365TypesIIR) // int32 as string
		excludeOffice365TypesIC = append(excludeOffice365TypesIC, excludeOffice365TypesIIV)
	}

	// items.CollectionFormat: ""
	excludeOffice365TypesIS := swag.JoinByFormat(excludeOffice365TypesIC, "")

	return excludeOffice365TypesIS
}

// bindParamListBackupSources binds the parameter excludeTypes
func (o *ListBackupSourcesParams) bindParamExcludeTypes(formats strfmt.Registry) []string {
	excludeTypesIR := o.ExcludeTypes

	var excludeTypesIC []string
	for _, excludeTypesIIR := range excludeTypesIR { // explode []int32

		excludeTypesIIV := swag.FormatInt32(excludeTypesIIR) // int32 as string
		excludeTypesIC = append(excludeTypesIC, excludeTypesIIV)
	}

	// items.CollectionFormat: ""
	excludeTypesIS := swag.JoinByFormat(excludeTypesIC, "")

	return excludeTypesIS
}

// bindParamListBackupSources binds the parameter sids
func (o *ListBackupSourcesParams) bindParamSids(formats strfmt.Registry) []string {
	sidsIR := o.Sids

	var sidsIC []string
	for _, sidsIIR := range sidsIR { // explode []string

		sidsIIV := sidsIIR // string as string
		sidsIC = append(sidsIC, sidsIIV)
	}

	// items.CollectionFormat: ""
	sidsIS := swag.JoinByFormat(sidsIC, "")

	return sidsIS
}

// bindParamListBackupSources binds the parameter tenantIds
func (o *ListBackupSourcesParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
