// Code generated by go-swagger; DO NOT EDIT.

package backup_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetResourcePoolsParams creates a new GetResourcePoolsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetResourcePoolsParams() *GetResourcePoolsParams {
	return &GetResourcePoolsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetResourcePoolsParamsWithTimeout creates a new GetResourcePoolsParams object
// with the ability to set a timeout on a request.
func NewGetResourcePoolsParamsWithTimeout(timeout time.Duration) *GetResourcePoolsParams {
	return &GetResourcePoolsParams{
		timeout: timeout,
	}
}

// NewGetResourcePoolsParamsWithContext creates a new GetResourcePoolsParams object
// with the ability to set a context for a request.
func NewGetResourcePoolsParamsWithContext(ctx context.Context) *GetResourcePoolsParams {
	return &GetResourcePoolsParams{
		Context: ctx,
	}
}

// NewGetResourcePoolsParamsWithHTTPClient creates a new GetResourcePoolsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetResourcePoolsParamsWithHTTPClient(client *http.Client) *GetResourcePoolsParams {
	return &GetResourcePoolsParams{
		HTTPClient: client,
	}
}

/*
GetResourcePoolsParams contains all the parameters to send to the API endpoint

	for the get resource pools operation.

	Typically these are written to a http.Request.
*/
type GetResourcePoolsParams struct {

	/* EnvType.

	   EnvType is the type of entity i.e. physical or VMWare.

	   Format: int32
	*/
	EnvType *int32

	/* NamespaceID.

	   NamespaceId specifies the entity Id of the Namespace

	   Format: int64
	*/
	NamespaceID *int64

	/* VCenterID.

	   VCenterId specifies the entity Id of the vCenter.

	   Format: int64
	*/
	VCenterID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get resource pools params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResourcePoolsParams) WithDefaults() *GetResourcePoolsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get resource pools params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResourcePoolsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get resource pools params
func (o *GetResourcePoolsParams) WithTimeout(timeout time.Duration) *GetResourcePoolsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resource pools params
func (o *GetResourcePoolsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resource pools params
func (o *GetResourcePoolsParams) WithContext(ctx context.Context) *GetResourcePoolsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resource pools params
func (o *GetResourcePoolsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resource pools params
func (o *GetResourcePoolsParams) WithHTTPClient(client *http.Client) *GetResourcePoolsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resource pools params
func (o *GetResourcePoolsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvType adds the envType to the get resource pools params
func (o *GetResourcePoolsParams) WithEnvType(envType *int32) *GetResourcePoolsParams {
	o.SetEnvType(envType)
	return o
}

// SetEnvType adds the envType to the get resource pools params
func (o *GetResourcePoolsParams) SetEnvType(envType *int32) {
	o.EnvType = envType
}

// WithNamespaceID adds the namespaceID to the get resource pools params
func (o *GetResourcePoolsParams) WithNamespaceID(namespaceID *int64) *GetResourcePoolsParams {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the get resource pools params
func (o *GetResourcePoolsParams) SetNamespaceID(namespaceID *int64) {
	o.NamespaceID = namespaceID
}

// WithVCenterID adds the vCenterID to the get resource pools params
func (o *GetResourcePoolsParams) WithVCenterID(vCenterID *int64) *GetResourcePoolsParams {
	o.SetVCenterID(vCenterID)
	return o
}

// SetVCenterID adds the vCenterId to the get resource pools params
func (o *GetResourcePoolsParams) SetVCenterID(vCenterID *int64) {
	o.VCenterID = vCenterID
}

// WriteToRequest writes these params to a swagger request
func (o *GetResourcePoolsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnvType != nil {

		// query param envType
		var qrEnvType int32

		if o.EnvType != nil {
			qrEnvType = *o.EnvType
		}
		qEnvType := swag.FormatInt32(qrEnvType)
		if qEnvType != "" {

			if err := r.SetQueryParam("envType", qEnvType); err != nil {
				return err
			}
		}
	}

	if o.NamespaceID != nil {

		// query param namespaceId
		var qrNamespaceID int64

		if o.NamespaceID != nil {
			qrNamespaceID = *o.NamespaceID
		}
		qNamespaceID := swag.FormatInt64(qrNamespaceID)
		if qNamespaceID != "" {

			if err := r.SetQueryParam("namespaceId", qNamespaceID); err != nil {
				return err
			}
		}
	}

	if o.VCenterID != nil {

		// query param vCenterId
		var qrVCenterID int64

		if o.VCenterID != nil {
			qrVCenterID = *o.VCenterID
		}
		qVCenterID := swag.FormatInt64(qrVCenterID)
		if qVCenterID != "" {

			if err := r.SetQueryParam("vCenterId", qVCenterID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
