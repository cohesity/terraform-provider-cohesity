// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSchedulerJobsParams creates a new GetSchedulerJobsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSchedulerJobsParams() *GetSchedulerJobsParams {
	return &GetSchedulerJobsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSchedulerJobsParamsWithTimeout creates a new GetSchedulerJobsParams object
// with the ability to set a timeout on a request.
func NewGetSchedulerJobsParamsWithTimeout(timeout time.Duration) *GetSchedulerJobsParams {
	return &GetSchedulerJobsParams{
		timeout: timeout,
	}
}

// NewGetSchedulerJobsParamsWithContext creates a new GetSchedulerJobsParams object
// with the ability to set a context for a request.
func NewGetSchedulerJobsParamsWithContext(ctx context.Context) *GetSchedulerJobsParams {
	return &GetSchedulerJobsParams{
		Context: ctx,
	}
}

// NewGetSchedulerJobsParamsWithHTTPClient creates a new GetSchedulerJobsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSchedulerJobsParamsWithHTTPClient(client *http.Client) *GetSchedulerJobsParams {
	return &GetSchedulerJobsParams{
		HTTPClient: client,
	}
}

/*
GetSchedulerJobsParams contains all the parameters to send to the API endpoint

	for the get scheduler jobs operation.

	Typically these are written to a http.Request.
*/
type GetSchedulerJobsParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* Ids.

	   Specifies ids of scheduler jobs to fetch.
	*/
	Ids []int64

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get scheduler jobs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSchedulerJobsParams) WithDefaults() *GetSchedulerJobsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get scheduler jobs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSchedulerJobsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get scheduler jobs params
func (o *GetSchedulerJobsParams) WithTimeout(timeout time.Duration) *GetSchedulerJobsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scheduler jobs params
func (o *GetSchedulerJobsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scheduler jobs params
func (o *GetSchedulerJobsParams) WithContext(ctx context.Context) *GetSchedulerJobsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scheduler jobs params
func (o *GetSchedulerJobsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scheduler jobs params
func (o *GetSchedulerJobsParams) WithHTTPClient(client *http.Client) *GetSchedulerJobsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scheduler jobs params
func (o *GetSchedulerJobsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get scheduler jobs params
func (o *GetSchedulerJobsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetSchedulerJobsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get scheduler jobs params
func (o *GetSchedulerJobsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithIds adds the ids to the get scheduler jobs params
func (o *GetSchedulerJobsParams) WithIds(ids []int64) *GetSchedulerJobsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get scheduler jobs params
func (o *GetSchedulerJobsParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithTenantIds adds the tenantIds to the get scheduler jobs params
func (o *GetSchedulerJobsParams) WithTenantIds(tenantIds []string) *GetSchedulerJobsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get scheduler jobs params
func (o *GetSchedulerJobsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetSchedulerJobsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetSchedulerJobs binds the parameter ids
func (o *GetSchedulerJobsParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetSchedulerJobs binds the parameter tenantIds
func (o *GetSchedulerJobsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
