// Code generated by go-swagger; DO NOT EDIT.

package view_boxes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new view boxes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new view boxes API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new view boxes API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for view boxes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateViewBox(params *CreateViewBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewBoxCreated, error)

	DeleteViewBox(params *DeleteViewBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewBoxNoContent, error)

	GetViewBoxByID(params *GetViewBoxByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewBoxByIDOK, error)

	GetViewBoxes(params *GetViewBoxesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewBoxesOK, error)

	UpdateViewBox(params *UpdateViewBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewBoxOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateViewBox creates a domain view box

**Privileges:** ```STORAGE_DOMAIN_MODIFY``` <br><br>Returns the created Domain (View Box).
*/
func (a *Client) CreateViewBox(params *CreateViewBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewBoxCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateViewBoxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateViewBox",
		Method:             "POST",
		PathPattern:        "/public/viewBoxes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateViewBoxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateViewBoxCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateViewBoxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteViewBox deletes a domain view box

**Privileges:** ```STORAGE_DOMAIN_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteViewBox(params *DeleteViewBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewBoxNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteViewBoxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteViewBox",
		Method:             "DELETE",
		PathPattern:        "/public/viewBoxes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteViewBoxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteViewBoxNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteViewBoxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetViewBoxByID lists details about a single domain view box

	**Privileges:** ```STORAGE_DOMAIN_VIEW``` <br><br>Returns the Domain (View Box) corresponding to the specified Domain (View Box)

Id.
*/
func (a *Client) GetViewBoxByID(params *GetViewBoxByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewBoxByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewBoxByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewBoxById",
		Method:             "GET",
		PathPattern:        "/public/viewBoxes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewBoxByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewBoxByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewBoxByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetViewBoxes lists domains view boxes filtered by the specified parameters

	**Privileges:** ```STORAGE_DOMAIN_VIEW``` <br><br>If no parameters are specified, all Domains (View Boxes) currently on

the Cohesity Cluster are returned.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetViewBoxes(params *GetViewBoxesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewBoxesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewBoxesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewBoxes",
		Method:             "GET",
		PathPattern:        "/public/viewBoxes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewBoxesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewBoxesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewBoxesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateViewBox updates a domain view box

**Privileges:** ```STORAGE_DOMAIN_MODIFY``` <br><br>Returns the updated Domain (View Box).
*/
func (a *Client) UpdateViewBox(params *UpdateViewBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewBoxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewBoxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateViewBox",
		Method:             "PUT",
		PathPattern:        "/public/viewBoxes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewBoxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewBoxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewBoxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
