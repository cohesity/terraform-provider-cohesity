// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchProtectionSourcesParams creates a new SearchProtectionSourcesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchProtectionSourcesParams() *SearchProtectionSourcesParams {
	return &SearchProtectionSourcesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchProtectionSourcesParamsWithTimeout creates a new SearchProtectionSourcesParams object
// with the ability to set a timeout on a request.
func NewSearchProtectionSourcesParamsWithTimeout(timeout time.Duration) *SearchProtectionSourcesParams {
	return &SearchProtectionSourcesParams{
		timeout: timeout,
	}
}

// NewSearchProtectionSourcesParamsWithContext creates a new SearchProtectionSourcesParams object
// with the ability to set a context for a request.
func NewSearchProtectionSourcesParamsWithContext(ctx context.Context) *SearchProtectionSourcesParams {
	return &SearchProtectionSourcesParams{
		Context: ctx,
	}
}

// NewSearchProtectionSourcesParamsWithHTTPClient creates a new SearchProtectionSourcesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchProtectionSourcesParamsWithHTTPClient(client *http.Client) *SearchProtectionSourcesParams {
	return &SearchProtectionSourcesParams{
		HTTPClient: client,
	}
}

/*
SearchProtectionSourcesParams contains all the parameters to send to the API endpoint

	for the search protection sources operation.

	Typically these are written to a http.Request.
*/
type SearchProtectionSourcesParams struct {

	/* CountryList.

	   Specifies the list of countries to which Office365 user belongs.
	*/
	CountryList []string

	/* DepartmentList.

	   Specifies the list of departments to which an Office365 user may belong.
	*/
	DepartmentList []string

	/* Environments.

	     Specifies the environment type by which Protection Sources will be
	filtered.
	Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	'kVMware' indicates the VMware Protection Source environment.
	'kHyperV' indicates the HyperV Protection Source environment.
	'kSQL' indicates the SQL Protection Source environment.
	'kView' indicates the View Protection Source environment.
	'kPuppeteer' indicates the Cohesity's Remote Adapter.
	'kPhysical' indicates the physical Protection Source environment.
	'kPure' indicates the Pure Storage Protection Source environment.
	'kNimble' indicates the Nimble Storage Protection Source environment.
	'kAzure' indicates the Microsoft's Azure Protection Source environment.
	'kNetapp' indicates the Netapp Protection Source environment.
	'kAgent' indicates the Agent Protection Source environment.
	'kGenericNas' indicates the Generic Network Attached Storage Protection
	Source environment.
	'kAcropolis' indicates the Acropolis Protection Source environment.
	'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	'kGPFS' indicates IBM's GPFS Protection Source environment.
	'kKVM' indicates the KVM Protection Source environment.
	'kAWS' indicates the AWS Protection Source environment.
	'kExchange' indicates the Exchange Protection Source environment.
	'kHyperVVSS' indicates the HyperV VSS Protection Source
	environment.
	'kOracle' indicates the Oracle Protection Source environment.
	'kGCP' indicates the Google Cloud Platform Protection Source environment.
	'kFlashBlade' indicates the Flash Blade Protection Source environment.
	'kAWSNative' indicates the AWS Native Protection Source environment.
	'kO365' indicates the Office 365 Protection Source environment.
	'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	'kGCPNative' indicates the GCP Native Protection Source environment.
	'kAzureNative' indicates the Azure Native Protection Source environment.
	'kKubernetes' indicates a Kubernetes Protection Source environment.
	'kElastifile' indicates Elastifile Protection Source environment.
	'kAD' indicates Active Directory Protection Source environment.
	'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	'kCassandra' indicates Cassandra Protection Source environment.
	'kMongoDB' indicates MongoDB Protection Source environment.
	'kCouchbase' indicates Couchbase Protection Source environment.
	'kHdfs' indicates Hdfs Protection Source environment.
	'kHive' indicates Hive Protection Source environment.
	'kHBase' indicates HBase Protection Source environment.
	'kUDA' indicates Universal Data Adapter Protection Source environment.
	'kSAPHANA' indicates SAP HANA protection source environment.
	'kO365Teams' indicates the Office365 Teams Protection Source environment.
	'kO365Group' indicates the Office365 Groups Protection Source environment.
	'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	kO365PublicFolders
	*/
	Environments []string

	/* LastProtectionJobRunStatus.

	     Specifies the last Protection Job run status of the object. If specified,
	objects will be filtered based on last job run status.
	*/
	LastProtectionJobRunStatus []int32

	/* Office365ProtectionSourceTypes.

	   Specifies the Array of Office365 source types.
	*/
	Office365ProtectionSourceTypes []string

	/* PageCount.

	     Specifies the number of items to return in the response for pagination
	purposes. Default the pageCount to MaxSearchResponseSize if this is
	unspecified.

	     Format: int32
	*/
	PageCount *int32

	/* PhysicalServerHostTypes.

	     Specifies physical server host OS type. If specified, the physical server
	objects will be filtered based on OS type of the server.
	'kLinux' indicates the Linux operating system.
	'kWindows' indicates the Microsoft Windows operating system.
	'kAix' indicates the IBM AIX operating system.
	'kSolaris' indicates the Oracle Solaris operating system.
	'kSapHana' indicates the Sap Hana database system developed by SAP SE.
	'kSapOracle' indicates the Sap Oracle database system developed by SAP SE.
	'kCockroachDB' indicates the CockroachDB database system.
	'kMySQL' indicates the MySQL database system.
	'kSapSybase' indicates the SapSybase database system.
	'kSapMaxDB' indicates the SapMaxDB database system.
	'kSapSybaseIQ' indicates the SapSybaseIQ database system.
	'kDB2' indicates the DB2 database system.
	'kSapASE' indicates the SapASE database system.
	'kMariaDB' indicates the MariaDB database system.
	'kPostgreSQL' indicates the PostgreSQL database system.
	'kHPUX' indicates the HPUX database system.
	'kVOS' indicates the VOS database system.
	'kOther' indicates the other types of operating system.
	*/
	PhysicalServerHostTypes []string

	/* ProtectionStatus.

	     Specifies the protection status of the object. If specified, the objects
	are filtered based on current protection status of that object on the
	cluster. Possible values that can be passed are "protected", "unprotected"
	or both. If not specified, all the objects are returned irrespective of
	protection status of the object.
	*/
	ProtectionStatus []string

	/* RegisteredSourceUuids.

	     Specifies the list of Registered Sources Uuids. Only items from the listed
	Registered Sources are returned.
	*/
	RegisteredSourceUuids []string

	/* SearchString.

	     Specifies the search string to query the name of the Protection Source or
	the name of the job protecting a Protection Source.
	*/
	SearchString *string

	/* StartIndex.

	     Specifies an index number that can be used to return subsets of items
	in multiple requests.
	Break up the items to return into multiple requests by setting pageCount
	and using startIndex to return a subsets of items.

	For example, set startIndex to 0 to get the first set of items
	for the first request. Increment startIndex by pageCount
	to get the next set of items for a next request.

	     Format: int32
	*/
	StartIndex *int32

	/* TitleList.

	   Specifies the list of titles/desgination applicable to Office365 users.
	*/
	TitleList []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search protection sources params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchProtectionSourcesParams) WithDefaults() *SearchProtectionSourcesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search protection sources params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchProtectionSourcesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search protection sources params
func (o *SearchProtectionSourcesParams) WithTimeout(timeout time.Duration) *SearchProtectionSourcesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search protection sources params
func (o *SearchProtectionSourcesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search protection sources params
func (o *SearchProtectionSourcesParams) WithContext(ctx context.Context) *SearchProtectionSourcesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search protection sources params
func (o *SearchProtectionSourcesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search protection sources params
func (o *SearchProtectionSourcesParams) WithHTTPClient(client *http.Client) *SearchProtectionSourcesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search protection sources params
func (o *SearchProtectionSourcesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCountryList adds the countryList to the search protection sources params
func (o *SearchProtectionSourcesParams) WithCountryList(countryList []string) *SearchProtectionSourcesParams {
	o.SetCountryList(countryList)
	return o
}

// SetCountryList adds the countryList to the search protection sources params
func (o *SearchProtectionSourcesParams) SetCountryList(countryList []string) {
	o.CountryList = countryList
}

// WithDepartmentList adds the departmentList to the search protection sources params
func (o *SearchProtectionSourcesParams) WithDepartmentList(departmentList []string) *SearchProtectionSourcesParams {
	o.SetDepartmentList(departmentList)
	return o
}

// SetDepartmentList adds the departmentList to the search protection sources params
func (o *SearchProtectionSourcesParams) SetDepartmentList(departmentList []string) {
	o.DepartmentList = departmentList
}

// WithEnvironments adds the environments to the search protection sources params
func (o *SearchProtectionSourcesParams) WithEnvironments(environments []string) *SearchProtectionSourcesParams {
	o.SetEnvironments(environments)
	return o
}

// SetEnvironments adds the environments to the search protection sources params
func (o *SearchProtectionSourcesParams) SetEnvironments(environments []string) {
	o.Environments = environments
}

// WithLastProtectionJobRunStatus adds the lastProtectionJobRunStatus to the search protection sources params
func (o *SearchProtectionSourcesParams) WithLastProtectionJobRunStatus(lastProtectionJobRunStatus []int32) *SearchProtectionSourcesParams {
	o.SetLastProtectionJobRunStatus(lastProtectionJobRunStatus)
	return o
}

// SetLastProtectionJobRunStatus adds the lastProtectionJobRunStatus to the search protection sources params
func (o *SearchProtectionSourcesParams) SetLastProtectionJobRunStatus(lastProtectionJobRunStatus []int32) {
	o.LastProtectionJobRunStatus = lastProtectionJobRunStatus
}

// WithOffice365ProtectionSourceTypes adds the office365ProtectionSourceTypes to the search protection sources params
func (o *SearchProtectionSourcesParams) WithOffice365ProtectionSourceTypes(office365ProtectionSourceTypes []string) *SearchProtectionSourcesParams {
	o.SetOffice365ProtectionSourceTypes(office365ProtectionSourceTypes)
	return o
}

// SetOffice365ProtectionSourceTypes adds the office365ProtectionSourceTypes to the search protection sources params
func (o *SearchProtectionSourcesParams) SetOffice365ProtectionSourceTypes(office365ProtectionSourceTypes []string) {
	o.Office365ProtectionSourceTypes = office365ProtectionSourceTypes
}

// WithPageCount adds the pageCount to the search protection sources params
func (o *SearchProtectionSourcesParams) WithPageCount(pageCount *int32) *SearchProtectionSourcesParams {
	o.SetPageCount(pageCount)
	return o
}

// SetPageCount adds the pageCount to the search protection sources params
func (o *SearchProtectionSourcesParams) SetPageCount(pageCount *int32) {
	o.PageCount = pageCount
}

// WithPhysicalServerHostTypes adds the physicalServerHostTypes to the search protection sources params
func (o *SearchProtectionSourcesParams) WithPhysicalServerHostTypes(physicalServerHostTypes []string) *SearchProtectionSourcesParams {
	o.SetPhysicalServerHostTypes(physicalServerHostTypes)
	return o
}

// SetPhysicalServerHostTypes adds the physicalServerHostTypes to the search protection sources params
func (o *SearchProtectionSourcesParams) SetPhysicalServerHostTypes(physicalServerHostTypes []string) {
	o.PhysicalServerHostTypes = physicalServerHostTypes
}

// WithProtectionStatus adds the protectionStatus to the search protection sources params
func (o *SearchProtectionSourcesParams) WithProtectionStatus(protectionStatus []string) *SearchProtectionSourcesParams {
	o.SetProtectionStatus(protectionStatus)
	return o
}

// SetProtectionStatus adds the protectionStatus to the search protection sources params
func (o *SearchProtectionSourcesParams) SetProtectionStatus(protectionStatus []string) {
	o.ProtectionStatus = protectionStatus
}

// WithRegisteredSourceUuids adds the registeredSourceUuids to the search protection sources params
func (o *SearchProtectionSourcesParams) WithRegisteredSourceUuids(registeredSourceUuids []string) *SearchProtectionSourcesParams {
	o.SetRegisteredSourceUuids(registeredSourceUuids)
	return o
}

// SetRegisteredSourceUuids adds the registeredSourceUuids to the search protection sources params
func (o *SearchProtectionSourcesParams) SetRegisteredSourceUuids(registeredSourceUuids []string) {
	o.RegisteredSourceUuids = registeredSourceUuids
}

// WithSearchString adds the searchString to the search protection sources params
func (o *SearchProtectionSourcesParams) WithSearchString(searchString *string) *SearchProtectionSourcesParams {
	o.SetSearchString(searchString)
	return o
}

// SetSearchString adds the searchString to the search protection sources params
func (o *SearchProtectionSourcesParams) SetSearchString(searchString *string) {
	o.SearchString = searchString
}

// WithStartIndex adds the startIndex to the search protection sources params
func (o *SearchProtectionSourcesParams) WithStartIndex(startIndex *int32) *SearchProtectionSourcesParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the search protection sources params
func (o *SearchProtectionSourcesParams) SetStartIndex(startIndex *int32) {
	o.StartIndex = startIndex
}

// WithTitleList adds the titleList to the search protection sources params
func (o *SearchProtectionSourcesParams) WithTitleList(titleList []string) *SearchProtectionSourcesParams {
	o.SetTitleList(titleList)
	return o
}

// SetTitleList adds the titleList to the search protection sources params
func (o *SearchProtectionSourcesParams) SetTitleList(titleList []string) {
	o.TitleList = titleList
}

// WriteToRequest writes these params to a swagger request
func (o *SearchProtectionSourcesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CountryList != nil {

		// binding items for countryList
		joinedCountryList := o.bindParamCountryList(reg)

		// query array param countryList
		if err := r.SetQueryParam("countryList", joinedCountryList...); err != nil {
			return err
		}
	}

	if o.DepartmentList != nil {

		// binding items for departmentList
		joinedDepartmentList := o.bindParamDepartmentList(reg)

		// query array param departmentList
		if err := r.SetQueryParam("departmentList", joinedDepartmentList...); err != nil {
			return err
		}
	}

	if o.Environments != nil {

		// binding items for environments
		joinedEnvironments := o.bindParamEnvironments(reg)

		// query array param environments
		if err := r.SetQueryParam("environments", joinedEnvironments...); err != nil {
			return err
		}
	}

	if o.LastProtectionJobRunStatus != nil {

		// binding items for lastProtectionJobRunStatus
		joinedLastProtectionJobRunStatus := o.bindParamLastProtectionJobRunStatus(reg)

		// query array param lastProtectionJobRunStatus
		if err := r.SetQueryParam("lastProtectionJobRunStatus", joinedLastProtectionJobRunStatus...); err != nil {
			return err
		}
	}

	if o.Office365ProtectionSourceTypes != nil {

		// binding items for office365ProtectionSourceTypes
		joinedOffice365ProtectionSourceTypes := o.bindParamOffice365ProtectionSourceTypes(reg)

		// query array param office365ProtectionSourceTypes
		if err := r.SetQueryParam("office365ProtectionSourceTypes", joinedOffice365ProtectionSourceTypes...); err != nil {
			return err
		}
	}

	if o.PageCount != nil {

		// query param pageCount
		var qrPageCount int32

		if o.PageCount != nil {
			qrPageCount = *o.PageCount
		}
		qPageCount := swag.FormatInt32(qrPageCount)
		if qPageCount != "" {

			if err := r.SetQueryParam("pageCount", qPageCount); err != nil {
				return err
			}
		}
	}

	if o.PhysicalServerHostTypes != nil {

		// binding items for physicalServerHostTypes
		joinedPhysicalServerHostTypes := o.bindParamPhysicalServerHostTypes(reg)

		// query array param physicalServerHostTypes
		if err := r.SetQueryParam("physicalServerHostTypes", joinedPhysicalServerHostTypes...); err != nil {
			return err
		}
	}

	if o.ProtectionStatus != nil {

		// binding items for protectionStatus
		joinedProtectionStatus := o.bindParamProtectionStatus(reg)

		// query array param protectionStatus
		if err := r.SetQueryParam("protectionStatus", joinedProtectionStatus...); err != nil {
			return err
		}
	}

	if o.RegisteredSourceUuids != nil {

		// binding items for registeredSourceUuids
		joinedRegisteredSourceUuids := o.bindParamRegisteredSourceUuids(reg)

		// query array param registeredSourceUuids
		if err := r.SetQueryParam("registeredSourceUuids", joinedRegisteredSourceUuids...); err != nil {
			return err
		}
	}

	if o.SearchString != nil {

		// query param searchString
		var qrSearchString string

		if o.SearchString != nil {
			qrSearchString = *o.SearchString
		}
		qSearchString := qrSearchString
		if qSearchString != "" {

			if err := r.SetQueryParam("searchString", qSearchString); err != nil {
				return err
			}
		}
	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int32

		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt32(qrStartIndex)
		if qStartIndex != "" {

			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}
	}

	if o.TitleList != nil {

		// binding items for titleList
		joinedTitleList := o.bindParamTitleList(reg)

		// query array param titleList
		if err := r.SetQueryParam("titleList", joinedTitleList...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchProtectionSources binds the parameter countryList
func (o *SearchProtectionSourcesParams) bindParamCountryList(formats strfmt.Registry) []string {
	countryListIR := o.CountryList

	var countryListIC []string
	for _, countryListIIR := range countryListIR { // explode []string

		countryListIIV := countryListIIR // string as string
		countryListIC = append(countryListIC, countryListIIV)
	}

	// items.CollectionFormat: ""
	countryListIS := swag.JoinByFormat(countryListIC, "")

	return countryListIS
}

// bindParamSearchProtectionSources binds the parameter departmentList
func (o *SearchProtectionSourcesParams) bindParamDepartmentList(formats strfmt.Registry) []string {
	departmentListIR := o.DepartmentList

	var departmentListIC []string
	for _, departmentListIIR := range departmentListIR { // explode []string

		departmentListIIV := departmentListIIR // string as string
		departmentListIC = append(departmentListIC, departmentListIIV)
	}

	// items.CollectionFormat: ""
	departmentListIS := swag.JoinByFormat(departmentListIC, "")

	return departmentListIS
}

// bindParamSearchProtectionSources binds the parameter environments
func (o *SearchProtectionSourcesParams) bindParamEnvironments(formats strfmt.Registry) []string {
	environmentsIR := o.Environments

	var environmentsIC []string
	for _, environmentsIIR := range environmentsIR { // explode []string

		environmentsIIV := environmentsIIR // string as string
		environmentsIC = append(environmentsIC, environmentsIIV)
	}

	// items.CollectionFormat: ""
	environmentsIS := swag.JoinByFormat(environmentsIC, "")

	return environmentsIS
}

// bindParamSearchProtectionSources binds the parameter lastProtectionJobRunStatus
func (o *SearchProtectionSourcesParams) bindParamLastProtectionJobRunStatus(formats strfmt.Registry) []string {
	lastProtectionJobRunStatusIR := o.LastProtectionJobRunStatus

	var lastProtectionJobRunStatusIC []string
	for _, lastProtectionJobRunStatusIIR := range lastProtectionJobRunStatusIR { // explode []int32

		lastProtectionJobRunStatusIIV := swag.FormatInt32(lastProtectionJobRunStatusIIR) // int32 as string
		lastProtectionJobRunStatusIC = append(lastProtectionJobRunStatusIC, lastProtectionJobRunStatusIIV)
	}

	// items.CollectionFormat: ""
	lastProtectionJobRunStatusIS := swag.JoinByFormat(lastProtectionJobRunStatusIC, "")

	return lastProtectionJobRunStatusIS
}

// bindParamSearchProtectionSources binds the parameter office365ProtectionSourceTypes
func (o *SearchProtectionSourcesParams) bindParamOffice365ProtectionSourceTypes(formats strfmt.Registry) []string {
	office365ProtectionSourceTypesIR := o.Office365ProtectionSourceTypes

	var office365ProtectionSourceTypesIC []string
	for _, office365ProtectionSourceTypesIIR := range office365ProtectionSourceTypesIR { // explode []string

		office365ProtectionSourceTypesIIV := office365ProtectionSourceTypesIIR // string as string
		office365ProtectionSourceTypesIC = append(office365ProtectionSourceTypesIC, office365ProtectionSourceTypesIIV)
	}

	// items.CollectionFormat: ""
	office365ProtectionSourceTypesIS := swag.JoinByFormat(office365ProtectionSourceTypesIC, "")

	return office365ProtectionSourceTypesIS
}

// bindParamSearchProtectionSources binds the parameter physicalServerHostTypes
func (o *SearchProtectionSourcesParams) bindParamPhysicalServerHostTypes(formats strfmt.Registry) []string {
	physicalServerHostTypesIR := o.PhysicalServerHostTypes

	var physicalServerHostTypesIC []string
	for _, physicalServerHostTypesIIR := range physicalServerHostTypesIR { // explode []string

		physicalServerHostTypesIIV := physicalServerHostTypesIIR // string as string
		physicalServerHostTypesIC = append(physicalServerHostTypesIC, physicalServerHostTypesIIV)
	}

	// items.CollectionFormat: ""
	physicalServerHostTypesIS := swag.JoinByFormat(physicalServerHostTypesIC, "")

	return physicalServerHostTypesIS
}

// bindParamSearchProtectionSources binds the parameter protectionStatus
func (o *SearchProtectionSourcesParams) bindParamProtectionStatus(formats strfmt.Registry) []string {
	protectionStatusIR := o.ProtectionStatus

	var protectionStatusIC []string
	for _, protectionStatusIIR := range protectionStatusIR { // explode []string

		protectionStatusIIV := protectionStatusIIR // string as string
		protectionStatusIC = append(protectionStatusIC, protectionStatusIIV)
	}

	// items.CollectionFormat: ""
	protectionStatusIS := swag.JoinByFormat(protectionStatusIC, "")

	return protectionStatusIS
}

// bindParamSearchProtectionSources binds the parameter registeredSourceUuids
func (o *SearchProtectionSourcesParams) bindParamRegisteredSourceUuids(formats strfmt.Registry) []string {
	registeredSourceUuidsIR := o.RegisteredSourceUuids

	var registeredSourceUuidsIC []string
	for _, registeredSourceUuidsIIR := range registeredSourceUuidsIR { // explode []string

		registeredSourceUuidsIIV := registeredSourceUuidsIIR // string as string
		registeredSourceUuidsIC = append(registeredSourceUuidsIC, registeredSourceUuidsIIV)
	}

	// items.CollectionFormat: ""
	registeredSourceUuidsIS := swag.JoinByFormat(registeredSourceUuidsIC, "")

	return registeredSourceUuidsIS
}

// bindParamSearchProtectionSources binds the parameter titleList
func (o *SearchProtectionSourcesParams) bindParamTitleList(formats strfmt.Registry) []string {
	titleListIR := o.TitleList

	var titleListIC []string
	for _, titleListIIR := range titleListIR { // explode []string

		titleListIIV := titleListIIR // string as string
		titleListIC = append(titleListIC, titleListIIV)
	}

	// items.CollectionFormat: ""
	titleListIS := swag.JoinByFormat(titleListIC, "")

	return titleListIS
}
