// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDownloadMROutputFilesParams creates a new DownloadMROutputFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDownloadMROutputFilesParams() *DownloadMROutputFilesParams {
	return &DownloadMROutputFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDownloadMROutputFilesParamsWithTimeout creates a new DownloadMROutputFilesParams object
// with the ability to set a timeout on a request.
func NewDownloadMROutputFilesParamsWithTimeout(timeout time.Duration) *DownloadMROutputFilesParams {
	return &DownloadMROutputFilesParams{
		timeout: timeout,
	}
}

// NewDownloadMROutputFilesParamsWithContext creates a new DownloadMROutputFilesParams object
// with the ability to set a context for a request.
func NewDownloadMROutputFilesParamsWithContext(ctx context.Context) *DownloadMROutputFilesParams {
	return &DownloadMROutputFilesParams{
		Context: ctx,
	}
}

// NewDownloadMROutputFilesParamsWithHTTPClient creates a new DownloadMROutputFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewDownloadMROutputFilesParamsWithHTTPClient(client *http.Client) *DownloadMROutputFilesParams {
	return &DownloadMROutputFilesParams{
		HTTPClient: client,
	}
}

/*
DownloadMROutputFilesParams contains all the parameters to send to the API endpoint

	for the download m r output files operation.

	Typically these are written to a http.Request.
*/
type DownloadMROutputFilesParams struct {

	/* FilePath.

	   filepath of the file on NFS.
	*/
	FilePath *string

	/* IsNfsFile.

	   If true, then extracts file from NFS, else from local file system.
	*/
	IsNfsFile *bool

	/* LengthBytes.

	   Number of bytes to be read from start_offset.

	   Format: int64
	*/
	LengthBytes *int64

	/* PartitionID.

	   Cluster partition id for the file to be read.

	   Format: int64
	*/
	PartitionID *int64

	/* StartOffset.

	   start offset from where bytes will be read.

	   Format: int64
	*/
	StartOffset *int64

	/* ViewBoxID.

	   View box id for the file to be read. Required for nfs files only.

	   Format: int64
	*/
	ViewBoxID *int64

	/* ViewName.

	   View name for the file to be read. Required for nfs files only.
	*/
	ViewName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the download m r output files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadMROutputFilesParams) WithDefaults() *DownloadMROutputFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the download m r output files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadMROutputFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the download m r output files params
func (o *DownloadMROutputFilesParams) WithTimeout(timeout time.Duration) *DownloadMROutputFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the download m r output files params
func (o *DownloadMROutputFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the download m r output files params
func (o *DownloadMROutputFilesParams) WithContext(ctx context.Context) *DownloadMROutputFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the download m r output files params
func (o *DownloadMROutputFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the download m r output files params
func (o *DownloadMROutputFilesParams) WithHTTPClient(client *http.Client) *DownloadMROutputFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the download m r output files params
func (o *DownloadMROutputFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilePath adds the filePath to the download m r output files params
func (o *DownloadMROutputFilesParams) WithFilePath(filePath *string) *DownloadMROutputFilesParams {
	o.SetFilePath(filePath)
	return o
}

// SetFilePath adds the filePath to the download m r output files params
func (o *DownloadMROutputFilesParams) SetFilePath(filePath *string) {
	o.FilePath = filePath
}

// WithIsNfsFile adds the isNfsFile to the download m r output files params
func (o *DownloadMROutputFilesParams) WithIsNfsFile(isNfsFile *bool) *DownloadMROutputFilesParams {
	o.SetIsNfsFile(isNfsFile)
	return o
}

// SetIsNfsFile adds the isNfsFile to the download m r output files params
func (o *DownloadMROutputFilesParams) SetIsNfsFile(isNfsFile *bool) {
	o.IsNfsFile = isNfsFile
}

// WithLengthBytes adds the lengthBytes to the download m r output files params
func (o *DownloadMROutputFilesParams) WithLengthBytes(lengthBytes *int64) *DownloadMROutputFilesParams {
	o.SetLengthBytes(lengthBytes)
	return o
}

// SetLengthBytes adds the lengthBytes to the download m r output files params
func (o *DownloadMROutputFilesParams) SetLengthBytes(lengthBytes *int64) {
	o.LengthBytes = lengthBytes
}

// WithPartitionID adds the partitionID to the download m r output files params
func (o *DownloadMROutputFilesParams) WithPartitionID(partitionID *int64) *DownloadMROutputFilesParams {
	o.SetPartitionID(partitionID)
	return o
}

// SetPartitionID adds the partitionId to the download m r output files params
func (o *DownloadMROutputFilesParams) SetPartitionID(partitionID *int64) {
	o.PartitionID = partitionID
}

// WithStartOffset adds the startOffset to the download m r output files params
func (o *DownloadMROutputFilesParams) WithStartOffset(startOffset *int64) *DownloadMROutputFilesParams {
	o.SetStartOffset(startOffset)
	return o
}

// SetStartOffset adds the startOffset to the download m r output files params
func (o *DownloadMROutputFilesParams) SetStartOffset(startOffset *int64) {
	o.StartOffset = startOffset
}

// WithViewBoxID adds the viewBoxID to the download m r output files params
func (o *DownloadMROutputFilesParams) WithViewBoxID(viewBoxID *int64) *DownloadMROutputFilesParams {
	o.SetViewBoxID(viewBoxID)
	return o
}

// SetViewBoxID adds the viewBoxId to the download m r output files params
func (o *DownloadMROutputFilesParams) SetViewBoxID(viewBoxID *int64) {
	o.ViewBoxID = viewBoxID
}

// WithViewName adds the viewName to the download m r output files params
func (o *DownloadMROutputFilesParams) WithViewName(viewName *string) *DownloadMROutputFilesParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the download m r output files params
func (o *DownloadMROutputFilesParams) SetViewName(viewName *string) {
	o.ViewName = viewName
}

// WriteToRequest writes these params to a swagger request
func (o *DownloadMROutputFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilePath != nil {

		// query param filePath
		var qrFilePath string

		if o.FilePath != nil {
			qrFilePath = *o.FilePath
		}
		qFilePath := qrFilePath
		if qFilePath != "" {

			if err := r.SetQueryParam("filePath", qFilePath); err != nil {
				return err
			}
		}
	}

	if o.IsNfsFile != nil {

		// query param isNfsFile
		var qrIsNfsFile bool

		if o.IsNfsFile != nil {
			qrIsNfsFile = *o.IsNfsFile
		}
		qIsNfsFile := swag.FormatBool(qrIsNfsFile)
		if qIsNfsFile != "" {

			if err := r.SetQueryParam("isNfsFile", qIsNfsFile); err != nil {
				return err
			}
		}
	}

	if o.LengthBytes != nil {

		// query param lengthBytes
		var qrLengthBytes int64

		if o.LengthBytes != nil {
			qrLengthBytes = *o.LengthBytes
		}
		qLengthBytes := swag.FormatInt64(qrLengthBytes)
		if qLengthBytes != "" {

			if err := r.SetQueryParam("lengthBytes", qLengthBytes); err != nil {
				return err
			}
		}
	}

	if o.PartitionID != nil {

		// query param partitionId
		var qrPartitionID int64

		if o.PartitionID != nil {
			qrPartitionID = *o.PartitionID
		}
		qPartitionID := swag.FormatInt64(qrPartitionID)
		if qPartitionID != "" {

			if err := r.SetQueryParam("partitionId", qPartitionID); err != nil {
				return err
			}
		}
	}

	if o.StartOffset != nil {

		// query param startOffset
		var qrStartOffset int64

		if o.StartOffset != nil {
			qrStartOffset = *o.StartOffset
		}
		qStartOffset := swag.FormatInt64(qrStartOffset)
		if qStartOffset != "" {

			if err := r.SetQueryParam("startOffset", qStartOffset); err != nil {
				return err
			}
		}
	}

	if o.ViewBoxID != nil {

		// query param viewBoxId
		var qrViewBoxID int64

		if o.ViewBoxID != nil {
			qrViewBoxID = *o.ViewBoxID
		}
		qViewBoxID := swag.FormatInt64(qrViewBoxID)
		if qViewBoxID != "" {

			if err := r.SetQueryParam("viewBoxId", qViewBoxID); err != nil {
				return err
			}
		}
	}

	if o.ViewName != nil {

		// query param viewName
		var qrViewName string

		if o.ViewName != nil {
			qrViewName = *o.ViewName
		}
		qViewName := qrViewName
		if qViewName != "" {

			if err := r.SetQueryParam("viewName", qViewName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
