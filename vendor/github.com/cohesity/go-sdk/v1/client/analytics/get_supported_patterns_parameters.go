// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSupportedPatternsParams creates a new GetSupportedPatternsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSupportedPatternsParams() *GetSupportedPatternsParams {
	return &GetSupportedPatternsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSupportedPatternsParamsWithTimeout creates a new GetSupportedPatternsParams object
// with the ability to set a timeout on a request.
func NewGetSupportedPatternsParamsWithTimeout(timeout time.Duration) *GetSupportedPatternsParams {
	return &GetSupportedPatternsParams{
		timeout: timeout,
	}
}

// NewGetSupportedPatternsParamsWithContext creates a new GetSupportedPatternsParams object
// with the ability to set a context for a request.
func NewGetSupportedPatternsParamsWithContext(ctx context.Context) *GetSupportedPatternsParams {
	return &GetSupportedPatternsParams{
		Context: ctx,
	}
}

// NewGetSupportedPatternsParamsWithHTTPClient creates a new GetSupportedPatternsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSupportedPatternsParamsWithHTTPClient(client *http.Client) *GetSupportedPatternsParams {
	return &GetSupportedPatternsParams{
		HTTPClient: client,
	}
}

/*
GetSupportedPatternsParams contains all the parameters to send to the API endpoint

	for the get supported patterns operation.

	Typically these are written to a http.Request.
*/
type GetSupportedPatternsParams struct {

	/* ApplicationDataType.

	   Specifies the data type for which supported patterns can be fetched.

	   Format: int32
	*/
	ApplicationDataType *int32

	/* ApplicationID.

	   Specifies the application Id.

	   Format: int64
	*/
	ApplicationID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get supported patterns params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSupportedPatternsParams) WithDefaults() *GetSupportedPatternsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get supported patterns params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSupportedPatternsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get supported patterns params
func (o *GetSupportedPatternsParams) WithTimeout(timeout time.Duration) *GetSupportedPatternsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get supported patterns params
func (o *GetSupportedPatternsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get supported patterns params
func (o *GetSupportedPatternsParams) WithContext(ctx context.Context) *GetSupportedPatternsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get supported patterns params
func (o *GetSupportedPatternsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get supported patterns params
func (o *GetSupportedPatternsParams) WithHTTPClient(client *http.Client) *GetSupportedPatternsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get supported patterns params
func (o *GetSupportedPatternsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationDataType adds the applicationDataType to the get supported patterns params
func (o *GetSupportedPatternsParams) WithApplicationDataType(applicationDataType *int32) *GetSupportedPatternsParams {
	o.SetApplicationDataType(applicationDataType)
	return o
}

// SetApplicationDataType adds the applicationDataType to the get supported patterns params
func (o *GetSupportedPatternsParams) SetApplicationDataType(applicationDataType *int32) {
	o.ApplicationDataType = applicationDataType
}

// WithApplicationID adds the applicationID to the get supported patterns params
func (o *GetSupportedPatternsParams) WithApplicationID(applicationID int64) *GetSupportedPatternsParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the get supported patterns params
func (o *GetSupportedPatternsParams) SetApplicationID(applicationID int64) {
	o.ApplicationID = applicationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSupportedPatternsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplicationDataType != nil {

		// query param applicationDataType
		var qrApplicationDataType int32

		if o.ApplicationDataType != nil {
			qrApplicationDataType = *o.ApplicationDataType
		}
		qApplicationDataType := swag.FormatInt32(qrApplicationDataType)
		if qApplicationDataType != "" {

			if err := r.SetQueryParam("applicationDataType", qApplicationDataType); err != nil {
				return err
			}
		}
	}

	// query param applicationId
	qrApplicationID := o.ApplicationID
	qApplicationID := swag.FormatInt64(qrApplicationID)
	if qApplicationID != "" {

		if err := r.SetQueryParam("applicationId", qApplicationID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
