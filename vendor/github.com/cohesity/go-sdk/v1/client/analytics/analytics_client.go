// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new analytics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new analytics API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new analytics API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for analytics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AnalyzeJar(params *AnalyzeJarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnalyzeJarOK, error)

	CancelMapReduceInstanceRun(params *CancelMapReduceInstanceRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelMapReduceInstanceRunOK, error)

	CreateApplication(params *CreateApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateApplicationCreated, error)

	CreateMapper(params *CreateMapperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMapperCreated, error)

	CreateReducer(params *CreateReducerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReducerCreated, error)

	DeleteApplication(params *DeleteApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteApplicationNoContent, error)

	DeleteMapReduceInstanceRun(params *DeleteMapReduceInstanceRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMapReduceInstanceRunNoContent, error)

	DeleteMapper(params *DeleteMapperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMapperNoContent, error)

	DeleteReducer(params *DeleteReducerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReducerNoContent, error)

	DeleteUploadedJar(params *DeleteUploadedJarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUploadedJarNoContent, error)

	DownloadMRBaseJar(params *DownloadMRBaseJarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadMRBaseJarOK, error)

	DownloadMROutputFiles(params *DownloadMROutputFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadMROutputFilesOK, error)

	GetApplicationByID(params *GetApplicationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationByIDOK, error)

	GetApplications(params *GetApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationsOK, error)

	GetMRUploadJarPath(params *GetMRUploadJarPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMRUploadJarPathOK, error)

	GetMapReduceAppRuns(params *GetMapReduceAppRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMapReduceAppRunsOK, error)

	GetMapReduceFileFormats(params *GetMapReduceFileFormatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMapReduceFileFormatsOK, error)

	GetMapperByID(params *GetMapperByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMapperByIDOK, error)

	GetMappers(params *GetMappersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMappersOK, error)

	GetReducerByID(params *GetReducerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReducerByIDOK, error)

	GetReducers(params *GetReducersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReducersOK, error)

	GetSupportedPatterns(params *GetSupportedPatternsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSupportedPatternsOK, error)

	RunMapReduceAppInstance(params *RunMapReduceAppInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunMapReduceAppInstanceOK, error)

	SavePattern(params *SavePatternParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SavePatternCreated, error)

	UpdateApplication(params *UpdateApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateApplicationOK, error)

	UpdateMapper(params *UpdateMapperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMapperOK, error)

	UpdateReducer(params *UpdateReducerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReducerOK, error)

	UploadJar(params *UploadJarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadJarOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AnalyzeJar analyzes the uploaded jar

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns the result of the jar analysis.
*/
func (a *Client) AnalyzeJar(params *AnalyzeJarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnalyzeJarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyzeJarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AnalyzeJar",
		Method:             "POST",
		PathPattern:        "/public/analytics/analyzeJar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnalyzeJarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyzeJarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AnalyzeJarDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CancelMapReduceInstanceRun cancels a specific map reduce instance run

**Privileges:** ```ANALYTICS_VIEW``` <br><br>Returns the result.
*/
func (a *Client) CancelMapReduceInstanceRun(params *CancelMapReduceInstanceRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelMapReduceInstanceRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelMapReduceInstanceRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelMapReduceInstanceRun",
		Method:             "PUT",
		PathPattern:        "/public/analytics/cancelAppInstanceRun/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelMapReduceInstanceRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelMapReduceInstanceRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelMapReduceInstanceRunDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateApplication creates an application

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns the created application.
*/
func (a *Client) CreateApplication(params *CreateApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateApplicationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateApplication",
		Method:             "POST",
		PathPattern:        "/public/analytics/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateApplicationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateApplicationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateMapper creates a mapper

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns the created mapper.
*/
func (a *Client) CreateMapper(params *CreateMapperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMapperCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMapperParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMapper",
		Method:             "POST",
		PathPattern:        "/public/analytics/mappers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMapperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMapperCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMapperDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateReducer creates a reducer

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns the created reducer.
*/
func (a *Client) CreateReducer(params *CreateReducerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReducerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReducerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateReducer",
		Method:             "POST",
		PathPattern:        "/public/analytics/reducers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateReducerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReducerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateReducerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteApplication deletes an application

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteApplication(params *DeleteApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteApplicationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteApplication",
		Method:             "DELETE",
		PathPattern:        "/public/analytics/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApplicationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteApplicationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMapReduceInstanceRun deletes a map reduce application instance run

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteMapReduceInstanceRun(params *DeleteMapReduceInstanceRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMapReduceInstanceRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMapReduceInstanceRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMapReduceInstanceRun",
		Method:             "DELETE",
		PathPattern:        "/public/analytics/mrAppRun/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMapReduceInstanceRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMapReduceInstanceRunNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMapReduceInstanceRunDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMapper deletes a mapper

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteMapper(params *DeleteMapperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMapperNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMapperParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMapper",
		Method:             "DELETE",
		PathPattern:        "/public/analytics/mappers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMapperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMapperNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMapperDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteReducer deletes a reducer

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteReducer(params *DeleteReducerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReducerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReducerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteReducer",
		Method:             "DELETE",
		PathPattern:        "/public/analytics/reducers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReducerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReducerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteReducerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteUploadedJar deletes the uploaded jar from temporary location

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteUploadedJar(params *DeleteUploadedJarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUploadedJarNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUploadedJarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUploadedJar",
		Method:             "DELETE",
		PathPattern:        "/public/analytics/uploadJar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUploadedJarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUploadedJarNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUploadedJarDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DownloadMRBaseJar downloads the map reduce base jar

**Privileges:** ```ANALYTICS_VIEW``` <br><br>Returns a struct containing the map reduce base jar from the cluster.
*/
func (a *Client) DownloadMRBaseJar(params *DownloadMRBaseJarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadMRBaseJarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadMRBaseJarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadMRBaseJar",
		Method:             "GET",
		PathPattern:        "/public/analytics/mrBaseJar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadMRBaseJarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadMRBaseJarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DownloadMRBaseJarDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DownloadMROutputFiles downloads map reduce base instance run output files from yoda

**Privileges:** ```ANALYTICS_VIEW``` <br><br>Returns a struct containing the map reduce instance run output files from Yoda.
*/
func (a *Client) DownloadMROutputFiles(params *DownloadMROutputFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadMROutputFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadMROutputFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadMROutputFiles",
		Method:             "GET",
		PathPattern:        "/public/analytics/mrOutputfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadMROutputFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadMROutputFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DownloadMROutputFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetApplicationByID lists details about a single application

**Privileges:** ```ANALYTICS_VIEW``` <br><br>Returns the Application corresponding to the specified Application Id.
*/
func (a *Client) GetApplicationByID(params *GetApplicationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetApplicationById",
		Method:             "GET",
		PathPattern:        "/public/analytics/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplicationByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetApplications lists applications filtered by the specified parameters

	**Privileges:** ```ANALYTICS_VIEW``` <br><br>If no parameters are specified, all Applications currently on

the Cohesity Cluster are returned.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetApplications(params *GetApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetApplications",
		Method:             "GET",
		PathPattern:        "/public/analytics/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplicationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMRUploadJarPath gets details about the mounted path to upload jars

**Privileges:** ```ANALYTICS_VIEW``` <br><br>Returns the mounted path to upload Jars.
*/
func (a *Client) GetMRUploadJarPath(params *GetMRUploadJarPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMRUploadJarPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMRUploadJarPathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMRUploadJarPath",
		Method:             "GET",
		PathPattern:        "/public/analytics/uploadJarPath",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMRUploadJarPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMRUploadJarPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMRUploadJarPathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetMapReduceAppRuns lists map reduce application runs filtered by the specified parameters

	**Privileges:** ```ANALYTICS_VIEW``` <br><br>If no parameters are specified, all map reduce application instance runs

currently on the Cohesity Cluster are returned.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetMapReduceAppRuns(params *GetMapReduceAppRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMapReduceAppRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMapReduceAppRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMapReduceAppRuns",
		Method:             "GET",
		PathPattern:        "/public/analytics/mrAppRuns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMapReduceAppRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMapReduceAppRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMapReduceAppRunsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetMapReduceFileFormats useds to retrieve supported output file formats from a map reduce instance

	**Privileges:** ```ANALYTICS_VIEW``` <br><br>The Analytics workbench generates output files from map reduce instances run for

a particular application. This API returns the output file formats available to
the user for download.
*/
func (a *Client) GetMapReduceFileFormats(params *GetMapReduceFileFormatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMapReduceFileFormatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMapReduceFileFormatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMapReduceFileFormats",
		Method:             "GET",
		PathPattern:        "/public/analytics/mrFileFormats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMapReduceFileFormatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMapReduceFileFormatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMapReduceFileFormatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMapperByID lists details about a single mapper

**Privileges:** ```ANALYTICS_VIEW``` <br><br>Returns the Mapper corresponding to the specified Mapper Id.
*/
func (a *Client) GetMapperByID(params *GetMapperByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMapperByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMapperByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMapperById",
		Method:             "GET",
		PathPattern:        "/public/analytics/mappers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMapperByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMapperByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMapperByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetMappers lists mappers filtered by the specified parameters

	**Privileges:** ```ANALYTICS_VIEW``` <br><br>If no parameters are specified, all Mappers currently on

the Cohesity Cluster are returned.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetMappers(params *GetMappersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMappersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMappersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMappers",
		Method:             "GET",
		PathPattern:        "/public/analytics/mappers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMappersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMappersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMappersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetReducerByID lists details about a single reducer

**Privileges:** ```ANALYTICS_VIEW``` <br><br>Returns the Reducer corresponding to the specified Reducer Id.
*/
func (a *Client) GetReducerByID(params *GetReducerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReducerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReducerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReducerById",
		Method:             "GET",
		PathPattern:        "/public/analytics/reducers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReducerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReducerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetReducerByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetReducers lists reducers filtered by the specified parameters

	**Privileges:** ```ANALYTICS_VIEW``` <br><br>If no parameters are specified, all Reducers currently on

the Cohesity Cluster are returned.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetReducers(params *GetReducersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReducersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReducersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReducers",
		Method:             "GET",
		PathPattern:        "/public/analytics/reducers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReducersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReducersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetReducersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetSupportedPatterns useds to retrieve supported patterns available for search in an application

	**Privileges:** ```ANALYTICS_VIEW``` <br><br>The Analytics workbench has ability to search for patterns which can be system

defined or can be user defined. This API returns the patterns available for
search.
*/
func (a *Client) GetSupportedPatterns(params *GetSupportedPatternsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSupportedPatternsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportedPatternsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSupportedPatterns",
		Method:             "GET",
		PathPattern:        "/public/analytics/supportedPatterns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSupportedPatternsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupportedPatternsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSupportedPatternsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RunMapReduceAppInstance runs a map reduce application instance

**Privileges:** ```ANALYTICS_VIEW``` <br><br>Returns the updated Application.
*/
func (a *Client) RunMapReduceAppInstance(params *RunMapReduceAppInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunMapReduceAppInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunMapReduceAppInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RunMapReduceAppInstance",
		Method:             "PUT",
		PathPattern:        "/public/analytics/runAppInstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RunMapReduceAppInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunMapReduceAppInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunMapReduceAppInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	SavePattern useds to save user patterns for search in an application

	**Privileges:** ```ANALYTICS_MODIFY``` <br><br>The Analytics workbench has ability to search for patterns which can be system

defined or can be user defined. This API enables the user to save patterns for
searching.
*/
func (a *Client) SavePattern(params *SavePatternParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SavePatternCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSavePatternParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SavePattern",
		Method:             "PUT",
		PathPattern:        "/public/analytics/supportedPatterns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SavePatternReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SavePatternCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SavePatternDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateApplication updates an application

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns the updated Application.
*/
func (a *Client) UpdateApplication(params *UpdateApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateApplication",
		Method:             "PUT",
		PathPattern:        "/public/analytics/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateApplicationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateMapper updates a mapper

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns the updated Mapper.
*/
func (a *Client) UpdateMapper(params *UpdateMapperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMapperOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMapperParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMapper",
		Method:             "PUT",
		PathPattern:        "/public/analytics/mappers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMapperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMapperOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMapperDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateReducer updates a reducer

**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns the updated reducer.
*/
func (a *Client) UpdateReducer(params *UpdateReducerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReducerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReducerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateReducer",
		Method:             "PUT",
		PathPattern:        "/public/analytics/reducers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateReducerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReducerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateReducerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UploadJar uploads a jar to pre specified yoda internal view

	**Privileges:** ```ANALYTICS_MODIFY``` <br><br>Returns a struct containing the jar name and local mount path where the jar

will be uploaded.
*/
func (a *Client) UploadJar(params *UploadJarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadJarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadJarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UploadJar",
		Method:             "POST",
		PathPattern:        "/public/analytics/uploadJar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadJarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadJarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UploadJarDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
