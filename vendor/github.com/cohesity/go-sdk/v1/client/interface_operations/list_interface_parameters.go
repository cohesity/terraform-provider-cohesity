// Code generated by go-swagger; DO NOT EDIT.

package interface_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListInterfaceParams creates a new ListInterfaceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListInterfaceParams() *ListInterfaceParams {
	return &ListInterfaceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListInterfaceParamsWithTimeout creates a new ListInterfaceParams object
// with the ability to set a timeout on a request.
func NewListInterfaceParamsWithTimeout(timeout time.Duration) *ListInterfaceParams {
	return &ListInterfaceParams{
		timeout: timeout,
	}
}

// NewListInterfaceParamsWithContext creates a new ListInterfaceParams object
// with the ability to set a context for a request.
func NewListInterfaceParamsWithContext(ctx context.Context) *ListInterfaceParams {
	return &ListInterfaceParams{
		Context: ctx,
	}
}

// NewListInterfaceParamsWithHTTPClient creates a new ListInterfaceParams object
// with the ability to set a custom HTTPClient for a request.
func NewListInterfaceParamsWithHTTPClient(client *http.Client) *ListInterfaceParams {
	return &ListInterfaceParams{
		HTTPClient: client,
	}
}

/*
ListInterfaceParams contains all the parameters to send to the API endpoint

	for the list interface operation.

	Typically these are written to a http.Request.
*/
type ListInterfaceParams struct {

	/* BondInterfaceOnly.

	   Specifies if only show bond interface info.
	*/
	BondInterfaceOnly *bool

	/* Cache.

	   Specifies if interface is cached info.
	*/
	Cache *bool

	/* IfaceGroupAssignedOnly.

	   Specifies if only show interface group assigned interface info.
	*/
	IfaceGroupAssignedOnly *bool

	/* IncludeBondSlaveDetails.

	   Specifies if include bond secondary detailed info.
	*/
	IncludeBondSlaveDetails *bool

	/* IncludeStats.

	   Specifies if include stats.
	*/
	IncludeStats *bool

	/* IncludeUplinkSwitchInfo.

	   Specifies if include uplink switch info.
	*/
	IncludeUplinkSwitchInfo *bool

	/* NodeID.

	   Specifies the id of the ndde.

	   Format: int64
	*/
	NodeID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list interface params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListInterfaceParams) WithDefaults() *ListInterfaceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list interface params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListInterfaceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list interface params
func (o *ListInterfaceParams) WithTimeout(timeout time.Duration) *ListInterfaceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list interface params
func (o *ListInterfaceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list interface params
func (o *ListInterfaceParams) WithContext(ctx context.Context) *ListInterfaceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list interface params
func (o *ListInterfaceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list interface params
func (o *ListInterfaceParams) WithHTTPClient(client *http.Client) *ListInterfaceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list interface params
func (o *ListInterfaceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBondInterfaceOnly adds the bondInterfaceOnly to the list interface params
func (o *ListInterfaceParams) WithBondInterfaceOnly(bondInterfaceOnly *bool) *ListInterfaceParams {
	o.SetBondInterfaceOnly(bondInterfaceOnly)
	return o
}

// SetBondInterfaceOnly adds the bondInterfaceOnly to the list interface params
func (o *ListInterfaceParams) SetBondInterfaceOnly(bondInterfaceOnly *bool) {
	o.BondInterfaceOnly = bondInterfaceOnly
}

// WithCache adds the cache to the list interface params
func (o *ListInterfaceParams) WithCache(cache *bool) *ListInterfaceParams {
	o.SetCache(cache)
	return o
}

// SetCache adds the cache to the list interface params
func (o *ListInterfaceParams) SetCache(cache *bool) {
	o.Cache = cache
}

// WithIfaceGroupAssignedOnly adds the ifaceGroupAssignedOnly to the list interface params
func (o *ListInterfaceParams) WithIfaceGroupAssignedOnly(ifaceGroupAssignedOnly *bool) *ListInterfaceParams {
	o.SetIfaceGroupAssignedOnly(ifaceGroupAssignedOnly)
	return o
}

// SetIfaceGroupAssignedOnly adds the ifaceGroupAssignedOnly to the list interface params
func (o *ListInterfaceParams) SetIfaceGroupAssignedOnly(ifaceGroupAssignedOnly *bool) {
	o.IfaceGroupAssignedOnly = ifaceGroupAssignedOnly
}

// WithIncludeBondSlaveDetails adds the includeBondSlaveDetails to the list interface params
func (o *ListInterfaceParams) WithIncludeBondSlaveDetails(includeBondSlaveDetails *bool) *ListInterfaceParams {
	o.SetIncludeBondSlaveDetails(includeBondSlaveDetails)
	return o
}

// SetIncludeBondSlaveDetails adds the includeBondSlaveDetails to the list interface params
func (o *ListInterfaceParams) SetIncludeBondSlaveDetails(includeBondSlaveDetails *bool) {
	o.IncludeBondSlaveDetails = includeBondSlaveDetails
}

// WithIncludeStats adds the includeStats to the list interface params
func (o *ListInterfaceParams) WithIncludeStats(includeStats *bool) *ListInterfaceParams {
	o.SetIncludeStats(includeStats)
	return o
}

// SetIncludeStats adds the includeStats to the list interface params
func (o *ListInterfaceParams) SetIncludeStats(includeStats *bool) {
	o.IncludeStats = includeStats
}

// WithIncludeUplinkSwitchInfo adds the includeUplinkSwitchInfo to the list interface params
func (o *ListInterfaceParams) WithIncludeUplinkSwitchInfo(includeUplinkSwitchInfo *bool) *ListInterfaceParams {
	o.SetIncludeUplinkSwitchInfo(includeUplinkSwitchInfo)
	return o
}

// SetIncludeUplinkSwitchInfo adds the includeUplinkSwitchInfo to the list interface params
func (o *ListInterfaceParams) SetIncludeUplinkSwitchInfo(includeUplinkSwitchInfo *bool) {
	o.IncludeUplinkSwitchInfo = includeUplinkSwitchInfo
}

// WithNodeID adds the nodeID to the list interface params
func (o *ListInterfaceParams) WithNodeID(nodeID *int64) *ListInterfaceParams {
	o.SetNodeID(nodeID)
	return o
}

// SetNodeID adds the nodeId to the list interface params
func (o *ListInterfaceParams) SetNodeID(nodeID *int64) {
	o.NodeID = nodeID
}

// WriteToRequest writes these params to a swagger request
func (o *ListInterfaceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BondInterfaceOnly != nil {

		// query param bondInterfaceOnly
		var qrBondInterfaceOnly bool

		if o.BondInterfaceOnly != nil {
			qrBondInterfaceOnly = *o.BondInterfaceOnly
		}
		qBondInterfaceOnly := swag.FormatBool(qrBondInterfaceOnly)
		if qBondInterfaceOnly != "" {

			if err := r.SetQueryParam("bondInterfaceOnly", qBondInterfaceOnly); err != nil {
				return err
			}
		}
	}

	if o.Cache != nil {

		// query param cache
		var qrCache bool

		if o.Cache != nil {
			qrCache = *o.Cache
		}
		qCache := swag.FormatBool(qrCache)
		if qCache != "" {

			if err := r.SetQueryParam("cache", qCache); err != nil {
				return err
			}
		}
	}

	if o.IfaceGroupAssignedOnly != nil {

		// query param ifaceGroupAssignedOnly
		var qrIfaceGroupAssignedOnly bool

		if o.IfaceGroupAssignedOnly != nil {
			qrIfaceGroupAssignedOnly = *o.IfaceGroupAssignedOnly
		}
		qIfaceGroupAssignedOnly := swag.FormatBool(qrIfaceGroupAssignedOnly)
		if qIfaceGroupAssignedOnly != "" {

			if err := r.SetQueryParam("ifaceGroupAssignedOnly", qIfaceGroupAssignedOnly); err != nil {
				return err
			}
		}
	}

	if o.IncludeBondSlaveDetails != nil {

		// query param includeBondSlaveDetails
		var qrIncludeBondSlaveDetails bool

		if o.IncludeBondSlaveDetails != nil {
			qrIncludeBondSlaveDetails = *o.IncludeBondSlaveDetails
		}
		qIncludeBondSlaveDetails := swag.FormatBool(qrIncludeBondSlaveDetails)
		if qIncludeBondSlaveDetails != "" {

			if err := r.SetQueryParam("includeBondSlaveDetails", qIncludeBondSlaveDetails); err != nil {
				return err
			}
		}
	}

	if o.IncludeStats != nil {

		// query param includeStats
		var qrIncludeStats bool

		if o.IncludeStats != nil {
			qrIncludeStats = *o.IncludeStats
		}
		qIncludeStats := swag.FormatBool(qrIncludeStats)
		if qIncludeStats != "" {

			if err := r.SetQueryParam("includeStats", qIncludeStats); err != nil {
				return err
			}
		}
	}

	if o.IncludeUplinkSwitchInfo != nil {

		// query param includeUplinkSwitchInfo
		var qrIncludeUplinkSwitchInfo bool

		if o.IncludeUplinkSwitchInfo != nil {
			qrIncludeUplinkSwitchInfo = *o.IncludeUplinkSwitchInfo
		}
		qIncludeUplinkSwitchInfo := swag.FormatBool(qrIncludeUplinkSwitchInfo)
		if qIncludeUplinkSwitchInfo != "" {

			if err := r.SetQueryParam("includeUplinkSwitchInfo", qIncludeUplinkSwitchInfo); err != nil {
				return err
			}
		}
	}

	if o.NodeID != nil {

		// query param nodeId
		var qrNodeID int64

		if o.NodeID != nil {
			qrNodeID = *o.NodeID
		}
		qNodeID := swag.FormatInt64(qrNodeID)
		if qNodeID != "" {

			if err := r.SetQueryParam("nodeId", qNodeID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
