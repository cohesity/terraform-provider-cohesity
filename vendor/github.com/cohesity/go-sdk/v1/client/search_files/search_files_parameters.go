// Code generated by go-swagger; DO NOT EDIT.

package search_files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchFilesParams creates a new SearchFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchFilesParams() *SearchFilesParams {
	return &SearchFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchFilesParamsWithTimeout creates a new SearchFilesParams object
// with the ability to set a timeout on a request.
func NewSearchFilesParamsWithTimeout(timeout time.Duration) *SearchFilesParams {
	return &SearchFilesParams{
		timeout: timeout,
	}
}

// NewSearchFilesParamsWithContext creates a new SearchFilesParams object
// with the ability to set a context for a request.
func NewSearchFilesParamsWithContext(ctx context.Context) *SearchFilesParams {
	return &SearchFilesParams{
		Context: ctx,
	}
}

// NewSearchFilesParamsWithHTTPClient creates a new SearchFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchFilesParamsWithHTTPClient(client *http.Client) *SearchFilesParams {
	return &SearchFilesParams{
		HTTPClient: client,
	}
}

/*
SearchFilesParams contains all the parameters to send to the API endpoint

	for the search files operation.

	Typically these are written to a http.Request.
*/
type SearchFilesParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if logs of all the tenants under the hierarchy
	of tenant with id TenantId should be returned.
	*/
	AllUnderHierarchy *bool

	/* BccRecipientAddresses.

	   Specifies the email addresses of the bcc recipients.
	*/
	BccRecipientAddresses []string

	/* CcRecipientAddresses.

	   Specifies the email addresses of the cc recipients.
	*/
	CcRecipientAddresses []string

	/* DocumentName.

	   Specifies the document(file/folder) name.
	*/
	DocumentName *string

	/* Domain.

	   domain of the AD object.
	*/
	Domain *string

	/* DomainIds.

	   Specifies the domain Ids in which Users' OneDrives are registered.
	*/
	DomainIds []int64

	/* Email.

	   Specifies the email of the AD object of type user or group.
	*/
	Email *string

	/* EmailSubject.

	   Specifies the subject of the email.
	*/
	EmailSubject *string

	/* EntityIds.

	   EntityIds are the ids of the objects (e.g. VMs), the file backup came from.
	*/
	EntityIds []int64

	/* EntityTypes.

	     EntityTypes are the types of the entity being requested e.g. kView,
	kVMware, kPhysical.
	*/
	EntityTypes []string

	/* Filename.

	     Filename is the name of the file to search for. The term can match any
	token in the real filename (i.e. "desktop" or "ini" would both match
	"desktop.ini").
	*/
	Filename *string

	/* FolderName.

	   Specifies the parent folder name of the email.
	*/
	FolderName *string

	/* From.

	   From is the start index used for ElasticSearch results pagination.

	   Format: int64
	*/
	From *int64

	/* HasAttachments.

	   Specifies whether the emails have any attachments.
	*/
	HasAttachments *bool

	/* IsFolder.

	     IsFolder specifies whether to restrict the search to folders, files or
	or both. If IsFolder is true, the search will be restricted to folders.
	If it is false, only files will be searched. If it is not specified, both
	files and folders will be searched.
	*/
	IsFolder *bool

	/* JobIds.

	   JobIds are the ids of the jobs the file backup came from.
	*/
	JobIds []int64

	/* MailboxIds.

	   Specifies the Office365 User Ids which is teh owner of the OneDrive.
	*/
	MailboxIds []int64

	/* MightHaveSnapshotTags.

	     Specifies list of snapshot tags, one of which might be present in the
	document. These are OR'ed together and the resulting criteria AND'ed
	with the rest of the query.
	*/
	MightHaveSnapshotTags []string

	/* MightHaveTags.

	     Specifies list of tags, one of which might be present in the document.
	These are OR'ed together and the resulting criteria AND'ed with the
	rest of the query.
	*/
	MightHaveTags []string

	/* MustHaveSnapshotTags.

	   Specifies snapshot tags which must be all present in the document.
	*/
	MustHaveSnapshotTags []string

	/* MustHaveTags.

	   Specifies tags which must be all present in the document.
	*/
	MustHaveTags []string

	/* Name.

	   Specifies the name of the AD object.
	*/
	Name *string

	/* ObjectType.

	     Specifies the type of the AD Object. The type may be user, computer,
	group or ou(organizational unit).
	*/
	ObjectType *string

	/* Office365SearchType.

	   Specifies the search type for Office365 applications.

	   Format: int32
	*/
	Office365SearchType *int32

	/* PageSize.

	     Specifies pagesize for pagination. Only valid for librarian queries.
	Effective only when Paginate is set to true.

	     Format: int32
	*/
	PageSize *int32

	/* Paginate.

	     Specifies bool to control pagination of search results. Only valid
	for librarian queries. If this is set to true and a pagination cookie
	is provided, search will be resumed.
	*/
	Paginate *bool

	/* PaginationCookie.

	     Specifies cookie for resuming search if pagination is being used. Only
	valid for librarian queries. Effective only when Paginate is set to true.
	*/
	PaginationCookie *string

	/* ProtectionJobIds.

	     Specifies the protection job Ids which have backed up mailbox(es)
	continaing emails/folders.
	*/
	ProtectionJobIds []int64

	/* ReceivedEndTime.

	   Specifies the unix end time for querying on email's received time.

	   Format: int64
	*/
	ReceivedEndTime *int64

	/* ReceivedStartTime.

	   Specifies the unix start time for querying on email's received time.

	   Format: int64
	*/
	ReceivedStartTime *int64

	/* ReceivedTimeSeconds.

	   Specifies the unix time when the email was received.

	   Format: int64
	*/
	ReceivedTimeSeconds *int64

	/* RecipientAddresses.

	   Specifies the email addresses of the recipients.
	*/
	RecipientAddresses []string

	/* RegisteredSourceIds.

	     RegisteredSourceIds are the Ids of the top-level registered entities the VM
	belongs to.
	*/
	RegisteredSourceIds []int64

	/* SamAccountName.

	   Specifies the sam account name of the AD object.
	*/
	SamAccountName *string

	/* SenderAddress.

	   Specifies the email address of the sender.
	*/
	SenderAddress *string

	/* SentTimeSeconds.

	   Specifies the unix time when the email was sent.

	   Format: int64
	*/
	SentTimeSeconds *int64

	/* ShowOnlyEmailFolders.

	   Specifies whether the query result should include only Email folders.
	*/
	ShowOnlyEmailFolders *bool

	/* Size.

	   Size is the number of results to return in each pagination query.

	   Format: int64
	*/
	Size *int64

	/* TenantID.

	   TenantId specifies the tenant whose action resulted in the audit log.
	*/
	TenantID *string

	/* ViewBoxIds.

	   ViewBoxIds are the ids of the view boxes where the file was saved.
	*/
	ViewBoxIds []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchFilesParams) WithDefaults() *SearchFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search files params
func (o *SearchFilesParams) WithTimeout(timeout time.Duration) *SearchFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search files params
func (o *SearchFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search files params
func (o *SearchFilesParams) WithContext(ctx context.Context) *SearchFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search files params
func (o *SearchFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search files params
func (o *SearchFilesParams) WithHTTPClient(client *http.Client) *SearchFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search files params
func (o *SearchFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the search files params
func (o *SearchFilesParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *SearchFilesParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the search files params
func (o *SearchFilesParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithBccRecipientAddresses adds the bccRecipientAddresses to the search files params
func (o *SearchFilesParams) WithBccRecipientAddresses(bccRecipientAddresses []string) *SearchFilesParams {
	o.SetBccRecipientAddresses(bccRecipientAddresses)
	return o
}

// SetBccRecipientAddresses adds the bccRecipientAddresses to the search files params
func (o *SearchFilesParams) SetBccRecipientAddresses(bccRecipientAddresses []string) {
	o.BccRecipientAddresses = bccRecipientAddresses
}

// WithCcRecipientAddresses adds the ccRecipientAddresses to the search files params
func (o *SearchFilesParams) WithCcRecipientAddresses(ccRecipientAddresses []string) *SearchFilesParams {
	o.SetCcRecipientAddresses(ccRecipientAddresses)
	return o
}

// SetCcRecipientAddresses adds the ccRecipientAddresses to the search files params
func (o *SearchFilesParams) SetCcRecipientAddresses(ccRecipientAddresses []string) {
	o.CcRecipientAddresses = ccRecipientAddresses
}

// WithDocumentName adds the documentName to the search files params
func (o *SearchFilesParams) WithDocumentName(documentName *string) *SearchFilesParams {
	o.SetDocumentName(documentName)
	return o
}

// SetDocumentName adds the documentName to the search files params
func (o *SearchFilesParams) SetDocumentName(documentName *string) {
	o.DocumentName = documentName
}

// WithDomain adds the domain to the search files params
func (o *SearchFilesParams) WithDomain(domain *string) *SearchFilesParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the search files params
func (o *SearchFilesParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithDomainIds adds the domainIds to the search files params
func (o *SearchFilesParams) WithDomainIds(domainIds []int64) *SearchFilesParams {
	o.SetDomainIds(domainIds)
	return o
}

// SetDomainIds adds the domainIds to the search files params
func (o *SearchFilesParams) SetDomainIds(domainIds []int64) {
	o.DomainIds = domainIds
}

// WithEmail adds the email to the search files params
func (o *SearchFilesParams) WithEmail(email *string) *SearchFilesParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the search files params
func (o *SearchFilesParams) SetEmail(email *string) {
	o.Email = email
}

// WithEmailSubject adds the emailSubject to the search files params
func (o *SearchFilesParams) WithEmailSubject(emailSubject *string) *SearchFilesParams {
	o.SetEmailSubject(emailSubject)
	return o
}

// SetEmailSubject adds the emailSubject to the search files params
func (o *SearchFilesParams) SetEmailSubject(emailSubject *string) {
	o.EmailSubject = emailSubject
}

// WithEntityIds adds the entityIds to the search files params
func (o *SearchFilesParams) WithEntityIds(entityIds []int64) *SearchFilesParams {
	o.SetEntityIds(entityIds)
	return o
}

// SetEntityIds adds the entityIds to the search files params
func (o *SearchFilesParams) SetEntityIds(entityIds []int64) {
	o.EntityIds = entityIds
}

// WithEntityTypes adds the entityTypes to the search files params
func (o *SearchFilesParams) WithEntityTypes(entityTypes []string) *SearchFilesParams {
	o.SetEntityTypes(entityTypes)
	return o
}

// SetEntityTypes adds the entityTypes to the search files params
func (o *SearchFilesParams) SetEntityTypes(entityTypes []string) {
	o.EntityTypes = entityTypes
}

// WithFilename adds the filename to the search files params
func (o *SearchFilesParams) WithFilename(filename *string) *SearchFilesParams {
	o.SetFilename(filename)
	return o
}

// SetFilename adds the filename to the search files params
func (o *SearchFilesParams) SetFilename(filename *string) {
	o.Filename = filename
}

// WithFolderName adds the folderName to the search files params
func (o *SearchFilesParams) WithFolderName(folderName *string) *SearchFilesParams {
	o.SetFolderName(folderName)
	return o
}

// SetFolderName adds the folderName to the search files params
func (o *SearchFilesParams) SetFolderName(folderName *string) {
	o.FolderName = folderName
}

// WithFrom adds the from to the search files params
func (o *SearchFilesParams) WithFrom(from *int64) *SearchFilesParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the search files params
func (o *SearchFilesParams) SetFrom(from *int64) {
	o.From = from
}

// WithHasAttachments adds the hasAttachments to the search files params
func (o *SearchFilesParams) WithHasAttachments(hasAttachments *bool) *SearchFilesParams {
	o.SetHasAttachments(hasAttachments)
	return o
}

// SetHasAttachments adds the hasAttachments to the search files params
func (o *SearchFilesParams) SetHasAttachments(hasAttachments *bool) {
	o.HasAttachments = hasAttachments
}

// WithIsFolder adds the isFolder to the search files params
func (o *SearchFilesParams) WithIsFolder(isFolder *bool) *SearchFilesParams {
	o.SetIsFolder(isFolder)
	return o
}

// SetIsFolder adds the isFolder to the search files params
func (o *SearchFilesParams) SetIsFolder(isFolder *bool) {
	o.IsFolder = isFolder
}

// WithJobIds adds the jobIds to the search files params
func (o *SearchFilesParams) WithJobIds(jobIds []int64) *SearchFilesParams {
	o.SetJobIds(jobIds)
	return o
}

// SetJobIds adds the jobIds to the search files params
func (o *SearchFilesParams) SetJobIds(jobIds []int64) {
	o.JobIds = jobIds
}

// WithMailboxIds adds the mailboxIds to the search files params
func (o *SearchFilesParams) WithMailboxIds(mailboxIds []int64) *SearchFilesParams {
	o.SetMailboxIds(mailboxIds)
	return o
}

// SetMailboxIds adds the mailboxIds to the search files params
func (o *SearchFilesParams) SetMailboxIds(mailboxIds []int64) {
	o.MailboxIds = mailboxIds
}

// WithMightHaveSnapshotTags adds the mightHaveSnapshotTags to the search files params
func (o *SearchFilesParams) WithMightHaveSnapshotTags(mightHaveSnapshotTags []string) *SearchFilesParams {
	o.SetMightHaveSnapshotTags(mightHaveSnapshotTags)
	return o
}

// SetMightHaveSnapshotTags adds the mightHaveSnapshotTags to the search files params
func (o *SearchFilesParams) SetMightHaveSnapshotTags(mightHaveSnapshotTags []string) {
	o.MightHaveSnapshotTags = mightHaveSnapshotTags
}

// WithMightHaveTags adds the mightHaveTags to the search files params
func (o *SearchFilesParams) WithMightHaveTags(mightHaveTags []string) *SearchFilesParams {
	o.SetMightHaveTags(mightHaveTags)
	return o
}

// SetMightHaveTags adds the mightHaveTags to the search files params
func (o *SearchFilesParams) SetMightHaveTags(mightHaveTags []string) {
	o.MightHaveTags = mightHaveTags
}

// WithMustHaveSnapshotTags adds the mustHaveSnapshotTags to the search files params
func (o *SearchFilesParams) WithMustHaveSnapshotTags(mustHaveSnapshotTags []string) *SearchFilesParams {
	o.SetMustHaveSnapshotTags(mustHaveSnapshotTags)
	return o
}

// SetMustHaveSnapshotTags adds the mustHaveSnapshotTags to the search files params
func (o *SearchFilesParams) SetMustHaveSnapshotTags(mustHaveSnapshotTags []string) {
	o.MustHaveSnapshotTags = mustHaveSnapshotTags
}

// WithMustHaveTags adds the mustHaveTags to the search files params
func (o *SearchFilesParams) WithMustHaveTags(mustHaveTags []string) *SearchFilesParams {
	o.SetMustHaveTags(mustHaveTags)
	return o
}

// SetMustHaveTags adds the mustHaveTags to the search files params
func (o *SearchFilesParams) SetMustHaveTags(mustHaveTags []string) {
	o.MustHaveTags = mustHaveTags
}

// WithName adds the name to the search files params
func (o *SearchFilesParams) WithName(name *string) *SearchFilesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the search files params
func (o *SearchFilesParams) SetName(name *string) {
	o.Name = name
}

// WithObjectType adds the objectType to the search files params
func (o *SearchFilesParams) WithObjectType(objectType *string) *SearchFilesParams {
	o.SetObjectType(objectType)
	return o
}

// SetObjectType adds the objectType to the search files params
func (o *SearchFilesParams) SetObjectType(objectType *string) {
	o.ObjectType = objectType
}

// WithOffice365SearchType adds the office365SearchType to the search files params
func (o *SearchFilesParams) WithOffice365SearchType(office365SearchType *int32) *SearchFilesParams {
	o.SetOffice365SearchType(office365SearchType)
	return o
}

// SetOffice365SearchType adds the office365SearchType to the search files params
func (o *SearchFilesParams) SetOffice365SearchType(office365SearchType *int32) {
	o.Office365SearchType = office365SearchType
}

// WithPageSize adds the pageSize to the search files params
func (o *SearchFilesParams) WithPageSize(pageSize *int32) *SearchFilesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the search files params
func (o *SearchFilesParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPaginate adds the paginate to the search files params
func (o *SearchFilesParams) WithPaginate(paginate *bool) *SearchFilesParams {
	o.SetPaginate(paginate)
	return o
}

// SetPaginate adds the paginate to the search files params
func (o *SearchFilesParams) SetPaginate(paginate *bool) {
	o.Paginate = paginate
}

// WithPaginationCookie adds the paginationCookie to the search files params
func (o *SearchFilesParams) WithPaginationCookie(paginationCookie *string) *SearchFilesParams {
	o.SetPaginationCookie(paginationCookie)
	return o
}

// SetPaginationCookie adds the paginationCookie to the search files params
func (o *SearchFilesParams) SetPaginationCookie(paginationCookie *string) {
	o.PaginationCookie = paginationCookie
}

// WithProtectionJobIds adds the protectionJobIds to the search files params
func (o *SearchFilesParams) WithProtectionJobIds(protectionJobIds []int64) *SearchFilesParams {
	o.SetProtectionJobIds(protectionJobIds)
	return o
}

// SetProtectionJobIds adds the protectionJobIds to the search files params
func (o *SearchFilesParams) SetProtectionJobIds(protectionJobIds []int64) {
	o.ProtectionJobIds = protectionJobIds
}

// WithReceivedEndTime adds the receivedEndTime to the search files params
func (o *SearchFilesParams) WithReceivedEndTime(receivedEndTime *int64) *SearchFilesParams {
	o.SetReceivedEndTime(receivedEndTime)
	return o
}

// SetReceivedEndTime adds the receivedEndTime to the search files params
func (o *SearchFilesParams) SetReceivedEndTime(receivedEndTime *int64) {
	o.ReceivedEndTime = receivedEndTime
}

// WithReceivedStartTime adds the receivedStartTime to the search files params
func (o *SearchFilesParams) WithReceivedStartTime(receivedStartTime *int64) *SearchFilesParams {
	o.SetReceivedStartTime(receivedStartTime)
	return o
}

// SetReceivedStartTime adds the receivedStartTime to the search files params
func (o *SearchFilesParams) SetReceivedStartTime(receivedStartTime *int64) {
	o.ReceivedStartTime = receivedStartTime
}

// WithReceivedTimeSeconds adds the receivedTimeSeconds to the search files params
func (o *SearchFilesParams) WithReceivedTimeSeconds(receivedTimeSeconds *int64) *SearchFilesParams {
	o.SetReceivedTimeSeconds(receivedTimeSeconds)
	return o
}

// SetReceivedTimeSeconds adds the receivedTimeSeconds to the search files params
func (o *SearchFilesParams) SetReceivedTimeSeconds(receivedTimeSeconds *int64) {
	o.ReceivedTimeSeconds = receivedTimeSeconds
}

// WithRecipientAddresses adds the recipientAddresses to the search files params
func (o *SearchFilesParams) WithRecipientAddresses(recipientAddresses []string) *SearchFilesParams {
	o.SetRecipientAddresses(recipientAddresses)
	return o
}

// SetRecipientAddresses adds the recipientAddresses to the search files params
func (o *SearchFilesParams) SetRecipientAddresses(recipientAddresses []string) {
	o.RecipientAddresses = recipientAddresses
}

// WithRegisteredSourceIds adds the registeredSourceIds to the search files params
func (o *SearchFilesParams) WithRegisteredSourceIds(registeredSourceIds []int64) *SearchFilesParams {
	o.SetRegisteredSourceIds(registeredSourceIds)
	return o
}

// SetRegisteredSourceIds adds the registeredSourceIds to the search files params
func (o *SearchFilesParams) SetRegisteredSourceIds(registeredSourceIds []int64) {
	o.RegisteredSourceIds = registeredSourceIds
}

// WithSamAccountName adds the samAccountName to the search files params
func (o *SearchFilesParams) WithSamAccountName(samAccountName *string) *SearchFilesParams {
	o.SetSamAccountName(samAccountName)
	return o
}

// SetSamAccountName adds the samAccountName to the search files params
func (o *SearchFilesParams) SetSamAccountName(samAccountName *string) {
	o.SamAccountName = samAccountName
}

// WithSenderAddress adds the senderAddress to the search files params
func (o *SearchFilesParams) WithSenderAddress(senderAddress *string) *SearchFilesParams {
	o.SetSenderAddress(senderAddress)
	return o
}

// SetSenderAddress adds the senderAddress to the search files params
func (o *SearchFilesParams) SetSenderAddress(senderAddress *string) {
	o.SenderAddress = senderAddress
}

// WithSentTimeSeconds adds the sentTimeSeconds to the search files params
func (o *SearchFilesParams) WithSentTimeSeconds(sentTimeSeconds *int64) *SearchFilesParams {
	o.SetSentTimeSeconds(sentTimeSeconds)
	return o
}

// SetSentTimeSeconds adds the sentTimeSeconds to the search files params
func (o *SearchFilesParams) SetSentTimeSeconds(sentTimeSeconds *int64) {
	o.SentTimeSeconds = sentTimeSeconds
}

// WithShowOnlyEmailFolders adds the showOnlyEmailFolders to the search files params
func (o *SearchFilesParams) WithShowOnlyEmailFolders(showOnlyEmailFolders *bool) *SearchFilesParams {
	o.SetShowOnlyEmailFolders(showOnlyEmailFolders)
	return o
}

// SetShowOnlyEmailFolders adds the showOnlyEmailFolders to the search files params
func (o *SearchFilesParams) SetShowOnlyEmailFolders(showOnlyEmailFolders *bool) {
	o.ShowOnlyEmailFolders = showOnlyEmailFolders
}

// WithSize adds the size to the search files params
func (o *SearchFilesParams) WithSize(size *int64) *SearchFilesParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the search files params
func (o *SearchFilesParams) SetSize(size *int64) {
	o.Size = size
}

// WithTenantID adds the tenantID to the search files params
func (o *SearchFilesParams) WithTenantID(tenantID *string) *SearchFilesParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the search files params
func (o *SearchFilesParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WithViewBoxIds adds the viewBoxIds to the search files params
func (o *SearchFilesParams) WithViewBoxIds(viewBoxIds []int64) *SearchFilesParams {
	o.SetViewBoxIds(viewBoxIds)
	return o
}

// SetViewBoxIds adds the viewBoxIds to the search files params
func (o *SearchFilesParams) SetViewBoxIds(viewBoxIds []int64) {
	o.ViewBoxIds = viewBoxIds
}

// WriteToRequest writes these params to a swagger request
func (o *SearchFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.BccRecipientAddresses != nil {

		// binding items for bccRecipientAddresses
		joinedBccRecipientAddresses := o.bindParamBccRecipientAddresses(reg)

		// query array param bccRecipientAddresses
		if err := r.SetQueryParam("bccRecipientAddresses", joinedBccRecipientAddresses...); err != nil {
			return err
		}
	}

	if o.CcRecipientAddresses != nil {

		// binding items for ccRecipientAddresses
		joinedCcRecipientAddresses := o.bindParamCcRecipientAddresses(reg)

		// query array param ccRecipientAddresses
		if err := r.SetQueryParam("ccRecipientAddresses", joinedCcRecipientAddresses...); err != nil {
			return err
		}
	}

	if o.DocumentName != nil {

		// query param documentName
		var qrDocumentName string

		if o.DocumentName != nil {
			qrDocumentName = *o.DocumentName
		}
		qDocumentName := qrDocumentName
		if qDocumentName != "" {

			if err := r.SetQueryParam("documentName", qDocumentName); err != nil {
				return err
			}
		}
	}

	if o.Domain != nil {

		// query param domain
		var qrDomain string

		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {

			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}
	}

	if o.DomainIds != nil {

		// binding items for domainIds
		joinedDomainIds := o.bindParamDomainIds(reg)

		// query array param domainIds
		if err := r.SetQueryParam("domainIds", joinedDomainIds...); err != nil {
			return err
		}
	}

	if o.Email != nil {

		// query param email
		var qrEmail string

		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {

			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}
	}

	if o.EmailSubject != nil {

		// query param emailSubject
		var qrEmailSubject string

		if o.EmailSubject != nil {
			qrEmailSubject = *o.EmailSubject
		}
		qEmailSubject := qrEmailSubject
		if qEmailSubject != "" {

			if err := r.SetQueryParam("emailSubject", qEmailSubject); err != nil {
				return err
			}
		}
	}

	if o.EntityIds != nil {

		// binding items for entityIds
		joinedEntityIds := o.bindParamEntityIds(reg)

		// query array param entityIds
		if err := r.SetQueryParam("entityIds", joinedEntityIds...); err != nil {
			return err
		}
	}

	if o.EntityTypes != nil {

		// binding items for entityTypes
		joinedEntityTypes := o.bindParamEntityTypes(reg)

		// query array param entityTypes
		if err := r.SetQueryParam("entityTypes", joinedEntityTypes...); err != nil {
			return err
		}
	}

	if o.Filename != nil {

		// query param filename
		var qrFilename string

		if o.Filename != nil {
			qrFilename = *o.Filename
		}
		qFilename := qrFilename
		if qFilename != "" {

			if err := r.SetQueryParam("filename", qFilename); err != nil {
				return err
			}
		}
	}

	if o.FolderName != nil {

		// query param folderName
		var qrFolderName string

		if o.FolderName != nil {
			qrFolderName = *o.FolderName
		}
		qFolderName := qrFolderName
		if qFolderName != "" {

			if err := r.SetQueryParam("folderName", qFolderName); err != nil {
				return err
			}
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom int64

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.HasAttachments != nil {

		// query param hasAttachments
		var qrHasAttachments bool

		if o.HasAttachments != nil {
			qrHasAttachments = *o.HasAttachments
		}
		qHasAttachments := swag.FormatBool(qrHasAttachments)
		if qHasAttachments != "" {

			if err := r.SetQueryParam("hasAttachments", qHasAttachments); err != nil {
				return err
			}
		}
	}

	if o.IsFolder != nil {

		// query param isFolder
		var qrIsFolder bool

		if o.IsFolder != nil {
			qrIsFolder = *o.IsFolder
		}
		qIsFolder := swag.FormatBool(qrIsFolder)
		if qIsFolder != "" {

			if err := r.SetQueryParam("isFolder", qIsFolder); err != nil {
				return err
			}
		}
	}

	if o.JobIds != nil {

		// binding items for jobIds
		joinedJobIds := o.bindParamJobIds(reg)

		// query array param jobIds
		if err := r.SetQueryParam("jobIds", joinedJobIds...); err != nil {
			return err
		}
	}

	if o.MailboxIds != nil {

		// binding items for mailboxIds
		joinedMailboxIds := o.bindParamMailboxIds(reg)

		// query array param mailboxIds
		if err := r.SetQueryParam("mailboxIds", joinedMailboxIds...); err != nil {
			return err
		}
	}

	if o.MightHaveSnapshotTags != nil {

		// binding items for mightHaveSnapshotTags
		joinedMightHaveSnapshotTags := o.bindParamMightHaveSnapshotTags(reg)

		// query array param mightHaveSnapshotTags
		if err := r.SetQueryParam("mightHaveSnapshotTags", joinedMightHaveSnapshotTags...); err != nil {
			return err
		}
	}

	if o.MightHaveTags != nil {

		// binding items for mightHaveTags
		joinedMightHaveTags := o.bindParamMightHaveTags(reg)

		// query array param mightHaveTags
		if err := r.SetQueryParam("mightHaveTags", joinedMightHaveTags...); err != nil {
			return err
		}
	}

	if o.MustHaveSnapshotTags != nil {

		// binding items for mustHaveSnapshotTags
		joinedMustHaveSnapshotTags := o.bindParamMustHaveSnapshotTags(reg)

		// query array param mustHaveSnapshotTags
		if err := r.SetQueryParam("mustHaveSnapshotTags", joinedMustHaveSnapshotTags...); err != nil {
			return err
		}
	}

	if o.MustHaveTags != nil {

		// binding items for mustHaveTags
		joinedMustHaveTags := o.bindParamMustHaveTags(reg)

		// query array param mustHaveTags
		if err := r.SetQueryParam("mustHaveTags", joinedMustHaveTags...); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.ObjectType != nil {

		// query param objectType
		var qrObjectType string

		if o.ObjectType != nil {
			qrObjectType = *o.ObjectType
		}
		qObjectType := qrObjectType
		if qObjectType != "" {

			if err := r.SetQueryParam("objectType", qObjectType); err != nil {
				return err
			}
		}
	}

	if o.Office365SearchType != nil {

		// query param office365SearchType
		var qrOffice365SearchType int32

		if o.Office365SearchType != nil {
			qrOffice365SearchType = *o.Office365SearchType
		}
		qOffice365SearchType := swag.FormatInt32(qrOffice365SearchType)
		if qOffice365SearchType != "" {

			if err := r.SetQueryParam("office365SearchType", qOffice365SearchType); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Paginate != nil {

		// query param paginate
		var qrPaginate bool

		if o.Paginate != nil {
			qrPaginate = *o.Paginate
		}
		qPaginate := swag.FormatBool(qrPaginate)
		if qPaginate != "" {

			if err := r.SetQueryParam("paginate", qPaginate); err != nil {
				return err
			}
		}
	}

	if o.PaginationCookie != nil {

		// query param paginationCookie
		var qrPaginationCookie string

		if o.PaginationCookie != nil {
			qrPaginationCookie = *o.PaginationCookie
		}
		qPaginationCookie := qrPaginationCookie
		if qPaginationCookie != "" {

			if err := r.SetQueryParam("paginationCookie", qPaginationCookie); err != nil {
				return err
			}
		}
	}

	if o.ProtectionJobIds != nil {

		// binding items for protectionJobIds
		joinedProtectionJobIds := o.bindParamProtectionJobIds(reg)

		// query array param protectionJobIds
		if err := r.SetQueryParam("protectionJobIds", joinedProtectionJobIds...); err != nil {
			return err
		}
	}

	if o.ReceivedEndTime != nil {

		// query param receivedEndTime
		var qrReceivedEndTime int64

		if o.ReceivedEndTime != nil {
			qrReceivedEndTime = *o.ReceivedEndTime
		}
		qReceivedEndTime := swag.FormatInt64(qrReceivedEndTime)
		if qReceivedEndTime != "" {

			if err := r.SetQueryParam("receivedEndTime", qReceivedEndTime); err != nil {
				return err
			}
		}
	}

	if o.ReceivedStartTime != nil {

		// query param receivedStartTime
		var qrReceivedStartTime int64

		if o.ReceivedStartTime != nil {
			qrReceivedStartTime = *o.ReceivedStartTime
		}
		qReceivedStartTime := swag.FormatInt64(qrReceivedStartTime)
		if qReceivedStartTime != "" {

			if err := r.SetQueryParam("receivedStartTime", qReceivedStartTime); err != nil {
				return err
			}
		}
	}

	if o.ReceivedTimeSeconds != nil {

		// query param receivedTimeSeconds
		var qrReceivedTimeSeconds int64

		if o.ReceivedTimeSeconds != nil {
			qrReceivedTimeSeconds = *o.ReceivedTimeSeconds
		}
		qReceivedTimeSeconds := swag.FormatInt64(qrReceivedTimeSeconds)
		if qReceivedTimeSeconds != "" {

			if err := r.SetQueryParam("receivedTimeSeconds", qReceivedTimeSeconds); err != nil {
				return err
			}
		}
	}

	if o.RecipientAddresses != nil {

		// binding items for recipientAddresses
		joinedRecipientAddresses := o.bindParamRecipientAddresses(reg)

		// query array param recipientAddresses
		if err := r.SetQueryParam("recipientAddresses", joinedRecipientAddresses...); err != nil {
			return err
		}
	}

	if o.RegisteredSourceIds != nil {

		// binding items for registeredSourceIds
		joinedRegisteredSourceIds := o.bindParamRegisteredSourceIds(reg)

		// query array param registeredSourceIds
		if err := r.SetQueryParam("registeredSourceIds", joinedRegisteredSourceIds...); err != nil {
			return err
		}
	}

	if o.SamAccountName != nil {

		// query param samAccountName
		var qrSamAccountName string

		if o.SamAccountName != nil {
			qrSamAccountName = *o.SamAccountName
		}
		qSamAccountName := qrSamAccountName
		if qSamAccountName != "" {

			if err := r.SetQueryParam("samAccountName", qSamAccountName); err != nil {
				return err
			}
		}
	}

	if o.SenderAddress != nil {

		// query param senderAddress
		var qrSenderAddress string

		if o.SenderAddress != nil {
			qrSenderAddress = *o.SenderAddress
		}
		qSenderAddress := qrSenderAddress
		if qSenderAddress != "" {

			if err := r.SetQueryParam("senderAddress", qSenderAddress); err != nil {
				return err
			}
		}
	}

	if o.SentTimeSeconds != nil {

		// query param sentTimeSeconds
		var qrSentTimeSeconds int64

		if o.SentTimeSeconds != nil {
			qrSentTimeSeconds = *o.SentTimeSeconds
		}
		qSentTimeSeconds := swag.FormatInt64(qrSentTimeSeconds)
		if qSentTimeSeconds != "" {

			if err := r.SetQueryParam("sentTimeSeconds", qSentTimeSeconds); err != nil {
				return err
			}
		}
	}

	if o.ShowOnlyEmailFolders != nil {

		// query param showOnlyEmailFolders
		var qrShowOnlyEmailFolders bool

		if o.ShowOnlyEmailFolders != nil {
			qrShowOnlyEmailFolders = *o.ShowOnlyEmailFolders
		}
		qShowOnlyEmailFolders := swag.FormatBool(qrShowOnlyEmailFolders)
		if qShowOnlyEmailFolders != "" {

			if err := r.SetQueryParam("showOnlyEmailFolders", qShowOnlyEmailFolders); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int64

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.TenantID != nil {

		// query param tenantId
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenantId", qTenantID); err != nil {
				return err
			}
		}
	}

	if o.ViewBoxIds != nil {

		// binding items for viewBoxIds
		joinedViewBoxIds := o.bindParamViewBoxIds(reg)

		// query array param viewBoxIds
		if err := r.SetQueryParam("viewBoxIds", joinedViewBoxIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchFiles binds the parameter bccRecipientAddresses
func (o *SearchFilesParams) bindParamBccRecipientAddresses(formats strfmt.Registry) []string {
	bccRecipientAddressesIR := o.BccRecipientAddresses

	var bccRecipientAddressesIC []string
	for _, bccRecipientAddressesIIR := range bccRecipientAddressesIR { // explode []string

		bccRecipientAddressesIIV := bccRecipientAddressesIIR // string as string
		bccRecipientAddressesIC = append(bccRecipientAddressesIC, bccRecipientAddressesIIV)
	}

	// items.CollectionFormat: ""
	bccRecipientAddressesIS := swag.JoinByFormat(bccRecipientAddressesIC, "")

	return bccRecipientAddressesIS
}

// bindParamSearchFiles binds the parameter ccRecipientAddresses
func (o *SearchFilesParams) bindParamCcRecipientAddresses(formats strfmt.Registry) []string {
	ccRecipientAddressesIR := o.CcRecipientAddresses

	var ccRecipientAddressesIC []string
	for _, ccRecipientAddressesIIR := range ccRecipientAddressesIR { // explode []string

		ccRecipientAddressesIIV := ccRecipientAddressesIIR // string as string
		ccRecipientAddressesIC = append(ccRecipientAddressesIC, ccRecipientAddressesIIV)
	}

	// items.CollectionFormat: ""
	ccRecipientAddressesIS := swag.JoinByFormat(ccRecipientAddressesIC, "")

	return ccRecipientAddressesIS
}

// bindParamSearchFiles binds the parameter domainIds
func (o *SearchFilesParams) bindParamDomainIds(formats strfmt.Registry) []string {
	domainIdsIR := o.DomainIds

	var domainIdsIC []string
	for _, domainIdsIIR := range domainIdsIR { // explode []int64

		domainIdsIIV := swag.FormatInt64(domainIdsIIR) // int64 as string
		domainIdsIC = append(domainIdsIC, domainIdsIIV)
	}

	// items.CollectionFormat: ""
	domainIdsIS := swag.JoinByFormat(domainIdsIC, "")

	return domainIdsIS
}

// bindParamSearchFiles binds the parameter entityIds
func (o *SearchFilesParams) bindParamEntityIds(formats strfmt.Registry) []string {
	entityIdsIR := o.EntityIds

	var entityIdsIC []string
	for _, entityIdsIIR := range entityIdsIR { // explode []int64

		entityIdsIIV := swag.FormatInt64(entityIdsIIR) // int64 as string
		entityIdsIC = append(entityIdsIC, entityIdsIIV)
	}

	// items.CollectionFormat: ""
	entityIdsIS := swag.JoinByFormat(entityIdsIC, "")

	return entityIdsIS
}

// bindParamSearchFiles binds the parameter entityTypes
func (o *SearchFilesParams) bindParamEntityTypes(formats strfmt.Registry) []string {
	entityTypesIR := o.EntityTypes

	var entityTypesIC []string
	for _, entityTypesIIR := range entityTypesIR { // explode []string

		entityTypesIIV := entityTypesIIR // string as string
		entityTypesIC = append(entityTypesIC, entityTypesIIV)
	}

	// items.CollectionFormat: ""
	entityTypesIS := swag.JoinByFormat(entityTypesIC, "")

	return entityTypesIS
}

// bindParamSearchFiles binds the parameter jobIds
func (o *SearchFilesParams) bindParamJobIds(formats strfmt.Registry) []string {
	jobIdsIR := o.JobIds

	var jobIdsIC []string
	for _, jobIdsIIR := range jobIdsIR { // explode []int64

		jobIdsIIV := swag.FormatInt64(jobIdsIIR) // int64 as string
		jobIdsIC = append(jobIdsIC, jobIdsIIV)
	}

	// items.CollectionFormat: ""
	jobIdsIS := swag.JoinByFormat(jobIdsIC, "")

	return jobIdsIS
}

// bindParamSearchFiles binds the parameter mailboxIds
func (o *SearchFilesParams) bindParamMailboxIds(formats strfmt.Registry) []string {
	mailboxIdsIR := o.MailboxIds

	var mailboxIdsIC []string
	for _, mailboxIdsIIR := range mailboxIdsIR { // explode []int64

		mailboxIdsIIV := swag.FormatInt64(mailboxIdsIIR) // int64 as string
		mailboxIdsIC = append(mailboxIdsIC, mailboxIdsIIV)
	}

	// items.CollectionFormat: ""
	mailboxIdsIS := swag.JoinByFormat(mailboxIdsIC, "")

	return mailboxIdsIS
}

// bindParamSearchFiles binds the parameter mightHaveSnapshotTags
func (o *SearchFilesParams) bindParamMightHaveSnapshotTags(formats strfmt.Registry) []string {
	mightHaveSnapshotTagsIR := o.MightHaveSnapshotTags

	var mightHaveSnapshotTagsIC []string
	for _, mightHaveSnapshotTagsIIR := range mightHaveSnapshotTagsIR { // explode []string

		mightHaveSnapshotTagsIIV := mightHaveSnapshotTagsIIR // string as string
		mightHaveSnapshotTagsIC = append(mightHaveSnapshotTagsIC, mightHaveSnapshotTagsIIV)
	}

	// items.CollectionFormat: ""
	mightHaveSnapshotTagsIS := swag.JoinByFormat(mightHaveSnapshotTagsIC, "")

	return mightHaveSnapshotTagsIS
}

// bindParamSearchFiles binds the parameter mightHaveTags
func (o *SearchFilesParams) bindParamMightHaveTags(formats strfmt.Registry) []string {
	mightHaveTagsIR := o.MightHaveTags

	var mightHaveTagsIC []string
	for _, mightHaveTagsIIR := range mightHaveTagsIR { // explode []string

		mightHaveTagsIIV := mightHaveTagsIIR // string as string
		mightHaveTagsIC = append(mightHaveTagsIC, mightHaveTagsIIV)
	}

	// items.CollectionFormat: ""
	mightHaveTagsIS := swag.JoinByFormat(mightHaveTagsIC, "")

	return mightHaveTagsIS
}

// bindParamSearchFiles binds the parameter mustHaveSnapshotTags
func (o *SearchFilesParams) bindParamMustHaveSnapshotTags(formats strfmt.Registry) []string {
	mustHaveSnapshotTagsIR := o.MustHaveSnapshotTags

	var mustHaveSnapshotTagsIC []string
	for _, mustHaveSnapshotTagsIIR := range mustHaveSnapshotTagsIR { // explode []string

		mustHaveSnapshotTagsIIV := mustHaveSnapshotTagsIIR // string as string
		mustHaveSnapshotTagsIC = append(mustHaveSnapshotTagsIC, mustHaveSnapshotTagsIIV)
	}

	// items.CollectionFormat: ""
	mustHaveSnapshotTagsIS := swag.JoinByFormat(mustHaveSnapshotTagsIC, "")

	return mustHaveSnapshotTagsIS
}

// bindParamSearchFiles binds the parameter mustHaveTags
func (o *SearchFilesParams) bindParamMustHaveTags(formats strfmt.Registry) []string {
	mustHaveTagsIR := o.MustHaveTags

	var mustHaveTagsIC []string
	for _, mustHaveTagsIIR := range mustHaveTagsIR { // explode []string

		mustHaveTagsIIV := mustHaveTagsIIR // string as string
		mustHaveTagsIC = append(mustHaveTagsIC, mustHaveTagsIIV)
	}

	// items.CollectionFormat: ""
	mustHaveTagsIS := swag.JoinByFormat(mustHaveTagsIC, "")

	return mustHaveTagsIS
}

// bindParamSearchFiles binds the parameter protectionJobIds
func (o *SearchFilesParams) bindParamProtectionJobIds(formats strfmt.Registry) []string {
	protectionJobIdsIR := o.ProtectionJobIds

	var protectionJobIdsIC []string
	for _, protectionJobIdsIIR := range protectionJobIdsIR { // explode []int64

		protectionJobIdsIIV := swag.FormatInt64(protectionJobIdsIIR) // int64 as string
		protectionJobIdsIC = append(protectionJobIdsIC, protectionJobIdsIIV)
	}

	// items.CollectionFormat: ""
	protectionJobIdsIS := swag.JoinByFormat(protectionJobIdsIC, "")

	return protectionJobIdsIS
}

// bindParamSearchFiles binds the parameter recipientAddresses
func (o *SearchFilesParams) bindParamRecipientAddresses(formats strfmt.Registry) []string {
	recipientAddressesIR := o.RecipientAddresses

	var recipientAddressesIC []string
	for _, recipientAddressesIIR := range recipientAddressesIR { // explode []string

		recipientAddressesIIV := recipientAddressesIIR // string as string
		recipientAddressesIC = append(recipientAddressesIC, recipientAddressesIIV)
	}

	// items.CollectionFormat: ""
	recipientAddressesIS := swag.JoinByFormat(recipientAddressesIC, "")

	return recipientAddressesIS
}

// bindParamSearchFiles binds the parameter registeredSourceIds
func (o *SearchFilesParams) bindParamRegisteredSourceIds(formats strfmt.Registry) []string {
	registeredSourceIdsIR := o.RegisteredSourceIds

	var registeredSourceIdsIC []string
	for _, registeredSourceIdsIIR := range registeredSourceIdsIR { // explode []int64

		registeredSourceIdsIIV := swag.FormatInt64(registeredSourceIdsIIR) // int64 as string
		registeredSourceIdsIC = append(registeredSourceIdsIC, registeredSourceIdsIIV)
	}

	// items.CollectionFormat: ""
	registeredSourceIdsIS := swag.JoinByFormat(registeredSourceIdsIC, "")

	return registeredSourceIdsIS
}

// bindParamSearchFiles binds the parameter viewBoxIds
func (o *SearchFilesParams) bindParamViewBoxIds(formats strfmt.Registry) []string {
	viewBoxIdsIR := o.ViewBoxIds

	var viewBoxIdsIC []string
	for _, viewBoxIdsIIR := range viewBoxIdsIR { // explode []int64

		viewBoxIdsIIV := swag.FormatInt64(viewBoxIdsIIR) // int64 as string
		viewBoxIdsIC = append(viewBoxIdsIC, viewBoxIdsIIV)
	}

	// items.CollectionFormat: ""
	viewBoxIdsIS := swag.JoinByFormat(viewBoxIdsIC, "")

	return viewBoxIdsIS
}
