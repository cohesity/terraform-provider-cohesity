// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new network API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new network API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new network API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for network API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppendHosts(params *AppendHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppendHostsOK, error)

	CreateBond(params *CreateBondParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBondOK, error)

	CreateIPConfig(params *CreateIPConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIPConfigOK, error)

	DeleteBond(params *DeleteBondParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBondNoContent, error)

	DeleteHosts(params *DeleteHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteHostsOK, error)

	DeleteIPConfig(params *DeleteIPConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIPConfigNoContent, error)

	EditHosts(params *EditHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditHostsOK, error)

	ListHosts(params *ListHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListHostsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	AppendHosts adds new entries to the etc hosts file

	**Privileges:** ```CLUSTER_MODIFY``` <br><br>Sends a request to add one or more new entries to the Cluster's /etc/hosts

file.
*/
func (a *Client) AppendHosts(params *AppendHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppendHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppendHosts",
		Method:             "POST",
		PathPattern:        "/public/network/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppendHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppendHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppendHostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CreateBond creates a new network bond

	**Privileges:** ```CLUSTER_CREATE``` <br><br>Sends a request to create a new network bond on the Cluster. This can only be

performed on a Node before it is part of a Cluster.
*/
func (a *Client) CreateBond(params *CreateBondParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBondOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBondParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBond",
		Method:             "POST",
		PathPattern:        "/public/network/bonds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBondReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBondOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateBondDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateIPConfig creates a new ipconfig entry on the cluster

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Sends a request to create a new ipconfig entry on the Cluster.
*/
func (a *Client) CreateIPConfig(params *CreateIPConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIPConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIPConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateIpConfig",
		Method:             "POST",
		PathPattern:        "/public/network/ipConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIPConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIPConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateIPConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	DeleteBond deletes a network bond

	**Privileges:** ```CLUSTER_CREATE``` <br><br>Sends a request to delete a network bond from the Cluster. This can only be

performed on a Node before it is part of a Cluster.
*/
func (a *Client) DeleteBond(params *DeleteBondParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBondNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBondParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBond",
		Method:             "DELETE",
		PathPattern:        "/public/network/bonds/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBondReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBondNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBondDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	DeleteHosts removes entries from the etc hosts file

	**Privileges:** ```CLUSTER_MODIFY``` <br><br>Sends a request to remove one or more entries from the Cluster's

etc/hosts file.
*/
func (a *Client) DeleteHosts(params *DeleteHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteHosts",
		Method:             "DELETE",
		PathPattern:        "/public/network/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteIPConfig deletes a new ipconfig entry from the cluster

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Sends a request to delete a new ipconfig entry from the Cluster.
*/
func (a *Client) DeleteIPConfig(params *DeleteIPConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIPConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteIpConfig",
		Method:             "DELETE",
		PathPattern:        "/public/network/ipConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIPConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EditHosts edits entries in the cluster s etc hosts file

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Sends a request to edit one or more entries in the Cluster's /etc/hosts file.
*/
func (a *Client) EditHosts(params *EditHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EditHosts",
		Method:             "PUT",
		PathPattern:        "/public/network/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EditHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EditHostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	ListHosts gets the current entries in the hosts file on the cluster

	**Privileges:** ```CLUSTER_VIEW``` <br><br>Sends a request to get a list of the current entries in the hosts file

on the Cluster.
*/
func (a *Client) ListHosts(params *ListHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListHosts",
		Method:             "GET",
		PathPattern:        "/public/network/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListHostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
