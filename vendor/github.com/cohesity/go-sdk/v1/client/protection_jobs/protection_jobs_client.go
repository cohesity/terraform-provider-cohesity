// Code generated by go-swagger; DO NOT EDIT.

package protection_jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new protection jobs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new protection jobs API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new protection jobs API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for protection jobs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeProtectionJobState(params *ChangeProtectionJobStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangeProtectionJobStateNoContent, error)

	CreateProtectionJob(params *CreateProtectionJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProtectionJobCreated, error)

	DeleteProtectionJob(params *DeleteProtectionJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProtectionJobNoContent, error)

	GetProtectionJobAudit(params *GetProtectionJobAuditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionJobAuditOK, error)

	GetProtectionJobByID(params *GetProtectionJobByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionJobByIDOK, error)

	GetProtectionJobs(params *GetProtectionJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionJobsOK, error)

	RunProtectionJob(params *RunProtectionJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunProtectionJobNoContent, error)

	UpdateProtectionJob(params *UpdateProtectionJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProtectionJobOK, error)

	UpdateProtectionJobsState(params *UpdateProtectionJobsStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProtectionJobsStateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ChangeProtectionJobState pauses future runs or resume future runs of the specified protection job

	**Privileges:** ```PROTECTION_JOB_OPERATE``` <br><br>If the Protection Job is currently running (not paused) and true is passed in,

this operation stops any new Runs of this Protection Job
from stating and executing.
However, any existing Runs that were already executing will continue to run.
If this Projection Job is paused and false is passed in, this operation
restores the Job to a running state and new Runs are started as defined
by the schedule in the Policy associated with the Job.

Returns success if the paused state is changed.
*/
func (a *Client) ChangeProtectionJobState(params *ChangeProtectionJobStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangeProtectionJobStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeProtectionJobStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ChangeProtectionJobState",
		Method:             "POST",
		PathPattern:        "/public/protectionJobState/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeProtectionJobStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeProtectionJobStateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChangeProtectionJobStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateProtectionJob creates a protection job

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Returns the created Protection Job.
*/
func (a *Client) CreateProtectionJob(params *CreateProtectionJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProtectionJobCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProtectionJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateProtectionJob",
		Method:             "POST",
		PathPattern:        "/public/protectionJobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProtectionJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProtectionJobCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateProtectionJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteProtectionJob deletes a protection job

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Returns Success if the Protection Job is deleted.
*/
func (a *Client) DeleteProtectionJob(params *DeleteProtectionJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProtectionJobNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProtectionJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProtectionJob",
		Method:             "DELETE",
		PathPattern:        "/public/protectionJobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProtectionJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProtectionJobNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProtectionJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProtectionJobAudit lists a protection job audit

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns the audit of specific protection job edit history.
*/
func (a *Client) GetProtectionJobAudit(params *GetProtectionJobAuditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionJobAuditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionJobAuditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionJobAudit",
		Method:             "GET",
		PathPattern:        "/public/protectionJobs/{id}/auditTrail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionJobAuditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionJobAuditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionJobAuditDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProtectionJobByID lists details about single protection job

**Privileges:** ```PROTECTION_VIEW``` <br><br>Returns the Protection Job corresponding to the specified Job id.
*/
func (a *Client) GetProtectionJobByID(params *GetProtectionJobByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionJobByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionJobByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionJobById",
		Method:             "GET",
		PathPattern:        "/public/protectionJobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionJobByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionJobByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionJobByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetProtectionJobs lists protections jobs filtered by the specified parameters

	**Privileges:** ```PROTECTION_VIEW``` <br><br>If no parameters are specified, all Protection Jobs currently

on the Cohesity Cluster are returned.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetProtectionJobs(params *GetProtectionJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionJobs",
		Method:             "GET",
		PathPattern:        "/public/protectionJobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionJobsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	RunProtectionJob immediatelies execute a single protection job run

	**Privileges:** ```PROTECTION_JOB_OPERATE``` <br><br>Immediately execute a single Job Run and ignore the schedule defined

in the Policy.
A Protection Policy associated with the Job may define up to three
backup run types:
1) Regular (CBT utilized), 2) Full (CBT not utilized) and 3) Log.
The passed in run type defines what type of backup is done by the Job Run.
The schedule defined in the Policy for the backup run type is ignored but
other settings such as the snapshot retention and retry settings are used.
Returns success if the Job Run starts.
*/
func (a *Client) RunProtectionJob(params *RunProtectionJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunProtectionJobNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunProtectionJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RunProtectionJob",
		Method:             "POST",
		PathPattern:        "/public/protectionJobs/run/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RunProtectionJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunProtectionJobNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunProtectionJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateProtectionJob updates a protection job

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Returns the updated Protection Job.
*/
func (a *Client) UpdateProtectionJob(params *UpdateProtectionJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProtectionJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProtectionJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateProtectionJob",
		Method:             "PUT",
		PathPattern:        "/public/protectionJobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProtectionJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProtectionJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateProtectionJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateProtectionJobsState performs an action like pause resume activate deactivate on all the specified protection jobs

	**Privileges:** ```PROTECTION_JOB_OPERATE``` <br><br>Note that the pause or resume actions will take effect from next Protection

Run. Also, user can specify only one type of action on all the Protection Jobs.
Deactivate and activate actions are independent of pause and resume state.
Deactivate and activate actions are useful in case of failover situations.

Returns success if the state of all the Protection Jobs state is changed
successfully.
*/
func (a *Client) UpdateProtectionJobsState(params *UpdateProtectionJobsStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProtectionJobsStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProtectionJobsStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateProtectionJobsState",
		Method:             "POST",
		PathPattern:        "/public/protectionJobs/states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProtectionJobsStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProtectionJobsStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateProtectionJobsStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
