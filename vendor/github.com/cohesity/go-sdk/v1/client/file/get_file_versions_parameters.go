// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFileVersionsParams creates a new GetFileVersionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFileVersionsParams() *GetFileVersionsParams {
	return &GetFileVersionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFileVersionsParamsWithTimeout creates a new GetFileVersionsParams object
// with the ability to set a timeout on a request.
func NewGetFileVersionsParamsWithTimeout(timeout time.Duration) *GetFileVersionsParams {
	return &GetFileVersionsParams{
		timeout: timeout,
	}
}

// NewGetFileVersionsParamsWithContext creates a new GetFileVersionsParams object
// with the ability to set a context for a request.
func NewGetFileVersionsParamsWithContext(ctx context.Context) *GetFileVersionsParams {
	return &GetFileVersionsParams{
		Context: ctx,
	}
}

// NewGetFileVersionsParamsWithHTTPClient creates a new GetFileVersionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFileVersionsParamsWithHTTPClient(client *http.Client) *GetFileVersionsParams {
	return &GetFileVersionsParams{
		HTTPClient: client,
	}
}

/*
GetFileVersionsParams contains all the parameters to send to the API endpoint

	for the get file versions operation.

	Typically these are written to a http.Request.
*/
type GetFileVersionsParams struct {

	/* ClusterID.

	   ClusterId is the Id of the cluster used for constructing JobUid.

	   Format: int64
	*/
	ClusterID *int64

	/* ClusterIncarnationID.

	     ClusterIncarnationId is the incarnation Id of the cluster used for
	constructing JobUid.

	     Format: int64
	*/
	ClusterIncarnationID *int64

	/* EntityID.

	   EntityId is the Id of the entity where the file resides.

	   Format: int64
	*/
	EntityID *int64

	/* Filename.

	   Filename is the name of the file.
	*/
	Filename *string

	/* FromObjectSnapshotsOnly.

	     if FromObjectSnapshotsOnly is false get the file versions from the indexed
	snapshots else get it from non-indexed snapshots.
	indexed snapshots are those in which we are sure file exist and in
	non-indexed snapshots file may or may not exist.
	Default is false.
	*/
	FromObjectSnapshotsOnly *bool

	/* JobID.

	   JobId is the Id of the job that took the snapshot.

	   Format: int64
	*/
	JobID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get file versions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileVersionsParams) WithDefaults() *GetFileVersionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get file versions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileVersionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get file versions params
func (o *GetFileVersionsParams) WithTimeout(timeout time.Duration) *GetFileVersionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get file versions params
func (o *GetFileVersionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get file versions params
func (o *GetFileVersionsParams) WithContext(ctx context.Context) *GetFileVersionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get file versions params
func (o *GetFileVersionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get file versions params
func (o *GetFileVersionsParams) WithHTTPClient(client *http.Client) *GetFileVersionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get file versions params
func (o *GetFileVersionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the get file versions params
func (o *GetFileVersionsParams) WithClusterID(clusterID *int64) *GetFileVersionsParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get file versions params
func (o *GetFileVersionsParams) SetClusterID(clusterID *int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the get file versions params
func (o *GetFileVersionsParams) WithClusterIncarnationID(clusterIncarnationID *int64) *GetFileVersionsParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the get file versions params
func (o *GetFileVersionsParams) SetClusterIncarnationID(clusterIncarnationID *int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithEntityID adds the entityID to the get file versions params
func (o *GetFileVersionsParams) WithEntityID(entityID *int64) *GetFileVersionsParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the get file versions params
func (o *GetFileVersionsParams) SetEntityID(entityID *int64) {
	o.EntityID = entityID
}

// WithFilename adds the filename to the get file versions params
func (o *GetFileVersionsParams) WithFilename(filename *string) *GetFileVersionsParams {
	o.SetFilename(filename)
	return o
}

// SetFilename adds the filename to the get file versions params
func (o *GetFileVersionsParams) SetFilename(filename *string) {
	o.Filename = filename
}

// WithFromObjectSnapshotsOnly adds the fromObjectSnapshotsOnly to the get file versions params
func (o *GetFileVersionsParams) WithFromObjectSnapshotsOnly(fromObjectSnapshotsOnly *bool) *GetFileVersionsParams {
	o.SetFromObjectSnapshotsOnly(fromObjectSnapshotsOnly)
	return o
}

// SetFromObjectSnapshotsOnly adds the fromObjectSnapshotsOnly to the get file versions params
func (o *GetFileVersionsParams) SetFromObjectSnapshotsOnly(fromObjectSnapshotsOnly *bool) {
	o.FromObjectSnapshotsOnly = fromObjectSnapshotsOnly
}

// WithJobID adds the jobID to the get file versions params
func (o *GetFileVersionsParams) WithJobID(jobID *int64) *GetFileVersionsParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get file versions params
func (o *GetFileVersionsParams) SetJobID(jobID *int64) {
	o.JobID = jobID
}

// WriteToRequest writes these params to a swagger request
func (o *GetFileVersionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterID != nil {

		// query param clusterId
		var qrClusterID int64

		if o.ClusterID != nil {
			qrClusterID = *o.ClusterID
		}
		qClusterID := swag.FormatInt64(qrClusterID)
		if qClusterID != "" {

			if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
				return err
			}
		}
	}

	if o.ClusterIncarnationID != nil {

		// query param clusterIncarnationId
		var qrClusterIncarnationID int64

		if o.ClusterIncarnationID != nil {
			qrClusterIncarnationID = *o.ClusterIncarnationID
		}
		qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
		if qClusterIncarnationID != "" {

			if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
				return err
			}
		}
	}

	if o.EntityID != nil {

		// query param entityId
		var qrEntityID int64

		if o.EntityID != nil {
			qrEntityID = *o.EntityID
		}
		qEntityID := swag.FormatInt64(qrEntityID)
		if qEntityID != "" {

			if err := r.SetQueryParam("entityId", qEntityID); err != nil {
				return err
			}
		}
	}

	if o.Filename != nil {

		// query param filename
		var qrFilename string

		if o.Filename != nil {
			qrFilename = *o.Filename
		}
		qFilename := qrFilename
		if qFilename != "" {

			if err := r.SetQueryParam("filename", qFilename); err != nil {
				return err
			}
		}
	}

	if o.FromObjectSnapshotsOnly != nil {

		// query param fromObjectSnapshotsOnly
		var qrFromObjectSnapshotsOnly bool

		if o.FromObjectSnapshotsOnly != nil {
			qrFromObjectSnapshotsOnly = *o.FromObjectSnapshotsOnly
		}
		qFromObjectSnapshotsOnly := swag.FormatBool(qrFromObjectSnapshotsOnly)
		if qFromObjectSnapshotsOnly != "" {

			if err := r.SetQueryParam("fromObjectSnapshotsOnly", qFromObjectSnapshotsOnly); err != nil {
				return err
			}
		}
	}

	if o.JobID != nil {

		// query param jobId
		var qrJobID int64

		if o.JobID != nil {
			qrJobID = *o.JobID
		}
		qJobID := swag.FormatInt64(qrJobID)
		if qJobID != "" {

			if err := r.SetQueryParam("jobId", qJobID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
