// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFileRestoreInfoParams creates a new GetFileRestoreInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFileRestoreInfoParams() *GetFileRestoreInfoParams {
	return &GetFileRestoreInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFileRestoreInfoParamsWithTimeout creates a new GetFileRestoreInfoParams object
// with the ability to set a timeout on a request.
func NewGetFileRestoreInfoParamsWithTimeout(timeout time.Duration) *GetFileRestoreInfoParams {
	return &GetFileRestoreInfoParams{
		timeout: timeout,
	}
}

// NewGetFileRestoreInfoParamsWithContext creates a new GetFileRestoreInfoParams object
// with the ability to set a context for a request.
func NewGetFileRestoreInfoParamsWithContext(ctx context.Context) *GetFileRestoreInfoParams {
	return &GetFileRestoreInfoParams{
		Context: ctx,
	}
}

// NewGetFileRestoreInfoParamsWithHTTPClient creates a new GetFileRestoreInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFileRestoreInfoParamsWithHTTPClient(client *http.Client) *GetFileRestoreInfoParams {
	return &GetFileRestoreInfoParams{
		HTTPClient: client,
	}
}

/*
GetFileRestoreInfoParams contains all the parameters to send to the API endpoint

	for the get file restore info operation.

	Typically these are written to a http.Request.
*/
type GetFileRestoreInfoParams struct {

	/* ClusterID.

	   ClusterId is the Id of the cluster used for constructing JobUid.

	   Format: int64
	*/
	ClusterID *int64

	/* ClusterIncarnationID.

	     ClusterIncarnationId is the incarnation Id of the cluster used for
	constructing JobUid.

	     Format: int64
	*/
	ClusterIncarnationID *int64

	/* EntityID.

	   EntityId is the Id of the entity where the file resides.

	   Format: int64
	*/
	EntityID *int64

	/* Filenames.

	   Filenames are the names of the files.
	*/
	Filenames []string

	/* JobID.

	   JobId is the Id of the job that took the snapshot.

	   Format: int64
	*/
	JobID *int64

	/* JobInstanceID.

	   JobInstanceId is the Id of the job run that backed up the entity.

	   Format: int64
	*/
	JobInstanceID *int64

	/* JobStartTimeUsecs.

	     JobStartTimeUsecs is the start time in usecs of the job run that backed up
	the entity.

	     Format: int64
	*/
	JobStartTimeUsecs *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get file restore info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileRestoreInfoParams) WithDefaults() *GetFileRestoreInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get file restore info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileRestoreInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get file restore info params
func (o *GetFileRestoreInfoParams) WithTimeout(timeout time.Duration) *GetFileRestoreInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get file restore info params
func (o *GetFileRestoreInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get file restore info params
func (o *GetFileRestoreInfoParams) WithContext(ctx context.Context) *GetFileRestoreInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get file restore info params
func (o *GetFileRestoreInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get file restore info params
func (o *GetFileRestoreInfoParams) WithHTTPClient(client *http.Client) *GetFileRestoreInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get file restore info params
func (o *GetFileRestoreInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the get file restore info params
func (o *GetFileRestoreInfoParams) WithClusterID(clusterID *int64) *GetFileRestoreInfoParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get file restore info params
func (o *GetFileRestoreInfoParams) SetClusterID(clusterID *int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the get file restore info params
func (o *GetFileRestoreInfoParams) WithClusterIncarnationID(clusterIncarnationID *int64) *GetFileRestoreInfoParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the get file restore info params
func (o *GetFileRestoreInfoParams) SetClusterIncarnationID(clusterIncarnationID *int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithEntityID adds the entityID to the get file restore info params
func (o *GetFileRestoreInfoParams) WithEntityID(entityID *int64) *GetFileRestoreInfoParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the get file restore info params
func (o *GetFileRestoreInfoParams) SetEntityID(entityID *int64) {
	o.EntityID = entityID
}

// WithFilenames adds the filenames to the get file restore info params
func (o *GetFileRestoreInfoParams) WithFilenames(filenames []string) *GetFileRestoreInfoParams {
	o.SetFilenames(filenames)
	return o
}

// SetFilenames adds the filenames to the get file restore info params
func (o *GetFileRestoreInfoParams) SetFilenames(filenames []string) {
	o.Filenames = filenames
}

// WithJobID adds the jobID to the get file restore info params
func (o *GetFileRestoreInfoParams) WithJobID(jobID *int64) *GetFileRestoreInfoParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get file restore info params
func (o *GetFileRestoreInfoParams) SetJobID(jobID *int64) {
	o.JobID = jobID
}

// WithJobInstanceID adds the jobInstanceID to the get file restore info params
func (o *GetFileRestoreInfoParams) WithJobInstanceID(jobInstanceID *int64) *GetFileRestoreInfoParams {
	o.SetJobInstanceID(jobInstanceID)
	return o
}

// SetJobInstanceID adds the jobInstanceId to the get file restore info params
func (o *GetFileRestoreInfoParams) SetJobInstanceID(jobInstanceID *int64) {
	o.JobInstanceID = jobInstanceID
}

// WithJobStartTimeUsecs adds the jobStartTimeUsecs to the get file restore info params
func (o *GetFileRestoreInfoParams) WithJobStartTimeUsecs(jobStartTimeUsecs *int64) *GetFileRestoreInfoParams {
	o.SetJobStartTimeUsecs(jobStartTimeUsecs)
	return o
}

// SetJobStartTimeUsecs adds the jobStartTimeUsecs to the get file restore info params
func (o *GetFileRestoreInfoParams) SetJobStartTimeUsecs(jobStartTimeUsecs *int64) {
	o.JobStartTimeUsecs = jobStartTimeUsecs
}

// WriteToRequest writes these params to a swagger request
func (o *GetFileRestoreInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterID != nil {

		// query param clusterId
		var qrClusterID int64

		if o.ClusterID != nil {
			qrClusterID = *o.ClusterID
		}
		qClusterID := swag.FormatInt64(qrClusterID)
		if qClusterID != "" {

			if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
				return err
			}
		}
	}

	if o.ClusterIncarnationID != nil {

		// query param clusterIncarnationId
		var qrClusterIncarnationID int64

		if o.ClusterIncarnationID != nil {
			qrClusterIncarnationID = *o.ClusterIncarnationID
		}
		qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
		if qClusterIncarnationID != "" {

			if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
				return err
			}
		}
	}

	if o.EntityID != nil {

		// query param entityId
		var qrEntityID int64

		if o.EntityID != nil {
			qrEntityID = *o.EntityID
		}
		qEntityID := swag.FormatInt64(qrEntityID)
		if qEntityID != "" {

			if err := r.SetQueryParam("entityId", qEntityID); err != nil {
				return err
			}
		}
	}

	if o.Filenames != nil {

		// binding items for filenames
		joinedFilenames := o.bindParamFilenames(reg)

		// query array param filenames
		if err := r.SetQueryParam("filenames", joinedFilenames...); err != nil {
			return err
		}
	}

	if o.JobID != nil {

		// query param jobId
		var qrJobID int64

		if o.JobID != nil {
			qrJobID = *o.JobID
		}
		qJobID := swag.FormatInt64(qrJobID)
		if qJobID != "" {

			if err := r.SetQueryParam("jobId", qJobID); err != nil {
				return err
			}
		}
	}

	if o.JobInstanceID != nil {

		// query param jobInstanceId
		var qrJobInstanceID int64

		if o.JobInstanceID != nil {
			qrJobInstanceID = *o.JobInstanceID
		}
		qJobInstanceID := swag.FormatInt64(qrJobInstanceID)
		if qJobInstanceID != "" {

			if err := r.SetQueryParam("jobInstanceId", qJobInstanceID); err != nil {
				return err
			}
		}
	}

	if o.JobStartTimeUsecs != nil {

		// query param jobStartTimeUsecs
		var qrJobStartTimeUsecs int64

		if o.JobStartTimeUsecs != nil {
			qrJobStartTimeUsecs = *o.JobStartTimeUsecs
		}
		qJobStartTimeUsecs := swag.FormatInt64(qrJobStartTimeUsecs)
		if qJobStartTimeUsecs != "" {

			if err := r.SetQueryParam("jobStartTimeUsecs", qJobStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetFileRestoreInfo binds the parameter filenames
func (o *GetFileRestoreInfoParams) bindParamFilenames(formats strfmt.Registry) []string {
	filenamesIR := o.Filenames

	var filenamesIC []string
	for _, filenamesIIR := range filenamesIR { // explode []string

		filenamesIIV := filenamesIIR // string as string
		filenamesIC = append(filenamesIC, filenamesIIV)
	}

	// items.CollectionFormat: ""
	filenamesIS := swag.JoinByFormat(filenamesIC, "")

	return filenamesIS
}
