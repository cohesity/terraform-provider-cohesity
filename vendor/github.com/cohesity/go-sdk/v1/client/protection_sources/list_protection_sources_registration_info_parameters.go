// Code generated by go-swagger; DO NOT EDIT.

package protection_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListProtectionSourcesRegistrationInfoParams creates a new ListProtectionSourcesRegistrationInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListProtectionSourcesRegistrationInfoParams() *ListProtectionSourcesRegistrationInfoParams {
	return &ListProtectionSourcesRegistrationInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListProtectionSourcesRegistrationInfoParamsWithTimeout creates a new ListProtectionSourcesRegistrationInfoParams object
// with the ability to set a timeout on a request.
func NewListProtectionSourcesRegistrationInfoParamsWithTimeout(timeout time.Duration) *ListProtectionSourcesRegistrationInfoParams {
	return &ListProtectionSourcesRegistrationInfoParams{
		timeout: timeout,
	}
}

// NewListProtectionSourcesRegistrationInfoParamsWithContext creates a new ListProtectionSourcesRegistrationInfoParams object
// with the ability to set a context for a request.
func NewListProtectionSourcesRegistrationInfoParamsWithContext(ctx context.Context) *ListProtectionSourcesRegistrationInfoParams {
	return &ListProtectionSourcesRegistrationInfoParams{
		Context: ctx,
	}
}

// NewListProtectionSourcesRegistrationInfoParamsWithHTTPClient creates a new ListProtectionSourcesRegistrationInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewListProtectionSourcesRegistrationInfoParamsWithHTTPClient(client *http.Client) *ListProtectionSourcesRegistrationInfoParams {
	return &ListProtectionSourcesRegistrationInfoParams{
		HTTPClient: client,
	}
}

/*
ListProtectionSourcesRegistrationInfoParams contains all the parameters to send to the API endpoint

	for the list protection sources registration info operation.

	Typically these are written to a http.Request.
*/
type ListProtectionSourcesRegistrationInfoParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* EncryptionKey.

	     Key to be used to encrypt the source credential. If
	include_source_credentials is set to true this key must be specified.
	*/
	EncryptionKey *string

	/* Environments.

	     Return only Protection Sources that match the passed in environment type
	such as 'kVMware', 'kSQL', 'kView' 'kPhysical', 'kPuppeteer', 'kPure',
	'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'.
	For example, set this parameter to 'kVMware' to only return the Sources
	(and their Object subtrees) found in the 'kVMware'
	(VMware vCenter Server) environment.

	NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	*/
	Environments []string

	/* Ids.

	   Return only the registered root nodes whose Ids are given in the list.
	*/
	Ids []int64

	/* IncludeApplicationsTreeInfo.

	   Specifies whether to return applications tree info or not.
	*/
	IncludeApplicationsTreeInfo *bool

	/* IncludeEntityPermissionInfo.

	     If specified, then a list of entities with permissions assigned to them are
	returned.
	*/
	IncludeEntityPermissionInfo *bool

	/* IncludeExternalMetadata.

	     Specifies if entity external metadata should be included within the
	response to get entity hierarchy call.
	*/
	IncludeExternalMetadata *bool

	/* IncludeSourceCredentials.

	     If specified, then crednetial for the registered sources will be included.
	Credential is first encrypted with internal key and then reencrypted with
	user supplied 'encryption_key'.
	*/
	IncludeSourceCredentials *bool

	/* MaintenanceStatus.

	     Specifies the maintenance status of a source
	'UnderMaintenance' indicates the source is currently under maintenance.
	'ScheduledMaintenance' indicates the source is scheduled for maintenance.
	'NotConfigured' indicates maintenance is not configured on the source.
	*/
	MaintenanceStatus *string

	/* PruneNonCriticalInfo.

	     Specifies whether to prune non critical info within entities.
	Incase of VMs, virtual disk information will be pruned.
	Incase of Office365, metadata about user entities will be pruned.
	This can be used to limit the size of the response by caller.
	*/
	PruneNonCriticalInfo *bool

	/* RequestInitiatorType.

	     Specifies the type of the request. Possible values are UIUser and UIAuto,
	which means the request is triggered by user or is an auto refresh
	request. Services like magneto will use this to determine the priority
	of the requests, so that it can more intelligently handle overload
	situations by prioritizing higher priority requests.
	*/
	RequestInitiatorType *string

	/* Sids.

	   Filter the registered root nodes for the sids given in the list.
	*/
	Sids []string

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	/* UseCachedData.

	     Specifies whether we can serve the GET request to the read replica cache.
	setting this to true ensures that the API request is served
	to the read replica. setting this to false will serve the request to
	the master.
	*/
	UseCachedData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list protection sources registration info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProtectionSourcesRegistrationInfoParams) WithDefaults() *ListProtectionSourcesRegistrationInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list protection sources registration info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProtectionSourcesRegistrationInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithTimeout(timeout time.Duration) *ListProtectionSourcesRegistrationInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithContext(ctx context.Context) *ListProtectionSourcesRegistrationInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithHTTPClient(client *http.Client) *ListProtectionSourcesRegistrationInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *ListProtectionSourcesRegistrationInfoParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithEncryptionKey adds the encryptionKey to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithEncryptionKey(encryptionKey *string) *ListProtectionSourcesRegistrationInfoParams {
	o.SetEncryptionKey(encryptionKey)
	return o
}

// SetEncryptionKey adds the encryptionKey to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetEncryptionKey(encryptionKey *string) {
	o.EncryptionKey = encryptionKey
}

// WithEnvironments adds the environments to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithEnvironments(environments []string) *ListProtectionSourcesRegistrationInfoParams {
	o.SetEnvironments(environments)
	return o
}

// SetEnvironments adds the environments to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetEnvironments(environments []string) {
	o.Environments = environments
}

// WithIds adds the ids to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithIds(ids []int64) *ListProtectionSourcesRegistrationInfoParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithIncludeApplicationsTreeInfo adds the includeApplicationsTreeInfo to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithIncludeApplicationsTreeInfo(includeApplicationsTreeInfo *bool) *ListProtectionSourcesRegistrationInfoParams {
	o.SetIncludeApplicationsTreeInfo(includeApplicationsTreeInfo)
	return o
}

// SetIncludeApplicationsTreeInfo adds the includeApplicationsTreeInfo to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetIncludeApplicationsTreeInfo(includeApplicationsTreeInfo *bool) {
	o.IncludeApplicationsTreeInfo = includeApplicationsTreeInfo
}

// WithIncludeEntityPermissionInfo adds the includeEntityPermissionInfo to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithIncludeEntityPermissionInfo(includeEntityPermissionInfo *bool) *ListProtectionSourcesRegistrationInfoParams {
	o.SetIncludeEntityPermissionInfo(includeEntityPermissionInfo)
	return o
}

// SetIncludeEntityPermissionInfo adds the includeEntityPermissionInfo to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetIncludeEntityPermissionInfo(includeEntityPermissionInfo *bool) {
	o.IncludeEntityPermissionInfo = includeEntityPermissionInfo
}

// WithIncludeExternalMetadata adds the includeExternalMetadata to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithIncludeExternalMetadata(includeExternalMetadata *bool) *ListProtectionSourcesRegistrationInfoParams {
	o.SetIncludeExternalMetadata(includeExternalMetadata)
	return o
}

// SetIncludeExternalMetadata adds the includeExternalMetadata to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetIncludeExternalMetadata(includeExternalMetadata *bool) {
	o.IncludeExternalMetadata = includeExternalMetadata
}

// WithIncludeSourceCredentials adds the includeSourceCredentials to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithIncludeSourceCredentials(includeSourceCredentials *bool) *ListProtectionSourcesRegistrationInfoParams {
	o.SetIncludeSourceCredentials(includeSourceCredentials)
	return o
}

// SetIncludeSourceCredentials adds the includeSourceCredentials to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetIncludeSourceCredentials(includeSourceCredentials *bool) {
	o.IncludeSourceCredentials = includeSourceCredentials
}

// WithMaintenanceStatus adds the maintenanceStatus to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithMaintenanceStatus(maintenanceStatus *string) *ListProtectionSourcesRegistrationInfoParams {
	o.SetMaintenanceStatus(maintenanceStatus)
	return o
}

// SetMaintenanceStatus adds the maintenanceStatus to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetMaintenanceStatus(maintenanceStatus *string) {
	o.MaintenanceStatus = maintenanceStatus
}

// WithPruneNonCriticalInfo adds the pruneNonCriticalInfo to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithPruneNonCriticalInfo(pruneNonCriticalInfo *bool) *ListProtectionSourcesRegistrationInfoParams {
	o.SetPruneNonCriticalInfo(pruneNonCriticalInfo)
	return o
}

// SetPruneNonCriticalInfo adds the pruneNonCriticalInfo to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetPruneNonCriticalInfo(pruneNonCriticalInfo *bool) {
	o.PruneNonCriticalInfo = pruneNonCriticalInfo
}

// WithRequestInitiatorType adds the requestInitiatorType to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithRequestInitiatorType(requestInitiatorType *string) *ListProtectionSourcesRegistrationInfoParams {
	o.SetRequestInitiatorType(requestInitiatorType)
	return o
}

// SetRequestInitiatorType adds the requestInitiatorType to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetRequestInitiatorType(requestInitiatorType *string) {
	o.RequestInitiatorType = requestInitiatorType
}

// WithSids adds the sids to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithSids(sids []string) *ListProtectionSourcesRegistrationInfoParams {
	o.SetSids(sids)
	return o
}

// SetSids adds the sids to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetSids(sids []string) {
	o.Sids = sids
}

// WithTenantIds adds the tenantIds to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithTenantIds(tenantIds []string) *ListProtectionSourcesRegistrationInfoParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithUseCachedData adds the useCachedData to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) WithUseCachedData(useCachedData *bool) *ListProtectionSourcesRegistrationInfoParams {
	o.SetUseCachedData(useCachedData)
	return o
}

// SetUseCachedData adds the useCachedData to the list protection sources registration info params
func (o *ListProtectionSourcesRegistrationInfoParams) SetUseCachedData(useCachedData *bool) {
	o.UseCachedData = useCachedData
}

// WriteToRequest writes these params to a swagger request
func (o *ListProtectionSourcesRegistrationInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.EncryptionKey != nil {

		// query param encryptionKey
		var qrEncryptionKey string

		if o.EncryptionKey != nil {
			qrEncryptionKey = *o.EncryptionKey
		}
		qEncryptionKey := qrEncryptionKey
		if qEncryptionKey != "" {

			if err := r.SetQueryParam("encryptionKey", qEncryptionKey); err != nil {
				return err
			}
		}
	}

	if o.Environments != nil {

		// binding items for environments
		joinedEnvironments := o.bindParamEnvironments(reg)

		// query array param environments
		if err := r.SetQueryParam("environments", joinedEnvironments...); err != nil {
			return err
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IncludeApplicationsTreeInfo != nil {

		// query param includeApplicationsTreeInfo
		var qrIncludeApplicationsTreeInfo bool

		if o.IncludeApplicationsTreeInfo != nil {
			qrIncludeApplicationsTreeInfo = *o.IncludeApplicationsTreeInfo
		}
		qIncludeApplicationsTreeInfo := swag.FormatBool(qrIncludeApplicationsTreeInfo)
		if qIncludeApplicationsTreeInfo != "" {

			if err := r.SetQueryParam("includeApplicationsTreeInfo", qIncludeApplicationsTreeInfo); err != nil {
				return err
			}
		}
	}

	if o.IncludeEntityPermissionInfo != nil {

		// query param includeEntityPermissionInfo
		var qrIncludeEntityPermissionInfo bool

		if o.IncludeEntityPermissionInfo != nil {
			qrIncludeEntityPermissionInfo = *o.IncludeEntityPermissionInfo
		}
		qIncludeEntityPermissionInfo := swag.FormatBool(qrIncludeEntityPermissionInfo)
		if qIncludeEntityPermissionInfo != "" {

			if err := r.SetQueryParam("includeEntityPermissionInfo", qIncludeEntityPermissionInfo); err != nil {
				return err
			}
		}
	}

	if o.IncludeExternalMetadata != nil {

		// query param includeExternalMetadata
		var qrIncludeExternalMetadata bool

		if o.IncludeExternalMetadata != nil {
			qrIncludeExternalMetadata = *o.IncludeExternalMetadata
		}
		qIncludeExternalMetadata := swag.FormatBool(qrIncludeExternalMetadata)
		if qIncludeExternalMetadata != "" {

			if err := r.SetQueryParam("includeExternalMetadata", qIncludeExternalMetadata); err != nil {
				return err
			}
		}
	}

	if o.IncludeSourceCredentials != nil {

		// query param includeSourceCredentials
		var qrIncludeSourceCredentials bool

		if o.IncludeSourceCredentials != nil {
			qrIncludeSourceCredentials = *o.IncludeSourceCredentials
		}
		qIncludeSourceCredentials := swag.FormatBool(qrIncludeSourceCredentials)
		if qIncludeSourceCredentials != "" {

			if err := r.SetQueryParam("includeSourceCredentials", qIncludeSourceCredentials); err != nil {
				return err
			}
		}
	}

	if o.MaintenanceStatus != nil {

		// query param maintenanceStatus
		var qrMaintenanceStatus string

		if o.MaintenanceStatus != nil {
			qrMaintenanceStatus = *o.MaintenanceStatus
		}
		qMaintenanceStatus := qrMaintenanceStatus
		if qMaintenanceStatus != "" {

			if err := r.SetQueryParam("maintenanceStatus", qMaintenanceStatus); err != nil {
				return err
			}
		}
	}

	if o.PruneNonCriticalInfo != nil {

		// query param pruneNonCriticalInfo
		var qrPruneNonCriticalInfo bool

		if o.PruneNonCriticalInfo != nil {
			qrPruneNonCriticalInfo = *o.PruneNonCriticalInfo
		}
		qPruneNonCriticalInfo := swag.FormatBool(qrPruneNonCriticalInfo)
		if qPruneNonCriticalInfo != "" {

			if err := r.SetQueryParam("pruneNonCriticalInfo", qPruneNonCriticalInfo); err != nil {
				return err
			}
		}
	}

	if o.RequestInitiatorType != nil {

		// header param requestInitiatorType
		if err := r.SetHeaderParam("requestInitiatorType", *o.RequestInitiatorType); err != nil {
			return err
		}
	}

	if o.Sids != nil {

		// binding items for sids
		joinedSids := o.bindParamSids(reg)

		// query array param sids
		if err := r.SetQueryParam("sids", joinedSids...); err != nil {
			return err
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.UseCachedData != nil {

		// query param useCachedData
		var qrUseCachedData bool

		if o.UseCachedData != nil {
			qrUseCachedData = *o.UseCachedData
		}
		qUseCachedData := swag.FormatBool(qrUseCachedData)
		if qUseCachedData != "" {

			if err := r.SetQueryParam("useCachedData", qUseCachedData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListProtectionSourcesRegistrationInfo binds the parameter environments
func (o *ListProtectionSourcesRegistrationInfoParams) bindParamEnvironments(formats strfmt.Registry) []string {
	environmentsIR := o.Environments

	var environmentsIC []string
	for _, environmentsIIR := range environmentsIR { // explode []string

		environmentsIIV := environmentsIIR // string as string
		environmentsIC = append(environmentsIC, environmentsIIV)
	}

	// items.CollectionFormat: ""
	environmentsIS := swag.JoinByFormat(environmentsIC, "")

	return environmentsIS
}

// bindParamListProtectionSourcesRegistrationInfo binds the parameter ids
func (o *ListProtectionSourcesRegistrationInfoParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamListProtectionSourcesRegistrationInfo binds the parameter sids
func (o *ListProtectionSourcesRegistrationInfoParams) bindParamSids(formats strfmt.Registry) []string {
	sidsIR := o.Sids

	var sidsIC []string
	for _, sidsIIR := range sidsIR { // explode []string

		sidsIIV := sidsIIR // string as string
		sidsIC = append(sidsIC, sidsIIV)
	}

	// items.CollectionFormat: ""
	sidsIS := swag.JoinByFormat(sidsIC, "")

	return sidsIS
}

// bindParamListProtectionSourcesRegistrationInfo binds the parameter tenantIds
func (o *ListProtectionSourcesRegistrationInfoParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
