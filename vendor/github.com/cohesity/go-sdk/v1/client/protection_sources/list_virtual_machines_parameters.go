// Code generated by go-swagger; DO NOT EDIT.

package protection_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListVirtualMachinesParams creates a new ListVirtualMachinesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListVirtualMachinesParams() *ListVirtualMachinesParams {
	return &ListVirtualMachinesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListVirtualMachinesParamsWithTimeout creates a new ListVirtualMachinesParams object
// with the ability to set a timeout on a request.
func NewListVirtualMachinesParamsWithTimeout(timeout time.Duration) *ListVirtualMachinesParams {
	return &ListVirtualMachinesParams{
		timeout: timeout,
	}
}

// NewListVirtualMachinesParamsWithContext creates a new ListVirtualMachinesParams object
// with the ability to set a context for a request.
func NewListVirtualMachinesParamsWithContext(ctx context.Context) *ListVirtualMachinesParams {
	return &ListVirtualMachinesParams{
		Context: ctx,
	}
}

// NewListVirtualMachinesParamsWithHTTPClient creates a new ListVirtualMachinesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListVirtualMachinesParamsWithHTTPClient(client *http.Client) *ListVirtualMachinesParams {
	return &ListVirtualMachinesParams{
		HTTPClient: client,
	}
}

/*
ListVirtualMachinesParams contains all the parameters to send to the API endpoint

	for the list virtual machines operation.

	Typically these are written to a http.Request.
*/
type ListVirtualMachinesParams struct {

	/* Names.

	     Limit the returned VMs to those that exactly match the passed in VM name.
	To match multiple VM names, specify multiple "names" parameters that each
	specify a single VM name.
	The string must exactly match the passed in VM name and wild cards are
	not supported.
	*/
	Names []string

	/* Protected.

	     Limit the returned VMs to those that have been protected
	by a Protection Job.
	By default, both protected and unprotected VMs are returned.
	*/
	Protected *bool

	/* PruneNonCriticalInfo.

	     Specifies whether to prune non-critical info within entities.
	In case of VMs, virtual disk information will be pruned.
	*/
	PruneNonCriticalInfo *bool

	/* Uuids.

	   Limit the returned VMs to those that exactly match the passed in UUIDs.
	*/
	Uuids []string

	/* VCenterID.

	     Limit the VMs returned to the set of VMs found in a specific
	vCenter Server.
	Pass in the root Protection Source id for the vCenter Server
	to search for VMs.

	     Format: int64
	*/
	VCenterID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list virtual machines params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListVirtualMachinesParams) WithDefaults() *ListVirtualMachinesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list virtual machines params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListVirtualMachinesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list virtual machines params
func (o *ListVirtualMachinesParams) WithTimeout(timeout time.Duration) *ListVirtualMachinesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list virtual machines params
func (o *ListVirtualMachinesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list virtual machines params
func (o *ListVirtualMachinesParams) WithContext(ctx context.Context) *ListVirtualMachinesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list virtual machines params
func (o *ListVirtualMachinesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list virtual machines params
func (o *ListVirtualMachinesParams) WithHTTPClient(client *http.Client) *ListVirtualMachinesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list virtual machines params
func (o *ListVirtualMachinesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNames adds the names to the list virtual machines params
func (o *ListVirtualMachinesParams) WithNames(names []string) *ListVirtualMachinesParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the list virtual machines params
func (o *ListVirtualMachinesParams) SetNames(names []string) {
	o.Names = names
}

// WithProtected adds the protected to the list virtual machines params
func (o *ListVirtualMachinesParams) WithProtected(protected *bool) *ListVirtualMachinesParams {
	o.SetProtected(protected)
	return o
}

// SetProtected adds the protected to the list virtual machines params
func (o *ListVirtualMachinesParams) SetProtected(protected *bool) {
	o.Protected = protected
}

// WithPruneNonCriticalInfo adds the pruneNonCriticalInfo to the list virtual machines params
func (o *ListVirtualMachinesParams) WithPruneNonCriticalInfo(pruneNonCriticalInfo *bool) *ListVirtualMachinesParams {
	o.SetPruneNonCriticalInfo(pruneNonCriticalInfo)
	return o
}

// SetPruneNonCriticalInfo adds the pruneNonCriticalInfo to the list virtual machines params
func (o *ListVirtualMachinesParams) SetPruneNonCriticalInfo(pruneNonCriticalInfo *bool) {
	o.PruneNonCriticalInfo = pruneNonCriticalInfo
}

// WithUuids adds the uuids to the list virtual machines params
func (o *ListVirtualMachinesParams) WithUuids(uuids []string) *ListVirtualMachinesParams {
	o.SetUuids(uuids)
	return o
}

// SetUuids adds the uuids to the list virtual machines params
func (o *ListVirtualMachinesParams) SetUuids(uuids []string) {
	o.Uuids = uuids
}

// WithVCenterID adds the vCenterID to the list virtual machines params
func (o *ListVirtualMachinesParams) WithVCenterID(vCenterID *int64) *ListVirtualMachinesParams {
	o.SetVCenterID(vCenterID)
	return o
}

// SetVCenterID adds the vCenterId to the list virtual machines params
func (o *ListVirtualMachinesParams) SetVCenterID(vCenterID *int64) {
	o.VCenterID = vCenterID
}

// WriteToRequest writes these params to a swagger request
func (o *ListVirtualMachinesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Names != nil {

		// binding items for names
		joinedNames := o.bindParamNames(reg)

		// query array param names
		if err := r.SetQueryParam("names", joinedNames...); err != nil {
			return err
		}
	}

	if o.Protected != nil {

		// query param protected
		var qrProtected bool

		if o.Protected != nil {
			qrProtected = *o.Protected
		}
		qProtected := swag.FormatBool(qrProtected)
		if qProtected != "" {

			if err := r.SetQueryParam("protected", qProtected); err != nil {
				return err
			}
		}
	}

	if o.PruneNonCriticalInfo != nil {

		// query param pruneNonCriticalInfo
		var qrPruneNonCriticalInfo bool

		if o.PruneNonCriticalInfo != nil {
			qrPruneNonCriticalInfo = *o.PruneNonCriticalInfo
		}
		qPruneNonCriticalInfo := swag.FormatBool(qrPruneNonCriticalInfo)
		if qPruneNonCriticalInfo != "" {

			if err := r.SetQueryParam("pruneNonCriticalInfo", qPruneNonCriticalInfo); err != nil {
				return err
			}
		}
	}

	if o.Uuids != nil {

		// binding items for uuids
		joinedUuids := o.bindParamUuids(reg)

		// query array param uuids
		if err := r.SetQueryParam("uuids", joinedUuids...); err != nil {
			return err
		}
	}

	if o.VCenterID != nil {

		// query param vCenterId
		var qrVCenterID int64

		if o.VCenterID != nil {
			qrVCenterID = *o.VCenterID
		}
		qVCenterID := swag.FormatInt64(qrVCenterID)
		if qVCenterID != "" {

			if err := r.SetQueryParam("vCenterId", qVCenterID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListVirtualMachines binds the parameter names
func (o *ListVirtualMachinesParams) bindParamNames(formats strfmt.Registry) []string {
	namesIR := o.Names

	var namesIC []string
	for _, namesIIR := range namesIR { // explode []string

		namesIIV := namesIIR // string as string
		namesIC = append(namesIC, namesIIV)
	}

	// items.CollectionFormat: ""
	namesIS := swag.JoinByFormat(namesIC, "")

	return namesIS
}

// bindParamListVirtualMachines binds the parameter uuids
func (o *ListVirtualMachinesParams) bindParamUuids(formats strfmt.Registry) []string {
	uuidsIR := o.Uuids

	var uuidsIC []string
	for _, uuidsIIR := range uuidsIR { // explode []string

		uuidsIIV := uuidsIIR // string as string
		uuidsIC = append(uuidsIC, uuidsIIV)
	}

	// items.CollectionFormat: ""
	uuidsIS := swag.JoinByFormat(uuidsIC, "")

	return uuidsIS
}
