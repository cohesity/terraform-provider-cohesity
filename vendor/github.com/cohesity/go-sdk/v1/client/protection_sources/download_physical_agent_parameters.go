// Code generated by go-swagger; DO NOT EDIT.

package protection_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDownloadPhysicalAgentParams creates a new DownloadPhysicalAgentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDownloadPhysicalAgentParams() *DownloadPhysicalAgentParams {
	return &DownloadPhysicalAgentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDownloadPhysicalAgentParamsWithTimeout creates a new DownloadPhysicalAgentParams object
// with the ability to set a timeout on a request.
func NewDownloadPhysicalAgentParamsWithTimeout(timeout time.Duration) *DownloadPhysicalAgentParams {
	return &DownloadPhysicalAgentParams{
		timeout: timeout,
	}
}

// NewDownloadPhysicalAgentParamsWithContext creates a new DownloadPhysicalAgentParams object
// with the ability to set a context for a request.
func NewDownloadPhysicalAgentParamsWithContext(ctx context.Context) *DownloadPhysicalAgentParams {
	return &DownloadPhysicalAgentParams{
		Context: ctx,
	}
}

// NewDownloadPhysicalAgentParamsWithHTTPClient creates a new DownloadPhysicalAgentParams object
// with the ability to set a custom HTTPClient for a request.
func NewDownloadPhysicalAgentParamsWithHTTPClient(client *http.Client) *DownloadPhysicalAgentParams {
	return &DownloadPhysicalAgentParams{
		HTTPClient: client,
	}
}

/*
DownloadPhysicalAgentParams contains all the parameters to send to the API endpoint

	for the download physical agent operation.

	Typically these are written to a http.Request.
*/
type DownloadPhysicalAgentParams struct {

	/* AgentType.

	     Specifies agent type. Can be "kGo" for go agent and "kJava"
	for java agent and "kCpp" for c++ agent.
	'kCpp' indicates a c++ agent.
	'kJava' indicates a java agent.
	'kGo' indicates a go agent.
	'kLegacy' indicates a go agent.
	*/
	AgentType *string

	/* HostOSType.

	     Specifies the OS type for which user wants to download the
	physical agent/plugin.
	'kLinux' indicates the Linux operating system.
	'kWindows' indicates the Microsoft Windows operating system.
	'kAix' indicates the IBM AIX operating system.
	'kSolaris' indicates the Oracle Solaris operating system.
	'kSapHana' indicates the Sap Hana database system developed by SAP SE.
	'kSapOracle' indicates the Sap Oracle database system developed by SAP SE.
	'kCockroachDB' indicates the CockroachDB database system.
	'kMySQL' indicates the MySQL database system.
	'kSapSybase' indicates the SapSybase database system.
	'kSapMaxDB' indicates the SapMaxDB database system.
	'kSapSybaseIQ' indicates the SapSybaseIQ database system.
	'kDB2' indicates the DB2 database system.
	'kSapASE' indicates the SapASE database system.
	'kMariaDB' indicates the MariaDB database system.
	'kPostgreSQL' indicates the PostgreSQL database system.
	'kHPUX' indicates the HPUX database system.
	'kVOS' indicates the VOS database system.
	'kOther' indicates the other types of operating system.
	*/
	HostOSType *string

	/* HostType.

	     Specifies the host type for which user wants to download the
	physical agent.
	'kLinux' indicates the Linux operating system.
	'kWindows' indicates the Microsoft Windows operating system.
	'kAix' indicates the IBM AIX operating system.
	'kSolaris' indicates the Oracle Solaris operating system.
	'kSapHana' indicates the Sap Hana database system developed by SAP SE.
	'kSapOracle' indicates the Sap Oracle database system developed by SAP SE.
	'kCockroachDB' indicates the CockroachDB database system.
	'kMySQL' indicates the MySQL database system.
	'kSapSybase' indicates the SapSybase database system.
	'kSapMaxDB' indicates the SapMaxDB database system.
	'kSapSybaseIQ' indicates the SapSybaseIQ database system.
	'kDB2' indicates the DB2 database system.
	'kSapASE' indicates the SapASE database system.
	'kMariaDB' indicates the MariaDB database system.
	'kPostgreSQL' indicates the PostgreSQL database system.
	'kHPUX' indicates the HPUX database system.
	'kVOS' indicates the VOS database system.
	'kOther' indicates the other types of operating system.
	*/
	HostType string

	/* PkgType.

	     Specifies the Linux installer package type applicable only to Linux
	OS and the value can be any of ("kScript","kRPM", "kSuseRPM", "kDEB")
	'kScript' indicates a script based agent installer.
	'kRPM' indicates a RPM agent installer.
	'kSuseRPM' indicates a Open Suse RPM installer.
	'kDEB' indicates a Debian agent installer.
	'kPowerPCRPM' indicates a Power PC RPM installer.
	*/
	PkgType *string

	/* SolarisPkgType.

	     Specifies the Solaris installer package type applicable only to Solaris
	OS and the value can be any of ("kSolaris10x86","kSolaris10Sparc",
	"kSolaris11x86", "kSolaris11Sparc")
	'kSolaris10x86' indicates Solaris OS version 10 and x86 architecture.
	'kSolaris10Sparc' indicates Solaris OS version 10 and Sparc architecture.
	'kSolaris11x86' indicates Solaris OS version 11 and x86 architecture.
	'kSolaris11Sparc' indicates Solaris OS version 11 and Sparc architecture.
	*/
	SolarisPkgType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the download physical agent params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadPhysicalAgentParams) WithDefaults() *DownloadPhysicalAgentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the download physical agent params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadPhysicalAgentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the download physical agent params
func (o *DownloadPhysicalAgentParams) WithTimeout(timeout time.Duration) *DownloadPhysicalAgentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the download physical agent params
func (o *DownloadPhysicalAgentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the download physical agent params
func (o *DownloadPhysicalAgentParams) WithContext(ctx context.Context) *DownloadPhysicalAgentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the download physical agent params
func (o *DownloadPhysicalAgentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the download physical agent params
func (o *DownloadPhysicalAgentParams) WithHTTPClient(client *http.Client) *DownloadPhysicalAgentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the download physical agent params
func (o *DownloadPhysicalAgentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAgentType adds the agentType to the download physical agent params
func (o *DownloadPhysicalAgentParams) WithAgentType(agentType *string) *DownloadPhysicalAgentParams {
	o.SetAgentType(agentType)
	return o
}

// SetAgentType adds the agentType to the download physical agent params
func (o *DownloadPhysicalAgentParams) SetAgentType(agentType *string) {
	o.AgentType = agentType
}

// WithHostOSType adds the hostOSType to the download physical agent params
func (o *DownloadPhysicalAgentParams) WithHostOSType(hostOSType *string) *DownloadPhysicalAgentParams {
	o.SetHostOSType(hostOSType)
	return o
}

// SetHostOSType adds the hostOSType to the download physical agent params
func (o *DownloadPhysicalAgentParams) SetHostOSType(hostOSType *string) {
	o.HostOSType = hostOSType
}

// WithHostType adds the hostType to the download physical agent params
func (o *DownloadPhysicalAgentParams) WithHostType(hostType string) *DownloadPhysicalAgentParams {
	o.SetHostType(hostType)
	return o
}

// SetHostType adds the hostType to the download physical agent params
func (o *DownloadPhysicalAgentParams) SetHostType(hostType string) {
	o.HostType = hostType
}

// WithPkgType adds the pkgType to the download physical agent params
func (o *DownloadPhysicalAgentParams) WithPkgType(pkgType *string) *DownloadPhysicalAgentParams {
	o.SetPkgType(pkgType)
	return o
}

// SetPkgType adds the pkgType to the download physical agent params
func (o *DownloadPhysicalAgentParams) SetPkgType(pkgType *string) {
	o.PkgType = pkgType
}

// WithSolarisPkgType adds the solarisPkgType to the download physical agent params
func (o *DownloadPhysicalAgentParams) WithSolarisPkgType(solarisPkgType *string) *DownloadPhysicalAgentParams {
	o.SetSolarisPkgType(solarisPkgType)
	return o
}

// SetSolarisPkgType adds the solarisPkgType to the download physical agent params
func (o *DownloadPhysicalAgentParams) SetSolarisPkgType(solarisPkgType *string) {
	o.SolarisPkgType = solarisPkgType
}

// WriteToRequest writes these params to a swagger request
func (o *DownloadPhysicalAgentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AgentType != nil {

		// query param agentType
		var qrAgentType string

		if o.AgentType != nil {
			qrAgentType = *o.AgentType
		}
		qAgentType := qrAgentType
		if qAgentType != "" {

			if err := r.SetQueryParam("agentType", qAgentType); err != nil {
				return err
			}
		}
	}

	if o.HostOSType != nil {

		// query param hostOSType
		var qrHostOSType string

		if o.HostOSType != nil {
			qrHostOSType = *o.HostOSType
		}
		qHostOSType := qrHostOSType
		if qHostOSType != "" {

			if err := r.SetQueryParam("hostOSType", qHostOSType); err != nil {
				return err
			}
		}
	}

	// query param hostType
	qrHostType := o.HostType
	qHostType := qrHostType
	if qHostType != "" {

		if err := r.SetQueryParam("hostType", qHostType); err != nil {
			return err
		}
	}

	if o.PkgType != nil {

		// query param pkgType
		var qrPkgType string

		if o.PkgType != nil {
			qrPkgType = *o.PkgType
		}
		qPkgType := qrPkgType
		if qPkgType != "" {

			if err := r.SetQueryParam("pkgType", qPkgType); err != nil {
				return err
			}
		}
	}

	if o.SolarisPkgType != nil {

		// query param solarisPkgType
		var qrSolarisPkgType string

		if o.SolarisPkgType != nil {
			qrSolarisPkgType = *o.SolarisPkgType
		}
		qSolarisPkgType := qrSolarisPkgType
		if qSolarisPkgType != "" {

			if err := r.SetQueryParam("solarisPkgType", qSolarisPkgType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
