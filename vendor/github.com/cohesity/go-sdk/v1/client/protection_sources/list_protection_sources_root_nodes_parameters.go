// Code generated by go-swagger; DO NOT EDIT.

package protection_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListProtectionSourcesRootNodesParams creates a new ListProtectionSourcesRootNodesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListProtectionSourcesRootNodesParams() *ListProtectionSourcesRootNodesParams {
	return &ListProtectionSourcesRootNodesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListProtectionSourcesRootNodesParamsWithTimeout creates a new ListProtectionSourcesRootNodesParams object
// with the ability to set a timeout on a request.
func NewListProtectionSourcesRootNodesParamsWithTimeout(timeout time.Duration) *ListProtectionSourcesRootNodesParams {
	return &ListProtectionSourcesRootNodesParams{
		timeout: timeout,
	}
}

// NewListProtectionSourcesRootNodesParamsWithContext creates a new ListProtectionSourcesRootNodesParams object
// with the ability to set a context for a request.
func NewListProtectionSourcesRootNodesParamsWithContext(ctx context.Context) *ListProtectionSourcesRootNodesParams {
	return &ListProtectionSourcesRootNodesParams{
		Context: ctx,
	}
}

// NewListProtectionSourcesRootNodesParamsWithHTTPClient creates a new ListProtectionSourcesRootNodesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListProtectionSourcesRootNodesParamsWithHTTPClient(client *http.Client) *ListProtectionSourcesRootNodesParams {
	return &ListProtectionSourcesRootNodesParams{
		HTTPClient: client,
	}
}

/*
ListProtectionSourcesRootNodesParams contains all the parameters to send to the API endpoint

	for the list protection sources root nodes operation.

	Typically these are written to a http.Request.
*/
type ListProtectionSourcesRootNodesParams struct {

	/* Environment.

	     This field is deprecated. Use environments instead.
	deprecated: true
	*/
	Environment *string

	/* Environments.

	     Return only the root Protection Sources that match the passed in
	environment type such as 'kVMware', 'kSQL', 'kView', 'kPuppeteer',
	'kPhysical', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis'
	'kAzure'.
	For example, set this parameter to 'kVMware' to
	only return the root Protection Sources found in the 'kVMware'
	(VMware vCenter) environment. In addition, the registration
	information for each Source is returned.

	NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	*/
	Environments []string

	/* ID.

	   Return the registration information for the Protection Source id.

	   Format: int64
	*/
	ID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list protection sources root nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProtectionSourcesRootNodesParams) WithDefaults() *ListProtectionSourcesRootNodesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list protection sources root nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProtectionSourcesRootNodesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) WithTimeout(timeout time.Duration) *ListProtectionSourcesRootNodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) WithContext(ctx context.Context) *ListProtectionSourcesRootNodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) WithHTTPClient(client *http.Client) *ListProtectionSourcesRootNodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironment adds the environment to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) WithEnvironment(environment *string) *ListProtectionSourcesRootNodesParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithEnvironments adds the environments to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) WithEnvironments(environments []string) *ListProtectionSourcesRootNodesParams {
	o.SetEnvironments(environments)
	return o
}

// SetEnvironments adds the environments to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) SetEnvironments(environments []string) {
	o.Environments = environments
}

// WithID adds the id to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) WithID(id *int64) *ListProtectionSourcesRootNodesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the list protection sources root nodes params
func (o *ListProtectionSourcesRootNodesParams) SetID(id *int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *ListProtectionSourcesRootNodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string

		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {

			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}
	}

	if o.Environments != nil {

		// binding items for environments
		joinedEnvironments := o.bindParamEnvironments(reg)

		// query array param environments
		if err := r.SetQueryParam("environments", joinedEnvironments...); err != nil {
			return err
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListProtectionSourcesRootNodes binds the parameter environments
func (o *ListProtectionSourcesRootNodesParams) bindParamEnvironments(formats strfmt.Registry) []string {
	environmentsIR := o.Environments

	var environmentsIC []string
	for _, environmentsIIR := range environmentsIR { // explode []string

		environmentsIIV := environmentsIIR // string as string
		environmentsIC = append(environmentsIC, environmentsIIV)
	}

	// items.CollectionFormat: ""
	environmentsIS := swag.JoinByFormat(environmentsIC, "")

	return environmentsIS
}
