// Code generated by go-swagger; DO NOT EDIT.

package protection_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListApplicationServersParams creates a new ListApplicationServersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListApplicationServersParams() *ListApplicationServersParams {
	return &ListApplicationServersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListApplicationServersParamsWithTimeout creates a new ListApplicationServersParams object
// with the ability to set a timeout on a request.
func NewListApplicationServersParamsWithTimeout(timeout time.Duration) *ListApplicationServersParams {
	return &ListApplicationServersParams{
		timeout: timeout,
	}
}

// NewListApplicationServersParamsWithContext creates a new ListApplicationServersParams object
// with the ability to set a context for a request.
func NewListApplicationServersParamsWithContext(ctx context.Context) *ListApplicationServersParams {
	return &ListApplicationServersParams{
		Context: ctx,
	}
}

// NewListApplicationServersParamsWithHTTPClient creates a new ListApplicationServersParams object
// with the ability to set a custom HTTPClient for a request.
func NewListApplicationServersParamsWithHTTPClient(client *http.Client) *ListApplicationServersParams {
	return &ListApplicationServersParams{
		HTTPClient: client,
	}
}

/*
ListApplicationServersParams contains all the parameters to send to the API endpoint

	for the list application servers operation.

	Typically these are written to a http.Request.
*/
type ListApplicationServersParams struct {

	/* Application.

	     Specifies the application such as 'kSQL', 'kExchange' running on the
	Protection Source.
	overrideDescription: true
	Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	'kVMware' indicates the VMware Protection Source environment.
	'kHyperV' indicates the HyperV Protection Source environment.
	'kSQL' indicates the SQL Protection Source environment.
	'kView' indicates the View Protection Source environment.
	'kPuppeteer' indicates the Cohesity's Remote Adapter.
	'kPhysical' indicates the physical Protection Source environment.
	'kPure' indicates the Pure Storage Protection Source environment.
	'kNimble' indicates the Nimble Storage Protection Source environment.
	'kAzure' indicates the Microsoft's Azure Protection Source environment.
	'kNetapp' indicates the Netapp Protection Source environment.
	'kAgent' indicates the Agent Protection Source environment.
	'kGenericNas' indicates the Generic Network Attached Storage Protection
	Source environment.
	'kAcropolis' indicates the Acropolis Protection Source environment.
	'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	'kGPFS' indicates IBM's GPFS Protection Source environment.
	'kKVM' indicates the KVM Protection Source environment.
	'kAWS' indicates the AWS Protection Source environment.
	'kExchange' indicates the Exchange Protection Source environment.
	'kHyperVVSS' indicates the HyperV VSS Protection Source
	environment.
	'kOracle' indicates the Oracle Protection Source environment.
	'kGCP' indicates the Google Cloud Platform Protection Source environment.
	'kFlashBlade' indicates the Flash Blade Protection Source environment.
	'kAWSNative' indicates the AWS Native Protection Source environment.
	'kO365' indicates the Office 365 Protection Source environment.
	'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	'kGCPNative' indicates the GCP Native Protection Source environment.
	'kAzureNative' indicates the Azure Native Protection Source environment.
	'kKubernetes' indicates a Kubernetes Protection Source environment.
	'kElastifile' indicates Elastifile Protection Source environment.
	'kAD' indicates Active Directory Protection Source environment.
	'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	'kCassandra' indicates Cassandra Protection Source environment.
	'kMongoDB' indicates MongoDB Protection Source environment.
	'kCouchbase' indicates Couchbase Protection Source environment.
	'kHdfs' indicates Hdfs Protection Source environment.
	'kHive' indicates Hive Protection Source environment.
	'kHBase' indicates HBase Protection Source environment.
	'kUDA' indicates Universal Data Adapter Protection Source environment.
	'kSAPHANA' indicates SAP HANA protection source environment.
	'kO365Teams' indicates the Office365 Teams Protection Source environment.
	'kO365Group' indicates the Office365 Groups Protection Source environment.
	'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	kO365PublicFolders
	*/
	Application *string

	/* Environment.

	     Specifies the environment such as 'kPhysical' or 'kVMware' of the
	Protection Source tree.
	overrideDescription: true
	Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	'kVMware' indicates the VMware Protection Source environment.
	'kHyperV' indicates the HyperV Protection Source environment.
	'kSQL' indicates the SQL Protection Source environment.
	'kView' indicates the View Protection Source environment.
	'kPuppeteer' indicates the Cohesity's Remote Adapter.
	'kPhysical' indicates the physical Protection Source environment.
	'kPure' indicates the Pure Storage Protection Source environment.
	'kNimble' indicates the Nimble Storage Protection Source environment.
	'kAzure' indicates the Microsoft's Azure Protection Source environment.
	'kNetapp' indicates the Netapp Protection Source environment.
	'kAgent' indicates the Agent Protection Source environment.
	'kGenericNas' indicates the Generic Network Attached Storage Protection
	Source environment.
	'kAcropolis' indicates the Acropolis Protection Source environment.
	'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	'kGPFS' indicates IBM's GPFS Protection Source environment.
	'kKVM' indicates the KVM Protection Source environment.
	'kAWS' indicates the AWS Protection Source environment.
	'kExchange' indicates the Exchange Protection Source environment.
	'kHyperVVSS' indicates the HyperV VSS Protection Source
	environment.
	'kOracle' indicates the Oracle Protection Source environment.
	'kGCP' indicates the Google Cloud Platform Protection Source environment.
	'kFlashBlade' indicates the Flash Blade Protection Source environment.
	'kAWSNative' indicates the AWS Native Protection Source environment.
	'kO365' indicates the Office 365 Protection Source environment.
	'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	'kGCPNative' indicates the GCP Native Protection Source environment.
	'kAzureNative' indicates the Azure Native Protection Source environment.
	'kKubernetes' indicates a Kubernetes Protection Source environment.
	'kElastifile' indicates Elastifile Protection Source environment.
	'kAD' indicates Active Directory Protection Source environment.
	'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	'kCassandra' indicates Cassandra Protection Source environment.
	'kMongoDB' indicates MongoDB Protection Source environment.
	'kCouchbase' indicates Couchbase Protection Source environment.
	'kHdfs' indicates Hdfs Protection Source environment.
	'kHive' indicates Hive Protection Source environment.
	'kHBase' indicates HBase Protection Source environment.
	'kUDA' indicates Universal Data Adapter Protection Source environment.
	'kSAPHANA' indicates SAP HANA protection source environment.
	'kO365Teams' indicates the Office365 Teams Protection Source environment.
	'kO365Group' indicates the Office365 Groups Protection Source environment.
	'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	kO365PublicFolders
	*/
	Environment *string

	/* ProtectionSourceID.

	     Specifies the Protection Source Id of the 'kPhysical' or 'kVMware'
	entity in the Protection Source tree hosting the applications.

	     Format: int64
	*/
	ProtectionSourceID *int64

	/* ProtectionSourcesRootNodeID.

	     Specifies the Protection Source Id of the root node of a Protection
	Sources tree. A root node represents a registered Source on the
	Cohesity Cluster, such as a vCenter Server.

	     Format: int64
	*/
	ProtectionSourcesRootNodeID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list application servers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListApplicationServersParams) WithDefaults() *ListApplicationServersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list application servers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListApplicationServersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list application servers params
func (o *ListApplicationServersParams) WithTimeout(timeout time.Duration) *ListApplicationServersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list application servers params
func (o *ListApplicationServersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list application servers params
func (o *ListApplicationServersParams) WithContext(ctx context.Context) *ListApplicationServersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list application servers params
func (o *ListApplicationServersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list application servers params
func (o *ListApplicationServersParams) WithHTTPClient(client *http.Client) *ListApplicationServersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list application servers params
func (o *ListApplicationServersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplication adds the application to the list application servers params
func (o *ListApplicationServersParams) WithApplication(application *string) *ListApplicationServersParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the list application servers params
func (o *ListApplicationServersParams) SetApplication(application *string) {
	o.Application = application
}

// WithEnvironment adds the environment to the list application servers params
func (o *ListApplicationServersParams) WithEnvironment(environment *string) *ListApplicationServersParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the list application servers params
func (o *ListApplicationServersParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithProtectionSourceID adds the protectionSourceID to the list application servers params
func (o *ListApplicationServersParams) WithProtectionSourceID(protectionSourceID *int64) *ListApplicationServersParams {
	o.SetProtectionSourceID(protectionSourceID)
	return o
}

// SetProtectionSourceID adds the protectionSourceId to the list application servers params
func (o *ListApplicationServersParams) SetProtectionSourceID(protectionSourceID *int64) {
	o.ProtectionSourceID = protectionSourceID
}

// WithProtectionSourcesRootNodeID adds the protectionSourcesRootNodeID to the list application servers params
func (o *ListApplicationServersParams) WithProtectionSourcesRootNodeID(protectionSourcesRootNodeID *int64) *ListApplicationServersParams {
	o.SetProtectionSourcesRootNodeID(protectionSourcesRootNodeID)
	return o
}

// SetProtectionSourcesRootNodeID adds the protectionSourcesRootNodeId to the list application servers params
func (o *ListApplicationServersParams) SetProtectionSourcesRootNodeID(protectionSourcesRootNodeID *int64) {
	o.ProtectionSourcesRootNodeID = protectionSourcesRootNodeID
}

// WriteToRequest writes these params to a swagger request
func (o *ListApplicationServersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Application != nil {

		// query param application
		var qrApplication string

		if o.Application != nil {
			qrApplication = *o.Application
		}
		qApplication := qrApplication
		if qApplication != "" {

			if err := r.SetQueryParam("application", qApplication); err != nil {
				return err
			}
		}
	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string

		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {

			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}
	}

	if o.ProtectionSourceID != nil {

		// query param protectionSourceId
		var qrProtectionSourceID int64

		if o.ProtectionSourceID != nil {
			qrProtectionSourceID = *o.ProtectionSourceID
		}
		qProtectionSourceID := swag.FormatInt64(qrProtectionSourceID)
		if qProtectionSourceID != "" {

			if err := r.SetQueryParam("protectionSourceId", qProtectionSourceID); err != nil {
				return err
			}
		}
	}

	if o.ProtectionSourcesRootNodeID != nil {

		// query param protectionSourcesRootNodeId
		var qrProtectionSourcesRootNodeID int64

		if o.ProtectionSourcesRootNodeID != nil {
			qrProtectionSourcesRootNodeID = *o.ProtectionSourcesRootNodeID
		}
		qProtectionSourcesRootNodeID := swag.FormatInt64(qrProtectionSourcesRootNodeID)
		if qProtectionSourcesRootNodeID != "" {

			if err := r.SetQueryParam("protectionSourcesRootNodeId", qProtectionSourcesRootNodeID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
