// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetResolutionsParams creates a new GetResolutionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetResolutionsParams() *GetResolutionsParams {
	return &GetResolutionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetResolutionsParamsWithTimeout creates a new GetResolutionsParams object
// with the ability to set a timeout on a request.
func NewGetResolutionsParamsWithTimeout(timeout time.Duration) *GetResolutionsParams {
	return &GetResolutionsParams{
		timeout: timeout,
	}
}

// NewGetResolutionsParamsWithContext creates a new GetResolutionsParams object
// with the ability to set a context for a request.
func NewGetResolutionsParamsWithContext(ctx context.Context) *GetResolutionsParams {
	return &GetResolutionsParams{
		Context: ctx,
	}
}

// NewGetResolutionsParamsWithHTTPClient creates a new GetResolutionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetResolutionsParamsWithHTTPClient(client *http.Client) *GetResolutionsParams {
	return &GetResolutionsParams{
		HTTPClient: client,
	}
}

/*
GetResolutionsParams contains all the parameters to send to the API endpoint

	for the get resolutions operation.

	Typically these are written to a http.Request.
*/
type GetResolutionsParams struct {

	/* AlertIDList.

	   Specifies list of Alert Resolution ids to filter resolutions by.
	*/
	AlertIDList []string

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* EndDateUsecs.

	   Specifies End Time Unix epoch in microseconds to filter resolutions by.

	   Format: int64
	*/
	EndDateUsecs *int64

	/* MaxResolutions.

	     Specifies the number of returned Resolutions to be returned. The newest
	Resolutions are returned.

	     Format: int32
	*/
	MaxResolutions int32

	/* ResolutionIDList.

	   Specifies list of Alert Resolution ids to filter resolutions by.
	*/
	ResolutionIDList []int64

	/* StartDateUsecs.

	   Specifies Start Time Unix epoch in microseconds to filter resolutions by.

	   Format: int64
	*/
	StartDateUsecs *int64

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get resolutions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResolutionsParams) WithDefaults() *GetResolutionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get resolutions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResolutionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get resolutions params
func (o *GetResolutionsParams) WithTimeout(timeout time.Duration) *GetResolutionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resolutions params
func (o *GetResolutionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resolutions params
func (o *GetResolutionsParams) WithContext(ctx context.Context) *GetResolutionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resolutions params
func (o *GetResolutionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resolutions params
func (o *GetResolutionsParams) WithHTTPClient(client *http.Client) *GetResolutionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resolutions params
func (o *GetResolutionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAlertIDList adds the alertIDList to the get resolutions params
func (o *GetResolutionsParams) WithAlertIDList(alertIDList []string) *GetResolutionsParams {
	o.SetAlertIDList(alertIDList)
	return o
}

// SetAlertIDList adds the alertIdList to the get resolutions params
func (o *GetResolutionsParams) SetAlertIDList(alertIDList []string) {
	o.AlertIDList = alertIDList
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get resolutions params
func (o *GetResolutionsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetResolutionsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get resolutions params
func (o *GetResolutionsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithEndDateUsecs adds the endDateUsecs to the get resolutions params
func (o *GetResolutionsParams) WithEndDateUsecs(endDateUsecs *int64) *GetResolutionsParams {
	o.SetEndDateUsecs(endDateUsecs)
	return o
}

// SetEndDateUsecs adds the endDateUsecs to the get resolutions params
func (o *GetResolutionsParams) SetEndDateUsecs(endDateUsecs *int64) {
	o.EndDateUsecs = endDateUsecs
}

// WithMaxResolutions adds the maxResolutions to the get resolutions params
func (o *GetResolutionsParams) WithMaxResolutions(maxResolutions int32) *GetResolutionsParams {
	o.SetMaxResolutions(maxResolutions)
	return o
}

// SetMaxResolutions adds the maxResolutions to the get resolutions params
func (o *GetResolutionsParams) SetMaxResolutions(maxResolutions int32) {
	o.MaxResolutions = maxResolutions
}

// WithResolutionIDList adds the resolutionIDList to the get resolutions params
func (o *GetResolutionsParams) WithResolutionIDList(resolutionIDList []int64) *GetResolutionsParams {
	o.SetResolutionIDList(resolutionIDList)
	return o
}

// SetResolutionIDList adds the resolutionIdList to the get resolutions params
func (o *GetResolutionsParams) SetResolutionIDList(resolutionIDList []int64) {
	o.ResolutionIDList = resolutionIDList
}

// WithStartDateUsecs adds the startDateUsecs to the get resolutions params
func (o *GetResolutionsParams) WithStartDateUsecs(startDateUsecs *int64) *GetResolutionsParams {
	o.SetStartDateUsecs(startDateUsecs)
	return o
}

// SetStartDateUsecs adds the startDateUsecs to the get resolutions params
func (o *GetResolutionsParams) SetStartDateUsecs(startDateUsecs *int64) {
	o.StartDateUsecs = startDateUsecs
}

// WithTenantIds adds the tenantIds to the get resolutions params
func (o *GetResolutionsParams) WithTenantIds(tenantIds []string) *GetResolutionsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get resolutions params
func (o *GetResolutionsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetResolutionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AlertIDList != nil {

		// binding items for alertIdList
		joinedAlertIDList := o.bindParamAlertIDList(reg)

		// query array param alertIdList
		if err := r.SetQueryParam("alertIdList", joinedAlertIDList...); err != nil {
			return err
		}
	}

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.EndDateUsecs != nil {

		// query param endDateUsecs
		var qrEndDateUsecs int64

		if o.EndDateUsecs != nil {
			qrEndDateUsecs = *o.EndDateUsecs
		}
		qEndDateUsecs := swag.FormatInt64(qrEndDateUsecs)
		if qEndDateUsecs != "" {

			if err := r.SetQueryParam("endDateUsecs", qEndDateUsecs); err != nil {
				return err
			}
		}
	}

	// query param maxResolutions
	qrMaxResolutions := o.MaxResolutions
	qMaxResolutions := swag.FormatInt32(qrMaxResolutions)
	if qMaxResolutions != "" {

		if err := r.SetQueryParam("maxResolutions", qMaxResolutions); err != nil {
			return err
		}
	}

	if o.ResolutionIDList != nil {

		// binding items for resolutionIdList
		joinedResolutionIDList := o.bindParamResolutionIDList(reg)

		// query array param resolutionIdList
		if err := r.SetQueryParam("resolutionIdList", joinedResolutionIDList...); err != nil {
			return err
		}
	}

	if o.StartDateUsecs != nil {

		// query param startDateUsecs
		var qrStartDateUsecs int64

		if o.StartDateUsecs != nil {
			qrStartDateUsecs = *o.StartDateUsecs
		}
		qStartDateUsecs := swag.FormatInt64(qrStartDateUsecs)
		if qStartDateUsecs != "" {

			if err := r.SetQueryParam("startDateUsecs", qStartDateUsecs); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetResolutions binds the parameter alertIdList
func (o *GetResolutionsParams) bindParamAlertIDList(formats strfmt.Registry) []string {
	alertIDListIR := o.AlertIDList

	var alertIDListIC []string
	for _, alertIDListIIR := range alertIDListIR { // explode []string

		alertIDListIIV := alertIDListIIR // string as string
		alertIDListIC = append(alertIDListIC, alertIDListIIV)
	}

	// items.CollectionFormat: ""
	alertIDListIS := swag.JoinByFormat(alertIDListIC, "")

	return alertIDListIS
}

// bindParamGetResolutions binds the parameter resolutionIdList
func (o *GetResolutionsParams) bindParamResolutionIDList(formats strfmt.Registry) []string {
	resolutionIDListIR := o.ResolutionIDList

	var resolutionIDListIC []string
	for _, resolutionIDListIIR := range resolutionIDListIR { // explode []int64

		resolutionIDListIIV := swag.FormatInt64(resolutionIDListIIR) // int64 as string
		resolutionIDListIC = append(resolutionIDListIC, resolutionIDListIIV)
	}

	// items.CollectionFormat: ""
	resolutionIDListIS := swag.JoinByFormat(resolutionIDListIC, "")

	return resolutionIDListIS
}

// bindParamGetResolutions binds the parameter tenantIds
func (o *GetResolutionsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
