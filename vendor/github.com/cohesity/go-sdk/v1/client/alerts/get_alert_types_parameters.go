// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAlertTypesParams creates a new GetAlertTypesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAlertTypesParams() *GetAlertTypesParams {
	return &GetAlertTypesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAlertTypesParamsWithTimeout creates a new GetAlertTypesParams object
// with the ability to set a timeout on a request.
func NewGetAlertTypesParamsWithTimeout(timeout time.Duration) *GetAlertTypesParams {
	return &GetAlertTypesParams{
		timeout: timeout,
	}
}

// NewGetAlertTypesParamsWithContext creates a new GetAlertTypesParams object
// with the ability to set a context for a request.
func NewGetAlertTypesParamsWithContext(ctx context.Context) *GetAlertTypesParams {
	return &GetAlertTypesParams{
		Context: ctx,
	}
}

// NewGetAlertTypesParamsWithHTTPClient creates a new GetAlertTypesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAlertTypesParamsWithHTTPClient(client *http.Client) *GetAlertTypesParams {
	return &GetAlertTypesParams{
		HTTPClient: client,
	}
}

/*
GetAlertTypesParams contains all the parameters to send to the API endpoint

	for the get alert types operation.

	Typically these are written to a http.Request.
*/
type GetAlertTypesParams struct {

	/* AlertCategoryList.

	     Specifies a list of Alert Categories to filter alert types by.
	Specifies the category of an Alert.
	kDisk - Alert associated with the disk.
	kNode - Alert associated with general hardware on a specific node.
	kCluster - Alert associated with general hardware in cluster level.
	kChassis - Alert associated with the Chassis.
	kPowerSupply - Alert associated with the power supply.
	kCPU - Alert associated with the CPU usage.
	kMemory - Alert associated with the RAM/Memory.
	kTemperature - Alert associated with the temperature.
	kFan - Alert associated with the fan.
	kNIC - Alert associated with network chips and interfaces.
	kFirmware - Alert associated with the firmware.
	kNodeHealth - Alert associated with node health status.
	kOperatingSystem - Alert associated with operating systems.
	kDataPath - Alert associated with data management in the cluster.
	kMetadata - Alert associated with metadata management.
	kIndexing - Alert associated with indexing services.
	kHelios - Alert associated with Helios.
	kAppMarketPlace - Alert associated with App MarketPlace.
	kSystemService -Alert associated with System service apps.
	kLicense - Alert associated with licensing.
	kSecurity - Alert associated with security.
	kUpgrade - Alert associated with upgrade activities.
	kClusterManagement - Alert associated with cluster management activities.
	kAuditLog - Alert associated with audit log events.
	kNetworking - Alert associated with networking issue.
	kConfiguration - Alert associated with cluster or system configurations.
	kStorageUsage - Alert associated with the disk/domain/cluster storage usage.
	kFaultTolerance - Alert associated with the fault tolerance in different levels.
	kBackupRestore - Alert associated with Backup-Restore job.
	kArchivalRestore - Alert associated with Archival-Restore job.
	kRemoteReplication - Alert associated with Replication job.
	kQuota - Alert associated with Quotas.
	kCDP - Alert associated with Continuous Data Protection.
	kViewFailover - Alert associated with view Failover.
	kDisasterRecovery - Alert associated with Disaster Recovery.
	kStorageDevice - Alert associated with storage hardware(tape drives & libraries, Fiber HBAs used to attach devices, etc).
	kStoragePool - Alert associated with storage pools -- logical groupings of similar kinds of storage hardware (disk, tape, etc) into which client data is stored.
	kGeneralSoftwareFailure - Alert associated with general software failures - that don't fall into any known categories.
	kAgent - Alert associated with agent based protection workloads.
	*/
	AlertCategoryList []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get alert types params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAlertTypesParams) WithDefaults() *GetAlertTypesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get alert types params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAlertTypesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get alert types params
func (o *GetAlertTypesParams) WithTimeout(timeout time.Duration) *GetAlertTypesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get alert types params
func (o *GetAlertTypesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get alert types params
func (o *GetAlertTypesParams) WithContext(ctx context.Context) *GetAlertTypesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get alert types params
func (o *GetAlertTypesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get alert types params
func (o *GetAlertTypesParams) WithHTTPClient(client *http.Client) *GetAlertTypesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get alert types params
func (o *GetAlertTypesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAlertCategoryList adds the alertCategoryList to the get alert types params
func (o *GetAlertTypesParams) WithAlertCategoryList(alertCategoryList []string) *GetAlertTypesParams {
	o.SetAlertCategoryList(alertCategoryList)
	return o
}

// SetAlertCategoryList adds the alertCategoryList to the get alert types params
func (o *GetAlertTypesParams) SetAlertCategoryList(alertCategoryList []string) {
	o.AlertCategoryList = alertCategoryList
}

// WriteToRequest writes these params to a swagger request
func (o *GetAlertTypesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AlertCategoryList != nil {

		// binding items for alertCategoryList
		joinedAlertCategoryList := o.bindParamAlertCategoryList(reg)

		// query array param alertCategoryList
		if err := r.SetQueryParam("alertCategoryList", joinedAlertCategoryList...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAlertTypes binds the parameter alertCategoryList
func (o *GetAlertTypesParams) bindParamAlertCategoryList(formats strfmt.Registry) []string {
	alertCategoryListIR := o.AlertCategoryList

	var alertCategoryListIC []string
	for _, alertCategoryListIIR := range alertCategoryListIR { // explode []string

		alertCategoryListIIV := alertCategoryListIIR // string as string
		alertCategoryListIC = append(alertCategoryListIC, alertCategoryListIIV)
	}

	// items.CollectionFormat: ""
	alertCategoryListIS := swag.JoinByFormat(alertCategoryListIC, "")

	return alertCategoryListIS
}
