// Code generated by go-swagger; DO NOT EDIT.

package views

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new views API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new views API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new views API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for views API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActivateViewAliases(params *ActivateViewAliasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateViewAliasesOK, error)

	ClearNlmLocks(params *ClearNlmLocksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClearNlmLocksNoContent, error)

	CloneDirectory(params *CloneDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneDirectoryCreated, error)

	CloneView(params *CloneViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneViewCreated, error)

	CreateView(params *CreateViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewCreated, error)

	CreateViewAlias(params *CreateViewAliasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewAliasCreated, error)

	CreateViewUserQuota(params *CreateViewUserQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewUserQuotaOK, error)

	DeleteView(params *DeleteViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewNoContent, error)

	DeleteViewAlias(params *DeleteViewAliasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewAliasNoContent, error)

	DeleteViewByID(params *DeleteViewByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewByIDNoContent, error)

	DeleteViewUsersQuota(params *DeleteViewUsersQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewUsersQuotaNoContent, error)

	GetFileLockStatus(params *GetFileLockStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileLockStatusOK, error)

	GetFileLockStatusByID(params *GetFileLockStatusByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileLockStatusByIDOK, error)

	GetNfsConnections(params *GetNfsConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNfsConnectionsOK, error)

	GetQoSPolicies(params *GetQoSPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQoSPoliciesOK, error)

	GetSmbConnections(params *GetSmbConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSmbConnectionsOK, error)

	GetViewByID(params *GetViewByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewByIDOK, error)

	GetViewByName(params *GetViewByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewByNameOK, error)

	GetViewDirQuotaInfo(params *GetViewDirQuotaInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewDirQuotaInfoOK, error)

	GetViewUserQuotas(params *GetViewUserQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewUserQuotasOK, error)

	GetViews(params *GetViewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewsOK, error)

	GetViewsByShareName(params *GetViewsByShareNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewsByShareNameOK, error)

	ListNlmLocks(params *ListNlmLocksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListNlmLocksOK, error)

	LockFile(params *LockFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockFileOK, error)

	LockFileByID(params *LockFileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockFileByIDOK, error)

	OverwriteView(params *OverwriteViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverwriteViewOK, error)

	RenameView(params *RenameViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameViewOK, error)

	RenameViewByID(params *RenameViewByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameViewByIDOK, error)

	UpdateUserQuotaSettings(params *UpdateUserQuotaSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserQuotaSettingsOK, error)

	UpdateView(params *UpdateViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewOK, error)

	UpdateViewAlias(params *UpdateViewAliasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewAliasCreated, error)

	UpdateViewByName(params *UpdateViewByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewByNameOK, error)

	UpdateViewDirQuota(params *UpdateViewDirQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewDirQuotaOK, error)

	UpdateViewUserQuota(params *UpdateViewUserQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewUserQuotaCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ActivateViewAliases activates the view aliases of a view from it s source view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns error if op fails.
*/
func (a *Client) ActivateViewAliases(params *ActivateViewAliasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateViewAliasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateViewAliasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivateViewAliases",
		Method:             "POST",
		PathPattern:        "/public/viewAliases/{name}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivateViewAliasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivateViewAliasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActivateViewAliasesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClearNlmLocks clears n l m locks that match the filter criteria specified using parameters

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns nothing upon success.
*/
func (a *Client) ClearNlmLocks(params *ClearNlmLocksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClearNlmLocksNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClearNlmLocksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClearNlmLocks",
		Method:             "DELETE",
		PathPattern:        "/public/nlmLocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClearNlmLocksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClearNlmLocksNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClearNlmLocksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloneDirectory clones a directory of a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns error if op fails.
*/
func (a *Client) CloneDirectory(params *CloneDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneDirectoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneDirectory",
		Method:             "POST",
		PathPattern:        "/public/views/cloneDirectory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneDirectoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloneDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloneView clones a view

**Privileges:** ```STORAGE_MODIFY, CLONE_MODIFY``` <br><br>Returns the cloned View.
*/
func (a *Client) CloneView(params *CloneViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneViewCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneView",
		Method:             "POST",
		PathPattern:        "/public/views/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneViewCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloneViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateView creates a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns the created View.
*/
func (a *Client) CreateView(params *CreateViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateView",
		Method:             "POST",
		PathPattern:        "/public/views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateViewCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateViewAlias creates a view alias a view alias allows a directory inside the view to be mounted without specifying the entire path

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns the created View Alias.
*/
func (a *Client) CreateViewAlias(params *CreateViewAliasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewAliasCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateViewAliasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateViewAlias",
		Method:             "POST",
		PathPattern:        "/public/viewAliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateViewAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateViewAliasCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateViewAliasDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateViewUserQuota creates a new quota policy for a user in a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns error if op fails.
*/
func (a *Client) CreateViewUserQuota(params *CreateViewUserQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewUserQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateViewUserQuotaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateViewUserQuota",
		Method:             "POST",
		PathPattern:        "/public/viewUserQuotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateViewUserQuotaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateViewUserQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateViewUserQuotaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteView deletes a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteView(params *DeleteViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteView",
		Method:             "DELETE",
		PathPattern:        "/public/views/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteViewNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteViewAlias deletes a view alias

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteViewAlias(params *DeleteViewAliasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewAliasNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteViewAliasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteViewAlias",
		Method:             "DELETE",
		PathPattern:        "/public/viewAliases/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteViewAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteViewAliasNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteViewAliasDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteViewByID deletes a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteViewByID(params *DeleteViewByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteViewByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteViewById",
		Method:             "DELETE",
		PathPattern:        "/public/views/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteViewByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteViewByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteViewByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteViewUsersQuota deletes the quota policy overrides for users in a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns error if op fails.
*/
func (a *Client) DeleteViewUsersQuota(params *DeleteViewUsersQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewUsersQuotaNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteViewUsersQuotaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteViewUsersQuota",
		Method:             "DELETE",
		PathPattern:        "/public/viewUserQuotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteViewUsersQuotaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteViewUsersQuotaNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteViewUsersQuotaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFileLockStatus fetches the lock status of a file in a view

**Privileges:** ```STORAGE_VIEW``` <br><br>Returns error if op fails.
*/
func (a *Client) GetFileLockStatus(params *GetFileLockStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileLockStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileLockStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFileLockStatus",
		Method:             "GET",
		PathPattern:        "/public/views/{name}/fileLocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileLockStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileLockStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFileLockStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFileLockStatusByID fetches the lock status of a file in a view

**Privileges:** ```STORAGE_VIEW``` <br><br>Returns error if op fails.
*/
func (a *Client) GetFileLockStatusByID(params *GetFileLockStatusByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileLockStatusByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileLockStatusByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFileLockStatusById",
		Method:             "GET",
		PathPattern:        "/public/views/id/{id}/fileLocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileLockStatusByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileLockStatusByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFileLockStatusByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNfsConnections fetches nfs connection status of a view

**Privileges:** ```STORAGE_VIEW``` <br><br>Returns error if op fails.
*/
func (a *Client) GetNfsConnections(params *GetNfsConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNfsConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNfsConnections",
		Method:             "GET",
		PathPattern:        "/public/nfsConnections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNfsConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNfsConnectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetQoSPolicies fetches qo s policies of a view

**Privileges:** ```STORAGE_VIEW``` <br><br>Returns error if op fails.
*/
func (a *Client) GetQoSPolicies(params *GetQoSPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQoSPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQoSPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQoSPolicies",
		Method:             "GET",
		PathPattern:        "/public/qosPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQoSPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQoSPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetQoSPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSmbConnections fetches smb connection status of a view

**Privileges:** ```STORAGE_VIEW``` <br><br>Returns error if op fails.
*/
func (a *Client) GetSmbConnections(params *GetSmbConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSmbConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmbConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSmbConnections",
		Method:             "GET",
		PathPattern:        "/public/smbConnections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmbConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSmbConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSmbConnectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewByID lists details about a single view

**Privileges:** ```STORAGE_VIEW``` <br><br>Returns the View corresponding to the specified View id.
*/
func (a *Client) GetViewByID(params *GetViewByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewById",
		Method:             "GET",
		PathPattern:        "/public/views/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewByName lists details about a single view

**Privileges:** ```STORAGE_VIEW``` <br><br>Returns the View corresponding to the specified View name.
*/
func (a *Client) GetViewByName(params *GetViewByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewByName",
		Method:             "GET",
		PathPattern:        "/public/views/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewDirQuotaInfo gets directory quota info for a view returns error if op fails

**Privileges:** ```STORAGE_VIEW``` <br><br>
*/
func (a *Client) GetViewDirQuotaInfo(params *GetViewDirQuotaInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewDirQuotaInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewDirQuotaInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewDirQuotaInfo",
		Method:             "GET",
		PathPattern:        "/public/viewDirectoryQuotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewDirQuotaInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewDirQuotaInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewDirQuotaInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewUserQuotas gets the quota policies usage and summary for a view for all its users it can also fetch the quota policies usage and summary for a user in all his views

**Privileges:** ```STORAGE_VIEW``` <br><br>Returns error if op fails.
*/
func (a *Client) GetViewUserQuotas(params *GetViewUserQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewUserQuotasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewUserQuotasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewUserQuotas",
		Method:             "GET",
		PathPattern:        "/public/viewUserQuotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewUserQuotasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewUserQuotasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewUserQuotasDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetViews lists views filtered by some parameters

	**Privileges:** ```STORAGE_VIEW``` <br><br>If no parameters are specified, all Views on the Cohesity Cluster are returned.

Specifying parameters filters the results that are returned.
NOTE: If maxCount is set and the number of Views returned exceeds the maxCount,
there are more Views to return.
To get the next set of Views, send another request and specify the id of the
last View returned in viewList from the previous response.
*/
func (a *Client) GetViews(params *GetViewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViews",
		Method:             "GET",
		PathPattern:        "/public/views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetViewsByShareName lists shares filtered by name

	**Privileges:** ```STORAGE_VIEW``` <br><br>If no parameters are specified, all shares on the Cohesity Cluster are

returned. Specifying share name/prefix filters the results that are returned.
NOTE: If maxCount is set and the number of Views returned exceeds the maxCount,
there are more Views to return.
To get the next set of Views, send another request and specify the pagination
cookie from the previous response.
*/
func (a *Client) GetViewsByShareName(params *GetViewsByShareNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewsByShareNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewsByShareNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewsByShareName",
		Method:             "GET",
		PathPattern:        "/public/shares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewsByShareNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewsByShareNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewsByShareNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	ListNlmLocks lists the n l m locks that match the filter criteria specified using parameters

	**Privileges:** ```STORAGE_VIEW``` <br><br>If no parameters are specified, all NLM locks currently on the Cohesity Cluster

are returned. Specifying parameters filters the results that are returned.
*/
func (a *Client) ListNlmLocks(params *ListNlmLocksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListNlmLocksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNlmLocksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListNlmLocks",
		Method:             "GET",
		PathPattern:        "/public/nlmLocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNlmLocksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNlmLocksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListNlmLocksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LockFile locks a file in a view and optionally update its expiry timestamp

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns error if op fails.
*/
func (a *Client) LockFile(params *LockFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LockFile",
		Method:             "POST",
		PathPattern:        "/public/views/{name}/fileLocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LockFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LockFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LockFileByID locks a file in a view and optionally update its expiry timestamp

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns error if op fails.
*/
func (a *Client) LockFileByID(params *LockFileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockFileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockFileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LockFileById",
		Method:             "POST",
		PathPattern:        "/public/views/id/{id}/fileLocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LockFileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockFileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LockFileByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	OverwriteView overwrites a target view with contents of a source view

	**Privileges:** ```STORAGE_MODIFY``` <br><br>Specifies source and target view names as params.

Returns the modified Target View.
*/
func (a *Client) OverwriteView(params *OverwriteViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverwriteViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverwriteViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OverwriteView",
		Method:             "POST",
		PathPattern:        "/public/views/overwrite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OverwriteViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OverwriteViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OverwriteViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	RenameView renames a view

	**Privileges:** ```STORAGE_MODIFY``` <br><br>Specify original name of the View in the 'name' parameter.

Returns the renamed View.
*/
func (a *Client) RenameView(params *RenameViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenameViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RenameView",
		Method:             "POST",
		PathPattern:        "/public/views/rename/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RenameViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RenameViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RenameViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	RenameViewByID renames a view

	**Privileges:** ```STORAGE_MODIFY``` <br><br>Specify unique id of the View in the 'id' parameter.

Returns the renamed View.
*/
func (a *Client) RenameViewByID(params *RenameViewByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameViewByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenameViewByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RenameViewById",
		Method:             "POST",
		PathPattern:        "/public/views/rename/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RenameViewByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RenameViewByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RenameViewByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateUserQuotaSettings updates the user quota settings in a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns error if op fails.
*/
func (a *Client) UpdateUserQuotaSettings(params *UpdateUserQuotaSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserQuotaSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserQuotaSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUserQuotaSettings",
		Method:             "PUT",
		PathPattern:        "/public/viewUserQuotasSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserQuotaSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserQuotaSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateUserQuotaSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateView updates a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns the updated View.
*/
func (a *Client) UpdateView(params *UpdateViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateView",
		Method:             "PUT",
		PathPattern:        "/public/views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateViewAlias updates a view alias a view alias allows a directory inside the view to be mounted without specifying the entire path

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns the updated View Alias.
*/
func (a *Client) UpdateViewAlias(params *UpdateViewAliasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewAliasCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewAliasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateViewAlias",
		Method:             "PUT",
		PathPattern:        "/public/viewAliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewAliasCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewAliasDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateViewByName updates a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns the updated View.
*/
func (a *Client) UpdateViewByName(params *UpdateViewByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateViewByName",
		Method:             "PUT",
		PathPattern:        "/public/views/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateViewDirQuota updates a directory quota policy for a view returns error if op fails

**Privileges:** ```STORAGE_MODIFY``` <br><br>
*/
func (a *Client) UpdateViewDirQuota(params *UpdateViewDirQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewDirQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewDirQuotaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateViewDirQuota",
		Method:             "PUT",
		PathPattern:        "/public/viewDirectoryQuotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewDirQuotaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewDirQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewDirQuotaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateViewUserQuota updates a new quota policy for a user in a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Returns error if op fails.
*/
func (a *Client) UpdateViewUserQuota(params *UpdateViewUserQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewUserQuotaCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewUserQuotaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateViewUserQuota",
		Method:             "PUT",
		PathPattern:        "/public/viewUserQuotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewUserQuotaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewUserQuotaCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewUserQuotaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
