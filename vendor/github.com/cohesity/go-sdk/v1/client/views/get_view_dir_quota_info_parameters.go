// Code generated by go-swagger; DO NOT EDIT.

package views

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewDirQuotaInfoParams creates a new GetViewDirQuotaInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewDirQuotaInfoParams() *GetViewDirQuotaInfoParams {
	return &GetViewDirQuotaInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewDirQuotaInfoParamsWithTimeout creates a new GetViewDirQuotaInfoParams object
// with the ability to set a timeout on a request.
func NewGetViewDirQuotaInfoParamsWithTimeout(timeout time.Duration) *GetViewDirQuotaInfoParams {
	return &GetViewDirQuotaInfoParams{
		timeout: timeout,
	}
}

// NewGetViewDirQuotaInfoParamsWithContext creates a new GetViewDirQuotaInfoParams object
// with the ability to set a context for a request.
func NewGetViewDirQuotaInfoParamsWithContext(ctx context.Context) *GetViewDirQuotaInfoParams {
	return &GetViewDirQuotaInfoParams{
		Context: ctx,
	}
}

// NewGetViewDirQuotaInfoParamsWithHTTPClient creates a new GetViewDirQuotaInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewDirQuotaInfoParamsWithHTTPClient(client *http.Client) *GetViewDirQuotaInfoParams {
	return &GetViewDirQuotaInfoParams{
		HTTPClient: client,
	}
}

/*
GetViewDirQuotaInfoParams contains all the parameters to send to the API endpoint

	for the get view dir quota info operation.

	Typically these are written to a http.Request.
*/
type GetViewDirQuotaInfoParams struct {

	/* Cookie.

	     Cookie should be used from previous call to list user quota overrides. It
	resumes (or gives the next set of values) from the result of the previous
	call.

	     Format: int64
	*/
	Cookie *int64

	/* OutputFormat.

	     Specifies the format for the output such as 'csv' or 'json'.
	If not specified, the json format is returned.
	If 'csv' is specified, a comma-separated list with a heading
	row is returned.
	*/
	OutputFormat *string

	/* PageCount.

	   Specifies the max entries that should be returned in the result.

	   Format: int64
	*/
	PageCount *int64

	/* ViewName.

	   The name of the view.
	*/
	ViewName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get view dir quota info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewDirQuotaInfoParams) WithDefaults() *GetViewDirQuotaInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get view dir quota info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewDirQuotaInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) WithTimeout(timeout time.Duration) *GetViewDirQuotaInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) WithContext(ctx context.Context) *GetViewDirQuotaInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) WithHTTPClient(client *http.Client) *GetViewDirQuotaInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCookie adds the cookie to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) WithCookie(cookie *int64) *GetViewDirQuotaInfoParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) SetCookie(cookie *int64) {
	o.Cookie = cookie
}

// WithOutputFormat adds the outputFormat to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) WithOutputFormat(outputFormat *string) *GetViewDirQuotaInfoParams {
	o.SetOutputFormat(outputFormat)
	return o
}

// SetOutputFormat adds the outputFormat to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) SetOutputFormat(outputFormat *string) {
	o.OutputFormat = outputFormat
}

// WithPageCount adds the pageCount to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) WithPageCount(pageCount *int64) *GetViewDirQuotaInfoParams {
	o.SetPageCount(pageCount)
	return o
}

// SetPageCount adds the pageCount to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) SetPageCount(pageCount *int64) {
	o.PageCount = pageCount
}

// WithViewName adds the viewName to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) WithViewName(viewName string) *GetViewDirQuotaInfoParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the get view dir quota info params
func (o *GetViewDirQuotaInfoParams) SetViewName(viewName string) {
	o.ViewName = viewName
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewDirQuotaInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cookie != nil {

		// query param cookie
		var qrCookie int64

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := swag.FormatInt64(qrCookie)
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.OutputFormat != nil {

		// query param outputFormat
		var qrOutputFormat string

		if o.OutputFormat != nil {
			qrOutputFormat = *o.OutputFormat
		}
		qOutputFormat := qrOutputFormat
		if qOutputFormat != "" {

			if err := r.SetQueryParam("outputFormat", qOutputFormat); err != nil {
				return err
			}
		}
	}

	if o.PageCount != nil {

		// query param pageCount
		var qrPageCount int64

		if o.PageCount != nil {
			qrPageCount = *o.PageCount
		}
		qPageCount := swag.FormatInt64(qrPageCount)
		if qPageCount != "" {

			if err := r.SetQueryParam("pageCount", qPageCount); err != nil {
				return err
			}
		}
	}

	// query param viewName
	qrViewName := o.ViewName
	qViewName := qrViewName
	if qViewName != "" {

		if err := r.SetQueryParam("viewName", qViewName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
