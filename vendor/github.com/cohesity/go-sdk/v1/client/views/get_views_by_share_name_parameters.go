// Code generated by go-swagger; DO NOT EDIT.

package views

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewsByShareNameParams creates a new GetViewsByShareNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewsByShareNameParams() *GetViewsByShareNameParams {
	return &GetViewsByShareNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewsByShareNameParamsWithTimeout creates a new GetViewsByShareNameParams object
// with the ability to set a timeout on a request.
func NewGetViewsByShareNameParamsWithTimeout(timeout time.Duration) *GetViewsByShareNameParams {
	return &GetViewsByShareNameParams{
		timeout: timeout,
	}
}

// NewGetViewsByShareNameParamsWithContext creates a new GetViewsByShareNameParams object
// with the ability to set a context for a request.
func NewGetViewsByShareNameParamsWithContext(ctx context.Context) *GetViewsByShareNameParams {
	return &GetViewsByShareNameParams{
		Context: ctx,
	}
}

// NewGetViewsByShareNameParamsWithHTTPClient creates a new GetViewsByShareNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewsByShareNameParamsWithHTTPClient(client *http.Client) *GetViewsByShareNameParams {
	return &GetViewsByShareNameParams{
		HTTPClient: client,
	}
}

/*
GetViewsByShareNameParams contains all the parameters to send to the API endpoint

	for the get views by share name operation.

	Typically these are written to a http.Request.
*/
type GetViewsByShareNameParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* MatchPartialNames.

	     If true, the names in viewNames are matched by prefix rather than
	exactly matched.
	*/
	MatchPartialNames *bool

	/* MaxCount.

	   Specifies a limit on the number of Views returned.

	   Format: int32
	*/
	MaxCount *int32

	/* PaginationCookie.

	     Expected to be empty in the first call to GetViewsByShareName.
	To get the next set of results, set this value to the pagination cookie
	value returned  in the response of the previous call.
	*/
	PaginationCookie *string

	/* ShareName.

	     The share name(substring) that needs to be searched against existing views
	and aliases.
	*/
	ShareName *string

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get views by share name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewsByShareNameParams) WithDefaults() *GetViewsByShareNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get views by share name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewsByShareNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get views by share name params
func (o *GetViewsByShareNameParams) WithTimeout(timeout time.Duration) *GetViewsByShareNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get views by share name params
func (o *GetViewsByShareNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get views by share name params
func (o *GetViewsByShareNameParams) WithContext(ctx context.Context) *GetViewsByShareNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get views by share name params
func (o *GetViewsByShareNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get views by share name params
func (o *GetViewsByShareNameParams) WithHTTPClient(client *http.Client) *GetViewsByShareNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get views by share name params
func (o *GetViewsByShareNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get views by share name params
func (o *GetViewsByShareNameParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetViewsByShareNameParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get views by share name params
func (o *GetViewsByShareNameParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithMatchPartialNames adds the matchPartialNames to the get views by share name params
func (o *GetViewsByShareNameParams) WithMatchPartialNames(matchPartialNames *bool) *GetViewsByShareNameParams {
	o.SetMatchPartialNames(matchPartialNames)
	return o
}

// SetMatchPartialNames adds the matchPartialNames to the get views by share name params
func (o *GetViewsByShareNameParams) SetMatchPartialNames(matchPartialNames *bool) {
	o.MatchPartialNames = matchPartialNames
}

// WithMaxCount adds the maxCount to the get views by share name params
func (o *GetViewsByShareNameParams) WithMaxCount(maxCount *int32) *GetViewsByShareNameParams {
	o.SetMaxCount(maxCount)
	return o
}

// SetMaxCount adds the maxCount to the get views by share name params
func (o *GetViewsByShareNameParams) SetMaxCount(maxCount *int32) {
	o.MaxCount = maxCount
}

// WithPaginationCookie adds the paginationCookie to the get views by share name params
func (o *GetViewsByShareNameParams) WithPaginationCookie(paginationCookie *string) *GetViewsByShareNameParams {
	o.SetPaginationCookie(paginationCookie)
	return o
}

// SetPaginationCookie adds the paginationCookie to the get views by share name params
func (o *GetViewsByShareNameParams) SetPaginationCookie(paginationCookie *string) {
	o.PaginationCookie = paginationCookie
}

// WithShareName adds the shareName to the get views by share name params
func (o *GetViewsByShareNameParams) WithShareName(shareName *string) *GetViewsByShareNameParams {
	o.SetShareName(shareName)
	return o
}

// SetShareName adds the shareName to the get views by share name params
func (o *GetViewsByShareNameParams) SetShareName(shareName *string) {
	o.ShareName = shareName
}

// WithTenantIds adds the tenantIds to the get views by share name params
func (o *GetViewsByShareNameParams) WithTenantIds(tenantIds []string) *GetViewsByShareNameParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get views by share name params
func (o *GetViewsByShareNameParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewsByShareNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.MatchPartialNames != nil {

		// query param matchPartialNames
		var qrMatchPartialNames bool

		if o.MatchPartialNames != nil {
			qrMatchPartialNames = *o.MatchPartialNames
		}
		qMatchPartialNames := swag.FormatBool(qrMatchPartialNames)
		if qMatchPartialNames != "" {

			if err := r.SetQueryParam("matchPartialNames", qMatchPartialNames); err != nil {
				return err
			}
		}
	}

	if o.MaxCount != nil {

		// query param maxCount
		var qrMaxCount int32

		if o.MaxCount != nil {
			qrMaxCount = *o.MaxCount
		}
		qMaxCount := swag.FormatInt32(qrMaxCount)
		if qMaxCount != "" {

			if err := r.SetQueryParam("maxCount", qMaxCount); err != nil {
				return err
			}
		}
	}

	if o.PaginationCookie != nil {

		// query param paginationCookie
		var qrPaginationCookie string

		if o.PaginationCookie != nil {
			qrPaginationCookie = *o.PaginationCookie
		}
		qPaginationCookie := qrPaginationCookie
		if qPaginationCookie != "" {

			if err := r.SetQueryParam("paginationCookie", qPaginationCookie); err != nil {
				return err
			}
		}
	}

	if o.ShareName != nil {

		// query param shareName
		var qrShareName string

		if o.ShareName != nil {
			qrShareName = *o.ShareName
		}
		qShareName := qrShareName
		if qShareName != "" {

			if err := r.SetQueryParam("shareName", qShareName); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetViewsByShareName binds the parameter tenantIds
func (o *GetViewsByShareNameParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
