// Code generated by go-swagger; DO NOT EDIT.

package views

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewsParams creates a new GetViewsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewsParams() *GetViewsParams {
	return &GetViewsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewsParamsWithTimeout creates a new GetViewsParams object
// with the ability to set a timeout on a request.
func NewGetViewsParamsWithTimeout(timeout time.Duration) *GetViewsParams {
	return &GetViewsParams{
		timeout: timeout,
	}
}

// NewGetViewsParamsWithContext creates a new GetViewsParams object
// with the ability to set a context for a request.
func NewGetViewsParamsWithContext(ctx context.Context) *GetViewsParams {
	return &GetViewsParams{
		Context: ctx,
	}
}

// NewGetViewsParamsWithHTTPClient creates a new GetViewsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewsParamsWithHTTPClient(client *http.Client) *GetViewsParams {
	return &GetViewsParams{
		HTTPClient: client,
	}
}

/*
GetViewsParams contains all the parameters to send to the API endpoint

	for the get views operation.

	Typically these are written to a http.Request.
*/
type GetViewsParams struct {

	/* SortByLogicalUsage.

	   If set to true, the list is sorted descending by logical usage.
	*/
	SortByLogicalUsage *bool

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* IncludeInactive.

	     Specifies if inactive Views on this Remote Cluster (which have
	Snapshots copied by replication) should also be returned.
	Inactive Views are not counted towards the maxCount.
	By default, this field is set to false.
	*/
	IncludeInactive *bool

	/* IncludeProtectionJobs.

	     Specifies if Protection Jobs information needs to be returned along with
	view metadata. By default, if not set or set to true, Job information is
	returned.
	*/
	IncludeProtectionJobs *bool

	/* IncludeStats.

	     If set to true, stats of views will be returned. By default this parameter
	is set to false.
	*/
	IncludeStats *bool

	/* IncludeViewsWithAntivirusEnabledOnly.

	     If set to true, the list will contain only the views for which antivirus
	scan is enabled.
	*/
	IncludeViewsWithAntivirusEnabledOnly *bool

	/* IncludeViewsWithDataLockEnabledOnly.

	     If set to true, the list will contain only the views for which either
	file level data lock is enabled or view level data lock is enabled.
	*/
	IncludeViewsWithDataLockEnabledOnly *bool

	/* JobIds.

	     Filter by Protection Job ids. Return Views that are being protected by
	listed Jobs, which are specified by ids.
	*/
	JobIds []int64

	/* MatchAliasNames.

	   If true, view aliases are also matched with the names in viewNames.
	*/
	MatchAliasNames *bool

	/* MatchPartialNames.

	     If true, the names in viewNames are matched by prefix rather than
	exactly matched.
	*/
	MatchPartialNames *bool

	/* MaxCount.

	   Specifies a limit on the number of Views returned.

	   Format: int32
	*/
	MaxCount *int32

	/* MaxViewID.

	     If the number of Views to return exceeds the maxCount specified in the
	original request, specify the id of the last View
	from the viewList in the previous response
	to get the next set of Views.

	     Format: int64
	*/
	MaxViewID *int64

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	/* ViewBoxIds.

	   Filter by a list of Storage Domains (View Boxes) specified by id.
	*/
	ViewBoxIds []int64

	/* ViewBoxNames.

	   Filter by a list of View Box names.
	*/
	ViewBoxNames []string

	/* ViewIds.

	   Filter by a list of View ids.
	*/
	ViewIds []int64

	/* ViewNames.

	   Filter by a list of View names.
	*/
	ViewNames []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get views params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewsParams) WithDefaults() *GetViewsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get views params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get views params
func (o *GetViewsParams) WithTimeout(timeout time.Duration) *GetViewsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get views params
func (o *GetViewsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get views params
func (o *GetViewsParams) WithContext(ctx context.Context) *GetViewsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get views params
func (o *GetViewsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get views params
func (o *GetViewsParams) WithHTTPClient(client *http.Client) *GetViewsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get views params
func (o *GetViewsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSortByLogicalUsage adds the sortByLogicalUsage to the get views params
func (o *GetViewsParams) WithSortByLogicalUsage(sortByLogicalUsage *bool) *GetViewsParams {
	o.SetSortByLogicalUsage(sortByLogicalUsage)
	return o
}

// SetSortByLogicalUsage adds the sortByLogicalUsage to the get views params
func (o *GetViewsParams) SetSortByLogicalUsage(sortByLogicalUsage *bool) {
	o.SortByLogicalUsage = sortByLogicalUsage
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get views params
func (o *GetViewsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetViewsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get views params
func (o *GetViewsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithIncludeInactive adds the includeInactive to the get views params
func (o *GetViewsParams) WithIncludeInactive(includeInactive *bool) *GetViewsParams {
	o.SetIncludeInactive(includeInactive)
	return o
}

// SetIncludeInactive adds the includeInactive to the get views params
func (o *GetViewsParams) SetIncludeInactive(includeInactive *bool) {
	o.IncludeInactive = includeInactive
}

// WithIncludeProtectionJobs adds the includeProtectionJobs to the get views params
func (o *GetViewsParams) WithIncludeProtectionJobs(includeProtectionJobs *bool) *GetViewsParams {
	o.SetIncludeProtectionJobs(includeProtectionJobs)
	return o
}

// SetIncludeProtectionJobs adds the includeProtectionJobs to the get views params
func (o *GetViewsParams) SetIncludeProtectionJobs(includeProtectionJobs *bool) {
	o.IncludeProtectionJobs = includeProtectionJobs
}

// WithIncludeStats adds the includeStats to the get views params
func (o *GetViewsParams) WithIncludeStats(includeStats *bool) *GetViewsParams {
	o.SetIncludeStats(includeStats)
	return o
}

// SetIncludeStats adds the includeStats to the get views params
func (o *GetViewsParams) SetIncludeStats(includeStats *bool) {
	o.IncludeStats = includeStats
}

// WithIncludeViewsWithAntivirusEnabledOnly adds the includeViewsWithAntivirusEnabledOnly to the get views params
func (o *GetViewsParams) WithIncludeViewsWithAntivirusEnabledOnly(includeViewsWithAntivirusEnabledOnly *bool) *GetViewsParams {
	o.SetIncludeViewsWithAntivirusEnabledOnly(includeViewsWithAntivirusEnabledOnly)
	return o
}

// SetIncludeViewsWithAntivirusEnabledOnly adds the includeViewsWithAntivirusEnabledOnly to the get views params
func (o *GetViewsParams) SetIncludeViewsWithAntivirusEnabledOnly(includeViewsWithAntivirusEnabledOnly *bool) {
	o.IncludeViewsWithAntivirusEnabledOnly = includeViewsWithAntivirusEnabledOnly
}

// WithIncludeViewsWithDataLockEnabledOnly adds the includeViewsWithDataLockEnabledOnly to the get views params
func (o *GetViewsParams) WithIncludeViewsWithDataLockEnabledOnly(includeViewsWithDataLockEnabledOnly *bool) *GetViewsParams {
	o.SetIncludeViewsWithDataLockEnabledOnly(includeViewsWithDataLockEnabledOnly)
	return o
}

// SetIncludeViewsWithDataLockEnabledOnly adds the includeViewsWithDataLockEnabledOnly to the get views params
func (o *GetViewsParams) SetIncludeViewsWithDataLockEnabledOnly(includeViewsWithDataLockEnabledOnly *bool) {
	o.IncludeViewsWithDataLockEnabledOnly = includeViewsWithDataLockEnabledOnly
}

// WithJobIds adds the jobIds to the get views params
func (o *GetViewsParams) WithJobIds(jobIds []int64) *GetViewsParams {
	o.SetJobIds(jobIds)
	return o
}

// SetJobIds adds the jobIds to the get views params
func (o *GetViewsParams) SetJobIds(jobIds []int64) {
	o.JobIds = jobIds
}

// WithMatchAliasNames adds the matchAliasNames to the get views params
func (o *GetViewsParams) WithMatchAliasNames(matchAliasNames *bool) *GetViewsParams {
	o.SetMatchAliasNames(matchAliasNames)
	return o
}

// SetMatchAliasNames adds the matchAliasNames to the get views params
func (o *GetViewsParams) SetMatchAliasNames(matchAliasNames *bool) {
	o.MatchAliasNames = matchAliasNames
}

// WithMatchPartialNames adds the matchPartialNames to the get views params
func (o *GetViewsParams) WithMatchPartialNames(matchPartialNames *bool) *GetViewsParams {
	o.SetMatchPartialNames(matchPartialNames)
	return o
}

// SetMatchPartialNames adds the matchPartialNames to the get views params
func (o *GetViewsParams) SetMatchPartialNames(matchPartialNames *bool) {
	o.MatchPartialNames = matchPartialNames
}

// WithMaxCount adds the maxCount to the get views params
func (o *GetViewsParams) WithMaxCount(maxCount *int32) *GetViewsParams {
	o.SetMaxCount(maxCount)
	return o
}

// SetMaxCount adds the maxCount to the get views params
func (o *GetViewsParams) SetMaxCount(maxCount *int32) {
	o.MaxCount = maxCount
}

// WithMaxViewID adds the maxViewID to the get views params
func (o *GetViewsParams) WithMaxViewID(maxViewID *int64) *GetViewsParams {
	o.SetMaxViewID(maxViewID)
	return o
}

// SetMaxViewID adds the maxViewId to the get views params
func (o *GetViewsParams) SetMaxViewID(maxViewID *int64) {
	o.MaxViewID = maxViewID
}

// WithTenantIds adds the tenantIds to the get views params
func (o *GetViewsParams) WithTenantIds(tenantIds []string) *GetViewsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get views params
func (o *GetViewsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithViewBoxIds adds the viewBoxIds to the get views params
func (o *GetViewsParams) WithViewBoxIds(viewBoxIds []int64) *GetViewsParams {
	o.SetViewBoxIds(viewBoxIds)
	return o
}

// SetViewBoxIds adds the viewBoxIds to the get views params
func (o *GetViewsParams) SetViewBoxIds(viewBoxIds []int64) {
	o.ViewBoxIds = viewBoxIds
}

// WithViewBoxNames adds the viewBoxNames to the get views params
func (o *GetViewsParams) WithViewBoxNames(viewBoxNames []string) *GetViewsParams {
	o.SetViewBoxNames(viewBoxNames)
	return o
}

// SetViewBoxNames adds the viewBoxNames to the get views params
func (o *GetViewsParams) SetViewBoxNames(viewBoxNames []string) {
	o.ViewBoxNames = viewBoxNames
}

// WithViewIds adds the viewIds to the get views params
func (o *GetViewsParams) WithViewIds(viewIds []int64) *GetViewsParams {
	o.SetViewIds(viewIds)
	return o
}

// SetViewIds adds the viewIds to the get views params
func (o *GetViewsParams) SetViewIds(viewIds []int64) {
	o.ViewIds = viewIds
}

// WithViewNames adds the viewNames to the get views params
func (o *GetViewsParams) WithViewNames(viewNames []string) *GetViewsParams {
	o.SetViewNames(viewNames)
	return o
}

// SetViewNames adds the viewNames to the get views params
func (o *GetViewsParams) SetViewNames(viewNames []string) {
	o.ViewNames = viewNames
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SortByLogicalUsage != nil {

		// query param SortByLogicalUsage
		var qrSortByLogicalUsage bool

		if o.SortByLogicalUsage != nil {
			qrSortByLogicalUsage = *o.SortByLogicalUsage
		}
		qSortByLogicalUsage := swag.FormatBool(qrSortByLogicalUsage)
		if qSortByLogicalUsage != "" {

			if err := r.SetQueryParam("SortByLogicalUsage", qSortByLogicalUsage); err != nil {
				return err
			}
		}
	}

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.IncludeInactive != nil {

		// query param includeInactive
		var qrIncludeInactive bool

		if o.IncludeInactive != nil {
			qrIncludeInactive = *o.IncludeInactive
		}
		qIncludeInactive := swag.FormatBool(qrIncludeInactive)
		if qIncludeInactive != "" {

			if err := r.SetQueryParam("includeInactive", qIncludeInactive); err != nil {
				return err
			}
		}
	}

	if o.IncludeProtectionJobs != nil {

		// query param includeProtectionJobs
		var qrIncludeProtectionJobs bool

		if o.IncludeProtectionJobs != nil {
			qrIncludeProtectionJobs = *o.IncludeProtectionJobs
		}
		qIncludeProtectionJobs := swag.FormatBool(qrIncludeProtectionJobs)
		if qIncludeProtectionJobs != "" {

			if err := r.SetQueryParam("includeProtectionJobs", qIncludeProtectionJobs); err != nil {
				return err
			}
		}
	}

	if o.IncludeStats != nil {

		// query param includeStats
		var qrIncludeStats bool

		if o.IncludeStats != nil {
			qrIncludeStats = *o.IncludeStats
		}
		qIncludeStats := swag.FormatBool(qrIncludeStats)
		if qIncludeStats != "" {

			if err := r.SetQueryParam("includeStats", qIncludeStats); err != nil {
				return err
			}
		}
	}

	if o.IncludeViewsWithAntivirusEnabledOnly != nil {

		// query param includeViewsWithAntivirusEnabledOnly
		var qrIncludeViewsWithAntivirusEnabledOnly bool

		if o.IncludeViewsWithAntivirusEnabledOnly != nil {
			qrIncludeViewsWithAntivirusEnabledOnly = *o.IncludeViewsWithAntivirusEnabledOnly
		}
		qIncludeViewsWithAntivirusEnabledOnly := swag.FormatBool(qrIncludeViewsWithAntivirusEnabledOnly)
		if qIncludeViewsWithAntivirusEnabledOnly != "" {

			if err := r.SetQueryParam("includeViewsWithAntivirusEnabledOnly", qIncludeViewsWithAntivirusEnabledOnly); err != nil {
				return err
			}
		}
	}

	if o.IncludeViewsWithDataLockEnabledOnly != nil {

		// query param includeViewsWithDataLockEnabledOnly
		var qrIncludeViewsWithDataLockEnabledOnly bool

		if o.IncludeViewsWithDataLockEnabledOnly != nil {
			qrIncludeViewsWithDataLockEnabledOnly = *o.IncludeViewsWithDataLockEnabledOnly
		}
		qIncludeViewsWithDataLockEnabledOnly := swag.FormatBool(qrIncludeViewsWithDataLockEnabledOnly)
		if qIncludeViewsWithDataLockEnabledOnly != "" {

			if err := r.SetQueryParam("includeViewsWithDataLockEnabledOnly", qIncludeViewsWithDataLockEnabledOnly); err != nil {
				return err
			}
		}
	}

	if o.JobIds != nil {

		// binding items for jobIds
		joinedJobIds := o.bindParamJobIds(reg)

		// query array param jobIds
		if err := r.SetQueryParam("jobIds", joinedJobIds...); err != nil {
			return err
		}
	}

	if o.MatchAliasNames != nil {

		// query param matchAliasNames
		var qrMatchAliasNames bool

		if o.MatchAliasNames != nil {
			qrMatchAliasNames = *o.MatchAliasNames
		}
		qMatchAliasNames := swag.FormatBool(qrMatchAliasNames)
		if qMatchAliasNames != "" {

			if err := r.SetQueryParam("matchAliasNames", qMatchAliasNames); err != nil {
				return err
			}
		}
	}

	if o.MatchPartialNames != nil {

		// query param matchPartialNames
		var qrMatchPartialNames bool

		if o.MatchPartialNames != nil {
			qrMatchPartialNames = *o.MatchPartialNames
		}
		qMatchPartialNames := swag.FormatBool(qrMatchPartialNames)
		if qMatchPartialNames != "" {

			if err := r.SetQueryParam("matchPartialNames", qMatchPartialNames); err != nil {
				return err
			}
		}
	}

	if o.MaxCount != nil {

		// query param maxCount
		var qrMaxCount int32

		if o.MaxCount != nil {
			qrMaxCount = *o.MaxCount
		}
		qMaxCount := swag.FormatInt32(qrMaxCount)
		if qMaxCount != "" {

			if err := r.SetQueryParam("maxCount", qMaxCount); err != nil {
				return err
			}
		}
	}

	if o.MaxViewID != nil {

		// query param maxViewId
		var qrMaxViewID int64

		if o.MaxViewID != nil {
			qrMaxViewID = *o.MaxViewID
		}
		qMaxViewID := swag.FormatInt64(qrMaxViewID)
		if qMaxViewID != "" {

			if err := r.SetQueryParam("maxViewId", qMaxViewID); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.ViewBoxIds != nil {

		// binding items for viewBoxIds
		joinedViewBoxIds := o.bindParamViewBoxIds(reg)

		// query array param viewBoxIds
		if err := r.SetQueryParam("viewBoxIds", joinedViewBoxIds...); err != nil {
			return err
		}
	}

	if o.ViewBoxNames != nil {

		// binding items for viewBoxNames
		joinedViewBoxNames := o.bindParamViewBoxNames(reg)

		// query array param viewBoxNames
		if err := r.SetQueryParam("viewBoxNames", joinedViewBoxNames...); err != nil {
			return err
		}
	}

	if o.ViewIds != nil {

		// binding items for viewIds
		joinedViewIds := o.bindParamViewIds(reg)

		// query array param viewIds
		if err := r.SetQueryParam("viewIds", joinedViewIds...); err != nil {
			return err
		}
	}

	if o.ViewNames != nil {

		// binding items for viewNames
		joinedViewNames := o.bindParamViewNames(reg)

		// query array param viewNames
		if err := r.SetQueryParam("viewNames", joinedViewNames...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetViews binds the parameter jobIds
func (o *GetViewsParams) bindParamJobIds(formats strfmt.Registry) []string {
	jobIdsIR := o.JobIds

	var jobIdsIC []string
	for _, jobIdsIIR := range jobIdsIR { // explode []int64

		jobIdsIIV := swag.FormatInt64(jobIdsIIR) // int64 as string
		jobIdsIC = append(jobIdsIC, jobIdsIIV)
	}

	// items.CollectionFormat: ""
	jobIdsIS := swag.JoinByFormat(jobIdsIC, "")

	return jobIdsIS
}

// bindParamGetViews binds the parameter tenantIds
func (o *GetViewsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}

// bindParamGetViews binds the parameter viewBoxIds
func (o *GetViewsParams) bindParamViewBoxIds(formats strfmt.Registry) []string {
	viewBoxIdsIR := o.ViewBoxIds

	var viewBoxIdsIC []string
	for _, viewBoxIdsIIR := range viewBoxIdsIR { // explode []int64

		viewBoxIdsIIV := swag.FormatInt64(viewBoxIdsIIR) // int64 as string
		viewBoxIdsIC = append(viewBoxIdsIC, viewBoxIdsIIV)
	}

	// items.CollectionFormat: ""
	viewBoxIdsIS := swag.JoinByFormat(viewBoxIdsIC, "")

	return viewBoxIdsIS
}

// bindParamGetViews binds the parameter viewBoxNames
func (o *GetViewsParams) bindParamViewBoxNames(formats strfmt.Registry) []string {
	viewBoxNamesIR := o.ViewBoxNames

	var viewBoxNamesIC []string
	for _, viewBoxNamesIIR := range viewBoxNamesIR { // explode []string

		viewBoxNamesIIV := viewBoxNamesIIR // string as string
		viewBoxNamesIC = append(viewBoxNamesIC, viewBoxNamesIIV)
	}

	// items.CollectionFormat: ""
	viewBoxNamesIS := swag.JoinByFormat(viewBoxNamesIC, "")

	return viewBoxNamesIS
}

// bindParamGetViews binds the parameter viewIds
func (o *GetViewsParams) bindParamViewIds(formats strfmt.Registry) []string {
	viewIdsIR := o.ViewIds

	var viewIdsIC []string
	for _, viewIdsIIR := range viewIdsIR { // explode []int64

		viewIdsIIV := swag.FormatInt64(viewIdsIIR) // int64 as string
		viewIdsIC = append(viewIdsIC, viewIdsIIV)
	}

	// items.CollectionFormat: ""
	viewIdsIS := swag.JoinByFormat(viewIdsIC, "")

	return viewIdsIS
}

// bindParamGetViews binds the parameter viewNames
func (o *GetViewsParams) bindParamViewNames(formats strfmt.Registry) []string {
	viewNamesIR := o.ViewNames

	var viewNamesIC []string
	for _, viewNamesIIR := range viewNamesIR { // explode []string

		viewNamesIIV := viewNamesIIR // string as string
		viewNamesIC = append(viewNamesIC, viewNamesIIV)
	}

	// items.CollectionFormat: ""
	viewNamesIS := swag.JoinByFormat(viewNamesIC, "")

	return viewNamesIS
}
