// Code generated by go-swagger; DO NOT EDIT.

package views

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewUserQuotasParams creates a new GetViewUserQuotasParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewUserQuotasParams() *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewUserQuotasParamsWithTimeout creates a new GetViewUserQuotasParams object
// with the ability to set a timeout on a request.
func NewGetViewUserQuotasParamsWithTimeout(timeout time.Duration) *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		timeout: timeout,
	}
}

// NewGetViewUserQuotasParamsWithContext creates a new GetViewUserQuotasParams object
// with the ability to set a context for a request.
func NewGetViewUserQuotasParamsWithContext(ctx context.Context) *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		Context: ctx,
	}
}

// NewGetViewUserQuotasParamsWithHTTPClient creates a new GetViewUserQuotasParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewUserQuotasParamsWithHTTPClient(client *http.Client) *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		HTTPClient: client,
	}
}

/*
GetViewUserQuotasParams contains all the parameters to send to the API endpoint

	for the get view user quotas operation.

	Typically these are written to a http.Request.
*/
type GetViewUserQuotasParams struct {

	/* Cookie.

	     Cookie should be used from previous call to list user quota overrides. It
	resumes (or gives the next set of values) from the result of the previous
	call.
	*/
	Cookie *string

	/* ExcludeUsersWithinAlertThreshold.

	     This field can be set only when includeUsage is set to true.
	By default, all the users with logical usage > 0 will be returned in the
	result. If this field is set to true, only the list of users who has
	exceeded the alert threshold will be returned.
	*/
	ExcludeUsersWithinAlertThreshold *bool

	/* IncludeUsage.

	     If set to true, the logical usage info is included only for users with
	quota overrides. By default, it is set to false.
	*/
	IncludeUsage *bool

	/* IncludeUserWithQuotaOnly.

	     If set to true, the result will only contain user with user quota enabled.
	By default, this field is set to false, and it's only in effect when
	'SummaryOnly' is set to false and 'ViewName' is specified.
	*/
	IncludeUserWithQuotaOnly *bool

	/* MaxViewID.

	     Related to fetching a particular user's quota and usage in all his views.
	It only pertains to the scenario where either UnixUid or Sid is specified,
	and ViewName is nil. Specify the maxViewId for All the views returned
	would have view_id's less than or equal to the given MaxViewId if it is
	>= 0.

	     Format: int64
	*/
	MaxViewID *int64

	/* OutputFormat.

	     OutputFormat is the Output format for the output. If it is not specified,
	default is json.
	*/
	OutputFormat *string

	/* PageCount.

	   Specifies the max entries that should be returned in the result.

	   Format: int64
	*/
	PageCount *int64

	/* Sid.

	     If interested in a user via smb_client, include SID.
	Otherwise, If a valid unix-id to SID mappings are available (i.e., when
	mixed mode is enabled) the server will perform the necessary id mapping
	and return the correct usage irrespective of whether the unix id / SID is
	provided.
	The string is of following format -
	S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn.
	*/
	Sid *string

	/* SummaryOnly.

	     Specifies a flag to just return a summary. If set to true, and if ViewName
	is not nil, it returns the summary of users for a view. Otherwise if
	UserId not nil, and ViewName is nil then it fetches the summary for a
	user in his views.  By default, it is set to false.
	*/
	SummaryOnly *bool

	/* TopQuotas.

	     TopQuotas is the quotas sorted by quota usage in descending order.
	This parameter defines number of results returned. No pagination cookie is
	returned if this is set to true.

	     Format: int64
	*/
	TopQuotas *int64

	/* UnixUID.

	     If interested in a user via unix-identifier, include UnixUid.
	Otherwise, If a valid unix-id to SID mappings are available (i.e., when
	mixed mode is enabled) the server will perform the necessary id mapping
	and return the correct usage irrespective of whether the unix id / SID is
	provided.

	     Format: uint32
	*/
	UnixUID *uint32

	/* UserSidsForView.

	     While making a query for a view, this specifies a list of specific users
	with their Sid for the result.
	*/
	UserSidsForView []string

	/* UserUnixIdsForView.

	     While making a query for a view, this specifies a list of specific users
	with their unix uid for the result.
	*/
	UserUnixIdsForView []uint32

	/* ViewName.

	     Specifies the name of the input view. If given, there could be three
	scenarios with the viewName input parameter:
	It gives the user quota overrides for this view, and the user quota
	settings. Returns 'usersQuotaAndUsage'.
	If given along with the user id, it returns the quota policy for this
	user on this view. Returns 'usersQuotaAndUsage'.
	If given along with SummaryOnly as true, a user quota summary for
	this view would be returned. Returns 'summaryForView'.
	If not given, then the user id is checked.
	*/
	ViewName *string

	/* ViewNamesForUser.

	     While making a query for a user, this specifies a list of specific views
	for the result.
	*/
	ViewNamesForUser []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get view user quotas params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewUserQuotasParams) WithDefaults() *GetViewUserQuotasParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get view user quotas params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewUserQuotasParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get view user quotas params
func (o *GetViewUserQuotasParams) WithTimeout(timeout time.Duration) *GetViewUserQuotasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get view user quotas params
func (o *GetViewUserQuotasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get view user quotas params
func (o *GetViewUserQuotasParams) WithContext(ctx context.Context) *GetViewUserQuotasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get view user quotas params
func (o *GetViewUserQuotasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get view user quotas params
func (o *GetViewUserQuotasParams) WithHTTPClient(client *http.Client) *GetViewUserQuotasParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get view user quotas params
func (o *GetViewUserQuotasParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCookie adds the cookie to the get view user quotas params
func (o *GetViewUserQuotasParams) WithCookie(cookie *string) *GetViewUserQuotasParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the get view user quotas params
func (o *GetViewUserQuotasParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithExcludeUsersWithinAlertThreshold adds the excludeUsersWithinAlertThreshold to the get view user quotas params
func (o *GetViewUserQuotasParams) WithExcludeUsersWithinAlertThreshold(excludeUsersWithinAlertThreshold *bool) *GetViewUserQuotasParams {
	o.SetExcludeUsersWithinAlertThreshold(excludeUsersWithinAlertThreshold)
	return o
}

// SetExcludeUsersWithinAlertThreshold adds the excludeUsersWithinAlertThreshold to the get view user quotas params
func (o *GetViewUserQuotasParams) SetExcludeUsersWithinAlertThreshold(excludeUsersWithinAlertThreshold *bool) {
	o.ExcludeUsersWithinAlertThreshold = excludeUsersWithinAlertThreshold
}

// WithIncludeUsage adds the includeUsage to the get view user quotas params
func (o *GetViewUserQuotasParams) WithIncludeUsage(includeUsage *bool) *GetViewUserQuotasParams {
	o.SetIncludeUsage(includeUsage)
	return o
}

// SetIncludeUsage adds the includeUsage to the get view user quotas params
func (o *GetViewUserQuotasParams) SetIncludeUsage(includeUsage *bool) {
	o.IncludeUsage = includeUsage
}

// WithIncludeUserWithQuotaOnly adds the includeUserWithQuotaOnly to the get view user quotas params
func (o *GetViewUserQuotasParams) WithIncludeUserWithQuotaOnly(includeUserWithQuotaOnly *bool) *GetViewUserQuotasParams {
	o.SetIncludeUserWithQuotaOnly(includeUserWithQuotaOnly)
	return o
}

// SetIncludeUserWithQuotaOnly adds the includeUserWithQuotaOnly to the get view user quotas params
func (o *GetViewUserQuotasParams) SetIncludeUserWithQuotaOnly(includeUserWithQuotaOnly *bool) {
	o.IncludeUserWithQuotaOnly = includeUserWithQuotaOnly
}

// WithMaxViewID adds the maxViewID to the get view user quotas params
func (o *GetViewUserQuotasParams) WithMaxViewID(maxViewID *int64) *GetViewUserQuotasParams {
	o.SetMaxViewID(maxViewID)
	return o
}

// SetMaxViewID adds the maxViewId to the get view user quotas params
func (o *GetViewUserQuotasParams) SetMaxViewID(maxViewID *int64) {
	o.MaxViewID = maxViewID
}

// WithOutputFormat adds the outputFormat to the get view user quotas params
func (o *GetViewUserQuotasParams) WithOutputFormat(outputFormat *string) *GetViewUserQuotasParams {
	o.SetOutputFormat(outputFormat)
	return o
}

// SetOutputFormat adds the outputFormat to the get view user quotas params
func (o *GetViewUserQuotasParams) SetOutputFormat(outputFormat *string) {
	o.OutputFormat = outputFormat
}

// WithPageCount adds the pageCount to the get view user quotas params
func (o *GetViewUserQuotasParams) WithPageCount(pageCount *int64) *GetViewUserQuotasParams {
	o.SetPageCount(pageCount)
	return o
}

// SetPageCount adds the pageCount to the get view user quotas params
func (o *GetViewUserQuotasParams) SetPageCount(pageCount *int64) {
	o.PageCount = pageCount
}

// WithSid adds the sid to the get view user quotas params
func (o *GetViewUserQuotasParams) WithSid(sid *string) *GetViewUserQuotasParams {
	o.SetSid(sid)
	return o
}

// SetSid adds the sid to the get view user quotas params
func (o *GetViewUserQuotasParams) SetSid(sid *string) {
	o.Sid = sid
}

// WithSummaryOnly adds the summaryOnly to the get view user quotas params
func (o *GetViewUserQuotasParams) WithSummaryOnly(summaryOnly *bool) *GetViewUserQuotasParams {
	o.SetSummaryOnly(summaryOnly)
	return o
}

// SetSummaryOnly adds the summaryOnly to the get view user quotas params
func (o *GetViewUserQuotasParams) SetSummaryOnly(summaryOnly *bool) {
	o.SummaryOnly = summaryOnly
}

// WithTopQuotas adds the topQuotas to the get view user quotas params
func (o *GetViewUserQuotasParams) WithTopQuotas(topQuotas *int64) *GetViewUserQuotasParams {
	o.SetTopQuotas(topQuotas)
	return o
}

// SetTopQuotas adds the topQuotas to the get view user quotas params
func (o *GetViewUserQuotasParams) SetTopQuotas(topQuotas *int64) {
	o.TopQuotas = topQuotas
}

// WithUnixUID adds the unixUID to the get view user quotas params
func (o *GetViewUserQuotasParams) WithUnixUID(unixUID *uint32) *GetViewUserQuotasParams {
	o.SetUnixUID(unixUID)
	return o
}

// SetUnixUID adds the unixUid to the get view user quotas params
func (o *GetViewUserQuotasParams) SetUnixUID(unixUID *uint32) {
	o.UnixUID = unixUID
}

// WithUserSidsForView adds the userSidsForView to the get view user quotas params
func (o *GetViewUserQuotasParams) WithUserSidsForView(userSidsForView []string) *GetViewUserQuotasParams {
	o.SetUserSidsForView(userSidsForView)
	return o
}

// SetUserSidsForView adds the userSidsForView to the get view user quotas params
func (o *GetViewUserQuotasParams) SetUserSidsForView(userSidsForView []string) {
	o.UserSidsForView = userSidsForView
}

// WithUserUnixIdsForView adds the userUnixIdsForView to the get view user quotas params
func (o *GetViewUserQuotasParams) WithUserUnixIdsForView(userUnixIdsForView []uint32) *GetViewUserQuotasParams {
	o.SetUserUnixIdsForView(userUnixIdsForView)
	return o
}

// SetUserUnixIdsForView adds the userUnixIdsForView to the get view user quotas params
func (o *GetViewUserQuotasParams) SetUserUnixIdsForView(userUnixIdsForView []uint32) {
	o.UserUnixIdsForView = userUnixIdsForView
}

// WithViewName adds the viewName to the get view user quotas params
func (o *GetViewUserQuotasParams) WithViewName(viewName *string) *GetViewUserQuotasParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the get view user quotas params
func (o *GetViewUserQuotasParams) SetViewName(viewName *string) {
	o.ViewName = viewName
}

// WithViewNamesForUser adds the viewNamesForUser to the get view user quotas params
func (o *GetViewUserQuotasParams) WithViewNamesForUser(viewNamesForUser []string) *GetViewUserQuotasParams {
	o.SetViewNamesForUser(viewNamesForUser)
	return o
}

// SetViewNamesForUser adds the viewNamesForUser to the get view user quotas params
func (o *GetViewUserQuotasParams) SetViewNamesForUser(viewNamesForUser []string) {
	o.ViewNamesForUser = viewNamesForUser
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewUserQuotasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.ExcludeUsersWithinAlertThreshold != nil {

		// query param excludeUsersWithinAlertThreshold
		var qrExcludeUsersWithinAlertThreshold bool

		if o.ExcludeUsersWithinAlertThreshold != nil {
			qrExcludeUsersWithinAlertThreshold = *o.ExcludeUsersWithinAlertThreshold
		}
		qExcludeUsersWithinAlertThreshold := swag.FormatBool(qrExcludeUsersWithinAlertThreshold)
		if qExcludeUsersWithinAlertThreshold != "" {

			if err := r.SetQueryParam("excludeUsersWithinAlertThreshold", qExcludeUsersWithinAlertThreshold); err != nil {
				return err
			}
		}
	}

	if o.IncludeUsage != nil {

		// query param includeUsage
		var qrIncludeUsage bool

		if o.IncludeUsage != nil {
			qrIncludeUsage = *o.IncludeUsage
		}
		qIncludeUsage := swag.FormatBool(qrIncludeUsage)
		if qIncludeUsage != "" {

			if err := r.SetQueryParam("includeUsage", qIncludeUsage); err != nil {
				return err
			}
		}
	}

	if o.IncludeUserWithQuotaOnly != nil {

		// query param includeUserWithQuotaOnly
		var qrIncludeUserWithQuotaOnly bool

		if o.IncludeUserWithQuotaOnly != nil {
			qrIncludeUserWithQuotaOnly = *o.IncludeUserWithQuotaOnly
		}
		qIncludeUserWithQuotaOnly := swag.FormatBool(qrIncludeUserWithQuotaOnly)
		if qIncludeUserWithQuotaOnly != "" {

			if err := r.SetQueryParam("includeUserWithQuotaOnly", qIncludeUserWithQuotaOnly); err != nil {
				return err
			}
		}
	}

	if o.MaxViewID != nil {

		// query param maxViewId
		var qrMaxViewID int64

		if o.MaxViewID != nil {
			qrMaxViewID = *o.MaxViewID
		}
		qMaxViewID := swag.FormatInt64(qrMaxViewID)
		if qMaxViewID != "" {

			if err := r.SetQueryParam("maxViewId", qMaxViewID); err != nil {
				return err
			}
		}
	}

	if o.OutputFormat != nil {

		// query param outputFormat
		var qrOutputFormat string

		if o.OutputFormat != nil {
			qrOutputFormat = *o.OutputFormat
		}
		qOutputFormat := qrOutputFormat
		if qOutputFormat != "" {

			if err := r.SetQueryParam("outputFormat", qOutputFormat); err != nil {
				return err
			}
		}
	}

	if o.PageCount != nil {

		// query param pageCount
		var qrPageCount int64

		if o.PageCount != nil {
			qrPageCount = *o.PageCount
		}
		qPageCount := swag.FormatInt64(qrPageCount)
		if qPageCount != "" {

			if err := r.SetQueryParam("pageCount", qPageCount); err != nil {
				return err
			}
		}
	}

	if o.Sid != nil {

		// query param sid
		var qrSid string

		if o.Sid != nil {
			qrSid = *o.Sid
		}
		qSid := qrSid
		if qSid != "" {

			if err := r.SetQueryParam("sid", qSid); err != nil {
				return err
			}
		}
	}

	if o.SummaryOnly != nil {

		// query param summaryOnly
		var qrSummaryOnly bool

		if o.SummaryOnly != nil {
			qrSummaryOnly = *o.SummaryOnly
		}
		qSummaryOnly := swag.FormatBool(qrSummaryOnly)
		if qSummaryOnly != "" {

			if err := r.SetQueryParam("summaryOnly", qSummaryOnly); err != nil {
				return err
			}
		}
	}

	if o.TopQuotas != nil {

		// query param topQuotas
		var qrTopQuotas int64

		if o.TopQuotas != nil {
			qrTopQuotas = *o.TopQuotas
		}
		qTopQuotas := swag.FormatInt64(qrTopQuotas)
		if qTopQuotas != "" {

			if err := r.SetQueryParam("topQuotas", qTopQuotas); err != nil {
				return err
			}
		}
	}

	if o.UnixUID != nil {

		// query param unixUid
		var qrUnixUID uint32

		if o.UnixUID != nil {
			qrUnixUID = *o.UnixUID
		}
		qUnixUID := swag.FormatUint32(qrUnixUID)
		if qUnixUID != "" {

			if err := r.SetQueryParam("unixUid", qUnixUID); err != nil {
				return err
			}
		}
	}

	if o.UserSidsForView != nil {

		// binding items for userSidsForView
		joinedUserSidsForView := o.bindParamUserSidsForView(reg)

		// query array param userSidsForView
		if err := r.SetQueryParam("userSidsForView", joinedUserSidsForView...); err != nil {
			return err
		}
	}

	if o.UserUnixIdsForView != nil {

		// binding items for userUnixIdsForView
		joinedUserUnixIdsForView := o.bindParamUserUnixIdsForView(reg)

		// query array param userUnixIdsForView
		if err := r.SetQueryParam("userUnixIdsForView", joinedUserUnixIdsForView...); err != nil {
			return err
		}
	}

	if o.ViewName != nil {

		// query param viewName
		var qrViewName string

		if o.ViewName != nil {
			qrViewName = *o.ViewName
		}
		qViewName := qrViewName
		if qViewName != "" {

			if err := r.SetQueryParam("viewName", qViewName); err != nil {
				return err
			}
		}
	}

	if o.ViewNamesForUser != nil {

		// binding items for viewNamesForUser
		joinedViewNamesForUser := o.bindParamViewNamesForUser(reg)

		// query array param viewNamesForUser
		if err := r.SetQueryParam("viewNamesForUser", joinedViewNamesForUser...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetViewUserQuotas binds the parameter userSidsForView
func (o *GetViewUserQuotasParams) bindParamUserSidsForView(formats strfmt.Registry) []string {
	userSidsForViewIR := o.UserSidsForView

	var userSidsForViewIC []string
	for _, userSidsForViewIIR := range userSidsForViewIR { // explode []string

		userSidsForViewIIV := userSidsForViewIIR // string as string
		userSidsForViewIC = append(userSidsForViewIC, userSidsForViewIIV)
	}

	// items.CollectionFormat: ""
	userSidsForViewIS := swag.JoinByFormat(userSidsForViewIC, "")

	return userSidsForViewIS
}

// bindParamGetViewUserQuotas binds the parameter userUnixIdsForView
func (o *GetViewUserQuotasParams) bindParamUserUnixIdsForView(formats strfmt.Registry) []string {
	userUnixIdsForViewIR := o.UserUnixIdsForView

	var userUnixIdsForViewIC []string
	for _, userUnixIdsForViewIIR := range userUnixIdsForViewIR { // explode []uint32

		userUnixIdsForViewIIV := swag.FormatUint32(userUnixIdsForViewIIR) // uint32 as string
		userUnixIdsForViewIC = append(userUnixIdsForViewIC, userUnixIdsForViewIIV)
	}

	// items.CollectionFormat: ""
	userUnixIdsForViewIS := swag.JoinByFormat(userUnixIdsForViewIC, "")

	return userUnixIdsForViewIS
}

// bindParamGetViewUserQuotas binds the parameter viewNamesForUser
func (o *GetViewUserQuotasParams) bindParamViewNamesForUser(formats strfmt.Registry) []string {
	viewNamesForUserIR := o.ViewNamesForUser

	var viewNamesForUserIC []string
	for _, viewNamesForUserIIR := range viewNamesForUserIR { // explode []string

		viewNamesForUserIIV := viewNamesForUserIIR // string as string
		viewNamesForUserIC = append(viewNamesForUserIC, viewNamesForUserIIV)
	}

	// items.CollectionFormat: ""
	viewNamesForUserIS := swag.JoinByFormat(viewNamesForUserIC, "")

	return viewNamesForUserIS
}
