// Code generated by go-swagger; DO NOT EDIT.

package remote_cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRemoteClustersParams creates a new GetRemoteClustersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRemoteClustersParams() *GetRemoteClustersParams {
	return &GetRemoteClustersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRemoteClustersParamsWithTimeout creates a new GetRemoteClustersParams object
// with the ability to set a timeout on a request.
func NewGetRemoteClustersParamsWithTimeout(timeout time.Duration) *GetRemoteClustersParams {
	return &GetRemoteClustersParams{
		timeout: timeout,
	}
}

// NewGetRemoteClustersParamsWithContext creates a new GetRemoteClustersParams object
// with the ability to set a context for a request.
func NewGetRemoteClustersParamsWithContext(ctx context.Context) *GetRemoteClustersParams {
	return &GetRemoteClustersParams{
		Context: ctx,
	}
}

// NewGetRemoteClustersParamsWithHTTPClient creates a new GetRemoteClustersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRemoteClustersParamsWithHTTPClient(client *http.Client) *GetRemoteClustersParams {
	return &GetRemoteClustersParams{
		HTTPClient: client,
	}
}

/*
GetRemoteClustersParams contains all the parameters to send to the API endpoint

	for the get remote clusters operation.

	Typically these are written to a http.Request.
*/
type GetRemoteClustersParams struct {

	/* ClusterIds.

	   Filter by a list of Cluster ids.
	*/
	ClusterIds []int64

	/* ClusterNames.

	   Filter by a list of Cluster names.
	*/
	ClusterNames []string

	/* PurposeRemoteAccess.

	   Filter for purpose as Remote Access.
	*/
	PurposeRemoteAccess *bool

	/* PurposeReplication.

	   Filter for purpose as Replication.
	*/
	PurposeReplication *bool

	/* VerifyReverseRegistration.

	   Verify anti connection if set to true.
	*/
	VerifyReverseRegistration *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get remote clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRemoteClustersParams) WithDefaults() *GetRemoteClustersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get remote clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRemoteClustersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get remote clusters params
func (o *GetRemoteClustersParams) WithTimeout(timeout time.Duration) *GetRemoteClustersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get remote clusters params
func (o *GetRemoteClustersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get remote clusters params
func (o *GetRemoteClustersParams) WithContext(ctx context.Context) *GetRemoteClustersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get remote clusters params
func (o *GetRemoteClustersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get remote clusters params
func (o *GetRemoteClustersParams) WithHTTPClient(client *http.Client) *GetRemoteClustersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get remote clusters params
func (o *GetRemoteClustersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterIds adds the clusterIds to the get remote clusters params
func (o *GetRemoteClustersParams) WithClusterIds(clusterIds []int64) *GetRemoteClustersParams {
	o.SetClusterIds(clusterIds)
	return o
}

// SetClusterIds adds the clusterIds to the get remote clusters params
func (o *GetRemoteClustersParams) SetClusterIds(clusterIds []int64) {
	o.ClusterIds = clusterIds
}

// WithClusterNames adds the clusterNames to the get remote clusters params
func (o *GetRemoteClustersParams) WithClusterNames(clusterNames []string) *GetRemoteClustersParams {
	o.SetClusterNames(clusterNames)
	return o
}

// SetClusterNames adds the clusterNames to the get remote clusters params
func (o *GetRemoteClustersParams) SetClusterNames(clusterNames []string) {
	o.ClusterNames = clusterNames
}

// WithPurposeRemoteAccess adds the purposeRemoteAccess to the get remote clusters params
func (o *GetRemoteClustersParams) WithPurposeRemoteAccess(purposeRemoteAccess *bool) *GetRemoteClustersParams {
	o.SetPurposeRemoteAccess(purposeRemoteAccess)
	return o
}

// SetPurposeRemoteAccess adds the purposeRemoteAccess to the get remote clusters params
func (o *GetRemoteClustersParams) SetPurposeRemoteAccess(purposeRemoteAccess *bool) {
	o.PurposeRemoteAccess = purposeRemoteAccess
}

// WithPurposeReplication adds the purposeReplication to the get remote clusters params
func (o *GetRemoteClustersParams) WithPurposeReplication(purposeReplication *bool) *GetRemoteClustersParams {
	o.SetPurposeReplication(purposeReplication)
	return o
}

// SetPurposeReplication adds the purposeReplication to the get remote clusters params
func (o *GetRemoteClustersParams) SetPurposeReplication(purposeReplication *bool) {
	o.PurposeReplication = purposeReplication
}

// WithVerifyReverseRegistration adds the verifyReverseRegistration to the get remote clusters params
func (o *GetRemoteClustersParams) WithVerifyReverseRegistration(verifyReverseRegistration *bool) *GetRemoteClustersParams {
	o.SetVerifyReverseRegistration(verifyReverseRegistration)
	return o
}

// SetVerifyReverseRegistration adds the verifyReverseRegistration to the get remote clusters params
func (o *GetRemoteClustersParams) SetVerifyReverseRegistration(verifyReverseRegistration *bool) {
	o.VerifyReverseRegistration = verifyReverseRegistration
}

// WriteToRequest writes these params to a swagger request
func (o *GetRemoteClustersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterIds != nil {

		// binding items for clusterIds
		joinedClusterIds := o.bindParamClusterIds(reg)

		// query array param clusterIds
		if err := r.SetQueryParam("clusterIds", joinedClusterIds...); err != nil {
			return err
		}
	}

	if o.ClusterNames != nil {

		// binding items for clusterNames
		joinedClusterNames := o.bindParamClusterNames(reg)

		// query array param clusterNames
		if err := r.SetQueryParam("clusterNames", joinedClusterNames...); err != nil {
			return err
		}
	}

	if o.PurposeRemoteAccess != nil {

		// query param purposeRemoteAccess
		var qrPurposeRemoteAccess bool

		if o.PurposeRemoteAccess != nil {
			qrPurposeRemoteAccess = *o.PurposeRemoteAccess
		}
		qPurposeRemoteAccess := swag.FormatBool(qrPurposeRemoteAccess)
		if qPurposeRemoteAccess != "" {

			if err := r.SetQueryParam("purposeRemoteAccess", qPurposeRemoteAccess); err != nil {
				return err
			}
		}
	}

	if o.PurposeReplication != nil {

		// query param purposeReplication
		var qrPurposeReplication bool

		if o.PurposeReplication != nil {
			qrPurposeReplication = *o.PurposeReplication
		}
		qPurposeReplication := swag.FormatBool(qrPurposeReplication)
		if qPurposeReplication != "" {

			if err := r.SetQueryParam("purposeReplication", qPurposeReplication); err != nil {
				return err
			}
		}
	}

	if o.VerifyReverseRegistration != nil {

		// query param verifyReverseRegistration
		var qrVerifyReverseRegistration bool

		if o.VerifyReverseRegistration != nil {
			qrVerifyReverseRegistration = *o.VerifyReverseRegistration
		}
		qVerifyReverseRegistration := swag.FormatBool(qrVerifyReverseRegistration)
		if qVerifyReverseRegistration != "" {

			if err := r.SetQueryParam("verifyReverseRegistration", qVerifyReverseRegistration); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetRemoteClusters binds the parameter clusterIds
func (o *GetRemoteClustersParams) bindParamClusterIds(formats strfmt.Registry) []string {
	clusterIdsIR := o.ClusterIds

	var clusterIdsIC []string
	for _, clusterIdsIIR := range clusterIdsIR { // explode []int64

		clusterIdsIIV := swag.FormatInt64(clusterIdsIIR) // int64 as string
		clusterIdsIC = append(clusterIdsIC, clusterIdsIIV)
	}

	// items.CollectionFormat: ""
	clusterIdsIS := swag.JoinByFormat(clusterIdsIC, "")

	return clusterIdsIS
}

// bindParamGetRemoteClusters binds the parameter clusterNames
func (o *GetRemoteClustersParams) bindParamClusterNames(formats strfmt.Registry) []string {
	clusterNamesIR := o.ClusterNames

	var clusterNamesIC []string
	for _, clusterNamesIIR := range clusterNamesIR { // explode []string

		clusterNamesIIV := clusterNamesIIR // string as string
		clusterNamesIC = append(clusterNamesIC, clusterNamesIIV)
	}

	// items.CollectionFormat: ""
	clusterNamesIS := swag.JoinByFormat(clusterNamesIC, "")

	return clusterNamesIS
}
