// Code generated by go-swagger; DO NOT EDIT.

package tenant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTenantsProxyConfigParams creates a new GetTenantsProxyConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTenantsProxyConfigParams() *GetTenantsProxyConfigParams {
	return &GetTenantsProxyConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTenantsProxyConfigParamsWithTimeout creates a new GetTenantsProxyConfigParams object
// with the ability to set a timeout on a request.
func NewGetTenantsProxyConfigParamsWithTimeout(timeout time.Duration) *GetTenantsProxyConfigParams {
	return &GetTenantsProxyConfigParams{
		timeout: timeout,
	}
}

// NewGetTenantsProxyConfigParamsWithContext creates a new GetTenantsProxyConfigParams object
// with the ability to set a context for a request.
func NewGetTenantsProxyConfigParamsWithContext(ctx context.Context) *GetTenantsProxyConfigParams {
	return &GetTenantsProxyConfigParams{
		Context: ctx,
	}
}

// NewGetTenantsProxyConfigParamsWithHTTPClient creates a new GetTenantsProxyConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTenantsProxyConfigParamsWithHTTPClient(client *http.Client) *GetTenantsProxyConfigParams {
	return &GetTenantsProxyConfigParams{
		HTTPClient: client,
	}
}

/*
GetTenantsProxyConfigParams contains all the parameters to send to the API endpoint

	for the get tenants proxy config operation.

	Typically these are written to a http.Request.
*/
type GetTenantsProxyConfigParams struct {

	/* ConnectionID.

	   Specifies the id of the connection.

	   Format: int64
	*/
	ConnectionID *int64

	/* ID.

	   Specifies the id of the tenant.
	*/
	ID *string

	/* ValidateOnly.

	   Specifies whether to only validate the config request.
	*/
	ValidateOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get tenants proxy config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTenantsProxyConfigParams) WithDefaults() *GetTenantsProxyConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get tenants proxy config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTenantsProxyConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) WithTimeout(timeout time.Duration) *GetTenantsProxyConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) WithContext(ctx context.Context) *GetTenantsProxyConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) WithHTTPClient(client *http.Client) *GetTenantsProxyConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionID adds the connectionID to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) WithConnectionID(connectionID *int64) *GetTenantsProxyConfigParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) SetConnectionID(connectionID *int64) {
	o.ConnectionID = connectionID
}

// WithID adds the id to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) WithID(id *string) *GetTenantsProxyConfigParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) SetID(id *string) {
	o.ID = id
}

// WithValidateOnly adds the validateOnly to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) WithValidateOnly(validateOnly *bool) *GetTenantsProxyConfigParams {
	o.SetValidateOnly(validateOnly)
	return o
}

// SetValidateOnly adds the validateOnly to the get tenants proxy config params
func (o *GetTenantsProxyConfigParams) SetValidateOnly(validateOnly *bool) {
	o.ValidateOnly = validateOnly
}

// WriteToRequest writes these params to a swagger request
func (o *GetTenantsProxyConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConnectionID != nil {

		// query param connectionId
		var qrConnectionID int64

		if o.ConnectionID != nil {
			qrConnectionID = *o.ConnectionID
		}
		qConnectionID := swag.FormatInt64(qrConnectionID)
		if qConnectionID != "" {

			if err := r.SetQueryParam("connectionId", qConnectionID); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.ValidateOnly != nil {

		// query param validateOnly
		var qrValidateOnly bool

		if o.ValidateOnly != nil {
			qrValidateOnly = *o.ValidateOnly
		}
		qValidateOnly := swag.FormatBool(qrValidateOnly)
		if qValidateOnly != "" {

			if err := r.SetQueryParam("validateOnly", qValidateOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
