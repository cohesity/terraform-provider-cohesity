// Code generated by go-swagger; DO NOT EDIT.

package tenant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new tenant API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new tenant API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new tenant API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for tenant API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTenant(params *CreateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTenantCreated, error)

	DeleteTenant(params *DeleteTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTenantNoContent, error)

	DownloadTenantsProxy(params *DownloadTenantsProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadTenantsProxyOK, error)

	GetTenants(params *GetTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantsOK, error)

	GetTenantsProxies(params *GetTenantsProxiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantsProxiesOK, error)

	GetTenantsProxyConfig(params *GetTenantsProxyConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantsProxyConfigOK, error)

	UpdateTenant(params *UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantOK, error)

	UpdateTenantActiveDirectory(params *UpdateTenantActiveDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantActiveDirectoryOK, error)

	UpdateTenantEntity(params *UpdateTenantEntityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantEntityOK, error)

	UpdateTenantGroups(params *UpdateTenantGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantGroupsOK, error)

	UpdateTenantLdapProvider(params *UpdateTenantLdapProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantLdapProviderOK, error)

	UpdateTenantProtectionJob(params *UpdateTenantProtectionJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantProtectionJobOK, error)

	UpdateTenantProtectionPolicy(params *UpdateTenantProtectionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantProtectionPolicyOK, error)

	UpdateTenantUsers(params *UpdateTenantUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantUsersOK, error)

	UpdateTenantView(params *UpdateTenantViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantViewOK, error)

	UpdateTenantViewBox(params *UpdateTenantViewBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantViewBoxOK, error)

	UpdateTenantVlan(params *UpdateTenantVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantVlanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateTenant creates add a new tenant to the cohesity cluster

	**Privileges:** ```ORGANIZATION_MODIFY``` <br><br>A tenant is required to support MultiTenant architecture for service provider

(SP) to facilitate data and view segregations in the Cohesity Dashboard.

Returns the created/added tenant.
*/
func (a *Client) CreateTenant(params *CreateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTenantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTenant",
		Method:             "POST",
		PathPattern:        "/public/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTenantDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTenant deletes an existing tenant on the cohesity cluster

**Privileges:** ```ORGANIZATION_MODIFY``` <br><br>Returns success if the specified tenant is deleted.
*/
func (a *Client) DeleteTenant(params *DeleteTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTenantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTenant",
		Method:             "DELETE",
		PathPattern:        "/public/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTenantNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTenantDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DownloadTenantsProxy downloads the tenants proxy

**Privileges:** ```HYBRID_EXTENDER_DOWNLOAD, ORGANIZATION_MODIFY``` <br><br>Returns the tenant proxy to be downloaded.
*/
func (a *Client) DownloadTenantsProxy(params *DownloadTenantsProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadTenantsProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadTenantsProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadTenantsProxy",
		Method:             "GET",
		PathPattern:        "/public/tenants/proxy/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadTenantsProxyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadTenantsProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DownloadTenantsProxyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenants lists the tenants on the cohesity cluster filtered by tenant ID prefixed to list tenants for the respective tenant admin

**Privileges:** ```ORGANIZATION_VIEW``` <br><br>Returns the list of tenants.
*/
func (a *Client) GetTenants(params *GetTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTenants",
		Method:             "GET",
		PathPattern:        "/public/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTenantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantsProxies lists proxies for tenant which are running within tenant s environment

**Privileges:** ```HYBRID_EXTENDER_VIEW, ORGANIZATION_VIEW``` <br><br>Returns the list of proxies.
*/
func (a *Client) GetTenantsProxies(params *GetTenantsProxiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantsProxiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsProxiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTenantsProxies",
		Method:             "GET",
		PathPattern:        "/public/tenants/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTenantsProxiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsProxiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsProxiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantsProxyConfig gets proxy config for tenant

**Privileges:** ```HYBRID_EXTENDER_DOWNLOAD, ORGANIZATION_MODIFY``` <br><br>Returns the config for tenants proxy.
*/
func (a *Client) GetTenantsProxyConfig(params *GetTenantsProxyConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantsProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsProxyConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTenantsProxyConfig",
		Method:             "GET",
		PathPattern:        "/public/tenants/proxy/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTenantsProxyConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsProxyConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantsProxyConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTenant updates an existing tenant on the cohesity cluster

**Privileges:** ```ORGANIZATION_MODIFY``` <br><br>Returns the tenant that was updated on the Cohesity Cluster.
*/
func (a *Client) UpdateTenant(params *UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenant",
		Method:             "PUT",
		PathPattern:        "/public/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateTenantActiveDirectory updates active directory for an existing tenant on the cohesity cluster

	**Privileges:** ```ORGANIZATION_MODIFY, PRINCIPAL_MODIFY``` <br><br>Returns success if the update for Active Directory is successful for specified

tenant.
*/
func (a *Client) UpdateTenantActiveDirectory(params *UpdateTenantActiveDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantActiveDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantActiveDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantActiveDirectory",
		Method:             "PUT",
		PathPattern:        "/public/tenants/activeDirectory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantActiveDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantActiveDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantActiveDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateTenantEntity updates entity permission for an existing tenant on the cohesity cluster

	**Privileges:** ```ORGANIZATION_MODIFY, PROTECTION_SOURCE_MODIFY``` <br><br>Returns success if the update for entity permission data is successful for

specified tenant.
*/
func (a *Client) UpdateTenantEntity(params *UpdateTenantEntityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantEntityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantEntity",
		Method:             "PUT",
		PathPattern:        "/public/tenants/entity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantEntityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantEntityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantEntityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTenantGroups updates existing groups to an existing tenant on the cohesity cluster

**Privileges:** ```ORGANIZATION_MODIFY, PRINCIPAL_MODIFY``` <br><br>Returns success if the update for groups is successful for specified tenant.
*/
func (a *Client) UpdateTenantGroups(params *UpdateTenantGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantGroups",
		Method:             "PUT",
		PathPattern:        "/public/tenants/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateTenantLdapProvider updates ldap providers for an existing tenant on the cohesity cluster

	**Privileges:** ```ORGANIZATION_MODIFY, PRINCIPAL_MODIFY``` <br><br>Returns success if the update for Ldap Providers is successful for specified

tenant.
*/
func (a *Client) UpdateTenantLdapProvider(params *UpdateTenantLdapProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantLdapProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantLdapProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantLdapProvider",
		Method:             "PUT",
		PathPattern:        "/public/tenants/ldapProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantLdapProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantLdapProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantLdapProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateTenantProtectionJob updates protection job for an existing tenant on the cohesity cluster

	**Privileges:** ```ORGANIZATION_MODIFY, PROTECTION_MODIFY``` <br><br>Returns success if the update for protection job is successful for specified

tenant.
*/
func (a *Client) UpdateTenantProtectionJob(params *UpdateTenantProtectionJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantProtectionJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantProtectionJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantProtectionJob",
		Method:             "PUT",
		PathPattern:        "/public/tenants/protectionJob",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantProtectionJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantProtectionJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantProtectionJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateTenantProtectionPolicy updates protection policy permission for an existing tenant on the cohesity cluster

	**Privileges:** ```ORGANIZATION_MODIFY``` <br><br>Returns success if the update for protection policy permission data is

successful for the specified tenant.
*/
func (a *Client) UpdateTenantProtectionPolicy(params *UpdateTenantProtectionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantProtectionPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantProtectionPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantProtectionPolicy",
		Method:             "PUT",
		PathPattern:        "/public/tenants/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantProtectionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantProtectionPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantProtectionPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTenantUsers updates existing users to an existing tenant on the cohesity cluster

**Privileges:** ```ORGANIZATION_MODIFY, PRINCIPAL_MODIFY``` <br><br>Returns success if the update for users data is successful for specified tenant.
*/
func (a *Client) UpdateTenantUsers(params *UpdateTenantUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantUsers",
		Method:             "PUT",
		PathPattern:        "/public/tenants/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateTenantView updates views permission for an existing tenant on the cohesity cluster

	**Privileges:** ```ORGANIZATION_MODIFY``` <br><br>Returns success if the update for views permission data is successful for

specified tenant.
*/
func (a *Client) UpdateTenantView(params *UpdateTenantViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantView",
		Method:             "PUT",
		PathPattern:        "/public/tenants/view",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateTenantViewBox updates view box for an existing tenant on the cohesity cluster

	**Privileges:** ```ORGANIZATION_MODIFY, STORAGE_DOMAIN_MODIFY``` <br><br>Returns success if the update for view box data is successful for specified

tenant.
*/
func (a *Client) UpdateTenantViewBox(params *UpdateTenantViewBoxParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantViewBoxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantViewBoxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantViewBox",
		Method:             "PUT",
		PathPattern:        "/public/tenants/viewBox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantViewBoxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantViewBoxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantViewBoxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTenantVlan updates vlan for an existing tenant on the cohesity cluster

**Privileges:** ```ORGANIZATION_MODIFY, CLUSTER_MODIFY``` <br><br>Returns success if the update for vlan data is successful for specified tenant.
*/
func (a *Client) UpdateTenantVlan(params *UpdateTenantVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantVlan",
		Method:             "PUT",
		PathPattern:        "/public/tenants/vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantVlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
