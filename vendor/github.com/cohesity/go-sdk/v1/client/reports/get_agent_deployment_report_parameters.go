// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAgentDeploymentReportParams creates a new GetAgentDeploymentReportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAgentDeploymentReportParams() *GetAgentDeploymentReportParams {
	return &GetAgentDeploymentReportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAgentDeploymentReportParamsWithTimeout creates a new GetAgentDeploymentReportParams object
// with the ability to set a timeout on a request.
func NewGetAgentDeploymentReportParamsWithTimeout(timeout time.Duration) *GetAgentDeploymentReportParams {
	return &GetAgentDeploymentReportParams{
		timeout: timeout,
	}
}

// NewGetAgentDeploymentReportParamsWithContext creates a new GetAgentDeploymentReportParams object
// with the ability to set a context for a request.
func NewGetAgentDeploymentReportParamsWithContext(ctx context.Context) *GetAgentDeploymentReportParams {
	return &GetAgentDeploymentReportParams{
		Context: ctx,
	}
}

// NewGetAgentDeploymentReportParamsWithHTTPClient creates a new GetAgentDeploymentReportParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAgentDeploymentReportParamsWithHTTPClient(client *http.Client) *GetAgentDeploymentReportParams {
	return &GetAgentDeploymentReportParams{
		HTTPClient: client,
	}
}

/*
GetAgentDeploymentReportParams contains all the parameters to send to the API endpoint

	for the get agent deployment report operation.

	Typically these are written to a http.Request.
*/
type GetAgentDeploymentReportParams struct {

	/* CompactVersion.

	     Specifies the compact version of Cohesity agent. For example, 6.0.1.
	Setting this parameter will filter the response based on installed agent
	version.
	*/
	CompactVersion *string

	/* HealthStatus.

	     Specifies the health status of the Cohesity agent. Setting this parameter
	will filter the response based on agent health status.
	Specifies the status of the agent running on a physical source.
	'kUnknown' indicates the Agent is not known. No attempt to connect
	to the Agent has occurred.
	'kUnreachable' indicates the Agent is not reachable.
	'kHealthy' indicates the Agent is healthy.
	'kDegraded' indicates the Agent is running but in a degraded state.
	*/
	HealthStatus []string

	/* HostOsType.

	     Specifies the host type on which the Cohesity agent is installed.
	Setting this parameter will filter the response based on host OS type on
	which agent is running.
	'kLinux' indicates the Linux operating system.
	'kWindows' indicates the Microsoft Windows operating system.
	'kAix' indicates the IBM AIX operating system.
	'kSolaris' indicates the Oracle Solaris operating system.
	'kSapHana' indicates the Sap Hana database system developed by SAP SE.
	'kSapOracle' indicates the Sap Oracle database system developed by SAP SE.
	'kCockroachDB' indicates the CockroachDB database system.
	'kMySQL' indicates the MySQL database system.
	'kSapSybase' indicates the SapSybase database system.
	'kSapMaxDB' indicates the SapMaxDB database system.
	'kSapSybaseIQ' indicates the SapSybaseIQ database system.
	'kDB2' indicates the DB2 database system.
	'kSapASE' indicates the SapASE database system.
	'kMariaDB' indicates the MariaDB database system.
	'kPostgreSQL' indicates the PostgreSQL database system.
	'kHPUX' indicates the HPUX database system.
	'kVOS' indicates the VOS database system.
	'kOther' indicates the other types of operating system.
	*/
	HostOsType []string

	/* OutputFormat.

	     Specifies the format for the output such as 'csv' or 'json'.
	If not specified, the json format is returned.
	If 'csv' is specified, a comma-separated list with a heading
	row is returned.
	*/
	OutputFormat *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get agent deployment report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAgentDeploymentReportParams) WithDefaults() *GetAgentDeploymentReportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get agent deployment report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAgentDeploymentReportParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) WithTimeout(timeout time.Duration) *GetAgentDeploymentReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) WithContext(ctx context.Context) *GetAgentDeploymentReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) WithHTTPClient(client *http.Client) *GetAgentDeploymentReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompactVersion adds the compactVersion to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) WithCompactVersion(compactVersion *string) *GetAgentDeploymentReportParams {
	o.SetCompactVersion(compactVersion)
	return o
}

// SetCompactVersion adds the compactVersion to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) SetCompactVersion(compactVersion *string) {
	o.CompactVersion = compactVersion
}

// WithHealthStatus adds the healthStatus to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) WithHealthStatus(healthStatus []string) *GetAgentDeploymentReportParams {
	o.SetHealthStatus(healthStatus)
	return o
}

// SetHealthStatus adds the healthStatus to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) SetHealthStatus(healthStatus []string) {
	o.HealthStatus = healthStatus
}

// WithHostOsType adds the hostOsType to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) WithHostOsType(hostOsType []string) *GetAgentDeploymentReportParams {
	o.SetHostOsType(hostOsType)
	return o
}

// SetHostOsType adds the hostOsType to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) SetHostOsType(hostOsType []string) {
	o.HostOsType = hostOsType
}

// WithOutputFormat adds the outputFormat to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) WithOutputFormat(outputFormat *string) *GetAgentDeploymentReportParams {
	o.SetOutputFormat(outputFormat)
	return o
}

// SetOutputFormat adds the outputFormat to the get agent deployment report params
func (o *GetAgentDeploymentReportParams) SetOutputFormat(outputFormat *string) {
	o.OutputFormat = outputFormat
}

// WriteToRequest writes these params to a swagger request
func (o *GetAgentDeploymentReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CompactVersion != nil {

		// query param compactVersion
		var qrCompactVersion string

		if o.CompactVersion != nil {
			qrCompactVersion = *o.CompactVersion
		}
		qCompactVersion := qrCompactVersion
		if qCompactVersion != "" {

			if err := r.SetQueryParam("compactVersion", qCompactVersion); err != nil {
				return err
			}
		}
	}

	if o.HealthStatus != nil {

		// binding items for healthStatus
		joinedHealthStatus := o.bindParamHealthStatus(reg)

		// query array param healthStatus
		if err := r.SetQueryParam("healthStatus", joinedHealthStatus...); err != nil {
			return err
		}
	}

	if o.HostOsType != nil {

		// binding items for hostOsType
		joinedHostOsType := o.bindParamHostOsType(reg)

		// query array param hostOsType
		if err := r.SetQueryParam("hostOsType", joinedHostOsType...); err != nil {
			return err
		}
	}

	if o.OutputFormat != nil {

		// query param outputFormat
		var qrOutputFormat string

		if o.OutputFormat != nil {
			qrOutputFormat = *o.OutputFormat
		}
		qOutputFormat := qrOutputFormat
		if qOutputFormat != "" {

			if err := r.SetQueryParam("outputFormat", qOutputFormat); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAgentDeploymentReport binds the parameter healthStatus
func (o *GetAgentDeploymentReportParams) bindParamHealthStatus(formats strfmt.Registry) []string {
	healthStatusIR := o.HealthStatus

	var healthStatusIC []string
	for _, healthStatusIIR := range healthStatusIR { // explode []string

		healthStatusIIV := healthStatusIIR // string as string
		healthStatusIC = append(healthStatusIC, healthStatusIIV)
	}

	// items.CollectionFormat: ""
	healthStatusIS := swag.JoinByFormat(healthStatusIC, "")

	return healthStatusIS
}

// bindParamGetAgentDeploymentReport binds the parameter hostOsType
func (o *GetAgentDeploymentReportParams) bindParamHostOsType(formats strfmt.Registry) []string {
	hostOsTypeIR := o.HostOsType

	var hostOsTypeIC []string
	for _, hostOsTypeIIR := range hostOsTypeIR { // explode []string

		hostOsTypeIIV := hostOsTypeIIR // string as string
		hostOsTypeIC = append(hostOsTypeIC, hostOsTypeIIV)
	}

	// items.CollectionFormat: ""
	hostOsTypeIS := swag.JoinByFormat(hostOsTypeIC, "")

	return hostOsTypeIS
}
