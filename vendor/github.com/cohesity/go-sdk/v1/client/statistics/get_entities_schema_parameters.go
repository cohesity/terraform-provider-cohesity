// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetEntitiesSchemaParams creates a new GetEntitiesSchemaParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetEntitiesSchemaParams() *GetEntitiesSchemaParams {
	return &GetEntitiesSchemaParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetEntitiesSchemaParamsWithTimeout creates a new GetEntitiesSchemaParams object
// with the ability to set a timeout on a request.
func NewGetEntitiesSchemaParamsWithTimeout(timeout time.Duration) *GetEntitiesSchemaParams {
	return &GetEntitiesSchemaParams{
		timeout: timeout,
	}
}

// NewGetEntitiesSchemaParamsWithContext creates a new GetEntitiesSchemaParams object
// with the ability to set a context for a request.
func NewGetEntitiesSchemaParamsWithContext(ctx context.Context) *GetEntitiesSchemaParams {
	return &GetEntitiesSchemaParams{
		Context: ctx,
	}
}

// NewGetEntitiesSchemaParamsWithHTTPClient creates a new GetEntitiesSchemaParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetEntitiesSchemaParamsWithHTTPClient(client *http.Client) *GetEntitiesSchemaParams {
	return &GetEntitiesSchemaParams{
		HTTPClient: client,
	}
}

/*
GetEntitiesSchemaParams contains all the parameters to send to the API endpoint

	for the get entities schema operation.

	Typically these are written to a http.Request.
*/
type GetEntitiesSchemaParams struct {

	/* MetricNames.

	     Specifies the list of metric names to filter by such as 'kRandomIos'
	which corresponds to 'Random IOs' in Advanced Diagnostics
	of the Cohesity Dashboard.
	*/
	MetricNames []string

	/* SchemaNames.

	     Specifies the list of schema names to filter by such as
	'kIceboxJobVaultStats' which corresponds to 'External Target Job Stats'
	in Advanced Diagnostics of the Cohesity Dashboard.
	*/
	SchemaNames []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get entities schema params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEntitiesSchemaParams) WithDefaults() *GetEntitiesSchemaParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get entities schema params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEntitiesSchemaParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get entities schema params
func (o *GetEntitiesSchemaParams) WithTimeout(timeout time.Duration) *GetEntitiesSchemaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get entities schema params
func (o *GetEntitiesSchemaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get entities schema params
func (o *GetEntitiesSchemaParams) WithContext(ctx context.Context) *GetEntitiesSchemaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get entities schema params
func (o *GetEntitiesSchemaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get entities schema params
func (o *GetEntitiesSchemaParams) WithHTTPClient(client *http.Client) *GetEntitiesSchemaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get entities schema params
func (o *GetEntitiesSchemaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMetricNames adds the metricNames to the get entities schema params
func (o *GetEntitiesSchemaParams) WithMetricNames(metricNames []string) *GetEntitiesSchemaParams {
	o.SetMetricNames(metricNames)
	return o
}

// SetMetricNames adds the metricNames to the get entities schema params
func (o *GetEntitiesSchemaParams) SetMetricNames(metricNames []string) {
	o.MetricNames = metricNames
}

// WithSchemaNames adds the schemaNames to the get entities schema params
func (o *GetEntitiesSchemaParams) WithSchemaNames(schemaNames []string) *GetEntitiesSchemaParams {
	o.SetSchemaNames(schemaNames)
	return o
}

// SetSchemaNames adds the schemaNames to the get entities schema params
func (o *GetEntitiesSchemaParams) SetSchemaNames(schemaNames []string) {
	o.SchemaNames = schemaNames
}

// WriteToRequest writes these params to a swagger request
func (o *GetEntitiesSchemaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MetricNames != nil {

		// binding items for metricNames
		joinedMetricNames := o.bindParamMetricNames(reg)

		// query array param metricNames
		if err := r.SetQueryParam("metricNames", joinedMetricNames...); err != nil {
			return err
		}
	}

	if o.SchemaNames != nil {

		// binding items for schemaNames
		joinedSchemaNames := o.bindParamSchemaNames(reg)

		// query array param schemaNames
		if err := r.SetQueryParam("schemaNames", joinedSchemaNames...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetEntitiesSchema binds the parameter metricNames
func (o *GetEntitiesSchemaParams) bindParamMetricNames(formats strfmt.Registry) []string {
	metricNamesIR := o.MetricNames

	var metricNamesIC []string
	for _, metricNamesIIR := range metricNamesIR { // explode []string

		metricNamesIIV := metricNamesIIR // string as string
		metricNamesIC = append(metricNamesIC, metricNamesIIV)
	}

	// items.CollectionFormat: ""
	metricNamesIS := swag.JoinByFormat(metricNamesIC, "")

	return metricNamesIS
}

// bindParamGetEntitiesSchema binds the parameter schemaNames
func (o *GetEntitiesSchemaParams) bindParamSchemaNames(formats strfmt.Registry) []string {
	schemaNamesIR := o.SchemaNames

	var schemaNamesIC []string
	for _, schemaNamesIIR := range schemaNamesIR { // explode []string

		schemaNamesIIV := schemaNamesIIR // string as string
		schemaNamesIC = append(schemaNamesIC, schemaNamesIIV)
	}

	// items.CollectionFormat: ""
	schemaNamesIS := swag.JoinByFormat(schemaNamesIC, "")

	return schemaNamesIS
}
