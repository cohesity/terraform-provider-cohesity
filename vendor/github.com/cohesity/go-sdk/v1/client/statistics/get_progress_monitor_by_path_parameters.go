// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cohesity/go-sdk/v1/models"
)

// NewGetProgressMonitorByPathParams creates a new GetProgressMonitorByPathParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProgressMonitorByPathParams() *GetProgressMonitorByPathParams {
	return &GetProgressMonitorByPathParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProgressMonitorByPathParamsWithTimeout creates a new GetProgressMonitorByPathParams object
// with the ability to set a timeout on a request.
func NewGetProgressMonitorByPathParamsWithTimeout(timeout time.Duration) *GetProgressMonitorByPathParams {
	return &GetProgressMonitorByPathParams{
		timeout: timeout,
	}
}

// NewGetProgressMonitorByPathParamsWithContext creates a new GetProgressMonitorByPathParams object
// with the ability to set a context for a request.
func NewGetProgressMonitorByPathParamsWithContext(ctx context.Context) *GetProgressMonitorByPathParams {
	return &GetProgressMonitorByPathParams{
		Context: ctx,
	}
}

// NewGetProgressMonitorByPathParamsWithHTTPClient creates a new GetProgressMonitorByPathParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProgressMonitorByPathParamsWithHTTPClient(client *http.Client) *GetProgressMonitorByPathParams {
	return &GetProgressMonitorByPathParams{
		HTTPClient: client,
	}
}

/*
GetProgressMonitorByPathParams contains all the parameters to send to the API endpoint

	for the get progress monitor by path operation.

	Typically these are written to a http.Request.
*/
type GetProgressMonitorByPathParams struct {

	// Body.
	Body *models.GetTasksArg

	/* EndTimeSecs.

	   Tasks that ended before this time.

	   Format: int64
	*/
	EndTimeSecs *int64

	/* ExcludeSubTasks.

	     Skip information about the sub tasks of the matching root and sub tasks.
	By default, the entire task tree will be returned for matching tasks.
	*/
	ExcludeSubTasks *bool

	/* IncludeFinishedTasks.

	     Returns finished tasks as well.
	By default, Pulse only returns active tasks.
	*/
	IncludeFinishedTasks *bool

	/* MaxTasks.

	     Only return at most these many matching tasks. This constraint is applied
	with each query's result group.

	     Format: int32
	*/
	MaxTasks *int32

	/* Path.

	   Path of the tasks to get status from in Pulse
	*/
	Path string

	/* StartTimeSecs.

	   Tasks that started after this time.

	   Format: int64
	*/
	StartTimeSecs *int64

	/* TaskPathVec.

	     The hierarchical paths to the names of the tasks being queried.
	The task path-name specified here can be a prefix.
	Clients can specify multiple paths/prefixes. Pulse will return one
	ResultGroup for each path query.

	Each path is treated separately by Pulse, so if there are duplicate paths,
	Pulse will return duplicate results.

	Both root tasks and sub tasks can be specified in @task_path_vec.
	*/
	TaskPathVec []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get progress monitor by path params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProgressMonitorByPathParams) WithDefaults() *GetProgressMonitorByPathParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get progress monitor by path params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProgressMonitorByPathParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithTimeout(timeout time.Duration) *GetProgressMonitorByPathParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithContext(ctx context.Context) *GetProgressMonitorByPathParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithHTTPClient(client *http.Client) *GetProgressMonitorByPathParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithBody(body *models.GetTasksArg) *GetProgressMonitorByPathParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetBody(body *models.GetTasksArg) {
	o.Body = body
}

// WithEndTimeSecs adds the endTimeSecs to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithEndTimeSecs(endTimeSecs *int64) *GetProgressMonitorByPathParams {
	o.SetEndTimeSecs(endTimeSecs)
	return o
}

// SetEndTimeSecs adds the endTimeSecs to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetEndTimeSecs(endTimeSecs *int64) {
	o.EndTimeSecs = endTimeSecs
}

// WithExcludeSubTasks adds the excludeSubTasks to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithExcludeSubTasks(excludeSubTasks *bool) *GetProgressMonitorByPathParams {
	o.SetExcludeSubTasks(excludeSubTasks)
	return o
}

// SetExcludeSubTasks adds the excludeSubTasks to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetExcludeSubTasks(excludeSubTasks *bool) {
	o.ExcludeSubTasks = excludeSubTasks
}

// WithIncludeFinishedTasks adds the includeFinishedTasks to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithIncludeFinishedTasks(includeFinishedTasks *bool) *GetProgressMonitorByPathParams {
	o.SetIncludeFinishedTasks(includeFinishedTasks)
	return o
}

// SetIncludeFinishedTasks adds the includeFinishedTasks to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetIncludeFinishedTasks(includeFinishedTasks *bool) {
	o.IncludeFinishedTasks = includeFinishedTasks
}

// WithMaxTasks adds the maxTasks to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithMaxTasks(maxTasks *int32) *GetProgressMonitorByPathParams {
	o.SetMaxTasks(maxTasks)
	return o
}

// SetMaxTasks adds the maxTasks to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetMaxTasks(maxTasks *int32) {
	o.MaxTasks = maxTasks
}

// WithPath adds the path to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithPath(path string) *GetProgressMonitorByPathParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetPath(path string) {
	o.Path = path
}

// WithStartTimeSecs adds the startTimeSecs to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithStartTimeSecs(startTimeSecs *int64) *GetProgressMonitorByPathParams {
	o.SetStartTimeSecs(startTimeSecs)
	return o
}

// SetStartTimeSecs adds the startTimeSecs to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetStartTimeSecs(startTimeSecs *int64) {
	o.StartTimeSecs = startTimeSecs
}

// WithTaskPathVec adds the taskPathVec to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) WithTaskPathVec(taskPathVec []string) *GetProgressMonitorByPathParams {
	o.SetTaskPathVec(taskPathVec)
	return o
}

// SetTaskPathVec adds the taskPathVec to the get progress monitor by path params
func (o *GetProgressMonitorByPathParams) SetTaskPathVec(taskPathVec []string) {
	o.TaskPathVec = taskPathVec
}

// WriteToRequest writes these params to a swagger request
func (o *GetProgressMonitorByPathParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.EndTimeSecs != nil {

		// query param endTimeSecs
		var qrEndTimeSecs int64

		if o.EndTimeSecs != nil {
			qrEndTimeSecs = *o.EndTimeSecs
		}
		qEndTimeSecs := swag.FormatInt64(qrEndTimeSecs)
		if qEndTimeSecs != "" {

			if err := r.SetQueryParam("endTimeSecs", qEndTimeSecs); err != nil {
				return err
			}
		}
	}

	if o.ExcludeSubTasks != nil {

		// query param excludeSubTasks
		var qrExcludeSubTasks bool

		if o.ExcludeSubTasks != nil {
			qrExcludeSubTasks = *o.ExcludeSubTasks
		}
		qExcludeSubTasks := swag.FormatBool(qrExcludeSubTasks)
		if qExcludeSubTasks != "" {

			if err := r.SetQueryParam("excludeSubTasks", qExcludeSubTasks); err != nil {
				return err
			}
		}
	}

	if o.IncludeFinishedTasks != nil {

		// query param includeFinishedTasks
		var qrIncludeFinishedTasks bool

		if o.IncludeFinishedTasks != nil {
			qrIncludeFinishedTasks = *o.IncludeFinishedTasks
		}
		qIncludeFinishedTasks := swag.FormatBool(qrIncludeFinishedTasks)
		if qIncludeFinishedTasks != "" {

			if err := r.SetQueryParam("includeFinishedTasks", qIncludeFinishedTasks); err != nil {
				return err
			}
		}
	}

	if o.MaxTasks != nil {

		// query param maxTasks
		var qrMaxTasks int32

		if o.MaxTasks != nil {
			qrMaxTasks = *o.MaxTasks
		}
		qMaxTasks := swag.FormatInt32(qrMaxTasks)
		if qMaxTasks != "" {

			if err := r.SetQueryParam("maxTasks", qMaxTasks); err != nil {
				return err
			}
		}
	}

	// path param path
	if err := r.SetPathParam("path", o.Path); err != nil {
		return err
	}

	if o.StartTimeSecs != nil {

		// query param startTimeSecs
		var qrStartTimeSecs int64

		if o.StartTimeSecs != nil {
			qrStartTimeSecs = *o.StartTimeSecs
		}
		qStartTimeSecs := swag.FormatInt64(qrStartTimeSecs)
		if qStartTimeSecs != "" {

			if err := r.SetQueryParam("startTimeSecs", qStartTimeSecs); err != nil {
				return err
			}
		}
	}

	if o.TaskPathVec != nil {

		// binding items for taskPathVec
		joinedTaskPathVec := o.bindParamTaskPathVec(reg)

		// query array param taskPathVec
		if err := r.SetQueryParam("taskPathVec", joinedTaskPathVec...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetProgressMonitorByPath binds the parameter taskPathVec
func (o *GetProgressMonitorByPathParams) bindParamTaskPathVec(formats strfmt.Registry) []string {
	taskPathVecIR := o.TaskPathVec

	var taskPathVecIC []string
	for _, taskPathVecIIR := range taskPathVecIR { // explode []string

		taskPathVecIIV := taskPathVecIIR // string as string
		taskPathVecIC = append(taskPathVecIC, taskPathVecIIV)
	}

	// items.CollectionFormat: ""
	taskPathVecIS := swag.JoinByFormat(taskPathVecIC, "")

	return taskPathVecIS
}
