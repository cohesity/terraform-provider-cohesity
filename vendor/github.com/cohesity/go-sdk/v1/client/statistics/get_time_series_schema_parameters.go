// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTimeSeriesSchemaParams creates a new GetTimeSeriesSchemaParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTimeSeriesSchemaParams() *GetTimeSeriesSchemaParams {
	return &GetTimeSeriesSchemaParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTimeSeriesSchemaParamsWithTimeout creates a new GetTimeSeriesSchemaParams object
// with the ability to set a timeout on a request.
func NewGetTimeSeriesSchemaParamsWithTimeout(timeout time.Duration) *GetTimeSeriesSchemaParams {
	return &GetTimeSeriesSchemaParams{
		timeout: timeout,
	}
}

// NewGetTimeSeriesSchemaParamsWithContext creates a new GetTimeSeriesSchemaParams object
// with the ability to set a context for a request.
func NewGetTimeSeriesSchemaParamsWithContext(ctx context.Context) *GetTimeSeriesSchemaParams {
	return &GetTimeSeriesSchemaParams{
		Context: ctx,
	}
}

// NewGetTimeSeriesSchemaParamsWithHTTPClient creates a new GetTimeSeriesSchemaParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTimeSeriesSchemaParamsWithHTTPClient(client *http.Client) *GetTimeSeriesSchemaParams {
	return &GetTimeSeriesSchemaParams{
		HTTPClient: client,
	}
}

/*
GetTimeSeriesSchemaParams contains all the parameters to send to the API endpoint

	for the get time series schema operation.

	Typically these are written to a http.Request.
*/
type GetTimeSeriesSchemaParams struct {

	/* EntityID.

	   Specifies the id of the entity.

	   Format: int64
	*/
	EntityID int64

	/* EntityName.

	   Specifies the name of the entity.
	*/
	EntityName string

	/* EntityType.

	     Specifies the type of the entity.
	The following entity types are available:
	cluster, viewbox.
	EntityType represents the various values for the entity type.
	'Cluster' indicates entity type of Cluster.
	'StorageDomain' indicates entity type of Storage Domain.
	*/
	EntityType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get time series schema params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTimeSeriesSchemaParams) WithDefaults() *GetTimeSeriesSchemaParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get time series schema params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTimeSeriesSchemaParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get time series schema params
func (o *GetTimeSeriesSchemaParams) WithTimeout(timeout time.Duration) *GetTimeSeriesSchemaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get time series schema params
func (o *GetTimeSeriesSchemaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get time series schema params
func (o *GetTimeSeriesSchemaParams) WithContext(ctx context.Context) *GetTimeSeriesSchemaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get time series schema params
func (o *GetTimeSeriesSchemaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get time series schema params
func (o *GetTimeSeriesSchemaParams) WithHTTPClient(client *http.Client) *GetTimeSeriesSchemaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get time series schema params
func (o *GetTimeSeriesSchemaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEntityID adds the entityID to the get time series schema params
func (o *GetTimeSeriesSchemaParams) WithEntityID(entityID int64) *GetTimeSeriesSchemaParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the get time series schema params
func (o *GetTimeSeriesSchemaParams) SetEntityID(entityID int64) {
	o.EntityID = entityID
}

// WithEntityName adds the entityName to the get time series schema params
func (o *GetTimeSeriesSchemaParams) WithEntityName(entityName string) *GetTimeSeriesSchemaParams {
	o.SetEntityName(entityName)
	return o
}

// SetEntityName adds the entityName to the get time series schema params
func (o *GetTimeSeriesSchemaParams) SetEntityName(entityName string) {
	o.EntityName = entityName
}

// WithEntityType adds the entityType to the get time series schema params
func (o *GetTimeSeriesSchemaParams) WithEntityType(entityType string) *GetTimeSeriesSchemaParams {
	o.SetEntityType(entityType)
	return o
}

// SetEntityType adds the entityType to the get time series schema params
func (o *GetTimeSeriesSchemaParams) SetEntityType(entityType string) {
	o.EntityType = entityType
}

// WriteToRequest writes these params to a swagger request
func (o *GetTimeSeriesSchemaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param entityId
	qrEntityID := o.EntityID
	qEntityID := swag.FormatInt64(qrEntityID)
	if qEntityID != "" {

		if err := r.SetQueryParam("entityId", qEntityID); err != nil {
			return err
		}
	}

	// query param entityName
	qrEntityName := o.EntityName
	qEntityName := qrEntityName
	if qEntityName != "" {

		if err := r.SetQueryParam("entityName", qEntityName); err != nil {
			return err
		}
	}

	// query param entityType
	qrEntityType := o.EntityType
	qEntityType := qrEntityType
	if qEntityType != "" {

		if err := r.SetQueryParam("entityType", qEntityType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
