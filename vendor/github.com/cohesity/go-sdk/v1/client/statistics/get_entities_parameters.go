// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetEntitiesParams creates a new GetEntitiesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetEntitiesParams() *GetEntitiesParams {
	return &GetEntitiesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetEntitiesParamsWithTimeout creates a new GetEntitiesParams object
// with the ability to set a timeout on a request.
func NewGetEntitiesParamsWithTimeout(timeout time.Duration) *GetEntitiesParams {
	return &GetEntitiesParams{
		timeout: timeout,
	}
}

// NewGetEntitiesParamsWithContext creates a new GetEntitiesParams object
// with the ability to set a context for a request.
func NewGetEntitiesParamsWithContext(ctx context.Context) *GetEntitiesParams {
	return &GetEntitiesParams{
		Context: ctx,
	}
}

// NewGetEntitiesParamsWithHTTPClient creates a new GetEntitiesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetEntitiesParamsWithHTTPClient(client *http.Client) *GetEntitiesParams {
	return &GetEntitiesParams{
		HTTPClient: client,
	}
}

/*
GetEntitiesParams contains all the parameters to send to the API endpoint

	for the get entities operation.

	Typically these are written to a http.Request.
*/
type GetEntitiesParams struct {

	/* EntityPrefix.

	     Fetch only the entities having this prefix, otherwise all entities are
	returned.
	*/
	EntityPrefix *string

	/* IncludeAggrMetricSources.

	     Specifies whether to include the sources of aggregate metrics of an
	entity.
	*/
	IncludeAggrMetricSources *bool

	/* MaxEntities.

	     Specifies the maximum entities returned in the result.
	By default this field is 500.

	     Format: int32
	*/
	MaxEntities *int32

	/* MetricNames.

	     Specifies the list of metric names to return such as 'kRandomIos'
	which corresponds to 'Random IOs' in Advanced Diagnostics
	of the Cohesity Dashboard.
	*/
	MetricNames []string

	/* SchemaName.

	   Specifies the entity schema to search for entities.
	*/
	SchemaName string

	/* ViewName.

	     Specifies a view name, only view entities which have name containing the
	specified name will be returned.
	*/
	ViewName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get entities params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEntitiesParams) WithDefaults() *GetEntitiesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get entities params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEntitiesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get entities params
func (o *GetEntitiesParams) WithTimeout(timeout time.Duration) *GetEntitiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get entities params
func (o *GetEntitiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get entities params
func (o *GetEntitiesParams) WithContext(ctx context.Context) *GetEntitiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get entities params
func (o *GetEntitiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get entities params
func (o *GetEntitiesParams) WithHTTPClient(client *http.Client) *GetEntitiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get entities params
func (o *GetEntitiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEntityPrefix adds the entityPrefix to the get entities params
func (o *GetEntitiesParams) WithEntityPrefix(entityPrefix *string) *GetEntitiesParams {
	o.SetEntityPrefix(entityPrefix)
	return o
}

// SetEntityPrefix adds the entityPrefix to the get entities params
func (o *GetEntitiesParams) SetEntityPrefix(entityPrefix *string) {
	o.EntityPrefix = entityPrefix
}

// WithIncludeAggrMetricSources adds the includeAggrMetricSources to the get entities params
func (o *GetEntitiesParams) WithIncludeAggrMetricSources(includeAggrMetricSources *bool) *GetEntitiesParams {
	o.SetIncludeAggrMetricSources(includeAggrMetricSources)
	return o
}

// SetIncludeAggrMetricSources adds the includeAggrMetricSources to the get entities params
func (o *GetEntitiesParams) SetIncludeAggrMetricSources(includeAggrMetricSources *bool) {
	o.IncludeAggrMetricSources = includeAggrMetricSources
}

// WithMaxEntities adds the maxEntities to the get entities params
func (o *GetEntitiesParams) WithMaxEntities(maxEntities *int32) *GetEntitiesParams {
	o.SetMaxEntities(maxEntities)
	return o
}

// SetMaxEntities adds the maxEntities to the get entities params
func (o *GetEntitiesParams) SetMaxEntities(maxEntities *int32) {
	o.MaxEntities = maxEntities
}

// WithMetricNames adds the metricNames to the get entities params
func (o *GetEntitiesParams) WithMetricNames(metricNames []string) *GetEntitiesParams {
	o.SetMetricNames(metricNames)
	return o
}

// SetMetricNames adds the metricNames to the get entities params
func (o *GetEntitiesParams) SetMetricNames(metricNames []string) {
	o.MetricNames = metricNames
}

// WithSchemaName adds the schemaName to the get entities params
func (o *GetEntitiesParams) WithSchemaName(schemaName string) *GetEntitiesParams {
	o.SetSchemaName(schemaName)
	return o
}

// SetSchemaName adds the schemaName to the get entities params
func (o *GetEntitiesParams) SetSchemaName(schemaName string) {
	o.SchemaName = schemaName
}

// WithViewName adds the viewName to the get entities params
func (o *GetEntitiesParams) WithViewName(viewName *string) *GetEntitiesParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the get entities params
func (o *GetEntitiesParams) SetViewName(viewName *string) {
	o.ViewName = viewName
}

// WriteToRequest writes these params to a swagger request
func (o *GetEntitiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EntityPrefix != nil {

		// query param entityPrefix
		var qrEntityPrefix string

		if o.EntityPrefix != nil {
			qrEntityPrefix = *o.EntityPrefix
		}
		qEntityPrefix := qrEntityPrefix
		if qEntityPrefix != "" {

			if err := r.SetQueryParam("entityPrefix", qEntityPrefix); err != nil {
				return err
			}
		}
	}

	if o.IncludeAggrMetricSources != nil {

		// query param includeAggrMetricSources
		var qrIncludeAggrMetricSources bool

		if o.IncludeAggrMetricSources != nil {
			qrIncludeAggrMetricSources = *o.IncludeAggrMetricSources
		}
		qIncludeAggrMetricSources := swag.FormatBool(qrIncludeAggrMetricSources)
		if qIncludeAggrMetricSources != "" {

			if err := r.SetQueryParam("includeAggrMetricSources", qIncludeAggrMetricSources); err != nil {
				return err
			}
		}
	}

	if o.MaxEntities != nil {

		// query param maxEntities
		var qrMaxEntities int32

		if o.MaxEntities != nil {
			qrMaxEntities = *o.MaxEntities
		}
		qMaxEntities := swag.FormatInt32(qrMaxEntities)
		if qMaxEntities != "" {

			if err := r.SetQueryParam("maxEntities", qMaxEntities); err != nil {
				return err
			}
		}
	}

	if o.MetricNames != nil {

		// binding items for metricNames
		joinedMetricNames := o.bindParamMetricNames(reg)

		// query array param metricNames
		if err := r.SetQueryParam("metricNames", joinedMetricNames...); err != nil {
			return err
		}
	}

	// query param schemaName
	qrSchemaName := o.SchemaName
	qSchemaName := qrSchemaName
	if qSchemaName != "" {

		if err := r.SetQueryParam("schemaName", qSchemaName); err != nil {
			return err
		}
	}

	if o.ViewName != nil {

		// query param viewName
		var qrViewName string

		if o.ViewName != nil {
			qrViewName = *o.ViewName
		}
		qViewName := qrViewName
		if qViewName != "" {

			if err := r.SetQueryParam("viewName", qViewName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetEntities binds the parameter metricNames
func (o *GetEntitiesParams) bindParamMetricNames(formats strfmt.Registry) []string {
	metricNamesIR := o.MetricNames

	var metricNamesIC []string
	for _, metricNamesIIR := range metricNamesIR { // explode []string

		metricNamesIIV := metricNamesIIR // string as string
		metricNamesIC = append(metricNamesIC, metricNamesIIV)
	}

	// items.CollectionFormat: ""
	metricNamesIS := swag.JoinByFormat(metricNamesIC, "")

	return metricNamesIS
}
