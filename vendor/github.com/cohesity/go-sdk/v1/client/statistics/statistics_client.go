// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new statistics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new statistics API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new statistics API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for statistics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetEntities(params *GetEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEntitiesOK, error)

	GetEntitiesSchema(params *GetEntitiesSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEntitiesSchemaOK, error)

	GetEntitySchemaByName(params *GetEntitySchemaByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEntitySchemaByNameOK, error)

	GetFileDownloadsCounter(params *GetFileDownloadsCounterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileDownloadsCounterOK, error)

	GetProgressMonitorByPath(params *GetProgressMonitorByPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProgressMonitorByPathOK, error)

	GetProgressMonitors(params *GetProgressMonitorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProgressMonitorsOK, error)

	GetTasks(params *GetTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTasksOK, error)

	GetTimeSeriesSchema(params *GetTimeSeriesSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTimeSeriesSchemaOK, error)

	GetTimeSeriesStats(params *GetTimeSeriesStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTimeSeriesStatsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetEntities lists the entities for the specified schema

	**Privileges:** ```CLUSTER_VIEW``` <br><br>An entity is an object found on the Cohesity Cluster, such as a disk or a

Node.
In the Cohesity Dashboard, similar functionality is provided in Advanced
Diagnostics.
*/
func (a *Client) GetEntities(params *GetEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEntities",
		Method:             "GET",
		PathPattern:        "/public/statistics/entities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetEntitiesSchema lists the entity schemas filtered by the specified parameters

	**Privileges:** ```CLUSTER_VIEW, TENANT_VIEW``` <br><br>An entity schema specifies the meta-data associated with entity such as

the list of attributes and a time series of data.
For example, for a Disk entity, the entity schema specifies the Node that is
using this Disk, the type of the Disk, and Metrics about the Disk such as Space
Usage, Read IOs and Write IOs. Metrics define data points (time series data)
to track over a period of time for a specific interval.
If no parameters are specified, all entity schemas found on the Cohesity
Cluster are returned.
Specifying parameters filters the results that are returned.
In the Cohesity Dashboard, similar functionality is provided in Advanced
Diagnostics.
*/
func (a *Client) GetEntitiesSchema(params *GetEntitiesSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEntitiesSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntitiesSchemaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEntitiesSchema",
		Method:             "GET",
		PathPattern:        "/public/statistics/entitiesSchema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEntitiesSchemaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntitiesSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEntitiesSchemaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetEntitySchemaByName gets the entity schema for the specified schema

	```Unknown Privileges``` <br><br>An entity schema specifies the meta-data associated with entity such as the

list of attributes and a time series of data.
For example, for a Disk entity, the entity schema specifies the Node that is
using this Disk, the type of the Disk, and Metrics about the Disk such as
Space Usage, Read IOs and Write IOs. Metrics define data points (time series
data) to track over a period of time for a specific interval.
In the Cohesity Dashboard, similar functionality is provided in Advanced
Diagnostics.
*/
func (a *Client) GetEntitySchemaByName(params *GetEntitySchemaByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEntitySchemaByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntitySchemaByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEntitySchemaByName",
		Method:             "GET",
		PathPattern:        "/public/statistics/entitiesSchema/{schemaName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEntitySchemaByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntitySchemaByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEntitySchemaByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFileDownloadsCounter gets the global stats counter to track the successful file downloads

**Privileges:** ```CLUSTER_VIEW``` <br><br>
*/
func (a *Client) GetFileDownloadsCounter(params *GetFileDownloadsCounterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileDownloadsCounterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileDownloadsCounterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFileDownloadsCounter",
		Method:             "GET",
		PathPattern:        "/stats/fileDownloads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileDownloadsCounterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileDownloadsCounterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFileDownloadsCounterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProgressMonitorByPath gets the progress and status of task from pulse for a given path

**Privileges:** ```CLUSTER_VIEW, TENANT_VIEW, PROTECTION_VIEW, RESTORE_VIEW``` <br><br>
*/
func (a *Client) GetProgressMonitorByPath(params *GetProgressMonitorByPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProgressMonitorByPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProgressMonitorByPathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProgressMonitorByPath",
		Method:             "GET",
		PathPattern:        "/progressMonitors/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProgressMonitorByPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProgressMonitorByPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProgressMonitorByPathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProgressMonitors gets the progress and status of tasks from pulse

**Privileges:** ```CLUSTER_VIEW, TENANT_VIEW, PROTECTION_VIEW, RESTORE_VIEW``` <br><br>
*/
func (a *Client) GetProgressMonitors(params *GetProgressMonitorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProgressMonitorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProgressMonitorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProgressMonitors",
		Method:             "GET",
		PathPattern:        "/progressMonitors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProgressMonitorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProgressMonitorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProgressMonitorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTasks gets the progress and status of tasks

**Privileges:** ```CLUSTER_VIEW, TENANT_VIEW``` <br><br>
*/
func (a *Client) GetTasks(params *GetTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTasks",
		Method:             "GET",
		PathPattern:        "/public/tasks/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetTimeSeriesSchema **Privileges:** ```CLUSTER_VIEW, TENANT_VIEW, STORAGE_DOMAIN_VIEW``` <br><br>Gets the Apollo schema information for an entity to list a series of data

points.
*/
func (a *Client) GetTimeSeriesSchema(params *GetTimeSeriesSchemaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTimeSeriesSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimeSeriesSchemaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTimeSeriesSchema",
		Method:             "GET",
		PathPattern:        "/public/statistics/timeSeriesSchema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTimeSeriesSchemaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTimeSeriesSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTimeSeriesSchemaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetTimeSeriesStats lists a series of data points for an entity of a metric in a schema during the specified time period

	**Privileges:** ```CLUSTER_VIEW, TENANT_VIEW, STORAGE_DOMAIN_VIEW, STORAGE_VIEW, PROTECTION_VIEW``` <br><br>A Metric specifies a data point (such as CPU usage and IOPS) to track over a

period of time.
For example for a disk in the Cluster, you can report on the 'Disk Health'
(kDiskAwaitTimeMsecs) Metric of the 'Disk Health Metrics' (kSentryDiskStats)
Schema for the last week.
You must specify the 'k' names as input and not the descriptive names.
You must also specify the id of the entity that you are reporting on such as
a Cluster, disk drive, job, etc.
Get the entityId by running the GET /public/statistics/entities operation.
In the Cohesity Dashboard, similar functionality is provided in Advanced
Diagnostics.
*/
func (a *Client) GetTimeSeriesStats(params *GetTimeSeriesStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTimeSeriesStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimeSeriesStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTimeSeriesStats",
		Method:             "GET",
		PathPattern:        "/public/statistics/timeSeriesStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTimeSeriesStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTimeSeriesStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTimeSeriesStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
