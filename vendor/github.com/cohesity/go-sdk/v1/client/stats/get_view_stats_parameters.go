// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewStatsParams creates a new GetViewStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewStatsParams() *GetViewStatsParams {
	return &GetViewStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewStatsParamsWithTimeout creates a new GetViewStatsParams object
// with the ability to set a timeout on a request.
func NewGetViewStatsParamsWithTimeout(timeout time.Duration) *GetViewStatsParams {
	return &GetViewStatsParams{
		timeout: timeout,
	}
}

// NewGetViewStatsParamsWithContext creates a new GetViewStatsParams object
// with the ability to set a context for a request.
func NewGetViewStatsParamsWithContext(ctx context.Context) *GetViewStatsParams {
	return &GetViewStatsParams{
		Context: ctx,
	}
}

// NewGetViewStatsParamsWithHTTPClient creates a new GetViewStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewStatsParamsWithHTTPClient(client *http.Client) *GetViewStatsParams {
	return &GetViewStatsParams{
		HTTPClient: client,
	}
}

/*
GetViewStatsParams contains all the parameters to send to the API endpoint

	for the get view stats operation.

	Typically these are written to a http.Request.
*/
type GetViewStatsParams struct {

	/* LastHours.

	   Specifies the last hours of stats to sort.

	   Format: int64
	*/
	LastHours *int64

	/* Metric.

	   Specifies the metric to which stats has to be sorted.
	*/
	Metric *string

	/* NumTopViews.

	   Specifies the number of views for which stats has to be computed. Specifying this field will return the Views sorted in the descending order on the metric specified. If specified, minimum value is 1. If not specified, all views will be returned. If metric is not specified, this parameter must also not be specified.

	   Format: int64
	*/
	NumTopViews *int64

	/* Protocol.

	   Specifies the protocol to sort.
	*/
	Protocol *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get view stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewStatsParams) WithDefaults() *GetViewStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get view stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewStatsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get view stats params
func (o *GetViewStatsParams) WithTimeout(timeout time.Duration) *GetViewStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get view stats params
func (o *GetViewStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get view stats params
func (o *GetViewStatsParams) WithContext(ctx context.Context) *GetViewStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get view stats params
func (o *GetViewStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get view stats params
func (o *GetViewStatsParams) WithHTTPClient(client *http.Client) *GetViewStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get view stats params
func (o *GetViewStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLastHours adds the lastHours to the get view stats params
func (o *GetViewStatsParams) WithLastHours(lastHours *int64) *GetViewStatsParams {
	o.SetLastHours(lastHours)
	return o
}

// SetLastHours adds the lastHours to the get view stats params
func (o *GetViewStatsParams) SetLastHours(lastHours *int64) {
	o.LastHours = lastHours
}

// WithMetric adds the metric to the get view stats params
func (o *GetViewStatsParams) WithMetric(metric *string) *GetViewStatsParams {
	o.SetMetric(metric)
	return o
}

// SetMetric adds the metric to the get view stats params
func (o *GetViewStatsParams) SetMetric(metric *string) {
	o.Metric = metric
}

// WithNumTopViews adds the numTopViews to the get view stats params
func (o *GetViewStatsParams) WithNumTopViews(numTopViews *int64) *GetViewStatsParams {
	o.SetNumTopViews(numTopViews)
	return o
}

// SetNumTopViews adds the numTopViews to the get view stats params
func (o *GetViewStatsParams) SetNumTopViews(numTopViews *int64) {
	o.NumTopViews = numTopViews
}

// WithProtocol adds the protocol to the get view stats params
func (o *GetViewStatsParams) WithProtocol(protocol *string) *GetViewStatsParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the get view stats params
func (o *GetViewStatsParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LastHours != nil {

		// query param lastHours
		var qrLastHours int64

		if o.LastHours != nil {
			qrLastHours = *o.LastHours
		}
		qLastHours := swag.FormatInt64(qrLastHours)
		if qLastHours != "" {

			if err := r.SetQueryParam("lastHours", qLastHours); err != nil {
				return err
			}
		}
	}

	if o.Metric != nil {

		// query param metric
		var qrMetric string

		if o.Metric != nil {
			qrMetric = *o.Metric
		}
		qMetric := qrMetric
		if qMetric != "" {

			if err := r.SetQueryParam("metric", qMetric); err != nil {
				return err
			}
		}
	}

	if o.NumTopViews != nil {

		// query param numTopViews
		var qrNumTopViews int64

		if o.NumTopViews != nil {
			qrNumTopViews = *o.NumTopViews
		}
		qNumTopViews := swag.FormatInt64(qrNumTopViews)
		if qNumTopViews != "" {

			if err := r.SetQueryParam("numTopViews", qNumTopViews); err != nil {
				return err
			}
		}
	}

	if o.Protocol != nil {

		// query param protocol
		var qrProtocol string

		if o.Protocol != nil {
			qrProtocol = *o.Protocol
		}
		qProtocol := qrProtocol
		if qProtocol != "" {

			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
