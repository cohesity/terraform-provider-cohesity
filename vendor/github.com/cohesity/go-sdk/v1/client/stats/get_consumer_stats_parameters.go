// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetConsumerStatsParams creates a new GetConsumerStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetConsumerStatsParams() *GetConsumerStatsParams {
	return &GetConsumerStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetConsumerStatsParamsWithTimeout creates a new GetConsumerStatsParams object
// with the ability to set a timeout on a request.
func NewGetConsumerStatsParamsWithTimeout(timeout time.Duration) *GetConsumerStatsParams {
	return &GetConsumerStatsParams{
		timeout: timeout,
	}
}

// NewGetConsumerStatsParamsWithContext creates a new GetConsumerStatsParams object
// with the ability to set a context for a request.
func NewGetConsumerStatsParamsWithContext(ctx context.Context) *GetConsumerStatsParams {
	return &GetConsumerStatsParams{
		Context: ctx,
	}
}

// NewGetConsumerStatsParamsWithHTTPClient creates a new GetConsumerStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetConsumerStatsParamsWithHTTPClient(client *http.Client) *GetConsumerStatsParams {
	return &GetConsumerStatsParams{
		HTTPClient: client,
	}
}

/*
GetConsumerStatsParams contains all the parameters to send to the API endpoint

	for the get consumer stats operation.

	Typically these are written to a http.Request.
*/
type GetConsumerStatsParams struct {

	/* ConsumerEntityIDList.

	     Specifies a list of consumer entity ids. If this field is specified, each
	entity id must corresponds to the id in 'ConsumerIdList' in the same
	index, and the length of 'ConsumerEntityIdList' and 'ConsumerIdList' must
	be the same.
	*/
	ConsumerEntityIDList []string

	/* ConsumerIDList.

	   Specifies a list of consumer ids.
	*/
	ConsumerIDList []int64

	/* ConsumerType.

	     Specifies the consumer type.
	Type of the consumer can be one of the following three,

	'kViews', indicates the stats info of Views used per organization (tenant)
	per view box (storage domain).
	'kProtectionRuns', indicates the stats info of Protection Runs used per
	organization (tenant) per view box (storage domain).
	'kReplicationRuns', indicates the stats info of Replication In used per
	organization (tenant) per view box (storage domain).
	'kViewProtectionRuns', indicates the stats info of View Protection Runs used
	per organization (tenant) per view box (storage domain).
	*/
	ConsumerType *string

	/* Cookie.

	     Specifies the opaque string returned in the previous response.
	If this is set, next set of active opens just after the previous
	response are returned. If this is not set, first set of active opens
	are returned.
	*/
	Cookie *string

	/* FetchProtectionEnvironment.

	     Specifies whether to fetch protection environment for each consumer. This
	field is applicable only if 'consumerType' is 'kProtectionRuns' or
	'kReplicationRuns'.
	*/
	FetchProtectionEnvironment *bool

	/* FetchProtectionPolicy.

	     Specifies whether to fetch protection policy for each consumer. This field
	is applicable only if 'consumerType' is 'kProtectionRuns' or
	'kReplicationRuns'.
	*/
	FetchProtectionPolicy *bool

	/* FetchTenantName.

	   Specifies whether to fetch tenant (organization) name for each consumer.
	*/
	FetchTenantName *bool

	/* FetchViewBoxName.

	     Specifies whether to fetch view box (storage domain) name for each
	consumer.
	*/
	FetchViewBoxName *bool

	/* IncludeServiceProvider.

	     Specifies whether to fetch the consumption of external service providers.
	These information will be listed as a unique organization (tenant) in
	response. By default it is false.
	*/
	IncludeServiceProvider *bool

	/* MaxCount.

	   Specifies a limit on the number of stats groups returned.

	   Format: int64
	*/
	MaxCount *int64

	/* MsecsBeforeCurrentTimeToCompare.

	   Specifies the time in msecs before current time to compare with.

	   Format: int64
	*/
	MsecsBeforeCurrentTimeToCompare *int64

	/* OrganizationsIDList.

	   Specifies a list of organizations (tenant) id.
	*/
	OrganizationsIDList []string

	/* TenantIds.

	     Specifies a list of organizations (tenant) id. This field is added to
	allow tenantIds json tag. This list will be concatenated with
	TenantsIdList to form full list of tenantsIdList.
	*/
	TenantIds []string

	/* ViewBoxesIDList.

	   Specifies a list of view boxes (storage domain) id.
	*/
	ViewBoxesIDList []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get consumer stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConsumerStatsParams) WithDefaults() *GetConsumerStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get consumer stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConsumerStatsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get consumer stats params
func (o *GetConsumerStatsParams) WithTimeout(timeout time.Duration) *GetConsumerStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get consumer stats params
func (o *GetConsumerStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get consumer stats params
func (o *GetConsumerStatsParams) WithContext(ctx context.Context) *GetConsumerStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get consumer stats params
func (o *GetConsumerStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get consumer stats params
func (o *GetConsumerStatsParams) WithHTTPClient(client *http.Client) *GetConsumerStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get consumer stats params
func (o *GetConsumerStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConsumerEntityIDList adds the consumerEntityIDList to the get consumer stats params
func (o *GetConsumerStatsParams) WithConsumerEntityIDList(consumerEntityIDList []string) *GetConsumerStatsParams {
	o.SetConsumerEntityIDList(consumerEntityIDList)
	return o
}

// SetConsumerEntityIDList adds the consumerEntityIdList to the get consumer stats params
func (o *GetConsumerStatsParams) SetConsumerEntityIDList(consumerEntityIDList []string) {
	o.ConsumerEntityIDList = consumerEntityIDList
}

// WithConsumerIDList adds the consumerIDList to the get consumer stats params
func (o *GetConsumerStatsParams) WithConsumerIDList(consumerIDList []int64) *GetConsumerStatsParams {
	o.SetConsumerIDList(consumerIDList)
	return o
}

// SetConsumerIDList adds the consumerIdList to the get consumer stats params
func (o *GetConsumerStatsParams) SetConsumerIDList(consumerIDList []int64) {
	o.ConsumerIDList = consumerIDList
}

// WithConsumerType adds the consumerType to the get consumer stats params
func (o *GetConsumerStatsParams) WithConsumerType(consumerType *string) *GetConsumerStatsParams {
	o.SetConsumerType(consumerType)
	return o
}

// SetConsumerType adds the consumerType to the get consumer stats params
func (o *GetConsumerStatsParams) SetConsumerType(consumerType *string) {
	o.ConsumerType = consumerType
}

// WithCookie adds the cookie to the get consumer stats params
func (o *GetConsumerStatsParams) WithCookie(cookie *string) *GetConsumerStatsParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the get consumer stats params
func (o *GetConsumerStatsParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithFetchProtectionEnvironment adds the fetchProtectionEnvironment to the get consumer stats params
func (o *GetConsumerStatsParams) WithFetchProtectionEnvironment(fetchProtectionEnvironment *bool) *GetConsumerStatsParams {
	o.SetFetchProtectionEnvironment(fetchProtectionEnvironment)
	return o
}

// SetFetchProtectionEnvironment adds the fetchProtectionEnvironment to the get consumer stats params
func (o *GetConsumerStatsParams) SetFetchProtectionEnvironment(fetchProtectionEnvironment *bool) {
	o.FetchProtectionEnvironment = fetchProtectionEnvironment
}

// WithFetchProtectionPolicy adds the fetchProtectionPolicy to the get consumer stats params
func (o *GetConsumerStatsParams) WithFetchProtectionPolicy(fetchProtectionPolicy *bool) *GetConsumerStatsParams {
	o.SetFetchProtectionPolicy(fetchProtectionPolicy)
	return o
}

// SetFetchProtectionPolicy adds the fetchProtectionPolicy to the get consumer stats params
func (o *GetConsumerStatsParams) SetFetchProtectionPolicy(fetchProtectionPolicy *bool) {
	o.FetchProtectionPolicy = fetchProtectionPolicy
}

// WithFetchTenantName adds the fetchTenantName to the get consumer stats params
func (o *GetConsumerStatsParams) WithFetchTenantName(fetchTenantName *bool) *GetConsumerStatsParams {
	o.SetFetchTenantName(fetchTenantName)
	return o
}

// SetFetchTenantName adds the fetchTenantName to the get consumer stats params
func (o *GetConsumerStatsParams) SetFetchTenantName(fetchTenantName *bool) {
	o.FetchTenantName = fetchTenantName
}

// WithFetchViewBoxName adds the fetchViewBoxName to the get consumer stats params
func (o *GetConsumerStatsParams) WithFetchViewBoxName(fetchViewBoxName *bool) *GetConsumerStatsParams {
	o.SetFetchViewBoxName(fetchViewBoxName)
	return o
}

// SetFetchViewBoxName adds the fetchViewBoxName to the get consumer stats params
func (o *GetConsumerStatsParams) SetFetchViewBoxName(fetchViewBoxName *bool) {
	o.FetchViewBoxName = fetchViewBoxName
}

// WithIncludeServiceProvider adds the includeServiceProvider to the get consumer stats params
func (o *GetConsumerStatsParams) WithIncludeServiceProvider(includeServiceProvider *bool) *GetConsumerStatsParams {
	o.SetIncludeServiceProvider(includeServiceProvider)
	return o
}

// SetIncludeServiceProvider adds the includeServiceProvider to the get consumer stats params
func (o *GetConsumerStatsParams) SetIncludeServiceProvider(includeServiceProvider *bool) {
	o.IncludeServiceProvider = includeServiceProvider
}

// WithMaxCount adds the maxCount to the get consumer stats params
func (o *GetConsumerStatsParams) WithMaxCount(maxCount *int64) *GetConsumerStatsParams {
	o.SetMaxCount(maxCount)
	return o
}

// SetMaxCount adds the maxCount to the get consumer stats params
func (o *GetConsumerStatsParams) SetMaxCount(maxCount *int64) {
	o.MaxCount = maxCount
}

// WithMsecsBeforeCurrentTimeToCompare adds the msecsBeforeCurrentTimeToCompare to the get consumer stats params
func (o *GetConsumerStatsParams) WithMsecsBeforeCurrentTimeToCompare(msecsBeforeCurrentTimeToCompare *int64) *GetConsumerStatsParams {
	o.SetMsecsBeforeCurrentTimeToCompare(msecsBeforeCurrentTimeToCompare)
	return o
}

// SetMsecsBeforeCurrentTimeToCompare adds the msecsBeforeCurrentTimeToCompare to the get consumer stats params
func (o *GetConsumerStatsParams) SetMsecsBeforeCurrentTimeToCompare(msecsBeforeCurrentTimeToCompare *int64) {
	o.MsecsBeforeCurrentTimeToCompare = msecsBeforeCurrentTimeToCompare
}

// WithOrganizationsIDList adds the organizationsIDList to the get consumer stats params
func (o *GetConsumerStatsParams) WithOrganizationsIDList(organizationsIDList []string) *GetConsumerStatsParams {
	o.SetOrganizationsIDList(organizationsIDList)
	return o
}

// SetOrganizationsIDList adds the organizationsIdList to the get consumer stats params
func (o *GetConsumerStatsParams) SetOrganizationsIDList(organizationsIDList []string) {
	o.OrganizationsIDList = organizationsIDList
}

// WithTenantIds adds the tenantIds to the get consumer stats params
func (o *GetConsumerStatsParams) WithTenantIds(tenantIds []string) *GetConsumerStatsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get consumer stats params
func (o *GetConsumerStatsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithViewBoxesIDList adds the viewBoxesIDList to the get consumer stats params
func (o *GetConsumerStatsParams) WithViewBoxesIDList(viewBoxesIDList []int64) *GetConsumerStatsParams {
	o.SetViewBoxesIDList(viewBoxesIDList)
	return o
}

// SetViewBoxesIDList adds the viewBoxesIdList to the get consumer stats params
func (o *GetConsumerStatsParams) SetViewBoxesIDList(viewBoxesIDList []int64) {
	o.ViewBoxesIDList = viewBoxesIDList
}

// WriteToRequest writes these params to a swagger request
func (o *GetConsumerStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConsumerEntityIDList != nil {

		// binding items for consumerEntityIdList
		joinedConsumerEntityIDList := o.bindParamConsumerEntityIDList(reg)

		// query array param consumerEntityIdList
		if err := r.SetQueryParam("consumerEntityIdList", joinedConsumerEntityIDList...); err != nil {
			return err
		}
	}

	if o.ConsumerIDList != nil {

		// binding items for consumerIdList
		joinedConsumerIDList := o.bindParamConsumerIDList(reg)

		// query array param consumerIdList
		if err := r.SetQueryParam("consumerIdList", joinedConsumerIDList...); err != nil {
			return err
		}
	}

	if o.ConsumerType != nil {

		// query param consumerType
		var qrConsumerType string

		if o.ConsumerType != nil {
			qrConsumerType = *o.ConsumerType
		}
		qConsumerType := qrConsumerType
		if qConsumerType != "" {

			if err := r.SetQueryParam("consumerType", qConsumerType); err != nil {
				return err
			}
		}
	}

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.FetchProtectionEnvironment != nil {

		// query param fetchProtectionEnvironment
		var qrFetchProtectionEnvironment bool

		if o.FetchProtectionEnvironment != nil {
			qrFetchProtectionEnvironment = *o.FetchProtectionEnvironment
		}
		qFetchProtectionEnvironment := swag.FormatBool(qrFetchProtectionEnvironment)
		if qFetchProtectionEnvironment != "" {

			if err := r.SetQueryParam("fetchProtectionEnvironment", qFetchProtectionEnvironment); err != nil {
				return err
			}
		}
	}

	if o.FetchProtectionPolicy != nil {

		// query param fetchProtectionPolicy
		var qrFetchProtectionPolicy bool

		if o.FetchProtectionPolicy != nil {
			qrFetchProtectionPolicy = *o.FetchProtectionPolicy
		}
		qFetchProtectionPolicy := swag.FormatBool(qrFetchProtectionPolicy)
		if qFetchProtectionPolicy != "" {

			if err := r.SetQueryParam("fetchProtectionPolicy", qFetchProtectionPolicy); err != nil {
				return err
			}
		}
	}

	if o.FetchTenantName != nil {

		// query param fetchTenantName
		var qrFetchTenantName bool

		if o.FetchTenantName != nil {
			qrFetchTenantName = *o.FetchTenantName
		}
		qFetchTenantName := swag.FormatBool(qrFetchTenantName)
		if qFetchTenantName != "" {

			if err := r.SetQueryParam("fetchTenantName", qFetchTenantName); err != nil {
				return err
			}
		}
	}

	if o.FetchViewBoxName != nil {

		// query param fetchViewBoxName
		var qrFetchViewBoxName bool

		if o.FetchViewBoxName != nil {
			qrFetchViewBoxName = *o.FetchViewBoxName
		}
		qFetchViewBoxName := swag.FormatBool(qrFetchViewBoxName)
		if qFetchViewBoxName != "" {

			if err := r.SetQueryParam("fetchViewBoxName", qFetchViewBoxName); err != nil {
				return err
			}
		}
	}

	if o.IncludeServiceProvider != nil {

		// query param includeServiceProvider
		var qrIncludeServiceProvider bool

		if o.IncludeServiceProvider != nil {
			qrIncludeServiceProvider = *o.IncludeServiceProvider
		}
		qIncludeServiceProvider := swag.FormatBool(qrIncludeServiceProvider)
		if qIncludeServiceProvider != "" {

			if err := r.SetQueryParam("includeServiceProvider", qIncludeServiceProvider); err != nil {
				return err
			}
		}
	}

	if o.MaxCount != nil {

		// query param maxCount
		var qrMaxCount int64

		if o.MaxCount != nil {
			qrMaxCount = *o.MaxCount
		}
		qMaxCount := swag.FormatInt64(qrMaxCount)
		if qMaxCount != "" {

			if err := r.SetQueryParam("maxCount", qMaxCount); err != nil {
				return err
			}
		}
	}

	if o.MsecsBeforeCurrentTimeToCompare != nil {

		// query param msecsBeforeCurrentTimeToCompare
		var qrMsecsBeforeCurrentTimeToCompare int64

		if o.MsecsBeforeCurrentTimeToCompare != nil {
			qrMsecsBeforeCurrentTimeToCompare = *o.MsecsBeforeCurrentTimeToCompare
		}
		qMsecsBeforeCurrentTimeToCompare := swag.FormatInt64(qrMsecsBeforeCurrentTimeToCompare)
		if qMsecsBeforeCurrentTimeToCompare != "" {

			if err := r.SetQueryParam("msecsBeforeCurrentTimeToCompare", qMsecsBeforeCurrentTimeToCompare); err != nil {
				return err
			}
		}
	}

	if o.OrganizationsIDList != nil {

		// binding items for organizationsIdList
		joinedOrganizationsIDList := o.bindParamOrganizationsIDList(reg)

		// query array param organizationsIdList
		if err := r.SetQueryParam("organizationsIdList", joinedOrganizationsIDList...); err != nil {
			return err
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.ViewBoxesIDList != nil {

		// binding items for viewBoxesIdList
		joinedViewBoxesIDList := o.bindParamViewBoxesIDList(reg)

		// query array param viewBoxesIdList
		if err := r.SetQueryParam("viewBoxesIdList", joinedViewBoxesIDList...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetConsumerStats binds the parameter consumerEntityIdList
func (o *GetConsumerStatsParams) bindParamConsumerEntityIDList(formats strfmt.Registry) []string {
	consumerEntityIDListIR := o.ConsumerEntityIDList

	var consumerEntityIDListIC []string
	for _, consumerEntityIDListIIR := range consumerEntityIDListIR { // explode []string

		consumerEntityIDListIIV := consumerEntityIDListIIR // string as string
		consumerEntityIDListIC = append(consumerEntityIDListIC, consumerEntityIDListIIV)
	}

	// items.CollectionFormat: ""
	consumerEntityIDListIS := swag.JoinByFormat(consumerEntityIDListIC, "")

	return consumerEntityIDListIS
}

// bindParamGetConsumerStats binds the parameter consumerIdList
func (o *GetConsumerStatsParams) bindParamConsumerIDList(formats strfmt.Registry) []string {
	consumerIDListIR := o.ConsumerIDList

	var consumerIDListIC []string
	for _, consumerIDListIIR := range consumerIDListIR { // explode []int64

		consumerIDListIIV := swag.FormatInt64(consumerIDListIIR) // int64 as string
		consumerIDListIC = append(consumerIDListIC, consumerIDListIIV)
	}

	// items.CollectionFormat: ""
	consumerIDListIS := swag.JoinByFormat(consumerIDListIC, "")

	return consumerIDListIS
}

// bindParamGetConsumerStats binds the parameter organizationsIdList
func (o *GetConsumerStatsParams) bindParamOrganizationsIDList(formats strfmt.Registry) []string {
	organizationsIDListIR := o.OrganizationsIDList

	var organizationsIDListIC []string
	for _, organizationsIDListIIR := range organizationsIDListIR { // explode []string

		organizationsIDListIIV := organizationsIDListIIR // string as string
		organizationsIDListIC = append(organizationsIDListIC, organizationsIDListIIV)
	}

	// items.CollectionFormat: ""
	organizationsIDListIS := swag.JoinByFormat(organizationsIDListIC, "")

	return organizationsIDListIS
}

// bindParamGetConsumerStats binds the parameter tenantIds
func (o *GetConsumerStatsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}

// bindParamGetConsumerStats binds the parameter viewBoxesIdList
func (o *GetConsumerStatsParams) bindParamViewBoxesIDList(formats strfmt.Registry) []string {
	viewBoxesIDListIR := o.ViewBoxesIDList

	var viewBoxesIDListIC []string
	for _, viewBoxesIDListIIR := range viewBoxesIDListIR { // explode []int64

		viewBoxesIDListIIV := swag.FormatInt64(viewBoxesIDListIIR) // int64 as string
		viewBoxesIDListIC = append(viewBoxesIDListIC, viewBoxesIDListIIV)
	}

	// items.CollectionFormat: ""
	viewBoxesIDListIS := swag.JoinByFormat(viewBoxesIDListIC, "")

	return viewBoxesIDListIS
}
