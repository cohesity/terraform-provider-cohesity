// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetVaultRunStatsParams creates a new GetVaultRunStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVaultRunStatsParams() *GetVaultRunStatsParams {
	return &GetVaultRunStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVaultRunStatsParamsWithTimeout creates a new GetVaultRunStatsParams object
// with the ability to set a timeout on a request.
func NewGetVaultRunStatsParamsWithTimeout(timeout time.Duration) *GetVaultRunStatsParams {
	return &GetVaultRunStatsParams{
		timeout: timeout,
	}
}

// NewGetVaultRunStatsParamsWithContext creates a new GetVaultRunStatsParams object
// with the ability to set a context for a request.
func NewGetVaultRunStatsParamsWithContext(ctx context.Context) *GetVaultRunStatsParams {
	return &GetVaultRunStatsParams{
		Context: ctx,
	}
}

// NewGetVaultRunStatsParamsWithHTTPClient creates a new GetVaultRunStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVaultRunStatsParamsWithHTTPClient(client *http.Client) *GetVaultRunStatsParams {
	return &GetVaultRunStatsParams{
		HTTPClient: client,
	}
}

/*
GetVaultRunStatsParams contains all the parameters to send to the API endpoint

	for the get vault run stats operation.

	Typically these are written to a http.Request.
*/
type GetVaultRunStatsParams struct {

	/* EndTimeUsecs.

	   Specifies the end time Unix time epoch in microseconds to which the vault run stats are computed.

	   Format: int64
	*/
	EndTimeUsecs int64

	/* Interval.

	   Specifies the interval by which runs will be grouped together in the returned trend line.
	*/
	Interval string

	/* RunType.

	   Specifies the type of the run.
	*/
	RunType string

	/* StartTimeUsecs.

	   Specifies the start time Unix time epoch in microseconds from which the vault run stats are computed.

	   Format: int64
	*/
	StartTimeUsecs int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get vault run stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVaultRunStatsParams) WithDefaults() *GetVaultRunStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get vault run stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVaultRunStatsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get vault run stats params
func (o *GetVaultRunStatsParams) WithTimeout(timeout time.Duration) *GetVaultRunStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get vault run stats params
func (o *GetVaultRunStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get vault run stats params
func (o *GetVaultRunStatsParams) WithContext(ctx context.Context) *GetVaultRunStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get vault run stats params
func (o *GetVaultRunStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get vault run stats params
func (o *GetVaultRunStatsParams) WithHTTPClient(client *http.Client) *GetVaultRunStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get vault run stats params
func (o *GetVaultRunStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTimeUsecs adds the endTimeUsecs to the get vault run stats params
func (o *GetVaultRunStatsParams) WithEndTimeUsecs(endTimeUsecs int64) *GetVaultRunStatsParams {
	o.SetEndTimeUsecs(endTimeUsecs)
	return o
}

// SetEndTimeUsecs adds the endTimeUsecs to the get vault run stats params
func (o *GetVaultRunStatsParams) SetEndTimeUsecs(endTimeUsecs int64) {
	o.EndTimeUsecs = endTimeUsecs
}

// WithInterval adds the interval to the get vault run stats params
func (o *GetVaultRunStatsParams) WithInterval(interval string) *GetVaultRunStatsParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the get vault run stats params
func (o *GetVaultRunStatsParams) SetInterval(interval string) {
	o.Interval = interval
}

// WithRunType adds the runType to the get vault run stats params
func (o *GetVaultRunStatsParams) WithRunType(runType string) *GetVaultRunStatsParams {
	o.SetRunType(runType)
	return o
}

// SetRunType adds the runType to the get vault run stats params
func (o *GetVaultRunStatsParams) SetRunType(runType string) {
	o.RunType = runType
}

// WithStartTimeUsecs adds the startTimeUsecs to the get vault run stats params
func (o *GetVaultRunStatsParams) WithStartTimeUsecs(startTimeUsecs int64) *GetVaultRunStatsParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the get vault run stats params
func (o *GetVaultRunStatsParams) SetStartTimeUsecs(startTimeUsecs int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WriteToRequest writes these params to a swagger request
func (o *GetVaultRunStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endTimeUsecs
	qrEndTimeUsecs := o.EndTimeUsecs
	qEndTimeUsecs := swag.FormatInt64(qrEndTimeUsecs)
	if qEndTimeUsecs != "" {

		if err := r.SetQueryParam("endTimeUsecs", qEndTimeUsecs); err != nil {
			return err
		}
	}

	// query param interval
	qrInterval := o.Interval
	qInterval := qrInterval
	if qInterval != "" {

		if err := r.SetQueryParam("interval", qInterval); err != nil {
			return err
		}
	}

	// query param runType
	qrRunType := o.RunType
	qRunType := qrRunType
	if qRunType != "" {

		if err := r.SetQueryParam("runType", qRunType); err != nil {
			return err
		}
	}

	// query param startTimeUsecs
	qrStartTimeUsecs := o.StartTimeUsecs
	qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
	if qStartTimeUsecs != "" {

		if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
