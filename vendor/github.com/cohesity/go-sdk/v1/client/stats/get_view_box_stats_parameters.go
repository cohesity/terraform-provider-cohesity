// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewBoxStatsParams creates a new GetViewBoxStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewBoxStatsParams() *GetViewBoxStatsParams {
	return &GetViewBoxStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewBoxStatsParamsWithTimeout creates a new GetViewBoxStatsParams object
// with the ability to set a timeout on a request.
func NewGetViewBoxStatsParamsWithTimeout(timeout time.Duration) *GetViewBoxStatsParams {
	return &GetViewBoxStatsParams{
		timeout: timeout,
	}
}

// NewGetViewBoxStatsParamsWithContext creates a new GetViewBoxStatsParams object
// with the ability to set a context for a request.
func NewGetViewBoxStatsParamsWithContext(ctx context.Context) *GetViewBoxStatsParams {
	return &GetViewBoxStatsParams{
		Context: ctx,
	}
}

// NewGetViewBoxStatsParamsWithHTTPClient creates a new GetViewBoxStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewBoxStatsParamsWithHTTPClient(client *http.Client) *GetViewBoxStatsParams {
	return &GetViewBoxStatsParams{
		HTTPClient: client,
	}
}

/*
GetViewBoxStatsParams contains all the parameters to send to the API endpoint

	for the get view box stats operation.

	Typically these are written to a http.Request.
*/
type GetViewBoxStatsParams struct {

	/* Cookie.

	     Specifies the opaque string returned in the previous response.
	If this is set, next set of active opens just after the previous
	response are returned. If this is not set, first set of active opens
	are returned.
	*/
	Cookie *string

	/* IncludeServiceProvider.

	     Specifies whether to fetch the consumption of external service providers.
	These information will be listed as a unique organization (tenant) in
	response. By default it is false.
	*/
	IncludeServiceProvider *bool

	/* MaxCount.

	   Specifies a limit on the number of stats groups returned.

	   Format: int64
	*/
	MaxCount *int64

	/* MsecsBeforeCurrentTimeToCompare.

	   Specifies the time in msecs before current time to compare with.

	   Format: int64
	*/
	MsecsBeforeCurrentTimeToCompare *int64

	/* OrganizationsIDList.

	   Specifies a list of organizations (tenant) id.
	*/
	OrganizationsIDList []string

	/* TenantIds.

	     Specifies a list of organizations (tenant) id. This field is added to
	allow tenantIds json tag. This list will be concatenated with
	TenantsIdList to form full list of tenantsIdList.
	*/
	TenantIds []string

	/* ViewBoxesIDList.

	   Specifies a list of view boxes (storage domain) id.
	*/
	ViewBoxesIDList []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get view box stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewBoxStatsParams) WithDefaults() *GetViewBoxStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get view box stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewBoxStatsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get view box stats params
func (o *GetViewBoxStatsParams) WithTimeout(timeout time.Duration) *GetViewBoxStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get view box stats params
func (o *GetViewBoxStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get view box stats params
func (o *GetViewBoxStatsParams) WithContext(ctx context.Context) *GetViewBoxStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get view box stats params
func (o *GetViewBoxStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get view box stats params
func (o *GetViewBoxStatsParams) WithHTTPClient(client *http.Client) *GetViewBoxStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get view box stats params
func (o *GetViewBoxStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCookie adds the cookie to the get view box stats params
func (o *GetViewBoxStatsParams) WithCookie(cookie *string) *GetViewBoxStatsParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the get view box stats params
func (o *GetViewBoxStatsParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithIncludeServiceProvider adds the includeServiceProvider to the get view box stats params
func (o *GetViewBoxStatsParams) WithIncludeServiceProvider(includeServiceProvider *bool) *GetViewBoxStatsParams {
	o.SetIncludeServiceProvider(includeServiceProvider)
	return o
}

// SetIncludeServiceProvider adds the includeServiceProvider to the get view box stats params
func (o *GetViewBoxStatsParams) SetIncludeServiceProvider(includeServiceProvider *bool) {
	o.IncludeServiceProvider = includeServiceProvider
}

// WithMaxCount adds the maxCount to the get view box stats params
func (o *GetViewBoxStatsParams) WithMaxCount(maxCount *int64) *GetViewBoxStatsParams {
	o.SetMaxCount(maxCount)
	return o
}

// SetMaxCount adds the maxCount to the get view box stats params
func (o *GetViewBoxStatsParams) SetMaxCount(maxCount *int64) {
	o.MaxCount = maxCount
}

// WithMsecsBeforeCurrentTimeToCompare adds the msecsBeforeCurrentTimeToCompare to the get view box stats params
func (o *GetViewBoxStatsParams) WithMsecsBeforeCurrentTimeToCompare(msecsBeforeCurrentTimeToCompare *int64) *GetViewBoxStatsParams {
	o.SetMsecsBeforeCurrentTimeToCompare(msecsBeforeCurrentTimeToCompare)
	return o
}

// SetMsecsBeforeCurrentTimeToCompare adds the msecsBeforeCurrentTimeToCompare to the get view box stats params
func (o *GetViewBoxStatsParams) SetMsecsBeforeCurrentTimeToCompare(msecsBeforeCurrentTimeToCompare *int64) {
	o.MsecsBeforeCurrentTimeToCompare = msecsBeforeCurrentTimeToCompare
}

// WithOrganizationsIDList adds the organizationsIDList to the get view box stats params
func (o *GetViewBoxStatsParams) WithOrganizationsIDList(organizationsIDList []string) *GetViewBoxStatsParams {
	o.SetOrganizationsIDList(organizationsIDList)
	return o
}

// SetOrganizationsIDList adds the organizationsIdList to the get view box stats params
func (o *GetViewBoxStatsParams) SetOrganizationsIDList(organizationsIDList []string) {
	o.OrganizationsIDList = organizationsIDList
}

// WithTenantIds adds the tenantIds to the get view box stats params
func (o *GetViewBoxStatsParams) WithTenantIds(tenantIds []string) *GetViewBoxStatsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get view box stats params
func (o *GetViewBoxStatsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithViewBoxesIDList adds the viewBoxesIDList to the get view box stats params
func (o *GetViewBoxStatsParams) WithViewBoxesIDList(viewBoxesIDList []int64) *GetViewBoxStatsParams {
	o.SetViewBoxesIDList(viewBoxesIDList)
	return o
}

// SetViewBoxesIDList adds the viewBoxesIdList to the get view box stats params
func (o *GetViewBoxStatsParams) SetViewBoxesIDList(viewBoxesIDList []int64) {
	o.ViewBoxesIDList = viewBoxesIDList
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewBoxStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.IncludeServiceProvider != nil {

		// query param includeServiceProvider
		var qrIncludeServiceProvider bool

		if o.IncludeServiceProvider != nil {
			qrIncludeServiceProvider = *o.IncludeServiceProvider
		}
		qIncludeServiceProvider := swag.FormatBool(qrIncludeServiceProvider)
		if qIncludeServiceProvider != "" {

			if err := r.SetQueryParam("includeServiceProvider", qIncludeServiceProvider); err != nil {
				return err
			}
		}
	}

	if o.MaxCount != nil {

		// query param maxCount
		var qrMaxCount int64

		if o.MaxCount != nil {
			qrMaxCount = *o.MaxCount
		}
		qMaxCount := swag.FormatInt64(qrMaxCount)
		if qMaxCount != "" {

			if err := r.SetQueryParam("maxCount", qMaxCount); err != nil {
				return err
			}
		}
	}

	if o.MsecsBeforeCurrentTimeToCompare != nil {

		// query param msecsBeforeCurrentTimeToCompare
		var qrMsecsBeforeCurrentTimeToCompare int64

		if o.MsecsBeforeCurrentTimeToCompare != nil {
			qrMsecsBeforeCurrentTimeToCompare = *o.MsecsBeforeCurrentTimeToCompare
		}
		qMsecsBeforeCurrentTimeToCompare := swag.FormatInt64(qrMsecsBeforeCurrentTimeToCompare)
		if qMsecsBeforeCurrentTimeToCompare != "" {

			if err := r.SetQueryParam("msecsBeforeCurrentTimeToCompare", qMsecsBeforeCurrentTimeToCompare); err != nil {
				return err
			}
		}
	}

	if o.OrganizationsIDList != nil {

		// binding items for organizationsIdList
		joinedOrganizationsIDList := o.bindParamOrganizationsIDList(reg)

		// query array param organizationsIdList
		if err := r.SetQueryParam("organizationsIdList", joinedOrganizationsIDList...); err != nil {
			return err
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.ViewBoxesIDList != nil {

		// binding items for viewBoxesIdList
		joinedViewBoxesIDList := o.bindParamViewBoxesIDList(reg)

		// query array param viewBoxesIdList
		if err := r.SetQueryParam("viewBoxesIdList", joinedViewBoxesIDList...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetViewBoxStats binds the parameter organizationsIdList
func (o *GetViewBoxStatsParams) bindParamOrganizationsIDList(formats strfmt.Registry) []string {
	organizationsIDListIR := o.OrganizationsIDList

	var organizationsIDListIC []string
	for _, organizationsIDListIIR := range organizationsIDListIR { // explode []string

		organizationsIDListIIV := organizationsIDListIIR // string as string
		organizationsIDListIC = append(organizationsIDListIC, organizationsIDListIIV)
	}

	// items.CollectionFormat: ""
	organizationsIDListIS := swag.JoinByFormat(organizationsIDListIC, "")

	return organizationsIDListIS
}

// bindParamGetViewBoxStats binds the parameter tenantIds
func (o *GetViewBoxStatsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}

// bindParamGetViewBoxStats binds the parameter viewBoxesIdList
func (o *GetViewBoxStatsParams) bindParamViewBoxesIDList(formats strfmt.Registry) []string {
	viewBoxesIDListIR := o.ViewBoxesIDList

	var viewBoxesIDListIC []string
	for _, viewBoxesIDListIIR := range viewBoxesIDListIR { // explode []int64

		viewBoxesIDListIIV := swag.FormatInt64(viewBoxesIDListIIR) // int64 as string
		viewBoxesIDListIC = append(viewBoxesIDListIC, viewBoxesIDListIIV)
	}

	// items.CollectionFormat: ""
	viewBoxesIDListIS := swag.JoinByFormat(viewBoxesIDListIC, "")

	return viewBoxesIDListIS
}
