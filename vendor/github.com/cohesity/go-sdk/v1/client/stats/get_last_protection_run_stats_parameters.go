// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLastProtectionRunStatsParams creates a new GetLastProtectionRunStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLastProtectionRunStatsParams() *GetLastProtectionRunStatsParams {
	return &GetLastProtectionRunStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLastProtectionRunStatsParamsWithTimeout creates a new GetLastProtectionRunStatsParams object
// with the ability to set a timeout on a request.
func NewGetLastProtectionRunStatsParamsWithTimeout(timeout time.Duration) *GetLastProtectionRunStatsParams {
	return &GetLastProtectionRunStatsParams{
		timeout: timeout,
	}
}

// NewGetLastProtectionRunStatsParamsWithContext creates a new GetLastProtectionRunStatsParams object
// with the ability to set a context for a request.
func NewGetLastProtectionRunStatsParamsWithContext(ctx context.Context) *GetLastProtectionRunStatsParams {
	return &GetLastProtectionRunStatsParams{
		Context: ctx,
	}
}

// NewGetLastProtectionRunStatsParamsWithHTTPClient creates a new GetLastProtectionRunStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLastProtectionRunStatsParamsWithHTTPClient(client *http.Client) *GetLastProtectionRunStatsParams {
	return &GetLastProtectionRunStatsParams{
		HTTPClient: client,
	}
}

/*
GetLastProtectionRunStatsParams contains all the parameters to send to the API endpoint

	for the get last protection run stats operation.

	Typically these are written to a http.Request.
*/
type GetLastProtectionRunStatsParams struct {

	/* FromTimeUsecs.

	   Specifies the time in Unix timestamp epoch in microsecond which filters all the runs started after this value. If not specified, this will be set to 24 hours prior to toTimeUsecs parameter.

	   Format: int64
	*/
	FromTimeUsecs *int64

	/* ToTimeUsecs.

	   Specifies the time in Unix timestamp epoch in microsecond which filters all the runs started before this value. If not specified, this will be set to 24 hours ahead of fromTimeUsecs parameter.

	   Format: int64
	*/
	ToTimeUsecs *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get last protection run stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLastProtectionRunStatsParams) WithDefaults() *GetLastProtectionRunStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get last protection run stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLastProtectionRunStatsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get last protection run stats params
func (o *GetLastProtectionRunStatsParams) WithTimeout(timeout time.Duration) *GetLastProtectionRunStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get last protection run stats params
func (o *GetLastProtectionRunStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get last protection run stats params
func (o *GetLastProtectionRunStatsParams) WithContext(ctx context.Context) *GetLastProtectionRunStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get last protection run stats params
func (o *GetLastProtectionRunStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get last protection run stats params
func (o *GetLastProtectionRunStatsParams) WithHTTPClient(client *http.Client) *GetLastProtectionRunStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get last protection run stats params
func (o *GetLastProtectionRunStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFromTimeUsecs adds the fromTimeUsecs to the get last protection run stats params
func (o *GetLastProtectionRunStatsParams) WithFromTimeUsecs(fromTimeUsecs *int64) *GetLastProtectionRunStatsParams {
	o.SetFromTimeUsecs(fromTimeUsecs)
	return o
}

// SetFromTimeUsecs adds the fromTimeUsecs to the get last protection run stats params
func (o *GetLastProtectionRunStatsParams) SetFromTimeUsecs(fromTimeUsecs *int64) {
	o.FromTimeUsecs = fromTimeUsecs
}

// WithToTimeUsecs adds the toTimeUsecs to the get last protection run stats params
func (o *GetLastProtectionRunStatsParams) WithToTimeUsecs(toTimeUsecs *int64) *GetLastProtectionRunStatsParams {
	o.SetToTimeUsecs(toTimeUsecs)
	return o
}

// SetToTimeUsecs adds the toTimeUsecs to the get last protection run stats params
func (o *GetLastProtectionRunStatsParams) SetToTimeUsecs(toTimeUsecs *int64) {
	o.ToTimeUsecs = toTimeUsecs
}

// WriteToRequest writes these params to a swagger request
func (o *GetLastProtectionRunStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FromTimeUsecs != nil {

		// query param fromTimeUsecs
		var qrFromTimeUsecs int64

		if o.FromTimeUsecs != nil {
			qrFromTimeUsecs = *o.FromTimeUsecs
		}
		qFromTimeUsecs := swag.FormatInt64(qrFromTimeUsecs)
		if qFromTimeUsecs != "" {

			if err := r.SetQueryParam("fromTimeUsecs", qFromTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.ToTimeUsecs != nil {

		// query param toTimeUsecs
		var qrToTimeUsecs int64

		if o.ToTimeUsecs != nil {
			qrToTimeUsecs = *o.ToTimeUsecs
		}
		qToTimeUsecs := swag.FormatInt64(qrToTimeUsecs)
		if qToTimeUsecs != "" {

			if err := r.SetQueryParam("toTimeUsecs", qToTimeUsecs); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
