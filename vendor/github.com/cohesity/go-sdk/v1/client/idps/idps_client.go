// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new idps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new idps API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new idps API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for idps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddIdpDirectoryPrincipals(params *AddIdpDirectoryPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIdpDirectoryPrincipalsCreated, error)

	CreateIdp(params *CreateIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIdpCreated, error)

	DeleteIdp(params *DeleteIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIdpNoContent, error)

	GetIdps(params *GetIdpsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIdpsOK, error)

	IdpLogin(params *IdpLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	UpdateIdp(params *UpdateIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIdpOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	AddIdpDirectoryPrincipals adds multiple groups or users on the cohesity cluster for the specified idp principals in addition assign cohesity roles to the users or groups to define their cohesity privileges

	**Privileges:** ```PRINCIPAL_MODIFY``` <br><br>After a group or user has been added to a Cohesity Cluster,

the referenced Idp principal can be used by the Cohesity Cluster.
In addition, this operation maps Cohesity roles with a group or user and
this mapping defines the privileges allowed on the Cohesity Cluster for the
group or user.
For example if an 'management' group is created on the Cohesity Cluster
for the Idp 'management' principal group and is associated with the
Cohesity 'View' role, all users in the referenced Idp
'management' principal group can log in to the Cohesity Dashboard but
will only have view-only privileges. These users cannot create new
Protection Jobs, Policies, Views, etc.

NOTE: Local Cohesity users and groups cannot be created by this operation.
Local Cohesity users or groups do not have an associated Idp
principals and are created directly in the default LOCAL domain.
*/
func (a *Client) AddIdpDirectoryPrincipals(params *AddIdpDirectoryPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIdpDirectoryPrincipalsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddIdpDirectoryPrincipalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddIdpDirectoryPrincipals",
		Method:             "POST",
		PathPattern:        "/public/idps/principals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddIdpDirectoryPrincipalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddIdpDirectoryPrincipalsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddIdpDirectoryPrincipalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateIdp creates an Id p configuration

**Privileges:** ```PRINCIPAL_MODIFY``` <br><br>Returns the newly created IdP configuration.
*/
func (a *Client) CreateIdp(params *CreateIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIdpCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIdpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateIdp",
		Method:             "POST",
		PathPattern:        "/public/idps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIdpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIdpCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateIdpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteIdp deletes one Id p configuration

**Privileges:** ```PRINCIPAL_MODIFY``` <br><br>Returns Success if the IdP configuration is deleted.
*/
func (a *Client) DeleteIdp(params *DeleteIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIdpNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIdpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteIdp",
		Method:             "DELETE",
		PathPattern:        "/public/idps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIdpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIdpNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIdpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetIdps lists the Id ps configured on the cluster

	**Privileges:** ```PRINCIPAL_VIEW``` <br><br>Returns the Idps configured on the Cohesity Cluster corresponding to the filter

parameters. If no filter is given, all Idp configurations are returned.
*/
func (a *Client) GetIdps(params *GetIdpsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIdpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIdpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIdps",
		Method:             "GET",
		PathPattern:        "/public/idps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdpsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIdpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIdpsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdpLogin logins to cohesity cluster using an Id p

```No Privileges Required``` <br><br>Redirects the client to the IdP site with the URI to login.
*/
func (a *Client) IdpLogin(params *IdpLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdpLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdpLogin",
		Method:             "GET",
		PathPattern:        "/public/idps/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdpLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateIdp updates an Id p configuration

**Privileges:** ```PRINCIPAL_MODIFY``` <br><br>Returns the updated IdP configuration.
*/
func (a *Client) UpdateIdp(params *UpdateIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIdpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIdpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateIdp",
		Method:             "PUT",
		PathPattern:        "/public/idps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIdpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIdpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateIdpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
