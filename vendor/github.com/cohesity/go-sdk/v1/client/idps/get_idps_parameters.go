// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetIdpsParams creates a new GetIdpsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetIdpsParams() *GetIdpsParams {
	return &GetIdpsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetIdpsParamsWithTimeout creates a new GetIdpsParams object
// with the ability to set a timeout on a request.
func NewGetIdpsParamsWithTimeout(timeout time.Duration) *GetIdpsParams {
	return &GetIdpsParams{
		timeout: timeout,
	}
}

// NewGetIdpsParamsWithContext creates a new GetIdpsParams object
// with the ability to set a context for a request.
func NewGetIdpsParamsWithContext(ctx context.Context) *GetIdpsParams {
	return &GetIdpsParams{
		Context: ctx,
	}
}

// NewGetIdpsParamsWithHTTPClient creates a new GetIdpsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetIdpsParamsWithHTTPClient(client *http.Client) *GetIdpsParams {
	return &GetIdpsParams{
		HTTPClient: client,
	}
}

/*
GetIdpsParams contains all the parameters to send to the API endpoint

	for the get idps operation.

	Typically these are written to a http.Request.
*/
type GetIdpsParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* Domains.

	     Specifies the domains of the IdP configurations. If specified, returns
	IdP configurations matching the domains in the parameters.
	*/
	Domains []string

	/* Ids.

	     Specifies the Ids of the IdP configuration. If specified, returns IdP
	configurations of the matching Ids in the IdP configuration.
	*/
	Ids []int64

	/* Names.

	     Specifies the names of the IdP vendors like Okta. If specified, returns
	IdP configurations of the vendors matching the names in the parameters.
	*/
	Names []string

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get idps params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIdpsParams) WithDefaults() *GetIdpsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get idps params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIdpsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get idps params
func (o *GetIdpsParams) WithTimeout(timeout time.Duration) *GetIdpsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get idps params
func (o *GetIdpsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get idps params
func (o *GetIdpsParams) WithContext(ctx context.Context) *GetIdpsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get idps params
func (o *GetIdpsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get idps params
func (o *GetIdpsParams) WithHTTPClient(client *http.Client) *GetIdpsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get idps params
func (o *GetIdpsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get idps params
func (o *GetIdpsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetIdpsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get idps params
func (o *GetIdpsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithDomains adds the domains to the get idps params
func (o *GetIdpsParams) WithDomains(domains []string) *GetIdpsParams {
	o.SetDomains(domains)
	return o
}

// SetDomains adds the domains to the get idps params
func (o *GetIdpsParams) SetDomains(domains []string) {
	o.Domains = domains
}

// WithIds adds the ids to the get idps params
func (o *GetIdpsParams) WithIds(ids []int64) *GetIdpsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get idps params
func (o *GetIdpsParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithNames adds the names to the get idps params
func (o *GetIdpsParams) WithNames(names []string) *GetIdpsParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the get idps params
func (o *GetIdpsParams) SetNames(names []string) {
	o.Names = names
}

// WithTenantIds adds the tenantIds to the get idps params
func (o *GetIdpsParams) WithTenantIds(tenantIds []string) *GetIdpsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get idps params
func (o *GetIdpsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetIdpsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.Domains != nil {

		// binding items for domains
		joinedDomains := o.bindParamDomains(reg)

		// query array param domains
		if err := r.SetQueryParam("domains", joinedDomains...); err != nil {
			return err
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Names != nil {

		// binding items for names
		joinedNames := o.bindParamNames(reg)

		// query array param names
		if err := r.SetQueryParam("names", joinedNames...); err != nil {
			return err
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetIdps binds the parameter domains
func (o *GetIdpsParams) bindParamDomains(formats strfmt.Registry) []string {
	domainsIR := o.Domains

	var domainsIC []string
	for _, domainsIIR := range domainsIR { // explode []string

		domainsIIV := domainsIIR // string as string
		domainsIC = append(domainsIC, domainsIIV)
	}

	// items.CollectionFormat: ""
	domainsIS := swag.JoinByFormat(domainsIC, "")

	return domainsIS
}

// bindParamGetIdps binds the parameter ids
func (o *GetIdpsParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetIdps binds the parameter names
func (o *GetIdpsParams) bindParamNames(formats strfmt.Registry) []string {
	namesIR := o.Names

	var namesIC []string
	for _, namesIIR := range namesIR { // explode []string

		namesIIV := namesIIR // string as string
		namesIC = append(namesIC, namesIIV)
	}

	// items.CollectionFormat: ""
	namesIS := swag.JoinByFormat(namesIC, "")

	return namesIS
}

// bindParamGetIdps binds the parameter tenantIds
func (o *GetIdpsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
