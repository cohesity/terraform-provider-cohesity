// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewReadDirParams creates a new ReadDirParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReadDirParams() *ReadDirParams {
	return &ReadDirParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReadDirParamsWithTimeout creates a new ReadDirParams object
// with the ability to set a timeout on a request.
func NewReadDirParamsWithTimeout(timeout time.Duration) *ReadDirParams {
	return &ReadDirParams{
		timeout: timeout,
	}
}

// NewReadDirParamsWithContext creates a new ReadDirParams object
// with the ability to set a context for a request.
func NewReadDirParamsWithContext(ctx context.Context) *ReadDirParams {
	return &ReadDirParams{
		Context: ctx,
	}
}

// NewReadDirParamsWithHTTPClient creates a new ReadDirParams object
// with the ability to set a custom HTTPClient for a request.
func NewReadDirParamsWithHTTPClient(client *http.Client) *ReadDirParams {
	return &ReadDirParams{
		HTTPClient: client,
	}
}

/*
ReadDirParams contains all the parameters to send to the API endpoint

	for the read dir operation.

	Typically these are written to a http.Request.
*/
type ReadDirParams struct {

	/* AttemptNum.

	     AttemptNum is the attempt number of the run that successfully created the
	snapshot.

	     Format: int64
	*/
	AttemptNum *int64

	/* ClusterID.

	   ClusterId is the Id of the cluster used for constructing JobUid.

	   Format: int64
	*/
	ClusterID *int64

	/* ClusterIncarnationID.

	     ClusterIncarnationId is the incarnation Id of the cluster used for
	constructing JobUid.

	     Format: int64
	*/
	ClusterIncarnationID *int64

	/* Cookie.

	     Cookie is used for paginating results. If ReadDirResult returned partial
	results, it will also return a cookie that can be used to resume the
	listing. The value returned in ReadDirResult should be passed in the next
	call. The first call should not have this value set. Note that this value
	is only a suggestion and server is free to do a short read (return fewer
	entries along with a cookie).
	*/
	Cookie *string

	/* DirPath.

	   DirPath is the full path of the directory whose contents need to be listed.
	*/
	DirPath *string

	/* EntityID.

	   EntityId is the Id of the VM.

	   Format: int64
	*/
	EntityID *int64

	/* JobID.

	     JobId is the id of the local job that took the snapshot, which may or
	may not match the JobUidObjectId below depending on whether the object
	originally belonged to this local job or to a different remote job.

	     Format: int64
	*/
	JobID *int64

	/* JobInstanceID.

	   JobInstanceId is the Id of the job run that backed up the entity.

	   Format: int64
	*/
	JobInstanceID *int64

	/* JobStartTimeUsecs.

	     JobStartTimeUsecs is the start time in usecs of the job run that backed up
	the entity.

	     Format: int64
	*/
	JobStartTimeUsecs *int64

	/* JobUIDObjectID.

	     JobUidObjectId is the globally unique id of the job that the object
	originally belonged to. If this object originally belonged to a job from a
	remote cluster, this field will contain the JobId of the remote job, else
	it will contain the JobId of the local job.

	     Format: int64
	*/
	JobUIDObjectID *int64

	/* MaxEntries.

	     MaxEntries is the maximum number of entries to return in this call. If
	there are more entries, server will return a cookie in the response that
	can be used to continue enumeration from the last call.

	     Format: int32
	*/
	MaxEntries *int32

	/* PointInTimeUsecs.

	     PointInTimeUsecs is the time to read directory from previously available
	snapshot before this time.

	     Format: int64
	*/
	PointInTimeUsecs *int64

	/* ProtectionSourceEnvironment.

	   Specifies the environment type of the registered source.
	*/
	ProtectionSourceEnvironment *string

	/* StatFileEntries.

	   StatFileEntries specifies whether file stat data is returned.
	*/
	StatFileEntries *bool

	/* UseLibrarian.

	   Specifies whether to use indexed data in Librarian for browse.
	*/
	UseLibrarian *bool

	/* ViewBoxID.

	   Id of the View Box if a View is being browsed.

	   Format: int64
	*/
	ViewBoxID *int64

	/* ViewName.

	   Name of the View if a View is being browsed.
	*/
	ViewName *string

	/* VolumeInfoCookie.

	     VolumeInfoCookie is the cookie to be passed in calls to reading a VM dir
	for this volume.

	     Format: uint64
	*/
	VolumeInfoCookie *uint64

	/* VolumeName.

	     VolumeName is the name of the volume that needs to be browsed. This should
	match the name returned in VolumeInfo.
	*/
	VolumeName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the read dir params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReadDirParams) WithDefaults() *ReadDirParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the read dir params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReadDirParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the read dir params
func (o *ReadDirParams) WithTimeout(timeout time.Duration) *ReadDirParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read dir params
func (o *ReadDirParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read dir params
func (o *ReadDirParams) WithContext(ctx context.Context) *ReadDirParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read dir params
func (o *ReadDirParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read dir params
func (o *ReadDirParams) WithHTTPClient(client *http.Client) *ReadDirParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read dir params
func (o *ReadDirParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttemptNum adds the attemptNum to the read dir params
func (o *ReadDirParams) WithAttemptNum(attemptNum *int64) *ReadDirParams {
	o.SetAttemptNum(attemptNum)
	return o
}

// SetAttemptNum adds the attemptNum to the read dir params
func (o *ReadDirParams) SetAttemptNum(attemptNum *int64) {
	o.AttemptNum = attemptNum
}

// WithClusterID adds the clusterID to the read dir params
func (o *ReadDirParams) WithClusterID(clusterID *int64) *ReadDirParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the read dir params
func (o *ReadDirParams) SetClusterID(clusterID *int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the read dir params
func (o *ReadDirParams) WithClusterIncarnationID(clusterIncarnationID *int64) *ReadDirParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the read dir params
func (o *ReadDirParams) SetClusterIncarnationID(clusterIncarnationID *int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithCookie adds the cookie to the read dir params
func (o *ReadDirParams) WithCookie(cookie *string) *ReadDirParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the read dir params
func (o *ReadDirParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithDirPath adds the dirPath to the read dir params
func (o *ReadDirParams) WithDirPath(dirPath *string) *ReadDirParams {
	o.SetDirPath(dirPath)
	return o
}

// SetDirPath adds the dirPath to the read dir params
func (o *ReadDirParams) SetDirPath(dirPath *string) {
	o.DirPath = dirPath
}

// WithEntityID adds the entityID to the read dir params
func (o *ReadDirParams) WithEntityID(entityID *int64) *ReadDirParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the read dir params
func (o *ReadDirParams) SetEntityID(entityID *int64) {
	o.EntityID = entityID
}

// WithJobID adds the jobID to the read dir params
func (o *ReadDirParams) WithJobID(jobID *int64) *ReadDirParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the read dir params
func (o *ReadDirParams) SetJobID(jobID *int64) {
	o.JobID = jobID
}

// WithJobInstanceID adds the jobInstanceID to the read dir params
func (o *ReadDirParams) WithJobInstanceID(jobInstanceID *int64) *ReadDirParams {
	o.SetJobInstanceID(jobInstanceID)
	return o
}

// SetJobInstanceID adds the jobInstanceId to the read dir params
func (o *ReadDirParams) SetJobInstanceID(jobInstanceID *int64) {
	o.JobInstanceID = jobInstanceID
}

// WithJobStartTimeUsecs adds the jobStartTimeUsecs to the read dir params
func (o *ReadDirParams) WithJobStartTimeUsecs(jobStartTimeUsecs *int64) *ReadDirParams {
	o.SetJobStartTimeUsecs(jobStartTimeUsecs)
	return o
}

// SetJobStartTimeUsecs adds the jobStartTimeUsecs to the read dir params
func (o *ReadDirParams) SetJobStartTimeUsecs(jobStartTimeUsecs *int64) {
	o.JobStartTimeUsecs = jobStartTimeUsecs
}

// WithJobUIDObjectID adds the jobUIDObjectID to the read dir params
func (o *ReadDirParams) WithJobUIDObjectID(jobUIDObjectID *int64) *ReadDirParams {
	o.SetJobUIDObjectID(jobUIDObjectID)
	return o
}

// SetJobUIDObjectID adds the jobUidObjectId to the read dir params
func (o *ReadDirParams) SetJobUIDObjectID(jobUIDObjectID *int64) {
	o.JobUIDObjectID = jobUIDObjectID
}

// WithMaxEntries adds the maxEntries to the read dir params
func (o *ReadDirParams) WithMaxEntries(maxEntries *int32) *ReadDirParams {
	o.SetMaxEntries(maxEntries)
	return o
}

// SetMaxEntries adds the maxEntries to the read dir params
func (o *ReadDirParams) SetMaxEntries(maxEntries *int32) {
	o.MaxEntries = maxEntries
}

// WithPointInTimeUsecs adds the pointInTimeUsecs to the read dir params
func (o *ReadDirParams) WithPointInTimeUsecs(pointInTimeUsecs *int64) *ReadDirParams {
	o.SetPointInTimeUsecs(pointInTimeUsecs)
	return o
}

// SetPointInTimeUsecs adds the pointInTimeUsecs to the read dir params
func (o *ReadDirParams) SetPointInTimeUsecs(pointInTimeUsecs *int64) {
	o.PointInTimeUsecs = pointInTimeUsecs
}

// WithProtectionSourceEnvironment adds the protectionSourceEnvironment to the read dir params
func (o *ReadDirParams) WithProtectionSourceEnvironment(protectionSourceEnvironment *string) *ReadDirParams {
	o.SetProtectionSourceEnvironment(protectionSourceEnvironment)
	return o
}

// SetProtectionSourceEnvironment adds the protectionSourceEnvironment to the read dir params
func (o *ReadDirParams) SetProtectionSourceEnvironment(protectionSourceEnvironment *string) {
	o.ProtectionSourceEnvironment = protectionSourceEnvironment
}

// WithStatFileEntries adds the statFileEntries to the read dir params
func (o *ReadDirParams) WithStatFileEntries(statFileEntries *bool) *ReadDirParams {
	o.SetStatFileEntries(statFileEntries)
	return o
}

// SetStatFileEntries adds the statFileEntries to the read dir params
func (o *ReadDirParams) SetStatFileEntries(statFileEntries *bool) {
	o.StatFileEntries = statFileEntries
}

// WithUseLibrarian adds the useLibrarian to the read dir params
func (o *ReadDirParams) WithUseLibrarian(useLibrarian *bool) *ReadDirParams {
	o.SetUseLibrarian(useLibrarian)
	return o
}

// SetUseLibrarian adds the useLibrarian to the read dir params
func (o *ReadDirParams) SetUseLibrarian(useLibrarian *bool) {
	o.UseLibrarian = useLibrarian
}

// WithViewBoxID adds the viewBoxID to the read dir params
func (o *ReadDirParams) WithViewBoxID(viewBoxID *int64) *ReadDirParams {
	o.SetViewBoxID(viewBoxID)
	return o
}

// SetViewBoxID adds the viewBoxId to the read dir params
func (o *ReadDirParams) SetViewBoxID(viewBoxID *int64) {
	o.ViewBoxID = viewBoxID
}

// WithViewName adds the viewName to the read dir params
func (o *ReadDirParams) WithViewName(viewName *string) *ReadDirParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the read dir params
func (o *ReadDirParams) SetViewName(viewName *string) {
	o.ViewName = viewName
}

// WithVolumeInfoCookie adds the volumeInfoCookie to the read dir params
func (o *ReadDirParams) WithVolumeInfoCookie(volumeInfoCookie *uint64) *ReadDirParams {
	o.SetVolumeInfoCookie(volumeInfoCookie)
	return o
}

// SetVolumeInfoCookie adds the volumeInfoCookie to the read dir params
func (o *ReadDirParams) SetVolumeInfoCookie(volumeInfoCookie *uint64) {
	o.VolumeInfoCookie = volumeInfoCookie
}

// WithVolumeName adds the volumeName to the read dir params
func (o *ReadDirParams) WithVolumeName(volumeName *string) *ReadDirParams {
	o.SetVolumeName(volumeName)
	return o
}

// SetVolumeName adds the volumeName to the read dir params
func (o *ReadDirParams) SetVolumeName(volumeName *string) {
	o.VolumeName = volumeName
}

// WriteToRequest writes these params to a swagger request
func (o *ReadDirParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AttemptNum != nil {

		// query param attemptNum
		var qrAttemptNum int64

		if o.AttemptNum != nil {
			qrAttemptNum = *o.AttemptNum
		}
		qAttemptNum := swag.FormatInt64(qrAttemptNum)
		if qAttemptNum != "" {

			if err := r.SetQueryParam("attemptNum", qAttemptNum); err != nil {
				return err
			}
		}
	}

	if o.ClusterID != nil {

		// query param clusterId
		var qrClusterID int64

		if o.ClusterID != nil {
			qrClusterID = *o.ClusterID
		}
		qClusterID := swag.FormatInt64(qrClusterID)
		if qClusterID != "" {

			if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
				return err
			}
		}
	}

	if o.ClusterIncarnationID != nil {

		// query param clusterIncarnationId
		var qrClusterIncarnationID int64

		if o.ClusterIncarnationID != nil {
			qrClusterIncarnationID = *o.ClusterIncarnationID
		}
		qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
		if qClusterIncarnationID != "" {

			if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
				return err
			}
		}
	}

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.DirPath != nil {

		// query param dirPath
		var qrDirPath string

		if o.DirPath != nil {
			qrDirPath = *o.DirPath
		}
		qDirPath := qrDirPath
		if qDirPath != "" {

			if err := r.SetQueryParam("dirPath", qDirPath); err != nil {
				return err
			}
		}
	}

	if o.EntityID != nil {

		// query param entityId
		var qrEntityID int64

		if o.EntityID != nil {
			qrEntityID = *o.EntityID
		}
		qEntityID := swag.FormatInt64(qrEntityID)
		if qEntityID != "" {

			if err := r.SetQueryParam("entityId", qEntityID); err != nil {
				return err
			}
		}
	}

	if o.JobID != nil {

		// query param jobId
		var qrJobID int64

		if o.JobID != nil {
			qrJobID = *o.JobID
		}
		qJobID := swag.FormatInt64(qrJobID)
		if qJobID != "" {

			if err := r.SetQueryParam("jobId", qJobID); err != nil {
				return err
			}
		}
	}

	if o.JobInstanceID != nil {

		// query param jobInstanceId
		var qrJobInstanceID int64

		if o.JobInstanceID != nil {
			qrJobInstanceID = *o.JobInstanceID
		}
		qJobInstanceID := swag.FormatInt64(qrJobInstanceID)
		if qJobInstanceID != "" {

			if err := r.SetQueryParam("jobInstanceId", qJobInstanceID); err != nil {
				return err
			}
		}
	}

	if o.JobStartTimeUsecs != nil {

		// query param jobStartTimeUsecs
		var qrJobStartTimeUsecs int64

		if o.JobStartTimeUsecs != nil {
			qrJobStartTimeUsecs = *o.JobStartTimeUsecs
		}
		qJobStartTimeUsecs := swag.FormatInt64(qrJobStartTimeUsecs)
		if qJobStartTimeUsecs != "" {

			if err := r.SetQueryParam("jobStartTimeUsecs", qJobStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.JobUIDObjectID != nil {

		// query param jobUidObjectId
		var qrJobUIDObjectID int64

		if o.JobUIDObjectID != nil {
			qrJobUIDObjectID = *o.JobUIDObjectID
		}
		qJobUIDObjectID := swag.FormatInt64(qrJobUIDObjectID)
		if qJobUIDObjectID != "" {

			if err := r.SetQueryParam("jobUidObjectId", qJobUIDObjectID); err != nil {
				return err
			}
		}
	}

	if o.MaxEntries != nil {

		// query param maxEntries
		var qrMaxEntries int32

		if o.MaxEntries != nil {
			qrMaxEntries = *o.MaxEntries
		}
		qMaxEntries := swag.FormatInt32(qrMaxEntries)
		if qMaxEntries != "" {

			if err := r.SetQueryParam("maxEntries", qMaxEntries); err != nil {
				return err
			}
		}
	}

	if o.PointInTimeUsecs != nil {

		// query param pointInTimeUsecs
		var qrPointInTimeUsecs int64

		if o.PointInTimeUsecs != nil {
			qrPointInTimeUsecs = *o.PointInTimeUsecs
		}
		qPointInTimeUsecs := swag.FormatInt64(qrPointInTimeUsecs)
		if qPointInTimeUsecs != "" {

			if err := r.SetQueryParam("pointInTimeUsecs", qPointInTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.ProtectionSourceEnvironment != nil {

		// query param protectionSourceEnvironment
		var qrProtectionSourceEnvironment string

		if o.ProtectionSourceEnvironment != nil {
			qrProtectionSourceEnvironment = *o.ProtectionSourceEnvironment
		}
		qProtectionSourceEnvironment := qrProtectionSourceEnvironment
		if qProtectionSourceEnvironment != "" {

			if err := r.SetQueryParam("protectionSourceEnvironment", qProtectionSourceEnvironment); err != nil {
				return err
			}
		}
	}

	if o.StatFileEntries != nil {

		// query param statFileEntries
		var qrStatFileEntries bool

		if o.StatFileEntries != nil {
			qrStatFileEntries = *o.StatFileEntries
		}
		qStatFileEntries := swag.FormatBool(qrStatFileEntries)
		if qStatFileEntries != "" {

			if err := r.SetQueryParam("statFileEntries", qStatFileEntries); err != nil {
				return err
			}
		}
	}

	if o.UseLibrarian != nil {

		// query param useLibrarian
		var qrUseLibrarian bool

		if o.UseLibrarian != nil {
			qrUseLibrarian = *o.UseLibrarian
		}
		qUseLibrarian := swag.FormatBool(qrUseLibrarian)
		if qUseLibrarian != "" {

			if err := r.SetQueryParam("useLibrarian", qUseLibrarian); err != nil {
				return err
			}
		}
	}

	if o.ViewBoxID != nil {

		// query param viewBoxId
		var qrViewBoxID int64

		if o.ViewBoxID != nil {
			qrViewBoxID = *o.ViewBoxID
		}
		qViewBoxID := swag.FormatInt64(qrViewBoxID)
		if qViewBoxID != "" {

			if err := r.SetQueryParam("viewBoxId", qViewBoxID); err != nil {
				return err
			}
		}
	}

	if o.ViewName != nil {

		// query param viewName
		var qrViewName string

		if o.ViewName != nil {
			qrViewName = *o.ViewName
		}
		qViewName := qrViewName
		if qViewName != "" {

			if err := r.SetQueryParam("viewName", qViewName); err != nil {
				return err
			}
		}
	}

	if o.VolumeInfoCookie != nil {

		// query param volumeInfoCookie
		var qrVolumeInfoCookie uint64

		if o.VolumeInfoCookie != nil {
			qrVolumeInfoCookie = *o.VolumeInfoCookie
		}
		qVolumeInfoCookie := swag.FormatUint64(qrVolumeInfoCookie)
		if qVolumeInfoCookie != "" {

			if err := r.SetQueryParam("volumeInfoCookie", qVolumeInfoCookie); err != nil {
				return err
			}
		}
	}

	if o.VolumeName != nil {

		// query param volumeName
		var qrVolumeName string

		if o.VolumeName != nil {
			qrVolumeName = *o.VolumeName
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volumeName", qVolumeName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
