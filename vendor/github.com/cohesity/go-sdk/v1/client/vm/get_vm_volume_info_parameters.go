// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetVMVolumeInfoParams creates a new GetVMVolumeInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVMVolumeInfoParams() *GetVMVolumeInfoParams {
	return &GetVMVolumeInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVMVolumeInfoParamsWithTimeout creates a new GetVMVolumeInfoParams object
// with the ability to set a timeout on a request.
func NewGetVMVolumeInfoParamsWithTimeout(timeout time.Duration) *GetVMVolumeInfoParams {
	return &GetVMVolumeInfoParams{
		timeout: timeout,
	}
}

// NewGetVMVolumeInfoParamsWithContext creates a new GetVMVolumeInfoParams object
// with the ability to set a context for a request.
func NewGetVMVolumeInfoParamsWithContext(ctx context.Context) *GetVMVolumeInfoParams {
	return &GetVMVolumeInfoParams{
		Context: ctx,
	}
}

// NewGetVMVolumeInfoParamsWithHTTPClient creates a new GetVMVolumeInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVMVolumeInfoParamsWithHTTPClient(client *http.Client) *GetVMVolumeInfoParams {
	return &GetVMVolumeInfoParams{
		HTTPClient: client,
	}
}

/*
GetVMVolumeInfoParams contains all the parameters to send to the API endpoint

	for the get Vm volume info operation.

	Typically these are written to a http.Request.
*/
type GetVMVolumeInfoParams struct {

	/* AttemptNum.

	     AttemptNum is the attempt number of the run that successfully created the
	snapshot.

	     Format: int64
	*/
	AttemptNum *int64

	/* ClusterID.

	   ClusterId is the Id of the cluster used for constructing JobUid.

	   Format: int64
	*/
	ClusterID *int64

	/* ClusterIncarnationID.

	     ClusterIncarnationId is the incarnation Id of the cluster used for
	constructing JobUid.

	     Format: int64
	*/
	ClusterIncarnationID *int64

	/* ComputeVolumeInfo.

	     If volume information is not already computed then `ComputeVolumeInfo`
	computes the volume information if it's true, else returns KNotFound.
	*/
	ComputeVolumeInfo *bool

	/* EntityID.

	   EntityId is the Id of the VM.

	   Format: int64
	*/
	EntityID *int64

	/* JobID.

	     JobId is the id of the local job that took the snapshot, which may or
	may not match the JobUidObjectId below depending on whether the object
	originally belonged to this local job or to a different remote job.

	     Format: int64
	*/
	JobID *int64

	/* JobInstanceID.

	   JobInstanceId is the Id of the job run that backed up the entity.

	   Format: int64
	*/
	JobInstanceID *int64

	/* JobStartTimeUsecs.

	     JobStartTimeUsecs is the start time in usecs of the job run that backed up
	the entity.

	     Format: int64
	*/
	JobStartTimeUsecs *int64

	/* JobUIDObjectID.

	     JobUidObjectId is the globally unique id of the job that the object
	originally belonged to. If this object originally belonged to a job from a
	remote cluster, this field will contain the JobId of the remote job, else
	it will contain the JobId of the local job.

	     Format: int64
	*/
	JobUIDObjectID *int64

	/* PointInTimeUsecs.

	     PointInTimeUsecs is the time to get volume info from previously available
	snapshot before this time.

	     Format: int64
	*/
	PointInTimeUsecs *int64

	/* SupportedVolumesOnly.

	     Specifies to return only supported volumes information. Unsupported
	volumes are not returned if this flag is set to true.
	Default is false.
	*/
	SupportedVolumesOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get Vm volume info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVMVolumeInfoParams) WithDefaults() *GetVMVolumeInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get Vm volume info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVMVolumeInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithTimeout(timeout time.Duration) *GetVMVolumeInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithContext(ctx context.Context) *GetVMVolumeInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithHTTPClient(client *http.Client) *GetVMVolumeInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttemptNum adds the attemptNum to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithAttemptNum(attemptNum *int64) *GetVMVolumeInfoParams {
	o.SetAttemptNum(attemptNum)
	return o
}

// SetAttemptNum adds the attemptNum to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetAttemptNum(attemptNum *int64) {
	o.AttemptNum = attemptNum
}

// WithClusterID adds the clusterID to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithClusterID(clusterID *int64) *GetVMVolumeInfoParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetClusterID(clusterID *int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithClusterIncarnationID(clusterIncarnationID *int64) *GetVMVolumeInfoParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetClusterIncarnationID(clusterIncarnationID *int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithComputeVolumeInfo adds the computeVolumeInfo to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithComputeVolumeInfo(computeVolumeInfo *bool) *GetVMVolumeInfoParams {
	o.SetComputeVolumeInfo(computeVolumeInfo)
	return o
}

// SetComputeVolumeInfo adds the computeVolumeInfo to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetComputeVolumeInfo(computeVolumeInfo *bool) {
	o.ComputeVolumeInfo = computeVolumeInfo
}

// WithEntityID adds the entityID to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithEntityID(entityID *int64) *GetVMVolumeInfoParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetEntityID(entityID *int64) {
	o.EntityID = entityID
}

// WithJobID adds the jobID to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithJobID(jobID *int64) *GetVMVolumeInfoParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetJobID(jobID *int64) {
	o.JobID = jobID
}

// WithJobInstanceID adds the jobInstanceID to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithJobInstanceID(jobInstanceID *int64) *GetVMVolumeInfoParams {
	o.SetJobInstanceID(jobInstanceID)
	return o
}

// SetJobInstanceID adds the jobInstanceId to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetJobInstanceID(jobInstanceID *int64) {
	o.JobInstanceID = jobInstanceID
}

// WithJobStartTimeUsecs adds the jobStartTimeUsecs to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithJobStartTimeUsecs(jobStartTimeUsecs *int64) *GetVMVolumeInfoParams {
	o.SetJobStartTimeUsecs(jobStartTimeUsecs)
	return o
}

// SetJobStartTimeUsecs adds the jobStartTimeUsecs to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetJobStartTimeUsecs(jobStartTimeUsecs *int64) {
	o.JobStartTimeUsecs = jobStartTimeUsecs
}

// WithJobUIDObjectID adds the jobUIDObjectID to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithJobUIDObjectID(jobUIDObjectID *int64) *GetVMVolumeInfoParams {
	o.SetJobUIDObjectID(jobUIDObjectID)
	return o
}

// SetJobUIDObjectID adds the jobUidObjectId to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetJobUIDObjectID(jobUIDObjectID *int64) {
	o.JobUIDObjectID = jobUIDObjectID
}

// WithPointInTimeUsecs adds the pointInTimeUsecs to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithPointInTimeUsecs(pointInTimeUsecs *int64) *GetVMVolumeInfoParams {
	o.SetPointInTimeUsecs(pointInTimeUsecs)
	return o
}

// SetPointInTimeUsecs adds the pointInTimeUsecs to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetPointInTimeUsecs(pointInTimeUsecs *int64) {
	o.PointInTimeUsecs = pointInTimeUsecs
}

// WithSupportedVolumesOnly adds the supportedVolumesOnly to the get Vm volume info params
func (o *GetVMVolumeInfoParams) WithSupportedVolumesOnly(supportedVolumesOnly *bool) *GetVMVolumeInfoParams {
	o.SetSupportedVolumesOnly(supportedVolumesOnly)
	return o
}

// SetSupportedVolumesOnly adds the supportedVolumesOnly to the get Vm volume info params
func (o *GetVMVolumeInfoParams) SetSupportedVolumesOnly(supportedVolumesOnly *bool) {
	o.SupportedVolumesOnly = supportedVolumesOnly
}

// WriteToRequest writes these params to a swagger request
func (o *GetVMVolumeInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AttemptNum != nil {

		// query param attemptNum
		var qrAttemptNum int64

		if o.AttemptNum != nil {
			qrAttemptNum = *o.AttemptNum
		}
		qAttemptNum := swag.FormatInt64(qrAttemptNum)
		if qAttemptNum != "" {

			if err := r.SetQueryParam("attemptNum", qAttemptNum); err != nil {
				return err
			}
		}
	}

	if o.ClusterID != nil {

		// query param clusterId
		var qrClusterID int64

		if o.ClusterID != nil {
			qrClusterID = *o.ClusterID
		}
		qClusterID := swag.FormatInt64(qrClusterID)
		if qClusterID != "" {

			if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
				return err
			}
		}
	}

	if o.ClusterIncarnationID != nil {

		// query param clusterIncarnationId
		var qrClusterIncarnationID int64

		if o.ClusterIncarnationID != nil {
			qrClusterIncarnationID = *o.ClusterIncarnationID
		}
		qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
		if qClusterIncarnationID != "" {

			if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
				return err
			}
		}
	}

	if o.ComputeVolumeInfo != nil {

		// query param computeVolumeInfo
		var qrComputeVolumeInfo bool

		if o.ComputeVolumeInfo != nil {
			qrComputeVolumeInfo = *o.ComputeVolumeInfo
		}
		qComputeVolumeInfo := swag.FormatBool(qrComputeVolumeInfo)
		if qComputeVolumeInfo != "" {

			if err := r.SetQueryParam("computeVolumeInfo", qComputeVolumeInfo); err != nil {
				return err
			}
		}
	}

	if o.EntityID != nil {

		// query param entityId
		var qrEntityID int64

		if o.EntityID != nil {
			qrEntityID = *o.EntityID
		}
		qEntityID := swag.FormatInt64(qrEntityID)
		if qEntityID != "" {

			if err := r.SetQueryParam("entityId", qEntityID); err != nil {
				return err
			}
		}
	}

	if o.JobID != nil {

		// query param jobId
		var qrJobID int64

		if o.JobID != nil {
			qrJobID = *o.JobID
		}
		qJobID := swag.FormatInt64(qrJobID)
		if qJobID != "" {

			if err := r.SetQueryParam("jobId", qJobID); err != nil {
				return err
			}
		}
	}

	if o.JobInstanceID != nil {

		// query param jobInstanceId
		var qrJobInstanceID int64

		if o.JobInstanceID != nil {
			qrJobInstanceID = *o.JobInstanceID
		}
		qJobInstanceID := swag.FormatInt64(qrJobInstanceID)
		if qJobInstanceID != "" {

			if err := r.SetQueryParam("jobInstanceId", qJobInstanceID); err != nil {
				return err
			}
		}
	}

	if o.JobStartTimeUsecs != nil {

		// query param jobStartTimeUsecs
		var qrJobStartTimeUsecs int64

		if o.JobStartTimeUsecs != nil {
			qrJobStartTimeUsecs = *o.JobStartTimeUsecs
		}
		qJobStartTimeUsecs := swag.FormatInt64(qrJobStartTimeUsecs)
		if qJobStartTimeUsecs != "" {

			if err := r.SetQueryParam("jobStartTimeUsecs", qJobStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.JobUIDObjectID != nil {

		// query param jobUidObjectId
		var qrJobUIDObjectID int64

		if o.JobUIDObjectID != nil {
			qrJobUIDObjectID = *o.JobUIDObjectID
		}
		qJobUIDObjectID := swag.FormatInt64(qrJobUIDObjectID)
		if qJobUIDObjectID != "" {

			if err := r.SetQueryParam("jobUidObjectId", qJobUIDObjectID); err != nil {
				return err
			}
		}
	}

	if o.PointInTimeUsecs != nil {

		// query param pointInTimeUsecs
		var qrPointInTimeUsecs int64

		if o.PointInTimeUsecs != nil {
			qrPointInTimeUsecs = *o.PointInTimeUsecs
		}
		qPointInTimeUsecs := swag.FormatInt64(qrPointInTimeUsecs)
		if qPointInTimeUsecs != "" {

			if err := r.SetQueryParam("pointInTimeUsecs", qPointInTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.SupportedVolumesOnly != nil {

		// query param supportedVolumesOnly
		var qrSupportedVolumesOnly bool

		if o.SupportedVolumesOnly != nil {
			qrSupportedVolumesOnly = *o.SupportedVolumesOnly
		}
		qSupportedVolumesOnly := swag.FormatBool(qrSupportedVolumesOnly)
		if qSupportedVolumesOnly != "" {

			if err := r.SetQueryParam("supportedVolumesOnly", qSupportedVolumesOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
