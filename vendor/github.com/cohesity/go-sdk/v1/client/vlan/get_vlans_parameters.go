// Code generated by go-swagger; DO NOT EDIT.

package vlan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetVlansParams creates a new GetVlansParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVlansParams() *GetVlansParams {
	return &GetVlansParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVlansParamsWithTimeout creates a new GetVlansParams object
// with the ability to set a timeout on a request.
func NewGetVlansParamsWithTimeout(timeout time.Duration) *GetVlansParams {
	return &GetVlansParams{
		timeout: timeout,
	}
}

// NewGetVlansParamsWithContext creates a new GetVlansParams object
// with the ability to set a context for a request.
func NewGetVlansParamsWithContext(ctx context.Context) *GetVlansParams {
	return &GetVlansParams{
		Context: ctx,
	}
}

// NewGetVlansParamsWithHTTPClient creates a new GetVlansParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVlansParamsWithHTTPClient(client *http.Client) *GetVlansParams {
	return &GetVlansParams{
		HTTPClient: client,
	}
}

/*
GetVlansParams contains all the parameters to send to the API endpoint

	for the get vlans operation.

	Typically these are written to a http.Request.
*/
type GetVlansParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* CompressIpsToRanges.

	   Compress Ips list to list of contigous ip ranges with(startIp, endIp)
	*/
	CompressIpsToRanges *bool

	/* SkipPrimaryAndBondIface.

	     SkipPrimaryAndBondIface is to filter interfaces entries which are primary
	interface or bond interfaces.
	*/
	SkipPrimaryAndBondIface *bool

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	/* VlanID.

	   Vlan Id to filter vlans.

	   Format: int32
	*/
	VlanID *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get vlans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVlansParams) WithDefaults() *GetVlansParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get vlans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVlansParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get vlans params
func (o *GetVlansParams) WithTimeout(timeout time.Duration) *GetVlansParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get vlans params
func (o *GetVlansParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get vlans params
func (o *GetVlansParams) WithContext(ctx context.Context) *GetVlansParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get vlans params
func (o *GetVlansParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get vlans params
func (o *GetVlansParams) WithHTTPClient(client *http.Client) *GetVlansParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get vlans params
func (o *GetVlansParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get vlans params
func (o *GetVlansParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetVlansParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get vlans params
func (o *GetVlansParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithCompressIpsToRanges adds the compressIpsToRanges to the get vlans params
func (o *GetVlansParams) WithCompressIpsToRanges(compressIpsToRanges *bool) *GetVlansParams {
	o.SetCompressIpsToRanges(compressIpsToRanges)
	return o
}

// SetCompressIpsToRanges adds the compressIpsToRanges to the get vlans params
func (o *GetVlansParams) SetCompressIpsToRanges(compressIpsToRanges *bool) {
	o.CompressIpsToRanges = compressIpsToRanges
}

// WithSkipPrimaryAndBondIface adds the skipPrimaryAndBondIface to the get vlans params
func (o *GetVlansParams) WithSkipPrimaryAndBondIface(skipPrimaryAndBondIface *bool) *GetVlansParams {
	o.SetSkipPrimaryAndBondIface(skipPrimaryAndBondIface)
	return o
}

// SetSkipPrimaryAndBondIface adds the skipPrimaryAndBondIface to the get vlans params
func (o *GetVlansParams) SetSkipPrimaryAndBondIface(skipPrimaryAndBondIface *bool) {
	o.SkipPrimaryAndBondIface = skipPrimaryAndBondIface
}

// WithTenantIds adds the tenantIds to the get vlans params
func (o *GetVlansParams) WithTenantIds(tenantIds []string) *GetVlansParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get vlans params
func (o *GetVlansParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithVlanID adds the vlanID to the get vlans params
func (o *GetVlansParams) WithVlanID(vlanID *int32) *GetVlansParams {
	o.SetVlanID(vlanID)
	return o
}

// SetVlanID adds the vlanId to the get vlans params
func (o *GetVlansParams) SetVlanID(vlanID *int32) {
	o.VlanID = vlanID
}

// WriteToRequest writes these params to a swagger request
func (o *GetVlansParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.CompressIpsToRanges != nil {

		// query param compressIpsToRanges
		var qrCompressIpsToRanges bool

		if o.CompressIpsToRanges != nil {
			qrCompressIpsToRanges = *o.CompressIpsToRanges
		}
		qCompressIpsToRanges := swag.FormatBool(qrCompressIpsToRanges)
		if qCompressIpsToRanges != "" {

			if err := r.SetQueryParam("compressIpsToRanges", qCompressIpsToRanges); err != nil {
				return err
			}
		}
	}

	if o.SkipPrimaryAndBondIface != nil {

		// query param skipPrimaryAndBondIface
		var qrSkipPrimaryAndBondIface bool

		if o.SkipPrimaryAndBondIface != nil {
			qrSkipPrimaryAndBondIface = *o.SkipPrimaryAndBondIface
		}
		qSkipPrimaryAndBondIface := swag.FormatBool(qrSkipPrimaryAndBondIface)
		if qSkipPrimaryAndBondIface != "" {

			if err := r.SetQueryParam("skipPrimaryAndBondIface", qSkipPrimaryAndBondIface); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.VlanID != nil {

		// query param vlanId
		var qrVlanID int32

		if o.VlanID != nil {
			qrVlanID = *o.VlanID
		}
		qVlanID := swag.FormatInt32(qrVlanID)
		if qVlanID != "" {

			if err := r.SetQueryParam("vlanId", qVlanID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetVlans binds the parameter tenantIds
func (o *GetVlansParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
