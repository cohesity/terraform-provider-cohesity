// Code generated by go-swagger; DO NOT EDIT.

package protection_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new protection policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new protection policies API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new protection policies API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for protection policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProtectionPolicy(params *CreateProtectionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProtectionPolicyCreated, error)

	DeleteProtectionPolicy(params *DeleteProtectionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProtectionPolicyNoContent, error)

	GetProtectionPolicies(params *GetProtectionPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionPoliciesOK, error)

	GetProtectionPolicyByID(params *GetProtectionPolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionPolicyByIDOK, error)

	GetProtectionPolicySummary(params *GetProtectionPolicySummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionPolicySummaryOK, error)

	UpdateProtectionPolicy(params *UpdateProtectionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProtectionPolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateProtectionPolicy creates a protection policy

**Privileges:** ```PROTECTION_POLICY_MODIFY``` <br><br>Returns the created Protection Policy.
*/
func (a *Client) CreateProtectionPolicy(params *CreateProtectionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProtectionPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProtectionPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateProtectionPolicy",
		Method:             "POST",
		PathPattern:        "/public/protectionPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProtectionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProtectionPolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateProtectionPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteProtectionPolicy deletes a protection policy

**Privileges:** ```PROTECTION_POLICY_MODIFY``` <br><br>Returns Success if the Protection Policy is deleted.
*/
func (a *Client) DeleteProtectionPolicy(params *DeleteProtectionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProtectionPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProtectionPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProtectionPolicy",
		Method:             "DELETE",
		PathPattern:        "/public/protectionPolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProtectionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProtectionPolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProtectionPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetProtectionPolicies lists protection policies filtered by some parameters

	**Privileges:** ```PROTECTION_POLICY_VIEW``` <br><br>If no parameters are specified, all Protection Policies currently on the

Cohesity Cluster are returned.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetProtectionPolicies(params *GetProtectionPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionPolicies",
		Method:             "GET",
		PathPattern:        "/public/protectionPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProtectionPolicyByID lists details about a single protection policy

**Privileges:** ```PROTECTION_POLICY_VIEW``` <br><br>Returns the Protection Policy corresponding to the specified Policy Id.
*/
func (a *Client) GetProtectionPolicyByID(params *GetProtectionPolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionPolicyByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionPolicyByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionPolicyById",
		Method:             "GET",
		PathPattern:        "/public/protectionPolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionPolicyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionPolicyByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionPolicyByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProtectionPolicySummary lists protection policy summary

**Privileges:** ```PROTECTION_POLICY_VIEW``` <br><br>
*/
func (a *Client) GetProtectionPolicySummary(params *GetProtectionPolicySummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionPolicySummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionPolicySummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionPolicySummary",
		Method:             "GET",
		PathPattern:        "/public/protectionPolicySummary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionPolicySummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionPolicySummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionPolicySummaryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateProtectionPolicy updates a protection policy

**Privileges:** ```PROTECTION_POLICY_MODIFY``` <br><br>Returns the updated Protection Policy.
*/
func (a *Client) UpdateProtectionPolicy(params *UpdateProtectionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProtectionPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProtectionPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateProtectionPolicy",
		Method:             "PUT",
		PathPattern:        "/public/protectionPolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProtectionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProtectionPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateProtectionPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
