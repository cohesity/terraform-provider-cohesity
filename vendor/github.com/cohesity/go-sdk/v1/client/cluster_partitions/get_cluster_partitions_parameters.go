// Code generated by go-swagger; DO NOT EDIT.

package cluster_partitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetClusterPartitionsParams creates a new GetClusterPartitionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetClusterPartitionsParams() *GetClusterPartitionsParams {
	return &GetClusterPartitionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetClusterPartitionsParamsWithTimeout creates a new GetClusterPartitionsParams object
// with the ability to set a timeout on a request.
func NewGetClusterPartitionsParamsWithTimeout(timeout time.Duration) *GetClusterPartitionsParams {
	return &GetClusterPartitionsParams{
		timeout: timeout,
	}
}

// NewGetClusterPartitionsParamsWithContext creates a new GetClusterPartitionsParams object
// with the ability to set a context for a request.
func NewGetClusterPartitionsParamsWithContext(ctx context.Context) *GetClusterPartitionsParams {
	return &GetClusterPartitionsParams{
		Context: ctx,
	}
}

// NewGetClusterPartitionsParamsWithHTTPClient creates a new GetClusterPartitionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetClusterPartitionsParamsWithHTTPClient(client *http.Client) *GetClusterPartitionsParams {
	return &GetClusterPartitionsParams{
		HTTPClient: client,
	}
}

/*
GetClusterPartitionsParams contains all the parameters to send to the API endpoint

	for the get cluster partitions operation.

	Typically these are written to a http.Request.
*/
type GetClusterPartitionsParams struct {

	/* Ids.

	     Array of Cluster Partition Ids.

	Filter by a list of Cluster Partition ids. If empty, the Cluster Partitions
	are not filtered by id.
	*/
	Ids []int64

	/* Names.

	     Array of Cluster Partition Names.

	Filter by a list of Cluster Partition Names. If empty, the Cluster
	Partitions are not filtered by names.
	*/
	Names []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get cluster partitions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetClusterPartitionsParams) WithDefaults() *GetClusterPartitionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get cluster partitions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetClusterPartitionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get cluster partitions params
func (o *GetClusterPartitionsParams) WithTimeout(timeout time.Duration) *GetClusterPartitionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cluster partitions params
func (o *GetClusterPartitionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cluster partitions params
func (o *GetClusterPartitionsParams) WithContext(ctx context.Context) *GetClusterPartitionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cluster partitions params
func (o *GetClusterPartitionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cluster partitions params
func (o *GetClusterPartitionsParams) WithHTTPClient(client *http.Client) *GetClusterPartitionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cluster partitions params
func (o *GetClusterPartitionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the get cluster partitions params
func (o *GetClusterPartitionsParams) WithIds(ids []int64) *GetClusterPartitionsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get cluster partitions params
func (o *GetClusterPartitionsParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithNames adds the names to the get cluster partitions params
func (o *GetClusterPartitionsParams) WithNames(names []string) *GetClusterPartitionsParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the get cluster partitions params
func (o *GetClusterPartitionsParams) SetNames(names []string) {
	o.Names = names
}

// WriteToRequest writes these params to a swagger request
func (o *GetClusterPartitionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Names != nil {

		// binding items for names
		joinedNames := o.bindParamNames(reg)

		// query array param names
		if err := r.SetQueryParam("names", joinedNames...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetClusterPartitions binds the parameter ids
func (o *GetClusterPartitionsParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetClusterPartitions binds the parameter names
func (o *GetClusterPartitionsParams) bindParamNames(formats strfmt.Registry) []string {
	namesIR := o.Names

	var namesIC []string
	for _, namesIIR := range namesIR { // explode []string

		namesIIV := namesIIR // string as string
		namesIC = append(namesIC, namesIIV)
	}

	// items.CollectionFormat: ""
	namesIS := swag.JoinByFormat(namesIC, "")

	return namesIS
}
