// Code generated by go-swagger; DO NOT EDIT.

package s_m_b_file_opens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSmbFileOpensParams creates a new GetSmbFileOpensParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSmbFileOpensParams() *GetSmbFileOpensParams {
	return &GetSmbFileOpensParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSmbFileOpensParamsWithTimeout creates a new GetSmbFileOpensParams object
// with the ability to set a timeout on a request.
func NewGetSmbFileOpensParamsWithTimeout(timeout time.Duration) *GetSmbFileOpensParams {
	return &GetSmbFileOpensParams{
		timeout: timeout,
	}
}

// NewGetSmbFileOpensParamsWithContext creates a new GetSmbFileOpensParams object
// with the ability to set a context for a request.
func NewGetSmbFileOpensParamsWithContext(ctx context.Context) *GetSmbFileOpensParams {
	return &GetSmbFileOpensParams{
		Context: ctx,
	}
}

// NewGetSmbFileOpensParamsWithHTTPClient creates a new GetSmbFileOpensParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSmbFileOpensParamsWithHTTPClient(client *http.Client) *GetSmbFileOpensParams {
	return &GetSmbFileOpensParams{
		HTTPClient: client,
	}
}

/*
GetSmbFileOpensParams contains all the parameters to send to the API endpoint

	for the get smb file opens operation.

	Typically these are written to a http.Request.
*/
type GetSmbFileOpensParams struct {

	/* Cookie.

	     Specifies the opaque string returned in the previous response.
	If this is set, next set of active opens just after the previous
	response are returned. If this is not set, first set of active opens
	are returned.
	*/
	Cookie *string

	/* FilePath.

	     Specifies the filepath in the view relative to the root filesystem.
	If this field is specified, viewName field must also be specified.
	*/
	FilePath *string

	/* PageCount.

	     Specifies the maximum number of active opens to return in the response.
	This field cannot be set above 1000. If this is not set, maximum of 1000
	entries are returned.

	     Format: int32
	*/
	PageCount *int32

	/* ViewName.

	     Specifies the name of the View in which to search. If a view name is not
	specified, all the views in the Cluster is searched.
	This field is mandatory if filePath field is specified.
	*/
	ViewName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get smb file opens params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSmbFileOpensParams) WithDefaults() *GetSmbFileOpensParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get smb file opens params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSmbFileOpensParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get smb file opens params
func (o *GetSmbFileOpensParams) WithTimeout(timeout time.Duration) *GetSmbFileOpensParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get smb file opens params
func (o *GetSmbFileOpensParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get smb file opens params
func (o *GetSmbFileOpensParams) WithContext(ctx context.Context) *GetSmbFileOpensParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get smb file opens params
func (o *GetSmbFileOpensParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get smb file opens params
func (o *GetSmbFileOpensParams) WithHTTPClient(client *http.Client) *GetSmbFileOpensParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get smb file opens params
func (o *GetSmbFileOpensParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCookie adds the cookie to the get smb file opens params
func (o *GetSmbFileOpensParams) WithCookie(cookie *string) *GetSmbFileOpensParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the get smb file opens params
func (o *GetSmbFileOpensParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithFilePath adds the filePath to the get smb file opens params
func (o *GetSmbFileOpensParams) WithFilePath(filePath *string) *GetSmbFileOpensParams {
	o.SetFilePath(filePath)
	return o
}

// SetFilePath adds the filePath to the get smb file opens params
func (o *GetSmbFileOpensParams) SetFilePath(filePath *string) {
	o.FilePath = filePath
}

// WithPageCount adds the pageCount to the get smb file opens params
func (o *GetSmbFileOpensParams) WithPageCount(pageCount *int32) *GetSmbFileOpensParams {
	o.SetPageCount(pageCount)
	return o
}

// SetPageCount adds the pageCount to the get smb file opens params
func (o *GetSmbFileOpensParams) SetPageCount(pageCount *int32) {
	o.PageCount = pageCount
}

// WithViewName adds the viewName to the get smb file opens params
func (o *GetSmbFileOpensParams) WithViewName(viewName *string) *GetSmbFileOpensParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the get smb file opens params
func (o *GetSmbFileOpensParams) SetViewName(viewName *string) {
	o.ViewName = viewName
}

// WriteToRequest writes these params to a swagger request
func (o *GetSmbFileOpensParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.FilePath != nil {

		// query param filePath
		var qrFilePath string

		if o.FilePath != nil {
			qrFilePath = *o.FilePath
		}
		qFilePath := qrFilePath
		if qFilePath != "" {

			if err := r.SetQueryParam("filePath", qFilePath); err != nil {
				return err
			}
		}
	}

	if o.PageCount != nil {

		// query param pageCount
		var qrPageCount int32

		if o.PageCount != nil {
			qrPageCount = *o.PageCount
		}
		qPageCount := swag.FormatInt32(qrPageCount)
		if qPageCount != "" {

			if err := r.SetQueryParam("pageCount", qPageCount); err != nil {
				return err
			}
		}
	}

	if o.ViewName != nil {

		// query param viewName
		var qrViewName string

		if o.ViewName != nil {
			qrViewName = *o.ViewName
		}
		qViewName := qrViewName
		if qViewName != "" {

			if err := r.SetQueryParam("viewName", qViewName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
