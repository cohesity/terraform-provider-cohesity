// Code generated by go-swagger; DO NOT EDIT.

package active_directory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new active directory API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new active directory API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new active directory API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for active directory API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddActiveDirectoryPrincipals(params *AddActiveDirectoryPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddActiveDirectoryPrincipalsCreated, error)

	CreateActiveDirectoryEntry(params *CreateActiveDirectoryEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateActiveDirectoryEntryCreated, error)

	DeleteActiveDirectoryEntry(params *DeleteActiveDirectoryEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteActiveDirectoryEntryNoContent, error)

	EnableTrustedDomainDiscovery(params *EnableTrustedDomainDiscoveryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableTrustedDomainDiscoveryOK, error)

	GetActiveDirectoryDomainControllers(params *GetActiveDirectoryDomainControllersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActiveDirectoryDomainControllersOK, error)

	GetActiveDirectoryEntry(params *GetActiveDirectoryEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActiveDirectoryEntryOK, error)

	ListCentrifyZones(params *ListCentrifyZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCentrifyZonesOK, error)

	SearchActiveDirectoryPrincipals(params *SearchActiveDirectoryPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchActiveDirectoryPrincipalsOK, error)

	UpdateActiveDirectoryIDMapping(params *UpdateActiveDirectoryIDMappingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveDirectoryIDMappingOK, error)

	UpdateActiveDirectoryIgnoredTrustedDomains(params *UpdateActiveDirectoryIgnoredTrustedDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveDirectoryIgnoredTrustedDomainsOK, error)

	UpdateActiveDirectoryLdapProvider(params *UpdateActiveDirectoryLdapProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveDirectoryLdapProviderOK, error)

	UpdateActiveDirectoryMachineAccounts(params *UpdateActiveDirectoryMachineAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveDirectoryMachineAccountsOK, error)

	UpdatePreferredDomainControllers(params *UpdatePreferredDomainControllersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePreferredDomainControllersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	AddActiveDirectoryPrincipals adds multiple groups or users on the cohesity cluster for the specified active directory principals in addition assign cohesity roles to the users or groups to define their cohesity privileges

	**Privileges:** ```PRINCIPAL_MODIFY``` <br><br>After a group or user has been added to a Cohesity Cluster,

the referenced Active Directory principal can be used by the Cohesity Cluster.
In addition, this operation maps Cohesity roles with a group or user and
this mapping defines the privileges allowed on the Cohesity Cluster for the
group or user.
For example if an 'management' group is created on the Cohesity Cluster
for the Active Directory 'management' principal group and is
associated with the Cohesity 'View' role, all users in the
referenced Active Directory 'management' principal group can log in to the
Cohesity Dashboard but will only have view-only privileges.
These users cannot create new Protection Jobs, Policies, Views, etc.

NOTE: Local Cohesity users and groups cannot be created by this operation.
Local Cohesity users or groups do not have an associated Active Directory
principals and are created directly in the default LOCAL domain.
*/
func (a *Client) AddActiveDirectoryPrincipals(params *AddActiveDirectoryPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddActiveDirectoryPrincipalsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddActiveDirectoryPrincipalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddActiveDirectoryPrincipals",
		Method:             "POST",
		PathPattern:        "/public/activeDirectory/principals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddActiveDirectoryPrincipalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddActiveDirectoryPrincipalsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddActiveDirectoryPrincipalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CreateActiveDirectoryEntry joins the cohesity cluster to the specified active directory

	**Privileges:** ```AD_LDAP_MODIFY``` <br><br>After a Cohesity Cluster has been joined to an Active Directory domain,

the users and groups in the domain can be authenticated on the Cohesity Cluster
using their Active Directory credentials.
*/
func (a *Client) CreateActiveDirectoryEntry(params *CreateActiveDirectoryEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateActiveDirectoryEntryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActiveDirectoryEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateActiveDirectoryEntry",
		Method:             "POST",
		PathPattern:        "/public/activeDirectory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateActiveDirectoryEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateActiveDirectoryEntryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateActiveDirectoryEntryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	DeleteActiveDirectoryEntry deletes the join with the active directory

	**Privileges:** ```AD_LDAP_MODIFY``` <br><br>Deletes the join of the Cohesity Cluster to the specified

Active Directory domain. After the deletion, the Cohesity Cluster
no longer has access to the principals on the Active Directory.
For example, you can no longer log in to the Cohesity Cluster
with a user defined in a principal group of the Active Directory domain.
*/
func (a *Client) DeleteActiveDirectoryEntry(params *DeleteActiveDirectoryEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteActiveDirectoryEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteActiveDirectoryEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteActiveDirectoryEntry",
		Method:             "DELETE",
		PathPattern:        "/public/activeDirectory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteActiveDirectoryEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteActiveDirectoryEntryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteActiveDirectoryEntryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnableTrustedDomainDiscovery updates the states of trusted domains discovery

**Privileges:** ```AD_LDAP_MODIFY``` <br><br>
*/
func (a *Client) EnableTrustedDomainDiscovery(params *EnableTrustedDomainDiscoveryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableTrustedDomainDiscoveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableTrustedDomainDiscoveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnableTrustedDomainDiscovery",
		Method:             "POST",
		PathPattern:        "/public/activeDirectory/{name}/enableTrustedDomainState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableTrustedDomainDiscoveryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableTrustedDomainDiscoveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnableTrustedDomainDiscoveryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetActiveDirectoryDomainControllers lists the domain controllers for a domain

**Privileges:** ```AD_LDAP_VIEW``` <br><br>
*/
func (a *Client) GetActiveDirectoryDomainControllers(params *GetActiveDirectoryDomainControllersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActiveDirectoryDomainControllersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActiveDirectoryDomainControllersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetActiveDirectoryDomainControllers",
		Method:             "GET",
		PathPattern:        "/public/activeDirectory/domainControllers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActiveDirectoryDomainControllersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActiveDirectoryDomainControllersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetActiveDirectoryDomainControllersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetActiveDirectoryEntry lists the active directories that the cohesity cluster has joined

	**Privileges:** ```PRINCIPAL_VIEW, AD_LDAP_VIEW``` <br><br>After a Cohesity Cluster has been joined to an Active Directory domain,

the users and groups in the domain can be authenticated on the Cohesity Cluster
using their Active Directory credentials.

NOTE: The userName and password fields are not populated by this operation.
*/
func (a *Client) GetActiveDirectoryEntry(params *GetActiveDirectoryEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActiveDirectoryEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActiveDirectoryEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetActiveDirectoryEntry",
		Method:             "GET",
		PathPattern:        "/public/activeDirectory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActiveDirectoryEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActiveDirectoryEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetActiveDirectoryEntryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListCentrifyZones fetches the list centrify zones of an active directory domain

**Privileges:** ```AD_LDAP_VIEW``` <br><br>
*/
func (a *Client) ListCentrifyZones(params *ListCentrifyZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCentrifyZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCentrifyZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCentrifyZones",
		Method:             "GET",
		PathPattern:        "/public/activeDirectory/centrifyZones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCentrifyZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCentrifyZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCentrifyZonesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	SearchActiveDirectoryPrincipals lists the user and group principals in the active directory that match the filter criteria specified using parameters

	**Privileges:** ```PRINCIPAL_VIEW, AD_LDAP_VIEW``` <br><br>Optionally limit the search results by specifying security identifiers (SIDs),

an object class (user or group) or a substring.
You can specify SIDs or a substring but not both.
*/
func (a *Client) SearchActiveDirectoryPrincipals(params *SearchActiveDirectoryPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchActiveDirectoryPrincipalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchActiveDirectoryPrincipalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchActiveDirectoryPrincipals",
		Method:             "GET",
		PathPattern:        "/public/activeDirectory/principals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchActiveDirectoryPrincipalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchActiveDirectoryPrincipalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchActiveDirectoryPrincipalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateActiveDirectoryIDMapping updates the user id mapping info of an active directory

**Privileges:** ```AD_LDAP_MODIFY``` <br><br>
*/
func (a *Client) UpdateActiveDirectoryIDMapping(params *UpdateActiveDirectoryIDMappingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveDirectoryIDMappingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActiveDirectoryIDMappingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateActiveDirectoryIdMapping",
		Method:             "PUT",
		PathPattern:        "/public/activeDirectory/{name}/idMappingInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateActiveDirectoryIDMappingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActiveDirectoryIDMappingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateActiveDirectoryIDMappingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateActiveDirectoryIgnoredTrustedDomains updates the list of trusted domains to be ignored during trusted domain discovery of an active directory

**Privileges:** ```AD_LDAP_MODIFY``` <br><br>
*/
func (a *Client) UpdateActiveDirectoryIgnoredTrustedDomains(params *UpdateActiveDirectoryIgnoredTrustedDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveDirectoryIgnoredTrustedDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActiveDirectoryIgnoredTrustedDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateActiveDirectoryIgnoredTrustedDomains",
		Method:             "PUT",
		PathPattern:        "/public/activeDirectory/{name}/ignoredTrustedDomains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateActiveDirectoryIgnoredTrustedDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActiveDirectoryIgnoredTrustedDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateActiveDirectoryIgnoredTrustedDomainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateActiveDirectoryLdapProvider updates the l d a p provide Id for an active directory domain

**Privileges:** ```AD_LDAP_MODIFY``` <br><br>
*/
func (a *Client) UpdateActiveDirectoryLdapProvider(params *UpdateActiveDirectoryLdapProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveDirectoryLdapProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActiveDirectoryLdapProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateActiveDirectoryLdapProvider",
		Method:             "PUT",
		PathPattern:        "/public/activeDirectory/{name}/ldapProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateActiveDirectoryLdapProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActiveDirectoryLdapProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateActiveDirectoryLdapProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateActiveDirectoryMachineAccounts updates the machine accounts of an active directory

**Privileges:** ```AD_LDAP_MODIFY``` <br><br>
*/
func (a *Client) UpdateActiveDirectoryMachineAccounts(params *UpdateActiveDirectoryMachineAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveDirectoryMachineAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActiveDirectoryMachineAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateActiveDirectoryMachineAccounts",
		Method:             "POST",
		PathPattern:        "/public/activeDirectory/{name}/machineAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateActiveDirectoryMachineAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActiveDirectoryMachineAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateActiveDirectoryMachineAccountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdatePreferredDomainControllers **Privileges:** ```AD_LDAP_MODIFY``` <br><br>Updates the preferred domain controllers of an Active Directory
*/
func (a *Client) UpdatePreferredDomainControllers(params *UpdatePreferredDomainControllersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePreferredDomainControllersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePreferredDomainControllersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdatePreferredDomainControllers",
		Method:             "PUT",
		PathPattern:        "/public/activeDirectory/{name}/preferredDomainControllers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePreferredDomainControllersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePreferredDomainControllersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdatePreferredDomainControllersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
