// Code generated by go-swagger; DO NOT EDIT.

package protection_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new protection runs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new protection runs API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new protection runs API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for protection runs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelProtectionJobRun(params *CancelProtectionJobRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelProtectionJobRunNoContent, error)

	GetProtectionRunErrors(params *GetProtectionRunErrorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionRunErrorsOK, error)

	GetProtectionRuns(params *GetProtectionRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionRunsOK, error)

	UpdateProtectionRuns(params *UpdateProtectionRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProtectionRunsNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CancelProtectionJobRun cancels a protection job run

**Privileges:** ```PROTECTION_JOB_OPERATE``` <br><br>
*/
func (a *Client) CancelProtectionJobRun(params *CancelProtectionJobRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelProtectionJobRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelProtectionJobRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelProtectionJobRun",
		Method:             "POST",
		PathPattern:        "/public/protectionRuns/cancel/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelProtectionJobRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelProtectionJobRunNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelProtectionJobRunDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetProtectionRunErrors lists protection job run errors filtered by the specified parameters

	**Privileges:** ```PROTECTION_VIEW``` <br><br>jobId, startTimeUsecs and taskId have to be provided to get the a list of

errors for a job run task.
*/
func (a *Client) GetProtectionRunErrors(params *GetProtectionRunErrorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionRunErrorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionRunErrorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionRunErrors",
		Method:             "GET",
		PathPattern:        "/public/protectionRuns/errors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionRunErrorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionRunErrorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionRunErrorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetProtectionRuns lists protection job runs filtered by the specified parameters

	**Privileges:** ```PROTECTION_VIEW``` <br><br>If no parameters are specified, Job Runs currently

on the Cohesity Cluster are returned. Both running and completed Job Runs
are reported.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetProtectionRuns(params *GetProtectionRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionRuns",
		Method:             "GET",
		PathPattern:        "/public/protectionRuns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionRunsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateProtectionRuns updates how long protection job runs and their snapshots are retained on the cohesity cluster

	**Privileges:** ```PROTECTION_MODIFY``` <br><br>Update the expiration date (retention period) for the specified Protection

Job Runs and their snapshots.
After an expiration time is reached, the Job Run and its snapshots are deleted.
If an expiration time of 0 is specified, a Job Run and its snapshots
are immediately deleted.
*/
func (a *Client) UpdateProtectionRuns(params *UpdateProtectionRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProtectionRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProtectionRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateProtectionRuns",
		Method:             "PUT",
		PathPattern:        "/public/protectionRuns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProtectionRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProtectionRunsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateProtectionRunsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
