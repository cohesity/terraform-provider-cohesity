// Code generated by go-swagger; DO NOT EDIT.

package protection_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProtectionRunErrorsParams creates a new GetProtectionRunErrorsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProtectionRunErrorsParams() *GetProtectionRunErrorsParams {
	return &GetProtectionRunErrorsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProtectionRunErrorsParamsWithTimeout creates a new GetProtectionRunErrorsParams object
// with the ability to set a timeout on a request.
func NewGetProtectionRunErrorsParamsWithTimeout(timeout time.Duration) *GetProtectionRunErrorsParams {
	return &GetProtectionRunErrorsParams{
		timeout: timeout,
	}
}

// NewGetProtectionRunErrorsParamsWithContext creates a new GetProtectionRunErrorsParams object
// with the ability to set a context for a request.
func NewGetProtectionRunErrorsParamsWithContext(ctx context.Context) *GetProtectionRunErrorsParams {
	return &GetProtectionRunErrorsParams{
		Context: ctx,
	}
}

// NewGetProtectionRunErrorsParamsWithHTTPClient creates a new GetProtectionRunErrorsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProtectionRunErrorsParamsWithHTTPClient(client *http.Client) *GetProtectionRunErrorsParams {
	return &GetProtectionRunErrorsParams{
		HTTPClient: client,
	}
}

/*
GetProtectionRunErrorsParams contains all the parameters to send to the API endpoint

	for the get protection run errors operation.

	Typically these are written to a http.Request.
*/
type GetProtectionRunErrorsParams struct {

	/* JobID.

	     Specifies the id of the Protection Job whose runs are to be returned.
	This field is required.

	     Format: int64
	*/
	JobID int64

	/* LimitNumberOfErrors.

	   Specifies the number of the results expected.

	   Format: int64
	*/
	LimitNumberOfErrors *int64

	/* PaginationCookie.

	   Specifies the cookie for next set of results.
	*/
	PaginationCookie *string

	/* StartTimeUsecs.

	     Specifies the time when the Job Run started as a
	Unix epoch Timestamp (in microseconds).
	This field is required

	     Format: int64
	*/
	StartTimeUsecs int64

	/* TaskID.

	     Specifies the id of the Protection Run task for which errors are to be
	returned. This field is required to get the errors list.

	     Format: int64
	*/
	TaskID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get protection run errors params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionRunErrorsParams) WithDefaults() *GetProtectionRunErrorsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get protection run errors params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionRunErrorsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get protection run errors params
func (o *GetProtectionRunErrorsParams) WithTimeout(timeout time.Duration) *GetProtectionRunErrorsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get protection run errors params
func (o *GetProtectionRunErrorsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get protection run errors params
func (o *GetProtectionRunErrorsParams) WithContext(ctx context.Context) *GetProtectionRunErrorsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get protection run errors params
func (o *GetProtectionRunErrorsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get protection run errors params
func (o *GetProtectionRunErrorsParams) WithHTTPClient(client *http.Client) *GetProtectionRunErrorsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get protection run errors params
func (o *GetProtectionRunErrorsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJobID adds the jobID to the get protection run errors params
func (o *GetProtectionRunErrorsParams) WithJobID(jobID int64) *GetProtectionRunErrorsParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get protection run errors params
func (o *GetProtectionRunErrorsParams) SetJobID(jobID int64) {
	o.JobID = jobID
}

// WithLimitNumberOfErrors adds the limitNumberOfErrors to the get protection run errors params
func (o *GetProtectionRunErrorsParams) WithLimitNumberOfErrors(limitNumberOfErrors *int64) *GetProtectionRunErrorsParams {
	o.SetLimitNumberOfErrors(limitNumberOfErrors)
	return o
}

// SetLimitNumberOfErrors adds the limitNumberOfErrors to the get protection run errors params
func (o *GetProtectionRunErrorsParams) SetLimitNumberOfErrors(limitNumberOfErrors *int64) {
	o.LimitNumberOfErrors = limitNumberOfErrors
}

// WithPaginationCookie adds the paginationCookie to the get protection run errors params
func (o *GetProtectionRunErrorsParams) WithPaginationCookie(paginationCookie *string) *GetProtectionRunErrorsParams {
	o.SetPaginationCookie(paginationCookie)
	return o
}

// SetPaginationCookie adds the paginationCookie to the get protection run errors params
func (o *GetProtectionRunErrorsParams) SetPaginationCookie(paginationCookie *string) {
	o.PaginationCookie = paginationCookie
}

// WithStartTimeUsecs adds the startTimeUsecs to the get protection run errors params
func (o *GetProtectionRunErrorsParams) WithStartTimeUsecs(startTimeUsecs int64) *GetProtectionRunErrorsParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the get protection run errors params
func (o *GetProtectionRunErrorsParams) SetStartTimeUsecs(startTimeUsecs int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WithTaskID adds the taskID to the get protection run errors params
func (o *GetProtectionRunErrorsParams) WithTaskID(taskID int64) *GetProtectionRunErrorsParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the get protection run errors params
func (o *GetProtectionRunErrorsParams) SetTaskID(taskID int64) {
	o.TaskID = taskID
}

// WriteToRequest writes these params to a swagger request
func (o *GetProtectionRunErrorsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param jobId
	qrJobID := o.JobID
	qJobID := swag.FormatInt64(qrJobID)
	if qJobID != "" {

		if err := r.SetQueryParam("jobId", qJobID); err != nil {
			return err
		}
	}

	if o.LimitNumberOfErrors != nil {

		// query param limitNumberOfErrors
		var qrLimitNumberOfErrors int64

		if o.LimitNumberOfErrors != nil {
			qrLimitNumberOfErrors = *o.LimitNumberOfErrors
		}
		qLimitNumberOfErrors := swag.FormatInt64(qrLimitNumberOfErrors)
		if qLimitNumberOfErrors != "" {

			if err := r.SetQueryParam("limitNumberOfErrors", qLimitNumberOfErrors); err != nil {
				return err
			}
		}
	}

	if o.PaginationCookie != nil {

		// query param paginationCookie
		var qrPaginationCookie string

		if o.PaginationCookie != nil {
			qrPaginationCookie = *o.PaginationCookie
		}
		qPaginationCookie := qrPaginationCookie
		if qPaginationCookie != "" {

			if err := r.SetQueryParam("paginationCookie", qPaginationCookie); err != nil {
				return err
			}
		}
	}

	// query param startTimeUsecs
	qrStartTimeUsecs := o.StartTimeUsecs
	qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
	if qStartTimeUsecs != "" {

		if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
			return err
		}
	}

	// query param taskId
	qrTaskID := o.TaskID
	qTaskID := swag.FormatInt64(qrTaskID)
	if qTaskID != "" {

		if err := r.SetQueryParam("taskId", qTaskID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
