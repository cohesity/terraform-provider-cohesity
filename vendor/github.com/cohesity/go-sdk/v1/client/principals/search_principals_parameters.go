// Code generated by go-swagger; DO NOT EDIT.

package principals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchPrincipalsParams creates a new SearchPrincipalsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchPrincipalsParams() *SearchPrincipalsParams {
	return &SearchPrincipalsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchPrincipalsParamsWithTimeout creates a new SearchPrincipalsParams object
// with the ability to set a timeout on a request.
func NewSearchPrincipalsParamsWithTimeout(timeout time.Duration) *SearchPrincipalsParams {
	return &SearchPrincipalsParams{
		timeout: timeout,
	}
}

// NewSearchPrincipalsParamsWithContext creates a new SearchPrincipalsParams object
// with the ability to set a context for a request.
func NewSearchPrincipalsParamsWithContext(ctx context.Context) *SearchPrincipalsParams {
	return &SearchPrincipalsParams{
		Context: ctx,
	}
}

// NewSearchPrincipalsParamsWithHTTPClient creates a new SearchPrincipalsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchPrincipalsParamsWithHTTPClient(client *http.Client) *SearchPrincipalsParams {
	return &SearchPrincipalsParams{
		HTTPClient: client,
	}
}

/*
SearchPrincipalsParams contains all the parameters to send to the API endpoint

	for the search principals operation.

	Typically these are written to a http.Request.
*/
type SearchPrincipalsParams struct {

	/* Domain.

	     Specifies the domain name of the principals to search. If specified
	the principals in that domain are searched. Domain could be an
	Active Directory domain joined by the Cluster or any one of the
	trusted domains of the Active Directory domain or the LOCAL domain.
	If not specified, all the domains are searched.
	*/
	Domain *string

	/* IncludeComputers.

	   Specifies if Computer/GMSA accounts need to be included in this search.
	*/
	IncludeComputers *bool

	/* IncludeServiceAccounts.

	     Specifies if service accouns should be included in the search result.
	This field is true by default.
	*/
	IncludeServiceAccounts *bool

	/* ObjectClass.

	     Optionally filter by a principal object class such as 'kGroup' or 'kUser'.
	If 'kGroup' is specified, only group principals are returned.
	If 'kUser' is specified, only user principals are returned.
	If not specified, both group and user principals are returned.
	'kUser' specifies a user object class.
	'kGroup' specifies a group object class.
	'kComputer' specifies a computer object class.
	'kWellKnownPrincipal' specifies a well known principal.
	'kServiceAccount' specifies a service account object class.
	*/
	ObjectClass *string

	/* Search.

	     Optionally filter by matching a substring. Only principals in
	the with a name or sAMAccountName that matches
	part or all of the specified substring are returned.
	If specified, a 'sids' parameter should not be specified.
	*/
	Search *string

	/* Sids.

	     Optionally filter by a list of security identifiers (SIDs) found
	in the specified domain. Only principals matching
	the specified SIDs are returned.
	If specified, a 'search' parameter should not be specified.
	*/
	Sids []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search principals params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPrincipalsParams) WithDefaults() *SearchPrincipalsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search principals params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPrincipalsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search principals params
func (o *SearchPrincipalsParams) WithTimeout(timeout time.Duration) *SearchPrincipalsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search principals params
func (o *SearchPrincipalsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search principals params
func (o *SearchPrincipalsParams) WithContext(ctx context.Context) *SearchPrincipalsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search principals params
func (o *SearchPrincipalsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search principals params
func (o *SearchPrincipalsParams) WithHTTPClient(client *http.Client) *SearchPrincipalsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search principals params
func (o *SearchPrincipalsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomain adds the domain to the search principals params
func (o *SearchPrincipalsParams) WithDomain(domain *string) *SearchPrincipalsParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the search principals params
func (o *SearchPrincipalsParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithIncludeComputers adds the includeComputers to the search principals params
func (o *SearchPrincipalsParams) WithIncludeComputers(includeComputers *bool) *SearchPrincipalsParams {
	o.SetIncludeComputers(includeComputers)
	return o
}

// SetIncludeComputers adds the includeComputers to the search principals params
func (o *SearchPrincipalsParams) SetIncludeComputers(includeComputers *bool) {
	o.IncludeComputers = includeComputers
}

// WithIncludeServiceAccounts adds the includeServiceAccounts to the search principals params
func (o *SearchPrincipalsParams) WithIncludeServiceAccounts(includeServiceAccounts *bool) *SearchPrincipalsParams {
	o.SetIncludeServiceAccounts(includeServiceAccounts)
	return o
}

// SetIncludeServiceAccounts adds the includeServiceAccounts to the search principals params
func (o *SearchPrincipalsParams) SetIncludeServiceAccounts(includeServiceAccounts *bool) {
	o.IncludeServiceAccounts = includeServiceAccounts
}

// WithObjectClass adds the objectClass to the search principals params
func (o *SearchPrincipalsParams) WithObjectClass(objectClass *string) *SearchPrincipalsParams {
	o.SetObjectClass(objectClass)
	return o
}

// SetObjectClass adds the objectClass to the search principals params
func (o *SearchPrincipalsParams) SetObjectClass(objectClass *string) {
	o.ObjectClass = objectClass
}

// WithSearch adds the search to the search principals params
func (o *SearchPrincipalsParams) WithSearch(search *string) *SearchPrincipalsParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the search principals params
func (o *SearchPrincipalsParams) SetSearch(search *string) {
	o.Search = search
}

// WithSids adds the sids to the search principals params
func (o *SearchPrincipalsParams) WithSids(sids []string) *SearchPrincipalsParams {
	o.SetSids(sids)
	return o
}

// SetSids adds the sids to the search principals params
func (o *SearchPrincipalsParams) SetSids(sids []string) {
	o.Sids = sids
}

// WriteToRequest writes these params to a swagger request
func (o *SearchPrincipalsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Domain != nil {

		// query param domain
		var qrDomain string

		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {

			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}
	}

	if o.IncludeComputers != nil {

		// query param includeComputers
		var qrIncludeComputers bool

		if o.IncludeComputers != nil {
			qrIncludeComputers = *o.IncludeComputers
		}
		qIncludeComputers := swag.FormatBool(qrIncludeComputers)
		if qIncludeComputers != "" {

			if err := r.SetQueryParam("includeComputers", qIncludeComputers); err != nil {
				return err
			}
		}
	}

	if o.IncludeServiceAccounts != nil {

		// query param includeServiceAccounts
		var qrIncludeServiceAccounts bool

		if o.IncludeServiceAccounts != nil {
			qrIncludeServiceAccounts = *o.IncludeServiceAccounts
		}
		qIncludeServiceAccounts := swag.FormatBool(qrIncludeServiceAccounts)
		if qIncludeServiceAccounts != "" {

			if err := r.SetQueryParam("includeServiceAccounts", qIncludeServiceAccounts); err != nil {
				return err
			}
		}
	}

	if o.ObjectClass != nil {

		// query param objectClass
		var qrObjectClass string

		if o.ObjectClass != nil {
			qrObjectClass = *o.ObjectClass
		}
		qObjectClass := qrObjectClass
		if qObjectClass != "" {

			if err := r.SetQueryParam("objectClass", qObjectClass); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.Sids != nil {

		// binding items for sids
		joinedSids := o.bindParamSids(reg)

		// query array param sids
		if err := r.SetQueryParam("sids", joinedSids...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchPrincipals binds the parameter sids
func (o *SearchPrincipalsParams) bindParamSids(formats strfmt.Registry) []string {
	sidsIR := o.Sids

	var sidsIC []string
	for _, sidsIIR := range sidsIR { // explode []string

		sidsIIV := sidsIIR // string as string
		sidsIC = append(sidsIC, sidsIIV)
	}

	// items.CollectionFormat: ""
	sidsIS := swag.JoinByFormat(sidsIC, "")

	return sidsIS
}
