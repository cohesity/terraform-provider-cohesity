// Code generated by go-swagger; DO NOT EDIT.

package principals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUsersParams creates a new GetUsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUsersParams() *GetUsersParams {
	return &GetUsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUsersParamsWithTimeout creates a new GetUsersParams object
// with the ability to set a timeout on a request.
func NewGetUsersParamsWithTimeout(timeout time.Duration) *GetUsersParams {
	return &GetUsersParams{
		timeout: timeout,
	}
}

// NewGetUsersParamsWithContext creates a new GetUsersParams object
// with the ability to set a context for a request.
func NewGetUsersParamsWithContext(ctx context.Context) *GetUsersParams {
	return &GetUsersParams{
		Context: ctx,
	}
}

// NewGetUsersParamsWithHTTPClient creates a new GetUsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUsersParamsWithHTTPClient(client *http.Client) *GetUsersParams {
	return &GetUsersParams{
		HTTPClient: client,
	}
}

/*
GetUsersParams contains all the parameters to send to the API endpoint

	for the get users operation.

	Typically these are written to a http.Request.
*/
type GetUsersParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* Domain.

	     Optionally specify a domain to filter by.
	If no domain is specified, all users on the Cohesity Cluster are searched.
	If a domain is specified, only users on the Cohesity Cluster
	associated with that domain are searched.
	*/
	Domain *string

	/* EmailAddresses.

	   Optionally specify a list of email addresses to filter by.
	*/
	EmailAddresses []string

	/* PartialMatch.

	     Optionally specify whether to enable partial match. If set, all users
	with name containing Usernames will be returned. If set to false, only
	users with exact the same name as Usernames will be returned. By default
	this parameter is set to true.
	*/
	PartialMatch *bool

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	/* Usernames.

	     Optionally specify a list of usernames to filter by. All users containing
	username will be returned.
	*/
	Usernames []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUsersParams) WithDefaults() *GetUsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUsersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get users params
func (o *GetUsersParams) WithTimeout(timeout time.Duration) *GetUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get users params
func (o *GetUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get users params
func (o *GetUsersParams) WithContext(ctx context.Context) *GetUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get users params
func (o *GetUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get users params
func (o *GetUsersParams) WithHTTPClient(client *http.Client) *GetUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get users params
func (o *GetUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get users params
func (o *GetUsersParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetUsersParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get users params
func (o *GetUsersParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithDomain adds the domain to the get users params
func (o *GetUsersParams) WithDomain(domain *string) *GetUsersParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the get users params
func (o *GetUsersParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithEmailAddresses adds the emailAddresses to the get users params
func (o *GetUsersParams) WithEmailAddresses(emailAddresses []string) *GetUsersParams {
	o.SetEmailAddresses(emailAddresses)
	return o
}

// SetEmailAddresses adds the emailAddresses to the get users params
func (o *GetUsersParams) SetEmailAddresses(emailAddresses []string) {
	o.EmailAddresses = emailAddresses
}

// WithPartialMatch adds the partialMatch to the get users params
func (o *GetUsersParams) WithPartialMatch(partialMatch *bool) *GetUsersParams {
	o.SetPartialMatch(partialMatch)
	return o
}

// SetPartialMatch adds the partialMatch to the get users params
func (o *GetUsersParams) SetPartialMatch(partialMatch *bool) {
	o.PartialMatch = partialMatch
}

// WithTenantIds adds the tenantIds to the get users params
func (o *GetUsersParams) WithTenantIds(tenantIds []string) *GetUsersParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get users params
func (o *GetUsersParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithUsernames adds the usernames to the get users params
func (o *GetUsersParams) WithUsernames(usernames []string) *GetUsersParams {
	o.SetUsernames(usernames)
	return o
}

// SetUsernames adds the usernames to the get users params
func (o *GetUsersParams) SetUsernames(usernames []string) {
	o.Usernames = usernames
}

// WriteToRequest writes these params to a swagger request
func (o *GetUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.Domain != nil {

		// query param domain
		var qrDomain string

		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {

			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}
	}

	if o.EmailAddresses != nil {

		// binding items for emailAddresses
		joinedEmailAddresses := o.bindParamEmailAddresses(reg)

		// query array param emailAddresses
		if err := r.SetQueryParam("emailAddresses", joinedEmailAddresses...); err != nil {
			return err
		}
	}

	if o.PartialMatch != nil {

		// query param partialMatch
		var qrPartialMatch bool

		if o.PartialMatch != nil {
			qrPartialMatch = *o.PartialMatch
		}
		qPartialMatch := swag.FormatBool(qrPartialMatch)
		if qPartialMatch != "" {

			if err := r.SetQueryParam("partialMatch", qPartialMatch); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.Usernames != nil {

		// binding items for usernames
		joinedUsernames := o.bindParamUsernames(reg)

		// query array param usernames
		if err := r.SetQueryParam("usernames", joinedUsernames...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetUsers binds the parameter emailAddresses
func (o *GetUsersParams) bindParamEmailAddresses(formats strfmt.Registry) []string {
	emailAddressesIR := o.EmailAddresses

	var emailAddressesIC []string
	for _, emailAddressesIIR := range emailAddressesIR { // explode []string

		emailAddressesIIV := emailAddressesIIR // string as string
		emailAddressesIC = append(emailAddressesIC, emailAddressesIIV)
	}

	// items.CollectionFormat: ""
	emailAddressesIS := swag.JoinByFormat(emailAddressesIC, "")

	return emailAddressesIS
}

// bindParamGetUsers binds the parameter tenantIds
func (o *GetUsersParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}

// bindParamGetUsers binds the parameter usernames
func (o *GetUsersParams) bindParamUsernames(formats strfmt.Registry) []string {
	usernamesIR := o.Usernames

	var usernamesIC []string
	for _, usernamesIIR := range usernamesIR { // explode []string

		usernamesIIV := usernamesIIR // string as string
		usernamesIC = append(usernamesIC, usernamesIIV)
	}

	// items.CollectionFormat: ""
	usernamesIS := swag.JoinByFormat(usernamesIC, "")

	return usernamesIS
}
