// Code generated by go-swagger; DO NOT EDIT.

package principals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new principals API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new principals API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new principals API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for principals API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserCreated, error)

	CreateUserAPIKey(params *CreateUserAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserAPIKeyCreated, error)

	DeleteUserAPIKey(params *DeleteUserAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserAPIKeyNoContent, error)

	DeleteUsers(params *DeleteUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUsersNoContent, error)

	GetAllUserAPIKeys(params *GetAllUserAPIKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUserAPIKeysOK, error)

	GetSessionUser(params *GetSessionUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSessionUserOK, error)

	GetUserAPIKeyByID(params *GetUserAPIKeyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserAPIKeyByIDOK, error)

	GetUserAPIKeys(params *GetUserAPIKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserAPIKeysOK, error)

	GetUserPrivileges(params *GetUserPrivilegesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserPrivilegesOK, error)

	GetUsers(params *GetUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersOK, error)

	LinuxSupportUserBashShellAccess(params *LinuxSupportUserBashShellAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinuxSupportUserBashShellAccessAccepted, error)

	LinuxSupportUserSudoAccess(params *LinuxSupportUserSudoAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinuxSupportUserSudoAccessAccepted, error)

	ListSourcesForPrincipals(params *ListSourcesForPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSourcesForPrincipalsOK, error)

	ResetS3SecretKey(params *ResetS3SecretKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetS3SecretKeyOK, error)

	RotateUserAPIKey(params *RotateUserAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RotateUserAPIKeyOK, error)

	SearchPrincipals(params *SearchPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPrincipalsOK, error)

	UpdateLinuxCredentials(params *UpdateLinuxCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLinuxCredentialsAccepted, error)

	UpdateSourcesForPrincipals(params *UpdateSourcesForPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSourcesForPrincipalsNoContent, error)

	UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserOK, error)

	UpdateUserAPIKey(params *UpdateUserAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserAPIKeyOK, error)

	VerifyOtpCode(params *VerifyOtpCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifyOtpCodeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateUser creates or add a new user to the cohesity cluster

	**Privileges:** ```PRINCIPAL_MODIFY``` <br><br>If an Active Directory domain is specified, a new user is added to the

Cohesity Cluster for the specified Active Directory user principal.
If the LOCAL domain is specified, a new user is created directly in
the default LOCAL domain on the Cohesity Cluster.

Returns the created or added user.
*/
func (a *Client) CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateUser",
		Method:             "POST",
		PathPattern:        "/public/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateUserAPIKey creates an API key for user

```No Privileges Required``` <br><br>
*/
func (a *Client) CreateUserAPIKey(params *CreateUserAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserAPIKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateUserApiKey",
		Method:             "POST",
		PathPattern:        "/public/users/{sid}/apiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserAPIKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteUserAPIKey deletes an API key for user

```No Privileges Required``` <br><br>
*/
func (a *Client) DeleteUserAPIKey(params *DeleteUserAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserAPIKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUserApiKey",
		Method:             "DELETE",
		PathPattern:        "/public/users/{sid}/apiKeys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserAPIKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	DeleteUsers deletes one or more users on the cohesity cluster

	**Privileges:** ```PRINCIPAL_MODIFY``` <br><br>Only users from the same domain can be deleted by a single request.

If the Cohesity user was created for an Active Directory user, the referenced
principal user on the Active Directory domain is NOT deleted.
Only the user on the Cohesity Cluster is deleted.
Returns Success if the specified users are deleted.
*/
func (a *Client) DeleteUsers(params *DeleteUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUsersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUsers",
		Method:             "DELETE",
		PathPattern:        "/public/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAllUserAPIKeys fetches API keys across all users

```No Privileges Required``` <br><br>
*/
func (a *Client) GetAllUserAPIKeys(params *GetAllUserAPIKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUserAPIKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUserAPIKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllUserApiKeys",
		Method:             "GET",
		PathPattern:        "/public/usersApiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUserAPIKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUserAPIKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAllUserAPIKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSessionUser gets the information of the logged in user

```No Privileges Required``` <br><br>
*/
func (a *Client) GetSessionUser(params *GetSessionUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSessionUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSessionUser",
		Method:             "GET",
		PathPattern:        "/public/sessionUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSessionUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSessionUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSessionUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetUserAPIKeyByID fetches an API key for user by its id

```No Privileges Required``` <br><br>
*/
func (a *Client) GetUserAPIKeyByID(params *GetUserAPIKeyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserAPIKeyByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserAPIKeyByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserApiKeyById",
		Method:             "GET",
		PathPattern:        "/public/users/{sid}/apiKeys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserAPIKeyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserAPIKeyByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserAPIKeyByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetUserAPIKeys fetches API keys for user

```No Privileges Required``` <br><br>
*/
func (a *Client) GetUserAPIKeys(params *GetUserAPIKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserAPIKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserAPIKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserApiKeys",
		Method:             "GET",
		PathPattern:        "/public/users/{sid}/apiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserAPIKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserAPIKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserAPIKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetUserPrivileges lists the privileges of the session user

```No Privileges Required``` <br><br>
*/
func (a *Client) GetUserPrivileges(params *GetUserPrivilegesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserPrivilegesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPrivilegesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserPrivileges",
		Method:             "GET",
		PathPattern:        "/public/users/privileges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPrivilegesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPrivilegesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserPrivilegesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetUsers lists the users on the cohesity cluster that match the filter criteria specified using parameters

	```No Privileges Required``` <br><br>If no parameters are specified, all users currently on the Cohesity Cluster

are returned. Specifying parameters filters the results that are returned.
*/
func (a *Client) GetUsers(params *GetUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsers",
		Method:             "GET",
		PathPattern:        "/public/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LinuxSupportUserBashShellAccess requests linux support user bash shell access

**Privileges:** ```SUPPORT_CHANNEL_MODIFY``` <br><br>
*/
func (a *Client) LinuxSupportUserBashShellAccess(params *LinuxSupportUserBashShellAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinuxSupportUserBashShellAccessAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinuxSupportUserBashShellAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LinuxSupportUserBashShellAccess",
		Method:             "PUT",
		PathPattern:        "/public/users/linuxSupportUserBashShellAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LinuxSupportUserBashShellAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinuxSupportUserBashShellAccessAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LinuxSupportUserBashShellAccessDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LinuxSupportUserSudoAccess requests linux support user sudo access

**Privileges:** ```LINUX_USER_SUDO_ACCESS``` <br><br>
*/
func (a *Client) LinuxSupportUserSudoAccess(params *LinuxSupportUserSudoAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinuxSupportUserSudoAccessAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinuxSupportUserSudoAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LinuxSupportUserSudoAccess",
		Method:             "PUT",
		PathPattern:        "/public/users/linuxSupportUserSudoAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LinuxSupportUserSudoAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinuxSupportUserSudoAccessAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LinuxSupportUserSudoAccessDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	ListSourcesForPrincipals returns the protection sources objects and view names that the principals have permissions to access

	**Privileges:** ```PRINCIPAL_VIEW``` <br><br>From the passed in list principals (specified by SIDs),

return the list of Protection Sources objects and View names that each
principal has permission to access.
*/
func (a *Client) ListSourcesForPrincipals(params *ListSourcesForPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSourcesForPrincipalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSourcesForPrincipalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListSourcesForPrincipals",
		Method:             "GET",
		PathPattern:        "/public/principals/protectionSources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSourcesForPrincipalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSourcesForPrincipalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSourcesForPrincipalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResetS3SecretKey resets the s3 secret access key for the specified user on the cohesity cluster

```No Privileges Required``` <br><br>Returns the new key that was generated.
*/
func (a *Client) ResetS3SecretKey(params *ResetS3SecretKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetS3SecretKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetS3SecretKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResetS3SecretKey",
		Method:             "POST",
		PathPattern:        "/public/users/s3SecretKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetS3SecretKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetS3SecretKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResetS3SecretKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RotateUserAPIKey fetches an API key for user by its id

```No Privileges Required``` <br><br>
*/
func (a *Client) RotateUserAPIKey(params *RotateUserAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RotateUserAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotateUserAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RotateUserApiKey",
		Method:             "POST",
		PathPattern:        "/public/users/{sid}/apiKeys/{id}/rotate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RotateUserAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RotateUserAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RotateUserAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	SearchPrincipals lists the user and group principals that match the filter criteria specified using parameters

	**Privileges:** ```PRINCIPAL_VIEW``` <br><br>Optionally, limit the search results by specifying security identifiers (SIDs),

an object class (user or group) or a substring.
You can specify SIDs or a substring but not both.
*/
func (a *Client) SearchPrincipals(params *SearchPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPrincipalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPrincipalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchPrincipals",
		Method:             "GET",
		PathPattern:        "/public/principals/searchPrincipals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchPrincipalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPrincipalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchPrincipalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateLinuxCredentials updates linux user password

**Privileges:** ```CLUSTER_MODIFY``` <br><br>
*/
func (a *Client) UpdateLinuxCredentials(params *UpdateLinuxCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLinuxCredentialsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLinuxCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateLinuxCredentials",
		Method:             "PUT",
		PathPattern:        "/public/users/linuxPassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLinuxCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLinuxCredentialsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateLinuxCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateSourcesForPrincipals sets the protection sources and views that the specified principal has permissions to access

	**Privileges:** ```PRINCIPAL_MODIFY``` <br><br>Specify the security identifier (SID) of the principal to grant access

permissions for.
*/
func (a *Client) UpdateSourcesForPrincipals(params *UpdateSourcesForPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSourcesForPrincipalsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSourcesForPrincipalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSourcesForPrincipals",
		Method:             "PUT",
		PathPattern:        "/public/principals/protectionSources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSourcesForPrincipalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSourcesForPrincipalsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSourcesForPrincipalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateUser updates an existing user on the cohesity cluster only user settings on the cohesity cluster are updated no changes are made to the referenced user principal on the active directory

```No Privileges Required``` <br><br>Returns the user that was updated on the Cohesity Cluster.
*/
func (a *Client) UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUser",
		Method:             "PUT",
		PathPattern:        "/public/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateUserAPIKey updates an API key

```No Privileges Required``` <br><br>
*/
func (a *Client) UpdateUserAPIKey(params *UpdateUserAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUserApiKey",
		Method:             "PUT",
		PathPattern:        "/public/users/{sid}/apiKeys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateUserAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
VerifyOtpCode verifies the o t p code

```No Privileges Required``` <br><br>Returns the session user info if the verification is successful.
*/
func (a *Client) VerifyOtpCode(params *VerifyOtpCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifyOtpCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyOtpCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VerifyOtpCode",
		Method:             "POST",
		PathPattern:        "/public/verify-otp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerifyOtpCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyOtpCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VerifyOtpCodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
