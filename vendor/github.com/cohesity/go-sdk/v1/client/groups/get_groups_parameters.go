// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetGroupsParams creates a new GetGroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetGroupsParams() *GetGroupsParams {
	return &GetGroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetGroupsParamsWithTimeout creates a new GetGroupsParams object
// with the ability to set a timeout on a request.
func NewGetGroupsParamsWithTimeout(timeout time.Duration) *GetGroupsParams {
	return &GetGroupsParams{
		timeout: timeout,
	}
}

// NewGetGroupsParamsWithContext creates a new GetGroupsParams object
// with the ability to set a context for a request.
func NewGetGroupsParamsWithContext(ctx context.Context) *GetGroupsParams {
	return &GetGroupsParams{
		Context: ctx,
	}
}

// NewGetGroupsParamsWithHTTPClient creates a new GetGroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetGroupsParamsWithHTTPClient(client *http.Client) *GetGroupsParams {
	return &GetGroupsParams{
		HTTPClient: client,
	}
}

/*
GetGroupsParams contains all the parameters to send to the API endpoint

	for the get groups operation.

	Typically these are written to a http.Request.
*/
type GetGroupsParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	AllUnderHierarchy *bool

	/* Domain.

	     If no domain is specified, all groups on the Cohesity Cluster are searched.
	If a domain is specified, only groups on the Cohesity Cluster
	associated with that domain are searched.
	*/
	Domain *string

	/* FilterByOwnedDomains.

	     If FilterByOwnedDomains is set to true, then the groups are filtered
	to show only the ones that are in the domains owned by the current tenant
	or user.
	*/
	FilterByOwnedDomains *bool

	/* Name.

	     Optionally specify a group name to filter by. All groups containing name
	will be returned.
	*/
	Name *string

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGroupsParams) WithDefaults() *GetGroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGroupsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get groups params
func (o *GetGroupsParams) WithTimeout(timeout time.Duration) *GetGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get groups params
func (o *GetGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get groups params
func (o *GetGroupsParams) WithContext(ctx context.Context) *GetGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get groups params
func (o *GetGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get groups params
func (o *GetGroupsParams) WithHTTPClient(client *http.Client) *GetGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get groups params
func (o *GetGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get groups params
func (o *GetGroupsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetGroupsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get groups params
func (o *GetGroupsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithDomain adds the domain to the get groups params
func (o *GetGroupsParams) WithDomain(domain *string) *GetGroupsParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the get groups params
func (o *GetGroupsParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithFilterByOwnedDomains adds the filterByOwnedDomains to the get groups params
func (o *GetGroupsParams) WithFilterByOwnedDomains(filterByOwnedDomains *bool) *GetGroupsParams {
	o.SetFilterByOwnedDomains(filterByOwnedDomains)
	return o
}

// SetFilterByOwnedDomains adds the filterByOwnedDomains to the get groups params
func (o *GetGroupsParams) SetFilterByOwnedDomains(filterByOwnedDomains *bool) {
	o.FilterByOwnedDomains = filterByOwnedDomains
}

// WithName adds the name to the get groups params
func (o *GetGroupsParams) WithName(name *string) *GetGroupsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get groups params
func (o *GetGroupsParams) SetName(name *string) {
	o.Name = name
}

// WithTenantIds adds the tenantIds to the get groups params
func (o *GetGroupsParams) WithTenantIds(tenantIds []string) *GetGroupsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get groups params
func (o *GetGroupsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.Domain != nil {

		// query param domain
		var qrDomain string

		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {

			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}
	}

	if o.FilterByOwnedDomains != nil {

		// query param filterByOwnedDomains
		var qrFilterByOwnedDomains bool

		if o.FilterByOwnedDomains != nil {
			qrFilterByOwnedDomains = *o.FilterByOwnedDomains
		}
		qFilterByOwnedDomains := swag.FormatBool(qrFilterByOwnedDomains)
		if qFilterByOwnedDomains != "" {

			if err := r.SetQueryParam("filterByOwnedDomains", qFilterByOwnedDomains); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetGroups binds the parameter tenantIds
func (o *GetGroupsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
