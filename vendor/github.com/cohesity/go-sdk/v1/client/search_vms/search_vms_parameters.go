// Code generated by go-swagger; DO NOT EDIT.

package search_vms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchVmsParams creates a new SearchVmsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchVmsParams() *SearchVmsParams {
	return &SearchVmsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchVmsParamsWithTimeout creates a new SearchVmsParams object
// with the ability to set a timeout on a request.
func NewSearchVmsParamsWithTimeout(timeout time.Duration) *SearchVmsParams {
	return &SearchVmsParams{
		timeout: timeout,
	}
}

// NewSearchVmsParamsWithContext creates a new SearchVmsParams object
// with the ability to set a context for a request.
func NewSearchVmsParamsWithContext(ctx context.Context) *SearchVmsParams {
	return &SearchVmsParams{
		Context: ctx,
	}
}

// NewSearchVmsParamsWithHTTPClient creates a new SearchVmsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchVmsParamsWithHTTPClient(client *http.Client) *SearchVmsParams {
	return &SearchVmsParams{
		HTTPClient: client,
	}
}

/*
SearchVmsParams contains all the parameters to send to the API endpoint

	for the search vms operation.

	Typically these are written to a http.Request.
*/
type SearchVmsParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if logs of all the tenants under the hierarchy
	of tenant with id TenantId should be returned.
	*/
	AllUnderHierarchy *bool

	/* EntityIds.

	   EntityIds are the ids of the objects (e.g. VMs).
	*/
	EntityIds []int64

	/* EntityTypes.

	     EntityTypes are the types of the entity being requested e.g. kView,
	kVMware, kPhysical.
	*/
	EntityTypes []string

	/* Environment.

	     Environment is the type of application environment. For SQL, it will be
	specified as SQL.
	*/
	Environment *string

	/* ExcludeJobTypes.

	   Exclude search results for the specified job types.
	*/
	ExcludeJobTypes []string

	/* From.

	     From is the start index (0-based) used for ElasticSearch results
	pagination.

	     Format: int64
	*/
	From *int64

	/* FromTimeUsecs.

	   FromTimeUsecs is the start range for the time the VM backup was completed.

	   Format: int64
	*/
	FromTimeUsecs *int64

	/* JobIds.

	   JobIds are the ids of the jobs the VM backup came from.
	*/
	JobIds []int64

	/* JobTypes.

	     JobTypes are the types of the job being requested e.g. kHyperV,
	kHyperVVSS. It almost mirrors the EntityTypes except in few cases like
	JobType for hypervEntities (HyperV, HyperV2k12) are different but the
	EntityTypes for both the hypervEntities are same
	*/
	JobTypes []string

	/* Office365EntityTypes.

	     Office365EntityTypes are the types of sub entities within an Office365
	entity. Refer main/magneto/base/entities/o365.proto for details.
	*/
	Office365EntityTypes []string

	/* OnlyLatestVersion.

	   Include only latest version if following flag is passed as true.
	*/
	OnlyLatestVersion *bool

	/* OsTypes.

	     OsTypes are the types of the OS being requested. It only applies to VMs
	and physical servers.
	*/
	OsTypes []string

	/* OwnerEntityID.

	     OwnerEntityId applies only if searching for applications e.g. SQL DB.
	OwnerEntityId refers to the Entity Id of the owner VM. For example, if
	OwnerEntityId is provided while searching for SQL DBs, only SQL DBs
	belonging to the VM having Id specified by OwnerEntityId will be returned.

	     Format: int64
	*/
	OwnerEntityID *int64

	/* RegisteredSourceIds.

	     RegisteredSourceIds are the Ids of the top-level registered entities the VM
	belongs to.
	*/
	RegisteredSourceIds []int64

	/* RunTypes.

	     RunTypes are the types of the run being requested e.g. kRegular, kFull
	kLog, kSystem and kHydrateCDP.
	*/
	RunTypes []string

	/* ShowAll.

	     If showAll is false then all those objects are returned which are stored
	locally or those object which are archived but are file based.
	*/
	ShowAll *bool

	/* Size.

	   Size is the number of results to return in each pagination query.

	   Format: int64
	*/
	Size *int64

	/* TenantID.

	   TenantId specifies the tenant whose action resulted in the audit log.
	*/
	TenantID *string

	/* ToTimeUsecs.

	   ToTimeUsecs is the end range for the time the VM backup was completed.

	   Format: int64
	*/
	ToTimeUsecs *int64

	/* ViewBoxIds.

	   ViewBoxIds are the ids of the view boxes where the VM was saved.
	*/
	ViewBoxIds []int64

	/* VMName.

	     VmName is the name of the VM to search for. The term can match any
	token in the real VM name (i.e. "vm" or "123" would both match
	"vm-123").
	*/
	VMName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search vms params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchVmsParams) WithDefaults() *SearchVmsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search vms params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchVmsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search vms params
func (o *SearchVmsParams) WithTimeout(timeout time.Duration) *SearchVmsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search vms params
func (o *SearchVmsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search vms params
func (o *SearchVmsParams) WithContext(ctx context.Context) *SearchVmsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search vms params
func (o *SearchVmsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search vms params
func (o *SearchVmsParams) WithHTTPClient(client *http.Client) *SearchVmsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search vms params
func (o *SearchVmsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the search vms params
func (o *SearchVmsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *SearchVmsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the search vms params
func (o *SearchVmsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithEntityIds adds the entityIds to the search vms params
func (o *SearchVmsParams) WithEntityIds(entityIds []int64) *SearchVmsParams {
	o.SetEntityIds(entityIds)
	return o
}

// SetEntityIds adds the entityIds to the search vms params
func (o *SearchVmsParams) SetEntityIds(entityIds []int64) {
	o.EntityIds = entityIds
}

// WithEntityTypes adds the entityTypes to the search vms params
func (o *SearchVmsParams) WithEntityTypes(entityTypes []string) *SearchVmsParams {
	o.SetEntityTypes(entityTypes)
	return o
}

// SetEntityTypes adds the entityTypes to the search vms params
func (o *SearchVmsParams) SetEntityTypes(entityTypes []string) {
	o.EntityTypes = entityTypes
}

// WithEnvironment adds the environment to the search vms params
func (o *SearchVmsParams) WithEnvironment(environment *string) *SearchVmsParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the search vms params
func (o *SearchVmsParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithExcludeJobTypes adds the excludeJobTypes to the search vms params
func (o *SearchVmsParams) WithExcludeJobTypes(excludeJobTypes []string) *SearchVmsParams {
	o.SetExcludeJobTypes(excludeJobTypes)
	return o
}

// SetExcludeJobTypes adds the excludeJobTypes to the search vms params
func (o *SearchVmsParams) SetExcludeJobTypes(excludeJobTypes []string) {
	o.ExcludeJobTypes = excludeJobTypes
}

// WithFrom adds the from to the search vms params
func (o *SearchVmsParams) WithFrom(from *int64) *SearchVmsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the search vms params
func (o *SearchVmsParams) SetFrom(from *int64) {
	o.From = from
}

// WithFromTimeUsecs adds the fromTimeUsecs to the search vms params
func (o *SearchVmsParams) WithFromTimeUsecs(fromTimeUsecs *int64) *SearchVmsParams {
	o.SetFromTimeUsecs(fromTimeUsecs)
	return o
}

// SetFromTimeUsecs adds the fromTimeUsecs to the search vms params
func (o *SearchVmsParams) SetFromTimeUsecs(fromTimeUsecs *int64) {
	o.FromTimeUsecs = fromTimeUsecs
}

// WithJobIds adds the jobIds to the search vms params
func (o *SearchVmsParams) WithJobIds(jobIds []int64) *SearchVmsParams {
	o.SetJobIds(jobIds)
	return o
}

// SetJobIds adds the jobIds to the search vms params
func (o *SearchVmsParams) SetJobIds(jobIds []int64) {
	o.JobIds = jobIds
}

// WithJobTypes adds the jobTypes to the search vms params
func (o *SearchVmsParams) WithJobTypes(jobTypes []string) *SearchVmsParams {
	o.SetJobTypes(jobTypes)
	return o
}

// SetJobTypes adds the jobTypes to the search vms params
func (o *SearchVmsParams) SetJobTypes(jobTypes []string) {
	o.JobTypes = jobTypes
}

// WithOffice365EntityTypes adds the office365EntityTypes to the search vms params
func (o *SearchVmsParams) WithOffice365EntityTypes(office365EntityTypes []string) *SearchVmsParams {
	o.SetOffice365EntityTypes(office365EntityTypes)
	return o
}

// SetOffice365EntityTypes adds the office365EntityTypes to the search vms params
func (o *SearchVmsParams) SetOffice365EntityTypes(office365EntityTypes []string) {
	o.Office365EntityTypes = office365EntityTypes
}

// WithOnlyLatestVersion adds the onlyLatestVersion to the search vms params
func (o *SearchVmsParams) WithOnlyLatestVersion(onlyLatestVersion *bool) *SearchVmsParams {
	o.SetOnlyLatestVersion(onlyLatestVersion)
	return o
}

// SetOnlyLatestVersion adds the onlyLatestVersion to the search vms params
func (o *SearchVmsParams) SetOnlyLatestVersion(onlyLatestVersion *bool) {
	o.OnlyLatestVersion = onlyLatestVersion
}

// WithOsTypes adds the osTypes to the search vms params
func (o *SearchVmsParams) WithOsTypes(osTypes []string) *SearchVmsParams {
	o.SetOsTypes(osTypes)
	return o
}

// SetOsTypes adds the osTypes to the search vms params
func (o *SearchVmsParams) SetOsTypes(osTypes []string) {
	o.OsTypes = osTypes
}

// WithOwnerEntityID adds the ownerEntityID to the search vms params
func (o *SearchVmsParams) WithOwnerEntityID(ownerEntityID *int64) *SearchVmsParams {
	o.SetOwnerEntityID(ownerEntityID)
	return o
}

// SetOwnerEntityID adds the ownerEntityId to the search vms params
func (o *SearchVmsParams) SetOwnerEntityID(ownerEntityID *int64) {
	o.OwnerEntityID = ownerEntityID
}

// WithRegisteredSourceIds adds the registeredSourceIds to the search vms params
func (o *SearchVmsParams) WithRegisteredSourceIds(registeredSourceIds []int64) *SearchVmsParams {
	o.SetRegisteredSourceIds(registeredSourceIds)
	return o
}

// SetRegisteredSourceIds adds the registeredSourceIds to the search vms params
func (o *SearchVmsParams) SetRegisteredSourceIds(registeredSourceIds []int64) {
	o.RegisteredSourceIds = registeredSourceIds
}

// WithRunTypes adds the runTypes to the search vms params
func (o *SearchVmsParams) WithRunTypes(runTypes []string) *SearchVmsParams {
	o.SetRunTypes(runTypes)
	return o
}

// SetRunTypes adds the runTypes to the search vms params
func (o *SearchVmsParams) SetRunTypes(runTypes []string) {
	o.RunTypes = runTypes
}

// WithShowAll adds the showAll to the search vms params
func (o *SearchVmsParams) WithShowAll(showAll *bool) *SearchVmsParams {
	o.SetShowAll(showAll)
	return o
}

// SetShowAll adds the showAll to the search vms params
func (o *SearchVmsParams) SetShowAll(showAll *bool) {
	o.ShowAll = showAll
}

// WithSize adds the size to the search vms params
func (o *SearchVmsParams) WithSize(size *int64) *SearchVmsParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the search vms params
func (o *SearchVmsParams) SetSize(size *int64) {
	o.Size = size
}

// WithTenantID adds the tenantID to the search vms params
func (o *SearchVmsParams) WithTenantID(tenantID *string) *SearchVmsParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the search vms params
func (o *SearchVmsParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WithToTimeUsecs adds the toTimeUsecs to the search vms params
func (o *SearchVmsParams) WithToTimeUsecs(toTimeUsecs *int64) *SearchVmsParams {
	o.SetToTimeUsecs(toTimeUsecs)
	return o
}

// SetToTimeUsecs adds the toTimeUsecs to the search vms params
func (o *SearchVmsParams) SetToTimeUsecs(toTimeUsecs *int64) {
	o.ToTimeUsecs = toTimeUsecs
}

// WithViewBoxIds adds the viewBoxIds to the search vms params
func (o *SearchVmsParams) WithViewBoxIds(viewBoxIds []int64) *SearchVmsParams {
	o.SetViewBoxIds(viewBoxIds)
	return o
}

// SetViewBoxIds adds the viewBoxIds to the search vms params
func (o *SearchVmsParams) SetViewBoxIds(viewBoxIds []int64) {
	o.ViewBoxIds = viewBoxIds
}

// WithVMName adds the vMName to the search vms params
func (o *SearchVmsParams) WithVMName(vMName *string) *SearchVmsParams {
	o.SetVMName(vMName)
	return o
}

// SetVMName adds the vmName to the search vms params
func (o *SearchVmsParams) SetVMName(vMName *string) {
	o.VMName = vMName
}

// WriteToRequest writes these params to a swagger request
func (o *SearchVmsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.EntityIds != nil {

		// binding items for entityIds
		joinedEntityIds := o.bindParamEntityIds(reg)

		// query array param entityIds
		if err := r.SetQueryParam("entityIds", joinedEntityIds...); err != nil {
			return err
		}
	}

	if o.EntityTypes != nil {

		// binding items for entityTypes
		joinedEntityTypes := o.bindParamEntityTypes(reg)

		// query array param entityTypes
		if err := r.SetQueryParam("entityTypes", joinedEntityTypes...); err != nil {
			return err
		}
	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string

		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {

			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}
	}

	if o.ExcludeJobTypes != nil {

		// binding items for excludeJobTypes
		joinedExcludeJobTypes := o.bindParamExcludeJobTypes(reg)

		// query array param excludeJobTypes
		if err := r.SetQueryParam("excludeJobTypes", joinedExcludeJobTypes...); err != nil {
			return err
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom int64

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.FromTimeUsecs != nil {

		// query param fromTimeUsecs
		var qrFromTimeUsecs int64

		if o.FromTimeUsecs != nil {
			qrFromTimeUsecs = *o.FromTimeUsecs
		}
		qFromTimeUsecs := swag.FormatInt64(qrFromTimeUsecs)
		if qFromTimeUsecs != "" {

			if err := r.SetQueryParam("fromTimeUsecs", qFromTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.JobIds != nil {

		// binding items for jobIds
		joinedJobIds := o.bindParamJobIds(reg)

		// query array param jobIds
		if err := r.SetQueryParam("jobIds", joinedJobIds...); err != nil {
			return err
		}
	}

	if o.JobTypes != nil {

		// binding items for jobTypes
		joinedJobTypes := o.bindParamJobTypes(reg)

		// query array param jobTypes
		if err := r.SetQueryParam("jobTypes", joinedJobTypes...); err != nil {
			return err
		}
	}

	if o.Office365EntityTypes != nil {

		// binding items for office365EntityTypes
		joinedOffice365EntityTypes := o.bindParamOffice365EntityTypes(reg)

		// query array param office365EntityTypes
		if err := r.SetQueryParam("office365EntityTypes", joinedOffice365EntityTypes...); err != nil {
			return err
		}
	}

	if o.OnlyLatestVersion != nil {

		// query param onlyLatestVersion
		var qrOnlyLatestVersion bool

		if o.OnlyLatestVersion != nil {
			qrOnlyLatestVersion = *o.OnlyLatestVersion
		}
		qOnlyLatestVersion := swag.FormatBool(qrOnlyLatestVersion)
		if qOnlyLatestVersion != "" {

			if err := r.SetQueryParam("onlyLatestVersion", qOnlyLatestVersion); err != nil {
				return err
			}
		}
	}

	if o.OsTypes != nil {

		// binding items for osTypes
		joinedOsTypes := o.bindParamOsTypes(reg)

		// query array param osTypes
		if err := r.SetQueryParam("osTypes", joinedOsTypes...); err != nil {
			return err
		}
	}

	if o.OwnerEntityID != nil {

		// query param ownerEntityId
		var qrOwnerEntityID int64

		if o.OwnerEntityID != nil {
			qrOwnerEntityID = *o.OwnerEntityID
		}
		qOwnerEntityID := swag.FormatInt64(qrOwnerEntityID)
		if qOwnerEntityID != "" {

			if err := r.SetQueryParam("ownerEntityId", qOwnerEntityID); err != nil {
				return err
			}
		}
	}

	if o.RegisteredSourceIds != nil {

		// binding items for registeredSourceIds
		joinedRegisteredSourceIds := o.bindParamRegisteredSourceIds(reg)

		// query array param registeredSourceIds
		if err := r.SetQueryParam("registeredSourceIds", joinedRegisteredSourceIds...); err != nil {
			return err
		}
	}

	if o.RunTypes != nil {

		// binding items for runTypes
		joinedRunTypes := o.bindParamRunTypes(reg)

		// query array param runTypes
		if err := r.SetQueryParam("runTypes", joinedRunTypes...); err != nil {
			return err
		}
	}

	if o.ShowAll != nil {

		// query param showAll
		var qrShowAll bool

		if o.ShowAll != nil {
			qrShowAll = *o.ShowAll
		}
		qShowAll := swag.FormatBool(qrShowAll)
		if qShowAll != "" {

			if err := r.SetQueryParam("showAll", qShowAll); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int64

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.TenantID != nil {

		// query param tenantId
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenantId", qTenantID); err != nil {
				return err
			}
		}
	}

	if o.ToTimeUsecs != nil {

		// query param toTimeUsecs
		var qrToTimeUsecs int64

		if o.ToTimeUsecs != nil {
			qrToTimeUsecs = *o.ToTimeUsecs
		}
		qToTimeUsecs := swag.FormatInt64(qrToTimeUsecs)
		if qToTimeUsecs != "" {

			if err := r.SetQueryParam("toTimeUsecs", qToTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.ViewBoxIds != nil {

		// binding items for viewBoxIds
		joinedViewBoxIds := o.bindParamViewBoxIds(reg)

		// query array param viewBoxIds
		if err := r.SetQueryParam("viewBoxIds", joinedViewBoxIds...); err != nil {
			return err
		}
	}

	if o.VMName != nil {

		// query param vmName
		var qrVMName string

		if o.VMName != nil {
			qrVMName = *o.VMName
		}
		qVMName := qrVMName
		if qVMName != "" {

			if err := r.SetQueryParam("vmName", qVMName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchVms binds the parameter entityIds
func (o *SearchVmsParams) bindParamEntityIds(formats strfmt.Registry) []string {
	entityIdsIR := o.EntityIds

	var entityIdsIC []string
	for _, entityIdsIIR := range entityIdsIR { // explode []int64

		entityIdsIIV := swag.FormatInt64(entityIdsIIR) // int64 as string
		entityIdsIC = append(entityIdsIC, entityIdsIIV)
	}

	// items.CollectionFormat: ""
	entityIdsIS := swag.JoinByFormat(entityIdsIC, "")

	return entityIdsIS
}

// bindParamSearchVms binds the parameter entityTypes
func (o *SearchVmsParams) bindParamEntityTypes(formats strfmt.Registry) []string {
	entityTypesIR := o.EntityTypes

	var entityTypesIC []string
	for _, entityTypesIIR := range entityTypesIR { // explode []string

		entityTypesIIV := entityTypesIIR // string as string
		entityTypesIC = append(entityTypesIC, entityTypesIIV)
	}

	// items.CollectionFormat: ""
	entityTypesIS := swag.JoinByFormat(entityTypesIC, "")

	return entityTypesIS
}

// bindParamSearchVms binds the parameter excludeJobTypes
func (o *SearchVmsParams) bindParamExcludeJobTypes(formats strfmt.Registry) []string {
	excludeJobTypesIR := o.ExcludeJobTypes

	var excludeJobTypesIC []string
	for _, excludeJobTypesIIR := range excludeJobTypesIR { // explode []string

		excludeJobTypesIIV := excludeJobTypesIIR // string as string
		excludeJobTypesIC = append(excludeJobTypesIC, excludeJobTypesIIV)
	}

	// items.CollectionFormat: ""
	excludeJobTypesIS := swag.JoinByFormat(excludeJobTypesIC, "")

	return excludeJobTypesIS
}

// bindParamSearchVms binds the parameter jobIds
func (o *SearchVmsParams) bindParamJobIds(formats strfmt.Registry) []string {
	jobIdsIR := o.JobIds

	var jobIdsIC []string
	for _, jobIdsIIR := range jobIdsIR { // explode []int64

		jobIdsIIV := swag.FormatInt64(jobIdsIIR) // int64 as string
		jobIdsIC = append(jobIdsIC, jobIdsIIV)
	}

	// items.CollectionFormat: ""
	jobIdsIS := swag.JoinByFormat(jobIdsIC, "")

	return jobIdsIS
}

// bindParamSearchVms binds the parameter jobTypes
func (o *SearchVmsParams) bindParamJobTypes(formats strfmt.Registry) []string {
	jobTypesIR := o.JobTypes

	var jobTypesIC []string
	for _, jobTypesIIR := range jobTypesIR { // explode []string

		jobTypesIIV := jobTypesIIR // string as string
		jobTypesIC = append(jobTypesIC, jobTypesIIV)
	}

	// items.CollectionFormat: ""
	jobTypesIS := swag.JoinByFormat(jobTypesIC, "")

	return jobTypesIS
}

// bindParamSearchVms binds the parameter office365EntityTypes
func (o *SearchVmsParams) bindParamOffice365EntityTypes(formats strfmt.Registry) []string {
	office365EntityTypesIR := o.Office365EntityTypes

	var office365EntityTypesIC []string
	for _, office365EntityTypesIIR := range office365EntityTypesIR { // explode []string

		office365EntityTypesIIV := office365EntityTypesIIR // string as string
		office365EntityTypesIC = append(office365EntityTypesIC, office365EntityTypesIIV)
	}

	// items.CollectionFormat: ""
	office365EntityTypesIS := swag.JoinByFormat(office365EntityTypesIC, "")

	return office365EntityTypesIS
}

// bindParamSearchVms binds the parameter osTypes
func (o *SearchVmsParams) bindParamOsTypes(formats strfmt.Registry) []string {
	osTypesIR := o.OsTypes

	var osTypesIC []string
	for _, osTypesIIR := range osTypesIR { // explode []string

		osTypesIIV := osTypesIIR // string as string
		osTypesIC = append(osTypesIC, osTypesIIV)
	}

	// items.CollectionFormat: ""
	osTypesIS := swag.JoinByFormat(osTypesIC, "")

	return osTypesIS
}

// bindParamSearchVms binds the parameter registeredSourceIds
func (o *SearchVmsParams) bindParamRegisteredSourceIds(formats strfmt.Registry) []string {
	registeredSourceIdsIR := o.RegisteredSourceIds

	var registeredSourceIdsIC []string
	for _, registeredSourceIdsIIR := range registeredSourceIdsIR { // explode []int64

		registeredSourceIdsIIV := swag.FormatInt64(registeredSourceIdsIIR) // int64 as string
		registeredSourceIdsIC = append(registeredSourceIdsIC, registeredSourceIdsIIV)
	}

	// items.CollectionFormat: ""
	registeredSourceIdsIS := swag.JoinByFormat(registeredSourceIdsIC, "")

	return registeredSourceIdsIS
}

// bindParamSearchVms binds the parameter runTypes
func (o *SearchVmsParams) bindParamRunTypes(formats strfmt.Registry) []string {
	runTypesIR := o.RunTypes

	var runTypesIC []string
	for _, runTypesIIR := range runTypesIR { // explode []string

		runTypesIIV := runTypesIIR // string as string
		runTypesIC = append(runTypesIC, runTypesIIV)
	}

	// items.CollectionFormat: ""
	runTypesIS := swag.JoinByFormat(runTypesIC, "")

	return runTypesIS
}

// bindParamSearchVms binds the parameter viewBoxIds
func (o *SearchVmsParams) bindParamViewBoxIds(formats strfmt.Registry) []string {
	viewBoxIdsIR := o.ViewBoxIds

	var viewBoxIdsIC []string
	for _, viewBoxIdsIIR := range viewBoxIdsIR { // explode []int64

		viewBoxIdsIIV := swag.FormatInt64(viewBoxIdsIIR) // int64 as string
		viewBoxIdsIC = append(viewBoxIdsIC, viewBoxIdsIIV)
	}

	// items.CollectionFormat: ""
	viewBoxIdsIS := swag.JoinByFormat(viewBoxIdsIC, "")

	return viewBoxIdsIS
}
