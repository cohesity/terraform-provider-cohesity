// Code generated by go-swagger; DO NOT EDIT.

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new certificates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new certificates API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new certificates API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for certificates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteWebServerCertificate(params *DeleteWebServerCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWebServerCertificateNoContent, error)

	DeployHostCertificate(params *DeployHostCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeployHostCertificateCreated, error)

	GetCertificateList(params *GetCertificateListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificateListOK, error)

	GetWebServerCertificate(params *GetWebServerCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebServerCertificateOK, error)

	UpdateWebServerCertificate(params *UpdateWebServerCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWebServerCertificateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteWebServerCertificate deletes the s s l certificate in the cluster

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) DeleteWebServerCertificate(params *DeleteWebServerCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWebServerCertificateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebServerCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteWebServerCertificate",
		Method:             "DELETE",
		PathPattern:        "/public/certificates/webServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebServerCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWebServerCertificateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWebServerCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeployHostCertificate generates and deploy certificate for a single or multiple hosts

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the global certificate for a single or multiple hosts.
*/
func (a *Client) DeployHostCertificate(params *DeployHostCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeployHostCertificateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeployHostCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeployHostCertificate",
		Method:             "POST",
		PathPattern:        "/public/certificates/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeployHostCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeployHostCertificateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeployHostCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCertificateList lists the certificates generated and deployed on hosts

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the all certificate and their details generated from this cluster.
*/
func (a *Client) GetCertificateList(params *GetCertificateListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCertificateList",
		Method:             "GET",
		PathPattern:        "/public/certificates/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificateListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCertificateListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWebServerCertificate gets the server certificate configured on the cluster

**Privileges:** ```CLUSTER_VIEW``` <br><br>Returns the Server Certificate configured on the cluster.
*/
func (a *Client) GetWebServerCertificate(params *GetWebServerCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebServerCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebServerCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWebServerCertificate",
		Method:             "GET",
		PathPattern:        "/public/certificates/webServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebServerCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebServerCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWebServerCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateWebServerCertificate updates the web server certificate on the cluster

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the updated Web Server Certificate on the cluster.
*/
func (a *Client) UpdateWebServerCertificate(params *UpdateWebServerCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWebServerCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWebServerCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateWebServerCertificate",
		Method:             "PUT",
		PathPattern:        "/public/certificates/webServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWebServerCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWebServerCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateWebServerCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
