// Code generated by go-swagger; DO NOT EDIT.

package download_files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDownloadFilesParams creates a new DownloadFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDownloadFilesParams() *DownloadFilesParams {
	return &DownloadFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDownloadFilesParamsWithTimeout creates a new DownloadFilesParams object
// with the ability to set a timeout on a request.
func NewDownloadFilesParamsWithTimeout(timeout time.Duration) *DownloadFilesParams {
	return &DownloadFilesParams{
		timeout: timeout,
	}
}

// NewDownloadFilesParamsWithContext creates a new DownloadFilesParams object
// with the ability to set a context for a request.
func NewDownloadFilesParamsWithContext(ctx context.Context) *DownloadFilesParams {
	return &DownloadFilesParams{
		Context: ctx,
	}
}

// NewDownloadFilesParamsWithHTTPClient creates a new DownloadFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewDownloadFilesParamsWithHTTPClient(client *http.Client) *DownloadFilesParams {
	return &DownloadFilesParams{
		HTTPClient: client,
	}
}

/*
DownloadFilesParams contains all the parameters to send to the API endpoint

	for the download files operation.

	Typically these are written to a http.Request.
*/
type DownloadFilesParams struct {

	/* PrimaryJobID.

	     PrimaryJobId is the PrimaryJobId of a replicated job. Yoda requires
	this to download the file from replicated snapshot.
	Note: This field is for internal use. Not to be sent through api call.
	deprecated now

	     Format: int64
	*/
	PrimaryJobID *int64

	/* AttemptNum.

	     AttemptNum is the attempt of the job instance that took the snapshot. If
	a particular job run has errors, it can result in multiple retries. Each
	retry of a job run is called an attempt.

	     Format: int64
	*/
	AttemptNum *int64

	/* ClusterID.

	   ClusterId is the Id of the cluster used for constructing JobUid.

	   Format: int64
	*/
	ClusterID *int64

	/* ClusterIncarnationID.

	     ClusterIncarnationId is the incarnation Id of the cluster used for
	constructing JobUid.

	     Format: int64
	*/
	ClusterIncarnationID *int64

	/* EntityID.

	   EntityId is the Id of the entity where the file resides.

	   Format: int64
	*/
	EntityID *int64

	/* ExternalTargetID.

	     ExternalTargetId is the Vault id where a file is stored when attempting
	to download file from Archive.

	     Format: int64
	*/
	ExternalTargetID *int64

	/* Filepath.

	     Filepath is the path of file/directory in the guest OS. This is mandatory
	if VmwareVmxFile, vmwareFileType are not specified.
	*/
	Filepath *string

	/* JobID.

	   JobId is the Id of the job that took the snapshot.

	   Format: int64
	*/
	JobID *int64

	/* JobInstanceID.

	   JobInstanceId is the Id of the run of the job that took the snapshot.

	   Format: int64
	*/
	JobInstanceID *int64

	/* JobStartTimeUsecs.

	   JobStartTimeUsecs is the start time of the job run.

	   Format: int64
	*/
	JobStartTimeUsecs *int64

	/* Length.

	     Length specifies how many bytes from start_offset are required. Note that
	we may not honor this length, and return fewer bytes.

	     Format: int64
	*/
	Length *int64

	/* StartOffset.

	   StartOffset is the start offset from where bytes will be read.

	   Format: int64
	*/
	StartOffset *int64

	/* ViewBoxID.

	   ViewBoxId is the view box where the file is stored.

	   Format: int64
	*/
	ViewBoxID *int64

	/* ViewName.

	   Name of the View if a file is being downloaded from a View.
	*/
	ViewName *string

	/* VmwareFileType.

	     vmwareFileType specifies the type of VMware file to be extracted.
	If this is set, then Filepath, VmwareVmxFile should not be specified.

	     Format: int32
	*/
	VmwareFileType *int32

	/* VmwareVmxFile.

	     VmwareVmxFile specifies whether the vmware vmx file for the VM is to be
	extracted. If this is set to true, then Filepath, VmwareFileType should
	not be specified.
	*/
	VmwareVmxFile *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the download files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadFilesParams) WithDefaults() *DownloadFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the download files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the download files params
func (o *DownloadFilesParams) WithTimeout(timeout time.Duration) *DownloadFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the download files params
func (o *DownloadFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the download files params
func (o *DownloadFilesParams) WithContext(ctx context.Context) *DownloadFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the download files params
func (o *DownloadFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the download files params
func (o *DownloadFilesParams) WithHTTPClient(client *http.Client) *DownloadFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the download files params
func (o *DownloadFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPrimaryJobID adds the primaryJobID to the download files params
func (o *DownloadFilesParams) WithPrimaryJobID(primaryJobID *int64) *DownloadFilesParams {
	o.SetPrimaryJobID(primaryJobID)
	return o
}

// SetPrimaryJobID adds the primaryJobId to the download files params
func (o *DownloadFilesParams) SetPrimaryJobID(primaryJobID *int64) {
	o.PrimaryJobID = primaryJobID
}

// WithAttemptNum adds the attemptNum to the download files params
func (o *DownloadFilesParams) WithAttemptNum(attemptNum *int64) *DownloadFilesParams {
	o.SetAttemptNum(attemptNum)
	return o
}

// SetAttemptNum adds the attemptNum to the download files params
func (o *DownloadFilesParams) SetAttemptNum(attemptNum *int64) {
	o.AttemptNum = attemptNum
}

// WithClusterID adds the clusterID to the download files params
func (o *DownloadFilesParams) WithClusterID(clusterID *int64) *DownloadFilesParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the download files params
func (o *DownloadFilesParams) SetClusterID(clusterID *int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the download files params
func (o *DownloadFilesParams) WithClusterIncarnationID(clusterIncarnationID *int64) *DownloadFilesParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the download files params
func (o *DownloadFilesParams) SetClusterIncarnationID(clusterIncarnationID *int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithEntityID adds the entityID to the download files params
func (o *DownloadFilesParams) WithEntityID(entityID *int64) *DownloadFilesParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the download files params
func (o *DownloadFilesParams) SetEntityID(entityID *int64) {
	o.EntityID = entityID
}

// WithExternalTargetID adds the externalTargetID to the download files params
func (o *DownloadFilesParams) WithExternalTargetID(externalTargetID *int64) *DownloadFilesParams {
	o.SetExternalTargetID(externalTargetID)
	return o
}

// SetExternalTargetID adds the externalTargetId to the download files params
func (o *DownloadFilesParams) SetExternalTargetID(externalTargetID *int64) {
	o.ExternalTargetID = externalTargetID
}

// WithFilepath adds the filepath to the download files params
func (o *DownloadFilesParams) WithFilepath(filepath *string) *DownloadFilesParams {
	o.SetFilepath(filepath)
	return o
}

// SetFilepath adds the filepath to the download files params
func (o *DownloadFilesParams) SetFilepath(filepath *string) {
	o.Filepath = filepath
}

// WithJobID adds the jobID to the download files params
func (o *DownloadFilesParams) WithJobID(jobID *int64) *DownloadFilesParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the download files params
func (o *DownloadFilesParams) SetJobID(jobID *int64) {
	o.JobID = jobID
}

// WithJobInstanceID adds the jobInstanceID to the download files params
func (o *DownloadFilesParams) WithJobInstanceID(jobInstanceID *int64) *DownloadFilesParams {
	o.SetJobInstanceID(jobInstanceID)
	return o
}

// SetJobInstanceID adds the jobInstanceId to the download files params
func (o *DownloadFilesParams) SetJobInstanceID(jobInstanceID *int64) {
	o.JobInstanceID = jobInstanceID
}

// WithJobStartTimeUsecs adds the jobStartTimeUsecs to the download files params
func (o *DownloadFilesParams) WithJobStartTimeUsecs(jobStartTimeUsecs *int64) *DownloadFilesParams {
	o.SetJobStartTimeUsecs(jobStartTimeUsecs)
	return o
}

// SetJobStartTimeUsecs adds the jobStartTimeUsecs to the download files params
func (o *DownloadFilesParams) SetJobStartTimeUsecs(jobStartTimeUsecs *int64) {
	o.JobStartTimeUsecs = jobStartTimeUsecs
}

// WithLength adds the length to the download files params
func (o *DownloadFilesParams) WithLength(length *int64) *DownloadFilesParams {
	o.SetLength(length)
	return o
}

// SetLength adds the length to the download files params
func (o *DownloadFilesParams) SetLength(length *int64) {
	o.Length = length
}

// WithStartOffset adds the startOffset to the download files params
func (o *DownloadFilesParams) WithStartOffset(startOffset *int64) *DownloadFilesParams {
	o.SetStartOffset(startOffset)
	return o
}

// SetStartOffset adds the startOffset to the download files params
func (o *DownloadFilesParams) SetStartOffset(startOffset *int64) {
	o.StartOffset = startOffset
}

// WithViewBoxID adds the viewBoxID to the download files params
func (o *DownloadFilesParams) WithViewBoxID(viewBoxID *int64) *DownloadFilesParams {
	o.SetViewBoxID(viewBoxID)
	return o
}

// SetViewBoxID adds the viewBoxId to the download files params
func (o *DownloadFilesParams) SetViewBoxID(viewBoxID *int64) {
	o.ViewBoxID = viewBoxID
}

// WithViewName adds the viewName to the download files params
func (o *DownloadFilesParams) WithViewName(viewName *string) *DownloadFilesParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the download files params
func (o *DownloadFilesParams) SetViewName(viewName *string) {
	o.ViewName = viewName
}

// WithVmwareFileType adds the vmwareFileType to the download files params
func (o *DownloadFilesParams) WithVmwareFileType(vmwareFileType *int32) *DownloadFilesParams {
	o.SetVmwareFileType(vmwareFileType)
	return o
}

// SetVmwareFileType adds the vmwareFileType to the download files params
func (o *DownloadFilesParams) SetVmwareFileType(vmwareFileType *int32) {
	o.VmwareFileType = vmwareFileType
}

// WithVmwareVmxFile adds the vmwareVmxFile to the download files params
func (o *DownloadFilesParams) WithVmwareVmxFile(vmwareVmxFile *bool) *DownloadFilesParams {
	o.SetVmwareVmxFile(vmwareVmxFile)
	return o
}

// SetVmwareVmxFile adds the vmwareVmxFile to the download files params
func (o *DownloadFilesParams) SetVmwareVmxFile(vmwareVmxFile *bool) {
	o.VmwareVmxFile = vmwareVmxFile
}

// WriteToRequest writes these params to a swagger request
func (o *DownloadFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PrimaryJobID != nil {

		// query param PrimaryJobId
		var qrPrimaryJobID int64

		if o.PrimaryJobID != nil {
			qrPrimaryJobID = *o.PrimaryJobID
		}
		qPrimaryJobID := swag.FormatInt64(qrPrimaryJobID)
		if qPrimaryJobID != "" {

			if err := r.SetQueryParam("PrimaryJobId", qPrimaryJobID); err != nil {
				return err
			}
		}
	}

	if o.AttemptNum != nil {

		// query param attemptNum
		var qrAttemptNum int64

		if o.AttemptNum != nil {
			qrAttemptNum = *o.AttemptNum
		}
		qAttemptNum := swag.FormatInt64(qrAttemptNum)
		if qAttemptNum != "" {

			if err := r.SetQueryParam("attemptNum", qAttemptNum); err != nil {
				return err
			}
		}
	}

	if o.ClusterID != nil {

		// query param clusterId
		var qrClusterID int64

		if o.ClusterID != nil {
			qrClusterID = *o.ClusterID
		}
		qClusterID := swag.FormatInt64(qrClusterID)
		if qClusterID != "" {

			if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
				return err
			}
		}
	}

	if o.ClusterIncarnationID != nil {

		// query param clusterIncarnationId
		var qrClusterIncarnationID int64

		if o.ClusterIncarnationID != nil {
			qrClusterIncarnationID = *o.ClusterIncarnationID
		}
		qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
		if qClusterIncarnationID != "" {

			if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
				return err
			}
		}
	}

	if o.EntityID != nil {

		// query param entityId
		var qrEntityID int64

		if o.EntityID != nil {
			qrEntityID = *o.EntityID
		}
		qEntityID := swag.FormatInt64(qrEntityID)
		if qEntityID != "" {

			if err := r.SetQueryParam("entityId", qEntityID); err != nil {
				return err
			}
		}
	}

	if o.ExternalTargetID != nil {

		// query param externalTargetId
		var qrExternalTargetID int64

		if o.ExternalTargetID != nil {
			qrExternalTargetID = *o.ExternalTargetID
		}
		qExternalTargetID := swag.FormatInt64(qrExternalTargetID)
		if qExternalTargetID != "" {

			if err := r.SetQueryParam("externalTargetId", qExternalTargetID); err != nil {
				return err
			}
		}
	}

	if o.Filepath != nil {

		// query param filepath
		var qrFilepath string

		if o.Filepath != nil {
			qrFilepath = *o.Filepath
		}
		qFilepath := qrFilepath
		if qFilepath != "" {

			if err := r.SetQueryParam("filepath", qFilepath); err != nil {
				return err
			}
		}
	}

	if o.JobID != nil {

		// query param jobId
		var qrJobID int64

		if o.JobID != nil {
			qrJobID = *o.JobID
		}
		qJobID := swag.FormatInt64(qrJobID)
		if qJobID != "" {

			if err := r.SetQueryParam("jobId", qJobID); err != nil {
				return err
			}
		}
	}

	if o.JobInstanceID != nil {

		// query param jobInstanceId
		var qrJobInstanceID int64

		if o.JobInstanceID != nil {
			qrJobInstanceID = *o.JobInstanceID
		}
		qJobInstanceID := swag.FormatInt64(qrJobInstanceID)
		if qJobInstanceID != "" {

			if err := r.SetQueryParam("jobInstanceId", qJobInstanceID); err != nil {
				return err
			}
		}
	}

	if o.JobStartTimeUsecs != nil {

		// query param jobStartTimeUsecs
		var qrJobStartTimeUsecs int64

		if o.JobStartTimeUsecs != nil {
			qrJobStartTimeUsecs = *o.JobStartTimeUsecs
		}
		qJobStartTimeUsecs := swag.FormatInt64(qrJobStartTimeUsecs)
		if qJobStartTimeUsecs != "" {

			if err := r.SetQueryParam("jobStartTimeUsecs", qJobStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.Length != nil {

		// query param length
		var qrLength int64

		if o.Length != nil {
			qrLength = *o.Length
		}
		qLength := swag.FormatInt64(qrLength)
		if qLength != "" {

			if err := r.SetQueryParam("length", qLength); err != nil {
				return err
			}
		}
	}

	if o.StartOffset != nil {

		// query param startOffset
		var qrStartOffset int64

		if o.StartOffset != nil {
			qrStartOffset = *o.StartOffset
		}
		qStartOffset := swag.FormatInt64(qrStartOffset)
		if qStartOffset != "" {

			if err := r.SetQueryParam("startOffset", qStartOffset); err != nil {
				return err
			}
		}
	}

	if o.ViewBoxID != nil {

		// query param viewBoxId
		var qrViewBoxID int64

		if o.ViewBoxID != nil {
			qrViewBoxID = *o.ViewBoxID
		}
		qViewBoxID := swag.FormatInt64(qrViewBoxID)
		if qViewBoxID != "" {

			if err := r.SetQueryParam("viewBoxId", qViewBoxID); err != nil {
				return err
			}
		}
	}

	if o.ViewName != nil {

		// query param viewName
		var qrViewName string

		if o.ViewName != nil {
			qrViewName = *o.ViewName
		}
		qViewName := qrViewName
		if qViewName != "" {

			if err := r.SetQueryParam("viewName", qViewName); err != nil {
				return err
			}
		}
	}

	if o.VmwareFileType != nil {

		// query param vmwareFileType
		var qrVmwareFileType int32

		if o.VmwareFileType != nil {
			qrVmwareFileType = *o.VmwareFileType
		}
		qVmwareFileType := swag.FormatInt32(qrVmwareFileType)
		if qVmwareFileType != "" {

			if err := r.SetQueryParam("vmwareFileType", qVmwareFileType); err != nil {
				return err
			}
		}
	}

	if o.VmwareVmxFile != nil {

		// query param vmwareVmxFile
		var qrVmwareVmxFile bool

		if o.VmwareVmxFile != nil {
			qrVmwareVmxFile = *o.VmwareVmxFile
		}
		qVmwareVmxFile := swag.FormatBool(qrVmwareVmxFile)
		if qVmwareVmxFile != "" {

			if err := r.SetQueryParam("vmwareVmxFile", qVmwareVmxFile); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
