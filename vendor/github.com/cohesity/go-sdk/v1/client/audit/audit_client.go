// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new audit API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new audit API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new audit API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for audit API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAuditLogsActions(params *GetAuditLogsActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuditLogsActionsOK, error)

	GetAuditLogsCategories(params *GetAuditLogsCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuditLogsCategoriesOK, error)

	SearchClusterAuditLogs(params *SearchClusterAuditLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchClusterAuditLogsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAuditLogsActions returns list of audit log actions

**Privileges:** ```CLUSTER_AUDIT``` <br><br>A string array of all the actions used to filter audit logs.
*/
func (a *Client) GetAuditLogsActions(params *GetAuditLogsActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuditLogsActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditLogsActionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuditLogsActions",
		Method:             "GET",
		PathPattern:        "/public/auditLogs/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditLogsActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuditLogsActionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAuditLogsActionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAuditLogsCategories returns list of audit log categories

**Privileges:** ```CLUSTER_AUDIT``` <br><br>A string array of all the categories used to filter audit logs.
*/
func (a *Client) GetAuditLogsCategories(params *GetAuditLogsCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuditLogsCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditLogsCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuditLogsCategories",
		Method:             "GET",
		PathPattern:        "/public/auditLogs/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditLogsCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuditLogsCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAuditLogsCategoriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	SearchClusterAuditLogs lists the cluster audit logs on the cohesity cluster that match the filter criteria specified using parameters

	**Privileges:** ```CLUSTER_AUDIT``` <br><br>When actions (such as a login or a Job being paused) occur on the

Cohesity Cluster, the Cluster generates Audit Logs.
If no parameters are specified, all logs currently on the Cohesity Cluster
are returned. Specifying the parameters filters the results that are returned.
*/
func (a *Client) SearchClusterAuditLogs(params *SearchClusterAuditLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchClusterAuditLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchClusterAuditLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchClusterAuditLogs",
		Method:             "GET",
		PathPattern:        "/public/auditLogs/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchClusterAuditLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchClusterAuditLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchClusterAuditLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
