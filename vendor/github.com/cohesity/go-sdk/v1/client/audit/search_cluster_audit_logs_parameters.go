// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchClusterAuditLogsParams creates a new SearchClusterAuditLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchClusterAuditLogsParams() *SearchClusterAuditLogsParams {
	return &SearchClusterAuditLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchClusterAuditLogsParamsWithTimeout creates a new SearchClusterAuditLogsParams object
// with the ability to set a timeout on a request.
func NewSearchClusterAuditLogsParamsWithTimeout(timeout time.Duration) *SearchClusterAuditLogsParams {
	return &SearchClusterAuditLogsParams{
		timeout: timeout,
	}
}

// NewSearchClusterAuditLogsParamsWithContext creates a new SearchClusterAuditLogsParams object
// with the ability to set a context for a request.
func NewSearchClusterAuditLogsParamsWithContext(ctx context.Context) *SearchClusterAuditLogsParams {
	return &SearchClusterAuditLogsParams{
		Context: ctx,
	}
}

// NewSearchClusterAuditLogsParamsWithHTTPClient creates a new SearchClusterAuditLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchClusterAuditLogsParamsWithHTTPClient(client *http.Client) *SearchClusterAuditLogsParams {
	return &SearchClusterAuditLogsParams{
		HTTPClient: client,
	}
}

/*
SearchClusterAuditLogsParams contains all the parameters to send to the API endpoint

	for the search cluster audit logs operation.

	Typically these are written to a http.Request.
*/
type SearchClusterAuditLogsParams struct {

	/* Actions.

	     Filter by the actions that generate Cluster audit logs such as
	Activate, Cancel, Clone, Create, etc. For a complete list, see the
	Actions drop-down in the Admin > Audit Logs page of the Cohesity
	Dashboard.
	*/
	Actions []string

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if logs of all the tenants under the hierarchy
	of tenant with id TenantId should be returned.
	*/
	AllUnderHierarchy *bool

	/* Domains.

	     Filter by domains of users who cause the actions that trigger
	Cluster audit logs.
	*/
	Domains []string

	/* EndTimeUsecs.

	     Filter by a end time specified as a Unix epoch Timestamp
	(in microseconds). Only Cluster audit logs that were generated before the
	specified end time are returned.

	     Format: int64
	*/
	EndTimeUsecs *int64

	/* EntityTypes.

	     Filter by entity types involved in the actions that generate the
	Cluster audit logs, such as User, Protection Job, View, etc.
	For a complete list, see the Category drop-down in the Admin > Audit Logs
	page of the Cohesity Dashboard.
	*/
	EntityTypes []string

	/* OutputFormat.

	     Specifies the format of the output such as csv and json.
	If not specified, the json format is returned. If csv is specified,
	a comma-separated list with a heading row is returned.
	*/
	OutputFormat *string

	/* PageCount.

	     Limit the number of items to return in the response for pagination
	purposes. Default value is 1000.

	     Format: int64
	*/
	PageCount *int64

	/* Search.

	     Filter by matching a substring in entity name or details of the
	Cluster audit log.
	*/
	Search *string

	/* StartIndex.

	     Specifies an index number that can be used to return subsets of items
	in multiple requests.
	Break up the items to return into multiple requests by setting pageCount
	and startIndex to return a subsets of items in the search result.
	For example, set startIndex to 0 to get the first set of pageCount items
	for the first request. Increment startIndex by pageCount
	to get the next set of pageCount items for a next request.
	Continue until all items are returned and therefore the total number of
	returned items is equal to totalCount. Default value is 0.

	     Format: int64
	*/
	StartIndex *int64

	/* StartTimeUsecs.

	     Filter by a start time. Only Cluster audit logs that were generated after
	the specified time are returned.
	Specify the start time as a Unix epoch Timestamp (in microseconds).

	     Format: int64
	*/
	StartTimeUsecs *int64

	/* TenantID.

	   TenantId specifies the tenant whose action resulted in the audit log.
	*/
	TenantID *string

	/* UserNames.

	     Filter by user names who cause the actions that generate Cluster Audit
	Logs.
	*/
	UserNames []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search cluster audit logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchClusterAuditLogsParams) WithDefaults() *SearchClusterAuditLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search cluster audit logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchClusterAuditLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithTimeout(timeout time.Duration) *SearchClusterAuditLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithContext(ctx context.Context) *SearchClusterAuditLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithHTTPClient(client *http.Client) *SearchClusterAuditLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActions adds the actions to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithActions(actions []string) *SearchClusterAuditLogsParams {
	o.SetActions(actions)
	return o
}

// SetActions adds the actions to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetActions(actions []string) {
	o.Actions = actions
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *SearchClusterAuditLogsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithDomains adds the domains to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithDomains(domains []string) *SearchClusterAuditLogsParams {
	o.SetDomains(domains)
	return o
}

// SetDomains adds the domains to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetDomains(domains []string) {
	o.Domains = domains
}

// WithEndTimeUsecs adds the endTimeUsecs to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithEndTimeUsecs(endTimeUsecs *int64) *SearchClusterAuditLogsParams {
	o.SetEndTimeUsecs(endTimeUsecs)
	return o
}

// SetEndTimeUsecs adds the endTimeUsecs to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetEndTimeUsecs(endTimeUsecs *int64) {
	o.EndTimeUsecs = endTimeUsecs
}

// WithEntityTypes adds the entityTypes to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithEntityTypes(entityTypes []string) *SearchClusterAuditLogsParams {
	o.SetEntityTypes(entityTypes)
	return o
}

// SetEntityTypes adds the entityTypes to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetEntityTypes(entityTypes []string) {
	o.EntityTypes = entityTypes
}

// WithOutputFormat adds the outputFormat to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithOutputFormat(outputFormat *string) *SearchClusterAuditLogsParams {
	o.SetOutputFormat(outputFormat)
	return o
}

// SetOutputFormat adds the outputFormat to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetOutputFormat(outputFormat *string) {
	o.OutputFormat = outputFormat
}

// WithPageCount adds the pageCount to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithPageCount(pageCount *int64) *SearchClusterAuditLogsParams {
	o.SetPageCount(pageCount)
	return o
}

// SetPageCount adds the pageCount to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetPageCount(pageCount *int64) {
	o.PageCount = pageCount
}

// WithSearch adds the search to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithSearch(search *string) *SearchClusterAuditLogsParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetSearch(search *string) {
	o.Search = search
}

// WithStartIndex adds the startIndex to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithStartIndex(startIndex *int64) *SearchClusterAuditLogsParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetStartIndex(startIndex *int64) {
	o.StartIndex = startIndex
}

// WithStartTimeUsecs adds the startTimeUsecs to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithStartTimeUsecs(startTimeUsecs *int64) *SearchClusterAuditLogsParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetStartTimeUsecs(startTimeUsecs *int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WithTenantID adds the tenantID to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithTenantID(tenantID *string) *SearchClusterAuditLogsParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WithUserNames adds the userNames to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) WithUserNames(userNames []string) *SearchClusterAuditLogsParams {
	o.SetUserNames(userNames)
	return o
}

// SetUserNames adds the userNames to the search cluster audit logs params
func (o *SearchClusterAuditLogsParams) SetUserNames(userNames []string) {
	o.UserNames = userNames
}

// WriteToRequest writes these params to a swagger request
func (o *SearchClusterAuditLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Actions != nil {

		// binding items for actions
		joinedActions := o.bindParamActions(reg)

		// query array param actions
		if err := r.SetQueryParam("actions", joinedActions...); err != nil {
			return err
		}
	}

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.Domains != nil {

		// binding items for domains
		joinedDomains := o.bindParamDomains(reg)

		// query array param domains
		if err := r.SetQueryParam("domains", joinedDomains...); err != nil {
			return err
		}
	}

	if o.EndTimeUsecs != nil {

		// query param endTimeUsecs
		var qrEndTimeUsecs int64

		if o.EndTimeUsecs != nil {
			qrEndTimeUsecs = *o.EndTimeUsecs
		}
		qEndTimeUsecs := swag.FormatInt64(qrEndTimeUsecs)
		if qEndTimeUsecs != "" {

			if err := r.SetQueryParam("endTimeUsecs", qEndTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.EntityTypes != nil {

		// binding items for entityTypes
		joinedEntityTypes := o.bindParamEntityTypes(reg)

		// query array param entityTypes
		if err := r.SetQueryParam("entityTypes", joinedEntityTypes...); err != nil {
			return err
		}
	}

	if o.OutputFormat != nil {

		// query param outputFormat
		var qrOutputFormat string

		if o.OutputFormat != nil {
			qrOutputFormat = *o.OutputFormat
		}
		qOutputFormat := qrOutputFormat
		if qOutputFormat != "" {

			if err := r.SetQueryParam("outputFormat", qOutputFormat); err != nil {
				return err
			}
		}
	}

	if o.PageCount != nil {

		// query param pageCount
		var qrPageCount int64

		if o.PageCount != nil {
			qrPageCount = *o.PageCount
		}
		qPageCount := swag.FormatInt64(qrPageCount)
		if qPageCount != "" {

			if err := r.SetQueryParam("pageCount", qPageCount); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int64

		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt64(qrStartIndex)
		if qStartIndex != "" {

			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}
	}

	if o.StartTimeUsecs != nil {

		// query param startTimeUsecs
		var qrStartTimeUsecs int64

		if o.StartTimeUsecs != nil {
			qrStartTimeUsecs = *o.StartTimeUsecs
		}
		qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
		if qStartTimeUsecs != "" {

			if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.TenantID != nil {

		// query param tenantId
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenantId", qTenantID); err != nil {
				return err
			}
		}
	}

	if o.UserNames != nil {

		// binding items for userNames
		joinedUserNames := o.bindParamUserNames(reg)

		// query array param userNames
		if err := r.SetQueryParam("userNames", joinedUserNames...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchClusterAuditLogs binds the parameter actions
func (o *SearchClusterAuditLogsParams) bindParamActions(formats strfmt.Registry) []string {
	actionsIR := o.Actions

	var actionsIC []string
	for _, actionsIIR := range actionsIR { // explode []string

		actionsIIV := actionsIIR // string as string
		actionsIC = append(actionsIC, actionsIIV)
	}

	// items.CollectionFormat: ""
	actionsIS := swag.JoinByFormat(actionsIC, "")

	return actionsIS
}

// bindParamSearchClusterAuditLogs binds the parameter domains
func (o *SearchClusterAuditLogsParams) bindParamDomains(formats strfmt.Registry) []string {
	domainsIR := o.Domains

	var domainsIC []string
	for _, domainsIIR := range domainsIR { // explode []string

		domainsIIV := domainsIIR // string as string
		domainsIC = append(domainsIC, domainsIIV)
	}

	// items.CollectionFormat: ""
	domainsIS := swag.JoinByFormat(domainsIC, "")

	return domainsIS
}

// bindParamSearchClusterAuditLogs binds the parameter entityTypes
func (o *SearchClusterAuditLogsParams) bindParamEntityTypes(formats strfmt.Registry) []string {
	entityTypesIR := o.EntityTypes

	var entityTypesIC []string
	for _, entityTypesIIR := range entityTypesIR { // explode []string

		entityTypesIIV := entityTypesIIR // string as string
		entityTypesIC = append(entityTypesIC, entityTypesIIV)
	}

	// items.CollectionFormat: ""
	entityTypesIS := swag.JoinByFormat(entityTypesIC, "")

	return entityTypesIS
}

// bindParamSearchClusterAuditLogs binds the parameter userNames
func (o *SearchClusterAuditLogsParams) bindParamUserNames(formats strfmt.Registry) []string {
	userNamesIR := o.UserNames

	var userNamesIC []string
	for _, userNamesIIR := range userNamesIR { // explode []string

		userNamesIIV := userNamesIIR // string as string
		userNamesIC = append(userNamesIC, userNamesIIV)
	}

	// items.CollectionFormat: ""
	userNamesIS := swag.JoinByFormat(userNamesIC, "")

	return userNamesIS
}
