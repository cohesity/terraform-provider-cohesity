// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewInstallAppParams creates a new InstallAppParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewInstallAppParams() *InstallAppParams {
	return &InstallAppParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewInstallAppParamsWithTimeout creates a new InstallAppParams object
// with the ability to set a timeout on a request.
func NewInstallAppParamsWithTimeout(timeout time.Duration) *InstallAppParams {
	return &InstallAppParams{
		timeout: timeout,
	}
}

// NewInstallAppParamsWithContext creates a new InstallAppParams object
// with the ability to set a context for a request.
func NewInstallAppParamsWithContext(ctx context.Context) *InstallAppParams {
	return &InstallAppParams{
		Context: ctx,
	}
}

// NewInstallAppParamsWithHTTPClient creates a new InstallAppParams object
// with the ability to set a custom HTTPClient for a request.
func NewInstallAppParamsWithHTTPClient(client *http.Client) *InstallAppParams {
	return &InstallAppParams{
		HTTPClient: client,
	}
}

/*
InstallAppParams contains all the parameters to send to the API endpoint

	for the install app operation.

	Typically these are written to a http.Request.
*/
type InstallAppParams struct {

	/* AppUID.

	   Specifies the app Id.

	   Format: int64
	*/
	AppUID int64

	/* Version.

	   Specifies the app version.

	   Format: int64
	*/
	Version int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the install app params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InstallAppParams) WithDefaults() *InstallAppParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the install app params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InstallAppParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the install app params
func (o *InstallAppParams) WithTimeout(timeout time.Duration) *InstallAppParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the install app params
func (o *InstallAppParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the install app params
func (o *InstallAppParams) WithContext(ctx context.Context) *InstallAppParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the install app params
func (o *InstallAppParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the install app params
func (o *InstallAppParams) WithHTTPClient(client *http.Client) *InstallAppParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the install app params
func (o *InstallAppParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppUID adds the appUID to the install app params
func (o *InstallAppParams) WithAppUID(appUID int64) *InstallAppParams {
	o.SetAppUID(appUID)
	return o
}

// SetAppUID adds the appUid to the install app params
func (o *InstallAppParams) SetAppUID(appUID int64) {
	o.AppUID = appUID
}

// WithVersion adds the version to the install app params
func (o *InstallAppParams) WithVersion(version int64) *InstallAppParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the install app params
func (o *InstallAppParams) SetVersion(version int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *InstallAppParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param appUid
	if err := r.SetPathParam("appUid", swag.FormatInt64(o.AppUID)); err != nil {
		return err
	}

	// path param version
	if err := r.SetPathParam("version", swag.FormatInt64(o.Version)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
