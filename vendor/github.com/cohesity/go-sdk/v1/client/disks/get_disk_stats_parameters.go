// Code generated by go-swagger; DO NOT EDIT.

package disks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDiskStatsParams creates a new GetDiskStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDiskStatsParams() *GetDiskStatsParams {
	return &GetDiskStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDiskStatsParamsWithTimeout creates a new GetDiskStatsParams object
// with the ability to set a timeout on a request.
func NewGetDiskStatsParamsWithTimeout(timeout time.Duration) *GetDiskStatsParams {
	return &GetDiskStatsParams{
		timeout: timeout,
	}
}

// NewGetDiskStatsParamsWithContext creates a new GetDiskStatsParams object
// with the ability to set a context for a request.
func NewGetDiskStatsParamsWithContext(ctx context.Context) *GetDiskStatsParams {
	return &GetDiskStatsParams{
		Context: ctx,
	}
}

// NewGetDiskStatsParamsWithHTTPClient creates a new GetDiskStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDiskStatsParamsWithHTTPClient(client *http.Client) *GetDiskStatsParams {
	return &GetDiskStatsParams{
		HTTPClient: client,
	}
}

/*
GetDiskStatsParams contains all the parameters to send to the API endpoint

	for the get disk stats operation.

	Typically these are written to a http.Request.
*/
type GetDiskStatsParams struct {

	/* FetchDiskUsage.

	     FetchDiskUsage is used to specify whether to fetch the disk usage
	details.
	*/
	FetchDiskUsage *bool

	/* FetchStats.

	     FetchStats is used to specify whether to call Stats service to fetch the
	stats for the disks.
	*/
	FetchStats *bool

	/* Ids.

	     IdList is the ids of disks to be returned. If empty, all
	nodes are returned.
	*/
	Ids []int64

	/* IncludeMarkedForRemoval.

	     IncludeMarkedForRemoval is used to specify whether to include disks
	marked for removal.
	*/
	IncludeMarkedForRemoval *bool

	/* NodeIds.

	     NodeIdList specifies the list of Node Ids used to filter the disks by
	specified nodes.
	*/
	NodeIds []int64

	/* OnlyReadyForRemoval.

	   OnlyReadyForRemoval is used to list all disks in kOkToRemove state.
	*/
	OnlyReadyForRemoval *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get disk stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDiskStatsParams) WithDefaults() *GetDiskStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get disk stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDiskStatsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get disk stats params
func (o *GetDiskStatsParams) WithTimeout(timeout time.Duration) *GetDiskStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get disk stats params
func (o *GetDiskStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get disk stats params
func (o *GetDiskStatsParams) WithContext(ctx context.Context) *GetDiskStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get disk stats params
func (o *GetDiskStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get disk stats params
func (o *GetDiskStatsParams) WithHTTPClient(client *http.Client) *GetDiskStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get disk stats params
func (o *GetDiskStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFetchDiskUsage adds the fetchDiskUsage to the get disk stats params
func (o *GetDiskStatsParams) WithFetchDiskUsage(fetchDiskUsage *bool) *GetDiskStatsParams {
	o.SetFetchDiskUsage(fetchDiskUsage)
	return o
}

// SetFetchDiskUsage adds the fetchDiskUsage to the get disk stats params
func (o *GetDiskStatsParams) SetFetchDiskUsage(fetchDiskUsage *bool) {
	o.FetchDiskUsage = fetchDiskUsage
}

// WithFetchStats adds the fetchStats to the get disk stats params
func (o *GetDiskStatsParams) WithFetchStats(fetchStats *bool) *GetDiskStatsParams {
	o.SetFetchStats(fetchStats)
	return o
}

// SetFetchStats adds the fetchStats to the get disk stats params
func (o *GetDiskStatsParams) SetFetchStats(fetchStats *bool) {
	o.FetchStats = fetchStats
}

// WithIds adds the ids to the get disk stats params
func (o *GetDiskStatsParams) WithIds(ids []int64) *GetDiskStatsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get disk stats params
func (o *GetDiskStatsParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithIncludeMarkedForRemoval adds the includeMarkedForRemoval to the get disk stats params
func (o *GetDiskStatsParams) WithIncludeMarkedForRemoval(includeMarkedForRemoval *bool) *GetDiskStatsParams {
	o.SetIncludeMarkedForRemoval(includeMarkedForRemoval)
	return o
}

// SetIncludeMarkedForRemoval adds the includeMarkedForRemoval to the get disk stats params
func (o *GetDiskStatsParams) SetIncludeMarkedForRemoval(includeMarkedForRemoval *bool) {
	o.IncludeMarkedForRemoval = includeMarkedForRemoval
}

// WithNodeIds adds the nodeIds to the get disk stats params
func (o *GetDiskStatsParams) WithNodeIds(nodeIds []int64) *GetDiskStatsParams {
	o.SetNodeIds(nodeIds)
	return o
}

// SetNodeIds adds the nodeIds to the get disk stats params
func (o *GetDiskStatsParams) SetNodeIds(nodeIds []int64) {
	o.NodeIds = nodeIds
}

// WithOnlyReadyForRemoval adds the onlyReadyForRemoval to the get disk stats params
func (o *GetDiskStatsParams) WithOnlyReadyForRemoval(onlyReadyForRemoval *bool) *GetDiskStatsParams {
	o.SetOnlyReadyForRemoval(onlyReadyForRemoval)
	return o
}

// SetOnlyReadyForRemoval adds the onlyReadyForRemoval to the get disk stats params
func (o *GetDiskStatsParams) SetOnlyReadyForRemoval(onlyReadyForRemoval *bool) {
	o.OnlyReadyForRemoval = onlyReadyForRemoval
}

// WriteToRequest writes these params to a swagger request
func (o *GetDiskStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FetchDiskUsage != nil {

		// query param fetchDiskUsage
		var qrFetchDiskUsage bool

		if o.FetchDiskUsage != nil {
			qrFetchDiskUsage = *o.FetchDiskUsage
		}
		qFetchDiskUsage := swag.FormatBool(qrFetchDiskUsage)
		if qFetchDiskUsage != "" {

			if err := r.SetQueryParam("fetchDiskUsage", qFetchDiskUsage); err != nil {
				return err
			}
		}
	}

	if o.FetchStats != nil {

		// query param fetchStats
		var qrFetchStats bool

		if o.FetchStats != nil {
			qrFetchStats = *o.FetchStats
		}
		qFetchStats := swag.FormatBool(qrFetchStats)
		if qFetchStats != "" {

			if err := r.SetQueryParam("fetchStats", qFetchStats); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IncludeMarkedForRemoval != nil {

		// query param includeMarkedForRemoval
		var qrIncludeMarkedForRemoval bool

		if o.IncludeMarkedForRemoval != nil {
			qrIncludeMarkedForRemoval = *o.IncludeMarkedForRemoval
		}
		qIncludeMarkedForRemoval := swag.FormatBool(qrIncludeMarkedForRemoval)
		if qIncludeMarkedForRemoval != "" {

			if err := r.SetQueryParam("includeMarkedForRemoval", qIncludeMarkedForRemoval); err != nil {
				return err
			}
		}
	}

	if o.NodeIds != nil {

		// binding items for nodeIds
		joinedNodeIds := o.bindParamNodeIds(reg)

		// query array param nodeIds
		if err := r.SetQueryParam("nodeIds", joinedNodeIds...); err != nil {
			return err
		}
	}

	if o.OnlyReadyForRemoval != nil {

		// query param onlyReadyForRemoval
		var qrOnlyReadyForRemoval bool

		if o.OnlyReadyForRemoval != nil {
			qrOnlyReadyForRemoval = *o.OnlyReadyForRemoval
		}
		qOnlyReadyForRemoval := swag.FormatBool(qrOnlyReadyForRemoval)
		if qOnlyReadyForRemoval != "" {

			if err := r.SetQueryParam("onlyReadyForRemoval", qOnlyReadyForRemoval); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetDiskStats binds the parameter ids
func (o *GetDiskStatsParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetDiskStats binds the parameter nodeIds
func (o *GetDiskStatsParams) bindParamNodeIds(formats strfmt.Registry) []string {
	nodeIdsIR := o.NodeIds

	var nodeIdsIC []string
	for _, nodeIdsIIR := range nodeIdsIR { // explode []int64

		nodeIdsIIV := swag.FormatInt64(nodeIdsIIR) // int64 as string
		nodeIdsIC = append(nodeIdsIC, nodeIdsIIV)
	}

	// items.CollectionFormat: ""
	nodeIdsIS := swag.JoinByFormat(nodeIdsIC, "")

	return nodeIdsIS
}
