// Code generated by go-swagger; DO NOT EDIT.

package disks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new disks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new disks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new disks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for disks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDiskByID(params *GetDiskByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiskByIDOK, error)

	GetDiskStats(params *GetDiskStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiskStatsOK, error)

	GetDisks(params *GetDisksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDisksOK, error)

	MarkDiskForRemoval(params *MarkDiskForRemovalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkDiskForRemovalAccepted, error)

	UpdateDisk(params *UpdateDiskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDiskOK, error)

	UpdateHydraDiskReservation(params *UpdateHydraDiskReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateHydraDiskReservationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetDiskByID lists details about a single disk

**Privileges:** ```CLUSTER_VIEW``` <br><br>Returns the Disk corresponding to the specified Disk Id.
*/
func (a *Client) GetDiskByID(params *GetDiskByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiskByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiskByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDiskById",
		Method:             "GET",
		PathPattern:        "/disks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDiskByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiskByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDiskByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDiskStats lists details about disk stats

**Privileges:** ```CLUSTER_VIEW``` <br><br>Returns the top level stats for the disks in the clusters.
*/
func (a *Client) GetDiskStats(params *GetDiskStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiskStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiskStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDiskStats",
		Method:             "GET",
		PathPattern:        "/diskStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDiskStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiskStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDiskStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetDisks lists disks filtered by some parameters

	**Privileges:** ```CLUSTER_VIEW``` <br><br>If no parameters are specified, all Disks currently on the Cohesity Cluster are

returned.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetDisks(params *GetDisksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDisksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDisks",
		Method:             "GET",
		PathPattern:        "/disks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDisksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDisksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MarkDiskForRemoval marks a disk for removal

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns delete status upon completion.
*/
func (a *Client) MarkDiskForRemoval(params *MarkDiskForRemovalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkDiskForRemovalAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkDiskForRemovalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MarkDiskForRemoval",
		Method:             "DELETE",
		PathPattern:        "/disks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarkDiskForRemovalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkDiskForRemovalAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MarkDiskForRemovalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDisk updates a disk

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the updated Disk.
*/
func (a *Client) UpdateDisk(params *UpdateDiskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDisk",
		Method:             "PUT",
		PathPattern:        "/disks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDiskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDiskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateHydraDiskReservation updates a hydra disk reservation

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Returns the updated hydra disk reservation.
*/
func (a *Client) UpdateHydraDiskReservation(params *UpdateHydraDiskReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateHydraDiskReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHydraDiskReservationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateHydraDiskReservation",
		Method:             "PUT",
		PathPattern:        "/updateHydraDiskReservation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHydraDiskReservationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHydraDiskReservationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateHydraDiskReservationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
