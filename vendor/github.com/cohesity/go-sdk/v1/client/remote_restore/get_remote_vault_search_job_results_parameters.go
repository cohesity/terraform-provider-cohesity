// Code generated by go-swagger; DO NOT EDIT.

package remote_restore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRemoteVaultSearchJobResultsParams creates a new GetRemoteVaultSearchJobResultsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRemoteVaultSearchJobResultsParams() *GetRemoteVaultSearchJobResultsParams {
	return &GetRemoteVaultSearchJobResultsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRemoteVaultSearchJobResultsParamsWithTimeout creates a new GetRemoteVaultSearchJobResultsParams object
// with the ability to set a timeout on a request.
func NewGetRemoteVaultSearchJobResultsParamsWithTimeout(timeout time.Duration) *GetRemoteVaultSearchJobResultsParams {
	return &GetRemoteVaultSearchJobResultsParams{
		timeout: timeout,
	}
}

// NewGetRemoteVaultSearchJobResultsParamsWithContext creates a new GetRemoteVaultSearchJobResultsParams object
// with the ability to set a context for a request.
func NewGetRemoteVaultSearchJobResultsParamsWithContext(ctx context.Context) *GetRemoteVaultSearchJobResultsParams {
	return &GetRemoteVaultSearchJobResultsParams{
		Context: ctx,
	}
}

// NewGetRemoteVaultSearchJobResultsParamsWithHTTPClient creates a new GetRemoteVaultSearchJobResultsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRemoteVaultSearchJobResultsParamsWithHTTPClient(client *http.Client) *GetRemoteVaultSearchJobResultsParams {
	return &GetRemoteVaultSearchJobResultsParams{
		HTTPClient: client,
	}
}

/*
GetRemoteVaultSearchJobResultsParams contains all the parameters to send to the API endpoint

	for the get remote vault search job results operation.

	Typically these are written to a http.Request.
*/
type GetRemoteVaultSearchJobResultsParams struct {

	/* ClusterID.

	     Specifies the Cohesity Cluster id where the search Job was created.
	Used in combination with the searchJobId and clusterIncarnationId
	to uniquely identify the search Job.

	     Format: int64
	*/
	ClusterID int64

	/* ClusterIncarnationID.

	     Specifies the incarnation id of the Cohesity Cluster where the
	search Job was created.
	Used in combination with the searchJobId and clusterId to uniquely
	identify the search Job.

	     Format: int64
	*/
	ClusterIncarnationID int64

	/* ClusterName.

	   Optionally filter the result by the remote Cohesity Cluster name.
	*/
	ClusterName *string

	/* Cookie.

	     Specifies the opaque string cookie returned by the previous response, to
	get next set of results. Used in combination with pageCount to support
	pagination.
	*/
	Cookie *string

	/* PageCount.

	     Specifies the number of Protection Jobs to return in the response
	to support pagination.

	     Format: int32
	*/
	PageCount *int32

	/* SearchJobID.

	     Specifies the id of the remote Vault search Job assigned
	by the Cohesity Cluster. Used in combination with the clusterId
	and clusterIncarnationId to uniquely identify the search Job.

	     Format: int64
	*/
	SearchJobID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get remote vault search job results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRemoteVaultSearchJobResultsParams) WithDefaults() *GetRemoteVaultSearchJobResultsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get remote vault search job results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRemoteVaultSearchJobResultsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) WithTimeout(timeout time.Duration) *GetRemoteVaultSearchJobResultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) WithContext(ctx context.Context) *GetRemoteVaultSearchJobResultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) WithHTTPClient(client *http.Client) *GetRemoteVaultSearchJobResultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) WithClusterID(clusterID int64) *GetRemoteVaultSearchJobResultsParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) SetClusterID(clusterID int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) WithClusterIncarnationID(clusterIncarnationID int64) *GetRemoteVaultSearchJobResultsParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) SetClusterIncarnationID(clusterIncarnationID int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithClusterName adds the clusterName to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) WithClusterName(clusterName *string) *GetRemoteVaultSearchJobResultsParams {
	o.SetClusterName(clusterName)
	return o
}

// SetClusterName adds the clusterName to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) SetClusterName(clusterName *string) {
	o.ClusterName = clusterName
}

// WithCookie adds the cookie to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) WithCookie(cookie *string) *GetRemoteVaultSearchJobResultsParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithPageCount adds the pageCount to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) WithPageCount(pageCount *int32) *GetRemoteVaultSearchJobResultsParams {
	o.SetPageCount(pageCount)
	return o
}

// SetPageCount adds the pageCount to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) SetPageCount(pageCount *int32) {
	o.PageCount = pageCount
}

// WithSearchJobID adds the searchJobID to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) WithSearchJobID(searchJobID int64) *GetRemoteVaultSearchJobResultsParams {
	o.SetSearchJobID(searchJobID)
	return o
}

// SetSearchJobID adds the searchJobId to the get remote vault search job results params
func (o *GetRemoteVaultSearchJobResultsParams) SetSearchJobID(searchJobID int64) {
	o.SearchJobID = searchJobID
}

// WriteToRequest writes these params to a swagger request
func (o *GetRemoteVaultSearchJobResultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param clusterId
	qrClusterID := o.ClusterID
	qClusterID := swag.FormatInt64(qrClusterID)
	if qClusterID != "" {

		if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
			return err
		}
	}

	// query param clusterIncarnationId
	qrClusterIncarnationID := o.ClusterIncarnationID
	qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
	if qClusterIncarnationID != "" {

		if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
			return err
		}
	}

	if o.ClusterName != nil {

		// query param clusterName
		var qrClusterName string

		if o.ClusterName != nil {
			qrClusterName = *o.ClusterName
		}
		qClusterName := qrClusterName
		if qClusterName != "" {

			if err := r.SetQueryParam("clusterName", qClusterName); err != nil {
				return err
			}
		}
	}

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.PageCount != nil {

		// query param pageCount
		var qrPageCount int32

		if o.PageCount != nil {
			qrPageCount = *o.PageCount
		}
		qPageCount := swag.FormatInt32(qrPageCount)
		if qPageCount != "" {

			if err := r.SetQueryParam("pageCount", qPageCount); err != nil {
				return err
			}
		}
	}

	// query param searchJobId
	qrSearchJobID := o.SearchJobID
	qSearchJobID := swag.FormatInt64(qrSearchJobID)
	if qSearchJobID != "" {

		if err := r.SetQueryParam("searchJobId", qSearchJobID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
