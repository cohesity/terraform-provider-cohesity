// Code generated by go-swagger; DO NOT EDIT.

package remote_restore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new remote restore API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new remote restore API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new remote restore API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for remote restore API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCloudDomainMigrationRequest(params *CreateCloudDomainMigrationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCloudDomainMigrationRequestNoContent, error)

	CreateRemoteVaultRestoreTask(params *CreateRemoteVaultRestoreTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRemoteVaultRestoreTaskCreated, error)

	CreateRemoteVaultSearchJob(params *CreateRemoteVaultSearchJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRemoteVaultSearchJobCreated, error)

	GetRemoteVaultSearchJobResults(params *GetRemoteVaultSearchJobResultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteVaultSearchJobResultsOK, error)

	ListCloudDomainMigration(params *ListCloudDomainMigrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCloudDomainMigrationOK, error)

	ListRemoteVaultRestoreTasks(params *ListRemoteVaultRestoreTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRemoteVaultRestoreTasksOK, error)

	ListRemoteVaultSearchJobByID(params *ListRemoteVaultSearchJobByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRemoteVaultSearchJobByIDOK, error)

	ListRemoteVaultSearchJobs(params *ListRemoteVaultSearchJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRemoteVaultSearchJobsOK, error)

	StopRemoteVaultSearchJob(params *StopRemoteVaultSearchJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopRemoteVaultSearchJobNoContent, error)

	UploadVaultEncryptionKeys(params *UploadVaultEncryptionKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadVaultEncryptionKeysNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateCloudDomainMigrationRequest schedules cloud domain migration

**Privileges:** ```REMOTE_RESTORE``` <br><br>Returns the created cloud domain response.
*/
func (a *Client) CreateCloudDomainMigrationRequest(params *CreateCloudDomainMigrationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCloudDomainMigrationRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudDomainMigrationRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCloudDomainMigrationRequest",
		Method:             "POST",
		PathPattern:        "/public/remoteVaults/cloudDomainMigration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudDomainMigrationRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCloudDomainMigrationRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCloudDomainMigrationRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CreateRemoteVaultRestoreTask creates a remote vault restore task cloud retrieve

	**Privileges:** ```REMOTE_RESTORE``` <br><br>Returns the id of the remote Vault restore Task that was created.

After a Vault is searched by a search Job, this operation can be
called to create a task that restores the indexes and/or the Snapshots
of a Protection Job, which were archived on a remote Vault (External Target).
This is part of the CloudRetrieve functionality for finding and restoring
archived data from remote Vaults to an alternative (non-original) Cluster.
*/
func (a *Client) CreateRemoteVaultRestoreTask(params *CreateRemoteVaultRestoreTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRemoteVaultRestoreTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRemoteVaultRestoreTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRemoteVaultRestoreTask",
		Method:             "POST",
		PathPattern:        "/public/remoteVaults/restoreTasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRemoteVaultRestoreTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRemoteVaultRestoreTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRemoteVaultRestoreTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CreateRemoteVaultSearchJob creates a search of a remote vault cloud retrieve

	**Privileges:** ```REMOTE_RESTORE``` <br><br>A search Job finds Protection Jobs that archived data to a

Vault (External Target) which also match the specified search criteria.
The results can be optionally filtered by specifying a Cluster match string,
a Protection Job match string, a start time and an end time.
This is part of the CloudRetrieve functionality for finding and restoring
archived data from remote Vaults to an alternative (non-original) Cluster.

NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard.
A search Job is equivalent to a search task in the Cohesity Dashboard.
*/
func (a *Client) CreateRemoteVaultSearchJob(params *CreateRemoteVaultSearchJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRemoteVaultSearchJobCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRemoteVaultSearchJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRemoteVaultSearchJob",
		Method:             "POST",
		PathPattern:        "/public/remoteVaults/searchJobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRemoteVaultSearchJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRemoteVaultSearchJobCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRemoteVaultSearchJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetRemoteVaultSearchJobResults lists details about the job runs of protection jobs found by a single search of a remote vault cloud retrieve

	**Privileges:** ```REMOTE_RESTORE``` <br><br>Specify a unique id of the search Job using a combination of the

searchJobId, clusterId, and clusterIncarnationId parameters,
which are all required.

The results can be optionally filtered by the remote Cluster name.
This is part of the CloudRetrieve functionality for finding and restoring
archived data from a remote Vault.
*/
func (a *Client) GetRemoteVaultSearchJobResults(params *GetRemoteVaultSearchJobResultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteVaultSearchJobResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteVaultSearchJobResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRemoteVaultSearchJobResults",
		Method:             "GET",
		PathPattern:        "/public/remoteVaults/searchJobResults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRemoteVaultSearchJobResultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteVaultSearchJobResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRemoteVaultSearchJobResultsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListCloudDomainMigration queries the cloud domain migration

**Privileges:** ```REMOTE_RESTORE``` <br><br>Returns the queried cloud domain response.
*/
func (a *Client) ListCloudDomainMigration(params *ListCloudDomainMigrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCloudDomainMigrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCloudDomainMigrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCloudDomainMigration",
		Method:             "GET",
		PathPattern:        "/public/remoteVaults/cloudDomainMigration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCloudDomainMigrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCloudDomainMigrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCloudDomainMigrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	ListRemoteVaultRestoreTasks lists the remote vault restore tasks that have completed or are running on this cohesity cluster cloud retrieve

	**Privileges:** ```REMOTE_RESTORE``` <br><br>A remote Vault restore task can restore archived data from a Vault

(External Target) to this local Cluster.
This is part of the CloudRetrieve functionality for finding and restoring
archived data from remote Vaults to an alternative (non-original) Cluster.
*/
func (a *Client) ListRemoteVaultRestoreTasks(params *ListRemoteVaultRestoreTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRemoteVaultRestoreTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRemoteVaultRestoreTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRemoteVaultRestoreTasks",
		Method:             "GET",
		PathPattern:        "/public/remoteVaults/restoreTasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRemoteVaultRestoreTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRemoteVaultRestoreTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRemoteVaultRestoreTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	ListRemoteVaultSearchJobByID lists details about a single search job of a remote vault cloud retrieve

	**Privileges:** ```REMOTE_RESTORE``` <br><br>Specify an id for a completed or running search Job.

A search Job finds data that has been archived to a Vault (External Target).
The returned results do not include Job Run (Snapshot) information.
It is part of the CloudRetrieve functionality for finding and restoring
archived data from remote Vaults to an alternative (non-original) Cluster.
*/
func (a *Client) ListRemoteVaultSearchJobByID(params *ListRemoteVaultSearchJobByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRemoteVaultSearchJobByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRemoteVaultSearchJobByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRemoteVaultSearchJobById",
		Method:             "GET",
		PathPattern:        "/public/remoteVaults/searchJobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRemoteVaultSearchJobByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRemoteVaultSearchJobByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRemoteVaultSearchJobByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	ListRemoteVaultSearchJobs lists all the searches of remote vaults cloud retrieve

	**Privileges:** ```REMOTE_RESTORE``` <br><br>List all the searches of remote Vaults (External Targets) that

have run or are running on this Cohesity Cluster.
A search finds Protection Jobs that have archived to a
Vault (External Target).
This is part of the CloudRetrieve functionality for finding and restoring
archived data from remote Vaults to an alternative (non-original) Cluster.

NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard.
A search Job is equivalent to a search task in the Cohesity Dashboard.
*/
func (a *Client) ListRemoteVaultSearchJobs(params *ListRemoteVaultSearchJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRemoteVaultSearchJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRemoteVaultSearchJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRemoteVaultSearchJobs",
		Method:             "GET",
		PathPattern:        "/public/remoteVaults/searchJobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRemoteVaultSearchJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRemoteVaultSearchJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRemoteVaultSearchJobsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	StopRemoteVaultSearchJob stops a search of a remote vault external target cloud retrieve

	**Privileges:** ```REMOTE_RESTORE``` <br><br>This is part of the CloudRetrieve functionality for finding and restoring

archived data from remote Vaults to an alternative (non-original) Cluster.
*/
func (a *Client) StopRemoteVaultSearchJob(params *StopRemoteVaultSearchJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopRemoteVaultSearchJobNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopRemoteVaultSearchJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopRemoteVaultSearchJob",
		Method:             "DELETE",
		PathPattern:        "/public/remoteVaults/searchJobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopRemoteVaultSearchJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopRemoteVaultSearchJobNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopRemoteVaultSearchJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UploadVaultEncryptionKeys uploads the encryption keys required to restore data from a remote vault cloud retrieve

	**Privileges:** ```CLUSTER_MODIFY``` <br><br>This request contains multiple files stored as multipart mime data.

Each file has a key used to encrypt data between a remote Cluster and the
remote Vault.
Content of the file should be same as the file downloaded from the remote
Cluster.
*/
func (a *Client) UploadVaultEncryptionKeys(params *UploadVaultEncryptionKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadVaultEncryptionKeysNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadVaultEncryptionKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UploadVaultEncryptionKeys",
		Method:             "PUT",
		PathPattern:        "/public/remoteVaults/encryptionKeys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadVaultEncryptionKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadVaultEncryptionKeysNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UploadVaultEncryptionKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
