// Code generated by go-swagger; DO NOT EDIT.

package restore_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchObjectsParams creates a new SearchObjectsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchObjectsParams() *SearchObjectsParams {
	return &SearchObjectsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchObjectsParamsWithTimeout creates a new SearchObjectsParams object
// with the ability to set a timeout on a request.
func NewSearchObjectsParamsWithTimeout(timeout time.Duration) *SearchObjectsParams {
	return &SearchObjectsParams{
		timeout: timeout,
	}
}

// NewSearchObjectsParamsWithContext creates a new SearchObjectsParams object
// with the ability to set a context for a request.
func NewSearchObjectsParamsWithContext(ctx context.Context) *SearchObjectsParams {
	return &SearchObjectsParams{
		Context: ctx,
	}
}

// NewSearchObjectsParamsWithHTTPClient creates a new SearchObjectsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchObjectsParamsWithHTTPClient(client *http.Client) *SearchObjectsParams {
	return &SearchObjectsParams{
		HTTPClient: client,
	}
}

/*
SearchObjectsParams contains all the parameters to send to the API endpoint

	for the search objects operation.

	Typically these are written to a http.Request.
*/
type SearchObjectsParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if logs of all the tenants under the hierarchy
	of tenant with id TenantId should be returned.
	*/
	AllUnderHierarchy *bool

	/* Application.

	     Filter by application when the environment type is kSQL.
	For example, if SQL is specified the SQL databases are returned.
	*/
	Application *string

	/* EndTimeUsecs.

	     Filter by backup completion time by specify a backup
	completion start and end times. Specified as a Unix epoch
	Timestamp (in microseconds).
	Only items created by backups that completed between the
	specified start and end times are returned.

	     Format: int64
	*/
	EndTimeUsecs *int64

	/* Environments.

	     Filter by environment types such as 'kVMware', 'kView', etc.
	Only items from the specified environment types are returned.
	NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	*/
	Environments []string

	/* JobIds.

	     Filter by a list of Protection Job ids.
	Only items backed up by the specified Jobs are listed.
	*/
	JobIds []int64

	/* Office365SourceTypes.

	     Filter by Office365 types such as 'kUser', 'kSite', etc.
	Only items from the specified source types are returned.
	*/
	Office365SourceTypes []string

	/* OperatingSystems.

	     Filter by the Operating Systems running on VMs and Physical Servers.
	This filter is applicable only to VMs and physical servers.
	*/
	OperatingSystems []string

	/* OwnerEntityID.

	     Filter objects by the Entity id of the owner VM. For example, if a
	ownerEntityId is provided while searching for SQL databases,
	only SQL databases belonging to the VM with the specified id
	are returned.
	ownerEntityId is only significant if application is set to SQL.

	     Format: int64
	*/
	OwnerEntityID *int64

	/* PageCount.

	     Limit the number of items to return in the response for pagination
	purposes.

	     Format: int64
	*/
	PageCount *int64

	/* RegisteredSourceIds.

	     Filter by a list of Registered Sources ids. Only items
	from the listed Registered Sources are returned.
	*/
	RegisteredSourceIds []int64

	/* Search.

	     Filter by searching for sub-strings in the item name. The specified
	string can match any part of the item name.
	For example: "vm" or "123" both match the item name of "vm-123".
	*/
	Search *string

	/* StartIndex.

	     Specifies an index number that can be used to return subsets of items
	in multiple requests.
	Break up the items to return into multiple requests
	by setting pageCount and using startIndex to return a subsets of items.
	For example, set startIndex to 0 to get the first set of items
	for the first request. Increment startIndex by pageCount
	to get the next set of items for a next request.
	Continue until all items are returned and therefore the total number of
	returned items is equal to totalCount.

	     Format: int64
	*/
	StartIndex *int64

	/* StartTimeUsecs.

	     Filter by backup completion time by specifying a backup
	completion start and end times. Specified as a Unix epoch
	Timestamp (in microseconds).
	Only items created by backups that completed between the
	specified start and end times are returned.

	     Format: int64
	*/
	StartTimeUsecs *int64

	/* TenantID.

	   TenantId specifies the tenant whose action resulted in the audit log.
	*/
	TenantID *string

	/* ViewBoxIds.

	     Filter by a list of Domains (View Boxes) ids.
	Only items stored in the listed Domains (View Boxes) are returned.
	*/
	ViewBoxIds []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search objects params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchObjectsParams) WithDefaults() *SearchObjectsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search objects params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchObjectsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search objects params
func (o *SearchObjectsParams) WithTimeout(timeout time.Duration) *SearchObjectsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search objects params
func (o *SearchObjectsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search objects params
func (o *SearchObjectsParams) WithContext(ctx context.Context) *SearchObjectsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search objects params
func (o *SearchObjectsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search objects params
func (o *SearchObjectsParams) WithHTTPClient(client *http.Client) *SearchObjectsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search objects params
func (o *SearchObjectsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the search objects params
func (o *SearchObjectsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *SearchObjectsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the search objects params
func (o *SearchObjectsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithApplication adds the application to the search objects params
func (o *SearchObjectsParams) WithApplication(application *string) *SearchObjectsParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the search objects params
func (o *SearchObjectsParams) SetApplication(application *string) {
	o.Application = application
}

// WithEndTimeUsecs adds the endTimeUsecs to the search objects params
func (o *SearchObjectsParams) WithEndTimeUsecs(endTimeUsecs *int64) *SearchObjectsParams {
	o.SetEndTimeUsecs(endTimeUsecs)
	return o
}

// SetEndTimeUsecs adds the endTimeUsecs to the search objects params
func (o *SearchObjectsParams) SetEndTimeUsecs(endTimeUsecs *int64) {
	o.EndTimeUsecs = endTimeUsecs
}

// WithEnvironments adds the environments to the search objects params
func (o *SearchObjectsParams) WithEnvironments(environments []string) *SearchObjectsParams {
	o.SetEnvironments(environments)
	return o
}

// SetEnvironments adds the environments to the search objects params
func (o *SearchObjectsParams) SetEnvironments(environments []string) {
	o.Environments = environments
}

// WithJobIds adds the jobIds to the search objects params
func (o *SearchObjectsParams) WithJobIds(jobIds []int64) *SearchObjectsParams {
	o.SetJobIds(jobIds)
	return o
}

// SetJobIds adds the jobIds to the search objects params
func (o *SearchObjectsParams) SetJobIds(jobIds []int64) {
	o.JobIds = jobIds
}

// WithOffice365SourceTypes adds the office365SourceTypes to the search objects params
func (o *SearchObjectsParams) WithOffice365SourceTypes(office365SourceTypes []string) *SearchObjectsParams {
	o.SetOffice365SourceTypes(office365SourceTypes)
	return o
}

// SetOffice365SourceTypes adds the office365SourceTypes to the search objects params
func (o *SearchObjectsParams) SetOffice365SourceTypes(office365SourceTypes []string) {
	o.Office365SourceTypes = office365SourceTypes
}

// WithOperatingSystems adds the operatingSystems to the search objects params
func (o *SearchObjectsParams) WithOperatingSystems(operatingSystems []string) *SearchObjectsParams {
	o.SetOperatingSystems(operatingSystems)
	return o
}

// SetOperatingSystems adds the operatingSystems to the search objects params
func (o *SearchObjectsParams) SetOperatingSystems(operatingSystems []string) {
	o.OperatingSystems = operatingSystems
}

// WithOwnerEntityID adds the ownerEntityID to the search objects params
func (o *SearchObjectsParams) WithOwnerEntityID(ownerEntityID *int64) *SearchObjectsParams {
	o.SetOwnerEntityID(ownerEntityID)
	return o
}

// SetOwnerEntityID adds the ownerEntityId to the search objects params
func (o *SearchObjectsParams) SetOwnerEntityID(ownerEntityID *int64) {
	o.OwnerEntityID = ownerEntityID
}

// WithPageCount adds the pageCount to the search objects params
func (o *SearchObjectsParams) WithPageCount(pageCount *int64) *SearchObjectsParams {
	o.SetPageCount(pageCount)
	return o
}

// SetPageCount adds the pageCount to the search objects params
func (o *SearchObjectsParams) SetPageCount(pageCount *int64) {
	o.PageCount = pageCount
}

// WithRegisteredSourceIds adds the registeredSourceIds to the search objects params
func (o *SearchObjectsParams) WithRegisteredSourceIds(registeredSourceIds []int64) *SearchObjectsParams {
	o.SetRegisteredSourceIds(registeredSourceIds)
	return o
}

// SetRegisteredSourceIds adds the registeredSourceIds to the search objects params
func (o *SearchObjectsParams) SetRegisteredSourceIds(registeredSourceIds []int64) {
	o.RegisteredSourceIds = registeredSourceIds
}

// WithSearch adds the search to the search objects params
func (o *SearchObjectsParams) WithSearch(search *string) *SearchObjectsParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the search objects params
func (o *SearchObjectsParams) SetSearch(search *string) {
	o.Search = search
}

// WithStartIndex adds the startIndex to the search objects params
func (o *SearchObjectsParams) WithStartIndex(startIndex *int64) *SearchObjectsParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the search objects params
func (o *SearchObjectsParams) SetStartIndex(startIndex *int64) {
	o.StartIndex = startIndex
}

// WithStartTimeUsecs adds the startTimeUsecs to the search objects params
func (o *SearchObjectsParams) WithStartTimeUsecs(startTimeUsecs *int64) *SearchObjectsParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the search objects params
func (o *SearchObjectsParams) SetStartTimeUsecs(startTimeUsecs *int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WithTenantID adds the tenantID to the search objects params
func (o *SearchObjectsParams) WithTenantID(tenantID *string) *SearchObjectsParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the search objects params
func (o *SearchObjectsParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WithViewBoxIds adds the viewBoxIds to the search objects params
func (o *SearchObjectsParams) WithViewBoxIds(viewBoxIds []int64) *SearchObjectsParams {
	o.SetViewBoxIds(viewBoxIds)
	return o
}

// SetViewBoxIds adds the viewBoxIds to the search objects params
func (o *SearchObjectsParams) SetViewBoxIds(viewBoxIds []int64) {
	o.ViewBoxIds = viewBoxIds
}

// WriteToRequest writes these params to a swagger request
func (o *SearchObjectsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.Application != nil {

		// query param application
		var qrApplication string

		if o.Application != nil {
			qrApplication = *o.Application
		}
		qApplication := qrApplication
		if qApplication != "" {

			if err := r.SetQueryParam("application", qApplication); err != nil {
				return err
			}
		}
	}

	if o.EndTimeUsecs != nil {

		// query param endTimeUsecs
		var qrEndTimeUsecs int64

		if o.EndTimeUsecs != nil {
			qrEndTimeUsecs = *o.EndTimeUsecs
		}
		qEndTimeUsecs := swag.FormatInt64(qrEndTimeUsecs)
		if qEndTimeUsecs != "" {

			if err := r.SetQueryParam("endTimeUsecs", qEndTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.Environments != nil {

		// binding items for environments
		joinedEnvironments := o.bindParamEnvironments(reg)

		// query array param environments
		if err := r.SetQueryParam("environments", joinedEnvironments...); err != nil {
			return err
		}
	}

	if o.JobIds != nil {

		// binding items for jobIds
		joinedJobIds := o.bindParamJobIds(reg)

		// query array param jobIds
		if err := r.SetQueryParam("jobIds", joinedJobIds...); err != nil {
			return err
		}
	}

	if o.Office365SourceTypes != nil {

		// binding items for office365SourceTypes
		joinedOffice365SourceTypes := o.bindParamOffice365SourceTypes(reg)

		// query array param office365SourceTypes
		if err := r.SetQueryParam("office365SourceTypes", joinedOffice365SourceTypes...); err != nil {
			return err
		}
	}

	if o.OperatingSystems != nil {

		// binding items for operatingSystems
		joinedOperatingSystems := o.bindParamOperatingSystems(reg)

		// query array param operatingSystems
		if err := r.SetQueryParam("operatingSystems", joinedOperatingSystems...); err != nil {
			return err
		}
	}

	if o.OwnerEntityID != nil {

		// query param ownerEntityId
		var qrOwnerEntityID int64

		if o.OwnerEntityID != nil {
			qrOwnerEntityID = *o.OwnerEntityID
		}
		qOwnerEntityID := swag.FormatInt64(qrOwnerEntityID)
		if qOwnerEntityID != "" {

			if err := r.SetQueryParam("ownerEntityId", qOwnerEntityID); err != nil {
				return err
			}
		}
	}

	if o.PageCount != nil {

		// query param pageCount
		var qrPageCount int64

		if o.PageCount != nil {
			qrPageCount = *o.PageCount
		}
		qPageCount := swag.FormatInt64(qrPageCount)
		if qPageCount != "" {

			if err := r.SetQueryParam("pageCount", qPageCount); err != nil {
				return err
			}
		}
	}

	if o.RegisteredSourceIds != nil {

		// binding items for registeredSourceIds
		joinedRegisteredSourceIds := o.bindParamRegisteredSourceIds(reg)

		// query array param registeredSourceIds
		if err := r.SetQueryParam("registeredSourceIds", joinedRegisteredSourceIds...); err != nil {
			return err
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int64

		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt64(qrStartIndex)
		if qStartIndex != "" {

			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}
	}

	if o.StartTimeUsecs != nil {

		// query param startTimeUsecs
		var qrStartTimeUsecs int64

		if o.StartTimeUsecs != nil {
			qrStartTimeUsecs = *o.StartTimeUsecs
		}
		qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
		if qStartTimeUsecs != "" {

			if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.TenantID != nil {

		// query param tenantId
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenantId", qTenantID); err != nil {
				return err
			}
		}
	}

	if o.ViewBoxIds != nil {

		// binding items for viewBoxIds
		joinedViewBoxIds := o.bindParamViewBoxIds(reg)

		// query array param viewBoxIds
		if err := r.SetQueryParam("viewBoxIds", joinedViewBoxIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchObjects binds the parameter environments
func (o *SearchObjectsParams) bindParamEnvironments(formats strfmt.Registry) []string {
	environmentsIR := o.Environments

	var environmentsIC []string
	for _, environmentsIIR := range environmentsIR { // explode []string

		environmentsIIV := environmentsIIR // string as string
		environmentsIC = append(environmentsIC, environmentsIIV)
	}

	// items.CollectionFormat: ""
	environmentsIS := swag.JoinByFormat(environmentsIC, "")

	return environmentsIS
}

// bindParamSearchObjects binds the parameter jobIds
func (o *SearchObjectsParams) bindParamJobIds(formats strfmt.Registry) []string {
	jobIdsIR := o.JobIds

	var jobIdsIC []string
	for _, jobIdsIIR := range jobIdsIR { // explode []int64

		jobIdsIIV := swag.FormatInt64(jobIdsIIR) // int64 as string
		jobIdsIC = append(jobIdsIC, jobIdsIIV)
	}

	// items.CollectionFormat: ""
	jobIdsIS := swag.JoinByFormat(jobIdsIC, "")

	return jobIdsIS
}

// bindParamSearchObjects binds the parameter office365SourceTypes
func (o *SearchObjectsParams) bindParamOffice365SourceTypes(formats strfmt.Registry) []string {
	office365SourceTypesIR := o.Office365SourceTypes

	var office365SourceTypesIC []string
	for _, office365SourceTypesIIR := range office365SourceTypesIR { // explode []string

		office365SourceTypesIIV := office365SourceTypesIIR // string as string
		office365SourceTypesIC = append(office365SourceTypesIC, office365SourceTypesIIV)
	}

	// items.CollectionFormat: ""
	office365SourceTypesIS := swag.JoinByFormat(office365SourceTypesIC, "")

	return office365SourceTypesIS
}

// bindParamSearchObjects binds the parameter operatingSystems
func (o *SearchObjectsParams) bindParamOperatingSystems(formats strfmt.Registry) []string {
	operatingSystemsIR := o.OperatingSystems

	var operatingSystemsIC []string
	for _, operatingSystemsIIR := range operatingSystemsIR { // explode []string

		operatingSystemsIIV := operatingSystemsIIR // string as string
		operatingSystemsIC = append(operatingSystemsIC, operatingSystemsIIV)
	}

	// items.CollectionFormat: ""
	operatingSystemsIS := swag.JoinByFormat(operatingSystemsIC, "")

	return operatingSystemsIS
}

// bindParamSearchObjects binds the parameter registeredSourceIds
func (o *SearchObjectsParams) bindParamRegisteredSourceIds(formats strfmt.Registry) []string {
	registeredSourceIdsIR := o.RegisteredSourceIds

	var registeredSourceIdsIC []string
	for _, registeredSourceIdsIIR := range registeredSourceIdsIR { // explode []int64

		registeredSourceIdsIIV := swag.FormatInt64(registeredSourceIdsIIR) // int64 as string
		registeredSourceIdsIC = append(registeredSourceIdsIC, registeredSourceIdsIIV)
	}

	// items.CollectionFormat: ""
	registeredSourceIdsIS := swag.JoinByFormat(registeredSourceIdsIC, "")

	return registeredSourceIdsIS
}

// bindParamSearchObjects binds the parameter viewBoxIds
func (o *SearchObjectsParams) bindParamViewBoxIds(formats strfmt.Registry) []string {
	viewBoxIdsIR := o.ViewBoxIds

	var viewBoxIdsIC []string
	for _, viewBoxIdsIIR := range viewBoxIdsIR { // explode []int64

		viewBoxIdsIIV := swag.FormatInt64(viewBoxIdsIIR) // int64 as string
		viewBoxIdsIC = append(viewBoxIdsIC, viewBoxIdsIIV)
	}

	// items.CollectionFormat: ""
	viewBoxIdsIS := swag.JoinByFormat(viewBoxIdsIC, "")

	return viewBoxIdsIS
}
