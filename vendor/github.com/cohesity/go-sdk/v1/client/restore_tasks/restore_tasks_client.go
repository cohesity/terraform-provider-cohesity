// Code generated by go-swagger; DO NOT EDIT.

package restore_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new restore tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new restore tasks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new restore tasks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for restore tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AdObjectsRestoreStatus(params *AdObjectsRestoreStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdObjectsRestoreStatusOK, error)

	CancelRestoreTask(params *CancelRestoreTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelRestoreTaskOK, error)

	CompareAdObjects(params *CompareAdObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CompareAdObjectsOK, error)

	CreateApplicationsCloneTask(params *CreateApplicationsCloneTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateApplicationsCloneTaskCreated, error)

	CreateApplicationsRecoverTask(params *CreateApplicationsRecoverTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateApplicationsRecoverTaskCreated, error)

	CreateCloneTask(params *CreateCloneTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCloneTaskCreated, error)

	CreateDeployTask(params *CreateDeployTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeployTaskCreated, error)

	CreateDownloadFilesAndFolders(params *CreateDownloadFilesAndFoldersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDownloadFilesAndFoldersCreated, error)

	CreateRecoverTask(params *CreateRecoverTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRecoverTaskCreated, error)

	CreateRestoreFilesTask(params *CreateRestoreFilesTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRestoreFilesTaskCreated, error)

	GetAdDomainRootTopology(params *GetAdDomainRootTopologyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdDomainRootTopologyOK, error)

	GetAdObjects(params *GetAdObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdObjectsOK, error)

	GetFileFstatInformation(params *GetFileFstatInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileFstatInformationOK, error)

	GetFileSnapshotsInformation(params *GetFileSnapshotsInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileSnapshotsInformationOK, error)

	GetOneDriveDocuments(params *GetOneDriveDocumentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOneDriveDocumentsOK, error)

	GetOutlookEmails(params *GetOutlookEmailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutlookEmailsOK, error)

	GetRestoreJobByID(params *GetRestoreJobByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRestoreJobByIDOK, error)

	GetRestoreJobs(params *GetRestoreJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRestoreJobsOK, error)

	GetRestorePointsForTimeRange(params *GetRestorePointsForTimeRangeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRestorePointsForTimeRangeCreated, error)

	GetRestoreTaskByID(params *GetRestoreTaskByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRestoreTaskByIDOK, error)

	GetRestoreTasks(params *GetRestoreTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRestoreTasksOK, error)

	GetSharepointDocuments(params *GetSharepointDocumentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSharepointDocumentsOK, error)

	GetVirtualDiskInformation(params *GetVirtualDiskInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVirtualDiskInformationOK, error)

	GetVMDirectoryList(params *GetVMDirectoryListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMDirectoryListOK, error)

	GetVMVolumesInformation(params *GetVMVolumesInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMVolumesInformationOK, error)

	ListOrgVdcNetworks(params *ListOrgVdcNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrgVdcNetworksOK, error)

	ListStorageProfiles(params *ListStorageProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStorageProfilesOK, error)

	PublicDestroyCloneTask(params *PublicDestroyCloneTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PublicDestroyCloneTaskNoContent, error)

	SearchAdObjects(params *SearchAdObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAdObjectsOK, error)

	SearchObjects(params *SearchObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchObjectsOK, error)

	SearchProductionAdObjects(params *SearchProductionAdObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProductionAdObjectsOK, error)

	SearchRestoredFiles(params *SearchRestoredFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRestoredFilesOK, error)

	UpdateRestoreTask(params *UpdateRestoreTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRestoreTaskOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	AdObjectsRestoreStatus **Privileges:** ```RESTORE_VIEW``` <br><br>Returns the Restore status of the AD objects which were restored from the

snapshot AD to production AD as part of the restore task id specified in the
parameters.
*/
func (a *Client) AdObjectsRestoreStatus(params *AdObjectsRestoreStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdObjectsRestoreStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdObjectsRestoreStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AdObjectsRestoreStatus",
		Method:             "GET",
		PathPattern:        "/public/restore/adObjects/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdObjectsRestoreStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdObjectsRestoreStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdObjectsRestoreStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CancelRestoreTask cancels a recover or clone task with specified id

**Privileges:** ```RESTORE_MODIFY, CLONE_MODIFY``` <br><br>
*/
func (a *Client) CancelRestoreTask(params *CancelRestoreTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelRestoreTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelRestoreTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelRestoreTask",
		Method:             "PUT",
		PathPattern:        "/public/restore/tasks/cancel/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelRestoreTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelRestoreTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelRestoreTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CompareAdObjects compares the a d object from both snapshot and production a d and returns the attributes with status whether they differ or not

	**Privileges:** ```RESTORE_VIEW``` <br><br>Returns the list of AD Objects after comparing attributes of AD Object from

both Snapshot and Production AD.
*/
func (a *Client) CompareAdObjects(params *CompareAdObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CompareAdObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompareAdObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CompareAdObjects",
		Method:             "POST",
		PathPattern:        "/public/restore/adObjectAttributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CompareAdObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompareAdObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CompareAdObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateApplicationsCloneTask creates a restore task for cloning applications like SQL databases

**Privileges:** ```CLONE_MODIFY``` <br><br>Returns the created Restore Task.
*/
func (a *Client) CreateApplicationsCloneTask(params *CreateApplicationsCloneTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateApplicationsCloneTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApplicationsCloneTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateApplicationsCloneTask",
		Method:             "POST",
		PathPattern:        "/public/restore/applicationsClone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateApplicationsCloneTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateApplicationsCloneTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateApplicationsCloneTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateApplicationsRecoverTask creates a restore task for recovering applications like SQL databases

**Privileges:** ```RESTORE_MODIFY``` <br><br>Returns the created Restore Task.
*/
func (a *Client) CreateApplicationsRecoverTask(params *CreateApplicationsRecoverTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateApplicationsRecoverTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApplicationsRecoverTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateApplicationsRecoverTask",
		Method:             "POST",
		PathPattern:        "/public/restore/applicationsRecover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateApplicationsRecoverTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateApplicationsRecoverTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateApplicationsRecoverTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateCloneTask creates a restore task for cloning v ms or a view

**Privileges:** ```CLONE_MODIFY``` <br><br>Returns the created Restore Task that clones VMs or a View.
*/
func (a *Client) CreateCloneTask(params *CreateCloneTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCloneTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloneTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCloneTask",
		Method:             "POST",
		PathPattern:        "/public/restore/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloneTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCloneTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCloneTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CreateDeployTask creates a restore task for deploying v ms or a view on cloud

	**Privileges:** ```RESTORE_MODIFY``` <br><br>Returns the created Restore Task that deploys VMs on cloud. This operation

returns the target where cloud is deployed. Currently, VMs can be deployed
in either AWS target or Azure target.
*/
func (a *Client) CreateDeployTask(params *CreateDeployTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeployTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeployTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDeployTask",
		Method:             "POST",
		PathPattern:        "/public/restore/deploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDeployTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeployTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDeployTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDownloadFilesAndFolders creates a download task for downloading files and folders

**Privileges:** ```RESTORE_DOWNLOAD``` <br><br>Returns the created download Task information that downloads files and folders.
*/
func (a *Client) CreateDownloadFilesAndFolders(params *CreateDownloadFilesAndFoldersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDownloadFilesAndFoldersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDownloadFilesAndFoldersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDownloadFilesAndFolders",
		Method:             "POST",
		PathPattern:        "/public/restore/downloadFilesAndFolders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDownloadFilesAndFoldersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDownloadFilesAndFoldersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDownloadFilesAndFoldersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CreateRecoverTask creates a restore task for recovering v ms or instantly mounting volumes

	**Privileges:** ```RESTORE_MODIFY``` <br><br>Returns the created Restore Task. This operation returns the following

types of Restore Tasks: 1) A Restore Task that recovers VMs back to the
original location or a new location. 2) A Restore Task that mounts the
volumes of a Server (such as a VM or Physical Server) onto the specified
target system. The Snapshots of the Server that contains the volumes
that are mounted is determined by Array of Objects.
The content of the Server is available from the mount point
for the Granular Level Recovery (GLR) of application data. For example
recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.

NOTE: Volumes are mounted "instantly" if the Snapshot is stored locally on the
Cohesity Cluster. If the Snapshot is archival target, it will take longer
because it must be retrieved.
*/
func (a *Client) CreateRecoverTask(params *CreateRecoverTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRecoverTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRecoverTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRecoverTask",
		Method:             "POST",
		PathPattern:        "/public/restore/recover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRecoverTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRecoverTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRecoverTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateRestoreFilesTask creates a restore task for recovering files and folders

**Privileges:** ```RESTORE_MODIFY``` <br><br>Returns the created Restore Task that recovers files and folders.
*/
func (a *Client) CreateRestoreFilesTask(params *CreateRestoreFilesTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRestoreFilesTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRestoreFilesTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRestoreFilesTask",
		Method:             "POST",
		PathPattern:        "/public/restore/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRestoreFilesTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRestoreFilesTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRestoreFilesTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAdDomainRootTopology gets root topology for an a d domain

**Privileges:** ```RESTORE_VIEW``` <br><br>Returns the root topology for an AD domain.
*/
func (a *Client) GetAdDomainRootTopology(params *GetAdDomainRootTopologyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdDomainRootTopologyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdDomainRootTopologyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAdDomainRootTopology",
		Method:             "GET",
		PathPattern:        "/public/restore/adDomainRootTopology",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdDomainRootTopologyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdDomainRootTopologyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAdDomainRootTopologyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetAdObjects **Privileges:** ```RESTORE_VIEW``` <br><br>Search for AD objects to recover that match the specified search and filter criterias

provided in the request.
*/
func (a *Client) GetAdObjects(params *GetAdObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAdObjects",
		Method:             "GET",
		PathPattern:        "/public/restore/adObjects/searchResults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAdObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFileFstatInformation gets the fstat information about file provided using query parameters

**Privileges:** ```RESTORE_VIEW``` <br><br>
*/
func (a *Client) GetFileFstatInformation(params *GetFileFstatInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileFstatInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileFstatInformationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFileFstatInformation",
		Method:             "GET",
		PathPattern:        "/public/restore/files/fstats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileFstatInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileFstatInformationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFileFstatInformationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFileSnapshotsInformation gets the information about snapshots that contain the specified file or folder in addition information about the file or folder is provided

**Privileges:** ```RESTORE_VIEW``` <br><br>
*/
func (a *Client) GetFileSnapshotsInformation(params *GetFileSnapshotsInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileSnapshotsInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileSnapshotsInformationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFileSnapshotsInformation",
		Method:             "GET",
		PathPattern:        "/public/restore/files/snapshotsInformation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileSnapshotsInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileSnapshotsInformationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFileSnapshotsInformationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetOneDriveDocuments returns the one drive files and folders

	**Privileges:** ```RESTORE_VIEW``` <br><br>Search for OneDrive files and folder to recover that match the specified

search and filter criterias on the Cohesity cluster.
*/
func (a *Client) GetOneDriveDocuments(params *GetOneDriveDocumentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOneDriveDocumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOneDriveDocumentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOneDriveDocuments",
		Method:             "GET",
		PathPattern:        "/public/restore/office365/onedrive/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOneDriveDocumentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOneDriveDocumentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOneDriveDocumentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetOutlookEmails returns the outlook emails and folders containing emails

	**Privileges:** ```RESTORE_VIEW``` <br><br>Search for Emails and Emails' folders to recover that match the specified

search and filter criterias on the Cohesity cluster.
*/
func (a *Client) GetOutlookEmails(params *GetOutlookEmailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutlookEmailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutlookEmailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOutlookEmails",
		Method:             "GET",
		PathPattern:        "/public/restore/office365/outlook/emails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOutlookEmailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOutlookEmailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOutlookEmailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRestoreJobByID lists details about a single restore job

**Privileges:** ```RESTORE_VIEW``` <br><br>Returns the restore job object corresponding to the specified id.
*/
func (a *Client) GetRestoreJobByID(params *GetRestoreJobByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRestoreJobByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRestoreJobByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRestoreJobById",
		Method:             "GET",
		PathPattern:        "/restoretasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRestoreJobByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRestoreJobByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRestoreJobByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetRestoreJobs lists restore jobs filtered by the specified parameters

	**Privileges:** ```RESTORE_VIEW``` <br><br>If no parameters are specified, all Restore Jobs currently

on the Cohesity Cluster are returned.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetRestoreJobs(params *GetRestoreJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRestoreJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRestoreJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRestoreJobs",
		Method:             "GET",
		PathPattern:        "/restoretasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRestoreJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRestoreJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRestoreJobsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRestorePointsForTimeRange lists restore points in a give time range

**Privileges:** ```RESTORE_VIEW``` <br><br>Returns the snapshots in the time range specified.
*/
func (a *Client) GetRestorePointsForTimeRange(params *GetRestorePointsForTimeRangeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRestorePointsForTimeRangeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRestorePointsForTimeRangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRestorePointsForTimeRange",
		Method:             "POST",
		PathPattern:        "/public/restore/pointsForTimeRange",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRestorePointsForTimeRangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRestorePointsForTimeRangeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRestorePointsForTimeRangeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRestoreTaskByID lists details about a single restore task

**Privileges:** ```RESTORE_VIEW``` <br><br>Returns the Restore Task corresponding to the specified Restore Task id.
*/
func (a *Client) GetRestoreTaskByID(params *GetRestoreTaskByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRestoreTaskByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRestoreTaskByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRestoreTaskById",
		Method:             "GET",
		PathPattern:        "/public/restore/tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRestoreTaskByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRestoreTaskByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRestoreTaskByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetRestoreTasks lists the restore tasks filtered by the specified parameters

	**Privileges:** ```RESTORE_VIEW``` <br><br>If no parameters are specified, all Restore Tasks found

on the Cohesity Cluster are returned. Both running and completed
Restore Tasks are reported.
Specifying parameters filters the results that are returned.
*/
func (a *Client) GetRestoreTasks(params *GetRestoreTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRestoreTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRestoreTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRestoreTasks",
		Method:             "GET",
		PathPattern:        "/public/restore/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRestoreTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRestoreTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRestoreTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetSharepointDocuments returns the sharepoint site s files and folders

	**Privileges:** ```RESTORE_VIEW``` <br><br>Search for Sharepoint files and folder to recover that match the specified

search and filter criterias on the Cohesity cluster.
*/
func (a *Client) GetSharepointDocuments(params *GetSharepointDocumentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSharepointDocumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSharepointDocumentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSharepointDocuments",
		Method:             "GET",
		PathPattern:        "/public/restore/office365/sharepoint/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSharepointDocumentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSharepointDocumentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSharepointDocumentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVirtualDiskInformation fetches information of virtual disk

**Privileges:** ```RESTORE_VIEW``` <br><br>
*/
func (a *Client) GetVirtualDiskInformation(params *GetVirtualDiskInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVirtualDiskInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualDiskInformationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVirtualDiskInformation",
		Method:             "GET",
		PathPattern:        "/public/restore/virtualDiskInformation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVirtualDiskInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualDiskInformationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVirtualDiskInformationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVMDirectoryList gets the directory list based on the given directory name and other query parameters

**Privileges:** ```RESTORE_VIEW``` <br><br>
*/
func (a *Client) GetVMDirectoryList(params *GetVMDirectoryListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMDirectoryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMDirectoryListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmDirectoryList",
		Method:             "GET",
		PathPattern:        "/public/restore/vms/directoryList",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVMDirectoryListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMDirectoryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVMDirectoryListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetVMVolumesInformation gets information about the logical volumes found in a VM

	**Privileges:** ```RESTORE_VIEW``` <br><br>All required fields must be specified for this operation.

To get values for these fields, invoke the GET /public/restore/objects
operation.
A specific Job Run is defined by the jobRunId, startedTimeUsecs, and
attemptNumber fields.
*/
func (a *Client) GetVMVolumesInformation(params *GetVMVolumesInformationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMVolumesInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMVolumesInformationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmVolumesInformation",
		Method:             "GET",
		PathPattern:        "/public/restore/vms/volumesInformation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVMVolumesInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMVolumesInformationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVMVolumesInformationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListOrgVdcNetworks returns the org v d c network under a v d c in a v mware environment

**Privileges:** ```RESTORE_VIEW``` <br><br>
*/
func (a *Client) ListOrgVdcNetworks(params *ListOrgVdcNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrgVdcNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrgVdcNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListOrgVdcNetworks",
		Method:             "GET",
		PathPattern:        "/public/virtualDatacenters/{id}/orgVdcNetworks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListOrgVdcNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOrgVdcNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListOrgVdcNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListStorageProfiles fetches information of virtual disk

**Privileges:** ```RESTORE_VIEW``` <br><br>
*/
func (a *Client) ListStorageProfiles(params *ListStorageProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStorageProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStorageProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListStorageProfiles",
		Method:             "GET",
		PathPattern:        "/public/virtualDatacenters/{id}/storageProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStorageProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStorageProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListStorageProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PublicDestroyCloneTask destroys a clone task with specified id

**Privileges:** ```CLONE_MODIFY``` <br><br>
*/
func (a *Client) PublicDestroyCloneTask(params *PublicDestroyCloneTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PublicDestroyCloneTaskNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicDestroyCloneTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PublicDestroyCloneTask",
		Method:             "DELETE",
		PathPattern:        "/public/restore/clone/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicDestroyCloneTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublicDestroyCloneTaskNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PublicDestroyCloneTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	SearchAdObjects searches for a d objects in both production and snapshot a d from given search base dn and offset

	**Privileges:** ```RESTORE_VIEW``` <br><br>Returns the list of AD Objects along with status whether they are missing in

Production AD, equal or not equal.
*/
func (a *Client) SearchAdObjects(params *SearchAdObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAdObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAdObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAdObjects",
		Method:             "GET",
		PathPattern:        "/public/restore/adObjects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAdObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAdObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchAdObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	SearchObjects finds backup objects that match the specified search and filter criteria on the cohesity cluster

	**Privileges:** ```RESTORE_VIEW``` <br><br>If no search pattern or filter parameters are specified, all backup objects

currently found on the Cohesity Cluster are returned.
Only leaf objects that have been protected by a Job are returned such as VMs,
Views and databases.
Specify a search pattern or parameters to filter the results that
are returned.

The term "items" below refers to leaf backup objects such as VMs,
Views and databases.
*/
func (a *Client) SearchObjects(params *SearchObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchObjects",
		Method:             "GET",
		PathPattern:        "/public/restore/objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	SearchProductionAdObjects searches for a d objects that match the list of object guids sam account names and distinguished names provided in the request

	**Privileges:** ```RESTORE_VIEW``` <br><br>Returns the list of AD Objects that match the list of object guids,

sam account names and distinguished names provided in the request.
*/
func (a *Client) SearchProductionAdObjects(params *SearchProductionAdObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProductionAdObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProductionAdObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchProductionAdObjects",
		Method:             "POST",
		PathPattern:        "/public/restore/adObjects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchProductionAdObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchProductionAdObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchProductionAdObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	SearchRestoredFiles searches for files and folders to recover that match the specified search and filter criteria on the cohesity cluster

	**Privileges:** ```RESTORE_VIEW``` <br><br>Use the files and folders returned by this operation to populate the

list of files and folders to recover in the
POST /public/restore/files operation.
If no search pattern or filter parameters are specified, all files
and folders currently found on the Cohesity Cluster are returned.
Specify a search pattern or parameters to filter the results that
are returned.

The term "items" below refers to files and folders that are found
in the source objects (such as VMs).
*/
func (a *Client) SearchRestoredFiles(params *SearchRestoredFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRestoredFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRestoredFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchRestoredFiles",
		Method:             "GET",
		PathPattern:        "/public/restore/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchRestoredFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRestoredFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchRestoredFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateRestoreTask **Privileges:** ```RESTORE_MODIFY``` <br><br>Updates an existing restore task with additional params which are needed for

features like Hot-Standby.
*/
func (a *Client) UpdateRestoreTask(params *UpdateRestoreTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRestoreTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRestoreTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRestoreTask",
		Method:             "PUT",
		PathPattern:        "/public/restore/recover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRestoreTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRestoreTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateRestoreTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
