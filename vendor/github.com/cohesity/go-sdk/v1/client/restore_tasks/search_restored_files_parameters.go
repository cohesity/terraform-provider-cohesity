// Code generated by go-swagger; DO NOT EDIT.

package restore_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchRestoredFilesParams creates a new SearchRestoredFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchRestoredFilesParams() *SearchRestoredFilesParams {
	return &SearchRestoredFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchRestoredFilesParamsWithTimeout creates a new SearchRestoredFilesParams object
// with the ability to set a timeout on a request.
func NewSearchRestoredFilesParamsWithTimeout(timeout time.Duration) *SearchRestoredFilesParams {
	return &SearchRestoredFilesParams{
		timeout: timeout,
	}
}

// NewSearchRestoredFilesParamsWithContext creates a new SearchRestoredFilesParams object
// with the ability to set a context for a request.
func NewSearchRestoredFilesParamsWithContext(ctx context.Context) *SearchRestoredFilesParams {
	return &SearchRestoredFilesParams{
		Context: ctx,
	}
}

// NewSearchRestoredFilesParamsWithHTTPClient creates a new SearchRestoredFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchRestoredFilesParamsWithHTTPClient(client *http.Client) *SearchRestoredFilesParams {
	return &SearchRestoredFilesParams{
		HTTPClient: client,
	}
}

/*
SearchRestoredFilesParams contains all the parameters to send to the API endpoint

	for the search restored files operation.

	Typically these are written to a http.Request.
*/
type SearchRestoredFilesParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if logs of all the tenants under the hierarchy
	of tenant with id TenantId should be returned.
	*/
	AllUnderHierarchy *bool

	/* Environments.

	     Filter by environment types such as 'kVMware', 'kView', etc.
	Only items from the specified environment types are returned.
	NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	*/
	Environments []string

	/* FolderOnly.

	     Filter by folders or files. If true, only folders are returned.
	If false, only files are returned. If not specified, both
	files and folders are returned.
	*/
	FolderOnly *bool

	/* JobIds.

	     Filter by a list of Protection Job ids.
	Only items backed up by the specified Jobs are listed.
	*/
	JobIds []int64

	/* MightHaveSnapshotTags.

	     Specifies list of snapshot tags, one of which might be present in the
	document. These are OR'ed together and the resulting criteria AND'ed
	with the rest of the query.
	*/
	MightHaveSnapshotTags []string

	/* MightHaveTags.

	     Specifies list of tags, one of which might be present in the document.
	These are OR'ed together and the resulting criteria AND'ed with the
	rest of the query.
	*/
	MightHaveTags []string

	/* MustHaveSnapshotTags.

	   Specifies snapshot tags which must be all present in the document.
	*/
	MustHaveSnapshotTags []string

	/* MustHaveTags.

	   Specifies tags which must be all present in the document.
	*/
	MustHaveTags []string

	/* PageCount.

	     Limit the number of items to return in the response for pagination
	purposes.

	     Format: int64
	*/
	PageCount *int64

	/* PageSize.

	     Specifies pagesize for pagination. Only valid for librarian queries.
	Effective only when Paginate is set to true.

	     Format: int32
	*/
	PageSize *int32

	/* Paginate.

	     Specifies bool to control pagination of search results. Only valid
	for librarian queries. If this is set to true and a pagination cookie
	is provided, search will be resumed.
	*/
	Paginate *bool

	/* PaginationCookie.

	     Specifies cookie for resuming search if pagination is being used. Only
	valid for librarian queries. Effective only when Paginate is set to true.
	*/
	PaginationCookie *string

	/* RegisteredSourceIds.

	     Filter by a list of Registered Sources ids. Only items
	from the listed Registered Sources are returned.
	*/
	RegisteredSourceIds []int64

	/* Search.

	     Filter by searching for sub-strings in the item name. The specified
	string can match any part of the item name.
	For example: "vm" or "123" both match the item name of "vm-123".
	*/
	Search *string

	/* SourceIds.

	     Filter by source ids. Only files and folders found in the listed sources
	(such as VMs) are returned.
	*/
	SourceIds []int64

	/* StartIndex.

	     Specifies an index number that can be used to return subsets of items
	in multiple requests.
	Break up the items to return into multiple requests
	by setting pageCount and using startIndex to return a subsets of items.
	For example, set startIndex to 0 to get the first set of items
	for the first request. Increment startIndex by pageCount
	to get the next set of items for a next request.
	Continue until all items are returned and therefore the total number of
	returned items is equal to totalCount.

	     Format: int64
	*/
	StartIndex *int64

	/* TenantID.

	   TenantId specifies the tenant whose action resulted in the audit log.
	*/
	TenantID *string

	/* ViewBoxIds.

	     Filter by a list of Domains (View Boxes) ids.
	Only items stored in the listed Domains (View Boxes) are returned.
	*/
	ViewBoxIds []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search restored files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchRestoredFilesParams) WithDefaults() *SearchRestoredFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search restored files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchRestoredFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search restored files params
func (o *SearchRestoredFilesParams) WithTimeout(timeout time.Duration) *SearchRestoredFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search restored files params
func (o *SearchRestoredFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search restored files params
func (o *SearchRestoredFilesParams) WithContext(ctx context.Context) *SearchRestoredFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search restored files params
func (o *SearchRestoredFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search restored files params
func (o *SearchRestoredFilesParams) WithHTTPClient(client *http.Client) *SearchRestoredFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search restored files params
func (o *SearchRestoredFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the search restored files params
func (o *SearchRestoredFilesParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *SearchRestoredFilesParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the search restored files params
func (o *SearchRestoredFilesParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithEnvironments adds the environments to the search restored files params
func (o *SearchRestoredFilesParams) WithEnvironments(environments []string) *SearchRestoredFilesParams {
	o.SetEnvironments(environments)
	return o
}

// SetEnvironments adds the environments to the search restored files params
func (o *SearchRestoredFilesParams) SetEnvironments(environments []string) {
	o.Environments = environments
}

// WithFolderOnly adds the folderOnly to the search restored files params
func (o *SearchRestoredFilesParams) WithFolderOnly(folderOnly *bool) *SearchRestoredFilesParams {
	o.SetFolderOnly(folderOnly)
	return o
}

// SetFolderOnly adds the folderOnly to the search restored files params
func (o *SearchRestoredFilesParams) SetFolderOnly(folderOnly *bool) {
	o.FolderOnly = folderOnly
}

// WithJobIds adds the jobIds to the search restored files params
func (o *SearchRestoredFilesParams) WithJobIds(jobIds []int64) *SearchRestoredFilesParams {
	o.SetJobIds(jobIds)
	return o
}

// SetJobIds adds the jobIds to the search restored files params
func (o *SearchRestoredFilesParams) SetJobIds(jobIds []int64) {
	o.JobIds = jobIds
}

// WithMightHaveSnapshotTags adds the mightHaveSnapshotTags to the search restored files params
func (o *SearchRestoredFilesParams) WithMightHaveSnapshotTags(mightHaveSnapshotTags []string) *SearchRestoredFilesParams {
	o.SetMightHaveSnapshotTags(mightHaveSnapshotTags)
	return o
}

// SetMightHaveSnapshotTags adds the mightHaveSnapshotTags to the search restored files params
func (o *SearchRestoredFilesParams) SetMightHaveSnapshotTags(mightHaveSnapshotTags []string) {
	o.MightHaveSnapshotTags = mightHaveSnapshotTags
}

// WithMightHaveTags adds the mightHaveTags to the search restored files params
func (o *SearchRestoredFilesParams) WithMightHaveTags(mightHaveTags []string) *SearchRestoredFilesParams {
	o.SetMightHaveTags(mightHaveTags)
	return o
}

// SetMightHaveTags adds the mightHaveTags to the search restored files params
func (o *SearchRestoredFilesParams) SetMightHaveTags(mightHaveTags []string) {
	o.MightHaveTags = mightHaveTags
}

// WithMustHaveSnapshotTags adds the mustHaveSnapshotTags to the search restored files params
func (o *SearchRestoredFilesParams) WithMustHaveSnapshotTags(mustHaveSnapshotTags []string) *SearchRestoredFilesParams {
	o.SetMustHaveSnapshotTags(mustHaveSnapshotTags)
	return o
}

// SetMustHaveSnapshotTags adds the mustHaveSnapshotTags to the search restored files params
func (o *SearchRestoredFilesParams) SetMustHaveSnapshotTags(mustHaveSnapshotTags []string) {
	o.MustHaveSnapshotTags = mustHaveSnapshotTags
}

// WithMustHaveTags adds the mustHaveTags to the search restored files params
func (o *SearchRestoredFilesParams) WithMustHaveTags(mustHaveTags []string) *SearchRestoredFilesParams {
	o.SetMustHaveTags(mustHaveTags)
	return o
}

// SetMustHaveTags adds the mustHaveTags to the search restored files params
func (o *SearchRestoredFilesParams) SetMustHaveTags(mustHaveTags []string) {
	o.MustHaveTags = mustHaveTags
}

// WithPageCount adds the pageCount to the search restored files params
func (o *SearchRestoredFilesParams) WithPageCount(pageCount *int64) *SearchRestoredFilesParams {
	o.SetPageCount(pageCount)
	return o
}

// SetPageCount adds the pageCount to the search restored files params
func (o *SearchRestoredFilesParams) SetPageCount(pageCount *int64) {
	o.PageCount = pageCount
}

// WithPageSize adds the pageSize to the search restored files params
func (o *SearchRestoredFilesParams) WithPageSize(pageSize *int32) *SearchRestoredFilesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the search restored files params
func (o *SearchRestoredFilesParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPaginate adds the paginate to the search restored files params
func (o *SearchRestoredFilesParams) WithPaginate(paginate *bool) *SearchRestoredFilesParams {
	o.SetPaginate(paginate)
	return o
}

// SetPaginate adds the paginate to the search restored files params
func (o *SearchRestoredFilesParams) SetPaginate(paginate *bool) {
	o.Paginate = paginate
}

// WithPaginationCookie adds the paginationCookie to the search restored files params
func (o *SearchRestoredFilesParams) WithPaginationCookie(paginationCookie *string) *SearchRestoredFilesParams {
	o.SetPaginationCookie(paginationCookie)
	return o
}

// SetPaginationCookie adds the paginationCookie to the search restored files params
func (o *SearchRestoredFilesParams) SetPaginationCookie(paginationCookie *string) {
	o.PaginationCookie = paginationCookie
}

// WithRegisteredSourceIds adds the registeredSourceIds to the search restored files params
func (o *SearchRestoredFilesParams) WithRegisteredSourceIds(registeredSourceIds []int64) *SearchRestoredFilesParams {
	o.SetRegisteredSourceIds(registeredSourceIds)
	return o
}

// SetRegisteredSourceIds adds the registeredSourceIds to the search restored files params
func (o *SearchRestoredFilesParams) SetRegisteredSourceIds(registeredSourceIds []int64) {
	o.RegisteredSourceIds = registeredSourceIds
}

// WithSearch adds the search to the search restored files params
func (o *SearchRestoredFilesParams) WithSearch(search *string) *SearchRestoredFilesParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the search restored files params
func (o *SearchRestoredFilesParams) SetSearch(search *string) {
	o.Search = search
}

// WithSourceIds adds the sourceIds to the search restored files params
func (o *SearchRestoredFilesParams) WithSourceIds(sourceIds []int64) *SearchRestoredFilesParams {
	o.SetSourceIds(sourceIds)
	return o
}

// SetSourceIds adds the sourceIds to the search restored files params
func (o *SearchRestoredFilesParams) SetSourceIds(sourceIds []int64) {
	o.SourceIds = sourceIds
}

// WithStartIndex adds the startIndex to the search restored files params
func (o *SearchRestoredFilesParams) WithStartIndex(startIndex *int64) *SearchRestoredFilesParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the search restored files params
func (o *SearchRestoredFilesParams) SetStartIndex(startIndex *int64) {
	o.StartIndex = startIndex
}

// WithTenantID adds the tenantID to the search restored files params
func (o *SearchRestoredFilesParams) WithTenantID(tenantID *string) *SearchRestoredFilesParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the search restored files params
func (o *SearchRestoredFilesParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WithViewBoxIds adds the viewBoxIds to the search restored files params
func (o *SearchRestoredFilesParams) WithViewBoxIds(viewBoxIds []int64) *SearchRestoredFilesParams {
	o.SetViewBoxIds(viewBoxIds)
	return o
}

// SetViewBoxIds adds the viewBoxIds to the search restored files params
func (o *SearchRestoredFilesParams) SetViewBoxIds(viewBoxIds []int64) {
	o.ViewBoxIds = viewBoxIds
}

// WriteToRequest writes these params to a swagger request
func (o *SearchRestoredFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.Environments != nil {

		// binding items for environments
		joinedEnvironments := o.bindParamEnvironments(reg)

		// query array param environments
		if err := r.SetQueryParam("environments", joinedEnvironments...); err != nil {
			return err
		}
	}

	if o.FolderOnly != nil {

		// query param folderOnly
		var qrFolderOnly bool

		if o.FolderOnly != nil {
			qrFolderOnly = *o.FolderOnly
		}
		qFolderOnly := swag.FormatBool(qrFolderOnly)
		if qFolderOnly != "" {

			if err := r.SetQueryParam("folderOnly", qFolderOnly); err != nil {
				return err
			}
		}
	}

	if o.JobIds != nil {

		// binding items for jobIds
		joinedJobIds := o.bindParamJobIds(reg)

		// query array param jobIds
		if err := r.SetQueryParam("jobIds", joinedJobIds...); err != nil {
			return err
		}
	}

	if o.MightHaveSnapshotTags != nil {

		// binding items for mightHaveSnapshotTags
		joinedMightHaveSnapshotTags := o.bindParamMightHaveSnapshotTags(reg)

		// query array param mightHaveSnapshotTags
		if err := r.SetQueryParam("mightHaveSnapshotTags", joinedMightHaveSnapshotTags...); err != nil {
			return err
		}
	}

	if o.MightHaveTags != nil {

		// binding items for mightHaveTags
		joinedMightHaveTags := o.bindParamMightHaveTags(reg)

		// query array param mightHaveTags
		if err := r.SetQueryParam("mightHaveTags", joinedMightHaveTags...); err != nil {
			return err
		}
	}

	if o.MustHaveSnapshotTags != nil {

		// binding items for mustHaveSnapshotTags
		joinedMustHaveSnapshotTags := o.bindParamMustHaveSnapshotTags(reg)

		// query array param mustHaveSnapshotTags
		if err := r.SetQueryParam("mustHaveSnapshotTags", joinedMustHaveSnapshotTags...); err != nil {
			return err
		}
	}

	if o.MustHaveTags != nil {

		// binding items for mustHaveTags
		joinedMustHaveTags := o.bindParamMustHaveTags(reg)

		// query array param mustHaveTags
		if err := r.SetQueryParam("mustHaveTags", joinedMustHaveTags...); err != nil {
			return err
		}
	}

	if o.PageCount != nil {

		// query param pageCount
		var qrPageCount int64

		if o.PageCount != nil {
			qrPageCount = *o.PageCount
		}
		qPageCount := swag.FormatInt64(qrPageCount)
		if qPageCount != "" {

			if err := r.SetQueryParam("pageCount", qPageCount); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Paginate != nil {

		// query param paginate
		var qrPaginate bool

		if o.Paginate != nil {
			qrPaginate = *o.Paginate
		}
		qPaginate := swag.FormatBool(qrPaginate)
		if qPaginate != "" {

			if err := r.SetQueryParam("paginate", qPaginate); err != nil {
				return err
			}
		}
	}

	if o.PaginationCookie != nil {

		// query param paginationCookie
		var qrPaginationCookie string

		if o.PaginationCookie != nil {
			qrPaginationCookie = *o.PaginationCookie
		}
		qPaginationCookie := qrPaginationCookie
		if qPaginationCookie != "" {

			if err := r.SetQueryParam("paginationCookie", qPaginationCookie); err != nil {
				return err
			}
		}
	}

	if o.RegisteredSourceIds != nil {

		// binding items for registeredSourceIds
		joinedRegisteredSourceIds := o.bindParamRegisteredSourceIds(reg)

		// query array param registeredSourceIds
		if err := r.SetQueryParam("registeredSourceIds", joinedRegisteredSourceIds...); err != nil {
			return err
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.SourceIds != nil {

		// binding items for sourceIds
		joinedSourceIds := o.bindParamSourceIds(reg)

		// query array param sourceIds
		if err := r.SetQueryParam("sourceIds", joinedSourceIds...); err != nil {
			return err
		}
	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int64

		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt64(qrStartIndex)
		if qStartIndex != "" {

			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}
	}

	if o.TenantID != nil {

		// query param tenantId
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenantId", qTenantID); err != nil {
				return err
			}
		}
	}

	if o.ViewBoxIds != nil {

		// binding items for viewBoxIds
		joinedViewBoxIds := o.bindParamViewBoxIds(reg)

		// query array param viewBoxIds
		if err := r.SetQueryParam("viewBoxIds", joinedViewBoxIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchRestoredFiles binds the parameter environments
func (o *SearchRestoredFilesParams) bindParamEnvironments(formats strfmt.Registry) []string {
	environmentsIR := o.Environments

	var environmentsIC []string
	for _, environmentsIIR := range environmentsIR { // explode []string

		environmentsIIV := environmentsIIR // string as string
		environmentsIC = append(environmentsIC, environmentsIIV)
	}

	// items.CollectionFormat: ""
	environmentsIS := swag.JoinByFormat(environmentsIC, "")

	return environmentsIS
}

// bindParamSearchRestoredFiles binds the parameter jobIds
func (o *SearchRestoredFilesParams) bindParamJobIds(formats strfmt.Registry) []string {
	jobIdsIR := o.JobIds

	var jobIdsIC []string
	for _, jobIdsIIR := range jobIdsIR { // explode []int64

		jobIdsIIV := swag.FormatInt64(jobIdsIIR) // int64 as string
		jobIdsIC = append(jobIdsIC, jobIdsIIV)
	}

	// items.CollectionFormat: ""
	jobIdsIS := swag.JoinByFormat(jobIdsIC, "")

	return jobIdsIS
}

// bindParamSearchRestoredFiles binds the parameter mightHaveSnapshotTags
func (o *SearchRestoredFilesParams) bindParamMightHaveSnapshotTags(formats strfmt.Registry) []string {
	mightHaveSnapshotTagsIR := o.MightHaveSnapshotTags

	var mightHaveSnapshotTagsIC []string
	for _, mightHaveSnapshotTagsIIR := range mightHaveSnapshotTagsIR { // explode []string

		mightHaveSnapshotTagsIIV := mightHaveSnapshotTagsIIR // string as string
		mightHaveSnapshotTagsIC = append(mightHaveSnapshotTagsIC, mightHaveSnapshotTagsIIV)
	}

	// items.CollectionFormat: ""
	mightHaveSnapshotTagsIS := swag.JoinByFormat(mightHaveSnapshotTagsIC, "")

	return mightHaveSnapshotTagsIS
}

// bindParamSearchRestoredFiles binds the parameter mightHaveTags
func (o *SearchRestoredFilesParams) bindParamMightHaveTags(formats strfmt.Registry) []string {
	mightHaveTagsIR := o.MightHaveTags

	var mightHaveTagsIC []string
	for _, mightHaveTagsIIR := range mightHaveTagsIR { // explode []string

		mightHaveTagsIIV := mightHaveTagsIIR // string as string
		mightHaveTagsIC = append(mightHaveTagsIC, mightHaveTagsIIV)
	}

	// items.CollectionFormat: ""
	mightHaveTagsIS := swag.JoinByFormat(mightHaveTagsIC, "")

	return mightHaveTagsIS
}

// bindParamSearchRestoredFiles binds the parameter mustHaveSnapshotTags
func (o *SearchRestoredFilesParams) bindParamMustHaveSnapshotTags(formats strfmt.Registry) []string {
	mustHaveSnapshotTagsIR := o.MustHaveSnapshotTags

	var mustHaveSnapshotTagsIC []string
	for _, mustHaveSnapshotTagsIIR := range mustHaveSnapshotTagsIR { // explode []string

		mustHaveSnapshotTagsIIV := mustHaveSnapshotTagsIIR // string as string
		mustHaveSnapshotTagsIC = append(mustHaveSnapshotTagsIC, mustHaveSnapshotTagsIIV)
	}

	// items.CollectionFormat: ""
	mustHaveSnapshotTagsIS := swag.JoinByFormat(mustHaveSnapshotTagsIC, "")

	return mustHaveSnapshotTagsIS
}

// bindParamSearchRestoredFiles binds the parameter mustHaveTags
func (o *SearchRestoredFilesParams) bindParamMustHaveTags(formats strfmt.Registry) []string {
	mustHaveTagsIR := o.MustHaveTags

	var mustHaveTagsIC []string
	for _, mustHaveTagsIIR := range mustHaveTagsIR { // explode []string

		mustHaveTagsIIV := mustHaveTagsIIR // string as string
		mustHaveTagsIC = append(mustHaveTagsIC, mustHaveTagsIIV)
	}

	// items.CollectionFormat: ""
	mustHaveTagsIS := swag.JoinByFormat(mustHaveTagsIC, "")

	return mustHaveTagsIS
}

// bindParamSearchRestoredFiles binds the parameter registeredSourceIds
func (o *SearchRestoredFilesParams) bindParamRegisteredSourceIds(formats strfmt.Registry) []string {
	registeredSourceIdsIR := o.RegisteredSourceIds

	var registeredSourceIdsIC []string
	for _, registeredSourceIdsIIR := range registeredSourceIdsIR { // explode []int64

		registeredSourceIdsIIV := swag.FormatInt64(registeredSourceIdsIIR) // int64 as string
		registeredSourceIdsIC = append(registeredSourceIdsIC, registeredSourceIdsIIV)
	}

	// items.CollectionFormat: ""
	registeredSourceIdsIS := swag.JoinByFormat(registeredSourceIdsIC, "")

	return registeredSourceIdsIS
}

// bindParamSearchRestoredFiles binds the parameter sourceIds
func (o *SearchRestoredFilesParams) bindParamSourceIds(formats strfmt.Registry) []string {
	sourceIdsIR := o.SourceIds

	var sourceIdsIC []string
	for _, sourceIdsIIR := range sourceIdsIR { // explode []int64

		sourceIdsIIV := swag.FormatInt64(sourceIdsIIR) // int64 as string
		sourceIdsIC = append(sourceIdsIC, sourceIdsIIV)
	}

	// items.CollectionFormat: ""
	sourceIdsIS := swag.JoinByFormat(sourceIdsIC, "")

	return sourceIdsIS
}

// bindParamSearchRestoredFiles binds the parameter viewBoxIds
func (o *SearchRestoredFilesParams) bindParamViewBoxIds(formats strfmt.Registry) []string {
	viewBoxIdsIR := o.ViewBoxIds

	var viewBoxIdsIC []string
	for _, viewBoxIdsIIR := range viewBoxIdsIR { // explode []int64

		viewBoxIdsIIV := swag.FormatInt64(viewBoxIdsIIR) // int64 as string
		viewBoxIdsIC = append(viewBoxIdsIC, viewBoxIdsIIV)
	}

	// items.CollectionFormat: ""
	viewBoxIdsIS := swag.JoinByFormat(viewBoxIdsIC, "")

	return viewBoxIdsIS
}
