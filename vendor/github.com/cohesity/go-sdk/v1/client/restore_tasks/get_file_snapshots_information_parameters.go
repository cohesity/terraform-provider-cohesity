// Code generated by go-swagger; DO NOT EDIT.

package restore_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFileSnapshotsInformationParams creates a new GetFileSnapshotsInformationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFileSnapshotsInformationParams() *GetFileSnapshotsInformationParams {
	return &GetFileSnapshotsInformationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFileSnapshotsInformationParamsWithTimeout creates a new GetFileSnapshotsInformationParams object
// with the ability to set a timeout on a request.
func NewGetFileSnapshotsInformationParamsWithTimeout(timeout time.Duration) *GetFileSnapshotsInformationParams {
	return &GetFileSnapshotsInformationParams{
		timeout: timeout,
	}
}

// NewGetFileSnapshotsInformationParamsWithContext creates a new GetFileSnapshotsInformationParams object
// with the ability to set a context for a request.
func NewGetFileSnapshotsInformationParamsWithContext(ctx context.Context) *GetFileSnapshotsInformationParams {
	return &GetFileSnapshotsInformationParams{
		Context: ctx,
	}
}

// NewGetFileSnapshotsInformationParamsWithHTTPClient creates a new GetFileSnapshotsInformationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFileSnapshotsInformationParamsWithHTTPClient(client *http.Client) *GetFileSnapshotsInformationParams {
	return &GetFileSnapshotsInformationParams{
		HTTPClient: client,
	}
}

/*
GetFileSnapshotsInformationParams contains all the parameters to send to the API endpoint

	for the get file snapshots information operation.

	Typically these are written to a http.Request.
*/
type GetFileSnapshotsInformationParams struct {

	/* ClusterID.

	     Specifies the Cohesity Cluster id where the Job was created.
	This field is required.

	     Format: int64
	*/
	ClusterID int64

	/* ClusterIncarnationID.

	     Specifies the incarnation id of the Cohesity Cluster where the Job
	was created.
	An incarnation id is generated when a Cohesity Cluster is initially
	created. This field is required.

	     Format: int64
	*/
	ClusterIncarnationID int64

	/* Filename.

	     Specifies the name of the file or folder to find in the snapshots.
	This field is required.
	*/
	Filename string

	/* JobID.

	     Specifies the id of the Job that captured the snapshots.
	These snapshots are searched for the specified files or folders.
	This field is required.

	     Format: int64
	*/
	JobID int64

	/* SourceID.

	     Specifies the id of the Protection Source object (such as a VM) to search.
	When a Job Run executes, snapshots of the specified Protection Source
	object are captured. This operation searches the snapshots of the
	object for the file or folder. This field is required.

	     Format: int64
	*/
	SourceID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get file snapshots information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileSnapshotsInformationParams) WithDefaults() *GetFileSnapshotsInformationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get file snapshots information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileSnapshotsInformationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) WithTimeout(timeout time.Duration) *GetFileSnapshotsInformationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) WithContext(ctx context.Context) *GetFileSnapshotsInformationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) WithHTTPClient(client *http.Client) *GetFileSnapshotsInformationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) WithClusterID(clusterID int64) *GetFileSnapshotsInformationParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) SetClusterID(clusterID int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) WithClusterIncarnationID(clusterIncarnationID int64) *GetFileSnapshotsInformationParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) SetClusterIncarnationID(clusterIncarnationID int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithFilename adds the filename to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) WithFilename(filename string) *GetFileSnapshotsInformationParams {
	o.SetFilename(filename)
	return o
}

// SetFilename adds the filename to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) SetFilename(filename string) {
	o.Filename = filename
}

// WithJobID adds the jobID to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) WithJobID(jobID int64) *GetFileSnapshotsInformationParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) SetJobID(jobID int64) {
	o.JobID = jobID
}

// WithSourceID adds the sourceID to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) WithSourceID(sourceID int64) *GetFileSnapshotsInformationParams {
	o.SetSourceID(sourceID)
	return o
}

// SetSourceID adds the sourceId to the get file snapshots information params
func (o *GetFileSnapshotsInformationParams) SetSourceID(sourceID int64) {
	o.SourceID = sourceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetFileSnapshotsInformationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param clusterId
	qrClusterID := o.ClusterID
	qClusterID := swag.FormatInt64(qrClusterID)
	if qClusterID != "" {

		if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
			return err
		}
	}

	// query param clusterIncarnationId
	qrClusterIncarnationID := o.ClusterIncarnationID
	qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
	if qClusterIncarnationID != "" {

		if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
			return err
		}
	}

	// query param filename
	qrFilename := o.Filename
	qFilename := qrFilename
	if qFilename != "" {

		if err := r.SetQueryParam("filename", qFilename); err != nil {
			return err
		}
	}

	// query param jobId
	qrJobID := o.JobID
	qJobID := swag.FormatInt64(qrJobID)
	if qJobID != "" {

		if err := r.SetQueryParam("jobId", qJobID); err != nil {
			return err
		}
	}

	// query param sourceId
	qrSourceID := o.SourceID
	qSourceID := swag.FormatInt64(qrSourceID)
	if qSourceID != "" {

		if err := r.SetQueryParam("sourceId", qSourceID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
