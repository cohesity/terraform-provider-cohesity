// Code generated by go-swagger; DO NOT EDIT.

package restore_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetVMVolumesInformationParams creates a new GetVMVolumesInformationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVMVolumesInformationParams() *GetVMVolumesInformationParams {
	return &GetVMVolumesInformationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVMVolumesInformationParamsWithTimeout creates a new GetVMVolumesInformationParams object
// with the ability to set a timeout on a request.
func NewGetVMVolumesInformationParamsWithTimeout(timeout time.Duration) *GetVMVolumesInformationParams {
	return &GetVMVolumesInformationParams{
		timeout: timeout,
	}
}

// NewGetVMVolumesInformationParamsWithContext creates a new GetVMVolumesInformationParams object
// with the ability to set a context for a request.
func NewGetVMVolumesInformationParamsWithContext(ctx context.Context) *GetVMVolumesInformationParams {
	return &GetVMVolumesInformationParams{
		Context: ctx,
	}
}

// NewGetVMVolumesInformationParamsWithHTTPClient creates a new GetVMVolumesInformationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVMVolumesInformationParamsWithHTTPClient(client *http.Client) *GetVMVolumesInformationParams {
	return &GetVMVolumesInformationParams{
		HTTPClient: client,
	}
}

/*
GetVMVolumesInformationParams contains all the parameters to send to the API endpoint

	for the get Vm volumes information operation.

	Typically these are written to a http.Request.
*/
type GetVMVolumesInformationParams struct {

	/* AttemptNumber.

	     Specifies the number of the attempts made by the Job Run
	to capture a snapshot of the object. For example, if an snapshot
	is successfully captured after three attempts, this field equals 3.

	     Format: int64
	*/
	AttemptNumber *int64

	/* ClusterID.

	   Specifies the Cohesity Cluster id where the Job was created.

	   Format: int64
	*/
	ClusterID int64

	/* ClusterIncarnationID.

	     Specifies the incarnation id of the Cohesity Cluster where the Job
	was created.
	An incarnation id is generated when a Cohesity Cluster is initially
	created.

	     Format: int64
	*/
	ClusterIncarnationID int64

	/* ComputeVolumeInfo.

	     Specifies whether to compute volume information if it is not found.
	If `ComputeVolumeInfo` is false and volume information is not found it
	skips computation of volume information and returns KNotFound.
	*/
	ComputeVolumeInfo *bool

	/* JobID.

	     Specifies the Job id for the Protection Job that is currently
	associated with the object.
	If the object was backed up on current Cohesity Cluster, this field
	contains the id for the Job that captured this backup object.
	If the object was backed up on a Primary Cluster and
	replicated to this Cohesity Cluster, a new Inactive Job is created,
	the object is now associated with new Inactive Job, and this field
	contains the id of the new Inactive Job.

	     Format: int64
	*/
	JobID int64

	/* JobRunID.

	   Specifies the id of the Job Run that captured the snapshot.

	   Format: int64
	*/
	JobRunID int64

	/* OriginalJobID.

	     Specifies the id for the Protection Job that originally captured
	the snapshots of the original object. If the object was backed up
	on a Primary Cluster replicated to this Cohesity Cluster,
	and a new Inactive Job is created,
	this field still contains the id of the original Job and NOT the
	id of the new Inactive Job.
	This field is used in combination with the clusterId and
	clusterIncarnationId to uniquely identify a Job.

	     Format: int64
	*/
	OriginalJobID int64

	/* SourceID.

	   Specifies the id of the VM object to search for volumes.

	   Format: int64
	*/
	SourceID int64

	/* StartedTimeUsecs.

	     Specifies the time when the Job Run starts capturing a snapshot.
	Specified as a Unix epoch Timestamp (in microseconds).

	     Format: int64
	*/
	StartedTimeUsecs int64

	/* SupportedVolumesOnly.

	     Specifies to return only supported volumes information. Unsupported
	volumes are not returned if this flag is set to true.
	Default is false.
	*/
	SupportedVolumesOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get Vm volumes information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVMVolumesInformationParams) WithDefaults() *GetVMVolumesInformationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get Vm volumes information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVMVolumesInformationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithTimeout(timeout time.Duration) *GetVMVolumesInformationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithContext(ctx context.Context) *GetVMVolumesInformationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithHTTPClient(client *http.Client) *GetVMVolumesInformationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttemptNumber adds the attemptNumber to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithAttemptNumber(attemptNumber *int64) *GetVMVolumesInformationParams {
	o.SetAttemptNumber(attemptNumber)
	return o
}

// SetAttemptNumber adds the attemptNumber to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetAttemptNumber(attemptNumber *int64) {
	o.AttemptNumber = attemptNumber
}

// WithClusterID adds the clusterID to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithClusterID(clusterID int64) *GetVMVolumesInformationParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetClusterID(clusterID int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithClusterIncarnationID(clusterIncarnationID int64) *GetVMVolumesInformationParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetClusterIncarnationID(clusterIncarnationID int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithComputeVolumeInfo adds the computeVolumeInfo to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithComputeVolumeInfo(computeVolumeInfo *bool) *GetVMVolumesInformationParams {
	o.SetComputeVolumeInfo(computeVolumeInfo)
	return o
}

// SetComputeVolumeInfo adds the computeVolumeInfo to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetComputeVolumeInfo(computeVolumeInfo *bool) {
	o.ComputeVolumeInfo = computeVolumeInfo
}

// WithJobID adds the jobID to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithJobID(jobID int64) *GetVMVolumesInformationParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetJobID(jobID int64) {
	o.JobID = jobID
}

// WithJobRunID adds the jobRunID to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithJobRunID(jobRunID int64) *GetVMVolumesInformationParams {
	o.SetJobRunID(jobRunID)
	return o
}

// SetJobRunID adds the jobRunId to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetJobRunID(jobRunID int64) {
	o.JobRunID = jobRunID
}

// WithOriginalJobID adds the originalJobID to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithOriginalJobID(originalJobID int64) *GetVMVolumesInformationParams {
	o.SetOriginalJobID(originalJobID)
	return o
}

// SetOriginalJobID adds the originalJobId to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetOriginalJobID(originalJobID int64) {
	o.OriginalJobID = originalJobID
}

// WithSourceID adds the sourceID to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithSourceID(sourceID int64) *GetVMVolumesInformationParams {
	o.SetSourceID(sourceID)
	return o
}

// SetSourceID adds the sourceId to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetSourceID(sourceID int64) {
	o.SourceID = sourceID
}

// WithStartedTimeUsecs adds the startedTimeUsecs to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithStartedTimeUsecs(startedTimeUsecs int64) *GetVMVolumesInformationParams {
	o.SetStartedTimeUsecs(startedTimeUsecs)
	return o
}

// SetStartedTimeUsecs adds the startedTimeUsecs to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetStartedTimeUsecs(startedTimeUsecs int64) {
	o.StartedTimeUsecs = startedTimeUsecs
}

// WithSupportedVolumesOnly adds the supportedVolumesOnly to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) WithSupportedVolumesOnly(supportedVolumesOnly *bool) *GetVMVolumesInformationParams {
	o.SetSupportedVolumesOnly(supportedVolumesOnly)
	return o
}

// SetSupportedVolumesOnly adds the supportedVolumesOnly to the get Vm volumes information params
func (o *GetVMVolumesInformationParams) SetSupportedVolumesOnly(supportedVolumesOnly *bool) {
	o.SupportedVolumesOnly = supportedVolumesOnly
}

// WriteToRequest writes these params to a swagger request
func (o *GetVMVolumesInformationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AttemptNumber != nil {

		// query param attemptNumber
		var qrAttemptNumber int64

		if o.AttemptNumber != nil {
			qrAttemptNumber = *o.AttemptNumber
		}
		qAttemptNumber := swag.FormatInt64(qrAttemptNumber)
		if qAttemptNumber != "" {

			if err := r.SetQueryParam("attemptNumber", qAttemptNumber); err != nil {
				return err
			}
		}
	}

	// query param clusterId
	qrClusterID := o.ClusterID
	qClusterID := swag.FormatInt64(qrClusterID)
	if qClusterID != "" {

		if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
			return err
		}
	}

	// query param clusterIncarnationId
	qrClusterIncarnationID := o.ClusterIncarnationID
	qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
	if qClusterIncarnationID != "" {

		if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
			return err
		}
	}

	if o.ComputeVolumeInfo != nil {

		// query param computeVolumeInfo
		var qrComputeVolumeInfo bool

		if o.ComputeVolumeInfo != nil {
			qrComputeVolumeInfo = *o.ComputeVolumeInfo
		}
		qComputeVolumeInfo := swag.FormatBool(qrComputeVolumeInfo)
		if qComputeVolumeInfo != "" {

			if err := r.SetQueryParam("computeVolumeInfo", qComputeVolumeInfo); err != nil {
				return err
			}
		}
	}

	// query param jobId
	qrJobID := o.JobID
	qJobID := swag.FormatInt64(qrJobID)
	if qJobID != "" {

		if err := r.SetQueryParam("jobId", qJobID); err != nil {
			return err
		}
	}

	// query param jobRunId
	qrJobRunID := o.JobRunID
	qJobRunID := swag.FormatInt64(qrJobRunID)
	if qJobRunID != "" {

		if err := r.SetQueryParam("jobRunId", qJobRunID); err != nil {
			return err
		}
	}

	// query param originalJobId
	qrOriginalJobID := o.OriginalJobID
	qOriginalJobID := swag.FormatInt64(qrOriginalJobID)
	if qOriginalJobID != "" {

		if err := r.SetQueryParam("originalJobId", qOriginalJobID); err != nil {
			return err
		}
	}

	// query param sourceId
	qrSourceID := o.SourceID
	qSourceID := swag.FormatInt64(qrSourceID)
	if qSourceID != "" {

		if err := r.SetQueryParam("sourceId", qSourceID); err != nil {
			return err
		}
	}

	// query param startedTimeUsecs
	qrStartedTimeUsecs := o.StartedTimeUsecs
	qStartedTimeUsecs := swag.FormatInt64(qrStartedTimeUsecs)
	if qStartedTimeUsecs != "" {

		if err := r.SetQueryParam("startedTimeUsecs", qStartedTimeUsecs); err != nil {
			return err
		}
	}

	if o.SupportedVolumesOnly != nil {

		// query param supportedVolumesOnly
		var qrSupportedVolumesOnly bool

		if o.SupportedVolumesOnly != nil {
			qrSupportedVolumesOnly = *o.SupportedVolumesOnly
		}
		qSupportedVolumesOnly := swag.FormatBool(qrSupportedVolumesOnly)
		if qSupportedVolumesOnly != "" {

			if err := r.SetQueryParam("supportedVolumesOnly", qSupportedVolumesOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
