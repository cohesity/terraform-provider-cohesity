// Code generated by go-swagger; DO NOT EDIT.

package restore_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetVMDirectoryListParams creates a new GetVMDirectoryListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVMDirectoryListParams() *GetVMDirectoryListParams {
	return &GetVMDirectoryListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVMDirectoryListParamsWithTimeout creates a new GetVMDirectoryListParams object
// with the ability to set a timeout on a request.
func NewGetVMDirectoryListParamsWithTimeout(timeout time.Duration) *GetVMDirectoryListParams {
	return &GetVMDirectoryListParams{
		timeout: timeout,
	}
}

// NewGetVMDirectoryListParamsWithContext creates a new GetVMDirectoryListParams object
// with the ability to set a context for a request.
func NewGetVMDirectoryListParamsWithContext(ctx context.Context) *GetVMDirectoryListParams {
	return &GetVMDirectoryListParams{
		Context: ctx,
	}
}

// NewGetVMDirectoryListParamsWithHTTPClient creates a new GetVMDirectoryListParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVMDirectoryListParamsWithHTTPClient(client *http.Client) *GetVMDirectoryListParams {
	return &GetVMDirectoryListParams{
		HTTPClient: client,
	}
}

/*
GetVMDirectoryListParams contains all the parameters to send to the API endpoint

	for the get Vm directory list operation.

	Typically these are written to a http.Request.
*/
type GetVMDirectoryListParams struct {

	/* AttemptNum.

	     AttemptNum is the attempt number of the run that successfully created the
	snapshot.

	     Format: int64
	*/
	AttemptNum *int64

	/* BrowseIndexedData.

	   Specifies whether to use indexed data in Librarian for browse.
	*/
	BrowseIndexedData *bool

	/* Cookie.

	     Cookie is used for paginating results. If ReadDirResult returned partial
	results, it will also return a cookie that can be used to resume the
	listing. The value returned in ReadDirResult should be passed in the next
	call. The first call should not have this value set. Note that this value
	is only a suggestion and server is free to do a short read (return fewer
	entries along with a cookie).
	*/
	Cookie *string

	/* DirPath.

	   DirPath is the full path of the directory whose contents need to be listed.
	*/
	DirPath string

	/* EntityID.

	   EntityId is the Id of the VM.

	   Format: int64
	*/
	EntityID int64

	/* JobID.

	     JobId is the id of the local job that took the snapshot, which may or
	may not match the JobUidObjectId below depending on whether the object
	originally belonged to this local job or to a different remote job.

	     Format: int64
	*/
	JobID int64

	/* JobInstanceID.

	   JobInstanceId is the Id of the job run that backed up the entity.

	   Format: int64
	*/
	JobInstanceID int64

	/* JobStartTimeUsecs.

	     JobStartTimeUsecs is the start time in usecs of the job run that backed up
	the entity.

	     Format: int64
	*/
	JobStartTimeUsecs int64

	/* JobUIDObjectID.

	     JobUidObjectId is the globally unique id of the job that the object
	originally belonged to. If this object originally belonged to a job from a
	remote cluster, this field will contain the JobId of the remote job, else
	it will contain the JobId of the local job.

	     Format: int64
	*/
	JobUIDObjectID int64

	/* MaxEntries.

	     MaxEntries is the maximum number of entries to return in this call. If
	there are more entries, server will return a cookie in the response that
	can be used to continue enumeration from the last call.

	     Format: int32
	*/
	MaxEntries *int32

	/* StatFileEntries.

	   StatFileEntries specifies whether file stat data is returned.
	*/
	StatFileEntries *bool

	/* ViewBoxID.

	   Id of the View Box if a View is being browsed.

	   Format: int64
	*/
	ViewBoxID *int64

	/* ViewName.

	   Name of the View if a View is being browsed.
	*/
	ViewName *string

	/* VolumeInfoCookie.

	     VolumeInfoCookie is the cookie to be passed in calls to reading a VM dir
	for this volume.

	     Format: uint64
	*/
	VolumeInfoCookie *uint64

	/* VolumeName.

	     VolumeName is the name of the volume that needs to be browsed. This should
	match the name returned in VolumeInfo.
	*/
	VolumeName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get Vm directory list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVMDirectoryListParams) WithDefaults() *GetVMDirectoryListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get Vm directory list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVMDirectoryListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithTimeout(timeout time.Duration) *GetVMDirectoryListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithContext(ctx context.Context) *GetVMDirectoryListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithHTTPClient(client *http.Client) *GetVMDirectoryListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttemptNum adds the attemptNum to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithAttemptNum(attemptNum *int64) *GetVMDirectoryListParams {
	o.SetAttemptNum(attemptNum)
	return o
}

// SetAttemptNum adds the attemptNum to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetAttemptNum(attemptNum *int64) {
	o.AttemptNum = attemptNum
}

// WithBrowseIndexedData adds the browseIndexedData to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithBrowseIndexedData(browseIndexedData *bool) *GetVMDirectoryListParams {
	o.SetBrowseIndexedData(browseIndexedData)
	return o
}

// SetBrowseIndexedData adds the browseIndexedData to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetBrowseIndexedData(browseIndexedData *bool) {
	o.BrowseIndexedData = browseIndexedData
}

// WithCookie adds the cookie to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithCookie(cookie *string) *GetVMDirectoryListParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithDirPath adds the dirPath to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithDirPath(dirPath string) *GetVMDirectoryListParams {
	o.SetDirPath(dirPath)
	return o
}

// SetDirPath adds the dirPath to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetDirPath(dirPath string) {
	o.DirPath = dirPath
}

// WithEntityID adds the entityID to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithEntityID(entityID int64) *GetVMDirectoryListParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetEntityID(entityID int64) {
	o.EntityID = entityID
}

// WithJobID adds the jobID to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithJobID(jobID int64) *GetVMDirectoryListParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetJobID(jobID int64) {
	o.JobID = jobID
}

// WithJobInstanceID adds the jobInstanceID to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithJobInstanceID(jobInstanceID int64) *GetVMDirectoryListParams {
	o.SetJobInstanceID(jobInstanceID)
	return o
}

// SetJobInstanceID adds the jobInstanceId to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetJobInstanceID(jobInstanceID int64) {
	o.JobInstanceID = jobInstanceID
}

// WithJobStartTimeUsecs adds the jobStartTimeUsecs to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithJobStartTimeUsecs(jobStartTimeUsecs int64) *GetVMDirectoryListParams {
	o.SetJobStartTimeUsecs(jobStartTimeUsecs)
	return o
}

// SetJobStartTimeUsecs adds the jobStartTimeUsecs to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetJobStartTimeUsecs(jobStartTimeUsecs int64) {
	o.JobStartTimeUsecs = jobStartTimeUsecs
}

// WithJobUIDObjectID adds the jobUIDObjectID to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithJobUIDObjectID(jobUIDObjectID int64) *GetVMDirectoryListParams {
	o.SetJobUIDObjectID(jobUIDObjectID)
	return o
}

// SetJobUIDObjectID adds the jobUidObjectId to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetJobUIDObjectID(jobUIDObjectID int64) {
	o.JobUIDObjectID = jobUIDObjectID
}

// WithMaxEntries adds the maxEntries to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithMaxEntries(maxEntries *int32) *GetVMDirectoryListParams {
	o.SetMaxEntries(maxEntries)
	return o
}

// SetMaxEntries adds the maxEntries to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetMaxEntries(maxEntries *int32) {
	o.MaxEntries = maxEntries
}

// WithStatFileEntries adds the statFileEntries to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithStatFileEntries(statFileEntries *bool) *GetVMDirectoryListParams {
	o.SetStatFileEntries(statFileEntries)
	return o
}

// SetStatFileEntries adds the statFileEntries to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetStatFileEntries(statFileEntries *bool) {
	o.StatFileEntries = statFileEntries
}

// WithViewBoxID adds the viewBoxID to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithViewBoxID(viewBoxID *int64) *GetVMDirectoryListParams {
	o.SetViewBoxID(viewBoxID)
	return o
}

// SetViewBoxID adds the viewBoxId to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetViewBoxID(viewBoxID *int64) {
	o.ViewBoxID = viewBoxID
}

// WithViewName adds the viewName to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithViewName(viewName *string) *GetVMDirectoryListParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetViewName(viewName *string) {
	o.ViewName = viewName
}

// WithVolumeInfoCookie adds the volumeInfoCookie to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithVolumeInfoCookie(volumeInfoCookie *uint64) *GetVMDirectoryListParams {
	o.SetVolumeInfoCookie(volumeInfoCookie)
	return o
}

// SetVolumeInfoCookie adds the volumeInfoCookie to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetVolumeInfoCookie(volumeInfoCookie *uint64) {
	o.VolumeInfoCookie = volumeInfoCookie
}

// WithVolumeName adds the volumeName to the get Vm directory list params
func (o *GetVMDirectoryListParams) WithVolumeName(volumeName *string) *GetVMDirectoryListParams {
	o.SetVolumeName(volumeName)
	return o
}

// SetVolumeName adds the volumeName to the get Vm directory list params
func (o *GetVMDirectoryListParams) SetVolumeName(volumeName *string) {
	o.VolumeName = volumeName
}

// WriteToRequest writes these params to a swagger request
func (o *GetVMDirectoryListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AttemptNum != nil {

		// query param attemptNum
		var qrAttemptNum int64

		if o.AttemptNum != nil {
			qrAttemptNum = *o.AttemptNum
		}
		qAttemptNum := swag.FormatInt64(qrAttemptNum)
		if qAttemptNum != "" {

			if err := r.SetQueryParam("attemptNum", qAttemptNum); err != nil {
				return err
			}
		}
	}

	if o.BrowseIndexedData != nil {

		// query param browseIndexedData
		var qrBrowseIndexedData bool

		if o.BrowseIndexedData != nil {
			qrBrowseIndexedData = *o.BrowseIndexedData
		}
		qBrowseIndexedData := swag.FormatBool(qrBrowseIndexedData)
		if qBrowseIndexedData != "" {

			if err := r.SetQueryParam("browseIndexedData", qBrowseIndexedData); err != nil {
				return err
			}
		}
	}

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	// query param dirPath
	qrDirPath := o.DirPath
	qDirPath := qrDirPath
	if qDirPath != "" {

		if err := r.SetQueryParam("dirPath", qDirPath); err != nil {
			return err
		}
	}

	// query param entityId
	qrEntityID := o.EntityID
	qEntityID := swag.FormatInt64(qrEntityID)
	if qEntityID != "" {

		if err := r.SetQueryParam("entityId", qEntityID); err != nil {
			return err
		}
	}

	// query param jobId
	qrJobID := o.JobID
	qJobID := swag.FormatInt64(qrJobID)
	if qJobID != "" {

		if err := r.SetQueryParam("jobId", qJobID); err != nil {
			return err
		}
	}

	// query param jobInstanceId
	qrJobInstanceID := o.JobInstanceID
	qJobInstanceID := swag.FormatInt64(qrJobInstanceID)
	if qJobInstanceID != "" {

		if err := r.SetQueryParam("jobInstanceId", qJobInstanceID); err != nil {
			return err
		}
	}

	// query param jobStartTimeUsecs
	qrJobStartTimeUsecs := o.JobStartTimeUsecs
	qJobStartTimeUsecs := swag.FormatInt64(qrJobStartTimeUsecs)
	if qJobStartTimeUsecs != "" {

		if err := r.SetQueryParam("jobStartTimeUsecs", qJobStartTimeUsecs); err != nil {
			return err
		}
	}

	// query param jobUidObjectId
	qrJobUIDObjectID := o.JobUIDObjectID
	qJobUIDObjectID := swag.FormatInt64(qrJobUIDObjectID)
	if qJobUIDObjectID != "" {

		if err := r.SetQueryParam("jobUidObjectId", qJobUIDObjectID); err != nil {
			return err
		}
	}

	if o.MaxEntries != nil {

		// query param maxEntries
		var qrMaxEntries int32

		if o.MaxEntries != nil {
			qrMaxEntries = *o.MaxEntries
		}
		qMaxEntries := swag.FormatInt32(qrMaxEntries)
		if qMaxEntries != "" {

			if err := r.SetQueryParam("maxEntries", qMaxEntries); err != nil {
				return err
			}
		}
	}

	if o.StatFileEntries != nil {

		// query param statFileEntries
		var qrStatFileEntries bool

		if o.StatFileEntries != nil {
			qrStatFileEntries = *o.StatFileEntries
		}
		qStatFileEntries := swag.FormatBool(qrStatFileEntries)
		if qStatFileEntries != "" {

			if err := r.SetQueryParam("statFileEntries", qStatFileEntries); err != nil {
				return err
			}
		}
	}

	if o.ViewBoxID != nil {

		// query param viewBoxId
		var qrViewBoxID int64

		if o.ViewBoxID != nil {
			qrViewBoxID = *o.ViewBoxID
		}
		qViewBoxID := swag.FormatInt64(qrViewBoxID)
		if qViewBoxID != "" {

			if err := r.SetQueryParam("viewBoxId", qViewBoxID); err != nil {
				return err
			}
		}
	}

	if o.ViewName != nil {

		// query param viewName
		var qrViewName string

		if o.ViewName != nil {
			qrViewName = *o.ViewName
		}
		qViewName := qrViewName
		if qViewName != "" {

			if err := r.SetQueryParam("viewName", qViewName); err != nil {
				return err
			}
		}
	}

	if o.VolumeInfoCookie != nil {

		// query param volumeInfoCookie
		var qrVolumeInfoCookie uint64

		if o.VolumeInfoCookie != nil {
			qrVolumeInfoCookie = *o.VolumeInfoCookie
		}
		qVolumeInfoCookie := swag.FormatUint64(qrVolumeInfoCookie)
		if qVolumeInfoCookie != "" {

			if err := r.SetQueryParam("volumeInfoCookie", qVolumeInfoCookie); err != nil {
				return err
			}
		}
	}

	if o.VolumeName != nil {

		// query param volumeName
		var qrVolumeName string

		if o.VolumeName != nil {
			qrVolumeName = *o.VolumeName
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volumeName", qVolumeName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
