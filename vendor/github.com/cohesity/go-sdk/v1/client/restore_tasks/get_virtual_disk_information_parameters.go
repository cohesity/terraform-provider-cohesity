// Code generated by go-swagger; DO NOT EDIT.

package restore_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetVirtualDiskInformationParams creates a new GetVirtualDiskInformationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVirtualDiskInformationParams() *GetVirtualDiskInformationParams {
	return &GetVirtualDiskInformationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVirtualDiskInformationParamsWithTimeout creates a new GetVirtualDiskInformationParams object
// with the ability to set a timeout on a request.
func NewGetVirtualDiskInformationParamsWithTimeout(timeout time.Duration) *GetVirtualDiskInformationParams {
	return &GetVirtualDiskInformationParams{
		timeout: timeout,
	}
}

// NewGetVirtualDiskInformationParamsWithContext creates a new GetVirtualDiskInformationParams object
// with the ability to set a context for a request.
func NewGetVirtualDiskInformationParamsWithContext(ctx context.Context) *GetVirtualDiskInformationParams {
	return &GetVirtualDiskInformationParams{
		Context: ctx,
	}
}

// NewGetVirtualDiskInformationParamsWithHTTPClient creates a new GetVirtualDiskInformationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVirtualDiskInformationParamsWithHTTPClient(client *http.Client) *GetVirtualDiskInformationParams {
	return &GetVirtualDiskInformationParams{
		HTTPClient: client,
	}
}

/*
GetVirtualDiskInformationParams contains all the parameters to send to the API endpoint

	for the get virtual disk information operation.

	Typically these are written to a http.Request.
*/
type GetVirtualDiskInformationParams struct {

	/* ClusterID.

	   Specifies the Cohesity Cluster id where the Job was created.

	   Format: int64
	*/
	ClusterID int64

	/* ClusterIncarnationID.

	     Specifies the incarnation id of the Cohesity Cluster where the Job was
	created.

	     Format: int64
	*/
	ClusterIncarnationID int64

	/* JobID.

	   Specifies the id of the Job that captured the snapshot.

	   Format: int64
	*/
	JobID int64

	/* JobRunID.

	   Specifies the id of the Job Run that captured the snapshot.

	   Format: int64
	*/
	JobRunID int64

	/* PointInTimeUsecs.

	     PointInTimeUsecs is the time to get volume virtual disk info from
	previously available full/incremental snapshot.

	     Format: int64
	*/
	PointInTimeUsecs *int64

	/* SourceID.

	   Specifies the Id of the Protection Source object.

	   Format: int64
	*/
	SourceID int64

	/* StartTimeUsecs.

	     Specifies the start time of the job run as a Unix epoch Timestamp in
	microseconds.

	     Format: int64
	*/
	StartTimeUsecs int64

	/* VaultID.

	   Specifies the Id of the vault where snapshot was taken.

	   Format: int64
	*/
	VaultID *int64

	/* VaultName.

	   Specifies the name of the vault where snapshot was taken.
	*/
	VaultName *string

	/* VaultType.

	   Specifes the type of the vault where snapshot was taken.
	*/
	VaultType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get virtual disk information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVirtualDiskInformationParams) WithDefaults() *GetVirtualDiskInformationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get virtual disk information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVirtualDiskInformationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithTimeout(timeout time.Duration) *GetVirtualDiskInformationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithContext(ctx context.Context) *GetVirtualDiskInformationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithHTTPClient(client *http.Client) *GetVirtualDiskInformationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithClusterID(clusterID int64) *GetVirtualDiskInformationParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetClusterID(clusterID int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithClusterIncarnationID(clusterIncarnationID int64) *GetVirtualDiskInformationParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetClusterIncarnationID(clusterIncarnationID int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithJobID adds the jobID to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithJobID(jobID int64) *GetVirtualDiskInformationParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetJobID(jobID int64) {
	o.JobID = jobID
}

// WithJobRunID adds the jobRunID to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithJobRunID(jobRunID int64) *GetVirtualDiskInformationParams {
	o.SetJobRunID(jobRunID)
	return o
}

// SetJobRunID adds the jobRunId to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetJobRunID(jobRunID int64) {
	o.JobRunID = jobRunID
}

// WithPointInTimeUsecs adds the pointInTimeUsecs to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithPointInTimeUsecs(pointInTimeUsecs *int64) *GetVirtualDiskInformationParams {
	o.SetPointInTimeUsecs(pointInTimeUsecs)
	return o
}

// SetPointInTimeUsecs adds the pointInTimeUsecs to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetPointInTimeUsecs(pointInTimeUsecs *int64) {
	o.PointInTimeUsecs = pointInTimeUsecs
}

// WithSourceID adds the sourceID to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithSourceID(sourceID int64) *GetVirtualDiskInformationParams {
	o.SetSourceID(sourceID)
	return o
}

// SetSourceID adds the sourceId to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetSourceID(sourceID int64) {
	o.SourceID = sourceID
}

// WithStartTimeUsecs adds the startTimeUsecs to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithStartTimeUsecs(startTimeUsecs int64) *GetVirtualDiskInformationParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetStartTimeUsecs(startTimeUsecs int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WithVaultID adds the vaultID to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithVaultID(vaultID *int64) *GetVirtualDiskInformationParams {
	o.SetVaultID(vaultID)
	return o
}

// SetVaultID adds the vaultId to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetVaultID(vaultID *int64) {
	o.VaultID = vaultID
}

// WithVaultName adds the vaultName to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithVaultName(vaultName *string) *GetVirtualDiskInformationParams {
	o.SetVaultName(vaultName)
	return o
}

// SetVaultName adds the vaultName to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetVaultName(vaultName *string) {
	o.VaultName = vaultName
}

// WithVaultType adds the vaultType to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) WithVaultType(vaultType *string) *GetVirtualDiskInformationParams {
	o.SetVaultType(vaultType)
	return o
}

// SetVaultType adds the vaultType to the get virtual disk information params
func (o *GetVirtualDiskInformationParams) SetVaultType(vaultType *string) {
	o.VaultType = vaultType
}

// WriteToRequest writes these params to a swagger request
func (o *GetVirtualDiskInformationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param clusterId
	qrClusterID := o.ClusterID
	qClusterID := swag.FormatInt64(qrClusterID)
	if qClusterID != "" {

		if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
			return err
		}
	}

	// query param clusterIncarnationId
	qrClusterIncarnationID := o.ClusterIncarnationID
	qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
	if qClusterIncarnationID != "" {

		if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
			return err
		}
	}

	// query param jobId
	qrJobID := o.JobID
	qJobID := swag.FormatInt64(qrJobID)
	if qJobID != "" {

		if err := r.SetQueryParam("jobId", qJobID); err != nil {
			return err
		}
	}

	// query param jobRunId
	qrJobRunID := o.JobRunID
	qJobRunID := swag.FormatInt64(qrJobRunID)
	if qJobRunID != "" {

		if err := r.SetQueryParam("jobRunId", qJobRunID); err != nil {
			return err
		}
	}

	if o.PointInTimeUsecs != nil {

		// query param pointInTimeUsecs
		var qrPointInTimeUsecs int64

		if o.PointInTimeUsecs != nil {
			qrPointInTimeUsecs = *o.PointInTimeUsecs
		}
		qPointInTimeUsecs := swag.FormatInt64(qrPointInTimeUsecs)
		if qPointInTimeUsecs != "" {

			if err := r.SetQueryParam("pointInTimeUsecs", qPointInTimeUsecs); err != nil {
				return err
			}
		}
	}

	// query param sourceId
	qrSourceID := o.SourceID
	qSourceID := swag.FormatInt64(qrSourceID)
	if qSourceID != "" {

		if err := r.SetQueryParam("sourceId", qSourceID); err != nil {
			return err
		}
	}

	// query param startTimeUsecs
	qrStartTimeUsecs := o.StartTimeUsecs
	qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
	if qStartTimeUsecs != "" {

		if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
			return err
		}
	}

	if o.VaultID != nil {

		// query param vaultId
		var qrVaultID int64

		if o.VaultID != nil {
			qrVaultID = *o.VaultID
		}
		qVaultID := swag.FormatInt64(qrVaultID)
		if qVaultID != "" {

			if err := r.SetQueryParam("vaultId", qVaultID); err != nil {
				return err
			}
		}
	}

	if o.VaultName != nil {

		// query param vaultName
		var qrVaultName string

		if o.VaultName != nil {
			qrVaultName = *o.VaultName
		}
		qVaultName := qrVaultName
		if qVaultName != "" {

			if err := r.SetQueryParam("vaultName", qVaultName); err != nil {
				return err
			}
		}
	}

	if o.VaultType != nil {

		// query param vaultType
		var qrVaultType string

		if o.VaultType != nil {
			qrVaultType = *o.VaultType
		}
		qVaultType := qrVaultType
		if qVaultType != "" {

			if err := r.SetQueryParam("vaultType", qVaultType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
