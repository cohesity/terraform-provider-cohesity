// Code generated by go-swagger; DO NOT EDIT.

package restore_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFileFstatInformationParams creates a new GetFileFstatInformationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFileFstatInformationParams() *GetFileFstatInformationParams {
	return &GetFileFstatInformationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFileFstatInformationParamsWithTimeout creates a new GetFileFstatInformationParams object
// with the ability to set a timeout on a request.
func NewGetFileFstatInformationParamsWithTimeout(timeout time.Duration) *GetFileFstatInformationParams {
	return &GetFileFstatInformationParams{
		timeout: timeout,
	}
}

// NewGetFileFstatInformationParamsWithContext creates a new GetFileFstatInformationParams object
// with the ability to set a context for a request.
func NewGetFileFstatInformationParamsWithContext(ctx context.Context) *GetFileFstatInformationParams {
	return &GetFileFstatInformationParams{
		Context: ctx,
	}
}

// NewGetFileFstatInformationParamsWithHTTPClient creates a new GetFileFstatInformationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFileFstatInformationParamsWithHTTPClient(client *http.Client) *GetFileFstatInformationParams {
	return &GetFileFstatInformationParams{
		HTTPClient: client,
	}
}

/*
GetFileFstatInformationParams contains all the parameters to send to the API endpoint

	for the get file fstat information operation.

	Typically these are written to a http.Request.
*/
type GetFileFstatInformationParams struct {

	/* AttemptNum.

	     AttemptNum is the attempt number of the run that successfully created the
	snapshot.

	     Format: int64
	*/
	AttemptNum *int64

	/* EntityID.

	   EntityId is the Id of the VM.

	   Format: int64
	*/
	EntityID int64

	/* FilePath.

	   FilePath is the full path of the file or directory whose stat needed.
	*/
	FilePath string

	/* JobID.

	     JobId is the id of the local job that took the snapshot, which may or
	may not match the JobUidObjectId below depending on whether the object
	originally belonged to this local job or to a different remote job.

	     Format: int64
	*/
	JobID int64

	/* JobInstanceID.

	   JobInstanceId is the Id of the job run that backed up the entity.

	   Format: int64
	*/
	JobInstanceID int64

	/* JobStartTimeUsecs.

	     JobStartTimeUsecs is the start time in usecs of the job run that backed up
	the entity.

	     Format: int64
	*/
	JobStartTimeUsecs int64

	/* JobUIDObjectID.

	     JobUidObjectId is the globally unique id of the job that the object
	originally belonged to. If this object originally belonged to a job from a
	remote cluster, this field will contain the JobId of the remote job, else
	it will contain the JobId of the local job.

	     Format: int64
	*/
	JobUIDObjectID int64

	/* UseLibrarian.

	     Specifies whether to use Librarian for file stat. This will be true if the
	browse is enabled via librarian.
	*/
	UseLibrarian *bool

	/* ViewBoxID.

	   Id of the View Box if a View is being browsed.

	   Format: int64
	*/
	ViewBoxID *int64

	/* ViewName.

	   Name of the View if a View is being browsed.
	*/
	ViewName *string

	/* VolumeInfoCookie.

	     VolumeInfoCookie is the cookie to be passed in calls to reading a VM dir
	for this volume.

	     Format: uint64
	*/
	VolumeInfoCookie *uint64

	/* VolumeName.

	     VolumeName is the name of the volume that needs to be browsed. This should
	match the name returned in VolumeInfo.
	*/
	VolumeName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get file fstat information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileFstatInformationParams) WithDefaults() *GetFileFstatInformationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get file fstat information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileFstatInformationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get file fstat information params
func (o *GetFileFstatInformationParams) WithTimeout(timeout time.Duration) *GetFileFstatInformationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get file fstat information params
func (o *GetFileFstatInformationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get file fstat information params
func (o *GetFileFstatInformationParams) WithContext(ctx context.Context) *GetFileFstatInformationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get file fstat information params
func (o *GetFileFstatInformationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get file fstat information params
func (o *GetFileFstatInformationParams) WithHTTPClient(client *http.Client) *GetFileFstatInformationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get file fstat information params
func (o *GetFileFstatInformationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttemptNum adds the attemptNum to the get file fstat information params
func (o *GetFileFstatInformationParams) WithAttemptNum(attemptNum *int64) *GetFileFstatInformationParams {
	o.SetAttemptNum(attemptNum)
	return o
}

// SetAttemptNum adds the attemptNum to the get file fstat information params
func (o *GetFileFstatInformationParams) SetAttemptNum(attemptNum *int64) {
	o.AttemptNum = attemptNum
}

// WithEntityID adds the entityID to the get file fstat information params
func (o *GetFileFstatInformationParams) WithEntityID(entityID int64) *GetFileFstatInformationParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the get file fstat information params
func (o *GetFileFstatInformationParams) SetEntityID(entityID int64) {
	o.EntityID = entityID
}

// WithFilePath adds the filePath to the get file fstat information params
func (o *GetFileFstatInformationParams) WithFilePath(filePath string) *GetFileFstatInformationParams {
	o.SetFilePath(filePath)
	return o
}

// SetFilePath adds the filePath to the get file fstat information params
func (o *GetFileFstatInformationParams) SetFilePath(filePath string) {
	o.FilePath = filePath
}

// WithJobID adds the jobID to the get file fstat information params
func (o *GetFileFstatInformationParams) WithJobID(jobID int64) *GetFileFstatInformationParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get file fstat information params
func (o *GetFileFstatInformationParams) SetJobID(jobID int64) {
	o.JobID = jobID
}

// WithJobInstanceID adds the jobInstanceID to the get file fstat information params
func (o *GetFileFstatInformationParams) WithJobInstanceID(jobInstanceID int64) *GetFileFstatInformationParams {
	o.SetJobInstanceID(jobInstanceID)
	return o
}

// SetJobInstanceID adds the jobInstanceId to the get file fstat information params
func (o *GetFileFstatInformationParams) SetJobInstanceID(jobInstanceID int64) {
	o.JobInstanceID = jobInstanceID
}

// WithJobStartTimeUsecs adds the jobStartTimeUsecs to the get file fstat information params
func (o *GetFileFstatInformationParams) WithJobStartTimeUsecs(jobStartTimeUsecs int64) *GetFileFstatInformationParams {
	o.SetJobStartTimeUsecs(jobStartTimeUsecs)
	return o
}

// SetJobStartTimeUsecs adds the jobStartTimeUsecs to the get file fstat information params
func (o *GetFileFstatInformationParams) SetJobStartTimeUsecs(jobStartTimeUsecs int64) {
	o.JobStartTimeUsecs = jobStartTimeUsecs
}

// WithJobUIDObjectID adds the jobUIDObjectID to the get file fstat information params
func (o *GetFileFstatInformationParams) WithJobUIDObjectID(jobUIDObjectID int64) *GetFileFstatInformationParams {
	o.SetJobUIDObjectID(jobUIDObjectID)
	return o
}

// SetJobUIDObjectID adds the jobUidObjectId to the get file fstat information params
func (o *GetFileFstatInformationParams) SetJobUIDObjectID(jobUIDObjectID int64) {
	o.JobUIDObjectID = jobUIDObjectID
}

// WithUseLibrarian adds the useLibrarian to the get file fstat information params
func (o *GetFileFstatInformationParams) WithUseLibrarian(useLibrarian *bool) *GetFileFstatInformationParams {
	o.SetUseLibrarian(useLibrarian)
	return o
}

// SetUseLibrarian adds the useLibrarian to the get file fstat information params
func (o *GetFileFstatInformationParams) SetUseLibrarian(useLibrarian *bool) {
	o.UseLibrarian = useLibrarian
}

// WithViewBoxID adds the viewBoxID to the get file fstat information params
func (o *GetFileFstatInformationParams) WithViewBoxID(viewBoxID *int64) *GetFileFstatInformationParams {
	o.SetViewBoxID(viewBoxID)
	return o
}

// SetViewBoxID adds the viewBoxId to the get file fstat information params
func (o *GetFileFstatInformationParams) SetViewBoxID(viewBoxID *int64) {
	o.ViewBoxID = viewBoxID
}

// WithViewName adds the viewName to the get file fstat information params
func (o *GetFileFstatInformationParams) WithViewName(viewName *string) *GetFileFstatInformationParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the get file fstat information params
func (o *GetFileFstatInformationParams) SetViewName(viewName *string) {
	o.ViewName = viewName
}

// WithVolumeInfoCookie adds the volumeInfoCookie to the get file fstat information params
func (o *GetFileFstatInformationParams) WithVolumeInfoCookie(volumeInfoCookie *uint64) *GetFileFstatInformationParams {
	o.SetVolumeInfoCookie(volumeInfoCookie)
	return o
}

// SetVolumeInfoCookie adds the volumeInfoCookie to the get file fstat information params
func (o *GetFileFstatInformationParams) SetVolumeInfoCookie(volumeInfoCookie *uint64) {
	o.VolumeInfoCookie = volumeInfoCookie
}

// WithVolumeName adds the volumeName to the get file fstat information params
func (o *GetFileFstatInformationParams) WithVolumeName(volumeName *string) *GetFileFstatInformationParams {
	o.SetVolumeName(volumeName)
	return o
}

// SetVolumeName adds the volumeName to the get file fstat information params
func (o *GetFileFstatInformationParams) SetVolumeName(volumeName *string) {
	o.VolumeName = volumeName
}

// WriteToRequest writes these params to a swagger request
func (o *GetFileFstatInformationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AttemptNum != nil {

		// query param attemptNum
		var qrAttemptNum int64

		if o.AttemptNum != nil {
			qrAttemptNum = *o.AttemptNum
		}
		qAttemptNum := swag.FormatInt64(qrAttemptNum)
		if qAttemptNum != "" {

			if err := r.SetQueryParam("attemptNum", qAttemptNum); err != nil {
				return err
			}
		}
	}

	// query param entityId
	qrEntityID := o.EntityID
	qEntityID := swag.FormatInt64(qrEntityID)
	if qEntityID != "" {

		if err := r.SetQueryParam("entityId", qEntityID); err != nil {
			return err
		}
	}

	// query param filePath
	qrFilePath := o.FilePath
	qFilePath := qrFilePath
	if qFilePath != "" {

		if err := r.SetQueryParam("filePath", qFilePath); err != nil {
			return err
		}
	}

	// query param jobId
	qrJobID := o.JobID
	qJobID := swag.FormatInt64(qrJobID)
	if qJobID != "" {

		if err := r.SetQueryParam("jobId", qJobID); err != nil {
			return err
		}
	}

	// query param jobInstanceId
	qrJobInstanceID := o.JobInstanceID
	qJobInstanceID := swag.FormatInt64(qrJobInstanceID)
	if qJobInstanceID != "" {

		if err := r.SetQueryParam("jobInstanceId", qJobInstanceID); err != nil {
			return err
		}
	}

	// query param jobStartTimeUsecs
	qrJobStartTimeUsecs := o.JobStartTimeUsecs
	qJobStartTimeUsecs := swag.FormatInt64(qrJobStartTimeUsecs)
	if qJobStartTimeUsecs != "" {

		if err := r.SetQueryParam("jobStartTimeUsecs", qJobStartTimeUsecs); err != nil {
			return err
		}
	}

	// query param jobUidObjectId
	qrJobUIDObjectID := o.JobUIDObjectID
	qJobUIDObjectID := swag.FormatInt64(qrJobUIDObjectID)
	if qJobUIDObjectID != "" {

		if err := r.SetQueryParam("jobUidObjectId", qJobUIDObjectID); err != nil {
			return err
		}
	}

	if o.UseLibrarian != nil {

		// query param useLibrarian
		var qrUseLibrarian bool

		if o.UseLibrarian != nil {
			qrUseLibrarian = *o.UseLibrarian
		}
		qUseLibrarian := swag.FormatBool(qrUseLibrarian)
		if qUseLibrarian != "" {

			if err := r.SetQueryParam("useLibrarian", qUseLibrarian); err != nil {
				return err
			}
		}
	}

	if o.ViewBoxID != nil {

		// query param viewBoxId
		var qrViewBoxID int64

		if o.ViewBoxID != nil {
			qrViewBoxID = *o.ViewBoxID
		}
		qViewBoxID := swag.FormatInt64(qrViewBoxID)
		if qViewBoxID != "" {

			if err := r.SetQueryParam("viewBoxId", qViewBoxID); err != nil {
				return err
			}
		}
	}

	if o.ViewName != nil {

		// query param viewName
		var qrViewName string

		if o.ViewName != nil {
			qrViewName = *o.ViewName
		}
		qViewName := qrViewName
		if qViewName != "" {

			if err := r.SetQueryParam("viewName", qViewName); err != nil {
				return err
			}
		}
	}

	if o.VolumeInfoCookie != nil {

		// query param volumeInfoCookie
		var qrVolumeInfoCookie uint64

		if o.VolumeInfoCookie != nil {
			qrVolumeInfoCookie = *o.VolumeInfoCookie
		}
		qVolumeInfoCookie := swag.FormatUint64(qrVolumeInfoCookie)
		if qVolumeInfoCookie != "" {

			if err := r.SetQueryParam("volumeInfoCookie", qVolumeInfoCookie); err != nil {
				return err
			}
		}
	}

	if o.VolumeName != nil {

		// query param volumeName
		var qrVolumeName string

		if o.VolumeName != nil {
			qrVolumeName = *o.VolumeName
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volumeName", qVolumeName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
