// Code generated by go-swagger; DO NOT EDIT.

package restore_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOneDriveDocumentsParams creates a new GetOneDriveDocumentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOneDriveDocumentsParams() *GetOneDriveDocumentsParams {
	return &GetOneDriveDocumentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOneDriveDocumentsParamsWithTimeout creates a new GetOneDriveDocumentsParams object
// with the ability to set a timeout on a request.
func NewGetOneDriveDocumentsParamsWithTimeout(timeout time.Duration) *GetOneDriveDocumentsParams {
	return &GetOneDriveDocumentsParams{
		timeout: timeout,
	}
}

// NewGetOneDriveDocumentsParamsWithContext creates a new GetOneDriveDocumentsParams object
// with the ability to set a context for a request.
func NewGetOneDriveDocumentsParamsWithContext(ctx context.Context) *GetOneDriveDocumentsParams {
	return &GetOneDriveDocumentsParams{
		Context: ctx,
	}
}

// NewGetOneDriveDocumentsParamsWithHTTPClient creates a new GetOneDriveDocumentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOneDriveDocumentsParamsWithHTTPClient(client *http.Client) *GetOneDriveDocumentsParams {
	return &GetOneDriveDocumentsParams{
		HTTPClient: client,
	}
}

/*
GetOneDriveDocumentsParams contains all the parameters to send to the API endpoint

	for the get one drive documents operation.

	Typically these are written to a http.Request.
*/
type GetOneDriveDocumentsParams struct {

	/* AllUnderHierarchy.

	     AllUnderHierarchy specifies if logs of all the tenants under the hierarchy
	of tenant with id TenantId should be returned.
	*/
	AllUnderHierarchy *bool

	/* DocumentName.

	   Specifies the document(file/folder) name.
	*/
	DocumentName *string

	/* DomainIds.

	   Specifies the domain Ids in which Users' OneDrives are registered.
	*/
	DomainIds []int64

	/* MailboxIds.

	   Specifies the Office365 User Ids which is teh owner of the OneDrive.
	*/
	MailboxIds []int64

	/* ProtectionJobIds.

	     Specifies the protection job Ids which have backed up mailbox(es)
	continaing emails/folders.
	*/
	ProtectionJobIds []int64

	/* TenantID.

	   TenantId specifies the tenant whose action resulted in the audit log.
	*/
	TenantID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get one drive documents params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOneDriveDocumentsParams) WithDefaults() *GetOneDriveDocumentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get one drive documents params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOneDriveDocumentsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get one drive documents params
func (o *GetOneDriveDocumentsParams) WithTimeout(timeout time.Duration) *GetOneDriveDocumentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get one drive documents params
func (o *GetOneDriveDocumentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get one drive documents params
func (o *GetOneDriveDocumentsParams) WithContext(ctx context.Context) *GetOneDriveDocumentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get one drive documents params
func (o *GetOneDriveDocumentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get one drive documents params
func (o *GetOneDriveDocumentsParams) WithHTTPClient(client *http.Client) *GetOneDriveDocumentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get one drive documents params
func (o *GetOneDriveDocumentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUnderHierarchy adds the allUnderHierarchy to the get one drive documents params
func (o *GetOneDriveDocumentsParams) WithAllUnderHierarchy(allUnderHierarchy *bool) *GetOneDriveDocumentsParams {
	o.SetAllUnderHierarchy(allUnderHierarchy)
	return o
}

// SetAllUnderHierarchy adds the allUnderHierarchy to the get one drive documents params
func (o *GetOneDriveDocumentsParams) SetAllUnderHierarchy(allUnderHierarchy *bool) {
	o.AllUnderHierarchy = allUnderHierarchy
}

// WithDocumentName adds the documentName to the get one drive documents params
func (o *GetOneDriveDocumentsParams) WithDocumentName(documentName *string) *GetOneDriveDocumentsParams {
	o.SetDocumentName(documentName)
	return o
}

// SetDocumentName adds the documentName to the get one drive documents params
func (o *GetOneDriveDocumentsParams) SetDocumentName(documentName *string) {
	o.DocumentName = documentName
}

// WithDomainIds adds the domainIds to the get one drive documents params
func (o *GetOneDriveDocumentsParams) WithDomainIds(domainIds []int64) *GetOneDriveDocumentsParams {
	o.SetDomainIds(domainIds)
	return o
}

// SetDomainIds adds the domainIds to the get one drive documents params
func (o *GetOneDriveDocumentsParams) SetDomainIds(domainIds []int64) {
	o.DomainIds = domainIds
}

// WithMailboxIds adds the mailboxIds to the get one drive documents params
func (o *GetOneDriveDocumentsParams) WithMailboxIds(mailboxIds []int64) *GetOneDriveDocumentsParams {
	o.SetMailboxIds(mailboxIds)
	return o
}

// SetMailboxIds adds the mailboxIds to the get one drive documents params
func (o *GetOneDriveDocumentsParams) SetMailboxIds(mailboxIds []int64) {
	o.MailboxIds = mailboxIds
}

// WithProtectionJobIds adds the protectionJobIds to the get one drive documents params
func (o *GetOneDriveDocumentsParams) WithProtectionJobIds(protectionJobIds []int64) *GetOneDriveDocumentsParams {
	o.SetProtectionJobIds(protectionJobIds)
	return o
}

// SetProtectionJobIds adds the protectionJobIds to the get one drive documents params
func (o *GetOneDriveDocumentsParams) SetProtectionJobIds(protectionJobIds []int64) {
	o.ProtectionJobIds = protectionJobIds
}

// WithTenantID adds the tenantID to the get one drive documents params
func (o *GetOneDriveDocumentsParams) WithTenantID(tenantID *string) *GetOneDriveDocumentsParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the get one drive documents params
func (o *GetOneDriveDocumentsParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOneDriveDocumentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUnderHierarchy != nil {

		// query param allUnderHierarchy
		var qrAllUnderHierarchy bool

		if o.AllUnderHierarchy != nil {
			qrAllUnderHierarchy = *o.AllUnderHierarchy
		}
		qAllUnderHierarchy := swag.FormatBool(qrAllUnderHierarchy)
		if qAllUnderHierarchy != "" {

			if err := r.SetQueryParam("allUnderHierarchy", qAllUnderHierarchy); err != nil {
				return err
			}
		}
	}

	if o.DocumentName != nil {

		// query param documentName
		var qrDocumentName string

		if o.DocumentName != nil {
			qrDocumentName = *o.DocumentName
		}
		qDocumentName := qrDocumentName
		if qDocumentName != "" {

			if err := r.SetQueryParam("documentName", qDocumentName); err != nil {
				return err
			}
		}
	}

	if o.DomainIds != nil {

		// binding items for domainIds
		joinedDomainIds := o.bindParamDomainIds(reg)

		// query array param domainIds
		if err := r.SetQueryParam("domainIds", joinedDomainIds...); err != nil {
			return err
		}
	}

	if o.MailboxIds != nil {

		// binding items for mailboxIds
		joinedMailboxIds := o.bindParamMailboxIds(reg)

		// query array param mailboxIds
		if err := r.SetQueryParam("mailboxIds", joinedMailboxIds...); err != nil {
			return err
		}
	}

	if o.ProtectionJobIds != nil {

		// binding items for protectionJobIds
		joinedProtectionJobIds := o.bindParamProtectionJobIds(reg)

		// query array param protectionJobIds
		if err := r.SetQueryParam("protectionJobIds", joinedProtectionJobIds...); err != nil {
			return err
		}
	}

	if o.TenantID != nil {

		// query param tenantId
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenantId", qTenantID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOneDriveDocuments binds the parameter domainIds
func (o *GetOneDriveDocumentsParams) bindParamDomainIds(formats strfmt.Registry) []string {
	domainIdsIR := o.DomainIds

	var domainIdsIC []string
	for _, domainIdsIIR := range domainIdsIR { // explode []int64

		domainIdsIIV := swag.FormatInt64(domainIdsIIR) // int64 as string
		domainIdsIC = append(domainIdsIC, domainIdsIIV)
	}

	// items.CollectionFormat: ""
	domainIdsIS := swag.JoinByFormat(domainIdsIC, "")

	return domainIdsIS
}

// bindParamGetOneDriveDocuments binds the parameter mailboxIds
func (o *GetOneDriveDocumentsParams) bindParamMailboxIds(formats strfmt.Registry) []string {
	mailboxIdsIR := o.MailboxIds

	var mailboxIdsIC []string
	for _, mailboxIdsIIR := range mailboxIdsIR { // explode []int64

		mailboxIdsIIV := swag.FormatInt64(mailboxIdsIIR) // int64 as string
		mailboxIdsIC = append(mailboxIdsIC, mailboxIdsIIV)
	}

	// items.CollectionFormat: ""
	mailboxIdsIS := swag.JoinByFormat(mailboxIdsIC, "")

	return mailboxIdsIS
}

// bindParamGetOneDriveDocuments binds the parameter protectionJobIds
func (o *GetOneDriveDocumentsParams) bindParamProtectionJobIds(formats strfmt.Registry) []string {
	protectionJobIdsIR := o.ProtectionJobIds

	var protectionJobIdsIC []string
	for _, protectionJobIdsIIR := range protectionJobIdsIR { // explode []int64

		protectionJobIdsIIV := swag.FormatInt64(protectionJobIdsIIR) // int64 as string
		protectionJobIdsIC = append(protectionJobIdsIC, protectionJobIdsIIV)
	}

	// items.CollectionFormat: ""
	protectionJobIdsIS := swag.JoinByFormat(protectionJobIdsIC, "")

	return protectionJobIdsIS
}
