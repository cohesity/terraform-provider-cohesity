// Code generated by go-swagger; DO NOT EDIT.

package restore_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cohesity/go-sdk/v1/models"
)

// CreateDownloadFilesAndFoldersReader is a Reader for the CreateDownloadFilesAndFolders structure.
type CreateDownloadFilesAndFoldersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDownloadFilesAndFoldersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateDownloadFilesAndFoldersCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreateDownloadFilesAndFoldersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateDownloadFilesAndFoldersCreated creates a CreateDownloadFilesAndFoldersCreated with default headers values
func NewCreateDownloadFilesAndFoldersCreated() *CreateDownloadFilesAndFoldersCreated {
	return &CreateDownloadFilesAndFoldersCreated{}
}

/*
CreateDownloadFilesAndFoldersCreated describes a response with status code 201, with default header values.

Success
*/
type CreateDownloadFilesAndFoldersCreated struct {
	Payload *models.RestoreTask
}

// IsSuccess returns true when this create download files and folders created response has a 2xx status code
func (o *CreateDownloadFilesAndFoldersCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create download files and folders created response has a 3xx status code
func (o *CreateDownloadFilesAndFoldersCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create download files and folders created response has a 4xx status code
func (o *CreateDownloadFilesAndFoldersCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create download files and folders created response has a 5xx status code
func (o *CreateDownloadFilesAndFoldersCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create download files and folders created response a status code equal to that given
func (o *CreateDownloadFilesAndFoldersCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create download files and folders created response
func (o *CreateDownloadFilesAndFoldersCreated) Code() int {
	return 201
}

func (o *CreateDownloadFilesAndFoldersCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/restore/downloadFilesAndFolders][%d] createDownloadFilesAndFoldersCreated %s", 201, payload)
}

func (o *CreateDownloadFilesAndFoldersCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/restore/downloadFilesAndFolders][%d] createDownloadFilesAndFoldersCreated %s", 201, payload)
}

func (o *CreateDownloadFilesAndFoldersCreated) GetPayload() *models.RestoreTask {
	return o.Payload
}

func (o *CreateDownloadFilesAndFoldersCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestoreTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDownloadFilesAndFoldersDefault creates a CreateDownloadFilesAndFoldersDefault with default headers values
func NewCreateDownloadFilesAndFoldersDefault(code int) *CreateDownloadFilesAndFoldersDefault {
	return &CreateDownloadFilesAndFoldersDefault{
		_statusCode: code,
	}
}

/*
CreateDownloadFilesAndFoldersDefault describes a response with status code -1, with default header values.

Error
*/
type CreateDownloadFilesAndFoldersDefault struct {
	_statusCode int

	Payload *models.RequestError
}

// IsSuccess returns true when this create download files and folders default response has a 2xx status code
func (o *CreateDownloadFilesAndFoldersDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create download files and folders default response has a 3xx status code
func (o *CreateDownloadFilesAndFoldersDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create download files and folders default response has a 4xx status code
func (o *CreateDownloadFilesAndFoldersDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create download files and folders default response has a 5xx status code
func (o *CreateDownloadFilesAndFoldersDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create download files and folders default response a status code equal to that given
func (o *CreateDownloadFilesAndFoldersDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create download files and folders default response
func (o *CreateDownloadFilesAndFoldersDefault) Code() int {
	return o._statusCode
}

func (o *CreateDownloadFilesAndFoldersDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/restore/downloadFilesAndFolders][%d] CreateDownloadFilesAndFolders default %s", o._statusCode, payload)
}

func (o *CreateDownloadFilesAndFoldersDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/restore/downloadFilesAndFolders][%d] CreateDownloadFilesAndFolders default %s", o._statusCode, payload)
}

func (o *CreateDownloadFilesAndFoldersDefault) GetPayload() *models.RequestError {
	return o.Payload
}

func (o *CreateDownloadFilesAndFoldersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
