// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateElastifileEntity private elastifile entity
//
// swagger:model PrivateElastifileEntity
type PrivateElastifileEntity struct {

	// Specific information of a cluster, only valid for an entity of type
	// 'kCluster'.
	ClusterInfo *PrivateClusterInfo `json:"clusterInfo,omitempty"`

	// Specific information of a container, only valid for an entity of type
	// 'kContainer'.
	ContainerInfo *ContainerInfo `json:"containerInfo,omitempty"`

	// The name of the entity.
	Name *string `json:"name,omitempty"`

	// The type of the entity.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this private elastifile entity
func (m *PrivateElastifileEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateElastifileEntity) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateElastifileEntity) validateContainerInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ContainerInfo) { // not required
		return nil
	}

	if m.ContainerInfo != nil {
		if err := m.ContainerInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("containerInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private elastifile entity based on the context it is used
func (m *PrivateElastifileEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContainerInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateElastifileEntity) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {

		if swag.IsZero(m.ClusterInfo) { // not required
			return nil
		}

		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateElastifileEntity) contextValidateContainerInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ContainerInfo != nil {

		if swag.IsZero(m.ContainerInfo) { // not required
			return nil
		}

		if err := m.ContainerInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("containerInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateElastifileEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateElastifileEntity) UnmarshalBinary(b []byte) error {
	var res PrivateElastifileEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
