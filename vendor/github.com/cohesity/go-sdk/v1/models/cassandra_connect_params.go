// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CassandraConnectParams Cassandra Connect Params.
//
// Specifies an Object containing information about a registered cassandra
// source.
//
// swagger:model CassandraConnectParams
type CassandraConnectParams struct {

	// Specifies the ports related info.
	CassandraPortsInfo *CassandraPortsInfo `json:"cassandraPortsInfo,omitempty"`

	// Specifies the security related info.
	CassandraSecurityInfo *CassandraSecurityInfo `json:"cassandraSecurityInfo,omitempty"`

	// Cassandra version
	CassandraVersion *string `json:"cassandraVersion,omitempty"`

	// Specifies the commit log archival location for cassandra node
	CommitLogBackupLocation *string `json:"commitLogBackupLocation,omitempty"`

	// Specifies the Directory path containing Config YAML for discovery.
	ConfigDirectory *string `json:"configDirectory,omitempty"`

	// Specifies the List of all physical data center or virtual data center.
	// In most cases, the data centers will be listed after discovery operation
	// however, if they are not listed, you must manually type the data center
	// names. Leaving the field blank will disallow data center-specific backup
	// or restore. Entering a subset of all data centers may cause problems
	// in data movement.
	DataCenters []string `json:"dataCenters"`

	// Specifies the Directory from where DSE specific configuration can be read.
	DseConfigDirectory *string `json:"dseConfigDirectory,omitempty"`

	// DSE version
	DseVersion *string `json:"dseVersion,omitempty"`

	// Specifies whether this cluster has DSE Authenticator.
	IsDseAuthenticator *bool `json:"isDseAuthenticator,omitempty"`

	// Specifies whether this cluster has DSE tiered storage.
	IsDseTieredStorage *bool `json:"isDseTieredStorage,omitempty"`

	// Specifies if JMX Authentication enabled in this cluster.
	IsJmxAuthEnable *bool `json:"isJmxAuthEnable,omitempty"`

	// Specifies the Kerberos Principal for Kerberos connection
	KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

	// Specifies the Primary Host for the Cassandra cluster.
	PrimaryHost *string `json:"primaryHost,omitempty"`

	// Specifies the Seed nodes of this Cassandra cluster.
	Seeds []string `json:"seeds"`

	// Specifies the Solr node IP Addresses
	SolrNodes []string `json:"solrNodes"`

	// Specifies the Solr node Port.
	SolrPort *int32 `json:"solrPort,omitempty"`
}

// Validate validates this cassandra connect params
func (m *CassandraConnectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCassandraPortsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraSecurityInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraConnectParams) validateCassandraPortsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraPortsInfo) { // not required
		return nil
	}

	if m.CassandraPortsInfo != nil {
		if err := m.CassandraPortsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraPortsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraPortsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraConnectParams) validateCassandraSecurityInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraSecurityInfo) { // not required
		return nil
	}

	if m.CassandraSecurityInfo != nil {
		if err := m.CassandraSecurityInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraSecurityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraSecurityInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cassandra connect params based on the context it is used
func (m *CassandraConnectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCassandraPortsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraSecurityInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraConnectParams) contextValidateCassandraPortsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraPortsInfo != nil {

		if swag.IsZero(m.CassandraPortsInfo) { // not required
			return nil
		}

		if err := m.CassandraPortsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraPortsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraPortsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraConnectParams) contextValidateCassandraSecurityInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraSecurityInfo != nil {

		if swag.IsZero(m.CassandraSecurityInfo) { // not required
			return nil
		}

		if err := m.CassandraSecurityInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraSecurityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraSecurityInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CassandraConnectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraConnectParams) UnmarshalBinary(b []byte) error {
	var res CassandraConnectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
