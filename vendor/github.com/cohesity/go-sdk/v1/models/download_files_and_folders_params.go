// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DownloadFilesAndFoldersParams Download Files And Folders Parameters.
//
// DownloadFilesAndFoldersParams holds the information to create a task for
// downloading list of files or folders
//
// swagger:model DownloadFilesAndFoldersParams
type DownloadFilesAndFoldersParams struct {

	// Specifies the absolute paths for list of files and folders to download.
	FilesAndFoldersInfo []*FilesAndFoldersInfo `json:"filesAndFoldersInfo"`

	// Specifies the name of the Download Task. This field must be set and must
	// be a unique name.
	// Required: true
	Name *string `json:"name"`

	// Specifies the details of the task that is created in order to download
	// the specified list of files and folders.
	SourceObjectInfo *RestoreObjectDetails `json:"sourceObjectInfo,omitempty"`
}

// Validate validates this download files and folders params
func (m *DownloadFilesAndFoldersParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilesAndFoldersInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceObjectInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DownloadFilesAndFoldersParams) validateFilesAndFoldersInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FilesAndFoldersInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.FilesAndFoldersInfo); i++ {
		if swag.IsZero(m.FilesAndFoldersInfo[i]) { // not required
			continue
		}

		if m.FilesAndFoldersInfo[i] != nil {
			if err := m.FilesAndFoldersInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filesAndFoldersInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filesAndFoldersInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DownloadFilesAndFoldersParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DownloadFilesAndFoldersParams) validateSourceObjectInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceObjectInfo) { // not required
		return nil
	}

	if m.SourceObjectInfo != nil {
		if err := m.SourceObjectInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceObjectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceObjectInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this download files and folders params based on the context it is used
func (m *DownloadFilesAndFoldersParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilesAndFoldersInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceObjectInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DownloadFilesAndFoldersParams) contextValidateFilesAndFoldersInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilesAndFoldersInfo); i++ {

		if m.FilesAndFoldersInfo[i] != nil {

			if swag.IsZero(m.FilesAndFoldersInfo[i]) { // not required
				return nil
			}

			if err := m.FilesAndFoldersInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filesAndFoldersInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filesAndFoldersInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DownloadFilesAndFoldersParams) contextValidateSourceObjectInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceObjectInfo != nil {

		if swag.IsZero(m.SourceObjectInfo) { // not required
			return nil
		}

		if err := m.SourceObjectInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceObjectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceObjectInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DownloadFilesAndFoldersParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DownloadFilesAndFoldersParams) UnmarshalBinary(b []byte) error {
	var res DownloadFilesAndFoldersParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
