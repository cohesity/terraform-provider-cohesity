// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DayTime Specifies the DayTime parameters definition.
//
// swagger:model DayTime
type DayTime struct {

	// Specifies the day of the week (such as 'kMonday') for scheduling
	// throttling.
	// Specifies a day in a week such as 'kSunday', 'kMonday', etc.
	// Enum: ["kSunday","kMonday","kTuesday","kWednesday","kThursday","kFriday","kSaturday"]
	Day *string `json:"day,omitempty"`

	// Specifies the information regarding the scheduled time.
	Time *Time `json:"time,omitempty"`
}

// Validate validates this day time
func (m *DayTime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dayTimeTypeDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSunday","kMonday","kTuesday","kWednesday","kThursday","kFriday","kSaturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dayTimeTypeDayPropEnum = append(dayTimeTypeDayPropEnum, v)
	}
}

const (

	// DayTimeDayKSunday captures enum value "kSunday"
	DayTimeDayKSunday string = "kSunday"

	// DayTimeDayKMonday captures enum value "kMonday"
	DayTimeDayKMonday string = "kMonday"

	// DayTimeDayKTuesday captures enum value "kTuesday"
	DayTimeDayKTuesday string = "kTuesday"

	// DayTimeDayKWednesday captures enum value "kWednesday"
	DayTimeDayKWednesday string = "kWednesday"

	// DayTimeDayKThursday captures enum value "kThursday"
	DayTimeDayKThursday string = "kThursday"

	// DayTimeDayKFriday captures enum value "kFriday"
	DayTimeDayKFriday string = "kFriday"

	// DayTimeDayKSaturday captures enum value "kSaturday"
	DayTimeDayKSaturday string = "kSaturday"
)

// prop value enum
func (m *DayTime) validateDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dayTimeTypeDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DayTime) validateDay(formats strfmt.Registry) error {
	if swag.IsZero(m.Day) { // not required
		return nil
	}

	// value enum
	if err := m.validateDayEnum("day", "body", *m.Day); err != nil {
		return err
	}

	return nil
}

func (m *DayTime) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if m.Time != nil {
		if err := m.Time.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("time")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this day time based on the context it is used
func (m *DayTime) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DayTime) contextValidateTime(ctx context.Context, formats strfmt.Registry) error {

	if m.Time != nil {

		if swag.IsZero(m.Time) { // not required
			return nil
		}

		if err := m.Time.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("time")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DayTime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DayTime) UnmarshalBinary(b []byte) error {
	var res DayTime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
