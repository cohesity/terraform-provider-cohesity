// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RpoSchedule RPO Schedule.
//
// Specifies an RPO Schedule.
//
// swagger:model RpoSchedule
type RpoSchedule struct {

	// Specifies an RPO policy interval unit which will be used along with the
	// multiplier to calculate the interval for the RPO policy execution.
	// this can be kHours, kDays, KWeeks, kMonths
	// RPOIntervalUnit.
	//
	// Specifies an RPO Schedule interval unit.
	// kMinute specifies that the rpo interval unit is hours.
	// kHour specifies that the rpo interval unit is hours.
	// kDay specifies that the rpo interval unit is days.
	// kWeek specifies that the rpo interval unit is weeks.
	// kMonth specifies that the rpo interval unit is months.
	// Enum: ["kMinute","kHour","kDay","kWeek","kMonth"]
	IntervalUnit *string `json:"intervalUnit,omitempty"`

	// Specifies the multiplier value to be used with the  RPO interval unit
	// value.
	Multiplier *int64 `json:"multiplier,omitempty"`
}

// Validate validates this rpo schedule
func (m *RpoSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntervalUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rpoScheduleTypeIntervalUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kMinute","kHour","kDay","kWeek","kMonth"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rpoScheduleTypeIntervalUnitPropEnum = append(rpoScheduleTypeIntervalUnitPropEnum, v)
	}
}

const (

	// RpoScheduleIntervalUnitKMinute captures enum value "kMinute"
	RpoScheduleIntervalUnitKMinute string = "kMinute"

	// RpoScheduleIntervalUnitKHour captures enum value "kHour"
	RpoScheduleIntervalUnitKHour string = "kHour"

	// RpoScheduleIntervalUnitKDay captures enum value "kDay"
	RpoScheduleIntervalUnitKDay string = "kDay"

	// RpoScheduleIntervalUnitKWeek captures enum value "kWeek"
	RpoScheduleIntervalUnitKWeek string = "kWeek"

	// RpoScheduleIntervalUnitKMonth captures enum value "kMonth"
	RpoScheduleIntervalUnitKMonth string = "kMonth"
)

// prop value enum
func (m *RpoSchedule) validateIntervalUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rpoScheduleTypeIntervalUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RpoSchedule) validateIntervalUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.IntervalUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntervalUnitEnum("intervalUnit", "body", *m.IntervalUnit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rpo schedule based on context it is used
func (m *RpoSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RpoSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RpoSchedule) UnmarshalBinary(b []byte) error {
	var res RpoSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
