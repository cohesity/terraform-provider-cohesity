// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdRestoreParameters AD Application Server Restore Parameters.
//
// Specifies the parameters specific to Application domain controller.
//
// swagger:model AdRestoreParameters
type AdRestoreParameters struct {

	// Specifies the Active Directory options for the Restore task.
	AdOptions *AdRestoreOptions `json:"adOptions,omitempty"`

	// Specifies the credentials which are needed to connect to Production AD.
	Credentials *Credentials `json:"credentials,omitempty"`

	// Specifies the option to mount the AD snapshot database and restore
	// the AD objects in a single restore task.
	// AdOptions must be set if this is set to true.
	MountAndRestore *bool `json:"mountAndRestore,omitempty"`

	// Specifies the port on which the AD domain controller's NTDS database will
	// be mounted.
	Port *int32 `json:"port,omitempty"`
}

// Validate validates this ad restore parameters
func (m *AdRestoreParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdRestoreParameters) validateAdOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AdOptions) { // not required
		return nil
	}

	if m.AdOptions != nil {
		if err := m.AdOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adOptions")
			}
			return err
		}
	}

	return nil
}

func (m *AdRestoreParameters) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ad restore parameters based on the context it is used
func (m *AdRestoreParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdRestoreParameters) contextValidateAdOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.AdOptions != nil {

		if swag.IsZero(m.AdOptions) { // not required
			return nil
		}

		if err := m.AdOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adOptions")
			}
			return err
		}
	}

	return nil
}

func (m *AdRestoreParameters) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdRestoreParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdRestoreParameters) UnmarshalBinary(b []byte) error {
	var res AdRestoreParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
