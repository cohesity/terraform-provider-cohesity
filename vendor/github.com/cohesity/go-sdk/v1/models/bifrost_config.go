// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BifrostConfig BifrostConfig.
//
// Specifies the settings of a BifrostConfig.
// Its used by both Request and Response structures.
//
// swagger:model BifrostConfig
type BifrostConfig struct {

	// Specifies the bifrost image version.
	ImageVersion *string `json:"ImageVersion,omitempty"`

	// Specifies the cpu for the bifrost config.
	CPU *int32 `json:"cpu,omitempty"`

	// Specifies a description of the VLAN.
	Description *string `json:"description,omitempty"`

	// Specifies the id of the VLAN tag.
	ID *int32 `json:"id,omitempty"`

	// Specifies the interface group name of the VLAN. It is in the format of
	// <base_interface_group_name>.<vlan_id>.
	IfaceGroupName *string `json:"ifaceGroupName,omitempty"`

	// Specifies the memory for the bifrost config.
	Memory *int32 `json:"memory,omitempty"`

	// Specifies the mtu for the bifrost vlan.
	Mtu *int32 `json:"mtu,omitempty"`

	// 4 types of States
	// UNKNOWN
	// ACTIVE
	// DISABLED
	// DELETING
	State *string `json:"state,omitempty"`

	// Subnet.
	//
	// Specifies the subnet of the VLAN.
	// The netmask can be specified by setting netmaskBits or netmaskIp4.
	// The netmask can only be set using netmaskIp4 if the IP address is
	// an IPv4 address. It can carry V4 or V6 in case of requests, and carries
	// V4 in case of response.
	Subnet struct {
		BifrostSubnet
	} `json:"subnet,omitempty"`

	// Specifies the tenant id that this vlan belongs to.
	TenantID *string `json:"tenantId,omitempty"`

	// Two types of bifrost vlans.
	// INTERNAL
	// EXTERNAL
	Type *string `json:"type,omitempty"`

	// Specifies the VLAN name of the vlanId.
	VlanName *string `json:"vlanName,omitempty"`
}

// Validate validates this bifrost config
func (m *BifrostConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BifrostConfig) validateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this bifrost config based on the context it is used
func (m *BifrostConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BifrostConfig) contextValidateSubnet(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *BifrostConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BifrostConfig) UnmarshalBinary(b []byte) error {
	var res BifrostConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
