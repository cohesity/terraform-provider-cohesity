// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SourceSpecialParameter Source Special Parameters.
//
// Specifies additional special settings for a single Source in a Protection
// Job. This Source must be a leaf node in the Source tree.
//
// swagger:model SourceSpecialParameter
type SourceSpecialParameter struct {

	// Specifies additional special parameters that are applicable only to
	// Protection Sources of 'kAD' type.
	AdSpecialParameters *ApplicationSpecialParameters `json:"adSpecialParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Protection Sources of 'kExchange' type.
	ExchangeSpecialParameters *ApplicationSpecialParameters `json:"exchangeSpecialParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Protection Sources of 'kOracle' type.
	OracleSpecialParameters *OracleSpecialParameters `json:"oracleSpecialParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Sources of 'kHost' type in a kPhysical environment.
	PhysicalSpecialParameters *PhysicalSpecialParameters `json:"physicalSpecialParameters,omitempty"`

	// Specifies not to index the objects in the Protection Source when
	// backing up.
	SkipIndexing *bool `json:"skipIndexing,omitempty"`

	// Specifies the object id of the Protection Source that these
	// special settings apply. This field must refer to a leaf node
	// such a VM or a Physical Server.
	SourceID *int64 `json:"sourceId,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Protection Sources of 'kSQL' type.
	SQLSpecialParameters *ApplicationSpecialParameters `json:"sqlSpecialParameters,omitempty"`

	// If true, after the Cohesity Cluster successfully captures a Snapshot
	// during a Job Run, the Cluster truncates the Exchange transaction logs on
	// a Microsoft Exchange Server. The default value is false.
	// This field is deprecated. Use the field in ApplicationParameters inside
	// source specific parameter.
	// deprecated: true
	TruncateExchangeLog *bool `json:"truncateExchangeLog,omitempty"`

	// VM Credentials.
	//
	// Specifies the administrator credentials to log in to the
	// guest Windows system of a VM that hosts the Microsoft Exchange Server.
	// If truncateExchangeLog is set to true and the specified source
	// is a VM, administrator credentials to log in to the guest Windows system
	// of the VM must be provided to truncate the logs.
	// This field is only applicable to Sources in the kVMware environment.
	// This field is deprecated. Use the field in VmCredentials inside
	// source specific parameter.
	// deprecated: true
	VMCredentials struct {
		Credentials
	} `json:"vmCredentials,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Protection Sources of 'kVMware' type.
	VmwareSpecialParameters *VmwareSpecialParameters `json:"vmwareSpecialParameters,omitempty"`
}

// Validate validates this source special parameter
func (m *SourceSpecialParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdSpecialParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeSpecialParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleSpecialParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalSpecialParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLSpecialParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareSpecialParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceSpecialParameter) validateAdSpecialParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.AdSpecialParameters) { // not required
		return nil
	}

	if m.AdSpecialParameters != nil {
		if err := m.AdSpecialParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adSpecialParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SourceSpecialParameter) validateExchangeSpecialParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeSpecialParameters) { // not required
		return nil
	}

	if m.ExchangeSpecialParameters != nil {
		if err := m.ExchangeSpecialParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeSpecialParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SourceSpecialParameter) validateOracleSpecialParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleSpecialParameters) { // not required
		return nil
	}

	if m.OracleSpecialParameters != nil {
		if err := m.OracleSpecialParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleSpecialParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SourceSpecialParameter) validatePhysicalSpecialParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalSpecialParameters) { // not required
		return nil
	}

	if m.PhysicalSpecialParameters != nil {
		if err := m.PhysicalSpecialParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalSpecialParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SourceSpecialParameter) validateSQLSpecialParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLSpecialParameters) { // not required
		return nil
	}

	if m.SQLSpecialParameters != nil {
		if err := m.SQLSpecialParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlSpecialParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SourceSpecialParameter) validateVMCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.VMCredentials) { // not required
		return nil
	}

	return nil
}

func (m *SourceSpecialParameter) validateVmwareSpecialParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareSpecialParameters) { // not required
		return nil
	}

	if m.VmwareSpecialParameters != nil {
		if err := m.VmwareSpecialParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareSpecialParameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this source special parameter based on the context it is used
func (m *SourceSpecialParameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdSpecialParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeSpecialParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleSpecialParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalSpecialParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLSpecialParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareSpecialParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceSpecialParameter) contextValidateAdSpecialParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.AdSpecialParameters != nil {

		if swag.IsZero(m.AdSpecialParameters) { // not required
			return nil
		}

		if err := m.AdSpecialParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adSpecialParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SourceSpecialParameter) contextValidateExchangeSpecialParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeSpecialParameters != nil {

		if swag.IsZero(m.ExchangeSpecialParameters) { // not required
			return nil
		}

		if err := m.ExchangeSpecialParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeSpecialParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SourceSpecialParameter) contextValidateOracleSpecialParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleSpecialParameters != nil {

		if swag.IsZero(m.OracleSpecialParameters) { // not required
			return nil
		}

		if err := m.OracleSpecialParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleSpecialParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SourceSpecialParameter) contextValidatePhysicalSpecialParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalSpecialParameters != nil {

		if swag.IsZero(m.PhysicalSpecialParameters) { // not required
			return nil
		}

		if err := m.PhysicalSpecialParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalSpecialParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SourceSpecialParameter) contextValidateSQLSpecialParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLSpecialParameters != nil {

		if swag.IsZero(m.SQLSpecialParameters) { // not required
			return nil
		}

		if err := m.SQLSpecialParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlSpecialParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SourceSpecialParameter) contextValidateVMCredentials(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SourceSpecialParameter) contextValidateVmwareSpecialParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareSpecialParameters != nil {

		if swag.IsZero(m.VmwareSpecialParameters) { // not required
			return nil
		}

		if err := m.VmwareSpecialParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareSpecialParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareSpecialParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SourceSpecialParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceSpecialParameter) UnmarshalBinary(b []byte) error {
	var res SourceSpecialParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
