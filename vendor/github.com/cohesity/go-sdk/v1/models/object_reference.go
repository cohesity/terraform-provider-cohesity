// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectReference ObjectReference contains enough information to let you inspect or modify the
// referred object.
//
// swagger:model ObjectReference
type ObjectReference struct {

	// API group make it easier to extend the Kubernetes API. The API group is
	// specified in a REST path and in the apiVersion field.
	APIGroup *string `json:"apiGroup,omitempty"`

	// APIVersion defines the versioned schema of this representation of an
	// object. Servers should convert recognized schemas to the latest internal
	// value, and may reject unrecognized values.
	APIVersion *string `json:"apiVersion,omitempty"`

	// Kind is a string value representing the REST resource this object
	// represents. Servers may infer this from the endpoint the client submits
	// requests to.
	Kind *string `json:"kind,omitempty"`

	// Name of the referent.
	Name *string `json:"name,omitempty"`

	// Namespace of the referent.
	Namespace *string `json:"namespace,omitempty"`

	// Specific resourceVersion to which this reference is made, if any.
	ResourceVersion *string `json:"resourceVersion,omitempty"`

	// UID of the referent.
	UID *string `json:"uid,omitempty"`
}

// Validate validates this object reference
func (m *ObjectReference) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this object reference based on context it is used
func (m *ObjectReference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ObjectReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectReference) UnmarshalBinary(b []byte) error {
	var res ObjectReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
