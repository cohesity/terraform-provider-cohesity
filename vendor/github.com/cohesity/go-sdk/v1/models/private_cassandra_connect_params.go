// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateCassandraConnectParams Contains specific parameters required to connect to a cassandra cluster.
//
// swagger:model PrivateCassandraConnectParams
type PrivateCassandraConnectParams struct {

	// Cassandra credentials.
	CassandraCredentials *PrivateCredentials `json:"cassandraCredentials,omitempty"`

	// Basic parameters required to read config from Cassandra primary.
	CassandraDiscoveryParams *CassandraDiscoveryParams `json:"cassandraDiscoveryParams,omitempty"`

	// Specific ports info.
	CassandraPortsInfo *CassandraPortInfo `json:"cassandraPortsInfo,omitempty"`

	// Security related fields.
	CassandraSecurityInfo *PrivateCassandraSecurityInfo `json:"cassandraSecurityInfo,omitempty"`

	// Is JMX Authentication enabled in this cluster.
	IsCassandraJmxAuthEnabled *bool `json:"isCassandraJmxAuthEnabled,omitempty"`

	// JMX Credentials.
	JmxCredentials *PrivateCredentials `json:"jmxCredentials,omitempty"`

	// Principal for kerberos connection
	// Set if authentication type is Kerberos.
	KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

	// Populated if cassandra_auth_type is Kerberos.
	KerberosSaslProtocol *string `json:"kerberosSaslProtocol,omitempty"`

	// Cassandra seed nodes.
	SeedVec []string `json:"seedVec"`
}

// Validate validates this private cassandra connect params
func (m *PrivateCassandraConnectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCassandraCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraDiscoveryParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraPortsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraSecurityInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJmxCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateCassandraConnectParams) validateCassandraCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraCredentials) { // not required
		return nil
	}

	if m.CassandraCredentials != nil {
		if err := m.CassandraCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateCassandraConnectParams) validateCassandraDiscoveryParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraDiscoveryParams) { // not required
		return nil
	}

	if m.CassandraDiscoveryParams != nil {
		if err := m.CassandraDiscoveryParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraDiscoveryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraDiscoveryParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateCassandraConnectParams) validateCassandraPortsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraPortsInfo) { // not required
		return nil
	}

	if m.CassandraPortsInfo != nil {
		if err := m.CassandraPortsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraPortsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraPortsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateCassandraConnectParams) validateCassandraSecurityInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraSecurityInfo) { // not required
		return nil
	}

	if m.CassandraSecurityInfo != nil {
		if err := m.CassandraSecurityInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraSecurityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraSecurityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateCassandraConnectParams) validateJmxCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.JmxCredentials) { // not required
		return nil
	}

	if m.JmxCredentials != nil {
		if err := m.JmxCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jmxCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jmxCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private cassandra connect params based on the context it is used
func (m *PrivateCassandraConnectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCassandraCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraDiscoveryParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraPortsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraSecurityInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJmxCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateCassandraConnectParams) contextValidateCassandraCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraCredentials != nil {

		if swag.IsZero(m.CassandraCredentials) { // not required
			return nil
		}

		if err := m.CassandraCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateCassandraConnectParams) contextValidateCassandraDiscoveryParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraDiscoveryParams != nil {

		if swag.IsZero(m.CassandraDiscoveryParams) { // not required
			return nil
		}

		if err := m.CassandraDiscoveryParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraDiscoveryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraDiscoveryParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateCassandraConnectParams) contextValidateCassandraPortsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraPortsInfo != nil {

		if swag.IsZero(m.CassandraPortsInfo) { // not required
			return nil
		}

		if err := m.CassandraPortsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraPortsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraPortsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateCassandraConnectParams) contextValidateCassandraSecurityInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraSecurityInfo != nil {

		if swag.IsZero(m.CassandraSecurityInfo) { // not required
			return nil
		}

		if err := m.CassandraSecurityInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraSecurityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraSecurityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateCassandraConnectParams) contextValidateJmxCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.JmxCredentials != nil {

		if swag.IsZero(m.JmxCredentials) { // not required
			return nil
		}

		if err := m.JmxCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jmxCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jmxCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateCassandraConnectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateCassandraConnectParams) UnmarshalBinary(b []byte) error {
	var res PrivateCassandraConnectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
