// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupPolicyProto DEPRECATED in 5.0!
//
// If a backup does not get a chance to when it's due (either due to the system
// being busy or a conflict with another instance of the same job), the backup
// will still be run when the conflicts go away. But, if there are multiple
// instances of the same job that are due to be run, only the latest instance
// would be run.
//
// swagger:model BackupPolicyProto
type BackupPolicyProto struct {

	// Set if periodicity is kContinuous.
	ContinuousSchedule *BackupPolicyProtoContinuousSchedule `json:"continuousSchedule,omitempty"`

	// Set if periodicity is kDaily.
	DailySchedule *BackupPolicyProtoDailySchedule `json:"dailySchedule,omitempty"`

	// Set if periodicity is kMonthly.
	MonthlySchedule *BackupPolicyProtoMonthlySchedule `json:"monthlySchedule,omitempty"`

	// A backup schedule can have an optional name.
	Name *string `json:"name,omitempty"`

	// Specifies how to determine the expiration time for snapshots created by
	// a backup run. The snapshots will be marked as expiring (i.e., eligible
	// to be garbage collected) in 'num_days_to_keep' days from when the
	// snapshots were created.
	NumDaysToKeep *int64 `json:"numDaysToKeep,omitempty"`

	// The number of retries to perform (for retryable errors) before giving up.
	NumRetries *int32 `json:"numRetries,omitempty"`

	// Set if periodicity is kOneOff.
	OneOffSchedule *BackupPolicyProtoOneOffSchedule `json:"oneOffSchedule,omitempty"`

	// Determines how often the job should be run.
	Periodicity *int32 `json:"periodicity,omitempty"`

	// The number of minutes to wait before retrying a failed job.
	RetryDelayMins *int32 `json:"retryDelayMins,omitempty"`

	// Determines when this schedule ends (if at all).
	ScheduleEnd *BackupPolicyProtoScheduleEnd `json:"scheduleEnd,omitempty"`

	// This field determines the amount of time (in minutes) after which a
	// scheduled job will not be started. For example, if a job is scheduled to
	// be run every Sunday at 5am, and this field is set to 30 minutes, but the
	// job was unable to start by 5:30am on a Sunday due to other conflicts (say
	// too many other jobs were already running), Magneto will not attempt to
	// start the job until the next scheduled time (on the following Sunday).
	// If this field is not set, the interval will be determined by the Magneto
	// flag --magneto_master_default_start_window_interval_mins.
	StartWindowIntervalMins *int32 `json:"startWindowIntervalMins,omitempty"`

	// Whether to truncate logs after a backup run. This is currently only
	// relevant for full or incremental backups in a SQL environment.
	TruncateLogs *bool `json:"truncateLogs,omitempty"`
}

// Validate validates this backup policy proto
func (m *BackupPolicyProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContinuousSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailySchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthlySchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneOffSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleEnd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPolicyProto) validateContinuousSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.ContinuousSchedule) { // not required
		return nil
	}

	if m.ContinuousSchedule != nil {
		if err := m.ContinuousSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuousSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("continuousSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPolicyProto) validateDailySchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.DailySchedule) { // not required
		return nil
	}

	if m.DailySchedule != nil {
		if err := m.DailySchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dailySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dailySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPolicyProto) validateMonthlySchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.MonthlySchedule) { // not required
		return nil
	}

	if m.MonthlySchedule != nil {
		if err := m.MonthlySchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthlySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthlySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPolicyProto) validateOneOffSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.OneOffSchedule) { // not required
		return nil
	}

	if m.OneOffSchedule != nil {
		if err := m.OneOffSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneOffSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneOffSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPolicyProto) validateScheduleEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleEnd) { // not required
		return nil
	}

	if m.ScheduleEnd != nil {
		if err := m.ScheduleEnd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleEnd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduleEnd")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup policy proto based on the context it is used
func (m *BackupPolicyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContinuousSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDailySchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonthlySchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneOffSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduleEnd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPolicyProto) contextValidateContinuousSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.ContinuousSchedule != nil {

		if swag.IsZero(m.ContinuousSchedule) { // not required
			return nil
		}

		if err := m.ContinuousSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuousSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("continuousSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPolicyProto) contextValidateDailySchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.DailySchedule != nil {

		if swag.IsZero(m.DailySchedule) { // not required
			return nil
		}

		if err := m.DailySchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dailySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dailySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPolicyProto) contextValidateMonthlySchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.MonthlySchedule != nil {

		if swag.IsZero(m.MonthlySchedule) { // not required
			return nil
		}

		if err := m.MonthlySchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthlySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthlySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPolicyProto) contextValidateOneOffSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.OneOffSchedule != nil {

		if swag.IsZero(m.OneOffSchedule) { // not required
			return nil
		}

		if err := m.OneOffSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneOffSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneOffSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPolicyProto) contextValidateScheduleEnd(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduleEnd != nil {

		if swag.IsZero(m.ScheduleEnd) { // not required
			return nil
		}

		if err := m.ScheduleEnd.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleEnd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduleEnd")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupPolicyProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupPolicyProto) UnmarshalBinary(b []byte) error {
	var res BackupPolicyProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
