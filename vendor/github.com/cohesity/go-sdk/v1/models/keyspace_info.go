// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KeyspaceInfo TODO(nirav): Remove this while rebasing.
//
// Proto that contains specific information about a cassandra keyspace.
//
// swagger:model KeyspaceInfo
type KeyspaceInfo struct {

	// Count of tables in this keyspace.
	ChildrenCount *uint32 `json:"childrenCount,omitempty"`

	// If the replication strategy is set as kNetwork, then
	// dc_list will have a list of data centers to which the
	// keyspace is being replicated to.
	DcList []string `json:"dcList"`

	// Additional information associated with a graph type keyspace.
	// Valid if keyspace type is kGraph
	GraphInfo *GraphKeyspaceInfo `json:"graphInfo,omitempty"`

	// Type of the keyspace
	KeyspaceType *int32 `json:"keyspaceType,omitempty"`

	// Replication stragegy for the keyspace.
	ReplicationStrategy *int32 `json:"replicationStrategy,omitempty"`
}

// Validate validates this keyspace info
func (m *KeyspaceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGraphInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyspaceInfo) validateGraphInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.GraphInfo) { // not required
		return nil
	}

	if m.GraphInfo != nil {
		if err := m.GraphInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("graphInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("graphInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this keyspace info based on the context it is used
func (m *KeyspaceInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGraphInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyspaceInfo) contextValidateGraphInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.GraphInfo != nil {

		if swag.IsZero(m.GraphInfo) { // not required
			return nil
		}

		if err := m.GraphInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("graphInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("graphInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyspaceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyspaceInfo) UnmarshalBinary(b []byte) error {
	var res KeyspaceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
