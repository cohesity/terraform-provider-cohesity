// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupJobSummaryProto backup job summary proto
//
// swagger:model BackupJobSummaryProto
type BackupJobSummaryProto struct {

	// Information about change mode (if any) running for this backup job.
	ActiveChangeModeState *ChangeBackupJobModeProto `json:"activeChangeModeState,omitempty"`

	// List of tenant ids that are authorized to access/modify this backup job
	// when multi-tenancy is enabled in the cluster.
	AuthorizedTenantIDVec []string `json:"authorizedTenantIdVec"`

	// Average run time for a successful instance of the job.
	AvgRunTimeUsecs *int64 `json:"avgRunTimeUsecs,omitempty"`

	// Information about last finished change mode operation (if any).
	FinishedChangeModeState *ChangeBackupJobModeProto `json:"finishedChangeModeState,omitempty"`

	// Entities which are not valid for a job. Currently used only for O365
	// OneDrive case.
	InvalidEntityInfoVec []*BackupJobSummaryProtoMissingEntityInfo `json:"invalidEntityInfoVec"`

	// Denotes whether the backup job is CloudArchiveDirect (excluding NAS direct
	// archive in native format). NAS direct archive jobs in native format can be
	// identified by checking for the 'is_direct_archive_enabled' field in the
	// job_description proto.
	// TODO(prem): This field is redundant, since the same information is
	// populated in job description during CloudArchiveDirect job creation.
	// Remove this field once Iris stops referring to it.
	IsCloudArchiveDirect *bool `json:"isCloudArchiveDirect,omitempty"`

	// Set to true if it is protected by protectonce policy.
	// NOTE: Below field is filled only while sending response to iris.
	// Internally master can infer whether this is a protect-once job by looking
	// at the policy.
	IsProtectOnce *bool `json:"isProtectOnce,omitempty"`

	// The job for which summary is being described below.
	JobDescription *BackupJobProto `json:"jobDescription,omitempty"`

	// Information about the most recent protection run of the job.
	LastProtectionRun *ProtectionRunStateProto `json:"lastProtectionRun,omitempty"`

	// Time taken for the slowest successful run of the job.
	MaxRunTimeUsecs *int64 `json:"maxRunTimeUsecs,omitempty"`

	// Time taken for the fastest successful run of the job.
	MinRunTimeUsecs *int64 `json:"minRunTimeUsecs,omitempty"`

	// Deprecated fields below.
	MissingEntityIDVec []int64 `json:"missingEntityIdVec"`

	// missing entity info vec
	MissingEntityInfoVec []*BackupJobSummaryProtoMissingEntityInfo `json:"missingEntityInfoVec"`

	// num cancelled job runs
	NumCancelledJobRuns *int64 `json:"numCancelledJobRuns,omitempty"`

	// num failed job runs
	NumFailedJobRuns *int64 `json:"numFailedJobRuns,omitempty"`

	// Number of objects backed up by various runs of the job. NOTE: If an object
	// was backed up in two different runs of the same job, it will be counted
	// twice.
	NumObjectsBackedUp *int64 `json:"numObjectsBackedUp,omitempty"`

	// Total number of SLA violations.
	NumSLAViolations *int64 `json:"numSlaViolations,omitempty"`

	// Number of successful, failed and cancelled runs the job has had.
	NumSuccessfulJobRuns *int64 `json:"numSuccessfulJobRuns,omitempty"`

	// Total amount of data read from the source of the backup.
	TotalBytesReadFromSource *int64 `json:"totalBytesReadFromSource,omitempty"`

	// Logical size of all the backups combined. This is the amount of data we
	// would have read from the source(s) had each run of the backup job been a
	// full-backup.
	TotalLogicalBackupSizeBytes *int64 `json:"totalLogicalBackupSizeBytes,omitempty"`

	// Physical size in bytes of all entities backed up by this job over all
	// finished backups combined. This field could be empty if there is no known
	// information.
	TotalPhysicalBackupSizeBytes *int64 `json:"totalPhysicalBackupSizeBytes,omitempty"`
}

// Validate validates this backup job summary proto
func (m *BackupJobSummaryProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveChangeModeState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishedChangeModeState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvalidEntityInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastProtectionRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMissingEntityInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobSummaryProto) validateActiveChangeModeState(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveChangeModeState) { // not required
		return nil
	}

	if m.ActiveChangeModeState != nil {
		if err := m.ActiveChangeModeState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeChangeModeState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activeChangeModeState")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSummaryProto) validateFinishedChangeModeState(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishedChangeModeState) { // not required
		return nil
	}

	if m.FinishedChangeModeState != nil {
		if err := m.FinishedChangeModeState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("finishedChangeModeState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("finishedChangeModeState")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSummaryProto) validateInvalidEntityInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.InvalidEntityInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.InvalidEntityInfoVec); i++ {
		if swag.IsZero(m.InvalidEntityInfoVec[i]) { // not required
			continue
		}

		if m.InvalidEntityInfoVec[i] != nil {
			if err := m.InvalidEntityInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invalidEntityInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("invalidEntityInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupJobSummaryProto) validateJobDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.JobDescription) { // not required
		return nil
	}

	if m.JobDescription != nil {
		if err := m.JobDescription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobDescription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobDescription")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSummaryProto) validateLastProtectionRun(formats strfmt.Registry) error {
	if swag.IsZero(m.LastProtectionRun) { // not required
		return nil
	}

	if m.LastProtectionRun != nil {
		if err := m.LastProtectionRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastProtectionRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastProtectionRun")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSummaryProto) validateMissingEntityInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.MissingEntityInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.MissingEntityInfoVec); i++ {
		if swag.IsZero(m.MissingEntityInfoVec[i]) { // not required
			continue
		}

		if m.MissingEntityInfoVec[i] != nil {
			if err := m.MissingEntityInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("missingEntityInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("missingEntityInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this backup job summary proto based on the context it is used
func (m *BackupJobSummaryProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveChangeModeState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFinishedChangeModeState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvalidEntityInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastProtectionRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMissingEntityInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobSummaryProto) contextValidateActiveChangeModeState(ctx context.Context, formats strfmt.Registry) error {

	if m.ActiveChangeModeState != nil {

		if swag.IsZero(m.ActiveChangeModeState) { // not required
			return nil
		}

		if err := m.ActiveChangeModeState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeChangeModeState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activeChangeModeState")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSummaryProto) contextValidateFinishedChangeModeState(ctx context.Context, formats strfmt.Registry) error {

	if m.FinishedChangeModeState != nil {

		if swag.IsZero(m.FinishedChangeModeState) { // not required
			return nil
		}

		if err := m.FinishedChangeModeState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("finishedChangeModeState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("finishedChangeModeState")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSummaryProto) contextValidateInvalidEntityInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InvalidEntityInfoVec); i++ {

		if m.InvalidEntityInfoVec[i] != nil {

			if swag.IsZero(m.InvalidEntityInfoVec[i]) { // not required
				return nil
			}

			if err := m.InvalidEntityInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invalidEntityInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("invalidEntityInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupJobSummaryProto) contextValidateJobDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.JobDescription != nil {

		if swag.IsZero(m.JobDescription) { // not required
			return nil
		}

		if err := m.JobDescription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobDescription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobDescription")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSummaryProto) contextValidateLastProtectionRun(ctx context.Context, formats strfmt.Registry) error {

	if m.LastProtectionRun != nil {

		if swag.IsZero(m.LastProtectionRun) { // not required
			return nil
		}

		if err := m.LastProtectionRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastProtectionRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastProtectionRun")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSummaryProto) contextValidateMissingEntityInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MissingEntityInfoVec); i++ {

		if m.MissingEntityInfoVec[i] != nil {

			if swag.IsZero(m.MissingEntityInfoVec[i]) { // not required
				return nil
			}

			if err := m.MissingEntityInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("missingEntityInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("missingEntityInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupJobSummaryProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupJobSummaryProto) UnmarshalBinary(b []byte) error {
	var res BackupJobSummaryProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
