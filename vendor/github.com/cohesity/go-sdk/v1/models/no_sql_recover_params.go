// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NoSQLRecoverParams no Sql recover params
//
// swagger:model NoSqlRecoverParams
type NoSQLRecoverParams struct {

	// end sequencer
	EndSequencer *Sequencer `json:"endSequencer,omitempty"`

	// List of leaf level entities with their corrosponding LogData.
	EntityLogs []*NoSQLRecoverParamsEntityLog `json:"entityLogs"`

	// The end time for the base snapshot in this recovery.
	JobEndTimeUsecs *int64 `json:"jobEndTimeUsecs,omitempty"`

	// restore objects
	RestoreObjects []*NoSQLRestoreObject `json:"restoreObjects"`

	// The range of sequencer between which to apply logs present in the atom
	// view to achive the point in time recovery.
	StartSequencer *Sequencer `json:"startSequencer,omitempty"`
}

// Validate validates this no Sql recover params
func (m *NoSQLRecoverParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndSequencer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartSequencer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLRecoverParams) validateEndSequencer(formats strfmt.Registry) error {
	if swag.IsZero(m.EndSequencer) { // not required
		return nil
	}

	if m.EndSequencer != nil {
		if err := m.EndSequencer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endSequencer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endSequencer")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverParams) validateEntityLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityLogs); i++ {
		if swag.IsZero(m.EntityLogs[i]) { // not required
			continue
		}

		if m.EntityLogs[i] != nil {
			if err := m.EntityLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entityLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entityLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NoSQLRecoverParams) validateRestoreObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.RestoreObjects); i++ {
		if swag.IsZero(m.RestoreObjects[i]) { // not required
			continue
		}

		if m.RestoreObjects[i] != nil {
			if err := m.RestoreObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NoSQLRecoverParams) validateStartSequencer(formats strfmt.Registry) error {
	if swag.IsZero(m.StartSequencer) { // not required
		return nil
	}

	if m.StartSequencer != nil {
		if err := m.StartSequencer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startSequencer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startSequencer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this no Sql recover params based on the context it is used
func (m *NoSQLRecoverParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndSequencer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartSequencer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLRecoverParams) contextValidateEndSequencer(ctx context.Context, formats strfmt.Registry) error {

	if m.EndSequencer != nil {

		if swag.IsZero(m.EndSequencer) { // not required
			return nil
		}

		if err := m.EndSequencer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endSequencer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endSequencer")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverParams) contextValidateEntityLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityLogs); i++ {

		if m.EntityLogs[i] != nil {

			if swag.IsZero(m.EntityLogs[i]) { // not required
				return nil
			}

			if err := m.EntityLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entityLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entityLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NoSQLRecoverParams) contextValidateRestoreObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestoreObjects); i++ {

		if m.RestoreObjects[i] != nil {

			if swag.IsZero(m.RestoreObjects[i]) { // not required
				return nil
			}

			if err := m.RestoreObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NoSQLRecoverParams) contextValidateStartSequencer(ctx context.Context, formats strfmt.Registry) error {

	if m.StartSequencer != nil {

		if swag.IsZero(m.StartSequencer) { // not required
			return nil
		}

		if err := m.StartSequencer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startSequencer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startSequencer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NoSQLRecoverParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NoSQLRecoverParams) UnmarshalBinary(b []byte) error {
	var res NoSQLRecoverParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
