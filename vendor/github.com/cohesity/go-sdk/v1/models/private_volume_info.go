// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateVolumeInfo VolumeInfo is the information about each logical volume (filesystem) for a
// VM.
//
// swagger:model PrivateVolumeInfo
type PrivateVolumeInfo struct {

	// Information about all the disks in this volume.
	DiskVec []*VolumeInfoDiskInfo `json:"diskVec"`

	// DisplayName is the display name of the volume e.g. C:
	DisplayName *string `json:"displayName,omitempty"`

	// FilesystemType on this volume.
	FilesystemType *string `json:"filesystemType,omitempty"`

	// FilesytemUuid is the Filesystem uuid.
	FilesytemUUID *string `json:"filesytemUuid,omitempty"`

	// IsSupported specifies whether this is a supported Volume/File systems.
	IsSupported *bool `json:"isSupported,omitempty"`

	// LogicalVolumeInfo is set only for lvm/Logica Volume Manager (Linux) and
	// ldm/ Logical Disk Manager (Windows) volume only.
	LogicalVolumeInfo *VolumeInfoLogicalVolumeInfo `json:"logicalVolumeInfo,omitempty"`

	// Name is the name of the volume e.g. /C.
	Name *string `json:"name,omitempty"`

	// VolumeGuid is the Volume guid.
	// This is populated for kPhysical environments.
	VolumeGUID *string `json:"volumeGuid,omitempty"`

	// VolumeType is the type of the volume i.e. whether this volume is simple,
	// lvm or ldm.
	VolumeType *int32 `json:"volumeType,omitempty"`
}

// Validate validates this private volume info
func (m *PrivateVolumeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalVolumeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateVolumeInfo) validateDiskVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskVec); i++ {
		if swag.IsZero(m.DiskVec[i]) { // not required
			continue
		}

		if m.DiskVec[i] != nil {
			if err := m.DiskVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateVolumeInfo) validateLogicalVolumeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.LogicalVolumeInfo) { // not required
		return nil
	}

	if m.LogicalVolumeInfo != nil {
		if err := m.LogicalVolumeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logicalVolumeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logicalVolumeInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private volume info based on the context it is used
func (m *PrivateVolumeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogicalVolumeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateVolumeInfo) contextValidateDiskVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiskVec); i++ {

		if m.DiskVec[i] != nil {

			if swag.IsZero(m.DiskVec[i]) { // not required
				return nil
			}

			if err := m.DiskVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateVolumeInfo) contextValidateLogicalVolumeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.LogicalVolumeInfo != nil {

		if swag.IsZero(m.LogicalVolumeInfo) { // not required
			return nil
		}

		if err := m.LogicalVolumeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logicalVolumeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logicalVolumeInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateVolumeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateVolumeInfo) UnmarshalBinary(b []byte) error {
	var res PrivateVolumeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
