// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SQLID Defines the ids of SQL entities.
//
// Though tempting, the internal fields of the SqlId should NOT be used for
// anything other than identifying databases - they should not be displayed
// to the user, nor should they define behavior (e.g., displaying the
// instance_id or parsing the instance_id to find the SQL Server version).
//
// swagger:model SqlId
type SQLID struct {

	// The unique identifier of the availability group. This corresponds to
	// AAG id on SQL Server side.
	AagID *string `json:"aagId,omitempty"`

	// The creation date in millis since epoch corresponding to the create_date
	// field in the sys.databases system table. This records the date at which
	// a table is created or renamed (see https://goo.gl/WO9c4P).
	//
	// The value returned by sql server contains the local time, without time
	// zone information. This value is recorded here assuming the SQL Server
	// value is already UTC. Thus, under extremely rare circumstances, there
	// may be collisions with database ids.
	//
	// Do NOT use interpret this value, nor display it to the user since there is
	// no time zone information. This should only be used to disambiguate
	// databases.
	CreateDateMsecs *int64 `json:"createDateMsecs,omitempty"`

	// The index of the database. This corresponds to the db_id field in the SQL
	// server system table (see https://goo.gl/Lh2xdp) and is unique with
	// respect to the instance at any given time. However, the database_id may
	// be reused by SQL Server, e.g., if a database 'foo' has id 5, is deleted,
	// and the user creates another database 'bar', then 'bar' may have id 5.
	DatabaseID *int64 `json:"databaseId,omitempty"`

	// The unique identifier of the database within the availability group.
	// This identifer is the same for all replicas on which the
	// database has been joined to the AAG.
	GroupDatabaseID *string `json:"groupDatabaseId,omitempty"`

	// The instance ID of the SQL Server instance. The instance id will not
	// change during the life of the instance. In SQL Server, by default, the
	// instance_id is based on the instance_name (but do not assume this).
	InstanceID []uint8 `json:"instanceId"`
}

// Validate validates this Sql Id
func (m *SQLID) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this Sql Id based on context it is used
func (m *SQLID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SQLID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SQLID) UnmarshalBinary(b []byte) error {
	var res SQLID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
