// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodePort Node port information.
//
// NodePort specifies information of a NodePort per service and port
// combination within an application instance.
//
// swagger:model NodePort
type NodePort struct {

	// is Ui port
	IsUIPort *bool `json:"isUiPort,omitempty"`

	// port
	Port *int32 `json:"port,omitempty"`

	// service name
	ServiceName *string `json:"serviceName,omitempty"`

	// Specifies use of the nodeport
	// kDefault - No specific service.
	// kHttp - HTTP server.
	// kHttps -  Secure HTTP server.
	// kSsh - Secure shell server.
	// Enum: ["kDefault","kHttp","kHttps","kSsh"]
	Tag *string `json:"tag,omitempty"`
}

// Validate validates this node port
func (m *NodePort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nodePortTypeTagPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDefault","kHttp","kHttps","kSsh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodePortTypeTagPropEnum = append(nodePortTypeTagPropEnum, v)
	}
}

const (

	// NodePortTagKDefault captures enum value "kDefault"
	NodePortTagKDefault string = "kDefault"

	// NodePortTagKHTTP captures enum value "kHttp"
	NodePortTagKHTTP string = "kHttp"

	// NodePortTagKHTTPS captures enum value "kHttps"
	NodePortTagKHTTPS string = "kHttps"

	// NodePortTagKSSH captures enum value "kSsh"
	NodePortTagKSSH string = "kSsh"
)

// prop value enum
func (m *NodePort) validateTagEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodePortTypeTagPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NodePort) validateTag(formats strfmt.Registry) error {
	if swag.IsZero(m.Tag) { // not required
		return nil
	}

	// value enum
	if err := m.validateTagEnum("tag", "body", *m.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this node port based on context it is used
func (m *NodePort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodePort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodePort) UnmarshalBinary(b []byte) error {
	var res NodePort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
