// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VaultBandwidthLimits Vault Bandwidth Limits.
//
// VaultBandwidthLimits represents the network bandwidth limits
// while uploading/downloading data to/from the external media.
//
// swagger:model VaultBandwidthLimits
type VaultBandwidthLimits struct {

	// Specifies the max rate limit at which we download the data to cloud tier
	// vaults.
	CloudTierDownload *BandwidthLimit `json:"cloudTierDownload,omitempty"`

	// Specifies the max rate limit at which we upload the data to cloud tier
	// vaults.
	CloudTierUpload *BandwidthLimit `json:"cloudTierUpload,omitempty"`

	// Specifies the max rate limit at which we download the data.
	Download *BandwidthLimit `json:"download,omitempty"`

	// Specifies the max rate limit at which we upload the data.
	Upload *BandwidthLimit `json:"upload,omitempty"`
}

// Validate validates this vault bandwidth limits
func (m *VaultBandwidthLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudTierDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudTierUpload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultBandwidthLimits) validateCloudTierDownload(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudTierDownload) { // not required
		return nil
	}

	if m.CloudTierDownload != nil {
		if err := m.CloudTierDownload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudTierDownload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudTierDownload")
			}
			return err
		}
	}

	return nil
}

func (m *VaultBandwidthLimits) validateCloudTierUpload(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudTierUpload) { // not required
		return nil
	}

	if m.CloudTierUpload != nil {
		if err := m.CloudTierUpload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudTierUpload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudTierUpload")
			}
			return err
		}
	}

	return nil
}

func (m *VaultBandwidthLimits) validateDownload(formats strfmt.Registry) error {
	if swag.IsZero(m.Download) { // not required
		return nil
	}

	if m.Download != nil {
		if err := m.Download.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("download")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("download")
			}
			return err
		}
	}

	return nil
}

func (m *VaultBandwidthLimits) validateUpload(formats strfmt.Registry) error {
	if swag.IsZero(m.Upload) { // not required
		return nil
	}

	if m.Upload != nil {
		if err := m.Upload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upload")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vault bandwidth limits based on the context it is used
func (m *VaultBandwidthLimits) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudTierDownload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudTierUpload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDownload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultBandwidthLimits) contextValidateCloudTierDownload(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudTierDownload != nil {

		if swag.IsZero(m.CloudTierDownload) { // not required
			return nil
		}

		if err := m.CloudTierDownload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudTierDownload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudTierDownload")
			}
			return err
		}
	}

	return nil
}

func (m *VaultBandwidthLimits) contextValidateCloudTierUpload(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudTierUpload != nil {

		if swag.IsZero(m.CloudTierUpload) { // not required
			return nil
		}

		if err := m.CloudTierUpload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudTierUpload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudTierUpload")
			}
			return err
		}
	}

	return nil
}

func (m *VaultBandwidthLimits) contextValidateDownload(ctx context.Context, formats strfmt.Registry) error {

	if m.Download != nil {

		if swag.IsZero(m.Download) { // not required
			return nil
		}

		if err := m.Download.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("download")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("download")
			}
			return err
		}
	}

	return nil
}

func (m *VaultBandwidthLimits) contextValidateUpload(ctx context.Context, formats strfmt.Registry) error {

	if m.Upload != nil {

		if swag.IsZero(m.Upload) { // not required
			return nil
		}

		if err := m.Upload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VaultBandwidthLimits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VaultBandwidthLimits) UnmarshalBinary(b []byte) error {
	var res VaultBandwidthLimits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
