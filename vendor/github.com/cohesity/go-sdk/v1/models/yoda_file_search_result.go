// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// YodaFileSearchResult FileSearchResult wraps a cracked file object from Yoda/ElasticSearch and
// processes some fields to be consumed by the UI.
//
// swagger:model YodaFileSearchResult
type YodaFileSearchResult struct {

	// FileDocument represents an entry for a job/filename pair.
	FileDocument *CrackedFileDocument `json:"fileDocument,omitempty"`

	// RegisteredSource is the protobuf for the top-level vCenter registered
	// source.
	RegisteredSource *PrivateEntityProto `json:"registeredSource,omitempty"`
}

// Validate validates this yoda file search result
func (m *YodaFileSearchResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *YodaFileSearchResult) validateFileDocument(formats strfmt.Registry) error {
	if swag.IsZero(m.FileDocument) { // not required
		return nil
	}

	if m.FileDocument != nil {
		if err := m.FileDocument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileDocument")
			}
			return err
		}
	}

	return nil
}

func (m *YodaFileSearchResult) validateRegisteredSource(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredSource) { // not required
		return nil
	}

	if m.RegisteredSource != nil {
		if err := m.RegisteredSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredSource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this yoda file search result based on the context it is used
func (m *YodaFileSearchResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *YodaFileSearchResult) contextValidateFileDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.FileDocument != nil {

		if swag.IsZero(m.FileDocument) { // not required
			return nil
		}

		if err := m.FileDocument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileDocument")
			}
			return err
		}
	}

	return nil
}

func (m *YodaFileSearchResult) contextValidateRegisteredSource(ctx context.Context, formats strfmt.Registry) error {

	if m.RegisteredSource != nil {

		if swag.IsZero(m.RegisteredSource) { // not required
			return nil
		}

		if err := m.RegisteredSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *YodaFileSearchResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *YodaFileSearchResult) UnmarshalBinary(b []byte) error {
	var res YodaFileSearchResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
