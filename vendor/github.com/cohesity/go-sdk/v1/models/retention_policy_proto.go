// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RetentionPolicyProto Message that specifies the retention policy for backup snapshots.
//
// swagger:model RetentionPolicyProto
type RetentionPolicyProto struct {

	// The number of days to keep the snapshots for a backup run.
	NumDaysToKeep *int64 `json:"numDaysToKeep,omitempty"`

	// The number of seconds to keep the snapshots for a backup run.
	NumSecsToKeep *int64 `json:"numSecsToKeep,omitempty"`

	// If the WORM lock is enabled on this policy, details of WORM policy.
	// Absence of this field indicates WORM is not enabled on this policy.
	// Also, presence of this field doesn't necessarily imply WORM protection.
	// This is because the field could be present but the retention could
	// have expired.
	// If the policy has WORM enabled, We do not propagate it to attached
	// backup jobs and further down the hierarchy here. Instead, any update on
	// the backup run performs WORM checks based on the currently attached
	// policy. Backup runs, when finished, inherit the WORM property from the
	// corresponding attached policy at the completion time.
	WormRetention *WormRetentionProto `json:"wormRetention,omitempty"`
}

// Validate validates this retention policy proto
func (m *RetentionPolicyProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWormRetention(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetentionPolicyProto) validateWormRetention(formats strfmt.Registry) error {
	if swag.IsZero(m.WormRetention) { // not required
		return nil
	}

	if m.WormRetention != nil {
		if err := m.WormRetention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wormRetention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wormRetention")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this retention policy proto based on the context it is used
func (m *RetentionPolicyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWormRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetentionPolicyProto) contextValidateWormRetention(ctx context.Context, formats strfmt.Registry) error {

	if m.WormRetention != nil {

		if swag.IsZero(m.WormRetention) { // not required
			return nil
		}

		if err := m.WormRetention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wormRetention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wormRetention")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetentionPolicyProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetentionPolicyProto) UnmarshalBinary(b []byte) error {
	var res RetentionPolicyProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
