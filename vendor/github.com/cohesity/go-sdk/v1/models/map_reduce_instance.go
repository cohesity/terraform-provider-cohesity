// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MapReduceInstance Map Reduce Instance.
//
// Information about a Map reduce instance. An instance can be run only once.
//
// swagger:model MapReduceInstance
type MapReduceInstance struct {

	// System generated ID of map reduce instance.
	ID *int64 `json:"id,omitempty"`

	// input params
	InputParams []*MapReduceInstanceInputParam `json:"inputParams"`

	// Input spec for the MR.
	InputSpec *InputSpec `json:"inputSpec,omitempty"`

	// ID of Map reduce info.
	MapReduceInfoID *int64 `json:"mapReduceInfoId,omitempty"`

	// Output spec for the MR.
	OutputSpec *OutputSpec `json:"outputSpec,omitempty"`

	// Information about run of this instance. All fields of RunInfo will be
	// populated by yoda/analytics components.
	RunInfo *MapReduceInstanceRunInfo `json:"runInfo,omitempty"`
}

// Validate validates this map reduce instance
func (m *MapReduceInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MapReduceInstance) validateInputParams(formats strfmt.Registry) error {
	if swag.IsZero(m.InputParams) { // not required
		return nil
	}

	for i := 0; i < len(m.InputParams); i++ {
		if swag.IsZero(m.InputParams[i]) { // not required
			continue
		}

		if m.InputParams[i] != nil {
			if err := m.InputParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MapReduceInstance) validateInputSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.InputSpec) { // not required
		return nil
	}

	if m.InputSpec != nil {
		if err := m.InputSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputSpec")
			}
			return err
		}
	}

	return nil
}

func (m *MapReduceInstance) validateOutputSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputSpec) { // not required
		return nil
	}

	if m.OutputSpec != nil {
		if err := m.OutputSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outputSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outputSpec")
			}
			return err
		}
	}

	return nil
}

func (m *MapReduceInstance) validateRunInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RunInfo) { // not required
		return nil
	}

	if m.RunInfo != nil {
		if err := m.RunInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this map reduce instance based on the context it is used
func (m *MapReduceInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MapReduceInstance) contextValidateInputParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InputParams); i++ {

		if m.InputParams[i] != nil {

			if swag.IsZero(m.InputParams[i]) { // not required
				return nil
			}

			if err := m.InputParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MapReduceInstance) contextValidateInputSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.InputSpec != nil {

		if swag.IsZero(m.InputSpec) { // not required
			return nil
		}

		if err := m.InputSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputSpec")
			}
			return err
		}
	}

	return nil
}

func (m *MapReduceInstance) contextValidateOutputSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputSpec != nil {

		if swag.IsZero(m.OutputSpec) { // not required
			return nil
		}

		if err := m.OutputSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outputSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outputSpec")
			}
			return err
		}
	}

	return nil
}

func (m *MapReduceInstance) contextValidateRunInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RunInfo != nil {

		if swag.IsZero(m.RunInfo) { // not required
			return nil
		}

		if err := m.RunInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MapReduceInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MapReduceInstance) UnmarshalBinary(b []byte) error {
	var res MapReduceInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
