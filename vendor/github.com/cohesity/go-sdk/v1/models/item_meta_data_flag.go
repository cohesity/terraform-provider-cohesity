// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ItemMetaDataFlag item meta data flag
//
// swagger:model ItemMetaData_Flag
type ItemMetaDataFlag struct {

	// The date and time that the follow-up was finished.
	CompletedDateTime *ItemMetaDataDateTimeTZone `json:"completedDateTime,omitempty"`

	// The date and time that the follow up is to be finished.
	// Note: To set the due date, you must also specify the startDateTime;
	// otherwise, you will get a 400 Bad Request response.
	DueDateTime *ItemMetaDataDateTimeTZone `json:"dueDateTime,omitempty"`

	// The status for follow-up for an item. Possible values are
	// notFlagged, complete, and flagged.
	FlagStatus *string `json:"flagStatus,omitempty"`

	// The date and time that the follow-up is to begin.
	StartDateTime *ItemMetaDataDateTimeTZone `json:"startDateTime,omitempty"`
}

// Validate validates this item meta data flag
func (m *ItemMetaDataFlag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDueDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemMetaDataFlag) validateCompletedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletedDateTime) { // not required
		return nil
	}

	if m.CompletedDateTime != nil {
		if err := m.CompletedDateTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("completedDateTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("completedDateTime")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaDataFlag) validateDueDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DueDateTime) { // not required
		return nil
	}

	if m.DueDateTime != nil {
		if err := m.DueDateTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dueDateTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dueDateTime")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaDataFlag) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if m.StartDateTime != nil {
		if err := m.StartDateTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startDateTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startDateTime")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item meta data flag based on the context it is used
func (m *ItemMetaDataFlag) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompletedDateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDueDateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartDateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemMetaDataFlag) contextValidateCompletedDateTime(ctx context.Context, formats strfmt.Registry) error {

	if m.CompletedDateTime != nil {

		if swag.IsZero(m.CompletedDateTime) { // not required
			return nil
		}

		if err := m.CompletedDateTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("completedDateTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("completedDateTime")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaDataFlag) contextValidateDueDateTime(ctx context.Context, formats strfmt.Registry) error {

	if m.DueDateTime != nil {

		if swag.IsZero(m.DueDateTime) { // not required
			return nil
		}

		if err := m.DueDateTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dueDateTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dueDateTime")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaDataFlag) contextValidateStartDateTime(ctx context.Context, formats strfmt.Registry) error {

	if m.StartDateTime != nil {

		if swag.IsZero(m.StartDateTime) { // not required
			return nil
		}

		if err := m.StartDateTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startDateTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startDateTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemMetaDataFlag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemMetaDataFlag) UnmarshalBinary(b []byte) error {
	var res ItemMetaDataFlag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
