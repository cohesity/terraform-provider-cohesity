// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OutlookBackupParams This message contains additional params for an outlook backup job run.
//
// swagger:model OutlookBackupParams
type OutlookBackupParams struct {

	// If true, delete cloned directory. Currently we are setting this true if
	// last backup failed with invalid sync state error.
	DeleteClonedDirectory *bool `json:"deleteClonedDirectory,omitempty"`

	// This flag indicates whether we are in the view cloning paradigm for the
	// first time or not. i.e. the previous run used the default magneto backup
	// view.
	FirstTimeViewClone *bool `json:"firstTimeViewClone,omitempty"`

	// For view cloning per run, outlook environment needs the view name used in
	// the last run (with at least one finished attempt).
	PreviousRunViewName *string `json:"previousRunViewName,omitempty"`

	// Sla deadline from backup job policy.
	SLADeadlineTimeUsecs *int64 `json:"slaDeadlineTimeUsecs,omitempty"`

	// This is an explicit flag to intimate slave that master already cloned the
	// view.
	ViewCloningEnabled *bool `json:"viewCloningEnabled,omitempty"`
}

// Validate validates this outlook backup params
func (m *OutlookBackupParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this outlook backup params based on context it is used
func (m *OutlookBackupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OutlookBackupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutlookBackupParams) UnmarshalBinary(b []byte) error {
	var res OutlookBackupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
