// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EncryptionConfiguration Encryption Configuration.
//
// Specifies the parameters the user wants to use when configuring encryption
// for the new Cluster.
//
// swagger:model EncryptionConfiguration
type EncryptionConfiguration struct {

	// Specifies whether or not to enable FIPS mode. EnableSoftwareEncryption
	// must be set to true in order to enable FIPS.
	EnableFipsMode *bool `json:"enableFipsMode,omitempty"`

	// Specifies whether or not to enable hardware encryption. If hardware
	// encryption is enabled, all data disks of the Cluster will be encrypted.
	// This can only be enabled at Cluster creation time and cannot be disabled
	// later.
	EnableHardwareEncryption *bool `json:"enableHardwareEncryption,omitempty"`

	// Specifies whether or not to enable software encryption. If software
	// encryption is enabled, all data on the Cluster will be encrypted. This
	// can only be enabled at Cluster creation time and cannot be disabled later.
	EnableSoftwareEncryption *bool `json:"enableSoftwareEncryption,omitempty"`

	// Specifies the rotation period for encryption keys in days.
	RotationPeriod *int32 `json:"rotationPeriod,omitempty"`
}

// Validate validates this encryption configuration
func (m *EncryptionConfiguration) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this encryption configuration based on context it is used
func (m *EncryptionConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EncryptionConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EncryptionConfiguration) UnmarshalBinary(b []byte) error {
	var res EncryptionConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
