// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreADAppObjectParams The application object restore params for AD objects (AD Domain Controller).
//
// swagger:model RestoreADAppObjectParams
type RestoreADAppObjectParams struct {

	// Status of the AD object/attribute restore operation.
	AdRestoreStatusVec []*ADRestoreStatus `json:"adRestoreStatusVec"`

	// This option will only be set for child tasks (Restore AD objects and
	// Restore AD object attributes).
	AdUpdateOptions *ADUpdateRestoreTaskOptions `json:"adUpdateOptions,omitempty"`

	// Credentials used to execute AD powershell cmdlet for AD search and
	// restore. The specified credentials must have required permissions
	// to AD objects in specified OU.
	Credentials *Credentials `json:"credentials,omitempty"`

	// The ldap port on which the AD domain controller's NTDS database will be
	// mounted.
	LdapPort *int32 `json:"ldapPort,omitempty"`

	// Number of AD objects whose restore failed. Includes both AD object and
	// attribute restored.
	NumFailed *int32 `json:"numFailed,omitempty"`

	// Number of AD objects whose restores are currently running. Includes both
	// AD object and attribute recoveries.
	NumRunning *int32 `json:"numRunning,omitempty"`

	// Number of AD objects restored successfully. Includes both AD object and
	// attribute restored.
	NumSuccessfull *int32 `json:"numSuccessfull,omitempty"`

	// The following field is set if user wants to mount AD, restore AD objects
	// and destory AD mount in single task.
	ShouldMountAndRestore *bool `json:"shouldMountAndRestore,omitempty"`
}

// Validate validates this restore a d app object params
func (m *RestoreADAppObjectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdRestoreStatusVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdUpdateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreADAppObjectParams) validateAdRestoreStatusVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AdRestoreStatusVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AdRestoreStatusVec); i++ {
		if swag.IsZero(m.AdRestoreStatusVec[i]) { // not required
			continue
		}

		if m.AdRestoreStatusVec[i] != nil {
			if err := m.AdRestoreStatusVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adRestoreStatusVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adRestoreStatusVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreADAppObjectParams) validateAdUpdateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AdUpdateOptions) { // not required
		return nil
	}

	if m.AdUpdateOptions != nil {
		if err := m.AdUpdateOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adUpdateOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adUpdateOptions")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreADAppObjectParams) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore a d app object params based on the context it is used
func (m *RestoreADAppObjectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdRestoreStatusVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdUpdateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreADAppObjectParams) contextValidateAdRestoreStatusVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdRestoreStatusVec); i++ {

		if m.AdRestoreStatusVec[i] != nil {

			if swag.IsZero(m.AdRestoreStatusVec[i]) { // not required
				return nil
			}

			if err := m.AdRestoreStatusVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adRestoreStatusVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adRestoreStatusVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreADAppObjectParams) contextValidateAdUpdateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.AdUpdateOptions != nil {

		if swag.IsZero(m.AdUpdateOptions) { // not required
			return nil
		}

		if err := m.AdUpdateOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adUpdateOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adUpdateOptions")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreADAppObjectParams) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreADAppObjectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreADAppObjectParams) UnmarshalBinary(b []byte) error {
	var res RestoreADAppObjectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
