// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAllJobRunsResult Specifies the common result structure of the response of all runs info (
// protection, replication, archival etc.).
//
// swagger:model GetAllJobRunsResult
type GetAllJobRunsResult struct {

	// Specifies the end time of the run.
	EndTimeMsecs *int64 `json:"endTimeMsecs,omitempty"`

	// Specifies the environment type of the job.
	// Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	// NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	// 'kVMware' indicates the VMware Protection Source environment.
	// 'kHyperV' indicates the HyperV Protection Source environment.
	// 'kSQL' indicates the SQL Protection Source environment.
	// 'kView' indicates the View Protection Source environment.
	// 'kPuppeteer' indicates the Cohesity's Remote Adapter.
	// 'kPhysical' indicates the physical Protection Source environment.
	// 'kPure' indicates the Pure Storage Protection Source environment.
	// 'kNimble' indicates the Nimble Storage Protection Source environment.
	// 'kAzure' indicates the Microsoft's Azure Protection Source environment.
	// 'kNetapp' indicates the Netapp Protection Source environment.
	// 'kAgent' indicates the Agent Protection Source environment.
	// 'kGenericNas' indicates the Generic Network Attached Storage Protection
	// Source environment.
	// 'kAcropolis' indicates the Acropolis Protection Source environment.
	// 'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	// 'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	// 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	// 'kGPFS' indicates IBM's GPFS Protection Source environment.
	// 'kKVM' indicates the KVM Protection Source environment.
	// 'kAWS' indicates the AWS Protection Source environment.
	// 'kExchange' indicates the Exchange Protection Source environment.
	// 'kHyperVVSS' indicates the HyperV VSS Protection Source
	// environment.
	// 'kOracle' indicates the Oracle Protection Source environment.
	// 'kGCP' indicates the Google Cloud Platform Protection Source environment.
	// 'kFlashBlade' indicates the Flash Blade Protection Source environment.
	// 'kAWSNative' indicates the AWS Native Protection Source environment.
	// 'kO365' indicates the Office 365 Protection Source environment.
	// 'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	// 'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	// 'kGCPNative' indicates the GCP Native Protection Source environment.
	// 'kAzureNative' indicates the Azure Native Protection Source environment.
	// 'kKubernetes' indicates a Kubernetes Protection Source environment.
	// 'kElastifile' indicates Elastifile Protection Source environment.
	// 'kAD' indicates Active Directory Protection Source environment.
	// 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	// 'kCassandra' indicates Cassandra Protection Source environment.
	// 'kMongoDB' indicates MongoDB Protection Source environment.
	// 'kCouchbase' indicates Couchbase Protection Source environment.
	// 'kHdfs' indicates Hdfs Protection Source environment.
	// 'kHive' indicates Hive Protection Source environment.
	// 'kHBase' indicates HBase Protection Source environment.
	// 'kUDA' indicates Universal Data Adapter Protection Source environment.
	// 'kSAPHANA' indicates SAP HANA protection source environment.
	// 'kO365Teams' indicates the Office365 Teams Protection Source environment.
	// 'kO365Group' indicates the Office365 Groups Protection Source environment.
	// 'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	// 'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	// 'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	// 'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	// kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	// kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	// kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	// kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	// kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	// kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	// kO365PublicFolders
	// Enum: ["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]
	EnvType *string `json:"envType,omitempty"`

	// Specifies the job id.
	JobID *string `json:"jobId,omitempty"`

	// Specifies the job name.
	JobName *string `json:"jobName,omitempty"`

	// Specifies the job run id.
	JobRunID *string `json:"jobRunId,omitempty"`

	// Specifies the job type, protection, replication, archival, apollo,
	// indexing etc.
	JobType *string `json:"jobType,omitempty"`

	// Specifies the start time of the run.
	StartTimeMsecs *int64 `json:"startTimeMsecs,omitempty"`

	// Specifies the view box id.
	ViewBoxID *int64 `json:"viewBoxId,omitempty"`
}

// Validate validates this get all job runs result
func (m *GetAllJobRunsResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getAllJobRunsResultTypeEnvTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getAllJobRunsResultTypeEnvTypePropEnum = append(getAllJobRunsResultTypeEnvTypePropEnum, v)
	}
}

const (

	// GetAllJobRunsResultEnvTypeKVMware captures enum value "kVMware"
	GetAllJobRunsResultEnvTypeKVMware string = "kVMware"

	// GetAllJobRunsResultEnvTypeKHyperV captures enum value "kHyperV"
	GetAllJobRunsResultEnvTypeKHyperV string = "kHyperV"

	// GetAllJobRunsResultEnvTypeKSQL captures enum value "kSQL"
	GetAllJobRunsResultEnvTypeKSQL string = "kSQL"

	// GetAllJobRunsResultEnvTypeKView captures enum value "kView"
	GetAllJobRunsResultEnvTypeKView string = "kView"

	// GetAllJobRunsResultEnvTypeKPuppeteer captures enum value "kPuppeteer"
	GetAllJobRunsResultEnvTypeKPuppeteer string = "kPuppeteer"

	// GetAllJobRunsResultEnvTypeKPhysical captures enum value "kPhysical"
	GetAllJobRunsResultEnvTypeKPhysical string = "kPhysical"

	// GetAllJobRunsResultEnvTypeKPure captures enum value "kPure"
	GetAllJobRunsResultEnvTypeKPure string = "kPure"

	// GetAllJobRunsResultEnvTypeKNimble captures enum value "kNimble"
	GetAllJobRunsResultEnvTypeKNimble string = "kNimble"
)

// prop value enum
func (m *GetAllJobRunsResult) validateEnvTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getAllJobRunsResultTypeEnvTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetAllJobRunsResult) validateEnvType(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvTypeEnum("envType", "body", *m.EnvType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all job runs result based on context it is used
func (m *GetAllJobRunsResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetAllJobRunsResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAllJobRunsResult) UnmarshalBinary(b []byte) error {
	var res GetAllJobRunsResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
