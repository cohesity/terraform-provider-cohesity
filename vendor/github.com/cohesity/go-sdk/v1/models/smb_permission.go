// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmbPermission SMB Permission.
//
// Specifies information about a single SMB permission.
//
// swagger:model SmbPermission
type SmbPermission struct {

	// Specifies the read/write access to the SMB share.
	// 'kReadyOnly' indicates read only access to the SMB share.
	// 'kReadWrite' indicates read and write access to the SMB share.
	// 'kFullControl' indicates full administrative control of the SMB share.
	// 'kSpecialAccess' indicates custom permissions to the SMB share using
	// access masks structures.
	// Enum: ["kReadOnly","kReadWrite","kModify","kFullControl","kSpecialAccess"]
	Access *string `json:"access,omitempty"`

	// Specifies how the permission should be applied to folders and/or files.
	// 'kFolderSubFoldersAndFiles' indicates that permissions are applied to a Folder
	// and it's sub folders and files.
	// 'kFolderAndSubFolders' indicates that permissions are applied to a Folder and it's sub folders.
	// 'kFolderAndSubFiles' indicates that permissions are applied to a Folder and it's sub files.
	// 'kFolderOnly' indicates that permsission are applied to folder only.
	// 'kSubFoldersAndFilesOnly' indicates that permissions are applied to sub folders and files only.
	// 'kSubFoldersOnly' indicates that permissiona are applied to sub folders only.
	// 'kFilesOnly' indicates that permissions are applied to files only.
	// Enum: ["kFolderSubFoldersAndFiles","kFolderAndSubFolders","kFolderAndFiles","kFolderOnly","kSubFoldersAndFilesOnly","kSubFoldersOnly","kFilesOnly"]
	Mode *string `json:"mode,omitempty"`

	// Specifies the security identifier (SID) of the principal.
	Sid *string `json:"sid,omitempty"`

	// Specifies custom access permissions.
	// When the access mask from the Access Control Entry (ACE) cannot be mapped
	// to one of the enums in 'access', this field is populated
	// with the custom mask derived from the ACE and 'access' is set
	// to kSpecialAccess.
	// This is a placeholder for storing an unmapped access permission and should
	// not be set when creating and editing a View.
	SpecialAccessMask *uint32 `json:"specialAccessMask,omitempty"`

	// Specifies a custom type.
	// When the type from the Access Control Entry (ACE) cannot be mapped
	// to one of the enums in 'type', this field is populated with the custom
	// type derived from the ACE and 'type' is set to kSpecialType.
	// This is a placeholder for storing an unmapped type and should
	// not be set when creating and editing a View.
	SpecialType *int32 `json:"specialType,omitempty"`

	// Specifies the type of permission.
	// 'kAllow' indicates access is allowed.
	// 'kDeny' indicates access is denied.
	// 'kSpecialType' indicates a type defined in the Access Control Entry (ACE)
	// does not map to 'kAllow' or 'kDeny'.
	// Enum: ["kAllow","kDeny","kSpecialType"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this smb permission
func (m *SmbPermission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var smbPermissionTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kReadOnly","kReadWrite","kModify","kFullControl","kSpecialAccess"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbPermissionTypeAccessPropEnum = append(smbPermissionTypeAccessPropEnum, v)
	}
}

const (

	// SmbPermissionAccessKReadOnly captures enum value "kReadOnly"
	SmbPermissionAccessKReadOnly string = "kReadOnly"

	// SmbPermissionAccessKReadWrite captures enum value "kReadWrite"
	SmbPermissionAccessKReadWrite string = "kReadWrite"

	// SmbPermissionAccessKModify captures enum value "kModify"
	SmbPermissionAccessKModify string = "kModify"

	// SmbPermissionAccessKFullControl captures enum value "kFullControl"
	SmbPermissionAccessKFullControl string = "kFullControl"

	// SmbPermissionAccessKSpecialAccess captures enum value "kSpecialAccess"
	SmbPermissionAccessKSpecialAccess string = "kSpecialAccess"
)

// prop value enum
func (m *SmbPermission) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, smbPermissionTypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmbPermission) validateAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.Access) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", *m.Access); err != nil {
		return err
	}

	return nil
}

var smbPermissionTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kFolderSubFoldersAndFiles","kFolderAndSubFolders","kFolderAndFiles","kFolderOnly","kSubFoldersAndFilesOnly","kSubFoldersOnly","kFilesOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbPermissionTypeModePropEnum = append(smbPermissionTypeModePropEnum, v)
	}
}

const (

	// SmbPermissionModeKFolderSubFoldersAndFiles captures enum value "kFolderSubFoldersAndFiles"
	SmbPermissionModeKFolderSubFoldersAndFiles string = "kFolderSubFoldersAndFiles"

	// SmbPermissionModeKFolderAndSubFolders captures enum value "kFolderAndSubFolders"
	SmbPermissionModeKFolderAndSubFolders string = "kFolderAndSubFolders"

	// SmbPermissionModeKFolderAndFiles captures enum value "kFolderAndFiles"
	SmbPermissionModeKFolderAndFiles string = "kFolderAndFiles"

	// SmbPermissionModeKFolderOnly captures enum value "kFolderOnly"
	SmbPermissionModeKFolderOnly string = "kFolderOnly"

	// SmbPermissionModeKSubFoldersAndFilesOnly captures enum value "kSubFoldersAndFilesOnly"
	SmbPermissionModeKSubFoldersAndFilesOnly string = "kSubFoldersAndFilesOnly"

	// SmbPermissionModeKSubFoldersOnly captures enum value "kSubFoldersOnly"
	SmbPermissionModeKSubFoldersOnly string = "kSubFoldersOnly"

	// SmbPermissionModeKFilesOnly captures enum value "kFilesOnly"
	SmbPermissionModeKFilesOnly string = "kFilesOnly"
)

// prop value enum
func (m *SmbPermission) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, smbPermissionTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmbPermission) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

var smbPermissionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAllow","kDeny","kSpecialType"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbPermissionTypeTypePropEnum = append(smbPermissionTypeTypePropEnum, v)
	}
}

const (

	// SmbPermissionTypeKAllow captures enum value "kAllow"
	SmbPermissionTypeKAllow string = "kAllow"

	// SmbPermissionTypeKDeny captures enum value "kDeny"
	SmbPermissionTypeKDeny string = "kDeny"

	// SmbPermissionTypeKSpecialType captures enum value "kSpecialType"
	SmbPermissionTypeKSpecialType string = "kSpecialType"
)

// prop value enum
func (m *SmbPermission) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, smbPermissionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmbPermission) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this smb permission based on context it is used
func (m *SmbPermission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SmbPermission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbPermission) UnmarshalBinary(b []byte) error {
	var res SmbPermission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
