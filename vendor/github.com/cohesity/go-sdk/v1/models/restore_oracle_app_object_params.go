// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreOracleAppObjectParams The application object restore params for Oracle objects (Oracle databases).
//
// swagger:model RestoreOracleAppObjectParams
type RestoreOracleAppObjectParams struct {

	// alternate location params
	AlternateLocationParams *RestoreOracleAppObjectParamsAlternateLocationParams `json:"alternateLocationParams,omitempty"`

	// Whether or not this is a complete recovery attempt.
	AttemptCompleteRecovery *bool `json:"attemptCompleteRecovery,omitempty"`

	// Contains information about list of objects (PDB/Table/DataFile)
	// to restore.
	GranularRestoreInfo *GranularRestoreInfo `json:"granularRestoreInfo,omitempty"`

	// Will be set to true if this is a multistage restore.
	IsMultiStageRestore *bool `json:"isMultiStageRestore,omitempty"`

	// If set to true, the recovered database will not be opened.
	NoOpenMode *bool `json:"noOpenMode,omitempty"`

	// Contains information related to archive log restore.
	OracleArchiveLogRestoreInfo *OracleArchiveLogInfo `json:"oracleArchiveLogRestoreInfo,omitempty"`

	// Following field contains information related to view expose workflow. Ex
	// mountpoint identifier specified by User from UI.
	OracleCloneAppViewParamsVec []*CloneAppViewParams `json:"oracleCloneAppViewParamsVec"`

	// Contains information related to recovery validations.
	OracleRecoveryValidationInfo *OracleRecoveryValidationInfo `json:"oracleRecoveryValidationInfo,omitempty"`

	// Contains information regarding oracle sources, channel information and
	// host nomination details.
	OracleTargetParams *OracleSourceParams `json:"oracleTargetParams,omitempty"`

	// Contains parameter information about any update task which needed to be
	// performed on a sucessful restore/clone task. Ex Instant restore of
	// Clone.
	OracleUpdateRestoreOptions *OracleUpdateRestoreTaskOptions `json:"oracleUpdateRestoreOptions,omitempty"`

	// If set to true, parallel backups/restores/clones are enabled on same host.
	ParallelOpEnabled *bool `json:"parallelOpEnabled,omitempty"`

	// Specifies whether it is restored to a RAC database.
	RestoreAsRac *bool `json:"restoreAsRac,omitempty"`

	// Contains information related spfile/pfile restore.
	RestoreSpfileOrPfileInfo *RestoreSpfileOrPfileInfo `json:"restoreSpfileOrPfileInfo,omitempty"`

	// The time to which the Oracle database needs to be restored. This allows
	// for granular recovery of Oracle databases. If this is not set, the Oracle
	// database will be recovered to the full/incremental snapshot (specified in
	// the owner's restore object in AppOwnerRestoreInfo). This is only
	// applicable if restoring to the original Oracle instance.
	RestoreTimeSecs *int64 `json:"restoreTimeSecs,omitempty"`

	// List of archive logs to apply on Database after overwrite restore.
	RollForwardLogPathVec []string `json:"rollForwardLogPathVec"`

	// Time till which we have to roll-forward the database. This overrides
	// user mentioned point in time(if any).
	RollForwardTimeMsecs *int64 `json:"rollForwardTimeMsecs,omitempty"`

	// Information for Oracle Same Config Instant Recovery of a database.
	SameConfigIrRecoveryOptions *SameConfigIrRecoveryOptions `json:"sameConfigIrRecoveryOptions,omitempty"`

	// shell environment vec
	ShellEnvironmentVec []*RestoreOracleAppObjectParamsKeyValuePair `json:"shellEnvironmentVec"`

	// Whether or not to skip the nid step in Oracle Clone workflow.
	// Applicable to both smart and old clone workflow.
	SkipCloneNid *bool `json:"skipCloneNid,omitempty"`

	// Specifies whether allowed to automatically stop active passive database.
	StopActivePassive *bool `json:"stopActivePassive,omitempty"`

	// Whether database recovery should be performed using the SCN value or time
	// value. Currently this is applicable only during overwrite restore and
	// clone workflow. In case of alternate restore we cannot use it since we
	// cannot set until scn clause if we don't catalog the backup view.
	UseScnForRestore *bool `json:"useScnForRestore,omitempty"`
}

// Validate validates this restore oracle app object params
func (m *RestoreOracleAppObjectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternateLocationParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGranularRestoreInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleArchiveLogRestoreInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleCloneAppViewParamsVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleRecoveryValidationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleUpdateRestoreOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreSpfileOrPfileInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSameConfigIrRecoveryOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShellEnvironmentVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreOracleAppObjectParams) validateAlternateLocationParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AlternateLocationParams) { // not required
		return nil
	}

	if m.AlternateLocationParams != nil {
		if err := m.AlternateLocationParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alternateLocationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alternateLocationParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) validateGranularRestoreInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.GranularRestoreInfo) { // not required
		return nil
	}

	if m.GranularRestoreInfo != nil {
		if err := m.GranularRestoreInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("granularRestoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("granularRestoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) validateOracleArchiveLogRestoreInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleArchiveLogRestoreInfo) { // not required
		return nil
	}

	if m.OracleArchiveLogRestoreInfo != nil {
		if err := m.OracleArchiveLogRestoreInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleArchiveLogRestoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleArchiveLogRestoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) validateOracleCloneAppViewParamsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleCloneAppViewParamsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.OracleCloneAppViewParamsVec); i++ {
		if swag.IsZero(m.OracleCloneAppViewParamsVec[i]) { // not required
			continue
		}

		if m.OracleCloneAppViewParamsVec[i] != nil {
			if err := m.OracleCloneAppViewParamsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oracleCloneAppViewParamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oracleCloneAppViewParamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreOracleAppObjectParams) validateOracleRecoveryValidationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleRecoveryValidationInfo) { // not required
		return nil
	}

	if m.OracleRecoveryValidationInfo != nil {
		if err := m.OracleRecoveryValidationInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleRecoveryValidationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleRecoveryValidationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) validateOracleTargetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleTargetParams) { // not required
		return nil
	}

	if m.OracleTargetParams != nil {
		if err := m.OracleTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) validateOracleUpdateRestoreOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleUpdateRestoreOptions) { // not required
		return nil
	}

	if m.OracleUpdateRestoreOptions != nil {
		if err := m.OracleUpdateRestoreOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleUpdateRestoreOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleUpdateRestoreOptions")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) validateRestoreSpfileOrPfileInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreSpfileOrPfileInfo) { // not required
		return nil
	}

	if m.RestoreSpfileOrPfileInfo != nil {
		if err := m.RestoreSpfileOrPfileInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreSpfileOrPfileInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreSpfileOrPfileInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) validateSameConfigIrRecoveryOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SameConfigIrRecoveryOptions) { // not required
		return nil
	}

	if m.SameConfigIrRecoveryOptions != nil {
		if err := m.SameConfigIrRecoveryOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sameConfigIrRecoveryOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sameConfigIrRecoveryOptions")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) validateShellEnvironmentVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ShellEnvironmentVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ShellEnvironmentVec); i++ {
		if swag.IsZero(m.ShellEnvironmentVec[i]) { // not required
			continue
		}

		if m.ShellEnvironmentVec[i] != nil {
			if err := m.ShellEnvironmentVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shellEnvironmentVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shellEnvironmentVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this restore oracle app object params based on the context it is used
func (m *RestoreOracleAppObjectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlternateLocationParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGranularRestoreInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleArchiveLogRestoreInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleCloneAppViewParamsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleRecoveryValidationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleUpdateRestoreOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreSpfileOrPfileInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSameConfigIrRecoveryOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShellEnvironmentVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreOracleAppObjectParams) contextValidateAlternateLocationParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AlternateLocationParams != nil {

		if swag.IsZero(m.AlternateLocationParams) { // not required
			return nil
		}

		if err := m.AlternateLocationParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alternateLocationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alternateLocationParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) contextValidateGranularRestoreInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.GranularRestoreInfo != nil {

		if swag.IsZero(m.GranularRestoreInfo) { // not required
			return nil
		}

		if err := m.GranularRestoreInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("granularRestoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("granularRestoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) contextValidateOracleArchiveLogRestoreInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleArchiveLogRestoreInfo != nil {

		if swag.IsZero(m.OracleArchiveLogRestoreInfo) { // not required
			return nil
		}

		if err := m.OracleArchiveLogRestoreInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleArchiveLogRestoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleArchiveLogRestoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) contextValidateOracleCloneAppViewParamsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OracleCloneAppViewParamsVec); i++ {

		if m.OracleCloneAppViewParamsVec[i] != nil {

			if swag.IsZero(m.OracleCloneAppViewParamsVec[i]) { // not required
				return nil
			}

			if err := m.OracleCloneAppViewParamsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oracleCloneAppViewParamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oracleCloneAppViewParamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreOracleAppObjectParams) contextValidateOracleRecoveryValidationInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleRecoveryValidationInfo != nil {

		if swag.IsZero(m.OracleRecoveryValidationInfo) { // not required
			return nil
		}

		if err := m.OracleRecoveryValidationInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleRecoveryValidationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleRecoveryValidationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) contextValidateOracleTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleTargetParams != nil {

		if swag.IsZero(m.OracleTargetParams) { // not required
			return nil
		}

		if err := m.OracleTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) contextValidateOracleUpdateRestoreOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleUpdateRestoreOptions != nil {

		if swag.IsZero(m.OracleUpdateRestoreOptions) { // not required
			return nil
		}

		if err := m.OracleUpdateRestoreOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleUpdateRestoreOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleUpdateRestoreOptions")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) contextValidateRestoreSpfileOrPfileInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreSpfileOrPfileInfo != nil {

		if swag.IsZero(m.RestoreSpfileOrPfileInfo) { // not required
			return nil
		}

		if err := m.RestoreSpfileOrPfileInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreSpfileOrPfileInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreSpfileOrPfileInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) contextValidateSameConfigIrRecoveryOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.SameConfigIrRecoveryOptions != nil {

		if swag.IsZero(m.SameConfigIrRecoveryOptions) { // not required
			return nil
		}

		if err := m.SameConfigIrRecoveryOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sameConfigIrRecoveryOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sameConfigIrRecoveryOptions")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOracleAppObjectParams) contextValidateShellEnvironmentVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShellEnvironmentVec); i++ {

		if m.ShellEnvironmentVec[i] != nil {

			if swag.IsZero(m.ShellEnvironmentVec[i]) { // not required
				return nil
			}

			if err := m.ShellEnvironmentVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shellEnvironmentVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shellEnvironmentVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreOracleAppObjectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreOracleAppObjectParams) UnmarshalBinary(b []byte) error {
	var res RestoreOracleAppObjectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
