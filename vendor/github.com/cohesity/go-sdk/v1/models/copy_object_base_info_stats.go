// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CopyObjectBaseInfoStats copy object base info stats
//
// swagger:model CopyObjectBaseInfo_Stats
type CopyObjectBaseInfoStats struct {

	// Average logical bytes transfer rate in bytes per second.
	AvgLogicalTransferRateBps *int64 `json:"avgLogicalTransferRateBps,omitempty"`

	// Total amount of data read from the source of the backup (so far).
	BytesReadFromSource *int64 `json:"bytesReadFromSource,omitempty"`

	// This field is only applicable for NAS and file backup jobs. It indicates
	// whether the file walk portion of the backup has completed.
	FileWalkDone *bool `json:"fileWalkDone,omitempty"`

	// Front end size calculated by icebox during archival.
	FrontEndSizeInfo *SizeInfo `json:"frontEndSizeInfo,omitempty"`

	// Specifies the logical bytes transferred to the copy target (so far).
	LogicalBytesTransferred *int64 `json:"logicalBytesTransferred,omitempty"`

	// Specifies total logical size of object in bytes.
	LogicalSizeBytes *int64 `json:"logicalSizeBytes,omitempty"`

	// Specifies the physical bytes transferred to the copy target (so far).
	// Refer to 'bytes_transferred' field in ReplicationInfoBase and
	// ArchivalInfoBase protos for more information on this field.
	PhysicalBytesTransferred *int64 `json:"physicalBytesTransferred,omitempty"`

	// The total number of file and directory entities that have changed since
	// last backup. Only applicable to file based backups.
	TotalChangedFileCount *int64 `json:"totalChangedFileCount,omitempty"`

	// The total number of file and directory entities visited in this
	// backup. Only applicable to file based backups.
	TotalFileCount *int64 `json:"totalFileCount,omitempty"`
}

// Validate validates this copy object base info stats
func (m *CopyObjectBaseInfoStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrontEndSizeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CopyObjectBaseInfoStats) validateFrontEndSizeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FrontEndSizeInfo) { // not required
		return nil
	}

	if m.FrontEndSizeInfo != nil {
		if err := m.FrontEndSizeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frontEndSizeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("frontEndSizeInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this copy object base info stats based on the context it is used
func (m *CopyObjectBaseInfoStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFrontEndSizeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CopyObjectBaseInfoStats) contextValidateFrontEndSizeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FrontEndSizeInfo != nil {

		if swag.IsZero(m.FrontEndSizeInfo) { // not required
			return nil
		}

		if err := m.FrontEndSizeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frontEndSizeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("frontEndSizeInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CopyObjectBaseInfoStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CopyObjectBaseInfoStats) UnmarshalBinary(b []byte) error {
	var res CopyObjectBaseInfoStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
