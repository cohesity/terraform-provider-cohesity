// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfectedFile Infected file.
//
// Specifies the Result parameters for all infected files.
//
// swagger:model InfectedFile
type InfectedFile struct {

	// Specifies the name of antivirus service provider.
	AntivirusProviderName *string `json:"antivirusProviderName,omitempty"`

	// Specifies the entity id of the infected file.
	EntityID *int64 `json:"entityId,omitempty"`

	// Specifies file path of the infected file.
	FilePath *string `json:"filePath,omitempty"`

	// Specifies unix epoch timestamp (in microseconds) at which these threats
	// were detected.
	InfectionDetectionTimestamp *int64 `json:"infectionDetectionTimestamp,omitempty"`

	// Specifies unix epoch timestamp (in microseconds) at which this file is
	// modified.
	ModifiedTimestampUsecs *int64 `json:"modifiedTimestampUsecs,omitempty"`

	// Specifies the remediation state of the file.
	// Remediation State.
	// 'kQuarantine' indicates 'Quarantine' state of the file. This state blocks
	// the client access. The administrator will have to manually delete, rescan or
	// unquarantine the file.
	// 'kUnquarantine' indicates 'Unquarantine' state of the file.
	// The administrator has manually moved files from quarantined to the
	// unquarantined state to allow client access. Unquarantined files are
	// not scanned for virus until manually reset.
	// Enum: ["kQuarantine","kUnquarantine"]
	RemediationState *string `json:"remediationState,omitempty"`

	// Specifies the root inode id of the file system that infected file belongs
	// to.
	RootInodeID *int64 `json:"rootInodeId,omitempty"`

	// Specifies unix epoch timestamp (in microseconds) at which inode was
	// scanned for viruses.
	ScanTimestampUsecs *int64 `json:"scanTimestampUsecs,omitempty"`

	// Specifies the instance of an antivirus ICAP server in the cluster config
	// that detected these threats.
	ServiceIcapURI *string `json:"serviceIcapUri,omitempty"`

	// Specifies the list of virus threat descriptions found in the file.
	ThreatDescriptions []string `json:"threatDescriptions"`

	// Specifies the id of the View the infected file belongs to.
	ViewID *int64 `json:"viewId,omitempty"`

	// Specifies the View name corresponding to above view id.
	ViewName *string `json:"viewName,omitempty"`
}

// Validate validates this infected file
func (m *InfectedFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRemediationState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var infectedFileTypeRemediationStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kQuarantine","kUnquarantine"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infectedFileTypeRemediationStatePropEnum = append(infectedFileTypeRemediationStatePropEnum, v)
	}
}

const (

	// InfectedFileRemediationStateKQuarantine captures enum value "kQuarantine"
	InfectedFileRemediationStateKQuarantine string = "kQuarantine"

	// InfectedFileRemediationStateKUnquarantine captures enum value "kUnquarantine"
	InfectedFileRemediationStateKUnquarantine string = "kUnquarantine"
)

// prop value enum
func (m *InfectedFile) validateRemediationStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, infectedFileTypeRemediationStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InfectedFile) validateRemediationState(formats strfmt.Registry) error {
	if swag.IsZero(m.RemediationState) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemediationStateEnum("remediationState", "body", *m.RemediationState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this infected file based on context it is used
func (m *InfectedFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InfectedFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfectedFile) UnmarshalBinary(b []byte) error {
	var res InfectedFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
