// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GpfsFileset GPFS File Set.
//
// Specifies information about a fileset in a GPFS file system.
//
// swagger:model GpfsFileset
type GpfsFileset struct {

	// Specifies the id of the fileset.
	ID *uint64 `json:"id,omitempty"`

	// If the given fileset is an Independent fileset or not.
	IsIndependentFileset *bool `json:"isIndependentFileset,omitempty"`

	// Name of the filesystem associated with the fileset
	Name *string `json:"name,omitempty"`

	// Specifies the absolute path of the fileset.
	Path *string `json:"path,omitempty"`

	// Specifies GPFS supported Protocol information enabled on GPFS File System
	// 'kNfs' indicates NFS exports in a GPFS fileset.
	// 'kSmb' indicates CIFS/SMB Shares in a GPFS fileset.
	Protocols []string `json:"protocols"`
}

// Validate validates this gpfs fileset
func (m *GpfsFileset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocols(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gpfsFilesetProtocolsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kSmb"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gpfsFilesetProtocolsItemsEnum = append(gpfsFilesetProtocolsItemsEnum, v)
	}
}

func (m *GpfsFileset) validateProtocolsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gpfsFilesetProtocolsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GpfsFileset) validateProtocols(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocols) { // not required
		return nil
	}

	for i := 0; i < len(m.Protocols); i++ {

		// value enum
		if err := m.validateProtocolsItemsEnum("protocols"+"."+strconv.Itoa(i), "body", m.Protocols[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this gpfs fileset based on context it is used
func (m *GpfsFileset) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GpfsFileset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GpfsFileset) UnmarshalBinary(b []byte) error {
	var res GpfsFileset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
