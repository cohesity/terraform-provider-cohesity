// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ThrottlingPolicyDatastoreThrottlingPolicy Message that encapsulates the throttling policy that should be applied to
// a specific datastore. This can be used to override the throttling policy
// specified at the global level.
//
// swagger:model ThrottlingPolicy_DatastoreThrottlingPolicy
type ThrottlingPolicyDatastoreThrottlingPolicy struct {

	// The datastore entity that the latency thresholds apply to.
	DatastoreEntity *EntityProto `json:"datastoreEntity,omitempty"`

	// This specifies custom datastore streams config for this datastore that
	// override the global datastore streams config.
	DatastoreStreamsConfig *ThrottlingPolicyDatastoreStreamsConfig `json:"datastoreStreamsConfig,omitempty"`

	// Whether datastore streams can be configured on this datastore. If set to
	// true, then the config within 'DatastoreStreamsConfig' would be
	// applicable to this datastore. This can be used to override the
	// datastore streams configured at the global level.
	IsDatastoreStreamsConfigEnabled *bool `json:"isDatastoreStreamsConfigEnabled,omitempty"`

	// Whether we will adaptively throttle read operations from this datastore.
	// This can be used to disable throttling for this particular datastore
	// when throttling is enabled at the global level.
	// Note: This is only applicable to latency throttling.
	IsThrottlingEnabled *bool `json:"isThrottlingEnabled,omitempty"`

	// This specifies custom latency thresholds for this particular datastore
	// that override the global latency thresholds.
	LatencyThresholds *ThrottlingPolicyLatencyThresholds `json:"latencyThresholds,omitempty"`
}

// Validate validates this throttling policy datastore throttling policy
func (m *ThrottlingPolicyDatastoreThrottlingPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastoreEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatastoreStreamsConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatencyThresholds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThrottlingPolicyDatastoreThrottlingPolicy) validateDatastoreEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreEntity) { // not required
		return nil
	}

	if m.DatastoreEntity != nil {
		if err := m.DatastoreEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreEntity")
			}
			return err
		}
	}

	return nil
}

func (m *ThrottlingPolicyDatastoreThrottlingPolicy) validateDatastoreStreamsConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreStreamsConfig) { // not required
		return nil
	}

	if m.DatastoreStreamsConfig != nil {
		if err := m.DatastoreStreamsConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreStreamsConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreStreamsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ThrottlingPolicyDatastoreThrottlingPolicy) validateLatencyThresholds(formats strfmt.Registry) error {
	if swag.IsZero(m.LatencyThresholds) { // not required
		return nil
	}

	if m.LatencyThresholds != nil {
		if err := m.LatencyThresholds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latencyThresholds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latencyThresholds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this throttling policy datastore throttling policy based on the context it is used
func (m *ThrottlingPolicyDatastoreThrottlingPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatastoreEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatastoreStreamsConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatencyThresholds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThrottlingPolicyDatastoreThrottlingPolicy) contextValidateDatastoreEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.DatastoreEntity != nil {

		if swag.IsZero(m.DatastoreEntity) { // not required
			return nil
		}

		if err := m.DatastoreEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreEntity")
			}
			return err
		}
	}

	return nil
}

func (m *ThrottlingPolicyDatastoreThrottlingPolicy) contextValidateDatastoreStreamsConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.DatastoreStreamsConfig != nil {

		if swag.IsZero(m.DatastoreStreamsConfig) { // not required
			return nil
		}

		if err := m.DatastoreStreamsConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreStreamsConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreStreamsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ThrottlingPolicyDatastoreThrottlingPolicy) contextValidateLatencyThresholds(ctx context.Context, formats strfmt.Registry) error {

	if m.LatencyThresholds != nil {

		if swag.IsZero(m.LatencyThresholds) { // not required
			return nil
		}

		if err := m.LatencyThresholds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latencyThresholds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latencyThresholds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThrottlingPolicyDatastoreThrottlingPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThrottlingPolicyDatastoreThrottlingPolicy) UnmarshalBinary(b []byte) error {
	var res ThrottlingPolicyDatastoreThrottlingPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
