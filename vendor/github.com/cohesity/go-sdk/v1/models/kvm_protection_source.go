// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KvmProtectionSource KVM Protection Source.
//
// Specifies a Protection Source in KVM environment.
//
// swagger:model KvmProtectionSource
type KvmProtectionSource struct {

	// Specifies a message when the agent cannot be reached.
	AgentError *string `json:"agentError,omitempty"`

	// Specifies the ID of the Agent with which this KVM entity is associated
	// when the entity represents a Delegate host or KVM host.
	AgentID *int64 `json:"agentId,omitempty"`

	// Specifies the cluster ID for 'kCluster' objects.
	ClusterID *string `json:"clusterId,omitempty"`

	// Specifies the ID of the 'kDatacenter' objects.
	DatacenterID *string `json:"datacenterId,omitempty"`

	// Specifies a description about the Protection Source.
	Description *string `json:"description,omitempty"`

	// Specifies the name of the KVM entity.
	Name *string `json:"name,omitempty"`

	// Specifies the network ID to which Vnic is attached.
	NetworkID *string `json:"networkId,omitempty"`

	// Specifies the type of KVM Protection Source entities such as
	// 'kDatacenter', 'kCluster', 'kVirtualMachine', etc.
	// Specifies the type of an KVM source entity.
	// 'kOVirtManager' indicates the root entity registered with Cohesity cluster.
	// 'kStandaloneHost' indicates a host registered with Cohesity cluster.
	// 'kDatacenter' indicates a KVM datacenter managed by the OVirt manager.
	// 'kCluster' indicates a KVM cluster managed by the OVirt manager.
	// 'kHost' indicates a host within the KVM environment.
	// 'kVirtualMachine' indicates a virtual machine in the KVM enironment.
	// 'kNetwork' represents a network used by the virtual machine entity.
	// 'kStorageDomain' represents a storage domain in the KVM environment.
	// 'kVNicProfile' represents a VNic profile.
	// Enum: ["kOVirtManager","kStandaloneHost","kDatacenter","kCluster","kHost","kVirtualMachine","kNetwork","kStorageDomain","kVNicProfile"]
	Type *string `json:"type,omitempty"`

	// Specifies the UUID of the Object. This is unique within the KVM
	// environment.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this kvm protection source
func (m *KvmProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var kvmProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kOVirtManager","kStandaloneHost","kDatacenter","kCluster","kHost","kVirtualMachine","kNetwork","kStorageDomain","kVNicProfile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kvmProtectionSourceTypeTypePropEnum = append(kvmProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// KvmProtectionSourceTypeKOVirtManager captures enum value "kOVirtManager"
	KvmProtectionSourceTypeKOVirtManager string = "kOVirtManager"

	// KvmProtectionSourceTypeKStandaloneHost captures enum value "kStandaloneHost"
	KvmProtectionSourceTypeKStandaloneHost string = "kStandaloneHost"

	// KvmProtectionSourceTypeKDatacenter captures enum value "kDatacenter"
	KvmProtectionSourceTypeKDatacenter string = "kDatacenter"

	// KvmProtectionSourceTypeKCluster captures enum value "kCluster"
	KvmProtectionSourceTypeKCluster string = "kCluster"

	// KvmProtectionSourceTypeKHost captures enum value "kHost"
	KvmProtectionSourceTypeKHost string = "kHost"

	// KvmProtectionSourceTypeKVirtualMachine captures enum value "kVirtualMachine"
	KvmProtectionSourceTypeKVirtualMachine string = "kVirtualMachine"

	// KvmProtectionSourceTypeKNetwork captures enum value "kNetwork"
	KvmProtectionSourceTypeKNetwork string = "kNetwork"

	// KvmProtectionSourceTypeKStorageDomain captures enum value "kStorageDomain"
	KvmProtectionSourceTypeKStorageDomain string = "kStorageDomain"

	// KvmProtectionSourceTypeKVNicProfile captures enum value "kVNicProfile"
	KvmProtectionSourceTypeKVNicProfile string = "kVNicProfile"
)

// prop value enum
func (m *KvmProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kvmProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KvmProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this kvm protection source based on context it is used
func (m *KvmProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KvmProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KvmProtectionSource) UnmarshalBinary(b []byte) error {
	var res KvmProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
