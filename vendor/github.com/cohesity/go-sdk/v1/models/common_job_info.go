// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonJobInfo Common job Info.
//
// CommonJobInfo specifies the basic metadata used in all types of job.
//
// swagger:model CommonJobInfo
type CommonJobInfo struct {

	// Specifies the Timestamp in microseconds when this job was finished.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the error message reported when a search fails.
	Error *string `json:"error,omitempty"`

	// Specifies the name of the job.
	JobName *string `json:"jobName,omitempty"`

	// Specifies the Job Uid.
	JobUID *UniversalID `json:"jobUid,omitempty"`

	// Specifies the Timestamp in microseconds when this job was started.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the status of the job.
	// 'kJobRunning' indicates that the Job/task is currently running.
	// 'kJobFinished' indicates that the Job/task completed and finished.
	// 'kJobFailed' indicates that the Job/task failed and did not complete.
	// 'kJobCanceled' indicates that the Job/task was canceled.
	// 'kJobPaused' indicates the Job/task is paused.
	// Enum: ["kJobRunning","kJobFinished","kJobFailed","kJobCanceled","kJobPaused"]
	Status *string `json:"status,omitempty"`

	// Specifies the Vault Id associated with the job.
	VaultID *int64 `json:"vaultId,omitempty"`
}

// Validate validates this common job info
func (m *CommonJobInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonJobInfo) validateJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.JobUID) { // not required
		return nil
	}

	if m.JobUID != nil {
		if err := m.JobUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobUid")
			}
			return err
		}
	}

	return nil
}

var commonJobInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kJobRunning","kJobFinished","kJobFailed","kJobCanceled","kJobPaused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonJobInfoTypeStatusPropEnum = append(commonJobInfoTypeStatusPropEnum, v)
	}
}

const (

	// CommonJobInfoStatusKJobRunning captures enum value "kJobRunning"
	CommonJobInfoStatusKJobRunning string = "kJobRunning"

	// CommonJobInfoStatusKJobFinished captures enum value "kJobFinished"
	CommonJobInfoStatusKJobFinished string = "kJobFinished"

	// CommonJobInfoStatusKJobFailed captures enum value "kJobFailed"
	CommonJobInfoStatusKJobFailed string = "kJobFailed"

	// CommonJobInfoStatusKJobCanceled captures enum value "kJobCanceled"
	CommonJobInfoStatusKJobCanceled string = "kJobCanceled"

	// CommonJobInfoStatusKJobPaused captures enum value "kJobPaused"
	CommonJobInfoStatusKJobPaused string = "kJobPaused"
)

// prop value enum
func (m *CommonJobInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonJobInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonJobInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this common job info based on the context it is used
func (m *CommonJobInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonJobInfo) contextValidateJobUID(ctx context.Context, formats strfmt.Registry) error {

	if m.JobUID != nil {

		if swag.IsZero(m.JobUID) { // not required
			return nil
		}

		if err := m.JobUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobUid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonJobInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonJobInfo) UnmarshalBinary(b []byte) error {
	var res CommonJobInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
