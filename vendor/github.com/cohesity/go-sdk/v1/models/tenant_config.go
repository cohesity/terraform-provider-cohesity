// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TenantConfig Tenant Config.
//
// Specifies struct with basic tenant specific configuration.
//
// swagger:model TenantConfig
type TenantConfig struct {

	// Specifies if this tenant is bifrost enabled or not.
	BifrostEnabled *bool `json:"bifrostEnabled,omitempty"`

	// Specifies whether this tenant is manged on helios
	IsManagedOnHelios *bool `json:"isManagedOnHelios,omitempty"`

	// Specifies name of the tenant.
	Name *string `json:"name,omitempty"`

	// Whether the user is a restricted user. A restricted user can only view
	// the objects he has permissions to.
	Restricted *bool `json:"restricted,omitempty"`

	// Array of Roles.
	//
	// Specifies the Cohesity roles to associate with the user such as
	// such as 'Admin', 'Ops' or 'View'.
	// The Cohesity roles determine privileges on the Cohesity Cluster
	// for this user.
	Roles []string `json:"roles"`

	// Specifies the unique id of the tenant.
	TenantID *string `json:"tenantId,omitempty"`
}

// Validate validates this tenant config
func (m *TenantConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tenant config based on context it is used
func (m *TenantConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TenantConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantConfig) UnmarshalBinary(b []byte) error {
	var res TenantConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
