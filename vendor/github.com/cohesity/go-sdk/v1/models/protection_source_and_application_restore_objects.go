// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtectionSourceAndApplicationRestoreObjects Protection source and Application restore objects.
//
// Specifies the details about the protection source and snapshot from where
// the application objects must be restored. It also provides information about
// the application objects which have to be restored and target host to which
// the application objects must be restored.
//
// swagger:model ProtectionSourceAndApplicationRestoreObjects
type ProtectionSourceAndApplicationRestoreObjects struct {

	// Specifies the Application Server objects whose data should be restored
	// and the restore parameters for each of them.
	ApplicationRestoreObjects []*ApplicationRestoreObject `json:"applicationRestoreObjects"`

	// Specifies the restore information for the Protection Source object that
	// registered and hosts the Application Servers. This provides the
	// snapshot details from which the applications should be restored.
	// Required: true
	HostingProtectionSource *RestoreObjectDetails `json:"hostingProtectionSource"`
}

// Validate validates this protection source and application restore objects
func (m *ProtectionSourceAndApplicationRestoreObjects) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationRestoreObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostingProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSourceAndApplicationRestoreObjects) validateApplicationRestoreObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationRestoreObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationRestoreObjects); i++ {
		if swag.IsZero(m.ApplicationRestoreObjects[i]) { // not required
			continue
		}

		if m.ApplicationRestoreObjects[i] != nil {
			if err := m.ApplicationRestoreObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationRestoreObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applicationRestoreObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionSourceAndApplicationRestoreObjects) validateHostingProtectionSource(formats strfmt.Registry) error {

	if err := validate.Required("hostingProtectionSource", "body", m.HostingProtectionSource); err != nil {
		return err
	}

	if m.HostingProtectionSource != nil {
		if err := m.HostingProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostingProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostingProtectionSource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this protection source and application restore objects based on the context it is used
func (m *ProtectionSourceAndApplicationRestoreObjects) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationRestoreObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostingProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSourceAndApplicationRestoreObjects) contextValidateApplicationRestoreObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApplicationRestoreObjects); i++ {

		if m.ApplicationRestoreObjects[i] != nil {

			if swag.IsZero(m.ApplicationRestoreObjects[i]) { // not required
				return nil
			}

			if err := m.ApplicationRestoreObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationRestoreObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applicationRestoreObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionSourceAndApplicationRestoreObjects) contextValidateHostingProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.HostingProtectionSource != nil {

		if err := m.HostingProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostingProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostingProtectionSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionSourceAndApplicationRestoreObjects) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionSourceAndApplicationRestoreObjects) UnmarshalBinary(b []byte) error {
	var res ProtectionSourceAndApplicationRestoreObjects
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
