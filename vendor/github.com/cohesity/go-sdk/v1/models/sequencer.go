// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Sequencer Sequencer used to identify pieces of data sent to Atom. It is expected that
// different enviroment protos will be added to this  to define their own
// sequencers like one is added for VMware below.
//
// swagger:model Sequencer
type Sequencer struct {

	// mongodb sequencer
	MongodbSequencer *SequenceNumber `json:"mongodbSequencer,omitempty"`

	// vmware sequencer
	VmwareSequencer *SequenceNumber `json:"vmwareSequencer,omitempty"`
}

// Validate validates this sequencer
func (m *Sequencer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMongodbSequencer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareSequencer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Sequencer) validateMongodbSequencer(formats strfmt.Registry) error {
	if swag.IsZero(m.MongodbSequencer) { // not required
		return nil
	}

	if m.MongodbSequencer != nil {
		if err := m.MongodbSequencer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbSequencer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbSequencer")
			}
			return err
		}
	}

	return nil
}

func (m *Sequencer) validateVmwareSequencer(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareSequencer) { // not required
		return nil
	}

	if m.VmwareSequencer != nil {
		if err := m.VmwareSequencer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareSequencer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareSequencer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sequencer based on the context it is used
func (m *Sequencer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMongodbSequencer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareSequencer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Sequencer) contextValidateMongodbSequencer(ctx context.Context, formats strfmt.Registry) error {

	if m.MongodbSequencer != nil {

		if swag.IsZero(m.MongodbSequencer) { // not required
			return nil
		}

		if err := m.MongodbSequencer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbSequencer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbSequencer")
			}
			return err
		}
	}

	return nil
}

func (m *Sequencer) contextValidateVmwareSequencer(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareSequencer != nil {

		if swag.IsZero(m.VmwareSequencer) { // not required
			return nil
		}

		if err := m.VmwareSequencer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareSequencer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareSequencer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Sequencer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Sequencer) UnmarshalBinary(b []byte) error {
	var res Sequencer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
