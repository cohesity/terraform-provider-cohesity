// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemoteJobScript Remote Adapter.
//
// Provides details about the Remote Adapter associated with a
// 'kPuppeteer' Protection Job.
//
// swagger:model RemoteJobScript
type RemoteJobScript struct {

	// Full (No CBT) Script.
	//
	// Specifies the script that should run for the Full (no CBT) backup schedule
	// of a Remote Adapter 'kPuppeteer' Job.
	// This field is mandatory if the Policy associated with this Job
	// has a Full (no CBT) backup schedule and this is Remote Adapter
	// 'kPuppeteer' Job.
	FullBackupScript struct {
		RemoteScriptPathAndParams
	} `json:"fullBackupScript,omitempty"`

	// CBT-based Script.
	//
	// Specifies the script that should run for the CBT-based backup
	// schedule of a Remote Adapter 'kPuppeteer' Job. A CBT-based backup
	// schedule is utilizing Change Block Tracking when capturing Snapshots.
	// This field is mandatory if the Policy associated with this Job
	// has a CBT-based backup schedule and this is Remote Adapter
	// 'kPuppeteer' Job.
	IncrementalBackupScript struct {
		RemoteScriptPathAndParams
	} `json:"incrementalBackupScript,omitempty"`

	// Log Script.
	//
	// Specifies the script that should run for the Log backup schedule
	// of a Remote Adapter 'kPuppeteer' Job.
	// This field is mandatory if the Policy associated with this Job
	// has a Log backup schedule and this is Remote Adapter
	// 'kPuppeteer' Job.
	LogBackupScript struct {
		RemoteScriptPathAndParams
	} `json:"logBackupScript,omitempty"`

	// Specifies the remote host where the remote scripts are executed.
	// This field must be set for Remote Adapter Jobs.
	RemoteHost struct {
		RemoteHost
	} `json:"remoteHost,omitempty"`

	// Specifies the username that will be used to login to the remote host.
	// For host type 'kLinux', it is expected that user has setup the
	// password-less access. So only username field is required.
	Username *string `json:"username,omitempty"`
}

// Validate validates this remote job script
func (m *RemoteJobScript) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFullBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteHost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteJobScript) validateFullBackupScript(formats strfmt.Registry) error {
	if swag.IsZero(m.FullBackupScript) { // not required
		return nil
	}

	return nil
}

func (m *RemoteJobScript) validateIncrementalBackupScript(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalBackupScript) { // not required
		return nil
	}

	return nil
}

func (m *RemoteJobScript) validateLogBackupScript(formats strfmt.Registry) error {
	if swag.IsZero(m.LogBackupScript) { // not required
		return nil
	}

	return nil
}

func (m *RemoteJobScript) validateRemoteHost(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteHost) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this remote job script based on the context it is used
func (m *RemoteJobScript) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFullBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteJobScript) contextValidateFullBackupScript(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RemoteJobScript) contextValidateIncrementalBackupScript(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RemoteJobScript) contextValidateLogBackupScript(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RemoteJobScript) contextValidateRemoteHost(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteJobScript) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteJobScript) UnmarshalBinary(b []byte) error {
	var res RemoteJobScript
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
