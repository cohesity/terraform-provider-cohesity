// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CbtInfo Cbt Info.
//
// Specifies information about the Cbt Driver associated with agent.
//
// swagger:model CbtInfo
type CbtInfo struct {

	// Specifies whether the cbt driver is installed or not.
	IsInstalled *bool `json:"isInstalled,omitempty"`

	// Specifies the reboot status of the host post cbt driver installation.
	// Only applicable for volcbt driver.
	// Specifies the reboot status of the source post volcbt driver
	// installation.
	// 'kRebooted' indicates the source has been rebooted post volcbt driver
	// installation.
	// 'kNeedsReboot' indicates the source has not been rebooted post
	// volcbt driver installation.
	// 'kInternalError' indicates that there was an error while fetching
	// reboot status from source.
	// Enum: ["kRebooted","kNeedsReboot","kInternalError"]
	RebootStatus *string `json:"rebootStatus,omitempty"`

	// Specifies the status of the cbt driver.
	// Specifies the service state of the cbt driver.
	// 'kRunning' indicates the cbt driver is running.
	// 'kStopped' indicates the service is stopped.
	// 'kPaused' indicates the service is paused (it
	// is a Windows-specific state).
	// 'kUnknown' indicates the service with the specified
	// name is not known on the system.
	// Enum: ["kRunning","kStopped","kPaused","kUnknown"]
	ServiceState *string `json:"serviceState,omitempty"`
}

// Validate validates this cbt info
func (m *CbtInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRebootStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cbtInfoTypeRebootStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRebooted","kNeedsReboot","kInternalError"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cbtInfoTypeRebootStatusPropEnum = append(cbtInfoTypeRebootStatusPropEnum, v)
	}
}

const (

	// CbtInfoRebootStatusKRebooted captures enum value "kRebooted"
	CbtInfoRebootStatusKRebooted string = "kRebooted"

	// CbtInfoRebootStatusKNeedsReboot captures enum value "kNeedsReboot"
	CbtInfoRebootStatusKNeedsReboot string = "kNeedsReboot"

	// CbtInfoRebootStatusKInternalError captures enum value "kInternalError"
	CbtInfoRebootStatusKInternalError string = "kInternalError"
)

// prop value enum
func (m *CbtInfo) validateRebootStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cbtInfoTypeRebootStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CbtInfo) validateRebootStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RebootStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRebootStatusEnum("rebootStatus", "body", *m.RebootStatus); err != nil {
		return err
	}

	return nil
}

var cbtInfoTypeServiceStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRunning","kStopped","kPaused","kUnknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cbtInfoTypeServiceStatePropEnum = append(cbtInfoTypeServiceStatePropEnum, v)
	}
}

const (

	// CbtInfoServiceStateKRunning captures enum value "kRunning"
	CbtInfoServiceStateKRunning string = "kRunning"

	// CbtInfoServiceStateKStopped captures enum value "kStopped"
	CbtInfoServiceStateKStopped string = "kStopped"

	// CbtInfoServiceStateKPaused captures enum value "kPaused"
	CbtInfoServiceStateKPaused string = "kPaused"

	// CbtInfoServiceStateKUnknown captures enum value "kUnknown"
	CbtInfoServiceStateKUnknown string = "kUnknown"
)

// prop value enum
func (m *CbtInfo) validateServiceStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cbtInfoTypeServiceStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CbtInfo) validateServiceState(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceState) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceStateEnum("serviceState", "body", *m.ServiceState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cbt info based on context it is used
func (m *CbtInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CbtInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CbtInfo) UnmarshalBinary(b []byte) error {
	var res CbtInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
