// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BandwidthLimitOverride Bandwidth Limit Override
//
// Specifies bandwidth limit override value to be enforced during
// the specified daily time period for the specified days of the week.
//
// swagger:model BandwidthLimitOverride
type BandwidthLimitOverride struct {

	// Specifies the value to override the regular maximum bandwidth rate
	// (rateLimitBytesPerSec) for the specified time period.
	// The value is specified in bytes per second.
	BytesPerSecond *int64 `json:"bytesPerSecond,omitempty"`

	// Specifies the value to override the default IO rate for the specified
	// time period.
	IoRate *int32 `json:"ioRate,omitempty"`

	// Specifies a daily time period and days of the week when the
	// regular maximum bandwidth rate should be overridden.
	TimePeriods *TimeOfAWeek `json:"timePeriods,omitempty"`
}

// Validate validates this bandwidth limit override
func (m *BandwidthLimitOverride) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimePeriods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthLimitOverride) validateTimePeriods(formats strfmt.Registry) error {
	if swag.IsZero(m.TimePeriods) { // not required
		return nil
	}

	if m.TimePeriods != nil {
		if err := m.TimePeriods.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timePeriods")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timePeriods")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bandwidth limit override based on the context it is used
func (m *BandwidthLimitOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimePeriods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthLimitOverride) contextValidateTimePeriods(ctx context.Context, formats strfmt.Registry) error {

	if m.TimePeriods != nil {

		if swag.IsZero(m.TimePeriods) { // not required
			return nil
		}

		if err := m.TimePeriods.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timePeriods")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timePeriods")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthLimitOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthLimitOverride) UnmarshalBinary(b []byte) error {
	var res BandwidthLimitOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
