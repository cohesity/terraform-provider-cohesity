// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SQLEnvJobParameters SQL Environment Job Parameters.
//
// Specifies job parameters applicable for all 'kSQL' Environment type
// Protection Sources in a Protection Job.
//
// swagger:model SqlEnvJobParameters
type SQLEnvJobParameters struct {

	// Specifies the preference for backing up databases that are part of an AAG.
	// Only applicable if 'aagPreferenceFromSqlServer' is set to false or not
	// given.
	// kPrimaryReplicaOnly implies backups should always occur on the primary replica.
	// kSecondaryReplicaOnly implies backups should always occur on the secondary replica.
	// kPreferSecondaryReplica implies secondary replica is preferred for backups.
	// kAnyReplica implies no preference of about whether backups are performed on the primary replica or on a secondary replica. If no secondary replica is available, then performing backups on the primary replica is acceptable.
	// Enum: ["kPrimaryReplicaOnly","kSecondaryReplicaOnly","kPreferSecondaryReplica","kAnyReplica"]
	AagPreference *string `json:"aagPreference,omitempty"`

	// If true, AAG preferences are taken from the SQL server host. If this is
	// set to false or not given, preferences can be overridden by
	// aagBackupPreference.
	AagPreferenceFromSQLServer *bool `json:"aagPreferenceFromSqlServer,omitempty"`

	// If true, system databases are backed up. If this is set to false,
	// system databases are not backed up. If this field is not specified,
	// default value is true.
	BackupSystemDatabases *bool `json:"backupSystemDatabases,omitempty"`

	// Specifies the type of the 'kFull' backup job. Specifies whether it is
	// Volume level backup or individual files level backup.
	// kSqlVSSVolume implies volume based VSS full backup.
	// kSqlVSSFile implies file based VSS full backup.
	// Enum: ["kSqlVSSVolume","kSqlVSSFile","kSqlNative"]
	BackupType *string `json:"backupType,omitempty"`

	// If set to true, only the volumes associated with databases should be
	// backed up. The user cannot select additional volumes at host level for
	// backup.
	//
	// If set to false, all the volumes on the host machine will be backed up.
	// In this case, the user can further select the exact set of volumes
	// using host level params.
	//
	// Note that the volumes associated with selected databases will always be
	// included in the backup.
	BackupVolumesOnly *bool `json:"backupVolumesOnly,omitempty"`

	// If true, the backup of type kSqlVssVolume will be incremental
	// after restart
	IncrementalSnapshotUponRestart *bool `json:"incrementalSnapshotUponRestart,omitempty"`

	// If true, the backup is a full backup with the copy-only option specified.
	IsCopyOnlyFull *bool `json:"isCopyOnlyFull,omitempty"`

	// Number of streams to be used in native sql backup.
	NumStreams *int32 `json:"numStreams,omitempty"`

	// Specifies the preference for backing up user databases on the host.
	// kBackupAllDatabases implies to backup all databases.
	// kBackupAllExceptAAGDatabases implies not to backup AAG databases.
	// kBackupOnlyAAGDatabases implies to backup only AAG databases.
	// Enum: ["kBackupAllDatabases","kBackupAllExceptAAGDatabases","kBackupOnlyAAGDatabases"]
	UserDatabasePreference *string `json:"userDatabasePreference,omitempty"`

	// With clause is used for setting clauese in native sql backup.
	WithClause *string `json:"withClause,omitempty"`
}

// Validate validates this Sql env job parameters
func (m *SQLEnvJobParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAagPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDatabasePreference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sqlEnvJobParametersTypeAagPreferencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPrimaryReplicaOnly","kSecondaryReplicaOnly","kPreferSecondaryReplica","kAnyReplica"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sqlEnvJobParametersTypeAagPreferencePropEnum = append(sqlEnvJobParametersTypeAagPreferencePropEnum, v)
	}
}

const (

	// SQLEnvJobParametersAagPreferenceKPrimaryReplicaOnly captures enum value "kPrimaryReplicaOnly"
	SQLEnvJobParametersAagPreferenceKPrimaryReplicaOnly string = "kPrimaryReplicaOnly"

	// SQLEnvJobParametersAagPreferenceKSecondaryReplicaOnly captures enum value "kSecondaryReplicaOnly"
	SQLEnvJobParametersAagPreferenceKSecondaryReplicaOnly string = "kSecondaryReplicaOnly"

	// SQLEnvJobParametersAagPreferenceKPreferSecondaryReplica captures enum value "kPreferSecondaryReplica"
	SQLEnvJobParametersAagPreferenceKPreferSecondaryReplica string = "kPreferSecondaryReplica"

	// SQLEnvJobParametersAagPreferenceKAnyReplica captures enum value "kAnyReplica"
	SQLEnvJobParametersAagPreferenceKAnyReplica string = "kAnyReplica"
)

// prop value enum
func (m *SQLEnvJobParameters) validateAagPreferenceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sqlEnvJobParametersTypeAagPreferencePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SQLEnvJobParameters) validateAagPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.AagPreference) { // not required
		return nil
	}

	// value enum
	if err := m.validateAagPreferenceEnum("aagPreference", "body", *m.AagPreference); err != nil {
		return err
	}

	return nil
}

var sqlEnvJobParametersTypeBackupTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSqlVSSVolume","kSqlVSSFile","kSqlNative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sqlEnvJobParametersTypeBackupTypePropEnum = append(sqlEnvJobParametersTypeBackupTypePropEnum, v)
	}
}

const (

	// SQLEnvJobParametersBackupTypeKSQLVSSVolume captures enum value "kSqlVSSVolume"
	SQLEnvJobParametersBackupTypeKSQLVSSVolume string = "kSqlVSSVolume"

	// SQLEnvJobParametersBackupTypeKSQLVSSFile captures enum value "kSqlVSSFile"
	SQLEnvJobParametersBackupTypeKSQLVSSFile string = "kSqlVSSFile"

	// SQLEnvJobParametersBackupTypeKSQLNative captures enum value "kSqlNative"
	SQLEnvJobParametersBackupTypeKSQLNative string = "kSqlNative"
)

// prop value enum
func (m *SQLEnvJobParameters) validateBackupTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sqlEnvJobParametersTypeBackupTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SQLEnvJobParameters) validateBackupType(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackupTypeEnum("backupType", "body", *m.BackupType); err != nil {
		return err
	}

	return nil
}

var sqlEnvJobParametersTypeUserDatabasePreferencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kBackupAllDatabases","kBackupAllExceptAAGDatabases","kBackupOnlyAAGDatabases"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sqlEnvJobParametersTypeUserDatabasePreferencePropEnum = append(sqlEnvJobParametersTypeUserDatabasePreferencePropEnum, v)
	}
}

const (

	// SQLEnvJobParametersUserDatabasePreferenceKBackupAllDatabases captures enum value "kBackupAllDatabases"
	SQLEnvJobParametersUserDatabasePreferenceKBackupAllDatabases string = "kBackupAllDatabases"

	// SQLEnvJobParametersUserDatabasePreferenceKBackupAllExceptAAGDatabases captures enum value "kBackupAllExceptAAGDatabases"
	SQLEnvJobParametersUserDatabasePreferenceKBackupAllExceptAAGDatabases string = "kBackupAllExceptAAGDatabases"

	// SQLEnvJobParametersUserDatabasePreferenceKBackupOnlyAAGDatabases captures enum value "kBackupOnlyAAGDatabases"
	SQLEnvJobParametersUserDatabasePreferenceKBackupOnlyAAGDatabases string = "kBackupOnlyAAGDatabases"
)

// prop value enum
func (m *SQLEnvJobParameters) validateUserDatabasePreferenceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sqlEnvJobParametersTypeUserDatabasePreferencePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SQLEnvJobParameters) validateUserDatabasePreference(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDatabasePreference) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserDatabasePreferenceEnum("userDatabasePreference", "body", *m.UserDatabasePreference); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Sql env job parameters based on context it is used
func (m *SQLEnvJobParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SQLEnvJobParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SQLEnvJobParameters) UnmarshalBinary(b []byte) error {
	var res SQLEnvJobParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
