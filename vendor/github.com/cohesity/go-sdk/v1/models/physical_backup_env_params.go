// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PhysicalBackupEnvParams Physical Backup Environment Parameters.
//
// Message to capture any additional backup params for a Physical environment.
//
// swagger:model PhysicalBackupEnvParams
type PhysicalBackupEnvParams struct {

	// Whether CoBMR backup is enabled. If true, Cristie executables will be run
	// in agent so that bare metal restore can be performed.
	CobmrBackup *bool `json:"cobmrBackup,omitempty"`

	// If this is set to true, then incremental backup will be performed
	// after the server restarts, otherwise a full-backup will be done.
	// NOTE: This is applicable to windows host environments.
	EnableIncrementalBackupAfterRestart *bool `json:"enableIncrementalBackupAfterRestart,omitempty"`

	// The filtering policy to decide which objects within a source should be
	// backed up. If this is not specified, then all of the objects within the
	// source will be backed up.
	FilteringPolicy *FilteringPolicyProto `json:"filteringPolicy,omitempty"`

	// List of VSS writers that are excluded.
	VssExcludedWriters []string `json:"vssExcludedWriters"`
}

// Validate validates this physical backup env params
func (m *PhysicalBackupEnvParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilteringPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalBackupEnvParams) validateFilteringPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.FilteringPolicy) { // not required
		return nil
	}

	if m.FilteringPolicy != nil {
		if err := m.FilteringPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filteringPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filteringPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this physical backup env params based on the context it is used
func (m *PhysicalBackupEnvParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilteringPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalBackupEnvParams) contextValidateFilteringPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.FilteringPolicy != nil {

		if swag.IsZero(m.FilteringPolicy) { // not required
			return nil
		}

		if err := m.FilteringPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filteringPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filteringPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalBackupEnvParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalBackupEnvParams) UnmarshalBinary(b []byte) error {
	var res PhysicalBackupEnvParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
