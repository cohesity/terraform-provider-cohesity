// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ViewUserQuotas View User Quotas.
//
// Specifies the Result parameters for all user quotas
// of a view.
//
// swagger:model ViewUserQuotas
type ViewUserQuotas struct {

	// This cookie can be used in the succeeding call to list user quotas and
	// usages to get the next set of user quota overrides. If set to nil, it
	// means that there's no more results that the server could provide.
	Cookie *string `json:"cookie,omitempty"`

	// The quota and usage information for a user in all his views.
	QuotaAndUsageInAllViews []*QuotaAndUsageInView `json:"quotaAndUsageInAllViews"`

	// UserQuotaSummaryForUser is the summary for user quotas in all views for
	// a user.
	SummaryForUser *UserQuotaSummaryForUser `json:"summaryForUser,omitempty"`

	// UserQuotaSummaryForView is the summary for user quotas in a view.
	SummaryForView *UserQuotaSummaryForView `json:"summaryForView,omitempty"`

	// The default user quota policy for this view.
	UserQuotaSettings *UserQuotaSettings `json:"userQuotaSettings,omitempty"`

	// The list of user quota policies/overrides and usages.
	UsersQuotaAndUsage []*UserQuotaAndUsage `json:"usersQuotaAndUsage"`
}

// Validate validates this view user quotas
func (m *ViewUserQuotas) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuotaAndUsageInAllViews(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummaryForUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummaryForView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserQuotaSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsersQuotaAndUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewUserQuotas) validateQuotaAndUsageInAllViews(formats strfmt.Registry) error {
	if swag.IsZero(m.QuotaAndUsageInAllViews) { // not required
		return nil
	}

	for i := 0; i < len(m.QuotaAndUsageInAllViews); i++ {
		if swag.IsZero(m.QuotaAndUsageInAllViews[i]) { // not required
			continue
		}

		if m.QuotaAndUsageInAllViews[i] != nil {
			if err := m.QuotaAndUsageInAllViews[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quotaAndUsageInAllViews" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("quotaAndUsageInAllViews" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewUserQuotas) validateSummaryForUser(formats strfmt.Registry) error {
	if swag.IsZero(m.SummaryForUser) { // not required
		return nil
	}

	if m.SummaryForUser != nil {
		if err := m.SummaryForUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryForUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryForUser")
			}
			return err
		}
	}

	return nil
}

func (m *ViewUserQuotas) validateSummaryForView(formats strfmt.Registry) error {
	if swag.IsZero(m.SummaryForView) { // not required
		return nil
	}

	if m.SummaryForView != nil {
		if err := m.SummaryForView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryForView")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryForView")
			}
			return err
		}
	}

	return nil
}

func (m *ViewUserQuotas) validateUserQuotaSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.UserQuotaSettings) { // not required
		return nil
	}

	if m.UserQuotaSettings != nil {
		if err := m.UserQuotaSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userQuotaSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userQuotaSettings")
			}
			return err
		}
	}

	return nil
}

func (m *ViewUserQuotas) validateUsersQuotaAndUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.UsersQuotaAndUsage) { // not required
		return nil
	}

	for i := 0; i < len(m.UsersQuotaAndUsage); i++ {
		if swag.IsZero(m.UsersQuotaAndUsage[i]) { // not required
			continue
		}

		if m.UsersQuotaAndUsage[i] != nil {
			if err := m.UsersQuotaAndUsage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("usersQuotaAndUsage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("usersQuotaAndUsage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this view user quotas based on the context it is used
func (m *ViewUserQuotas) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuotaAndUsageInAllViews(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummaryForUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummaryForView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserQuotaSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsersQuotaAndUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewUserQuotas) contextValidateQuotaAndUsageInAllViews(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QuotaAndUsageInAllViews); i++ {

		if m.QuotaAndUsageInAllViews[i] != nil {

			if swag.IsZero(m.QuotaAndUsageInAllViews[i]) { // not required
				return nil
			}

			if err := m.QuotaAndUsageInAllViews[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quotaAndUsageInAllViews" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("quotaAndUsageInAllViews" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewUserQuotas) contextValidateSummaryForUser(ctx context.Context, formats strfmt.Registry) error {

	if m.SummaryForUser != nil {

		if swag.IsZero(m.SummaryForUser) { // not required
			return nil
		}

		if err := m.SummaryForUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryForUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryForUser")
			}
			return err
		}
	}

	return nil
}

func (m *ViewUserQuotas) contextValidateSummaryForView(ctx context.Context, formats strfmt.Registry) error {

	if m.SummaryForView != nil {

		if swag.IsZero(m.SummaryForView) { // not required
			return nil
		}

		if err := m.SummaryForView.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryForView")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryForView")
			}
			return err
		}
	}

	return nil
}

func (m *ViewUserQuotas) contextValidateUserQuotaSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.UserQuotaSettings != nil {

		if swag.IsZero(m.UserQuotaSettings) { // not required
			return nil
		}

		if err := m.UserQuotaSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userQuotaSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userQuotaSettings")
			}
			return err
		}
	}

	return nil
}

func (m *ViewUserQuotas) contextValidateUsersQuotaAndUsage(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsersQuotaAndUsage); i++ {

		if m.UsersQuotaAndUsage[i] != nil {

			if swag.IsZero(m.UsersQuotaAndUsage[i]) { // not required
				return nil
			}

			if err := m.UsersQuotaAndUsage[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("usersQuotaAndUsage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("usersQuotaAndUsage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewUserQuotas) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewUserQuotas) UnmarshalBinary(b []byte) error {
	var res ViewUserQuotas
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
