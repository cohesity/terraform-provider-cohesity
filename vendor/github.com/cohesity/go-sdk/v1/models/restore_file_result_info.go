// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreFileResultInfo This message captures result of restore of individual file or directory
// as initiated from magneto.
// Note, it is expected that the agents go through the "estimation" phase
// first for the entire batch of restore requests and then start copying.
// These state transitions are reflected in the "status" field here.
//
// swagger:model RestoreFileResultInfo
type RestoreFileResultInfo struct {

	// This captures the copy stats for this file and is present when the status
	// is kInProgress.
	CopyStats *RestoreFileCopyStats `json:"copyStats,omitempty"`

	// This is set to the destination directory where the file/directory was
	// copied.
	DestinationDir *string `json:"destinationDir,omitempty"`

	// This is set if there is any error during the restore.
	Error *ErrorProto `json:"error,omitempty"`

	// Information of the file being restored.
	// Note, the agent does not need to populate this.
	RestoredFileInfo *RestoredFileInfo `json:"restoredFileInfo,omitempty"`

	// Status of the restore.
	Status *int32 `json:"status,omitempty"`
}

// Validate validates this restore file result info
func (m *RestoreFileResultInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCopyStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredFileInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreFileResultInfo) validateCopyStats(formats strfmt.Registry) error {
	if swag.IsZero(m.CopyStats) { // not required
		return nil
	}

	if m.CopyStats != nil {
		if err := m.CopyStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copyStats")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFileResultInfo) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFileResultInfo) validateRestoredFileInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredFileInfo) { // not required
		return nil
	}

	if m.RestoredFileInfo != nil {
		if err := m.RestoredFileInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredFileInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredFileInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore file result info based on the context it is used
func (m *RestoreFileResultInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCopyStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredFileInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreFileResultInfo) contextValidateCopyStats(ctx context.Context, formats strfmt.Registry) error {

	if m.CopyStats != nil {

		if swag.IsZero(m.CopyStats) { // not required
			return nil
		}

		if err := m.CopyStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copyStats")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFileResultInfo) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFileResultInfo) contextValidateRestoredFileInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredFileInfo != nil {

		if swag.IsZero(m.RestoredFileInfo) { // not required
			return nil
		}

		if err := m.RestoredFileInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredFileInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredFileInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreFileResultInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreFileResultInfo) UnmarshalBinary(b []byte) error {
	var res RestoreFileResultInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
