// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectionSourceTreeInfo Registration and Protection Information.
//
// Specifies the registration and protection information of a registered
// Protection Source Tree on the Cohesity Cluster.
//
// Many different Protection Source trees are supported such as
// 'kVMware', 'kAcropolis', 'kPhysical' etc.,
//
// swagger:model ProtectionSourceTreeInfo
type ProtectionSourceTreeInfo struct {

	// Array of applications hierarchy registered on this node.
	//
	// Specifies the application type and the list of instances of the
	// application objects. For example for SQL Server, this list provides the
	// SQL Server instances running on a VM or a Physical Server.
	Applications []*ApplicationInfo `json:"applications"`

	// Specifies permission information for the protection source for the root
	// node of protection source tree.
	EntityPermissionInfo *EntityPermissionInformation `json:"entityPermissionInfo,omitempty"`

	// Specifies the logical size of the Protection Source in bytes.
	LogicalSizeBytes *int64 `json:"logicalSizeBytes,omitempty"`

	// Specifies the maintenance mode configuration of the protection source for the root
	// node (we currently only support setting the maintenance mode of the root node only
	// v7.1)
	MaintenanceModeConfig *MaintenanceModeConfigProto `json:"maintenanceModeConfig,omitempty"`

	// Specifies registration information for a root node in a Protection
	// Sources tree. A root node represents a registered Source on the
	// Cohesity Cluster, such as a vCenter Server.
	RegistrationInfo struct {
		RegisteredSourceInfo
	} `json:"registrationInfo,omitempty"`

	// Specifies the Protection Source for the root node of the Protection
	// Source tree.
	RootNode struct {
		ProtectionSource
	} `json:"rootNode,omitempty"`

	// Specifies the stats of protection for a Protection Source Tree.
	Stats struct {
		ProtectionSummary
	} `json:"stats,omitempty"`

	// Specifies the breakdown of the stats of protection by environment.
	// overrideDescription: true
	StatsByEnv []*ProtectionSummaryByEnv `json:"statsByEnv"`

	// Specifies the total bytes downtiered from the source so far.
	TotalDowntieredSizeInBytes *int64 `json:"totalDowntieredSizeInBytes,omitempty"`

	// Specifies the total bytes uptiered to the source so far.
	TotalUptieredSizeInBytes *int64 `json:"totalUptieredSizeInBytes,omitempty"`
}

// Validate validates this protection source tree info
func (m *ProtectionSourceTreeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityPermissionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceModeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatsByEnv(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSourceTreeInfo) validateApplications(formats strfmt.Registry) error {
	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	for i := 0; i < len(m.Applications); i++ {
		if swag.IsZero(m.Applications[i]) { // not required
			continue
		}

		if m.Applications[i] != nil {
			if err := m.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionSourceTreeInfo) validateEntityPermissionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityPermissionInfo) { // not required
		return nil
	}

	if m.EntityPermissionInfo != nil {
		if err := m.EntityPermissionInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityPermissionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityPermissionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceTreeInfo) validateMaintenanceModeConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MaintenanceModeConfig) { // not required
		return nil
	}

	if m.MaintenanceModeConfig != nil {
		if err := m.MaintenanceModeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenanceModeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenanceModeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceTreeInfo) validateRegistrationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationInfo) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSourceTreeInfo) validateRootNode(formats strfmt.Registry) error {
	if swag.IsZero(m.RootNode) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSourceTreeInfo) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSourceTreeInfo) validateStatsByEnv(formats strfmt.Registry) error {
	if swag.IsZero(m.StatsByEnv) { // not required
		return nil
	}

	for i := 0; i < len(m.StatsByEnv); i++ {
		if swag.IsZero(m.StatsByEnv[i]) { // not required
			continue
		}

		if m.StatsByEnv[i] != nil {
			if err := m.StatsByEnv[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statsByEnv" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("statsByEnv" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this protection source tree info based on the context it is used
func (m *ProtectionSourceTreeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityPermissionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaintenanceModeConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatsByEnv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSourceTreeInfo) contextValidateApplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Applications); i++ {

		if m.Applications[i] != nil {

			if swag.IsZero(m.Applications[i]) { // not required
				return nil
			}

			if err := m.Applications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionSourceTreeInfo) contextValidateEntityPermissionInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityPermissionInfo != nil {

		if swag.IsZero(m.EntityPermissionInfo) { // not required
			return nil
		}

		if err := m.EntityPermissionInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityPermissionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityPermissionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceTreeInfo) contextValidateMaintenanceModeConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MaintenanceModeConfig != nil {

		if swag.IsZero(m.MaintenanceModeConfig) { // not required
			return nil
		}

		if err := m.MaintenanceModeConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenanceModeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenanceModeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceTreeInfo) contextValidateRegistrationInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSourceTreeInfo) contextValidateRootNode(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSourceTreeInfo) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSourceTreeInfo) contextValidateStatsByEnv(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatsByEnv); i++ {

		if m.StatsByEnv[i] != nil {

			if swag.IsZero(m.StatsByEnv[i]) { // not required
				return nil
			}

			if err := m.StatsByEnv[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statsByEnv" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("statsByEnv" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionSourceTreeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionSourceTreeInfo) UnmarshalBinary(b []byte) error {
	var res ProtectionSourceTreeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
