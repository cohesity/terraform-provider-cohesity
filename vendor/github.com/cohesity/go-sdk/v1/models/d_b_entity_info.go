// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DBEntityInfo d b entity info
//
// swagger:model DBEntityInfo
type DBEntityInfo struct {

	// If archivelog mode is enabled for the database.
	ArchivelogEnabled *bool `json:"archivelogEnabled,omitempty"`

	// If the block change tracking(bct) is enabled for the database.
	BctEnabled *bool `json:"bctEnabled,omitempty"`

	// Container Database(CDB) info from this database.
	CdbEntityInfo *CDBEntityInfo `json:"cdbEntityInfo,omitempty"`

	// Character set.
	CharacterSet *string `json:"characterSet,omitempty"`

	// Oracle compatible parameter.
	// COMPATIBLE is oracle parameter that enables us to use a new release of
	// Oracle while ensuring the ability to downgrade the database to an earlier
	// release.
	// Required for PDB plug/unplug operations for now.
	Compatibility *string `json:"compatibility,omitempty"`

	// The domain for database.
	DbDomain *string `json:"dbDomain,omitempty"`

	// Type of oracle database edition.
	DbEdition *int32 `json:"dbEdition,omitempty"`

	// Database type.
	DbType *int32 `json:"dbType,omitempty"`

	// DB Unique Name.
	DbUniqueName *string `json:"dbUniqueName,omitempty"`

	// DG Entity Info from this database.
	DgEntityInfo *DGEntityInfo `json:"dgEntityInfo,omitempty"`

	// Flash/Fast Recovery area size in the Oracle DB.
	// https://tinyurl.com/ybvby6fm
	FraSize *int64 `json:"fraSize,omitempty"`

	// List of hosts for the current DB entity.
	HostVec []*Host `json:"hostVec"`

	// The maximum number of datafiles.
	MaxDatafiles *int64 `json:"maxDatafiles,omitempty"`

	// The maximum number of instances.
	MaxInstances *int64 `json:"maxInstances,omitempty"`

	// The maximum number of log history.
	MaxLogHistory *int64 `json:"maxLogHistory,omitempty"`

	// The maximum number of logfiles.
	MaxLogfiles *int64 `json:"maxLogfiles,omitempty"`

	// The maximum number of log members.
	MaxLogmembers *int64 `json:"maxLogmembers,omitempty"`

	// open mode
	OpenMode *int32 `json:"openMode,omitempty"`

	// Pluggable Database(PDB) info from this database.
	// This structure is populated for individual pdb level entity. The pdb
	// entity will be available directly.
	// In the future, all the pdb entities will be accessed only via this field.
	// and the CDBEntityInfo will only be used in few places like
	// discovery/registration.
	PdbEntityInfo *PDBEntityInfo `json:"pdbEntityInfo,omitempty"`

	// System Global Area size in Oracle DB.
	// https://tinyurl.com/y9o4ho6d
	SgaTargetSize *string `json:"sgaTargetSize,omitempty"`

	// shared pool size in Oracle DB.
	// https://tinyurl.com/y84a8lpl
	SharedPoolSize *string `json:"sharedPoolSize,omitempty"`

	// Size of the DB. This includes the size consumed by datafiles,
	// controlfiles, redo log files and temp files.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`

	// Path to the spfile.
	SpfilePath *string `json:"spfilePath,omitempty"`

	// The num of transparent data encryption(tde) tablespace in database.
	TdeEncryptedTsCount *int64 `json:"tdeEncryptedTsCount,omitempty"`

	// #tempfiles in the Oracle DB.
	// https://tinyurl.com/y873lpna
	TempFilesCount *int64 `json:"tempFilesCount,omitempty"`

	// Tempfile information of the database.
	TempfileInfoVec []*DBEntityInfoTempfileInfoRow `json:"tempfileInfoVec"`

	// Oracle database instance version
	Version *string `json:"version,omitempty"`
}

// Validate validates this d b entity info
func (m *DBEntityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCdbEntityInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDgEntityInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePdbEntityInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempfileInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DBEntityInfo) validateCdbEntityInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CdbEntityInfo) { // not required
		return nil
	}

	if m.CdbEntityInfo != nil {
		if err := m.CdbEntityInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdbEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdbEntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DBEntityInfo) validateDgEntityInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DgEntityInfo) { // not required
		return nil
	}

	if m.DgEntityInfo != nil {
		if err := m.DgEntityInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dgEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dgEntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DBEntityInfo) validateHostVec(formats strfmt.Registry) error {
	if swag.IsZero(m.HostVec) { // not required
		return nil
	}

	for i := 0; i < len(m.HostVec); i++ {
		if swag.IsZero(m.HostVec[i]) { // not required
			continue
		}

		if m.HostVec[i] != nil {
			if err := m.HostVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DBEntityInfo) validatePdbEntityInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.PdbEntityInfo) { // not required
		return nil
	}

	if m.PdbEntityInfo != nil {
		if err := m.PdbEntityInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pdbEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pdbEntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DBEntityInfo) validateTempfileInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.TempfileInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.TempfileInfoVec); i++ {
		if swag.IsZero(m.TempfileInfoVec[i]) { // not required
			continue
		}

		if m.TempfileInfoVec[i] != nil {
			if err := m.TempfileInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tempfileInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tempfileInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this d b entity info based on the context it is used
func (m *DBEntityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCdbEntityInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDgEntityInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePdbEntityInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTempfileInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DBEntityInfo) contextValidateCdbEntityInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CdbEntityInfo != nil {

		if swag.IsZero(m.CdbEntityInfo) { // not required
			return nil
		}

		if err := m.CdbEntityInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdbEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdbEntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DBEntityInfo) contextValidateDgEntityInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DgEntityInfo != nil {

		if swag.IsZero(m.DgEntityInfo) { // not required
			return nil
		}

		if err := m.DgEntityInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dgEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dgEntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DBEntityInfo) contextValidateHostVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostVec); i++ {

		if m.HostVec[i] != nil {

			if swag.IsZero(m.HostVec[i]) { // not required
				return nil
			}

			if err := m.HostVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DBEntityInfo) contextValidatePdbEntityInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PdbEntityInfo != nil {

		if swag.IsZero(m.PdbEntityInfo) { // not required
			return nil
		}

		if err := m.PdbEntityInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pdbEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pdbEntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DBEntityInfo) contextValidateTempfileInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TempfileInfoVec); i++ {

		if m.TempfileInfoVec[i] != nil {

			if swag.IsZero(m.TempfileInfoVec[i]) { // not required
				return nil
			}

			if err := m.TempfileInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tempfileInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tempfileInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DBEntityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DBEntityInfo) UnmarshalBinary(b []byte) error {
	var res DBEntityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
