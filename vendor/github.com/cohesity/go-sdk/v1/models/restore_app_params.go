// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreAppParams This message captures all the necessary arguments specified by the user to
// restore an application.
//
// swagger:model RestoreAppParams
type RestoreAppParams struct {

	// Credentials that will be used to log into the application environment.
	//
	// For a local restore operation, credentials are optional. If not specified,
	// the restore operation will use the credentials that were used to register
	// the application's owner entity.
	//
	// For a remote restore operation from a replicated target, credentials
	// must be specified.
	Credentials *Credentials `json:"credentials,omitempty"`

	// The restore information about the application's owner.
	OwnerRestoreInfo *AppOwnerRestoreInfo `json:"ownerRestoreInfo,omitempty"`

	// The application level objects that needs to be restored. If this vector is
	// populated with exactly one object without its 'app_entity', all the
	// application objects of the owner will be restored. If multiple objects
	// are being restored, the 'app_entity' field must be specified for all of
	// them.
	RestoreAppObjectVec []*RestoreAppObject `json:"restoreAppObjectVec"`

	// The application environment.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this restore app params
func (m *RestoreAppParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerRestoreInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreAppObjectVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAppParams) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppParams) validateOwnerRestoreInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerRestoreInfo) { // not required
		return nil
	}

	if m.OwnerRestoreInfo != nil {
		if err := m.OwnerRestoreInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerRestoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerRestoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppParams) validateRestoreAppObjectVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreAppObjectVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RestoreAppObjectVec); i++ {
		if swag.IsZero(m.RestoreAppObjectVec[i]) { // not required
			continue
		}

		if m.RestoreAppObjectVec[i] != nil {
			if err := m.RestoreAppObjectVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreAppObjectVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreAppObjectVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this restore app params based on the context it is used
func (m *RestoreAppParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerRestoreInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreAppObjectVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAppParams) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppParams) contextValidateOwnerRestoreInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerRestoreInfo != nil {

		if swag.IsZero(m.OwnerRestoreInfo) { // not required
			return nil
		}

		if err := m.OwnerRestoreInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerRestoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerRestoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppParams) contextValidateRestoreAppObjectVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestoreAppObjectVec); i++ {

		if m.RestoreAppObjectVec[i] != nil {

			if swag.IsZero(m.RestoreAppObjectVec[i]) { // not required
				return nil
			}

			if err := m.RestoreAppObjectVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreAppObjectVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreAppObjectVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreAppParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreAppParams) UnmarshalBinary(b []byte) error {
	var res RestoreAppParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
