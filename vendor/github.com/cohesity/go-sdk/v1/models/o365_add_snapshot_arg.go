// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// O365AddSnapshotArg o365 add snapshot arg
//
// swagger:model O365AddSnapshotArg
type O365AddSnapshotArg struct {

	// Information regarding o365 group backups.
	GroupInfo O365AddSnapshotArgGroupInfo `json:"groupInfo,omitempty"`

	// Information regarding one drive backups.
	//
	// There can be multiple drives. Currently we expect <= 2 drives, the user
	// drive is always present and the phl drive could be present in certain
	// cases (when the retention is turned on)
	//
	// This was initially an optional field and converted to repeated field
	// This conversion is safe for non-scalar types, refer:
	// https://protobuf.dev/programming-guides/proto3/#updating
	// If magneto is on higher version, and yoda slave on lower, it will pick
	// the last element in the repeated field.
	OneDriveInfoVec []*O365AddSnapshotArgOneDriveInfo `json:"oneDriveInfoVec"`

	// Information regarding outlook backups.
	OutlookInfo *O365AddSnapshotArgOutlookInfo `json:"outlookInfo,omitempty"`

	// Information regarding public folders backups.
	PublicFolderInfo *O365AddSnapshotArgPublicFolderInfo `json:"publicFolderInfo,omitempty"`

	// Information regarding sharepoint backups.
	SharepointInfo *O365AddSnapshotArgSharepointInfo `json:"sharepointInfo,omitempty"`

	// Information regarding o365 teams backups.
	TeamsInfo O365AddSnapshotArgTeamsInfo `json:"teamsInfo,omitempty"`
}

// Validate validates this o365 add snapshot arg
func (m *O365AddSnapshotArg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOneDriveInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutlookInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicFolderInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharepointInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *O365AddSnapshotArg) validateOneDriveInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.OneDriveInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.OneDriveInfoVec); i++ {
		if swag.IsZero(m.OneDriveInfoVec[i]) { // not required
			continue
		}

		if m.OneDriveInfoVec[i] != nil {
			if err := m.OneDriveInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oneDriveInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oneDriveInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *O365AddSnapshotArg) validateOutlookInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OutlookInfo) { // not required
		return nil
	}

	if m.OutlookInfo != nil {
		if err := m.OutlookInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookInfo")
			}
			return err
		}
	}

	return nil
}

func (m *O365AddSnapshotArg) validatePublicFolderInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicFolderInfo) { // not required
		return nil
	}

	if m.PublicFolderInfo != nil {
		if err := m.PublicFolderInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicFolderInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicFolderInfo")
			}
			return err
		}
	}

	return nil
}

func (m *O365AddSnapshotArg) validateSharepointInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SharepointInfo) { // not required
		return nil
	}

	if m.SharepointInfo != nil {
		if err := m.SharepointInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharepointInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharepointInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o365 add snapshot arg based on the context it is used
func (m *O365AddSnapshotArg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOneDriveInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutlookInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicFolderInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharepointInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *O365AddSnapshotArg) contextValidateOneDriveInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OneDriveInfoVec); i++ {

		if m.OneDriveInfoVec[i] != nil {

			if swag.IsZero(m.OneDriveInfoVec[i]) { // not required
				return nil
			}

			if err := m.OneDriveInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oneDriveInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oneDriveInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *O365AddSnapshotArg) contextValidateOutlookInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OutlookInfo != nil {

		if swag.IsZero(m.OutlookInfo) { // not required
			return nil
		}

		if err := m.OutlookInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookInfo")
			}
			return err
		}
	}

	return nil
}

func (m *O365AddSnapshotArg) contextValidatePublicFolderInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicFolderInfo != nil {

		if swag.IsZero(m.PublicFolderInfo) { // not required
			return nil
		}

		if err := m.PublicFolderInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicFolderInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicFolderInfo")
			}
			return err
		}
	}

	return nil
}

func (m *O365AddSnapshotArg) contextValidateSharepointInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SharepointInfo != nil {

		if swag.IsZero(m.SharepointInfo) { // not required
			return nil
		}

		if err := m.SharepointInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharepointInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharepointInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *O365AddSnapshotArg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *O365AddSnapshotArg) UnmarshalBinary(b []byte) error {
	var res O365AddSnapshotArg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
