// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudBackupJobPreOrPostScript A message to encapsulate the pre-backup and post-backup and post-snapshot
// scripts for Cloud Adapter (AWS, Azure, GCP) based backups.
//
// swagger:model CloudBackupJobPreOrPostScript
type CloudBackupJobPreOrPostScript struct {

	// Specific for machines that are running the bash shell.
	LinuxScript *ScriptPathAndParams `json:"linuxScript,omitempty"`

	// Specific for machines that are running the powershell.
	WindowsScript *ScriptPathAndParams `json:"windowsScript,omitempty"`
}

// Validate validates this cloud backup job pre or post script
func (m *CloudBackupJobPreOrPostScript) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinuxScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindowsScript(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudBackupJobPreOrPostScript) validateLinuxScript(formats strfmt.Registry) error {
	if swag.IsZero(m.LinuxScript) { // not required
		return nil
	}

	if m.LinuxScript != nil {
		if err := m.LinuxScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linuxScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linuxScript")
			}
			return err
		}
	}

	return nil
}

func (m *CloudBackupJobPreOrPostScript) validateWindowsScript(formats strfmt.Registry) error {
	if swag.IsZero(m.WindowsScript) { // not required
		return nil
	}

	if m.WindowsScript != nil {
		if err := m.WindowsScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("windowsScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("windowsScript")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloud backup job pre or post script based on the context it is used
func (m *CloudBackupJobPreOrPostScript) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinuxScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWindowsScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudBackupJobPreOrPostScript) contextValidateLinuxScript(ctx context.Context, formats strfmt.Registry) error {

	if m.LinuxScript != nil {

		if swag.IsZero(m.LinuxScript) { // not required
			return nil
		}

		if err := m.LinuxScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linuxScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linuxScript")
			}
			return err
		}
	}

	return nil
}

func (m *CloudBackupJobPreOrPostScript) contextValidateWindowsScript(ctx context.Context, formats strfmt.Registry) error {

	if m.WindowsScript != nil {

		if swag.IsZero(m.WindowsScript) { // not required
			return nil
		}

		if err := m.WindowsScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("windowsScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("windowsScript")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudBackupJobPreOrPostScript) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudBackupJobPreOrPostScript) UnmarshalBinary(b []byte) error {
	var res CloudBackupJobPreOrPostScript
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
