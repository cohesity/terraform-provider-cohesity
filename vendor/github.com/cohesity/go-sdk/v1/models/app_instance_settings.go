// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppInstanceSettings App instance settings.
//
// AppInstanceSettings provides settings used while launching an app instance.
// Current settings include QoSTier to be used for the instance and views
// allowed to be accessed by the instance.
//
// swagger:model AppInstanceSettings
type AppInstanceSettings struct {

	// External network information of the app instance.
	ExternalNetworkInfo *ExternalNetworkInfo `json:"externalNetworkInfo,omitempty"`

	// Instance size specification (e.g. small/medium/large). Used to determine
	// container resources.
	InstanceSize *string `json:"instanceSize,omitempty"`

	// Specifies which protected objects are allowed to be accessed by an app
	// instance.
	ProtectedObjectPrivileges *ProtectedObjectPrivileges `json:"protectedObjectPrivileges,omitempty"`

	// Specifies QoSTier of the app instance.
	// Specifies QoS Tier for an app instance. App instances are allocated
	// resources such as memory, CPU and IO based on their QoS Tier.
	// kLow - Low QoS Tier.
	// kMedium - Medium QoS Tier.
	// kHigh - High QoS Tier.
	// kMax - Max QoS Tier.
	// Enum: ["kLow","kMedium","kHigh","kMax"]
	QosTier *string `json:"qosTier,omitempty"`

	// Specifies views allowed to be accessed in read only mode by the app
	// instance.
	ReadViewPrivileges *ViewPrivileges `json:"readViewPrivileges,omitempty"`

	// Specifies views allowed to be accessed in read/write mode by the app
	// instance.
	ReadWriteViewPrivileges *ViewPrivileges `json:"readWriteViewPrivileges,omitempty"`

	// List of vm-name, replica count pairs to be used at the time of app
	// instance launch.
	VMNumReplicasList []*VMNumReplicas `json:"vmNumReplicasList"`
}

// Validate validates this app instance settings
func (m *AppInstanceSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalNetworkInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectedObjectPrivileges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadViewPrivileges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadWriteViewPrivileges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNumReplicasList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstanceSettings) validateExternalNetworkInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalNetworkInfo) { // not required
		return nil
	}

	if m.ExternalNetworkInfo != nil {
		if err := m.ExternalNetworkInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalNetworkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalNetworkInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstanceSettings) validateProtectedObjectPrivileges(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectedObjectPrivileges) { // not required
		return nil
	}

	if m.ProtectedObjectPrivileges != nil {
		if err := m.ProtectedObjectPrivileges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectedObjectPrivileges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectedObjectPrivileges")
			}
			return err
		}
	}

	return nil
}

var appInstanceSettingsTypeQosTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLow","kMedium","kHigh","kMax"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appInstanceSettingsTypeQosTierPropEnum = append(appInstanceSettingsTypeQosTierPropEnum, v)
	}
}

const (

	// AppInstanceSettingsQosTierKLow captures enum value "kLow"
	AppInstanceSettingsQosTierKLow string = "kLow"

	// AppInstanceSettingsQosTierKMedium captures enum value "kMedium"
	AppInstanceSettingsQosTierKMedium string = "kMedium"

	// AppInstanceSettingsQosTierKHigh captures enum value "kHigh"
	AppInstanceSettingsQosTierKHigh string = "kHigh"

	// AppInstanceSettingsQosTierKMax captures enum value "kMax"
	AppInstanceSettingsQosTierKMax string = "kMax"
)

// prop value enum
func (m *AppInstanceSettings) validateQosTierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, appInstanceSettingsTypeQosTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AppInstanceSettings) validateQosTier(formats strfmt.Registry) error {
	if swag.IsZero(m.QosTier) { // not required
		return nil
	}

	// value enum
	if err := m.validateQosTierEnum("qosTier", "body", *m.QosTier); err != nil {
		return err
	}

	return nil
}

func (m *AppInstanceSettings) validateReadViewPrivileges(formats strfmt.Registry) error {
	if swag.IsZero(m.ReadViewPrivileges) { // not required
		return nil
	}

	if m.ReadViewPrivileges != nil {
		if err := m.ReadViewPrivileges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readViewPrivileges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readViewPrivileges")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstanceSettings) validateReadWriteViewPrivileges(formats strfmt.Registry) error {
	if swag.IsZero(m.ReadWriteViewPrivileges) { // not required
		return nil
	}

	if m.ReadWriteViewPrivileges != nil {
		if err := m.ReadWriteViewPrivileges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readWriteViewPrivileges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readWriteViewPrivileges")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstanceSettings) validateVMNumReplicasList(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNumReplicasList) { // not required
		return nil
	}

	for i := 0; i < len(m.VMNumReplicasList); i++ {
		if swag.IsZero(m.VMNumReplicasList[i]) { // not required
			continue
		}

		if m.VMNumReplicasList[i] != nil {
			if err := m.VMNumReplicasList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmNumReplicasList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmNumReplicasList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this app instance settings based on the context it is used
func (m *AppInstanceSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternalNetworkInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectedObjectPrivileges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReadViewPrivileges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReadWriteViewPrivileges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNumReplicasList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstanceSettings) contextValidateExternalNetworkInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalNetworkInfo != nil {

		if swag.IsZero(m.ExternalNetworkInfo) { // not required
			return nil
		}

		if err := m.ExternalNetworkInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalNetworkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalNetworkInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstanceSettings) contextValidateProtectedObjectPrivileges(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectedObjectPrivileges != nil {

		if swag.IsZero(m.ProtectedObjectPrivileges) { // not required
			return nil
		}

		if err := m.ProtectedObjectPrivileges.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectedObjectPrivileges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectedObjectPrivileges")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstanceSettings) contextValidateReadViewPrivileges(ctx context.Context, formats strfmt.Registry) error {

	if m.ReadViewPrivileges != nil {

		if swag.IsZero(m.ReadViewPrivileges) { // not required
			return nil
		}

		if err := m.ReadViewPrivileges.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readViewPrivileges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readViewPrivileges")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstanceSettings) contextValidateReadWriteViewPrivileges(ctx context.Context, formats strfmt.Registry) error {

	if m.ReadWriteViewPrivileges != nil {

		if swag.IsZero(m.ReadWriteViewPrivileges) { // not required
			return nil
		}

		if err := m.ReadWriteViewPrivileges.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readWriteViewPrivileges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readWriteViewPrivileges")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstanceSettings) contextValidateVMNumReplicasList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMNumReplicasList); i++ {

		if m.VMNumReplicasList[i] != nil {

			if swag.IsZero(m.VMNumReplicasList[i]) { // not required
				return nil
			}

			if err := m.VMNumReplicasList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmNumReplicasList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmNumReplicasList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstanceSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstanceSettings) UnmarshalBinary(b []byte) error {
	var res AppInstanceSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
