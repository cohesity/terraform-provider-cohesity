// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PhysicalEnvJobParameters Physical Environment Job Parameters.
//
// Protection Job parameters applicable to 'kPhysical' Environment type.
// Specifies job parameters applicable for all 'kPhysical' Environment type
// Protection Sources in a Protection Job.
//
// swagger:model PhysicalEnvJobParameters
type PhysicalEnvJobParameters struct {

	// Specifies whether to enable CoBMR backup.
	CobmrBackup *bool `json:"CobmrBackup,omitempty"`

	// Specifies filters on the backup objects like files and directories.
	// Specifying filters decide which objects within a source should be backed
	// up. If this field is not specified, then all of the objects within the
	// source will be backed up.
	FilePathFilters *FilePathFilter `json:"filePathFilters,omitempty"`

	// If true, performs an incremental backup after server restarts. Otherwise
	// a full backup is done. NOTE: This is applicable only to Windows servers.
	// If not set, default value is false.
	IncrementalSnapshotUponRestart *bool `json:"incrementalSnapshotUponRestart,omitempty"`
}

// Validate validates this physical env job parameters
func (m *PhysicalEnvJobParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilePathFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalEnvJobParameters) validateFilePathFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.FilePathFilters) { // not required
		return nil
	}

	if m.FilePathFilters != nil {
		if err := m.FilePathFilters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filePathFilters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filePathFilters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this physical env job parameters based on the context it is used
func (m *PhysicalEnvJobParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilePathFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalEnvJobParameters) contextValidateFilePathFilters(ctx context.Context, formats strfmt.Registry) error {

	if m.FilePathFilters != nil {

		if swag.IsZero(m.FilePathFilters) { // not required
			return nil
		}

		if err := m.FilePathFilters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filePathFilters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filePathFilters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalEnvJobParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalEnvJobParameters) UnmarshalBinary(b []byte) error {
	var res PhysicalEnvJobParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
