// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AlertResolution Alert Resolution.
//
// Provides Resolution details and the list of Alerts resolved by a Resolution,
// which are specified by Alert Ids.
//
// swagger:model AlertResolution
type AlertResolution struct {

	// Specifies list of Alerts resolved by a Resolution, which are specified by
	// Alert Ids.
	AlertIDList []string `json:"alertIdList"`

	// Specifies information about the Alert Resolution such as a summary,
	// id assigned by the Cohesity Cluster, user who resolved the Alerts, etc.
	ResolutionDetails *AlertResolutionDetails `json:"resolutionDetails,omitempty"`

	// Specifies unique tenantIds of the alert contained in this resolution.
	TenantIds []string `json:"tenantIds"`
}

// Validate validates this alert resolution
func (m *AlertResolution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResolutionDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertResolution) validateResolutionDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ResolutionDetails) { // not required
		return nil
	}

	if m.ResolutionDetails != nil {
		if err := m.ResolutionDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolutionDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resolutionDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this alert resolution based on the context it is used
func (m *AlertResolution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResolutionDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertResolution) contextValidateResolutionDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ResolutionDetails != nil {

		if swag.IsZero(m.ResolutionDetails) { // not required
			return nil
		}

		if err := m.ResolutionDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolutionDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resolutionDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertResolution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertResolution) UnmarshalBinary(b []byte) error {
	var res AlertResolution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
