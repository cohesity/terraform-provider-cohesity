// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleSourceParams Oracle Source Parameters.
//
// Message to capture additional backup/restore params for a Oracle source.
//
// swagger:model OracleSourceParams
type OracleSourceParams struct {

	// A vector of unique Oracle databases. Each vector entry represents the
	// backup/restore parameters for one unique Oracle database. Uniqueness is
	// determined by the database unique name.
	AdditionalOracleDbParamsVec []*AdditionalOracleDBParams `json:"additionalOracleDbParamsVec"`

	// This parameter indicates whether or not to persist mountpoints.
	// Default is set to true, which was the behavior before this option.
	PersistMountpoints *bool `json:"persistMountpoints,omitempty"`
}

// Validate validates this oracle source params
func (m *OracleSourceParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalOracleDbParamsVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleSourceParams) validateAdditionalOracleDbParamsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalOracleDbParamsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalOracleDbParamsVec); i++ {
		if swag.IsZero(m.AdditionalOracleDbParamsVec[i]) { // not required
			continue
		}

		if m.AdditionalOracleDbParamsVec[i] != nil {
			if err := m.AdditionalOracleDbParamsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalOracleDbParamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additionalOracleDbParamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this oracle source params based on the context it is used
func (m *OracleSourceParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalOracleDbParamsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleSourceParams) contextValidateAdditionalOracleDbParamsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalOracleDbParamsVec); i++ {

		if m.AdditionalOracleDbParamsVec[i] != nil {

			if swag.IsZero(m.AdditionalOracleDbParamsVec[i]) { // not required
				return nil
			}

			if err := m.AdditionalOracleDbParamsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalOracleDbParamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additionalOracleDbParamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleSourceParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleSourceParams) UnmarshalBinary(b []byte) error {
	var res OracleSourceParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
