// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JobPolicyProto DEPRECATED in 5.0!
//
// A message that specifies the policies to use for a job.
//
// swagger:model JobPolicyProto
type JobPolicyProto struct {

	// Specifies the scheduling and retention policy to use when backing up
	// sources.
	BackupPolicy *BackupPolicyProto `json:"backupPolicy,omitempty"`

	// Specifies additional policies that can be used to copy snapshots created
	// by a backup run to different targets (such as a remote replica, tape etc).
	// Each policy also specifies the retention policy that should be applied to
	// the copied snapshots at the respective target.
	SnapshotTargetPolicyVec []*SnapshotTargetPolicyProto `json:"snapshotTargetPolicyVec"`
}

// Validate validates this job policy proto
func (m *JobPolicyProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotTargetPolicyVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobPolicyProto) validateBackupPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPolicy) { // not required
		return nil
	}

	if m.BackupPolicy != nil {
		if err := m.BackupPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *JobPolicyProto) validateSnapshotTargetPolicyVec(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotTargetPolicyVec) { // not required
		return nil
	}

	for i := 0; i < len(m.SnapshotTargetPolicyVec); i++ {
		if swag.IsZero(m.SnapshotTargetPolicyVec[i]) { // not required
			continue
		}

		if m.SnapshotTargetPolicyVec[i] != nil {
			if err := m.SnapshotTargetPolicyVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshotTargetPolicyVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshotTargetPolicyVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this job policy proto based on the context it is used
func (m *JobPolicyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotTargetPolicyVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobPolicyProto) contextValidateBackupPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPolicy != nil {

		if swag.IsZero(m.BackupPolicy) { // not required
			return nil
		}

		if err := m.BackupPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *JobPolicyProto) contextValidateSnapshotTargetPolicyVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SnapshotTargetPolicyVec); i++ {

		if m.SnapshotTargetPolicyVec[i] != nil {

			if swag.IsZero(m.SnapshotTargetPolicyVec[i]) { // not required
				return nil
			}

			if err := m.SnapshotTargetPolicyVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshotTargetPolicyVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshotTargetPolicyVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobPolicyProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobPolicyProto) UnmarshalBinary(b []byte) error {
	var res JobPolicyProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
