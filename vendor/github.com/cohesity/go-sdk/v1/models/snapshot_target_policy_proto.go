// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SnapshotTargetPolicyProto Snapshot Target Policy Proto.
//
// Message that specifies the policy for copying backup snapshots to a target.
// This message also specifies the retention policy that should be applied to
// the snapshots after they have been copied to the specified target.
//
// swagger:model SnapshotTargetPolicyProto
type SnapshotTargetPolicyProto struct {

	// The backup type for which copy will be made to the snapshot target. If
	// set, the first run of given type during the scheduled period will get
	// copied.
	//
	// Currently, the only value that can be set here is kFull (Magneto will
	// return an error if it is set to anything else).
	BackupType *int32 `json:"backupType,omitempty"`

	// This is a vector of timeouts, specified by the user, for different backup
	// types(kFull, kRegular). A cancellation will automatically gets triggered
	// if the copy task/sub-task has been running for more than this timeout
	// duration.
	CopyBackupTimeoutVec []*CancellationTimeout `json:"copyBackupTimeoutVec"`

	// If this is false, then only snapshots from the first completely successful
	// run in the given time granularity will be considered for being copied. If
	// this is true, then snapshots from the first partially successful run will
	// also be eligible to be copied.
	CopyPartiallySuccessfulRun *bool `json:"copyPartiallySuccessfulRun,omitempty"`

	// Specifies additional retention policies that should be applied to the copy
	// snapshot. A copy snapshot will be retained up to a time that is the
	// maximum of all retention policies that are applicable to it.
	ExtendedRetentionPolicyVec []*ExtendedRetentionPolicyProto `json:"extendedRetentionPolicyVec"`

	// Specifies the frequency at which the backup job's snapshots should be
	// copied to the specified target.
	GranularityBucket *GranularityBucket `json:"granularityBucket,omitempty"`

	// This id uniquely identifies this entry in the ProtectionPolicyProto.
	//
	// If this message is from global policy, this id is generated by Helios.
	// Otherwise, it is generated by Iris. Magneto uses this for merging linked
	// policies with its parent global policy.
	ID *string `json:"id,omitempty"`

	// The retention that applies to log backup snapshots on the target after
	// they have been copied.
	LogRetentionPolicy *RetentionPolicyProto `json:"logRetentionPolicy,omitempty"`

	// Specifies how to determine the expiration time for snapshots copied due to
	// this policy. The snapshots will be marked as expiring (i.e., eligible to
	// be garbage collected) in 'num_days_to_keep' days from when the snapshots
	// were created.
	NumDaysToKeep *int64 `json:"numDaysToKeep,omitempty"`

	// The retention that applies to the snapshots on the target (after they have
	// been copied there).
	RetentionPolicy *RetentionPolicyProto `json:"retentionPolicy,omitempty"`

	// The target where the backup snapshots should be copied to.
	SnapshotTarget *SnapshotTarget `json:"snapshotTarget,omitempty"`
}

// Validate validates this snapshot target policy proto
func (m *SnapshotTargetPolicyProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCopyBackupTimeoutVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtendedRetentionPolicyVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGranularityBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotTargetPolicyProto) validateCopyBackupTimeoutVec(formats strfmt.Registry) error {
	if swag.IsZero(m.CopyBackupTimeoutVec) { // not required
		return nil
	}

	for i := 0; i < len(m.CopyBackupTimeoutVec); i++ {
		if swag.IsZero(m.CopyBackupTimeoutVec[i]) { // not required
			continue
		}

		if m.CopyBackupTimeoutVec[i] != nil {
			if err := m.CopyBackupTimeoutVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("copyBackupTimeoutVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("copyBackupTimeoutVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotTargetPolicyProto) validateExtendedRetentionPolicyVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtendedRetentionPolicyVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtendedRetentionPolicyVec); i++ {
		if swag.IsZero(m.ExtendedRetentionPolicyVec[i]) { // not required
			continue
		}

		if m.ExtendedRetentionPolicyVec[i] != nil {
			if err := m.ExtendedRetentionPolicyVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extendedRetentionPolicyVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extendedRetentionPolicyVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotTargetPolicyProto) validateGranularityBucket(formats strfmt.Registry) error {
	if swag.IsZero(m.GranularityBucket) { // not required
		return nil
	}

	if m.GranularityBucket != nil {
		if err := m.GranularityBucket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("granularityBucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("granularityBucket")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTargetPolicyProto) validateLogRetentionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.LogRetentionPolicy) { // not required
		return nil
	}

	if m.LogRetentionPolicy != nil {
		if err := m.LogRetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logRetentionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logRetentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTargetPolicyProto) validateRetentionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.RetentionPolicy) { // not required
		return nil
	}

	if m.RetentionPolicy != nil {
		if err := m.RetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTargetPolicyProto) validateSnapshotTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotTarget) { // not required
		return nil
	}

	if m.SnapshotTarget != nil {
		if err := m.SnapshotTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotTarget")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapshot target policy proto based on the context it is used
func (m *SnapshotTargetPolicyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCopyBackupTimeoutVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtendedRetentionPolicyVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGranularityBucket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogRetentionPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetentionPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotTargetPolicyProto) contextValidateCopyBackupTimeoutVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CopyBackupTimeoutVec); i++ {

		if m.CopyBackupTimeoutVec[i] != nil {

			if swag.IsZero(m.CopyBackupTimeoutVec[i]) { // not required
				return nil
			}

			if err := m.CopyBackupTimeoutVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("copyBackupTimeoutVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("copyBackupTimeoutVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotTargetPolicyProto) contextValidateExtendedRetentionPolicyVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtendedRetentionPolicyVec); i++ {

		if m.ExtendedRetentionPolicyVec[i] != nil {

			if swag.IsZero(m.ExtendedRetentionPolicyVec[i]) { // not required
				return nil
			}

			if err := m.ExtendedRetentionPolicyVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extendedRetentionPolicyVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extendedRetentionPolicyVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotTargetPolicyProto) contextValidateGranularityBucket(ctx context.Context, formats strfmt.Registry) error {

	if m.GranularityBucket != nil {

		if swag.IsZero(m.GranularityBucket) { // not required
			return nil
		}

		if err := m.GranularityBucket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("granularityBucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("granularityBucket")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTargetPolicyProto) contextValidateLogRetentionPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.LogRetentionPolicy != nil {

		if swag.IsZero(m.LogRetentionPolicy) { // not required
			return nil
		}

		if err := m.LogRetentionPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logRetentionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logRetentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTargetPolicyProto) contextValidateRetentionPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.RetentionPolicy != nil {

		if swag.IsZero(m.RetentionPolicy) { // not required
			return nil
		}

		if err := m.RetentionPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTargetPolicyProto) contextValidateSnapshotTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotTarget != nil {

		if swag.IsZero(m.SnapshotTarget) { // not required
			return nil
		}

		if err := m.SnapshotTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotTarget")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotTargetPolicyProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotTargetPolicyProto) UnmarshalBinary(b []byte) error {
	var res SnapshotTargetPolicyProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
