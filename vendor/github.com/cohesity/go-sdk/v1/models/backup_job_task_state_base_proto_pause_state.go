// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupJobTaskStateBaseProtoPauseState backup job task state base proto pause state
//
// swagger:model BackupJobTaskStateBaseProto_PauseState
type BackupJobTaskStateBaseProtoPauseState struct {

	// Time of blackout window triggered pause request. This field gets
	// populated when blackout window triggers pause and gets cleared when
	// blackout window triggers resume.
	BlackoutWindowPauseRequestedTimeUsecs *int64 `json:"blackoutWindowPauseRequestedTimeUsecs,omitempty"`

	// Pause status for the job run or task.
	// Pause is only allowed in kRunning state, and resume is allowed only in
	// kPaused state. If the status is kPausing/kResuming, we do not allow any
	// user operations (including cancellation).
	Status *int32 `json:"status,omitempty"`

	// Time of user initiated pause request. This field gets populated on user
	// initiated pause and gets cleared on user initiated resume.
	UserInitiatedPauseRequestedTimeUsecs *int64 `json:"userInitiatedPauseRequestedTimeUsecs,omitempty"`

	// Indicates whether the user initiated a resume operation in the middle of
	// a blackout window. Whenever this is set to true, this particular run
	// becomes exempt from future blackout-window-related interrupts. Note that
	// this may also be set when cancelation is requested for a run that is
	// paused.
	UserInitiatedResumeDuringBlackoutWindow *bool `json:"userInitiatedResumeDuringBlackoutWindow,omitempty"`
}

// Validate validates this backup job task state base proto pause state
func (m *BackupJobTaskStateBaseProtoPauseState) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this backup job task state base proto pause state based on context it is used
func (m *BackupJobTaskStateBaseProtoPauseState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupJobTaskStateBaseProtoPauseState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupJobTaskStateBaseProtoPauseState) UnmarshalBinary(b []byte) error {
	var res BackupJobTaskStateBaseProtoPauseState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
