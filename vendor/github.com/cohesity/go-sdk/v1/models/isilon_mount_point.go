// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IsilonMountPoint Isilon Mount Point.
//
// Specifies information about a mount point in an Isilon OneFs Cluster.
//
// swagger:model IsilonMountPoint
type IsilonMountPoint struct {

	// Specifies the name of access zone.
	AccessZoneName *string `json:"accessZoneName,omitempty"`

	// Specifies information about an NFS export. This field is set if the file
	// system supports protocol type 'kNfs'.
	NfsMountPoint *IsilonNfsMountPoint `json:"nfsMountPoint,omitempty"`

	// Specifies the path of the access zone in ifs. This should include the
	// leading "/ifs/".
	Path *string `json:"path,omitempty"`

	// List of Protocols on Isilon.
	//
	// Specifies the list of protocols enabled on Isilon OneFs file system.
	// 'kNfs' indicates NFS exports in an Isilon Cluster.
	// 'kSmb' indicates CIFS/SMB Shares in an Isilon Cluster.
	Protocols []string `json:"protocols"`

	// Specifies information about an SMB share. This field is set if the
	// file system supports protocol type 'kSmb'.
	SmbMountPoints []*IsilonSmbMountPoint `json:"smbMountPoints"`
}

// Validate validates this isilon mount point
func (m *IsilonMountPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNfsMountPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocols(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbMountPoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IsilonMountPoint) validateNfsMountPoint(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsMountPoint) { // not required
		return nil
	}

	if m.NfsMountPoint != nil {
		if err := m.NfsMountPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfsMountPoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfsMountPoint")
			}
			return err
		}
	}

	return nil
}

var isilonMountPointProtocolsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kSmb"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		isilonMountPointProtocolsItemsEnum = append(isilonMountPointProtocolsItemsEnum, v)
	}
}

func (m *IsilonMountPoint) validateProtocolsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, isilonMountPointProtocolsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IsilonMountPoint) validateProtocols(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocols) { // not required
		return nil
	}

	for i := 0; i < len(m.Protocols); i++ {

		// value enum
		if err := m.validateProtocolsItemsEnum("protocols"+"."+strconv.Itoa(i), "body", m.Protocols[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *IsilonMountPoint) validateSmbMountPoints(formats strfmt.Registry) error {
	if swag.IsZero(m.SmbMountPoints) { // not required
		return nil
	}

	for i := 0; i < len(m.SmbMountPoints); i++ {
		if swag.IsZero(m.SmbMountPoints[i]) { // not required
			continue
		}

		if m.SmbMountPoints[i] != nil {
			if err := m.SmbMountPoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("smbMountPoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("smbMountPoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this isilon mount point based on the context it is used
func (m *IsilonMountPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNfsMountPoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbMountPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IsilonMountPoint) contextValidateNfsMountPoint(ctx context.Context, formats strfmt.Registry) error {

	if m.NfsMountPoint != nil {

		if swag.IsZero(m.NfsMountPoint) { // not required
			return nil
		}

		if err := m.NfsMountPoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfsMountPoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfsMountPoint")
			}
			return err
		}
	}

	return nil
}

func (m *IsilonMountPoint) contextValidateSmbMountPoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SmbMountPoints); i++ {

		if m.SmbMountPoints[i] != nil {

			if swag.IsZero(m.SmbMountPoints[i]) { // not required
				return nil
			}

			if err := m.SmbMountPoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("smbMountPoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("smbMountPoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IsilonMountPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IsilonMountPoint) UnmarshalBinary(b []byte) error {
	var res IsilonMountPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
