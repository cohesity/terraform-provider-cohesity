// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CassandraBackupJobParams Contains any additional cassandra environment specific backup params at the
// job level.
//
// swagger:model CassandraBackupJobParams
type CassandraBackupJobParams struct {

	// Additional parameters required for Cassandra backup.
	CassandraAdditionalInfo *CassandraAdditionalParams `json:"cassandraAdditionalInfo,omitempty"`

	// whether special graph handling is enabled
	GraphHandlingEnabled *bool `json:"graphHandlingEnabled,omitempty"`

	// If this backup job is only responsible for the log backups. Presently this
	// is used for cassandra log backups.
	IsOnlyLogBackupJob *bool `json:"isOnlyLogBackupJob,omitempty"`

	// Whether this is a system keyspace backup
	IsSystemKsBackup *bool `json:"isSystemKsBackup,omitempty"`

	// Start time of the current job (slave start time)
	JobStartTimeInUsecs *int64 `json:"jobStartTimeInUsecs,omitempty"`

	// Make source primary for log-backup in this job run
	MakePrimaryLogBackup *bool `json:"makePrimaryLogBackup,omitempty"`

	// End time of the previous job (set in snapshot_info)
	PreviousJobEndTimeInUsecs *int64 `json:"previousJobEndTimeInUsecs,omitempty"`

	// Retention period in seconds. This is read from the policy currently
	// attached to the protection job. This field is used only in case of log
	// backups and ignored for other backups.
	RetentionPeriodInSecs *int64 `json:"retentionPeriodInSecs,omitempty"`

	// Whether cassandra roles backup/restore is enabled or not.
	RolesGflagEnabled *bool `json:"rolesGflagEnabled,omitempty"`

	// The data centers selected for backup.
	SelectedDataCenterVec []string `json:"selectedDataCenterVec"`
}

// Validate validates this cassandra backup job params
func (m *CassandraBackupJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCassandraAdditionalInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraBackupJobParams) validateCassandraAdditionalInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraAdditionalInfo) { // not required
		return nil
	}

	if m.CassandraAdditionalInfo != nil {
		if err := m.CassandraAdditionalInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraAdditionalInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraAdditionalInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cassandra backup job params based on the context it is used
func (m *CassandraBackupJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCassandraAdditionalInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraBackupJobParams) contextValidateCassandraAdditionalInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraAdditionalInfo != nil {

		if swag.IsZero(m.CassandraAdditionalInfo) { // not required
			return nil
		}

		if err := m.CassandraAdditionalInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraAdditionalInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraAdditionalInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CassandraBackupJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraBackupJobParams) UnmarshalBinary(b []byte) error {
	var res CassandraBackupJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
