// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EBSVolumeExclusionParamsTagParams Specifies the tag vectors used to exclude EBS volumes attached to EC2
// instances at global and object level. Contains two vectors: exclusion and
// inclusion.
// E.g., {exclusion_tag_vec: [(K1, V1),  (K2, V2)],
// inclusion_tag_vec: [(K3, V3)]}.
// => This will exclude a particular volume iff it has all
// the tags in exclusion_tag_vec((K1, V1),  (K2, V2)) and has none of the
// tags in the inclusion_tag_vec((K3, V3)).
//
// swagger:model EBSVolumeExclusionParams_TagParams
type EBSVolumeExclusionParamsTagParams struct {

	// exclusion tag vec
	ExclusionTagVec []*EBSVolumeExclusionParamsTag `json:"exclusionTagVec"`

	// inclusion tag vec
	InclusionTagVec []*EBSVolumeExclusionParamsTag `json:"inclusionTagVec"`
}

// Validate validates this e b s volume exclusion params tag params
func (m *EBSVolumeExclusionParamsTagParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExclusionTagVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInclusionTagVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EBSVolumeExclusionParamsTagParams) validateExclusionTagVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ExclusionTagVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ExclusionTagVec); i++ {
		if swag.IsZero(m.ExclusionTagVec[i]) { // not required
			continue
		}

		if m.ExclusionTagVec[i] != nil {
			if err := m.ExclusionTagVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclusionTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exclusionTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBSVolumeExclusionParamsTagParams) validateInclusionTagVec(formats strfmt.Registry) error {
	if swag.IsZero(m.InclusionTagVec) { // not required
		return nil
	}

	for i := 0; i < len(m.InclusionTagVec); i++ {
		if swag.IsZero(m.InclusionTagVec[i]) { // not required
			continue
		}

		if m.InclusionTagVec[i] != nil {
			if err := m.InclusionTagVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inclusionTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inclusionTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this e b s volume exclusion params tag params based on the context it is used
func (m *EBSVolumeExclusionParamsTagParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExclusionTagVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInclusionTagVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EBSVolumeExclusionParamsTagParams) contextValidateExclusionTagVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExclusionTagVec); i++ {

		if m.ExclusionTagVec[i] != nil {

			if swag.IsZero(m.ExclusionTagVec[i]) { // not required
				return nil
			}

			if err := m.ExclusionTagVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclusionTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exclusionTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EBSVolumeExclusionParamsTagParams) contextValidateInclusionTagVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InclusionTagVec); i++ {

		if m.InclusionTagVec[i] != nil {

			if swag.IsZero(m.InclusionTagVec[i]) { // not required
				return nil
			}

			if err := m.InclusionTagVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inclusionTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inclusionTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EBSVolumeExclusionParamsTagParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EBSVolumeExclusionParamsTagParams) UnmarshalBinary(b []byte) error {
	var res EBSVolumeExclusionParamsTagParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
