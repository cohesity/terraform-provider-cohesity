// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Office365ProtectionSource Office 365 Protection Source.
//
// Specifies a Protection Source in Office 365 environment.
//
// swagger:model Office365ProtectionSource
type Office365ProtectionSource struct {

	// Specifies the map from the Attribute type to its value associated with
	// this Office365 entity.
	AttributeMap map[string]string `json:"attributeMap,omitempty"`

	// Specifies the description of the Office 365 entity.
	Description *string `json:"description,omitempty"`

	// Specifies the information about Office365 group.
	GroupInfo *Office365GroupInfo `json:"groupInfo,omitempty"`

	// Specifies the name of the office 365 entity.
	Name *string `json:"name,omitempty"`

	// Specifies the SMTP address for the Outlook source.
	PrimarySMTPAddress *string `json:"primarySMTPAddress,omitempty"`

	// Specifies the list of the protection source id of the windows physical
	// host which will be used during the protection and recovery of the sites
	// that belong to an office365 domain.
	// This will be used for Exchange Online PST download as well.
	ProxyHostSourceIDList []int64 `json:"proxyHostSourceIdList"`

	// Specifies the information about Office365 site.
	SiteInfo *Office365SiteInfo `json:"siteInfo,omitempty"`

	// Specifies the information about Office365 team.
	TeamInfo *Office365TeamInfo `json:"teamInfo,omitempty"`

	// Specifies the type of the Office 365 entity.
	// Enum: ["kDomain","kOutlook","kMailbox","kUsers","kGroups","kSites","kUser","kGroup","kSite","kApplication","kGraphUser","kPublicFolders","kPublicFolder","kTeams","kTeam","kRootPublicFolder"]
	Type *string `json:"type,omitempty"`

	// Specifies the information about Office365 user regarding its Mailbox &
	// OneDrive. This is only present if the entity type is a User.
	UserInfo *Office365UserInfo `json:"userInfo,omitempty"`

	// Specifies the UUID of the Office 365 entity.
	UUID *string `json:"uuid,omitempty"`

	// URL that displays the site in the browser. This is applicable for
	// Sharepoint entity.
	WebURL *string `json:"webUrl,omitempty"`
}

// Validate validates this office365 protection source
func (m *Office365ProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Office365ProtectionSource) validateGroupInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupInfo) { // not required
		return nil
	}

	if m.GroupInfo != nil {
		if err := m.GroupInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groupInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionSource) validateSiteInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteInfo) { // not required
		return nil
	}

	if m.SiteInfo != nil {
		if err := m.SiteInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionSource) validateTeamInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamInfo) { // not required
		return nil
	}

	if m.TeamInfo != nil {
		if err := m.TeamInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teamInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("teamInfo")
			}
			return err
		}
	}

	return nil
}

var office365ProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDomain","kOutlook","kMailbox","kUsers","kGroups","kSites","kUser","kGroup","kSite","kApplication","kGraphUser","kPublicFolders","kPublicFolder","kTeams","kTeam","kRootPublicFolder"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		office365ProtectionSourceTypeTypePropEnum = append(office365ProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// Office365ProtectionSourceTypeKDomain captures enum value "kDomain"
	Office365ProtectionSourceTypeKDomain string = "kDomain"

	// Office365ProtectionSourceTypeKOutlook captures enum value "kOutlook"
	Office365ProtectionSourceTypeKOutlook string = "kOutlook"

	// Office365ProtectionSourceTypeKMailbox captures enum value "kMailbox"
	Office365ProtectionSourceTypeKMailbox string = "kMailbox"

	// Office365ProtectionSourceTypeKUsers captures enum value "kUsers"
	Office365ProtectionSourceTypeKUsers string = "kUsers"

	// Office365ProtectionSourceTypeKGroups captures enum value "kGroups"
	Office365ProtectionSourceTypeKGroups string = "kGroups"

	// Office365ProtectionSourceTypeKSites captures enum value "kSites"
	Office365ProtectionSourceTypeKSites string = "kSites"

	// Office365ProtectionSourceTypeKUser captures enum value "kUser"
	Office365ProtectionSourceTypeKUser string = "kUser"

	// Office365ProtectionSourceTypeKGroup captures enum value "kGroup"
	Office365ProtectionSourceTypeKGroup string = "kGroup"

	// Office365ProtectionSourceTypeKSite captures enum value "kSite"
	Office365ProtectionSourceTypeKSite string = "kSite"

	// Office365ProtectionSourceTypeKApplication captures enum value "kApplication"
	Office365ProtectionSourceTypeKApplication string = "kApplication"

	// Office365ProtectionSourceTypeKGraphUser captures enum value "kGraphUser"
	Office365ProtectionSourceTypeKGraphUser string = "kGraphUser"

	// Office365ProtectionSourceTypeKPublicFolders captures enum value "kPublicFolders"
	Office365ProtectionSourceTypeKPublicFolders string = "kPublicFolders"

	// Office365ProtectionSourceTypeKPublicFolder captures enum value "kPublicFolder"
	Office365ProtectionSourceTypeKPublicFolder string = "kPublicFolder"

	// Office365ProtectionSourceTypeKTeams captures enum value "kTeams"
	Office365ProtectionSourceTypeKTeams string = "kTeams"

	// Office365ProtectionSourceTypeKTeam captures enum value "kTeam"
	Office365ProtectionSourceTypeKTeam string = "kTeam"

	// Office365ProtectionSourceTypeKRootPublicFolder captures enum value "kRootPublicFolder"
	Office365ProtectionSourceTypeKRootPublicFolder string = "kRootPublicFolder"
)

// prop value enum
func (m *Office365ProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, office365ProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Office365ProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Office365ProtectionSource) validateUserInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.UserInfo) { // not required
		return nil
	}

	if m.UserInfo != nil {
		if err := m.UserInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this office365 protection source based on the context it is used
func (m *Office365ProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroupInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSiteInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeamInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Office365ProtectionSource) contextValidateGroupInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.GroupInfo != nil {

		if swag.IsZero(m.GroupInfo) { // not required
			return nil
		}

		if err := m.GroupInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groupInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionSource) contextValidateSiteInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SiteInfo != nil {

		if swag.IsZero(m.SiteInfo) { // not required
			return nil
		}

		if err := m.SiteInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionSource) contextValidateTeamInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.TeamInfo != nil {

		if swag.IsZero(m.TeamInfo) { // not required
			return nil
		}

		if err := m.TeamInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teamInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("teamInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionSource) contextValidateUserInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.UserInfo != nil {

		if swag.IsZero(m.UserInfo) { // not required
			return nil
		}

		if err := m.UserInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Office365ProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Office365ProtectionSource) UnmarshalBinary(b []byte) error {
	var res Office365ProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
