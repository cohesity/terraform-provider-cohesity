// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisteredEntityVMwareParams Contains all params specified by the user while registering a VMware entity.
//
// swagger:model RegisteredEntityVMwareParams
type RegisteredEntityVMwareParams struct {

	// This is set to true if VM linking feature is enabled for this VCenter.
	// This means that VMs present in this VCenter which earlier belonged to some
	// other VCenter(also registerd on same cluster) and were migrated, will be
	// linked during EH refresh with an edge of type kVMMigrated. This will
	// enable us to preserve snapshot chains for migrated VMs.
	LinkVmsAcrossVcenter *bool `json:"linkVmsAcrossVcenter,omitempty"`

	// This option is specified for VMware environment where one of the VMKernel
	// IP Addresses of the ESXi host that matches one of these subnets will be
	// added to /etc/hosts file of the Cohesity cluster (on all nodes).
	PreferredSubnetVec []*ClusterConfigProtoSubnet `json:"preferredSubnetVec"`

	// Storage snapshot providers source entities associated with this vCenter.
	StorageSnapshotProviders []*PrivateEntityProto `json:"storageSnapshotProviders"`

	// If this is set to true, Cohesity will update the last backup attempt time
	// and backup status for the VMs on the vCenter.
	UpdateLastBackupDetails *bool `json:"updateLastBackupDetails,omitempty"`

	// This option is specified for VMware environment where it is instructed to
	// use VM BIOS UUID instead of the vCenter UUID to track uniqueness of the
	// VMs.
	// NOTE: This can only be set at the time of registration and cannot be
	// changed later.
	UseVMBiosUUID *bool `json:"useVmBiosUuid,omitempty"`

	// This may be specified for vCD entities.
	VcdParams *RegisteredEntityVCDParams `json:"vcdParams,omitempty"`
}

// Validate validates this registered entity v mware params
func (m *RegisteredEntityVMwareParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreferredSubnetVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageSnapshotProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityVMwareParams) validatePreferredSubnetVec(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredSubnetVec) { // not required
		return nil
	}

	for i := 0; i < len(m.PreferredSubnetVec); i++ {
		if swag.IsZero(m.PreferredSubnetVec[i]) { // not required
			continue
		}

		if m.PreferredSubnetVec[i] != nil {
			if err := m.PreferredSubnetVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preferredSubnetVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preferredSubnetVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityVMwareParams) validateStorageSnapshotProviders(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageSnapshotProviders) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageSnapshotProviders); i++ {
		if swag.IsZero(m.StorageSnapshotProviders[i]) { // not required
			continue
		}

		if m.StorageSnapshotProviders[i] != nil {
			if err := m.StorageSnapshotProviders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageSnapshotProviders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageSnapshotProviders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityVMwareParams) validateVcdParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdParams) { // not required
		return nil
	}

	if m.VcdParams != nil {
		if err := m.VcdParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this registered entity v mware params based on the context it is used
func (m *RegisteredEntityVMwareParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePreferredSubnetVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageSnapshotProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityVMwareParams) contextValidatePreferredSubnetVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreferredSubnetVec); i++ {

		if m.PreferredSubnetVec[i] != nil {

			if swag.IsZero(m.PreferredSubnetVec[i]) { // not required
				return nil
			}

			if err := m.PreferredSubnetVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preferredSubnetVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preferredSubnetVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityVMwareParams) contextValidateStorageSnapshotProviders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageSnapshotProviders); i++ {

		if m.StorageSnapshotProviders[i] != nil {

			if swag.IsZero(m.StorageSnapshotProviders[i]) { // not required
				return nil
			}

			if err := m.StorageSnapshotProviders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageSnapshotProviders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageSnapshotProviders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityVMwareParams) contextValidateVcdParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdParams != nil {

		if swag.IsZero(m.VcdParams) { // not required
			return nil
		}

		if err := m.VcdParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredEntityVMwareParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredEntityVMwareParams) UnmarshalBinary(b []byte) error {
	var res RegisteredEntityVMwareParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
