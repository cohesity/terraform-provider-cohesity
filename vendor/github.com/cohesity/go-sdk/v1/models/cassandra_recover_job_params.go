// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CassandraRecoverJobParams Contains any additional cassandra environment specific params for the
// recover job.
//
// swagger:model CassandraRecoverJobParams
type CassandraRecoverJobParams struct {

	// Additional parameters required for Cassandra recovery.
	// TODO (faizan.khan) : Remove this.
	CassandraAdditionalInfo *CassandraAdditionalParams `json:"cassandraAdditionalInfo,omitempty"`

	// The task id which will be used by the finalise restore job.
	FinaliseRestoreTaskID *int64 `json:"finaliseRestoreTaskId,omitempty"`

	// whether special graph handling is enabled
	GraphHandlingEnabled *bool `json:"graphHandlingEnabled,omitempty"`

	// Whether the call is for the finalise restore phase.
	IsFinalisePhase *bool `json:"isFinalisePhase,omitempty"`

	// Whether this is a live table restore
	IsLiveTableRestore *bool `json:"isLiveTableRestore,omitempty"`

	// Whether this is a system keyspace recovery
	IsSystemKsRecovery *bool `json:"isSystemKsRecovery,omitempty"`

	// Additional params for log recovery.
	LogRecoverParams *CassandraLogRecoverJobParams `json:"logRecoverParams,omitempty"`

	// Logs will be restored to this location.
	LogRestoreDirectory *string `json:"logRestoreDirectory,omitempty"`

	// Option to restart Cassandra services after point in time recovery.
	RestartAllowed *bool `json:"restartAllowed,omitempty"`

	// Option command for restarting Cassandra services
	RestartCommand *string `json:"restartCommand,omitempty"`

	// Option to restart Cassandra services immediately after the recovery.
	RestartImmediately *bool `json:"restartImmediately,omitempty"`

	// Option to restart Cassandra services at the specified time
	RestartTime *int64 `json:"restartTime,omitempty"`

	// Whether to restore/skip roles and permissions in the job run.
	RestoreRolesAndPermissions *bool `json:"restoreRolesAndPermissions,omitempty"`

	// Whether the gflag to restore cassandra roles is enabled.
	RolesGflagEnabled *bool `json:"rolesGflagEnabled,omitempty"`

	// The data centers selected for recovery.
	SelectedDataCenterVec []string `json:"selectedDataCenterVec"`

	// Cassandra staging directory
	StagingDirectoryVec []string `json:"stagingDirectoryVec"`

	// A suffix that is to be applied to all recovered entities
	// TODO (faizan.khan) : Remove this.
	Suffix *string `json:"suffix,omitempty"`
}

// Validate validates this cassandra recover job params
func (m *CassandraRecoverJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCassandraAdditionalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogRecoverParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraRecoverJobParams) validateCassandraAdditionalInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraAdditionalInfo) { // not required
		return nil
	}

	if m.CassandraAdditionalInfo != nil {
		if err := m.CassandraAdditionalInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraAdditionalInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraAdditionalInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraRecoverJobParams) validateLogRecoverParams(formats strfmt.Registry) error {
	if swag.IsZero(m.LogRecoverParams) { // not required
		return nil
	}

	if m.LogRecoverParams != nil {
		if err := m.LogRecoverParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logRecoverParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cassandra recover job params based on the context it is used
func (m *CassandraRecoverJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCassandraAdditionalInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogRecoverParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraRecoverJobParams) contextValidateCassandraAdditionalInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraAdditionalInfo != nil {

		if swag.IsZero(m.CassandraAdditionalInfo) { // not required
			return nil
		}

		if err := m.CassandraAdditionalInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraAdditionalInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraAdditionalInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraRecoverJobParams) contextValidateLogRecoverParams(ctx context.Context, formats strfmt.Registry) error {

	if m.LogRecoverParams != nil {

		if swag.IsZero(m.LogRecoverParams) { // not required
			return nil
		}

		if err := m.LogRecoverParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logRecoverParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CassandraRecoverJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraRecoverJobParams) UnmarshalBinary(b []byte) error {
	var res CassandraRecoverJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
