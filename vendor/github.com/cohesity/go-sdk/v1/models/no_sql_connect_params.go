// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NoSQLConnectParams no Sql connect params
//
// swagger:model NoSqlConnectParams
type NoSQLConnectParams struct {

	// Additional params required for cassandra backup.
	CassandraAdditionalParams *CassandraAdditionalParams `json:"cassandraAdditionalParams,omitempty"`

	// Connect params for connecting to cassandra cluster. Set only if
	// env_type is kCassandra.
	CassandraConnectParams *CassandraConnectParams `json:"cassandraConnectParams,omitempty"`

	// Additional params for connecting to couchbase cluster. Set only if
	// env_type is kCouchbase.
	CouchbaseConnectParams *CouchbaseConnectParams `json:"couchbaseConnectParams,omitempty"`

	// Additional params for connecting to hbase cluster. Set only if
	// env_type is kHBase.
	HbaseConnectParams *HBaseConnectParams `json:"hbaseConnectParams,omitempty"`

	// Additional params for connecting to hdfs cluster. Set only if
	// env_type is kHdfs.
	HdfsConnectParams *HdfsConnectParams `json:"hdfsConnectParams,omitempty"`

	// Additional params for connecting to hive cluster. Set only if
	// env_type is kHive.
	HiveConnectParams *HiveConnectParams `json:"hiveConnectParams,omitempty"`

	// Additional params required for mongodb backup.
	MongodbAdditionalParams *MongoDBAdditionalParams `json:"mongodbAdditionalParams,omitempty"`

	// Additional params for connecting to mongodb cluster. Set only if
	// env_type is kMongoDB.
	MongodbConnectParams *MongoDBConnectParams `json:"mongodbConnectParams,omitempty"`
}

// Validate validates this no Sql connect params
func (m *NoSQLConnectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCassandraAdditionalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouchbaseConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbAdditionalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLConnectParams) validateCassandraAdditionalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraAdditionalParams) { // not required
		return nil
	}

	if m.CassandraAdditionalParams != nil {
		if err := m.CassandraAdditionalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraAdditionalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraAdditionalParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) validateCassandraConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraConnectParams) { // not required
		return nil
	}

	if m.CassandraConnectParams != nil {
		if err := m.CassandraConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) validateCouchbaseConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CouchbaseConnectParams) { // not required
		return nil
	}

	if m.CouchbaseConnectParams != nil {
		if err := m.CouchbaseConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) validateHbaseConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseConnectParams) { // not required
		return nil
	}

	if m.HbaseConnectParams != nil {
		if err := m.HbaseConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) validateHdfsConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsConnectParams) { // not required
		return nil
	}

	if m.HdfsConnectParams != nil {
		if err := m.HdfsConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) validateHiveConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveConnectParams) { // not required
		return nil
	}

	if m.HiveConnectParams != nil {
		if err := m.HiveConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) validateMongodbAdditionalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MongodbAdditionalParams) { // not required
		return nil
	}

	if m.MongodbAdditionalParams != nil {
		if err := m.MongodbAdditionalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbAdditionalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbAdditionalParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) validateMongodbConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MongodbConnectParams) { // not required
		return nil
	}

	if m.MongodbConnectParams != nil {
		if err := m.MongodbConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbConnectParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this no Sql connect params based on the context it is used
func (m *NoSQLConnectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCassandraAdditionalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCouchbaseConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongodbAdditionalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongodbConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLConnectParams) contextValidateCassandraAdditionalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraAdditionalParams != nil {

		if swag.IsZero(m.CassandraAdditionalParams) { // not required
			return nil
		}

		if err := m.CassandraAdditionalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraAdditionalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraAdditionalParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) contextValidateCassandraConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraConnectParams != nil {

		if swag.IsZero(m.CassandraConnectParams) { // not required
			return nil
		}

		if err := m.CassandraConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) contextValidateCouchbaseConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CouchbaseConnectParams != nil {

		if swag.IsZero(m.CouchbaseConnectParams) { // not required
			return nil
		}

		if err := m.CouchbaseConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) contextValidateHbaseConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseConnectParams != nil {

		if swag.IsZero(m.HbaseConnectParams) { // not required
			return nil
		}

		if err := m.HbaseConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) contextValidateHdfsConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsConnectParams != nil {

		if swag.IsZero(m.HdfsConnectParams) { // not required
			return nil
		}

		if err := m.HdfsConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) contextValidateHiveConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveConnectParams != nil {

		if swag.IsZero(m.HiveConnectParams) { // not required
			return nil
		}

		if err := m.HiveConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) contextValidateMongodbAdditionalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MongodbAdditionalParams != nil {

		if swag.IsZero(m.MongodbAdditionalParams) { // not required
			return nil
		}

		if err := m.MongodbAdditionalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbAdditionalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbAdditionalParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLConnectParams) contextValidateMongodbConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MongodbConnectParams != nil {

		if swag.IsZero(m.MongodbConnectParams) { // not required
			return nil
		}

		if err := m.MongodbConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbConnectParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NoSQLConnectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NoSQLConnectParams) UnmarshalBinary(b []byte) error {
	var res NoSQLConnectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
