// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostSettingsCheckResult Host Setting Check Result.
//
// Specifies the result of various checks performed internally on host.
//
// swagger:model HostSettingsCheckResult
type HostSettingsCheckResult struct {

	// Specifies the type of the check internally performed.
	// Specifies the type of the host check performed internally.
	// 'kIsAgentPortAccessible' indicates the check for agent port access.
	// 'kIsAgentRunning' indicates the status for the Cohesity agent service.
	// 'kIsSQLWriterRunning' indicates the status for SQLWriter service.
	// 'kAreSQLInstancesRunning' indicates the run status for all the SQL
	// instances in the host.
	// 'kCheckServiceLoginsConfig' checks the privileges and sysadmin status
	// of the logins used by the SQL instance services, Cohesity agent service
	// and the SQLWriter service.
	// 'kCheckSQLFCIVIP' checks whether the SQL FCI is registered with a valid
	// VIP or FQDN.
	// 'kCheckSQLDiskSpace' checks whether volumes containing SQL DBs have at
	// least 10% free space.
	// Enum: ["kIsAgentPortAccessible","kIsAgentRunning","kIsSQLWriterRunning","kAreSQLInstancesRunning","kCheckServiceLoginsConfig","kCheckSQLFCIVIP","kCheckSQLDiskSpace"]
	CheckType *string `json:"checkType,omitempty"`

	// Specifies the type of the result returned after performing the internal
	// host check.
	// Specifies the type of the host check result performed internally.
	// 'kPass' indicates that the respective check was successful.
	// 'kFail' indicates that the respective check failed as some mandatory
	// setting is not met
	// 'kWarning' indicates that the respective check has warning as certain
	// non-mandatory setting is not met.
	// Enum: ["kPass","kFail","kWarning"]
	ResultType *string `json:"resultType,omitempty"`

	// Specifies a descriptive message for failed/warning types.
	UserMessage *string `json:"userMessage,omitempty"`
}

// Validate validates this host settings check result
func (m *HostSettingsCheckResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hostSettingsCheckResultTypeCheckTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kIsAgentPortAccessible","kIsAgentRunning","kIsSQLWriterRunning","kAreSQLInstancesRunning","kCheckServiceLoginsConfig","kCheckSQLFCIVIP","kCheckSQLDiskSpace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostSettingsCheckResultTypeCheckTypePropEnum = append(hostSettingsCheckResultTypeCheckTypePropEnum, v)
	}
}

const (

	// HostSettingsCheckResultCheckTypeKIsAgentPortAccessible captures enum value "kIsAgentPortAccessible"
	HostSettingsCheckResultCheckTypeKIsAgentPortAccessible string = "kIsAgentPortAccessible"

	// HostSettingsCheckResultCheckTypeKIsAgentRunning captures enum value "kIsAgentRunning"
	HostSettingsCheckResultCheckTypeKIsAgentRunning string = "kIsAgentRunning"

	// HostSettingsCheckResultCheckTypeKIsSQLWriterRunning captures enum value "kIsSQLWriterRunning"
	HostSettingsCheckResultCheckTypeKIsSQLWriterRunning string = "kIsSQLWriterRunning"

	// HostSettingsCheckResultCheckTypeKAreSQLInstancesRunning captures enum value "kAreSQLInstancesRunning"
	HostSettingsCheckResultCheckTypeKAreSQLInstancesRunning string = "kAreSQLInstancesRunning"

	// HostSettingsCheckResultCheckTypeKCheckServiceLoginsConfig captures enum value "kCheckServiceLoginsConfig"
	HostSettingsCheckResultCheckTypeKCheckServiceLoginsConfig string = "kCheckServiceLoginsConfig"

	// HostSettingsCheckResultCheckTypeKCheckSQLFCIVIP captures enum value "kCheckSQLFCIVIP"
	HostSettingsCheckResultCheckTypeKCheckSQLFCIVIP string = "kCheckSQLFCIVIP"

	// HostSettingsCheckResultCheckTypeKCheckSQLDiskSpace captures enum value "kCheckSQLDiskSpace"
	HostSettingsCheckResultCheckTypeKCheckSQLDiskSpace string = "kCheckSQLDiskSpace"
)

// prop value enum
func (m *HostSettingsCheckResult) validateCheckTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hostSettingsCheckResultTypeCheckTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HostSettingsCheckResult) validateCheckType(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCheckTypeEnum("checkType", "body", *m.CheckType); err != nil {
		return err
	}

	return nil
}

var hostSettingsCheckResultTypeResultTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPass","kFail","kWarning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostSettingsCheckResultTypeResultTypePropEnum = append(hostSettingsCheckResultTypeResultTypePropEnum, v)
	}
}

const (

	// HostSettingsCheckResultResultTypeKPass captures enum value "kPass"
	HostSettingsCheckResultResultTypeKPass string = "kPass"

	// HostSettingsCheckResultResultTypeKFail captures enum value "kFail"
	HostSettingsCheckResultResultTypeKFail string = "kFail"

	// HostSettingsCheckResultResultTypeKWarning captures enum value "kWarning"
	HostSettingsCheckResultResultTypeKWarning string = "kWarning"
)

// prop value enum
func (m *HostSettingsCheckResult) validateResultTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hostSettingsCheckResultTypeResultTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HostSettingsCheckResult) validateResultType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResultType) { // not required
		return nil
	}

	// value enum
	if err := m.validateResultTypeEnum("resultType", "body", *m.ResultType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this host settings check result based on context it is used
func (m *HostSettingsCheckResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HostSettingsCheckResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostSettingsCheckResult) UnmarshalBinary(b []byte) error {
	var res HostSettingsCheckResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
