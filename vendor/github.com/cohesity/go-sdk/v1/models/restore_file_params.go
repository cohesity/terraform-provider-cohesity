// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreFileParams RestoreFileParams represents the argument for restoring files.
//
// swagger:model RestoreFileParams
type RestoreFileParams struct {

	// Params contain the options for restoring files. Please note that
	// Params.RestoredFileInfoVec does not need to be populated as it is populated
	// internally.
	Params *RestoreFilesParams `json:"Params,omitempty"`

	// Filenames are the files/directories within this snapshot for which
	// information is requested.
	Filenames []string `json:"filenames"`

	// Name is the name of the restore task. This field is mandatory.
	Name *string `json:"name,omitempty"`

	// Vlan Params associated with the restore.
	// If this is not specified, then the VLAN settings will be automatically
	// selected from one of the following options:
	// a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be
	// automatically based on the client's (e.g. ESXI host) IP address.
	// b. If VLANs are not configured on Cohesity, then the partition hostname or
	// VIPs will be used for restores.
	RestoreVlanParams *VlanParams `json:"restoreVlanParams,omitempty"`

	// SourceObjectInfo is the information regarding the VM and the job details
	// from which file/directory is to be restored.
	SourceObjectInfo *RestoreObject `json:"sourceObjectInfo,omitempty"`
}

// Validate validates this restore file params
func (m *RestoreFileParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceObjectInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreFileParams) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Params")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFileParams) validateRestoreVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreVlanParams) { // not required
		return nil
	}

	if m.RestoreVlanParams != nil {
		if err := m.RestoreVlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFileParams) validateSourceObjectInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceObjectInfo) { // not required
		return nil
	}

	if m.SourceObjectInfo != nil {
		if err := m.SourceObjectInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceObjectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceObjectInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore file params based on the context it is used
func (m *RestoreFileParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceObjectInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreFileParams) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if m.Params != nil {

		if swag.IsZero(m.Params) { // not required
			return nil
		}

		if err := m.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Params")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFileParams) contextValidateRestoreVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreVlanParams != nil {

		if swag.IsZero(m.RestoreVlanParams) { // not required
			return nil
		}

		if err := m.RestoreVlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFileParams) contextValidateSourceObjectInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceObjectInfo != nil {

		if swag.IsZero(m.SourceObjectInfo) { // not required
			return nil
		}

		if err := m.SourceObjectInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceObjectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceObjectInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreFileParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreFileParams) UnmarshalBinary(b []byte) error {
	var res RestoreFileParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
