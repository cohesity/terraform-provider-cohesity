// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateUserQuotaSettingsForView Update User Quota Settings For View.
//
// Specifies the parameters to update user quota metadata in a view.
//
// swagger:model UpdateUserQuotaSettingsForView
type UpdateUserQuotaSettingsForView struct {

	// The default user quota policy for this view.
	DefaultUserQuotaPolicy *QuotaPolicy `json:"defaultUserQuotaPolicy,omitempty"`

	// If set, it enables/disables the user quota overrides for a view.
	// Otherwise, it leaves it at it's previous state.
	EnableUserQuota *bool `json:"enableUserQuota,omitempty"`

	// If set to true, the default_policy in view metadata will be cleared and
	// the default policy from viewbox will take effect for all users in the
	// view.
	InheritDefaultPolicyFromViewbox *bool `json:"inheritDefaultPolicyFromViewbox,omitempty"`

	// View name of input view.
	ViewName *string `json:"viewName,omitempty"`
}

// Validate validates this update user quota settings for view
func (m *UpdateUserQuotaSettingsForView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultUserQuotaPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUserQuotaSettingsForView) validateDefaultUserQuotaPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultUserQuotaPolicy) { // not required
		return nil
	}

	if m.DefaultUserQuotaPolicy != nil {
		if err := m.DefaultUserQuotaPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultUserQuotaPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultUserQuotaPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update user quota settings for view based on the context it is used
func (m *UpdateUserQuotaSettingsForView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultUserQuotaPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUserQuotaSettingsForView) contextValidateDefaultUserQuotaPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultUserQuotaPolicy != nil {

		if swag.IsZero(m.DefaultUserQuotaPolicy) { // not required
			return nil
		}

		if err := m.DefaultUserQuotaPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultUserQuotaPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultUserQuotaPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateUserQuotaSettingsForView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateUserQuotaSettingsForView) UnmarshalBinary(b []byte) error {
	var res UpdateUserQuotaSettingsForView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
