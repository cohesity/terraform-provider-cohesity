// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleDBConfig This proto captures the oracle database configuration for alternate DB
// restore.
//
// swagger:model OracleDBConfig
type OracleDBConfig struct {

	// Audit log destination.
	AuditLogDest *string `json:"auditLogDest,omitempty"`

	// BCT file path.
	BctFilePath *string `json:"bctFilePath,omitempty"`

	// List of paths where the control file needs to be multiplexed.
	ControlFilePathVec []string `json:"controlFilePathVec"`

	// Path to the file on oracle host which decides the configuration of
	// restored DB.
	DbConfigFilePath *string `json:"dbConfigFilePath,omitempty"`

	// Diag destination.
	DiagDest *string `json:"diagDest,omitempty"`

	// If set to false, archive log mode is disabled.
	EnableArchiveLogMode *bool `json:"enableArchiveLogMode,omitempty"`

	// FRA path.
	FraDest *string `json:"fraDest,omitempty"`

	// FRA Size in MBs.
	FraSizeMb *int32 `json:"fraSizeMb,omitempty"`

	// How many tempfiles to use for the recovered database.
	NumTempfiles *int32 `json:"numTempfiles,omitempty"`

	// Map of pfile parameters to its values.
	PfileParameterMap map[string]string `json:"pfileParameterMap,omitempty"`

	// List of redo log groups for this DB.
	RedoLogConf *OracleDBConfigRedoLogGroupConf `json:"redoLogConf,omitempty"`

	// SGA_TARGET_SIZE size [ Default value same as Source DB ].
	SgaTargetSize *string `json:"sgaTargetSize,omitempty"`

	// Shared pool size [ Default value same as Source DB ].
	SharedPoolSize *string `json:"sharedPoolSize,omitempty"`
}

// Validate validates this oracle d b config
func (m *OracleDBConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRedoLogConf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleDBConfig) validateRedoLogConf(formats strfmt.Registry) error {
	if swag.IsZero(m.RedoLogConf) { // not required
		return nil
	}

	if m.RedoLogConf != nil {
		if err := m.RedoLogConf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redoLogConf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redoLogConf")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle d b config based on the context it is used
func (m *OracleDBConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRedoLogConf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleDBConfig) contextValidateRedoLogConf(ctx context.Context, formats strfmt.Registry) error {

	if m.RedoLogConf != nil {

		if swag.IsZero(m.RedoLogConf) { // not required
			return nil
		}

		if err := m.RedoLogConf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redoLogConf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redoLogConf")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleDBConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleDBConfig) UnmarshalBinary(b []byte) error {
	var res OracleDBConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
