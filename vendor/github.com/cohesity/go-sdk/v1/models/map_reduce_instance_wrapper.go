// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MapReduceInstanceWrapper Map Reduce Instance Wrapper.
//
// MapReduceInstanceWrapper is the struct containing the map reduce instance
// information along with the output file path information required to download
// the results set.
//
// swagger:model MapReduceInstanceWrapper
type MapReduceInstanceWrapper struct {

	// LogPath is the path of the log files for the MR instance run.
	LogPath *string `json:"logPath,omitempty"`

	// InstanceInfo is the information about the map reduce application instance.
	MrInstance *MapReduceInstance `json:"mrInstance,omitempty"`

	// OutputFilePathList is the list containing the output files path suffix
	// that Yoda uses to build the full path of the MR instance run output files.
	OutputFilePathList []string `json:"outputFilePathList"`
}

// Validate validates this map reduce instance wrapper
func (m *MapReduceInstanceWrapper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMrInstance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MapReduceInstanceWrapper) validateMrInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.MrInstance) { // not required
		return nil
	}

	if m.MrInstance != nil {
		if err := m.MrInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mrInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mrInstance")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this map reduce instance wrapper based on the context it is used
func (m *MapReduceInstanceWrapper) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMrInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MapReduceInstanceWrapper) contextValidateMrInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.MrInstance != nil {

		if swag.IsZero(m.MrInstance) { // not required
			return nil
		}

		if err := m.MrInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mrInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mrInstance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MapReduceInstanceWrapper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MapReduceInstanceWrapper) UnmarshalBinary(b []byte) error {
	var res MapReduceInstanceWrapper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
