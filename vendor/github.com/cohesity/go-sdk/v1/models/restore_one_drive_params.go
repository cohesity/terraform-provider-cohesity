// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreOneDriveParams NOTE: Per object/entity params should be put into
// O365OneDriveRestoreEntityParams going forward. Eventually
// RestoreOneDriveParams should only contain task/job level params that
// apply to all entities/users/objects in the task/job.
//
// swagger:model RestoreOneDriveParams
type RestoreOneDriveParams struct {

	// The list of users/groups whose drives are being restored.
	DriveOwnerVec []*RestoreOneDriveParamsDriveOwner `json:"driveOwnerVec"`

	// When the drive type is kPreservationHoldLibrary, this folder prefix is
	// pre-pended to the PHL restore path as either a folder (in the case of
	// in place restore) or a folder name prefix (for alternate restore).
	// If a drive with type kPreservationHoldLibrary is being restored, this
	// prefix must be set as it is required for the restore.
	PhlFolderPrefix *string `json:"phlFolderPrefix,omitempty"`

	// Whether or not all drive items are restored to original location.
	RestoreToOriginal *bool `json:"restoreToOriginal,omitempty"`

	// The id of the drive in which items will be restored.
	TargetDriveID *string `json:"targetDriveId,omitempty"`

	// Quota details of the drive to which items will be restored.
	TargetDriveQuota *Quota `json:"targetDriveQuota,omitempty"`

	// All drives part of various users listed in drive_owner_vec will be
	// restored to the drive belonging to target_user having id target_drive_id.
	// Let's say drive_owner_vec is A and B; drive_vec of A and B is 111 and 222
	// respectively; target_user is C; target_drive_id is 333. The final
	// folder-hierarchy after restore job is finished will look like this :
	// C:333: {target_folder_path}/|
	// |A/111/{whatever is there in restore_item_vec
	// of 111} |B/222/{whatever is there in
	// restore_item_vec of 222}
	TargetFolderPath *string `json:"targetFolderPath,omitempty"`

	// This is the user in whose drive the items will be restored.
	TargetUser *EntityProto `json:"targetUser,omitempty"`
}

// Validate validates this restore one drive params
func (m *RestoreOneDriveParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDriveOwnerVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetDriveQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreOneDriveParams) validateDriveOwnerVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DriveOwnerVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DriveOwnerVec); i++ {
		if swag.IsZero(m.DriveOwnerVec[i]) { // not required
			continue
		}

		if m.DriveOwnerVec[i] != nil {
			if err := m.DriveOwnerVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("driveOwnerVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("driveOwnerVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreOneDriveParams) validateTargetDriveQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetDriveQuota) { // not required
		return nil
	}

	if m.TargetDriveQuota != nil {
		if err := m.TargetDriveQuota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetDriveQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetDriveQuota")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOneDriveParams) validateTargetUser(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetUser) { // not required
		return nil
	}

	if m.TargetUser != nil {
		if err := m.TargetUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetUser")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore one drive params based on the context it is used
func (m *RestoreOneDriveParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDriveOwnerVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetDriveQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreOneDriveParams) contextValidateDriveOwnerVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DriveOwnerVec); i++ {

		if m.DriveOwnerVec[i] != nil {

			if swag.IsZero(m.DriveOwnerVec[i]) { // not required
				return nil
			}

			if err := m.DriveOwnerVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("driveOwnerVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("driveOwnerVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreOneDriveParams) contextValidateTargetDriveQuota(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetDriveQuota != nil {

		if swag.IsZero(m.TargetDriveQuota) { // not required
			return nil
		}

		if err := m.TargetDriveQuota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetDriveQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetDriveQuota")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreOneDriveParams) contextValidateTargetUser(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetUser != nil {

		if swag.IsZero(m.TargetUser) { // not required
			return nil
		}

		if err := m.TargetUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetUser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreOneDriveParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreOneDriveParams) UnmarshalBinary(b []byte) error {
	var res RestoreOneDriveParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
