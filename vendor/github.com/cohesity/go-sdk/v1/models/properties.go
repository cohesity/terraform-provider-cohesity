// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Properties Defines the common Agent properties. These are shared with physical::Entity
// message as we stitch the data back for Iris.
//
// swagger:model Properties
type Properties struct {

	// Agent software version information.
	AgentSwVersionStr *string `json:"agentSwVersionStr,omitempty"`

	// This identifies the type of the agent running on the host.
	AgentType *int32 `json:"agentType,omitempty"`

	// Present when the Cristie BMR product is installed on the host.
	CbmrInfo *CBMRInfo `json:"cbmrInfo,omitempty"`

	// Present when the Windows Dedup driver is installed on the host.
	DedupDriverInfo *DedupDriverInfo `json:"dedupDriverInfo,omitempty"`

	// This contains information about the FsCbt driver.
	FileCbtInfo *PrivateCbtInfo `json:"fileCbtInfo,omitempty"`

	// This contains the host type where the agent is running.
	// It is set for persistent agent only.
	HostType *int32 `json:"hostType,omitempty"`

	// This identifies the Linux agent installer package type that was used
	// during installation. This is helpful while agent upgrade operation.
	LinuxPkgType *int32 `json:"linuxPkgType,omitempty"`

	// Machine Details
	// This is the machine identifier as reported by baremetal BIOS or
	// virtualization platform extension data. In case of VMWare guest, this will
	// be reported by PowerCLI (Get-VM -Server
	// $vcenter).extensiondata.config.uuid). Note that this identifier is not the
	// result of 'Get-VM -Server $vcenter | %{(Get-View $_.Id).config.uuid}'.
	MachineIdentifier *string `json:"machineIdentifier,omitempty"`

	// This is the UUID of the machine as reported by OS vendor. In Windows, its
	// guid format string. If this is 'ffffffff-ffff-ffff-ffff-ffffffffffff',
	// then machine vendor has not provided the UUID and it cannot be relied
	// upon. Use 'machine_identifier' to identify the machine.
	MachineUUID *string `json:"machineUuid,omitempty"`

	// This contains information about the Solaris agent packaging.
	SolarisPkgType *int32 `json:"solarisPkgType,omitempty"`

	// Agent status.
	Status *PropertiesStatus `json:"status,omitempty"`

	// Set to kUpgradable when the Agent software running on the physical server
	// can be upgraded. Note, upgrades only work correctly when both the
	// Cluster and the Agent are running production builds with correctly stamped
	// version strings.
	// E.g.: "3.5.1_release-20161231_14856c07".
	Upgradability *int32 `json:"upgradability,omitempty"`

	// Error (if any) from the last upgrade attempt.
	UpgradeError *PrivateErrorProto `json:"upgradeError,omitempty"`

	// Upgrade status of our Agent software.
	UpgradeStatus *int32 `json:"upgradeStatus,omitempty"`

	// This contains information about the VolCbt driver.
	VolCbtInfo *PrivateCbtInfo `json:"volCbtInfo,omitempty"`
}

// Validate validates this properties
func (m *Properties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCbmrInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDedupDriverInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileCbtInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolCbtInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Properties) validateCbmrInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CbmrInfo) { // not required
		return nil
	}

	if m.CbmrInfo != nil {
		if err := m.CbmrInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cbmrInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cbmrInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Properties) validateDedupDriverInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DedupDriverInfo) { // not required
		return nil
	}

	if m.DedupDriverInfo != nil {
		if err := m.DedupDriverInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dedupDriverInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dedupDriverInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Properties) validateFileCbtInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FileCbtInfo) { // not required
		return nil
	}

	if m.FileCbtInfo != nil {
		if err := m.FileCbtInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileCbtInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileCbtInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Properties) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *Properties) validateUpgradeError(formats strfmt.Registry) error {
	if swag.IsZero(m.UpgradeError) { // not required
		return nil
	}

	if m.UpgradeError != nil {
		if err := m.UpgradeError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgradeError")
			}
			return err
		}
	}

	return nil
}

func (m *Properties) validateVolCbtInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VolCbtInfo) { // not required
		return nil
	}

	if m.VolCbtInfo != nil {
		if err := m.VolCbtInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volCbtInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volCbtInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this properties based on the context it is used
func (m *Properties) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCbmrInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDedupDriverInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileCbtInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpgradeError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolCbtInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Properties) contextValidateCbmrInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CbmrInfo != nil {

		if swag.IsZero(m.CbmrInfo) { // not required
			return nil
		}

		if err := m.CbmrInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cbmrInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cbmrInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Properties) contextValidateDedupDriverInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DedupDriverInfo != nil {

		if swag.IsZero(m.DedupDriverInfo) { // not required
			return nil
		}

		if err := m.DedupDriverInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dedupDriverInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dedupDriverInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Properties) contextValidateFileCbtInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FileCbtInfo != nil {

		if swag.IsZero(m.FileCbtInfo) { // not required
			return nil
		}

		if err := m.FileCbtInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileCbtInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileCbtInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Properties) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *Properties) contextValidateUpgradeError(ctx context.Context, formats strfmt.Registry) error {

	if m.UpgradeError != nil {

		if swag.IsZero(m.UpgradeError) { // not required
			return nil
		}

		if err := m.UpgradeError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgradeError")
			}
			return err
		}
	}

	return nil
}

func (m *Properties) contextValidateVolCbtInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.VolCbtInfo != nil {

		if swag.IsZero(m.VolCbtInfo) { // not required
			return nil
		}

		if err := m.VolCbtInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volCbtInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volCbtInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Properties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Properties) UnmarshalBinary(b []byte) error {
	var res Properties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
