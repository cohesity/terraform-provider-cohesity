// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateHbaseEntity private hbase entity
//
// swagger:model PrivateHbaseEntity
type PrivateHbaseEntity struct {

	// Information of a hbase cluster, only valid for an entity of type
	// kCluster.
	ClusterInfo *PrivateClusterInfo `json:"clusterInfo,omitempty"`

	// A human readable name for the object.
	Name *string `json:"name,omitempty"`

	// Information of a hbase namespace, only valid for an entity of type
	// kNamespace.
	NamespaceInfo NamespaceInfo `json:"namespaceInfo,omitempty"`

	// Information about a hbase table, only valid for an entity of type
	// kTable.
	TableInfo *TableInfo `json:"tableInfo,omitempty"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// The UUID of the object.
	// Note : For each entity an ID unique within top level entity should be
	// assigned by imanis backend. Example, UUID for a table can be the
	// string <namespace_name>.<table_name>
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this private hbase entity
func (m *PrivateHbaseEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateHbaseEntity) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateHbaseEntity) validateTableInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TableInfo) { // not required
		return nil
	}

	if m.TableInfo != nil {
		if err := m.TableInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tableInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tableInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private hbase entity based on the context it is used
func (m *PrivateHbaseEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTableInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateHbaseEntity) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {

		if swag.IsZero(m.ClusterInfo) { // not required
			return nil
		}

		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateHbaseEntity) contextValidateTableInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.TableInfo != nil {

		if swag.IsZero(m.TableInfo) { // not required
			return nil
		}

		if err := m.TableInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tableInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tableInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateHbaseEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateHbaseEntity) UnmarshalBinary(b []byte) error {
	var res PrivateHbaseEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
