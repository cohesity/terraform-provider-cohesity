// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualMachineInfo This represents additional VM information.
//
// swagger:model VirtualMachineInfo
type VirtualMachineInfo struct {

	// Returns if we can backup this VM.
	BackupStatus *int32 `json:"backupStatus,omitempty"`

	// backup type
	BackupType *int32 `json:"backupType,omitempty"`

	// The number of checkpoints on this VM.
	Checkpoints *int32 `json:"checkpoints,omitempty"`

	// The FQDN of the VM.
	ComputerName *string `json:"computerName,omitempty"`

	// The VM hardware generation number.
	Generation *int32 `json:"generation,omitempty"`

	// Is this VM highly available.
	HighlyAvailable *bool `json:"highlyAvailable,omitempty"`

	// The operating system type.
	HostType *int32 `json:"hostType,omitempty"`

	// The IP Addresses of the VM.
	IPAddressVec []string `json:"ipAddressVec"`

	// The operating system name.
	OsName *string `json:"osName,omitempty"`

	// The physical size of the VM in bytes.
	PhysicalSizeInBytes *int64 `json:"physicalSizeInBytes,omitempty"`

	// The tag of the VM.
	Tag *string `json:"tag,omitempty"`

	// The version of the VM. For example, 2016 is 8.0,
	// 2012 R2 is 5.0.
	Version *string `json:"version,omitempty"`

	// The info of disks which the VM exists on.
	VirtualDiskInfoVec []*PrivateVirtualDiskBasicInfo `json:"virtualDiskInfoVec"`
}

// Validate validates this virtual machine info
func (m *VirtualMachineInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVirtualDiskInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineInfo) validateVirtualDiskInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualDiskInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualDiskInfoVec); i++ {
		if swag.IsZero(m.VirtualDiskInfoVec[i]) { // not required
			continue
		}

		if m.VirtualDiskInfoVec[i] != nil {
			if err := m.VirtualDiskInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualDiskInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualDiskInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this virtual machine info based on the context it is used
func (m *VirtualMachineInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVirtualDiskInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineInfo) contextValidateVirtualDiskInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualDiskInfoVec); i++ {

		if m.VirtualDiskInfoVec[i] != nil {

			if swag.IsZero(m.VirtualDiskInfoVec[i]) { // not required
				return nil
			}

			if err := m.VirtualDiskInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualDiskInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualDiskInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachineInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachineInfo) UnmarshalBinary(b []byte) error {
	var res VirtualMachineInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
