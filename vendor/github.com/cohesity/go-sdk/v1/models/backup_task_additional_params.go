// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupTaskAdditionalParams Message to encapsulate the additional parameters associated with a backup
// task.
//
// Refer to RunBackupJobOnceArg.additional_param_vec for details about how
// this is used.
//
// swagger:model BackupTaskAdditionalParams
type BackupTaskAdditionalParams struct {

	// The Acropolis environment specific params.
	AcropolisParams *AcropolisBackupParams `json:"acropolisParams,omitempty"`

	// Analysis specific runonce params.
	AnalysisParams *AnalysisRunOnceParams `json:"analysisParams,omitempty"`

	// If we are backing up an application (such as SQL), this contains
	// the entity ids of the app entities (such as SQL instances and databases)
	// that will be backed up.
	//
	// If this vector is empty, it implies that we are protecting all app
	// entities on 'source_entity'.
	AppEntityIDVec []int64 `json:"appEntityIdVec"`

	// Parameters for Cassandra backup.
	CassandraBackupParams *CassandraBackupParams `json:"cassandraBackupParams,omitempty"`

	// Parameters specific to hydration task done in context of CDP.
	CdpHydrationParams *CdpHydrationParams `json:"cdpHydrationParams,omitempty"`

	// Parameters for a log run done for CDP protected entities.
	CdpLogRunParams *CdpLogRunParams `json:"cdpLogRunParams,omitempty"`

	// Common parameters for CDP enabled entities.
	CdpParams *CdpCommonBackupParams `json:"cdpParams,omitempty"`

	// If the task is backing up a cloud VM that was created using
	// 'convert and deploy', the following may be set.
	CloudVMParams *CloudVMBackupParams `json:"cloudVmParams,omitempty"`

	// Common Backup configuration params.
	ConfigVec []*ConfigurationParams `json:"configVec"`

	// Parameters for externally triggered backup.
	ExternallyTriggeredBackupParams *ExternallyTriggeredBackupParams `json:"externallyTriggeredBackupParams,omitempty"`

	// For backing up kubernetes environment, we need additional paramaters.
	KubernetesParams *KubernetesBackupParams `json:"kubernetesParams,omitempty"`

	// NoSql application specific connection params.
	NosqlConnectParams *NoSQLConnectParams `json:"nosqlConnectParams,omitempty"`

	// O365 backup specific additional params.
	O365Params *O365BackupParams `json:"o365Params,omitempty"`

	// The Oracle environment specific params.
	OracleParams *OracleBackupParams `json:"oracleParams,omitempty"`

	// The outlook environment specific params.
	OutlookParams *OutlookBackupParams `json:"outlookParams,omitempty"`

	// The Physical environment specific params.
	PhysicalParams *PhysicalBackupParams `json:"physicalParams,omitempty"`

	// Post-script that must be executed after finishing the backup.
	PostBackupTaskScript *RemoteScriptProto `json:"postBackupTaskScript,omitempty"`

	// Script that must be executed immediately after a snapshot has been
	// created on the source.
	PostSnapshotScript *RemoteScriptProto `json:"postSnapshotScript,omitempty"`

	// Pre-script that must be executed before taking the backup.
	PreBackupTaskScript *RemoteScriptProto `json:"preBackupTaskScript,omitempty"`

	// s3 backup params
	S3BackupParams *S3BackupParams `json:"s3BackupParams,omitempty"`

	// Additional parameters for SAN backup.
	SanBackupParams *SANBackupParams `json:"sanBackupParams,omitempty"`

	// Parameters for Sfdc backup.
	SfdcBackupParams *SfdcBackupJobParams `json:"sfdcBackupParams,omitempty"`

	// The leaf level source entity if any that is associated with the task. If
	// this is specified, the params are applicable only to this entity when this
	// proto is part of a backup job run.
	SourceEntity *PrivateEntityProto `json:"sourceEntity,omitempty"`

	// The SQL specific params to customize a SQL backup job run.
	SQLParams *SQLBackupParams `json:"sqlParams,omitempty"`

	// Parameters for UDA backup.
	UdaBackupParams *UdaBackupParams `json:"udaBackupParams,omitempty"`

	// Uptiering specific runonce params.
	UptierParams *UptieringRunOnceParams `json:"uptierParams,omitempty"`

	// The VMware environment specific params.
	VmwareParams *VMwareBackupParams `json:"vmwareParams,omitempty"`
}

// Validate validates this backup task additional params
func (m *BackupTaskAdditionalParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcropolisParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnalysisParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdpHydrationParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdpLogRunParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdpParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudVMParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternallyTriggeredBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNosqlConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO365Params(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutlookParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostBackupTaskScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostSnapshotScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreBackupTaskScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3BackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSanBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUptierParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupTaskAdditionalParams) validateAcropolisParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisParams) { // not required
		return nil
	}

	if m.AcropolisParams != nil {
		if err := m.AcropolisParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateAnalysisParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AnalysisParams) { // not required
		return nil
	}

	if m.AnalysisParams != nil {
		if err := m.AnalysisParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analysisParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analysisParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateCassandraBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraBackupParams) { // not required
		return nil
	}

	if m.CassandraBackupParams != nil {
		if err := m.CassandraBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateCdpHydrationParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CdpHydrationParams) { // not required
		return nil
	}

	if m.CdpHydrationParams != nil {
		if err := m.CdpHydrationParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpHydrationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpHydrationParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateCdpLogRunParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CdpLogRunParams) { // not required
		return nil
	}

	if m.CdpLogRunParams != nil {
		if err := m.CdpLogRunParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpLogRunParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpLogRunParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateCdpParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CdpParams) { // not required
		return nil
	}

	if m.CdpParams != nil {
		if err := m.CdpParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateCloudVMParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudVMParams) { // not required
		return nil
	}

	if m.CloudVMParams != nil {
		if err := m.CloudVMParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudVmParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateConfigVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigVec); i++ {
		if swag.IsZero(m.ConfigVec[i]) { // not required
			continue
		}

		if m.ConfigVec[i] != nil {
			if err := m.ConfigVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateExternallyTriggeredBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternallyTriggeredBackupParams) { // not required
		return nil
	}

	if m.ExternallyTriggeredBackupParams != nil {
		if err := m.ExternallyTriggeredBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externallyTriggeredBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externallyTriggeredBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateKubernetesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesParams) { // not required
		return nil
	}

	if m.KubernetesParams != nil {
		if err := m.KubernetesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateNosqlConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NosqlConnectParams) { // not required
		return nil
	}

	if m.NosqlConnectParams != nil {
		if err := m.NosqlConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateO365Params(formats strfmt.Registry) error {
	if swag.IsZero(m.O365Params) { // not required
		return nil
	}

	if m.O365Params != nil {
		if err := m.O365Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Params")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateOracleParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleParams) { // not required
		return nil
	}

	if m.OracleParams != nil {
		if err := m.OracleParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateOutlookParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OutlookParams) { // not required
		return nil
	}

	if m.OutlookParams != nil {
		if err := m.OutlookParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validatePhysicalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validatePostBackupTaskScript(formats strfmt.Registry) error {
	if swag.IsZero(m.PostBackupTaskScript) { // not required
		return nil
	}

	if m.PostBackupTaskScript != nil {
		if err := m.PostBackupTaskScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBackupTaskScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBackupTaskScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validatePostSnapshotScript(formats strfmt.Registry) error {
	if swag.IsZero(m.PostSnapshotScript) { // not required
		return nil
	}

	if m.PostSnapshotScript != nil {
		if err := m.PostSnapshotScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSnapshotScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSnapshotScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validatePreBackupTaskScript(formats strfmt.Registry) error {
	if swag.IsZero(m.PreBackupTaskScript) { // not required
		return nil
	}

	if m.PreBackupTaskScript != nil {
		if err := m.PreBackupTaskScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preBackupTaskScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preBackupTaskScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateS3BackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.S3BackupParams) { // not required
		return nil
	}

	if m.S3BackupParams != nil {
		if err := m.S3BackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3BackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3BackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateSanBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SanBackupParams) { // not required
		return nil
	}

	if m.SanBackupParams != nil {
		if err := m.SanBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sanBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sanBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateSfdcBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcBackupParams) { // not required
		return nil
	}

	if m.SfdcBackupParams != nil {
		if err := m.SfdcBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateSourceEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceEntity) { // not required
		return nil
	}

	if m.SourceEntity != nil {
		if err := m.SourceEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceEntity")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateSQLParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLParams) { // not required
		return nil
	}

	if m.SQLParams != nil {
		if err := m.SQLParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateUdaBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaBackupParams) { // not required
		return nil
	}

	if m.UdaBackupParams != nil {
		if err := m.UdaBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateUptierParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UptierParams) { // not required
		return nil
	}

	if m.UptierParams != nil {
		if err := m.UptierParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uptierParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uptierParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup task additional params based on the context it is used
func (m *BackupTaskAdditionalParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcropolisParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnalysisParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCdpHydrationParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCdpLogRunParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCdpParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudVMParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternallyTriggeredBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNosqlConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateO365Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutlookParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostBackupTaskScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostSnapshotScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreBackupTaskScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3BackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSanBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUptierParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateAcropolisParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AcropolisParams != nil {

		if swag.IsZero(m.AcropolisParams) { // not required
			return nil
		}

		if err := m.AcropolisParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateAnalysisParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AnalysisParams != nil {

		if swag.IsZero(m.AnalysisParams) { // not required
			return nil
		}

		if err := m.AnalysisParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analysisParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analysisParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateCassandraBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraBackupParams != nil {

		if swag.IsZero(m.CassandraBackupParams) { // not required
			return nil
		}

		if err := m.CassandraBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateCdpHydrationParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CdpHydrationParams != nil {

		if swag.IsZero(m.CdpHydrationParams) { // not required
			return nil
		}

		if err := m.CdpHydrationParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpHydrationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpHydrationParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateCdpLogRunParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CdpLogRunParams != nil {

		if swag.IsZero(m.CdpLogRunParams) { // not required
			return nil
		}

		if err := m.CdpLogRunParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpLogRunParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpLogRunParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateCdpParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CdpParams != nil {

		if swag.IsZero(m.CdpParams) { // not required
			return nil
		}

		if err := m.CdpParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateCloudVMParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudVMParams != nil {

		if swag.IsZero(m.CloudVMParams) { // not required
			return nil
		}

		if err := m.CloudVMParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudVmParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateConfigVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConfigVec); i++ {

		if m.ConfigVec[i] != nil {

			if swag.IsZero(m.ConfigVec[i]) { // not required
				return nil
			}

			if err := m.ConfigVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateExternallyTriggeredBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternallyTriggeredBackupParams != nil {

		if swag.IsZero(m.ExternallyTriggeredBackupParams) { // not required
			return nil
		}

		if err := m.ExternallyTriggeredBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externallyTriggeredBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externallyTriggeredBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateKubernetesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesParams != nil {

		if swag.IsZero(m.KubernetesParams) { // not required
			return nil
		}

		if err := m.KubernetesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateNosqlConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NosqlConnectParams != nil {

		if swag.IsZero(m.NosqlConnectParams) { // not required
			return nil
		}

		if err := m.NosqlConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateO365Params(ctx context.Context, formats strfmt.Registry) error {

	if m.O365Params != nil {

		if swag.IsZero(m.O365Params) { // not required
			return nil
		}

		if err := m.O365Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Params")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateOracleParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleParams != nil {

		if swag.IsZero(m.OracleParams) { // not required
			return nil
		}

		if err := m.OracleParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateOutlookParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OutlookParams != nil {

		if swag.IsZero(m.OutlookParams) { // not required
			return nil
		}

		if err := m.OutlookParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidatePostBackupTaskScript(ctx context.Context, formats strfmt.Registry) error {

	if m.PostBackupTaskScript != nil {

		if swag.IsZero(m.PostBackupTaskScript) { // not required
			return nil
		}

		if err := m.PostBackupTaskScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBackupTaskScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBackupTaskScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidatePostSnapshotScript(ctx context.Context, formats strfmt.Registry) error {

	if m.PostSnapshotScript != nil {

		if swag.IsZero(m.PostSnapshotScript) { // not required
			return nil
		}

		if err := m.PostSnapshotScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSnapshotScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSnapshotScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidatePreBackupTaskScript(ctx context.Context, formats strfmt.Registry) error {

	if m.PreBackupTaskScript != nil {

		if swag.IsZero(m.PreBackupTaskScript) { // not required
			return nil
		}

		if err := m.PreBackupTaskScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preBackupTaskScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preBackupTaskScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateS3BackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.S3BackupParams != nil {

		if swag.IsZero(m.S3BackupParams) { // not required
			return nil
		}

		if err := m.S3BackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3BackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3BackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateSanBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SanBackupParams != nil {

		if swag.IsZero(m.SanBackupParams) { // not required
			return nil
		}

		if err := m.SanBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sanBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sanBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateSfdcBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcBackupParams != nil {

		if swag.IsZero(m.SfdcBackupParams) { // not required
			return nil
		}

		if err := m.SfdcBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateSourceEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceEntity != nil {

		if swag.IsZero(m.SourceEntity) { // not required
			return nil
		}

		if err := m.SourceEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceEntity")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateSQLParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLParams != nil {

		if swag.IsZero(m.SQLParams) { // not required
			return nil
		}

		if err := m.SQLParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateUdaBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaBackupParams != nil {

		if swag.IsZero(m.UdaBackupParams) { // not required
			return nil
		}

		if err := m.UdaBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateUptierParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UptierParams != nil {

		if swag.IsZero(m.UptierParams) { // not required
			return nil
		}

		if err := m.UptierParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uptierParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uptierParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTaskAdditionalParams) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupTaskAdditionalParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupTaskAdditionalParams) UnmarshalBinary(b []byte) error {
	var res BackupTaskAdditionalParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
