// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMLinkingInfo VM Linking Info
//
// swagger:model VmLinkingInfo
type VMLinkingInfo struct {

	// This is set to true if a VM is linked in entity provenance by edge type
	// kVMMigration.
	IsMigrated *bool `json:"isMigrated,omitempty"`

	// This is the time when ther VM was identified to have been migrated by
	// Cohesity. Note that this time can differ from the actual migration time in
	// vCenter.
	MigratedTimeUsecs *int64 `json:"migratedTimeUsecs,omitempty"`

	// This is the id of the VM on the vCenter where it was originally present
	PreviousVMEntityID *int64 `json:"previousVmEntityId,omitempty"`

	// This is the id of vCenter where the VM was originally present
	PreviousVMParentSourceID *int64 `json:"previousVmParentSourceId,omitempty"`
}

// Validate validates this Vm linking info
func (m *VMLinkingInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this Vm linking info based on context it is used
func (m *VMLinkingInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMLinkingInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMLinkingInfo) UnmarshalBinary(b []byte) error {
	var res VMLinkingInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
