// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FilePathFilter File or Directory Path Filter.
//
// Specifies filters to match files and directories on a Server.
// Two kinds of filters are supported. a) prefix which always starts
// with '/'. b) posix which always starts with '*' (cannot be "*" only).
// Regular expressions are not supported.
// If a directory is matched, the action is applicable to all of its
// descendants. File paths not matching any protectFilters are not backed up.
//
// An example is:
// Protect Filters: "/"
// Exclude Filters: "/tmp", "*.mp4"
// Using such a policy will include everything under the root directory except
// the /tmp directory and all the mp4 files.
//
// swagger:model FilePathFilter
type FilePathFilter struct {

	// Array of Excluded File Path Filters.
	//
	// Specifies filters to match files or directories that should be removed
	// from the list of objects matching ProtectFilters.
	ExcludeFilters []string `json:"excludeFilters"`

	// Array of Protected File Path Filters.
	//
	// Specifies filters to match files or directories that should be protected.
	ProtectFilters []string `json:"protectFilters"`
}

// Validate validates this file path filter
func (m *FilePathFilter) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this file path filter based on context it is used
func (m *FilePathFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FilePathFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilePathFilter) UnmarshalBinary(b []byte) error {
	var res FilePathFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
