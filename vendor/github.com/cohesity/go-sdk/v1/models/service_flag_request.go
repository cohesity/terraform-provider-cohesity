// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceFlagRequest ServiceFlagRequest is the struct to specify the request to update a flag for
// a service.
//
// swagger:model ServiceFlagRequest
type ServiceFlagRequest struct {

	// If Clear is set to true, the flag is cleared
	Clear *bool `json:"clear,omitempty"`

	// FlagName is the name of the flag for the service.
	FlagName *string `json:"flagName,omitempty"`

	// FlagValue is the value of the specified flag for the service to update.
	FlagValue *string `json:"flagValue,omitempty"`

	// ProductModel is the product model that this flag to set on.
	ProductModel *string `json:"productModel,omitempty"`

	// Reason is the reason for updating gflag.
	Reason *string `json:"reason,omitempty"`

	// ServiceName is the name of the Service for which the flag needs to be
	// updated.
	ServiceName *string `json:"serviceName,omitempty"`
}

// Validate validates this service flag request
func (m *ServiceFlagRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service flag request based on context it is used
func (m *ServiceFlagRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceFlagRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceFlagRequest) UnmarshalBinary(b []byte) error {
	var res ServiceFlagRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
