// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RetrieveArchiveInfo Proto to describe information about the retrieval of an archive task as
// provided by Icebox.
//
// swagger:model RetrieveArchiveInfo
type RetrieveArchiveInfo struct {

	// Average logical bytes transfer rate in bytes per second as seen by Icebox.
	AvgLogicalTransferRateBps *int64 `json:"avgLogicalTransferRateBps,omitempty"`

	// Number of physical bytes transferred for this retrieval task so far.
	BytesTransferred *int64 `json:"bytesTransferred,omitempty"`

	// Time when this retrieval task ended at Icebox side. If not set, then the
	// retrieval has not ended yet.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// If the retrieval task has completed, the following indicates whether there
	// was an error in its completion.
	Error *ErrorProto `json:"error,omitempty"`

	// Number of logical bytes transferred so far.
	LogicalBytesTransferred *int64 `json:"logicalBytesTransferred,omitempty"`

	// Total logical size of the retrieval task.
	LogicalSizeBytes *int64 `json:"logicalSizeBytes,omitempty"`

	// The root path of the progress monitor for this task.
	ProgressMonitorTaskPath *string `json:"progressMonitorTaskPath,omitempty"`

	// Contains info about all retrieved entities.
	RetrievedEntityVec []*RetrieveArchiveInfoRetrievedEntity `json:"retrievedEntityVec"`

	// If true, we will use the view directly without cloning it and delete it
	// when the restore is complete.
	SkipCloningView *bool `json:"skipCloningView,omitempty"`

	// Time when this retrieval task was started by Icebox. If not set, then
	// retrieval has not been started yet.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// The stub view that Icebox created. Stub view can be used for selectively
	// restoring or accessing files from an archive location.
	StubViewName *string `json:"stubViewName,omitempty"`

	// Relative directory inside the stub view that corresponds with the archive.
	StubViewRelativeDirName *string `json:"stubViewRelativeDirName,omitempty"`

	// The name of the target view where Icebox has retrieved and staged the
	// requested entities.
	TargetViewName *string `json:"targetViewName,omitempty"`

	// Message to display in the UI if any manual intervention is needed to make
	// forward progress for the retrieve from archive task. This message is
	// mainly relevant for tape based retrieve from archive tasks where a backup
	// admin might be asked to load new media when the tape library does not have
	// the relevant media to retrieve the archive from.
	UserActionRequiredMsg *string `json:"userActionRequiredMsg,omitempty"`
}

// Validate validates this retrieve archive info
func (m *RetrieveArchiveInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetrievedEntityVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveArchiveInfo) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RetrieveArchiveInfo) validateRetrievedEntityVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RetrievedEntityVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RetrievedEntityVec); i++ {
		if swag.IsZero(m.RetrievedEntityVec[i]) { // not required
			continue
		}

		if m.RetrievedEntityVec[i] != nil {
			if err := m.RetrievedEntityVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retrievedEntityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("retrievedEntityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this retrieve archive info based on the context it is used
func (m *RetrieveArchiveInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetrievedEntityVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveArchiveInfo) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RetrieveArchiveInfo) contextValidateRetrievedEntityVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RetrievedEntityVec); i++ {

		if m.RetrievedEntityVec[i] != nil {

			if swag.IsZero(m.RetrievedEntityVec[i]) { // not required
				return nil
			}

			if err := m.RetrievedEntityVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retrievedEntityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("retrievedEntityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveArchiveInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveArchiveInfo) UnmarshalBinary(b []byte) error {
	var res RetrieveArchiveInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
