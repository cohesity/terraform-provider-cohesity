// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HBaseConnectParams HBase Connect Params.
//
// Specifies an Object containing information about a registered HBase
// source.
//
// swagger:model HBaseConnectParams
type HBaseConnectParams struct {

	// Specifies the HBase discovery params.
	HbaseDiscoveryParams *HadoopDiscoveryParams `json:"hbaseDiscoveryParams,omitempty"`

	// The entity id of the HDFS source for this HBase
	HdfsEntityID *int64 `json:"hdfsEntityId,omitempty"`

	// Specifies the kerberos principal.
	KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

	// Specifies the HBase data root directory.
	RootDataDirectory *string `json:"rootDataDirectory,omitempty"`

	// Specifies the HBase zookeeper quorum.
	ZookeeperQuorum []string `json:"zookeeperQuorum"`
}

// Validate validates this h base connect params
func (m *HBaseConnectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHbaseDiscoveryParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HBaseConnectParams) validateHbaseDiscoveryParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseDiscoveryParams) { // not required
		return nil
	}

	if m.HbaseDiscoveryParams != nil {
		if err := m.HbaseDiscoveryParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseDiscoveryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseDiscoveryParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this h base connect params based on the context it is used
func (m *HBaseConnectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHbaseDiscoveryParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HBaseConnectParams) contextValidateHbaseDiscoveryParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseDiscoveryParams != nil {

		if swag.IsZero(m.HbaseDiscoveryParams) { // not required
			return nil
		}

		if err := m.HbaseDiscoveryParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseDiscoveryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseDiscoveryParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HBaseConnectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HBaseConnectParams) UnmarshalBinary(b []byte) error {
	var res HBaseConnectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
