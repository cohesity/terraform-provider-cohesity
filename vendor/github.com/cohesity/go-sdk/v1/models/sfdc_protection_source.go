// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SfdcProtectionSource Salesforce Protection Source.
//
// Specifies an Object representing Salesforce.
//
// swagger:model SfdcProtectionSource
type SfdcProtectionSource struct {

	// Specifies the instance name of the Salesforce entity.
	Name *string `json:"name,omitempty"`

	// Information of a Salesforce object, only valid for an entity of
	// type kObject.
	ObjectInfo *SfdcObject `json:"objectInfo,omitempty"`

	// Information of a Salesforce org, only valid for an entity
	// of type kOrg.
	OrgInfo *SfdcOrg `json:"orgInfo,omitempty"`

	// Specifies the type of the managed Object in Salesforce
	// Protection Source.
	// Sfdc related params.
	//
	// Specifies the type of an Salesforce source entity.
	// 'kOrg' indicates a Salseforce Org.
	// 'kObject' indicates a object within the Salesforce Org.
	// Enum: ["kOrg","kObject"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this sfdc protection source
func (m *SfdcProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcProtectionSource) validateObjectInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectInfo) { // not required
		return nil
	}

	if m.ObjectInfo != nil {
		if err := m.ObjectInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SfdcProtectionSource) validateOrgInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OrgInfo) { // not required
		return nil
	}

	if m.OrgInfo != nil {
		if err := m.OrgInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orgInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orgInfo")
			}
			return err
		}
	}

	return nil
}

var sfdcProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kOrg","kObject"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sfdcProtectionSourceTypeTypePropEnum = append(sfdcProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// SfdcProtectionSourceTypeKOrg captures enum value "kOrg"
	SfdcProtectionSourceTypeKOrg string = "kOrg"

	// SfdcProtectionSourceTypeKObject captures enum value "kObject"
	SfdcProtectionSourceTypeKObject string = "kObject"
)

// prop value enum
func (m *SfdcProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sfdcProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SfdcProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sfdc protection source based on the context it is used
func (m *SfdcProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjectInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrgInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcProtectionSource) contextValidateObjectInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectInfo != nil {

		if swag.IsZero(m.ObjectInfo) { // not required
			return nil
		}

		if err := m.ObjectInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SfdcProtectionSource) contextValidateOrgInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OrgInfo != nil {

		if swag.IsZero(m.OrgInfo) { // not required
			return nil
		}

		if err := m.OrgInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orgInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orgInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SfdcProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcProtectionSource) UnmarshalBinary(b []byte) error {
	var res SfdcProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
