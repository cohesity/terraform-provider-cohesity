// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateViewEntity private view entity
//
// swagger:model PrivateViewEntity
type PrivateViewEntity struct {

	// A human readable name of the object.
	Name *string `json:"name,omitempty"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// The universal identifier of the object.
	// NOTE: Universal Id is used here to make the id unique across clusters.
	UID *UniversalIDProto `json:"uid,omitempty"`
}

// Validate validates this private view entity
func (m *PrivateViewEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateViewEntity) validateUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if m.UID != nil {
		if err := m.UID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private view entity based on the context it is used
func (m *PrivateViewEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateViewEntity) contextValidateUID(ctx context.Context, formats strfmt.Registry) error {

	if m.UID != nil {

		if swag.IsZero(m.UID) { // not required
			return nil
		}

		if err := m.UID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateViewEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateViewEntity) UnmarshalBinary(b []byte) error {
	var res PrivateViewEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
