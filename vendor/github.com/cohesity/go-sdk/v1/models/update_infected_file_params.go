// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateInfectedFileParams Specifies the parameters to update the infected files.
//
// swagger:model UpdateInfectedFileParams
type UpdateInfectedFileParams struct {

	// Specifies the list of infected file identifiers.
	InfectedFileIds []*InfectedFileParam `json:"infectedFileIds"`

	// Specifies the remediation state of the file. Not setting any value to
	// remediation state will reset the infected file.
	// Remediation State.
	// 'kQuarantine' indicates 'Quarantine' state of the file. This state blocks
	// the client access. The administrator will have to manually delete, rescan or
	// unquarantine the file.
	// 'kUnquarantine' indicates 'Unquarantine' state of the file.
	// The administrator has manually moved files from quarantined to the
	// unquarantined state to allow client access. Unquarantined files are
	// not scanned for virus until manually reset.
	// Enum: ["kQuarantine","kUnquarantine"]
	RemediationState *string `json:"remediationState,omitempty"`
}

// Validate validates this update infected file params
func (m *UpdateInfectedFileParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInfectedFileIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateInfectedFileParams) validateInfectedFileIds(formats strfmt.Registry) error {
	if swag.IsZero(m.InfectedFileIds) { // not required
		return nil
	}

	for i := 0; i < len(m.InfectedFileIds); i++ {
		if swag.IsZero(m.InfectedFileIds[i]) { // not required
			continue
		}

		if m.InfectedFileIds[i] != nil {
			if err := m.InfectedFileIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("infectedFileIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("infectedFileIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var updateInfectedFileParamsTypeRemediationStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kQuarantine","kUnquarantine"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateInfectedFileParamsTypeRemediationStatePropEnum = append(updateInfectedFileParamsTypeRemediationStatePropEnum, v)
	}
}

const (

	// UpdateInfectedFileParamsRemediationStateKQuarantine captures enum value "kQuarantine"
	UpdateInfectedFileParamsRemediationStateKQuarantine string = "kQuarantine"

	// UpdateInfectedFileParamsRemediationStateKUnquarantine captures enum value "kUnquarantine"
	UpdateInfectedFileParamsRemediationStateKUnquarantine string = "kUnquarantine"
)

// prop value enum
func (m *UpdateInfectedFileParams) validateRemediationStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateInfectedFileParamsTypeRemediationStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateInfectedFileParams) validateRemediationState(formats strfmt.Registry) error {
	if swag.IsZero(m.RemediationState) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemediationStateEnum("remediationState", "body", *m.RemediationState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update infected file params based on the context it is used
func (m *UpdateInfectedFileParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInfectedFileIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateInfectedFileParams) contextValidateInfectedFileIds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InfectedFileIds); i++ {

		if m.InfectedFileIds[i] != nil {

			if swag.IsZero(m.InfectedFileIds[i]) { // not required
				return nil
			}

			if err := m.InfectedFileIds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("infectedFileIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("infectedFileIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateInfectedFileParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateInfectedFileParams) UnmarshalBinary(b []byte) error {
	var res UpdateInfectedFileParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
