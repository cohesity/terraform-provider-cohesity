// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExtractFileRangeResult Extract File Range Result.
//
// This will capture output of ExtractFileRange and ExtractNFSFileRange.
//
// swagger:model ExtractFileRangeResult
type ExtractFileRangeResult struct {

	// The actual data bytes.
	Data []uint8 `json:"data"`

	// Will be true if start_offset > file length or EOF is reached. This is an
	// alternative to using file_length to determine when entire file is read.
	// Used when fetching from a view.
	EOF *bool `json:"eof,omitempty"`

	// Success/error status of the operation.
	Error *ErrorProto `json:"error,omitempty"`

	// The total length of the file. This field would be set provided no error
	// had occurred (indicated by error field above).
	FileLength *int64 `json:"fileLength,omitempty"`

	// The offset from which data was read.
	StartOffset *int64 `json:"startOffset,omitempty"`
}

// Validate validates this extract file range result
func (m *ExtractFileRangeResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtractFileRangeResult) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this extract file range result based on the context it is used
func (m *ExtractFileRangeResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtractFileRangeResult) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtractFileRangeResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtractFileRangeResult) UnmarshalBinary(b []byte) error {
	var res ExtractFileRangeResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
