// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EbsVolumeInfo AWS Volume Info.
//
// Specifies information about an AWS volume attached to an EC2 instance.
//
// swagger:model EbsVolumeInfo
type EbsVolumeInfo struct {

	// Specifies the name of the device. Eg - /dev/sdb.
	DeviceName *string `json:"deviceName,omitempty"`

	// Specifies the ID of the volume.
	ID *string `json:"id,omitempty"`

	// Specifies if the volume is attached as root device.
	IsRootDevice *bool `json:"isRootDevice,omitempty"`

	// Specifies the name of the volume.
	Name *string `json:"name,omitempty"`

	// Specifies the size of the volume in bytes.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`

	// Specifies the list of tags on EBS volume.
	Tags []*EBSVolumeTag `json:"tags"`

	// Specifies the type of the volume. Eg - gp2, io1.
	Type *string `json:"type,omitempty"`
}

// Validate validates this ebs volume info
func (m *EbsVolumeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EbsVolumeInfo) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ebs volume info based on the context it is used
func (m *EbsVolumeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EbsVolumeInfo) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EbsVolumeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EbsVolumeInfo) UnmarshalBinary(b []byte) error {
	var res EbsVolumeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
