// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisteredEntitySfdcParams Contains all params specified by the user while registering a Sfdc
// source.
//
// swagger:model RegisteredEntitySfdcParams
type RegisteredEntitySfdcParams struct {

	// Token that will be used in subsequent api requests.
	AccessToken *string `json:"accessToken,omitempty"`

	// Maximum daily api limit
	APILimit *int64 `json:"apiLimit,omitempty"`

	// Token that will be used for fetching access_token from salesforce.
	AuthToken *string `json:"authToken,omitempty"`

	// Callback URL that is required to fetch Access token from salesforce.
	CallbackURL *string `json:"callbackUrl,omitempty"`

	// Concurrent API Request Limits.
	ConcurrentReqLimit *int64 `json:"concurrentReqLimit,omitempty"`

	// Consumer key from the connected app in Sfdc.
	ConsumerKey *string `json:"consumerKey,omitempty"`

	// Consumer secret from the connected app in Sfdc.
	ConsumerSecret *string `json:"consumerSecret,omitempty"`

	// Credentials that will be used to log into the application environment.
	Credentials *Credentials `json:"credentials,omitempty"`

	// Sfdc instance_url. Rename to instance_url later.
	Endpoint *string `json:"endpoint,omitempty"`

	// endpoint type
	EndpointType *int32 `json:"endpointType,omitempty"`

	// Metadata endpoint url. All metadata requests must be made to this url.
	MetadataEndpointURL *string `json:"metadataEndpointUrl,omitempty"`

	// Token that will be used to refresh the access token.
	RefreshToken *string `json:"refreshToken,omitempty"`

	// Soap endpoint url. All soap requests must be made to this url.
	SoapEndpointURL *string `json:"soapEndpointUrl,omitempty"`

	// use bulk api if set to true
	UseBulkAPI *bool `json:"useBulkApi,omitempty"`
}

// Validate validates this registered entity sfdc params
func (m *RegisteredEntitySfdcParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntitySfdcParams) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this registered entity sfdc params based on the context it is used
func (m *RegisteredEntitySfdcParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntitySfdcParams) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredEntitySfdcParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredEntitySfdcParams) UnmarshalBinary(b []byte) error {
	var res RegisteredEntitySfdcParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
