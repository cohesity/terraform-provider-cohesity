// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatternRequestBody Pattern Request Body.
//
// Specifies details about the pattern which has to be saved.
//
// swagger:model PatternRequestBody
type PatternRequestBody struct {

	// Specifies the data type for which supported patterns can be fetched.
	// Required: true
	ApplicationDataType *int32 `json:"applicationDataType"`

	// Specifies AWB Application ID.
	// Required: true
	ApplicationID *int64 `json:"applicationId"`

	// Specifies the pattern details to be saved.
	// Required: true
	UserPattern *SupportedPattern `json:"userPattern"`
}

// Validate validates this pattern request body
func (m *PatternRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPattern(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatternRequestBody) validateApplicationDataType(formats strfmt.Registry) error {

	if err := validate.Required("applicationDataType", "body", m.ApplicationDataType); err != nil {
		return err
	}

	return nil
}

func (m *PatternRequestBody) validateApplicationID(formats strfmt.Registry) error {

	if err := validate.Required("applicationId", "body", m.ApplicationID); err != nil {
		return err
	}

	return nil
}

func (m *PatternRequestBody) validateUserPattern(formats strfmt.Registry) error {

	if err := validate.Required("userPattern", "body", m.UserPattern); err != nil {
		return err
	}

	if m.UserPattern != nil {
		if err := m.UserPattern.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userPattern")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userPattern")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pattern request body based on the context it is used
func (m *PatternRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserPattern(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatternRequestBody) contextValidateUserPattern(ctx context.Context, formats strfmt.Registry) error {

	if m.UserPattern != nil {

		if err := m.UserPattern.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userPattern")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userPattern")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatternRequestBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatternRequestBody) UnmarshalBinary(b []byte) error {
	var res PatternRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
