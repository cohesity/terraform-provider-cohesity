// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeMappingReportVolumeMountIOInfo volume mapping report volume mount i o info
//
// swagger:model VolumeMappingReport_VolumeMountIOInfo
type VolumeMappingReportVolumeMountIOInfo struct {

	// Mapping from volume name to the reads recorded during its mount.
	VolumeMountReads map[string]ReadIODataProto `json:"volumeMountReads,omitempty"`
}

// Validate validates this volume mapping report volume mount i o info
func (m *VolumeMappingReportVolumeMountIOInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVolumeMountReads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMappingReportVolumeMountIOInfo) validateVolumeMountReads(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeMountReads) { // not required
		return nil
	}

	for k := range m.VolumeMountReads {

		if err := validate.Required("volumeMountReads"+"."+k, "body", m.VolumeMountReads[k]); err != nil {
			return err
		}
		if val, ok := m.VolumeMountReads[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeMountReads" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeMountReads" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this volume mapping report volume mount i o info based on the context it is used
func (m *VolumeMappingReportVolumeMountIOInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVolumeMountReads(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMappingReportVolumeMountIOInfo) contextValidateVolumeMountReads(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.VolumeMountReads {

		if val, ok := m.VolumeMountReads[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMappingReportVolumeMountIOInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMappingReportVolumeMountIOInfo) UnmarshalBinary(b []byte) error {
	var res VolumeMappingReportVolumeMountIOInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
