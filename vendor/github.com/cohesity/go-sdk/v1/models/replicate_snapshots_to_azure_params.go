// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReplicateSnapshotsToAzureParams Params required to replicate snapshots to another Azure's storage container.
//
// This is populated for Azure snapshot manager replication.
//
// swagger:model ReplicateSnapshotsToAzureParams
type ReplicateSnapshotsToAzureParams struct {

	// Resource group to filter regions in UX.
	ResourceGroup *EntityProto `json:"resourceGroup,omitempty"`

	// Name of the storage account that will contain the storage container within
	// which we will create the blob/snapshot.
	StorageAccount *EntityProto `json:"storageAccount,omitempty"`

	// Name of the storage container within the above storage account.
	StorageContainer *EntityProto `json:"storageContainer,omitempty"`

	// Name of the Azure resource group that has the storage account mentioned
	// below.
	StorageResourceGroup *EntityProto `json:"storageResourceGroup,omitempty"`
}

// Validate validates this replicate snapshots to azure params
func (m *ReplicateSnapshotsToAzureParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicateSnapshotsToAzureParams) validateResourceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {
		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicateSnapshotsToAzureParams) validateStorageAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageAccount) { // not required
		return nil
	}

	if m.StorageAccount != nil {
		if err := m.StorageAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageAccount")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicateSnapshotsToAzureParams) validateStorageContainer(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageContainer) { // not required
		return nil
	}

	if m.StorageContainer != nil {
		if err := m.StorageContainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageContainer")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicateSnapshotsToAzureParams) validateStorageResourceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageResourceGroup) { // not required
		return nil
	}

	if m.StorageResourceGroup != nil {
		if err := m.StorageResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageResourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageResourceGroup")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replicate snapshots to azure params based on the context it is used
func (m *ReplicateSnapshotsToAzureParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageContainer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageResourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicateSnapshotsToAzureParams) contextValidateResourceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceGroup != nil {

		if swag.IsZero(m.ResourceGroup) { // not required
			return nil
		}

		if err := m.ResourceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicateSnapshotsToAzureParams) contextValidateStorageAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageAccount != nil {

		if swag.IsZero(m.StorageAccount) { // not required
			return nil
		}

		if err := m.StorageAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageAccount")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicateSnapshotsToAzureParams) contextValidateStorageContainer(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageContainer != nil {

		if swag.IsZero(m.StorageContainer) { // not required
			return nil
		}

		if err := m.StorageContainer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageContainer")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicateSnapshotsToAzureParams) contextValidateStorageResourceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageResourceGroup != nil {

		if swag.IsZero(m.StorageResourceGroup) { // not required
			return nil
		}

		if err := m.StorageResourceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageResourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageResourceGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicateSnapshotsToAzureParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicateSnapshotsToAzureParams) UnmarshalBinary(b []byte) error {
	var res ReplicateSnapshotsToAzureParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
