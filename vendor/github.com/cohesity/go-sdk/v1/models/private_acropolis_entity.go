// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateAcropolisEntity private acropolis entity
//
// swagger:model PrivateAcropolisEntity
type PrivateAcropolisEntity struct {

	// The UUID of the cluster instance to which this entity belongs to. The
	// above field 'uuid' is unique within a cluster. Pair ('uuid' and
	// 'cluster_uuid') uniquely identifies an entity globally in an env where
	// 'kPrismCentral' is registered as a parent source.
	//
	// This field is not applicable for an entity of type 'kPrismCentral',
	// 'kStandaloneCluster' and 'kCluster'.
	ClusterUUID *string `json:"clusterUuid,omitempty"`

	// This is a general description that could be set for some entities.
	Description *string `json:"description,omitempty"`

	// The host environment type. This is set for entities of type
	// 'kVirtualMachine'.
	HostType *int32 `json:"hostType,omitempty"`

	// Hypervisor specific UUID of the entity. This will be set just for
	// entities of type 'kVirtualMachine'.
	HypervisorVMUUID *string `json:"hypervisorVmUuid,omitempty"`

	// Whether the entity is an agent VM (Only applicable for an entity of type
	// 'kVirtualMachine').
	IsAgentVM *bool `json:"isAgentVm,omitempty"`

	// Acropolis registered management server. This will be set in case a
	// management server is registered on the cluster.
	ManagementServer *ManagementServer `json:"managementServer,omitempty"`

	// A human readable name for the object.
	Name *string `json:"name,omitempty"`

	// This field stores info realted to Nutanix Guest Tools. This is set for
	// entities of type 'kVirtualMachine'.
	NgtInfo *NGTInfo `json:"ngtInfo,omitempty"`

	// This field contains details if running_on_ndfs is set to false
	// This will be set just for entities of type 'kVirtualMachine'.
	NonNdfsDetails *string `json:"nonNdfsDetails,omitempty"`

	// This field indicates if the VM is running on Nutanix File System
	// This will be set just for entities of type 'kVirtualMachine'.
	RunningOnNdfs *bool `json:"runningOnNdfs,omitempty"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// The UUID of the object.
	UUID *string `json:"uuid,omitempty"`

	// Acropolis cluster version. This will be set for 'kStandaloneCluster' and
	// 'kCluster'.
	Version *string `json:"version,omitempty"`

	// The list of disks config attached to this vm.
	VirtualDiskConfigVec []*PrivateVirtualDiskConfig `json:"virtualDiskConfigVec"`
}

// Validate validates this private acropolis entity
func (m *PrivateAcropolisEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagementServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNgtInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDiskConfigVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAcropolisEntity) validateManagementServer(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagementServer) { // not required
		return nil
	}

	if m.ManagementServer != nil {
		if err := m.ManagementServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managementServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managementServer")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAcropolisEntity) validateNgtInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.NgtInfo) { // not required
		return nil
	}

	if m.NgtInfo != nil {
		if err := m.NgtInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ngtInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ngtInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAcropolisEntity) validateVirtualDiskConfigVec(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualDiskConfigVec) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualDiskConfigVec); i++ {
		if swag.IsZero(m.VirtualDiskConfigVec[i]) { // not required
			continue
		}

		if m.VirtualDiskConfigVec[i] != nil {
			if err := m.VirtualDiskConfigVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualDiskConfigVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualDiskConfigVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this private acropolis entity based on the context it is used
func (m *PrivateAcropolisEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManagementServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNgtInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualDiskConfigVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAcropolisEntity) contextValidateManagementServer(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagementServer != nil {

		if swag.IsZero(m.ManagementServer) { // not required
			return nil
		}

		if err := m.ManagementServer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managementServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managementServer")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAcropolisEntity) contextValidateNgtInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.NgtInfo != nil {

		if swag.IsZero(m.NgtInfo) { // not required
			return nil
		}

		if err := m.NgtInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ngtInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ngtInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAcropolisEntity) contextValidateVirtualDiskConfigVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualDiskConfigVec); i++ {

		if m.VirtualDiskConfigVec[i] != nil {

			if swag.IsZero(m.VirtualDiskConfigVec[i]) { // not required
				return nil
			}

			if err := m.VirtualDiskConfigVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualDiskConfigVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualDiskConfigVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateAcropolisEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateAcropolisEntity) UnmarshalBinary(b []byte) error {
	var res PrivateAcropolisEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
