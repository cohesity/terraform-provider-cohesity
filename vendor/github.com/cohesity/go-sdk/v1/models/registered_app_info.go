// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisteredAppInfo registered app info
//
// swagger:model RegisteredAppInfo
type RegisteredAppInfo struct {

	// Specifies an authentication error message. This indicates the given
	// credentials are rejected and the registration of the application is not
	// successful.
	AuthenticationErrorMessage *string `json:"authenticationErrorMessage,omitempty"`

	// Specifies the status of authenticating to the Protection Source
	// when registering this application with Cohesity Cluster. If the status is
	// 'kFinished' and there is no error, registration is successful.
	// Specifies the status of the authentication during the registration of a
	// Protection Source.
	// 'kPending' indicates the authentication is in progress.
	// 'kScheduled' indicates the authentication is scheduled.
	// 'kFinished' indicates the authentication is completed.
	// 'kRefreshInProgress' indicates the refresh is in progress.
	// Enum: ["kPending","kScheduled","kFinished","kRefreshInProgress"]
	AuthenticationStatus *string `json:"authenticationStatus,omitempty"`

	// Specifies the application environment.
	// Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	// NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	// 'kVMware' indicates the VMware Protection Source environment.
	// 'kHyperV' indicates the HyperV Protection Source environment.
	// 'kSQL' indicates the SQL Protection Source environment.
	// 'kView' indicates the View Protection Source environment.
	// 'kPuppeteer' indicates the Cohesity's Remote Adapter.
	// 'kPhysical' indicates the physical Protection Source environment.
	// 'kPure' indicates the Pure Storage Protection Source environment.
	// 'kNimble' indicates the Nimble Storage Protection Source environment.
	// 'kAzure' indicates the Microsoft's Azure Protection Source environment.
	// 'kNetapp' indicates the Netapp Protection Source environment.
	// 'kAgent' indicates the Agent Protection Source environment.
	// 'kGenericNas' indicates the Generic Network Attached Storage Protection
	// Source environment.
	// 'kAcropolis' indicates the Acropolis Protection Source environment.
	// 'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	// 'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	// 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	// 'kGPFS' indicates IBM's GPFS Protection Source environment.
	// 'kKVM' indicates the KVM Protection Source environment.
	// 'kAWS' indicates the AWS Protection Source environment.
	// 'kExchange' indicates the Exchange Protection Source environment.
	// 'kHyperVVSS' indicates the HyperV VSS Protection Source
	// environment.
	// 'kOracle' indicates the Oracle Protection Source environment.
	// 'kGCP' indicates the Google Cloud Platform Protection Source environment.
	// 'kFlashBlade' indicates the Flash Blade Protection Source environment.
	// 'kAWSNative' indicates the AWS Native Protection Source environment.
	// 'kO365' indicates the Office 365 Protection Source environment.
	// 'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	// 'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	// 'kGCPNative' indicates the GCP Native Protection Source environment.
	// 'kAzureNative' indicates the Azure Native Protection Source environment.
	// 'kKubernetes' indicates a Kubernetes Protection Source environment.
	// 'kElastifile' indicates Elastifile Protection Source environment.
	// 'kAD' indicates Active Directory Protection Source environment.
	// 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	// 'kCassandra' indicates Cassandra Protection Source environment.
	// 'kMongoDB' indicates MongoDB Protection Source environment.
	// 'kCouchbase' indicates Couchbase Protection Source environment.
	// 'kHdfs' indicates Hdfs Protection Source environment.
	// 'kHive' indicates Hive Protection Source environment.
	// 'kHBase' indicates HBase Protection Source environment.
	// 'kUDA' indicates Universal Data Adapter Protection Source environment.
	// 'kSAPHANA' indicates SAP HANA protection source environment.
	// 'kO365Teams' indicates the Office365 Teams Protection Source environment.
	// 'kO365Group' indicates the Office365 Groups Protection Source environment.
	// 'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	// 'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	// 'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	// 'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	// kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	// kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	// kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	// kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	// kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	// kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	// kO365PublicFolders
	// Enum: ["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]
	Environment *string `json:"environment,omitempty"`

	// Specifies the list of check results internally performed to verify status of
	// various services such as 'AgnetRunning', 'SQLWriterRunning' etc.
	HostSettingsCheckResults []*HostSettingsCheckResult `json:"hostSettingsCheckResults"`

	// Specifies a message if there was any error encountered during the last
	// rebuild of the application tree. If there was no error during the
	// last rebuild, this field is reset.
	RefreshErrorMessage *string `json:"refreshErrorMessage,omitempty"`
}

// Validate validates this registered app info
func (m *RegisteredAppInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostSettingsCheckResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var registeredAppInfoTypeAuthenticationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPending","kScheduled","kFinished","kRefreshInProgress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registeredAppInfoTypeAuthenticationStatusPropEnum = append(registeredAppInfoTypeAuthenticationStatusPropEnum, v)
	}
}

const (

	// RegisteredAppInfoAuthenticationStatusKPending captures enum value "kPending"
	RegisteredAppInfoAuthenticationStatusKPending string = "kPending"

	// RegisteredAppInfoAuthenticationStatusKScheduled captures enum value "kScheduled"
	RegisteredAppInfoAuthenticationStatusKScheduled string = "kScheduled"

	// RegisteredAppInfoAuthenticationStatusKFinished captures enum value "kFinished"
	RegisteredAppInfoAuthenticationStatusKFinished string = "kFinished"

	// RegisteredAppInfoAuthenticationStatusKRefreshInProgress captures enum value "kRefreshInProgress"
	RegisteredAppInfoAuthenticationStatusKRefreshInProgress string = "kRefreshInProgress"
)

// prop value enum
func (m *RegisteredAppInfo) validateAuthenticationStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registeredAppInfoTypeAuthenticationStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisteredAppInfo) validateAuthenticationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationStatusEnum("authenticationStatus", "body", *m.AuthenticationStatus); err != nil {
		return err
	}

	return nil
}

var registeredAppInfoTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registeredAppInfoTypeEnvironmentPropEnum = append(registeredAppInfoTypeEnvironmentPropEnum, v)
	}
}

const (

	// RegisteredAppInfoEnvironmentKVMware captures enum value "kVMware"
	RegisteredAppInfoEnvironmentKVMware string = "kVMware"

	// RegisteredAppInfoEnvironmentKHyperV captures enum value "kHyperV"
	RegisteredAppInfoEnvironmentKHyperV string = "kHyperV"

	// RegisteredAppInfoEnvironmentKSQL captures enum value "kSQL"
	RegisteredAppInfoEnvironmentKSQL string = "kSQL"

	// RegisteredAppInfoEnvironmentKView captures enum value "kView"
	RegisteredAppInfoEnvironmentKView string = "kView"

	// RegisteredAppInfoEnvironmentKPuppeteer captures enum value "kPuppeteer"
	RegisteredAppInfoEnvironmentKPuppeteer string = "kPuppeteer"

	// RegisteredAppInfoEnvironmentKPhysical captures enum value "kPhysical"
	RegisteredAppInfoEnvironmentKPhysical string = "kPhysical"

	// RegisteredAppInfoEnvironmentKPure captures enum value "kPure"
	RegisteredAppInfoEnvironmentKPure string = "kPure"

	// RegisteredAppInfoEnvironmentKNimble captures enum value "kNimble"
	RegisteredAppInfoEnvironmentKNimble string = "kNimble"
)

// prop value enum
func (m *RegisteredAppInfo) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registeredAppInfoTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisteredAppInfo) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *RegisteredAppInfo) validateHostSettingsCheckResults(formats strfmt.Registry) error {
	if swag.IsZero(m.HostSettingsCheckResults) { // not required
		return nil
	}

	for i := 0; i < len(m.HostSettingsCheckResults); i++ {
		if swag.IsZero(m.HostSettingsCheckResults[i]) { // not required
			continue
		}

		if m.HostSettingsCheckResults[i] != nil {
			if err := m.HostSettingsCheckResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSettingsCheckResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSettingsCheckResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this registered app info based on the context it is used
func (m *RegisteredAppInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostSettingsCheckResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredAppInfo) contextValidateHostSettingsCheckResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostSettingsCheckResults); i++ {

		if m.HostSettingsCheckResults[i] != nil {

			if swag.IsZero(m.HostSettingsCheckResults[i]) { // not required
				return nil
			}

			if err := m.HostSettingsCheckResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSettingsCheckResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSettingsCheckResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredAppInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredAppInfo) UnmarshalBinary(b []byte) error {
	var res RegisteredAppInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
