// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlashBladeProtectionSource Pure Storage FlashBlade Protection Source.
//
// Specifies a Protection Source in Pure Storage FlashBlade environment.
//
// swagger:model FlashBladeProtectionSource
type FlashBladeProtectionSource struct {

	// Specifies a Pure Storage FlashBlade File System information.
	// This is set only when the object type is 'kFileSystem'.
	FileSystem *FlashBladeFileSystem `json:"fileSystem,omitempty"`

	// Specifies a unique name of the Protection Source.
	Name *string `json:"name,omitempty"`

	// Specifies a Pure Storage FlashBlade Array information. This is set only
	// when the object type is 'kStorageArray'.
	StorageArray *FlashBladeStorageArray `json:"storageArray,omitempty"`

	// Specifies the type of managed object in a Pure Storage FlashBlade
	// like 'kStorageArray' or 'kFileSystem'.
	// 'kStorageArray' indicates a top level Pure Storage FlashBlade array.
	// 'kFileSystem' indicates a Pure Storage FlashBlade file system within the
	// array.
	// Enum: ["kStorageArray","kFileSystem"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this flash blade protection source
func (m *FlashBladeProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageArray(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlashBladeProtectionSource) validateFileSystem(formats strfmt.Registry) error {
	if swag.IsZero(m.FileSystem) { // not required
		return nil
	}

	if m.FileSystem != nil {
		if err := m.FileSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSystem")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileSystem")
			}
			return err
		}
	}

	return nil
}

func (m *FlashBladeProtectionSource) validateStorageArray(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageArray) { // not required
		return nil
	}

	if m.StorageArray != nil {
		if err := m.StorageArray.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageArray")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageArray")
			}
			return err
		}
	}

	return nil
}

var flashBladeProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStorageArray","kFileSystem"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flashBladeProtectionSourceTypeTypePropEnum = append(flashBladeProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// FlashBladeProtectionSourceTypeKStorageArray captures enum value "kStorageArray"
	FlashBladeProtectionSourceTypeKStorageArray string = "kStorageArray"

	// FlashBladeProtectionSourceTypeKFileSystem captures enum value "kFileSystem"
	FlashBladeProtectionSourceTypeKFileSystem string = "kFileSystem"
)

// prop value enum
func (m *FlashBladeProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flashBladeProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FlashBladeProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this flash blade protection source based on the context it is used
func (m *FlashBladeProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileSystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageArray(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlashBladeProtectionSource) contextValidateFileSystem(ctx context.Context, formats strfmt.Registry) error {

	if m.FileSystem != nil {

		if swag.IsZero(m.FileSystem) { // not required
			return nil
		}

		if err := m.FileSystem.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSystem")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileSystem")
			}
			return err
		}
	}

	return nil
}

func (m *FlashBladeProtectionSource) contextValidateStorageArray(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageArray != nil {

		if swag.IsZero(m.StorageArray) { // not required
			return nil
		}

		if err := m.StorageArray.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageArray")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageArray")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlashBladeProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlashBladeProtectionSource) UnmarshalBinary(b []byte) error {
	var res FlashBladeProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
