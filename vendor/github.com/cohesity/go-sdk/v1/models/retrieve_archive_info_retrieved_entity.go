// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RetrieveArchiveInfoRetrievedEntity Proto to define the info about the entity that was retrieved from an
// archive.
//
// swagger:model RetrieveArchiveInfo_RetrievedEntity
type RetrieveArchiveInfoRetrievedEntity struct {

	// Number of physical bytes transferred over wire for this entity.
	BytesTransferred *int64 `json:"bytesTransferred,omitempty"`

	// Time in microseconds when retrieve of this entity finished or failed.
	EndTimestampUsecs *int64 `json:"endTimestampUsecs,omitempty"`

	// The entity that was retrieved.
	Entity *EntityProto `json:"entity,omitempty"`

	// If the retrieve of the 'entity' failed, this field may contain the cause
	// of the failure.
	Error *ErrorProto `json:"error,omitempty"`

	// Number of logical bytes transferred so far.
	LogicalBytesTransferred *int64 `json:"logicalBytesTransferred,omitempty"`

	// Total logical size of this entity.
	LogicalSizeBytes *int64 `json:"logicalSizeBytes,omitempty"`

	// The path relative to the root path of the retrieval task progress
	// monitor of this entity progress monitor.
	ProgressMonitorTaskPath *string `json:"progressMonitorTaskPath,omitempty"`

	// The path relative to the root of the file system where the snapshot of
	// this entity was retrieved/copied to.
	RelativeSnapshotDir *string `json:"relativeSnapshotDir,omitempty"`

	// Time in microseconds when retrieve of this entity started.
	StartTimestampUsecs *int64 `json:"startTimestampUsecs,omitempty"`

	// The retrieval status of this entity.
	Status *int32 `json:"status,omitempty"`

	// If this is part of an uptier restore task, this will denote how much
	// time the retrieved entity is present in the hot-tiers.
	UptierExpiryTimestampUsecs *int64 `json:"uptierExpiryTimestampUsecs,omitempty"`
}

// Validate validates this retrieve archive info retrieved entity
func (m *RetrieveArchiveInfoRetrievedEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveArchiveInfoRetrievedEntity) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *RetrieveArchiveInfoRetrievedEntity) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this retrieve archive info retrieved entity based on the context it is used
func (m *RetrieveArchiveInfoRetrievedEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveArchiveInfoRetrievedEntity) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *RetrieveArchiveInfoRetrievedEntity) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveArchiveInfoRetrievedEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveArchiveInfoRetrievedEntity) UnmarshalBinary(b []byte) error {
	var res RetrieveArchiveInfoRetrievedEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
