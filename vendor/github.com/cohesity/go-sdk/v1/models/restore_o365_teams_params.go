// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreO365TeamsParams restore o365 teams params
//
// swagger:model RestoreO365TeamsParams
type RestoreO365TeamsParams struct {

	// Bool which specifies, if we have to create a new team if it doesn't
	// exist.
	CreateNewTeam *bool `json:"createNewTeam,omitempty"`

	// List of teams getting restored.
	MsTeamsVec []*RestoreO365TeamsParamsMSTeamInfo `json:"msTeamsVec"`

	// Bool which specifies, if the original members/owners should be part of the
	// newly created target team.
	RestoreOriginalOwnersMembers *bool `json:"restoreOriginalOwnersMembers,omitempty"`

	// Whether or not all teams are restored to original location.
	RestoreToOriginal *bool `json:"restoreToOriginal,omitempty"`

	// Bool which specifies if SP lists needs to be restored.
	ShouldRestoreLists *bool `json:"shouldRestoreLists,omitempty"`

	// target channel
	TargetChannel *RestoreO365TeamsParamsTargetChannel `json:"targetChannel,omitempty"`

	// Specifies the target ms team entity info and the team listed in the
	// ms_teams_vec will be restored to this team if restore_to_original
	// is false and create_new_team is false.
	TargetMsTeamEntity *EntityProto `json:"targetMsTeamEntity,omitempty"`

	// Target team in case restore_to_original is false.
	TargetTeam *string `json:"targetTeam,omitempty"`

	// The display name for the target team. Specified when a new team needs to
	// be created.
	TargetTeamName *string `json:"targetTeamName,omitempty"`

	// The addtional team owner info for the specified by target team.
	TargetTeamOwner *string `json:"targetTeamOwner,omitempty"`

	// The addtional team owner entity info for the specified by target team.
	TargetTeamOwnerEntity *EntityProto `json:"targetTeamOwnerEntity,omitempty"`
}

// Validate validates this restore o365 teams params
func (m *RestoreO365TeamsParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMsTeamsVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetMsTeamEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetTeamOwnerEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreO365TeamsParams) validateMsTeamsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.MsTeamsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.MsTeamsVec); i++ {
		if swag.IsZero(m.MsTeamsVec[i]) { // not required
			continue
		}

		if m.MsTeamsVec[i] != nil {
			if err := m.MsTeamsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("msTeamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("msTeamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreO365TeamsParams) validateTargetChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetChannel) { // not required
		return nil
	}

	if m.TargetChannel != nil {
		if err := m.TargetChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetChannel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetChannel")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreO365TeamsParams) validateTargetMsTeamEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetMsTeamEntity) { // not required
		return nil
	}

	if m.TargetMsTeamEntity != nil {
		if err := m.TargetMsTeamEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetMsTeamEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetMsTeamEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreO365TeamsParams) validateTargetTeamOwnerEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetTeamOwnerEntity) { // not required
		return nil
	}

	if m.TargetTeamOwnerEntity != nil {
		if err := m.TargetTeamOwnerEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetTeamOwnerEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetTeamOwnerEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore o365 teams params based on the context it is used
func (m *RestoreO365TeamsParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMsTeamsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetMsTeamEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetTeamOwnerEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreO365TeamsParams) contextValidateMsTeamsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MsTeamsVec); i++ {

		if m.MsTeamsVec[i] != nil {

			if swag.IsZero(m.MsTeamsVec[i]) { // not required
				return nil
			}

			if err := m.MsTeamsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("msTeamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("msTeamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreO365TeamsParams) contextValidateTargetChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetChannel != nil {

		if swag.IsZero(m.TargetChannel) { // not required
			return nil
		}

		if err := m.TargetChannel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetChannel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetChannel")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreO365TeamsParams) contextValidateTargetMsTeamEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetMsTeamEntity != nil {

		if swag.IsZero(m.TargetMsTeamEntity) { // not required
			return nil
		}

		if err := m.TargetMsTeamEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetMsTeamEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetMsTeamEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreO365TeamsParams) contextValidateTargetTeamOwnerEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetTeamOwnerEntity != nil {

		if swag.IsZero(m.TargetTeamOwnerEntity) { // not required
			return nil
		}

		if err := m.TargetTeamOwnerEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetTeamOwnerEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetTeamOwnerEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreO365TeamsParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreO365TeamsParams) UnmarshalBinary(b []byte) error {
	var res RestoreO365TeamsParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
