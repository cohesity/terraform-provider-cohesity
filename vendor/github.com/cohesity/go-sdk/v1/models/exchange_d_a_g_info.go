// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExchangeDAGInfo Contains information about a Database Availability Group (aka DAG).
//
// This information is constructed by magneto based on the Exchange
// information returned by the agent for each exchange node.
// See https://bit.ly/2JBN3uF for DAG details.
//
// swagger:model ExchangeDAGInfo
type ExchangeDAGInfo struct {

	// DAG backup preference.
	BackupPreference *ExchangeDAGBackupPreference `json:"backupPreference,omitempty"`

	// Exchange DAG identity.
	ID *ExchangeDAGIdentity `json:"id,omitempty"`

	// All the servers that belong to this DAG.
	ServerVec []*ExchangeServer `json:"serverVec"`
}

// Validate validates this exchange d a g info
func (m *ExchangeDAGInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeDAGInfo) validateBackupPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPreference) { // not required
		return nil
	}

	if m.BackupPreference != nil {
		if err := m.BackupPreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupPreference")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDAGInfo) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if m.ID != nil {
		if err := m.ID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDAGInfo) validateServerVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ServerVec); i++ {
		if swag.IsZero(m.ServerVec[i]) { // not required
			continue
		}

		if m.ServerVec[i] != nil {
			if err := m.ServerVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serverVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serverVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this exchange d a g info based on the context it is used
func (m *ExchangeDAGInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupPreference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeDAGInfo) contextValidateBackupPreference(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPreference != nil {

		if swag.IsZero(m.BackupPreference) { // not required
			return nil
		}

		if err := m.BackupPreference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupPreference")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDAGInfo) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if m.ID != nil {

		if swag.IsZero(m.ID) { // not required
			return nil
		}

		if err := m.ID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDAGInfo) contextValidateServerVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServerVec); i++ {

		if m.ServerVec[i] != nil {

			if swag.IsZero(m.ServerVec[i]) { // not required
				return nil
			}

			if err := m.ServerVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serverVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serverVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeDAGInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeDAGInfo) UnmarshalBinary(b []byte) error {
	var res ExchangeDAGInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
