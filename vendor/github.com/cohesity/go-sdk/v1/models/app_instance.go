// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppInstance App Instance.
//
// AppInstance provides application instance's information.
//
// swagger:model AppInstance
type AppInstance struct {

	// Specifies the token to access with the app.
	AppAccessToken *string `json:"appAccessToken,omitempty"`

	// Specifies unique id across all instances of all apps.
	AppInstanceID *int64 `json:"appInstanceId,omitempty"`

	// Specifies name of the app that is launched in this instance.
	AppName *string `json:"appName,omitempty"`

	// Specifies id of the app that is launched in this instance.
	AppUID *int64 `json:"appUid,omitempty"`

	// Specifies the version of the app that is launched in this instance.
	AppVersion *int64 `json:"appVersion,omitempty"`

	// Specifies timestamp (in microseconds) when the app instance was first
	// created.
	CreatedTimeUsecs *int64 `json:"createdTimeUsecs,omitempty"`

	// Specifies a unique identifier generated by the client to let the backend
	// identify retries of the app launch request.
	CreationUID *string `json:"creationUid,omitempty"`

	// Deployment parameters used to launch the app instance.
	DeploymentParameters *string `json:"deploymentParameters,omitempty"`

	// Specifies user configured description for the app instance.
	Description *string `json:"description,omitempty"`

	// Specifies version of the app provided by the developer.
	DevVersion *string `json:"devVersion,omitempty"`

	// Specifies duration (in microseconds) for which the app instance has run.
	DurationUsecs *int64 `json:"durationUsecs,omitempty"`

	// Specifies list of nodeports exposed by app instance.
	ExposedNodePorts []*NodePort `json:"exposedNodePorts"`

	// Specifies the failure reasons for the app
	FailureReasons []*FailureReason `json:"failureReasons"`

	// Specifies the reason the app instance is unhealthy. Only set if app
	// instance is unhealthy.
	HealthDetail *string `json:"healthDetail,omitempty"`

	// Specifies the current health status of the app instance.
	HealthStatus *int32 `json:"healthStatus,omitempty"`

	// Specifies app ui http config. If set to true, the App's UI uses https.
	// Otherwise it uses http.
	HTTPSUI *bool `json:"httpsUi,omitempty"`

	// namespace
	Namespace *string `json:"namespace,omitempty"`

	// Specifies the ip of the node which can be used to contact app instance
	// external services.
	NodeIP *string `json:"nodeIp,omitempty"`

	// Specifies the node port on which the app instance services external
	// requests.
	NodePort *int32 `json:"nodePort,omitempty"`

	// Specifies settings used to launch an app instance.
	Settings *AppInstanceSettings `json:"settings,omitempty"`

	// Specifies the current state of the app instance.
	// Specifies operational status of an app instance.
	// kInitializing - The app instance has been launched or resumed, but is not fully running yet.
	// kRunning - The app instance is running. Check health_status for the actual health.
	// kPausing - The app instance is being paused.
	// kPaused - The app instance has been paused.
	// kTerminating - The app instance is being terminated.
	// kTerminated -  The app instance has been terminated.
	// kFailed - The app instance has failed due to an unrecoverable error.
	// Enum: ["kInitializing","kRunning","kPausing","kPaused","kTerminating","kTerminated","kFailed"]
	State *string `json:"state,omitempty"`

	// Specifies the failure reason when the app instance's state is kFailed.
	StateDetail *string `json:"stateDetail,omitempty"`

	// Specifies UI Tag ClusterIP Service Ip Address
	UIClusterIPSvcAddr *string `json:"uiClusterIPSvcAddr,omitempty"`

	// Specifies UI Tag ClusterIP Service Port
	UIClusterIPSvcPort *int32 `json:"uiClusterIPSvcPort,omitempty"`

	// Specifies if the app instance is upgradable
	UpgradableNewerVersionPresent *bool `json:"upgradableNewerVersionPresent,omitempty"`

	// Specifies username and corresponding ssh key to be inserted into the VMs.
	UserSSHKey *UserSSHKey `json:"userSshKey,omitempty"`

	// Specifies list of all VM groups for this application. Each VM group
	// contains a list of VMs. Information needed for UI like the nodePort, the
	// port type etc. is stored for each VM.
	VMGroups []*VMGroup `json:"vmGroups"`
}

// Validate validates this app instance
func (m *AppInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExposedNodePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailureReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserSSHKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstance) validateExposedNodePorts(formats strfmt.Registry) error {
	if swag.IsZero(m.ExposedNodePorts) { // not required
		return nil
	}

	for i := 0; i < len(m.ExposedNodePorts); i++ {
		if swag.IsZero(m.ExposedNodePorts[i]) { // not required
			continue
		}

		if m.ExposedNodePorts[i] != nil {
			if err := m.ExposedNodePorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exposedNodePorts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exposedNodePorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstance) validateFailureReasons(formats strfmt.Registry) error {
	if swag.IsZero(m.FailureReasons) { // not required
		return nil
	}

	for i := 0; i < len(m.FailureReasons); i++ {
		if swag.IsZero(m.FailureReasons[i]) { // not required
			continue
		}

		if m.FailureReasons[i] != nil {
			if err := m.FailureReasons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failureReasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failureReasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstance) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

var appInstanceTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kInitializing","kRunning","kPausing","kPaused","kTerminating","kTerminated","kFailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appInstanceTypeStatePropEnum = append(appInstanceTypeStatePropEnum, v)
	}
}

const (

	// AppInstanceStateKInitializing captures enum value "kInitializing"
	AppInstanceStateKInitializing string = "kInitializing"

	// AppInstanceStateKRunning captures enum value "kRunning"
	AppInstanceStateKRunning string = "kRunning"

	// AppInstanceStateKPausing captures enum value "kPausing"
	AppInstanceStateKPausing string = "kPausing"

	// AppInstanceStateKPaused captures enum value "kPaused"
	AppInstanceStateKPaused string = "kPaused"

	// AppInstanceStateKTerminating captures enum value "kTerminating"
	AppInstanceStateKTerminating string = "kTerminating"

	// AppInstanceStateKTerminated captures enum value "kTerminated"
	AppInstanceStateKTerminated string = "kTerminated"

	// AppInstanceStateKFailed captures enum value "kFailed"
	AppInstanceStateKFailed string = "kFailed"
)

// prop value enum
func (m *AppInstance) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, appInstanceTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AppInstance) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) validateUserSSHKey(formats strfmt.Registry) error {
	if swag.IsZero(m.UserSSHKey) { // not required
		return nil
	}

	if m.UserSSHKey != nil {
		if err := m.UserSSHKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userSshKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userSshKey")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) validateVMGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.VMGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.VMGroups); i++ {
		if swag.IsZero(m.VMGroups[i]) { // not required
			continue
		}

		if m.VMGroups[i] != nil {
			if err := m.VMGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this app instance based on the context it is used
func (m *AppInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExposedNodePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailureReasons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserSSHKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstance) contextValidateExposedNodePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExposedNodePorts); i++ {

		if m.ExposedNodePorts[i] != nil {

			if swag.IsZero(m.ExposedNodePorts[i]) { // not required
				return nil
			}

			if err := m.ExposedNodePorts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exposedNodePorts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exposedNodePorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstance) contextValidateFailureReasons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FailureReasons); i++ {

		if m.FailureReasons[i] != nil {

			if swag.IsZero(m.FailureReasons[i]) { // not required
				return nil
			}

			if err := m.FailureReasons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failureReasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failureReasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstance) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {

		if swag.IsZero(m.Settings) { // not required
			return nil
		}

		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidateUserSSHKey(ctx context.Context, formats strfmt.Registry) error {

	if m.UserSSHKey != nil {

		if swag.IsZero(m.UserSSHKey) { // not required
			return nil
		}

		if err := m.UserSSHKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userSshKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userSshKey")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidateVMGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMGroups); i++ {

		if m.VMGroups[i] != nil {

			if swag.IsZero(m.VMGroups[i]) { // not required
				return nil
			}

			if err := m.VMGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstance) UnmarshalBinary(b []byte) error {
	var res AppInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
