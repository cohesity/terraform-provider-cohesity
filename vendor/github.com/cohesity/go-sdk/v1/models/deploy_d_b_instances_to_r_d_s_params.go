// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeployDBInstancesToRDSParams Contains RDS specfic options that can be supplied while restoring the RDS
// DB instance.
//
// swagger:model DeployDBInstancesToRDSParams
type DeployDBInstancesToRDSParams struct {

	// Whether to enable auto minor version upgrade in the restored DB.
	AutoMinorVersionUpgrade *bool `json:"autoMinorVersionUpgrade,omitempty"`

	// Entity representing the availability zone to use while restoring the DB.
	AvailabilityZone *EntityProto `json:"availabilityZone,omitempty"`

	// Whether to enable copying of tags to snapshots of the DB.
	CopyTagsToSnapshots *bool `json:"copyTagsToSnapshots,omitempty"`

	// The DB instance identifier to use for the restored DB. This field is
	// required.
	DbInstanceID *string `json:"dbInstanceId,omitempty"`

	// Entity representing the RDS option group to use while restoring the DB.
	DbOptionGroup *EntityProto `json:"dbOptionGroup,omitempty"`

	// Entity representing the RDS parameter group to use while restoring the DB.
	DbParameterGroup *EntityProto `json:"dbParameterGroup,omitempty"`

	// Port to use for the DB in the restored RDS instance.
	DbPort *int32 `json:"dbPort,omitempty"`

	// Whether to enable IAM authentication for the DB.
	IamDbAuthentication *bool `json:"iamDbAuthentication,omitempty"`

	// Whether this is a multi-az deployment or not.
	MultiAzDeployment *bool `json:"multiAzDeployment,omitempty"`

	// If this is set, we will restore DB to the specified point in time.
	PointInTimeParams *DeployDBInstancesToRDSParamsPointInTimeRestoreParams `json:"pointInTimeParams,omitempty"`

	// Whether this DB will be publicly accessible or not.
	PublicAccessibility *bool `json:"publicAccessibility,omitempty"`
}

// Validate validates this deploy d b instances to r d s params
func (m *DeployDBInstancesToRDSParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbOptionGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbParameterGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePointInTimeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployDBInstancesToRDSParams) validateAvailabilityZone(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailabilityZone) { // not required
		return nil
	}

	if m.AvailabilityZone != nil {
		if err := m.AvailabilityZone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilityZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilityZone")
			}
			return err
		}
	}

	return nil
}

func (m *DeployDBInstancesToRDSParams) validateDbOptionGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.DbOptionGroup) { // not required
		return nil
	}

	if m.DbOptionGroup != nil {
		if err := m.DbOptionGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbOptionGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbOptionGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployDBInstancesToRDSParams) validateDbParameterGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.DbParameterGroup) { // not required
		return nil
	}

	if m.DbParameterGroup != nil {
		if err := m.DbParameterGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbParameterGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbParameterGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployDBInstancesToRDSParams) validatePointInTimeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PointInTimeParams) { // not required
		return nil
	}

	if m.PointInTimeParams != nil {
		if err := m.PointInTimeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointInTimeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pointInTimeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deploy d b instances to r d s params based on the context it is used
func (m *DeployDBInstancesToRDSParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailabilityZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDbOptionGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDbParameterGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePointInTimeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployDBInstancesToRDSParams) contextValidateAvailabilityZone(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailabilityZone != nil {

		if swag.IsZero(m.AvailabilityZone) { // not required
			return nil
		}

		if err := m.AvailabilityZone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilityZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilityZone")
			}
			return err
		}
	}

	return nil
}

func (m *DeployDBInstancesToRDSParams) contextValidateDbOptionGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.DbOptionGroup != nil {

		if swag.IsZero(m.DbOptionGroup) { // not required
			return nil
		}

		if err := m.DbOptionGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbOptionGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbOptionGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployDBInstancesToRDSParams) contextValidateDbParameterGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.DbParameterGroup != nil {

		if swag.IsZero(m.DbParameterGroup) { // not required
			return nil
		}

		if err := m.DbParameterGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbParameterGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbParameterGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployDBInstancesToRDSParams) contextValidatePointInTimeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PointInTimeParams != nil {

		if swag.IsZero(m.PointInTimeParams) { // not required
			return nil
		}

		if err := m.PointInTimeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointInTimeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pointInTimeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployDBInstancesToRDSParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployDBInstancesToRDSParams) UnmarshalBinary(b []byte) error {
	var res DeployDBInstancesToRDSParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
