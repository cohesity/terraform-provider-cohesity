// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ThrottlingPolicyStorageArraySnapshotThrottlingPolicy throttling policy storage array snapshot throttling policy
//
// swagger:model ThrottlingPolicy_StorageArraySnapshotThrottlingPolicy
type ThrottlingPolicyStorageArraySnapshotThrottlingPolicy struct {

	// If set to true, the max snapshots for this volume will be according to
	// max_snapshot_config.
	// If set to false, the max snapshots for this volume will be uncapped.
	// If not set, there is not max snapshot override for this volume.
	IsMaxSnapshotsConfigEnabled *bool `json:"isMaxSnapshotsConfigEnabled,omitempty"`

	// If set to true, the max space for this volume will be according to
	// max_space_config.
	// If set to false, the max space for this volume will be uncapped.
	// If not set, there is not max snapshot override for this volume.
	IsMaxSpaceConfigEnabled *bool `json:"isMaxSpaceConfigEnabled,omitempty"`

	// This specifies the storage array snapshot max snaps config for this
	// volume/lun. Valid only when is_max_snapshots_config_enabled is true.
	MaxSnapshotConfig *ThrottlingPolicyStorageArraySnapshotMaxSnapshotConfig `json:"maxSnapshotConfig,omitempty"`

	// This specifies the storage array snapshot fre space config for this
	// volume/lun. Valid only when is_max_space_config_enabled is true.
	MaxSpaceConfig *ThrottlingPolicyStorageArraySnapshotMaxSpaceConfig `json:"maxSpaceConfig,omitempty"`

	// Volume/lun entity that the storage array snapshot policy apply to.
	StorageEntity *EntityProto `json:"storageEntity,omitempty"`
}

// Validate validates this throttling policy storage array snapshot throttling policy
func (m *ThrottlingPolicyStorageArraySnapshotThrottlingPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxSnapshotConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSpaceConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThrottlingPolicyStorageArraySnapshotThrottlingPolicy) validateMaxSnapshotConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxSnapshotConfig) { // not required
		return nil
	}

	if m.MaxSnapshotConfig != nil {
		if err := m.MaxSnapshotConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ThrottlingPolicyStorageArraySnapshotThrottlingPolicy) validateMaxSpaceConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxSpaceConfig) { // not required
		return nil
	}

	if m.MaxSpaceConfig != nil {
		if err := m.MaxSpaceConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSpaceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSpaceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ThrottlingPolicyStorageArraySnapshotThrottlingPolicy) validateStorageEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageEntity) { // not required
		return nil
	}

	if m.StorageEntity != nil {
		if err := m.StorageEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this throttling policy storage array snapshot throttling policy based on the context it is used
func (m *ThrottlingPolicyStorageArraySnapshotThrottlingPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaxSnapshotConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxSpaceConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThrottlingPolicyStorageArraySnapshotThrottlingPolicy) contextValidateMaxSnapshotConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxSnapshotConfig != nil {

		if swag.IsZero(m.MaxSnapshotConfig) { // not required
			return nil
		}

		if err := m.MaxSnapshotConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ThrottlingPolicyStorageArraySnapshotThrottlingPolicy) contextValidateMaxSpaceConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxSpaceConfig != nil {

		if swag.IsZero(m.MaxSpaceConfig) { // not required
			return nil
		}

		if err := m.MaxSpaceConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSpaceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSpaceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ThrottlingPolicyStorageArraySnapshotThrottlingPolicy) contextValidateStorageEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageEntity != nil {

		if swag.IsZero(m.StorageEntity) { // not required
			return nil
		}

		if err := m.StorageEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThrottlingPolicyStorageArraySnapshotThrottlingPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThrottlingPolicyStorageArraySnapshotThrottlingPolicy) UnmarshalBinary(b []byte) error {
	var res ThrottlingPolicyStorageArraySnapshotThrottlingPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
