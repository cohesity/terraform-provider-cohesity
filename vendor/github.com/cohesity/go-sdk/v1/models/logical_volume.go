// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogicalVolume Logical Volume.
//
// Specifies attributes for a kLVM (Linux) or kLDM (Windows) filesystem.
//
// swagger:model LogicalVolume
type LogicalVolume struct {

	// Specifies the device tree defining how to combine partitions to create
	// this logical volume.
	DeviceRootNode *DeviceTreeDetails `json:"deviceRootNode,omitempty"`

	// Specifies the group name of the logical volume.
	GroupName *string `json:"groupName,omitempty"`

	// Specifies the group uuid of the logical volume.
	GroupUUID *string `json:"groupUuid,omitempty"`

	// Specifies the name of the logical volume.
	Name *string `json:"name,omitempty"`

	// Specifies the uuid of the logical volume.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this logical volume
func (m *LogicalVolume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceRootNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogicalVolume) validateDeviceRootNode(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceRootNode) { // not required
		return nil
	}

	if m.DeviceRootNode != nil {
		if err := m.DeviceRootNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceRootNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceRootNode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this logical volume based on the context it is used
func (m *LogicalVolume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceRootNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogicalVolume) contextValidateDeviceRootNode(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceRootNode != nil {

		if swag.IsZero(m.DeviceRootNode) { // not required
			return nil
		}

		if err := m.DeviceRootNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceRootNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceRootNode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogicalVolume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogicalVolume) UnmarshalBinary(b []byte) error {
	var res LogicalVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
