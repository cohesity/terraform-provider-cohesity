// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchedulingPolicyProto Message that specifies the scheduling policy for a backup job.
//
// swagger:model SchedulingPolicyProto
type SchedulingPolicyProto struct {

	// Set if periodicity is kContinuous.
	ContinuousSchedule *SchedulingPolicyProtoContinuousSchedule `json:"continuousSchedule,omitempty"`

	// Set if periodicity is kDaily.
	DailySchedule *SchedulingPolicyProtoDailySchedule `json:"dailySchedule,omitempty"`

	// Set if periodicity is kDate.
	DateSchedule *SchedulingPolicyProtoDateSchedule `json:"dateSchedule,omitempty"`

	// Set if periodicity is kMonthly.
	MonthlySchedule *SchedulingPolicyProtoMonthlySchedule `json:"monthlySchedule,omitempty"`

	// Determines how often the job should be run.
	Periodicity *int32 `json:"periodicity,omitempty"`

	// Set if periodicity is kContinuousRPO.
	RpoSchedule *SchedulingPolicyProtoRPOSchedule `json:"rpoSchedule,omitempty"`

	// Set if periodicity is kYearly.
	YearlySchedule *SchedulingPolicyProtoYearlySchedule `json:"yearlySchedule,omitempty"`
}

// Validate validates this scheduling policy proto
func (m *SchedulingPolicyProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContinuousSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailySchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthlySchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRpoSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYearlySchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulingPolicyProto) validateContinuousSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.ContinuousSchedule) { // not required
		return nil
	}

	if m.ContinuousSchedule != nil {
		if err := m.ContinuousSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuousSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("continuousSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicyProto) validateDailySchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.DailySchedule) { // not required
		return nil
	}

	if m.DailySchedule != nil {
		if err := m.DailySchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dailySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dailySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicyProto) validateDateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.DateSchedule) { // not required
		return nil
	}

	if m.DateSchedule != nil {
		if err := m.DateSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dateSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dateSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicyProto) validateMonthlySchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.MonthlySchedule) { // not required
		return nil
	}

	if m.MonthlySchedule != nil {
		if err := m.MonthlySchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthlySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthlySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicyProto) validateRpoSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.RpoSchedule) { // not required
		return nil
	}

	if m.RpoSchedule != nil {
		if err := m.RpoSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rpoSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rpoSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicyProto) validateYearlySchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.YearlySchedule) { // not required
		return nil
	}

	if m.YearlySchedule != nil {
		if err := m.YearlySchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("yearlySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("yearlySchedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scheduling policy proto based on the context it is used
func (m *SchedulingPolicyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContinuousSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDailySchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonthlySchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRpoSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateYearlySchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulingPolicyProto) contextValidateContinuousSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.ContinuousSchedule != nil {

		if swag.IsZero(m.ContinuousSchedule) { // not required
			return nil
		}

		if err := m.ContinuousSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuousSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("continuousSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicyProto) contextValidateDailySchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.DailySchedule != nil {

		if swag.IsZero(m.DailySchedule) { // not required
			return nil
		}

		if err := m.DailySchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dailySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dailySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicyProto) contextValidateDateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.DateSchedule != nil {

		if swag.IsZero(m.DateSchedule) { // not required
			return nil
		}

		if err := m.DateSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dateSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dateSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicyProto) contextValidateMonthlySchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.MonthlySchedule != nil {

		if swag.IsZero(m.MonthlySchedule) { // not required
			return nil
		}

		if err := m.MonthlySchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthlySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthlySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicyProto) contextValidateRpoSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.RpoSchedule != nil {

		if swag.IsZero(m.RpoSchedule) { // not required
			return nil
		}

		if err := m.RpoSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rpoSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rpoSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicyProto) contextValidateYearlySchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.YearlySchedule != nil {

		if swag.IsZero(m.YearlySchedule) { // not required
			return nil
		}

		if err := m.YearlySchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("yearlySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("yearlySchedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchedulingPolicyProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulingPolicyProto) UnmarshalBinary(b []byte) error {
	var res SchedulingPolicyProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
