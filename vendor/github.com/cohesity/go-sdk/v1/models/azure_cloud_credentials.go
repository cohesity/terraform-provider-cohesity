// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureCloudCredentials Azure Cloud Credentials.
//
// Specifies the cloud credentials to connect to a Microsoft
// Azure service account.
//
// swagger:model AzureCloudCredentials
type AzureCloudCredentials struct {

	// Specifies the auth method used for the request
	// 'kAzureAuthNone' indicates no authentication.
	// 'kAzureClientSecret' indicates a client authentication.
	// 'kAzureManagedIdentity' indicates a Azure based authentication.
	// 'kUseHelios' indicates a Helios authentication.
	// Enum: ["kAzureAuthNone","kAzureClientSecret","kAzureManagedIdentity","kUseHelios"]
	AuthMethod *string `json:"authMethod,omitempty"`

	// Specifies the client id of the managed identity assigned to the cluster.
	// This is used only for clusters running as Azure VMs where authentication
	// is done using AD.
	ClientID *string `json:"clientId,omitempty"`

	// Specifies if write once read many (WORM) protection is enabled for the
	// Azure container or not.
	IsWormEnabled *bool `json:"isWormEnabled,omitempty"`

	// Specifies the region for Azure account. This is only populated for
	// FortKnox vaults.
	Region *string `json:"region,omitempty"`

	// Specifies the access key to use when accessing a storage tier
	// in a Azure cloud service.
	StorageAccessKey *string `json:"storageAccessKey,omitempty"`

	// Specifies the account name to use when accessing a storage tier
	// in a Azure cloud service.
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// Specifies the storage class of Azure.
	// AzureTierType specifies the storage class for Azure.
	// 'kAzureTierHot' indicates a tier type of Azure properties that is accessed
	// frequently.
	// 'kAzureTierCool' indicates a tier type of Azure properties that is
	// accessed less frequently, and stored for at least 30 days.
	// 'kAzureTierArchive' indicates a tier type of Azure properties that is
	// accessed rarely and stored for at least 180 days.
	// Enum: ["kAzureTierHot","kAzureTierCool","kAzureTierArchive"]
	TierType *string `json:"tierType,omitempty"`

	// Specifies the list of all tiers for Amazon account.
	Tiers []string `json:"tiers"`
}

// Validate validates this azure cloud credentials
func (m *AzureCloudCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var azureCloudCredentialsTypeAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAzureAuthNone","kAzureClientSecret","kAzureManagedIdentity","kUseHelios"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureCloudCredentialsTypeAuthMethodPropEnum = append(azureCloudCredentialsTypeAuthMethodPropEnum, v)
	}
}

const (

	// AzureCloudCredentialsAuthMethodKAzureAuthNone captures enum value "kAzureAuthNone"
	AzureCloudCredentialsAuthMethodKAzureAuthNone string = "kAzureAuthNone"

	// AzureCloudCredentialsAuthMethodKAzureClientSecret captures enum value "kAzureClientSecret"
	AzureCloudCredentialsAuthMethodKAzureClientSecret string = "kAzureClientSecret"

	// AzureCloudCredentialsAuthMethodKAzureManagedIdentity captures enum value "kAzureManagedIdentity"
	AzureCloudCredentialsAuthMethodKAzureManagedIdentity string = "kAzureManagedIdentity"

	// AzureCloudCredentialsAuthMethodKUseHelios captures enum value "kUseHelios"
	AzureCloudCredentialsAuthMethodKUseHelios string = "kUseHelios"
)

// prop value enum
func (m *AzureCloudCredentials) validateAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureCloudCredentialsTypeAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCloudCredentials) validateAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthMethodEnum("authMethod", "body", *m.AuthMethod); err != nil {
		return err
	}

	return nil
}

var azureCloudCredentialsTypeTierTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAzureTierHot","kAzureTierCool","kAzureTierArchive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureCloudCredentialsTypeTierTypePropEnum = append(azureCloudCredentialsTypeTierTypePropEnum, v)
	}
}

const (

	// AzureCloudCredentialsTierTypeKAzureTierHot captures enum value "kAzureTierHot"
	AzureCloudCredentialsTierTypeKAzureTierHot string = "kAzureTierHot"

	// AzureCloudCredentialsTierTypeKAzureTierCool captures enum value "kAzureTierCool"
	AzureCloudCredentialsTierTypeKAzureTierCool string = "kAzureTierCool"

	// AzureCloudCredentialsTierTypeKAzureTierArchive captures enum value "kAzureTierArchive"
	AzureCloudCredentialsTierTypeKAzureTierArchive string = "kAzureTierArchive"
)

// prop value enum
func (m *AzureCloudCredentials) validateTierTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureCloudCredentialsTypeTierTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCloudCredentials) validateTierType(formats strfmt.Registry) error {
	if swag.IsZero(m.TierType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTierTypeEnum("tierType", "body", *m.TierType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure cloud credentials based on context it is used
func (m *AzureCloudCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureCloudCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCloudCredentials) UnmarshalBinary(b []byte) error {
	var res AzureCloudCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
