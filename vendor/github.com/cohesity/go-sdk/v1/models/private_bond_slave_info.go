// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateBondSlaveInfo private bond slave info
//
// swagger:model PrivateBondSlaveInfo
type PrivateBondSlaveInfo struct {

	// Bond slave link state.
	LinkState *string `json:"linkState,omitempty"`

	// Mac address of the bond slave interface.
	MacAddr *string `json:"macAddr,omitempty"`

	// Bond slave name.
	Name *string `json:"name,omitempty"`

	// Bond slaves slot info.
	Slot *string `json:"slot,omitempty"`

	// Bond slave Speed.
	Speed *string `json:"speed,omitempty"`

	// Interface Stats.
	Stats *PrivateInterfaceStats `json:"stats,omitempty"`

	// Bond slave uplink switch info.
	UplinkInfo *PrivateUplinkSwitchInfo `json:"uplinkInfo,omitempty"`
}

// Validate validates this private bond slave info
func (m *PrivateBondSlaveInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUplinkInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateBondSlaveInfo) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateBondSlaveInfo) validateUplinkInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.UplinkInfo) { // not required
		return nil
	}

	if m.UplinkInfo != nil {
		if err := m.UplinkInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uplinkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uplinkInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private bond slave info based on the context it is used
func (m *PrivateBondSlaveInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUplinkInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateBondSlaveInfo) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateBondSlaveInfo) contextValidateUplinkInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.UplinkInfo != nil {

		if swag.IsZero(m.UplinkInfo) { // not required
			return nil
		}

		if err := m.UplinkInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uplinkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uplinkInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateBondSlaveInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateBondSlaveInfo) UnmarshalBinary(b []byte) error {
	var res PrivateBondSlaveInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
