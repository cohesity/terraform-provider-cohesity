// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MountVolumesParams Contains information needed when mounting volumes.
//
// swagger:model MountVolumesParams
type MountVolumesParams struct {

	// Environment specific additional params if any.
	// This is populated for HyperV environments.
	HypervParams *MountVolumesHyperVParams `json:"hypervParams,omitempty"`

	// Allows the caller to force the Agent to perform a read-only mount. This is
	// not usually required and we want to give customers the ability to mutate
	// this mount for test/dev purposes.
	ReadonlyMount *bool `json:"readonlyMount,omitempty"`

	// Target entity where the volumes are being mounted.
	// NOTE: The source entity from which the backup was done and the
	// target entity must be of the same type, i.e if the source entity is a
	// VMware VM, then the target entity should be a VMware VM as well.
	TargetEntity *EntityProto `json:"targetEntity,omitempty"`

	// Whether this will use an existing agent on the target vm to do a restore
	// operation.
	UseExistingAgent *bool `json:"useExistingAgent,omitempty"`

	// Environment specific additional params if any.
	// This is populated for VMware environments.
	VmwareParams *MountVolumesVMwareParams `json:"vmwareParams,omitempty"`

	// Optional names of volumes that need to be mounted. The names here
	// correspond to the volume names obtained by Iris from Yoda as part of
	// VMVolumeInfo call.
	// NOTE: If this is not specified then all volumes that are part of the
	// server will be mounted on the target entity.
	VolumeNameVec []string `json:"volumeNameVec"`
}

// Validate validates this mount volumes params
func (m *MountVolumesParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHypervParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountVolumesParams) validateHypervParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParams) { // not required
		return nil
	}

	if m.HypervParams != nil {
		if err := m.HypervParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesParams) validateTargetEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetEntity) { // not required
		return nil
	}

	if m.TargetEntity != nil {
		if err := m.TargetEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetEntity")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesParams) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mount volumes params based on the context it is used
func (m *MountVolumesParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHypervParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountVolumesParams) contextValidateHypervParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParams != nil {

		if swag.IsZero(m.HypervParams) { // not required
			return nil
		}

		if err := m.HypervParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesParams) contextValidateTargetEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetEntity != nil {

		if swag.IsZero(m.TargetEntity) { // not required
			return nil
		}

		if err := m.TargetEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetEntity")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesParams) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountVolumesParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountVolumesParams) UnmarshalBinary(b []byte) error {
	var res MountVolumesParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
