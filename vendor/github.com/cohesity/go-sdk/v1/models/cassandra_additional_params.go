// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CassandraAdditionalParams Contains additional parameters required by the agents to backup data from
// Cassandra.
//
// swagger:model CassandraAdditionalParams
type CassandraAdditionalParams struct {

	// Cassandra classpath suffix.
	CassandraClasspathSuffix *string `json:"cassandraClasspathSuffix,omitempty"`

	// Required in compaction.
	CassandraPartitioner *string `json:"cassandraPartitioner,omitempty"`

	// Cassandra and DSE Versions.
	// Discovery code will attempt to discover the versions.
	CassandraVersion *string `json:"cassandraVersion,omitempty"`

	// Commit Log Backup location used for PITR feature
	CommitLogBackupLocation *string `json:"commitLogBackupLocation,omitempty"`

	// Data center information is required for backup and recovery.
	DataCenterVec []string `json:"dataCenterVec"`

	// In case this Cassandra has a Solr node.
	DseSolrInfo *DSESolrInfo `json:"dseSolrInfo,omitempty"`

	// dse version
	DseVersion *string `json:"dseVersion,omitempty"`

	// Map of nodes to tiered storage directories
	TieredStorageDirsMap []*NodeToTieredStorageDirectoriesMap `json:"tieredStorageDirsMap"`
}

// Validate validates this cassandra additional params
func (m *CassandraAdditionalParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDseSolrInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTieredStorageDirsMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraAdditionalParams) validateDseSolrInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DseSolrInfo) { // not required
		return nil
	}

	if m.DseSolrInfo != nil {
		if err := m.DseSolrInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dseSolrInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dseSolrInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraAdditionalParams) validateTieredStorageDirsMap(formats strfmt.Registry) error {
	if swag.IsZero(m.TieredStorageDirsMap) { // not required
		return nil
	}

	for i := 0; i < len(m.TieredStorageDirsMap); i++ {
		if swag.IsZero(m.TieredStorageDirsMap[i]) { // not required
			continue
		}

		if m.TieredStorageDirsMap[i] != nil {
			if err := m.TieredStorageDirsMap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tieredStorageDirsMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tieredStorageDirsMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cassandra additional params based on the context it is used
func (m *CassandraAdditionalParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDseSolrInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTieredStorageDirsMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraAdditionalParams) contextValidateDseSolrInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DseSolrInfo != nil {

		if swag.IsZero(m.DseSolrInfo) { // not required
			return nil
		}

		if err := m.DseSolrInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dseSolrInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dseSolrInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraAdditionalParams) contextValidateTieredStorageDirsMap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TieredStorageDirsMap); i++ {

		if m.TieredStorageDirsMap[i] != nil {

			if swag.IsZero(m.TieredStorageDirsMap[i]) { // not required
				return nil
			}

			if err := m.TieredStorageDirsMap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tieredStorageDirsMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tieredStorageDirsMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CassandraAdditionalParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraAdditionalParams) UnmarshalBinary(b []byte) error {
	var res CassandraAdditionalParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
