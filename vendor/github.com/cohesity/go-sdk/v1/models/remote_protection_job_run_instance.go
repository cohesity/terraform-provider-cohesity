// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoteProtectionJobRunInstance Remote Protection Job Run Instance.
//
// Specifies details about one Job Run (Snapshot) archived to a remote Vault
// that was captured by a Protection Job.
//
// swagger:model RemoteProtectionJobRunInstance
type RemoteProtectionJobRunInstance struct {

	// Archive Task Uid.
	//
	// Specifies the globally unique id of the archival task that archived
	// the Snapshot to the Vault.
	ArchiveTaskUID struct {
		UniversalID
	} `json:"archiveTaskUid,omitempty"`

	// Specifies the version of the archive.
	ArchiveVersion *int32 `json:"archiveVersion,omitempty"`

	// Specifies the time when the archive expires.
	// This time is recorded as a Unix epoch Timestamp (in microseconds).
	ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

	// Specifies the size of the index for the archive.
	IndexSizeBytes *int64 `json:"indexSizeBytes,omitempty"`

	// Specifies the instance id of the Job Run task capturing the Snapshot.
	JobRunID *int64 `json:"jobRunId,omitempty"`

	// Specifies whether a full set of metadata is available now.
	MetadataComplete *bool `json:"metadataComplete,omitempty"`

	// Specifies the run type.
	// 'kRegular' indicates a incremental (CBT) backup. Incremental backups
	// utilizing CBT (if supported) are captured of the target protection objects.
	// The first run of a kRegular schedule captures all the blocks.
	// 'kFull' indicates a full (no CBT) backup. A complete backup
	// (all blocks) of the target protection objects are always captured and
	// Change Block Tracking (CBT) is not utilized.
	// 'kLog' indicates a Database Log backup. Capture the database
	// transaction logs to allow rolling back to a specific point in time.
	// 'kSystem' indicates a system backup. System backups are used to do
	// bare metal recovery of the system to a specific point in time.
	// Enum: ["kRegular","kFull","kLog","kSystem"]
	RunType *string `json:"runType,omitempty"`

	// Specify the time the Snapshot was captured as a Unix epoch Timestamp (in
	// microseconds).
	SnapshotTimeUsecs *int64 `json:"snapshotTimeUsecs,omitempty"`
}

// Validate validates this remote protection job run instance
func (m *RemoteProtectionJobRunInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveTaskUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteProtectionJobRunInstance) validateArchiveTaskUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchiveTaskUID) { // not required
		return nil
	}

	return nil
}

var remoteProtectionJobRunInstanceTypeRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kFull","kLog","kSystem"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remoteProtectionJobRunInstanceTypeRunTypePropEnum = append(remoteProtectionJobRunInstanceTypeRunTypePropEnum, v)
	}
}

const (

	// RemoteProtectionJobRunInstanceRunTypeKRegular captures enum value "kRegular"
	RemoteProtectionJobRunInstanceRunTypeKRegular string = "kRegular"

	// RemoteProtectionJobRunInstanceRunTypeKFull captures enum value "kFull"
	RemoteProtectionJobRunInstanceRunTypeKFull string = "kFull"

	// RemoteProtectionJobRunInstanceRunTypeKLog captures enum value "kLog"
	RemoteProtectionJobRunInstanceRunTypeKLog string = "kLog"

	// RemoteProtectionJobRunInstanceRunTypeKSystem captures enum value "kSystem"
	RemoteProtectionJobRunInstanceRunTypeKSystem string = "kSystem"
)

// prop value enum
func (m *RemoteProtectionJobRunInstance) validateRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remoteProtectionJobRunInstanceTypeRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RemoteProtectionJobRunInstance) validateRunType(formats strfmt.Registry) error {
	if swag.IsZero(m.RunType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunTypeEnum("runType", "body", *m.RunType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this remote protection job run instance based on the context it is used
func (m *RemoteProtectionJobRunInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchiveTaskUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteProtectionJobRunInstance) contextValidateArchiveTaskUID(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteProtectionJobRunInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteProtectionJobRunInstance) UnmarshalBinary(b []byte) error {
	var res RemoteProtectionJobRunInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
