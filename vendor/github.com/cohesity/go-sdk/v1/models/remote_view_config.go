// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemoteViewConfig Specifies the remote view config for a view protected in a view job. This
// field is only used when the view job has a replication policy.
//
// swagger:model RemoteViewConfig
type RemoteViewConfig struct {

	// Specifies the view Id of the view protected by the view protection job.
	SourceViewID *int64 `json:"sourceViewId,omitempty"`

	// Specifies if the remote view name is same as the source view name. If this
	// field is true, viewName is ignored as the remote view name is same as the
	// source view name.
	UseSameViewName *bool `json:"useSameViewName,omitempty"`

	// Specifies the remote view name of the view protected by a view protection
	// job. If UseSameViewName is set to false, this field provides the remote
	// view name to be used in the remote cluster.
	ViewName *string `json:"viewName,omitempty"`
}

// Validate validates this remote view config
func (m *RemoteViewConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this remote view config based on context it is used
func (m *RemoteViewConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RemoteViewConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteViewConfig) UnmarshalBinary(b []byte) error {
	var res RemoteViewConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
