// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeployArg DeployArg represents the argument for cloud deploy VM operations.
//
// swagger:model DeployArg
type DeployArg struct {

	// Type of restore to perform.
	Action *int32 `json:"action,omitempty"`

	// Parameters to deploy VMs to cloud. Only populate this if deploying VMs
	// to cloud.
	DeployVmsToCloudParams *DeployVMsToCloudParams `json:"deployVmsToCloudParams,omitempty"`

	// Name is the name of the cloud deploy task. This field has to be set, and
	// it needs to be unique across all cloud tasks.
	Name *string `json:"name,omitempty"`

	// Objects is the list of objects to cloud deploy.
	Objects []*RestoreObject `json:"objects"`

	// RestoreParentSource is the registered parent source to which objects are
	// to be deployed.
	RestoreParentSource *PrivateEntityProto `json:"restoreParentSource,omitempty"`
}

// Validate validates this deploy arg
func (m *DeployArg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployVmsToCloudParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreParentSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployArg) validateDeployVmsToCloudParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToCloudParams) { // not required
		return nil
	}

	if m.DeployVmsToCloudParams != nil {
		if err := m.DeployVmsToCloudParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployArg) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeployArg) validateRestoreParentSource(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreParentSource) { // not required
		return nil
	}

	if m.RestoreParentSource != nil {
		if err := m.RestoreParentSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParentSource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deploy arg based on the context it is used
func (m *DeployArg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeployVmsToCloudParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreParentSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployArg) contextValidateDeployVmsToCloudParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToCloudParams != nil {

		if swag.IsZero(m.DeployVmsToCloudParams) { // not required
			return nil
		}

		if err := m.DeployVmsToCloudParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployArg) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeployArg) contextValidateRestoreParentSource(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreParentSource != nil {

		if swag.IsZero(m.RestoreParentSource) { // not required
			return nil
		}

		if err := m.RestoreParentSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParentSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployArg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployArg) UnmarshalBinary(b []byte) error {
	var res DeployArg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
