// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BandwidthLimit Bandwidth Limit.
//
// Specifies settings for limiting the data transfer rate between
// the local and remote Clusters or bandwidth limiting schedule for apollo.
// Only one of RateLimitBytesPerSec or IoRate should be set in this struct and
// corresponding BandwidthLimitOverrides should also be in the same unit.
//
// swagger:model BandwidthLimit
type BandwidthLimit struct {

	// Array of Override Bandwidth Limits.
	//
	// Specifies a list of override bandwidth limits and time periods
	// when those limits override the rateLimitBytesPerSec limit.
	// If overlapping time periods are specified, the last one in the
	// array takes precedence.
	BandwidthLimitOverrides []*BandwidthLimitOverride `json:"bandwidthLimitOverrides"`

	// Specifies the default IO Rate of the throttling schedule. This value is
	// internally mapped to some notion of how many resources a process should be
	// consuming.
	IoRate *int32 `json:"ioRate,omitempty"`

	// Specifies the maximum allowed data transfer rate between the local Cluster
	// and remote Clusters. The value is specified in bytes per second.
	// If not set, the data transfer rate is not limited.
	RateLimitBytesPerSec *int64 `json:"rateLimitBytesPerSec,omitempty"`

	// Specifies a time zone for the specified time period.
	// The time zone is defined in the following format: "Area/Location",
	// for example: "America/New_York".
	Timezone *string `json:"timezone,omitempty"`
}

// Validate validates this bandwidth limit
func (m *BandwidthLimit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBandwidthLimitOverrides(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthLimit) validateBandwidthLimitOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.BandwidthLimitOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.BandwidthLimitOverrides); i++ {
		if swag.IsZero(m.BandwidthLimitOverrides[i]) { // not required
			continue
		}

		if m.BandwidthLimitOverrides[i] != nil {
			if err := m.BandwidthLimitOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bandwidthLimitOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bandwidthLimitOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this bandwidth limit based on the context it is used
func (m *BandwidthLimit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBandwidthLimitOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthLimit) contextValidateBandwidthLimitOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BandwidthLimitOverrides); i++ {

		if m.BandwidthLimitOverrides[i] != nil {

			if swag.IsZero(m.BandwidthLimitOverrides[i]) { // not required
				return nil
			}

			if err := m.BandwidthLimitOverrides[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bandwidthLimitOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bandwidthLimitOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthLimit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthLimit) UnmarshalBinary(b []byte) error {
	var res BandwidthLimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
