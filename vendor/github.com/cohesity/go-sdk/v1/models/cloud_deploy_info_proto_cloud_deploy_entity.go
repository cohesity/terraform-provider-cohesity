// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudDeployInfoProtoCloudDeployEntity cloud deploy info proto cloud deploy entity
//
// swagger:model CloudDeployInfoProto_CloudDeployEntity
type CloudDeployInfoProtoCloudDeployEntity struct {

	// Optional name that should be used for deployed VM.
	DeployedVMName *string `json:"deployedVmName,omitempty"`

	// The entity that was deployed to cloud.
	Entity *EntityProto `json:"entity,omitempty"`

	// If cloud deploy of the 'entity' failed, this field may contain the cause
	// of the failure.
	Error *ErrorProto `json:"error,omitempty"`

	// Directory where files of the entity's previous snapshot were cloned to.
	// Path is relative to the destination view.
	PreviousRelativeCloneDirPath *string `json:"previousRelativeCloneDirPath,omitempty"`

	// All the paths that the entity's previous snapshot files were cloned to.
	// Each path is relative to the destination view.
	PreviousRelativeClonePaths []string `json:"previousRelativeClonePaths"`

	// Progress monitor task path for this entity which is relative to the root
	// path of the cloud deploy task progress monitor.
	ProgressMonitorTaskPath *string `json:"progressMonitorTaskPath,omitempty"`

	// Iris-facing task state. This field is stamped during the export.
	PublicStatus *int32 `json:"publicStatus,omitempty"`

	// All the paths that the entity's files were cloned to. Each path is
	// relative to the destination view.
	RelativeClonePaths []string `json:"relativeClonePaths"`

	// The status of the entity.
	Status *int32 `json:"status,omitempty"`
}

// Validate validates this cloud deploy info proto cloud deploy entity
func (m *CloudDeployInfoProtoCloudDeployEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudDeployInfoProtoCloudDeployEntity) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *CloudDeployInfoProtoCloudDeployEntity) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloud deploy info proto cloud deploy entity based on the context it is used
func (m *CloudDeployInfoProtoCloudDeployEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudDeployInfoProtoCloudDeployEntity) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *CloudDeployInfoProtoCloudDeployEntity) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudDeployInfoProtoCloudDeployEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudDeployInfoProtoCloudDeployEntity) UnmarshalBinary(b []byte) error {
	var res CloudDeployInfoProtoCloudDeployEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
