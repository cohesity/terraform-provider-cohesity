// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ViewIDMappingProtoFileLevelDataLockConfig File level data lock configuration.
//
// swagger:model ViewIdMappingProto_FileLevelDataLockConfig
type ViewIDMappingProtoFileLevelDataLockConfig struct {

	// Auto-lock automatically commit files to WORM state in the filesystem if
	// they have not been modified for an administrator-specified period of
	// time. When the auto-lock is enabled, this field must be set to idle time
	// duration after which file would be automatically locked. Auto locking
	// will be disabled when configured with default value of -1.
	AutoLockDurationUsecs *int64 `json:"autoLockDurationUsecs,omitempty"`

	// If set, inodes in the view can be locked in different modes
	// (Compliance/Enterprise) independently. The locking mode is stored
	// explicitly on each inode. The mode field on inode
	// FileLevelDataLockMetadata identifies the lock mode for the individual
	// inode, whereas the mode field in view FileLevelDataLockConfig denotes
	// the default lock mode for implicit locking. The field can be set only at
	// view fld enable time and is immutable later.
	// Also if this is set, the view can be deleted only if it does not
	// have any inode.
	CoexistingLockMode *bool `json:"coexistingLockMode,omitempty"`

	// Default retention duration is used when an explicit retention timestamp
	// is not set by user/application when locking a file. If the administrator
	// does not want to enforce this, this field must not be set. If file
	// requires being retained forever by default, this must be set to
	// INT64_MAX. If minimum and maximum retention are enforced, then this must
	// be always between these two durations.
	DefaultRetentionDurationUsecs *int64 `json:"defaultRetentionDurationUsecs,omitempty"`

	// Default retention duration in years. Follows the same conditions
	// specified for default_retention_duration_usecs.
	DefaultRetentionDurationYears *int64 `json:"defaultRetentionDurationYears,omitempty"`

	// Specifies timestamp to protect locked files until a specific date.
	// This would override retention periods and deny any mutable or remove
	// operations on locked files until a specific date.
	HoldTimestampUsecs *int64 `json:"holdTimestampUsecs,omitempty"`

	// If set, implicit locking will be applied only to the newly created or
	// updated inodes.
	IgnoreExistingFiles *bool `json:"ignoreExistingFiles,omitempty"`

	// Specifies maximum retention duration of worm locked file. If the
	// administrator does not want to enforce this, this must not be set. If
	// default and max retention duration are enforced, max retention
	// duration must be greater than or equal to default retention duration.
	// If min and max retention duration are enforced, max retention duration
	// must be greater than and equal to min retention duration.
	MaxRetentionDurationUsecs *int64 `json:"maxRetentionDurationUsecs,omitempty"`

	// Minimum and maximum retention duration allow the administrator to
	// enforce retention duration that falls within a specified range. If
	// the administrator does not want to enforce this, this must not be set.
	// If the file requires being retained forever, this must be set to
	// INT64_MAX. If default retention is enforced, this must be less than or
	// equal to default retention. If max retention are enforced, default
	// retention duration must be less than and equal to max retention
	// duration.
	MinRetentionDurationUsecs *int64 `json:"minRetentionDurationUsecs,omitempty"`

	// Explicit locking mode.
	Mode *int32 `json:"mode,omitempty"`

	// Explicit locking protocol.
	Protocol *int32 `json:"protocol,omitempty"`
}

// Validate validates this view Id mapping proto file level data lock config
func (m *ViewIDMappingProtoFileLevelDataLockConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this view Id mapping proto file level data lock config based on context it is used
func (m *ViewIDMappingProtoFileLevelDataLockConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ViewIDMappingProtoFileLevelDataLockConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewIDMappingProtoFileLevelDataLockConfig) UnmarshalBinary(b []byte) error {
	var res ViewIDMappingProtoFileLevelDataLockConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
