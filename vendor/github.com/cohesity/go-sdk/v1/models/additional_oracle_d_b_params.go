// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdditionalOracleDBParams Message to capture additional channel information for Oracle Database.
//
// swagger:model AdditionalOracleDBParams
type AdditionalOracleDBParams struct {

	// Database app id.
	AppEntityID *int64 `json:"appEntityId,omitempty"`

	// The following proto message should be renamed to a more general message
	// to represent parameters pertaining to a single unique Oracle database.
	// Uniqueness of an Oracle database should be strictly determined by its
	// database unique name. i.e. all backup parameters needed for a unique
	// Oracle database should be expressed in the following proto.
	//
	// It is a vector for future support of backing up Data Guard sources. We
	// may or may not need this to be vector to support Data Guard sources. For
	// now, the size of this vector is always 1. When we rename this proto in
	// the future, if we determine there is no need to use a vector for Data
	// Guard support, we can choose to remove 'repeated'.
	DbInfoChannelVec []*OracleDBChannelInfo `json:"dbInfoChannelVec"`
}

// Validate validates this additional oracle d b params
func (m *AdditionalOracleDBParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbInfoChannelVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalOracleDBParams) validateDbInfoChannelVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DbInfoChannelVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DbInfoChannelVec); i++ {
		if swag.IsZero(m.DbInfoChannelVec[i]) { // not required
			continue
		}

		if m.DbInfoChannelVec[i] != nil {
			if err := m.DbInfoChannelVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dbInfoChannelVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dbInfoChannelVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this additional oracle d b params based on the context it is used
func (m *AdditionalOracleDBParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDbInfoChannelVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalOracleDBParams) contextValidateDbInfoChannelVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DbInfoChannelVec); i++ {

		if m.DbInfoChannelVec[i] != nil {

			if swag.IsZero(m.DbInfoChannelVec[i]) { // not required
				return nil
			}

			if err := m.DbInfoChannelVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dbInfoChannelVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dbInfoChannelVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdditionalOracleDBParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdditionalOracleDBParams) UnmarshalBinary(b []byte) error {
	var res AdditionalOracleDBParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
