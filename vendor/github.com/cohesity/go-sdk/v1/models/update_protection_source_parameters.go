// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateProtectionSourceParameters Update Protection Source Parameters.
//
// UpdateProtectionSourceParameters defines a public data definition
// for updating protection source.
//
// swagger:model UpdateProtectionSourceParameters
type UpdateProtectionSourceParameters struct {

	// Specifies if this source entity has enabled storage array snapshot or not.
	IsStorageArraySnapshotEnabled *bool `json:"IsStorageArraySnapshotEnabled,omitempty"`

	// Specifies the agent endpoint if it is different from the source endpoint.
	AgentEndpoint *string `json:"agentEndpoint,omitempty"`

	// Specifies the list of IP Addresses on the registered source to be
	// exclusively allowed for doing any type of IO operations.
	AllowedIPAddresses []string `json:"allowedIpAddresses"`

	// AWS Source Credentials.
	//
	// Specifies credentials needed to authenticate with AWS Cloud Platform.
	AwsCredentials *AwsCredentials `json:"awsCredentials,omitempty"`

	// Specifies information related to AWS fleets launched for various purposes.
	// This will only be set for kIAMUser entity.
	AwsFleetParams *AwsFleetPublicParams `json:"awsFleetParams,omitempty"`

	// Azure Source Credentials.
	//
	// Specifies credentials needed to authenticate with Azure Cloud Platform.
	AzureCredentials *AzureCredentials `json:"azureCredentials,omitempty"`

	// This field is deprecated. Use DeniedIpAddresses instead.
	// deprecated: true
	BlacklistedIPAddresses []string `json:"blacklistedIpAddresses"`

	// Specifies the cloud credentials used to authenticate with cloud(Aws).
	CloudCredentials *CloudCredentials `json:"cloudCredentials,omitempty"`

	// Specifies information related to cluster. This is only valid for CE
	// clusters. This is only populated for kIAMUser entity.
	ClusterNetworkInfo *FleetNetworkParams `json:"clusterNetworkInfo,omitempty"`

	// Specifies the Bifrost realm to be associated with the source root.
	// Whenever needed, the workflows related to this source would then
	// only use Bifrosts from the specified realm.
	ConnectionID *int64 `json:"connectionId,omitempty"`

	// Specifies the list of IP Addresses on the registered source to be denied
	// for doing any type of IO operations.
	DeniedIPAddresses []string `json:"deniedIpAddresses"`

	// Specifies whether to enable M365 Storage Service API based(CSM) Backup
	// for the M365 source.
	EnableM365CSMBackup *bool `json:"enableM365CSMBackup,omitempty"`

	// Specifies the network endpoint of the Protection Source where it is
	// reachable. It could be an URL or hostname or an IP address of the
	// Protection Source.
	Endpoint *string `json:"endpoint,omitempty"`

	// Specifies information about the preference order while choosing
	// between which database copy of the exchange database which is part of
	// DAG should be protected.
	ExchangeDagProtectionPreference *ExchangeDAGProtectionPreference `json:"exchangeDagProtectionPreference,omitempty"`

	// ForceRegister is applicable to Physical Environment. By default, the agent
	// running on a physical host will fail the registration, if it is already
	// registered as part of another cluster. By setting this option to true,
	// agent can be forced to register with the current cluster. This is a hidden
	// parameter and should not be documented externally.
	ForceRegister *bool `json:"forceRegister,omitempty"`

	// GCP Source Credentials.
	//
	// Specifies credentials needed to authenticate with Google Cloud Platform.
	GcpCredentials *GcpCredentials `json:"gcpCredentials,omitempty"`

	// Specifies information related to GCP fleets launched for various purposes.
	// This will only be set for kIAMUser entity.
	GcpFleetParams *GcpFleetParams `json:"gcpFleetParams,omitempty"`

	// Specifies the optional OS type of the Protection Source (such as kWindows
	// or kLinux).
	// overrideDescription: true
	// 'kLinux' indicates the Linux operating system.
	// 'kWindows' indicates the Microsoft Windows operating system.
	// 'kAix' indicates the IBM AIX operating system.
	// 'kSolaris' indicates the Oracle Solaris operating system.
	// 'kSapHana' indicates the Sap Hana database system developed by SAP SE.
	// 'kSapOracle' indicates the Sap Oracle database system developed by SAP SE.
	// 'kCockroachDB' indicates the CockroachDB database system.
	// 'kMySQL' indicates the MySQL database system.
	// 'kSapSybase' indicates the SapSybase database system.
	// 'kSapMaxDB' indicates the SapMaxDB database system.
	// 'kSapSybaseIQ' indicates the SapSybaseIQ database system.
	// 'kDB2' indicates the DB2 database system.
	// 'kSapASE' indicates the SapASE database system.
	// 'kMariaDB' indicates the MariaDB database system.
	// 'kPostgreSQL' indicates the PostgreSQL database system.
	// 'kHPUX' indicates the HPUX database system.
	// 'kVOS' indicates the VOS database system.
	// 'kOther' indicates the other types of operating system.
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]
	HostType *string `json:"hostType,omitempty"`

	// Specifies if the physical host has to be registered as a proxy host.
	IsProxyHost *bool `json:"isProxyHost,omitempty"`

	// Isilon Source params
	//
	// Specifies the registered protection source params for Isilon Source
	IsilonParams *RegisteredProtectionSourceIsilonParams `json:"isilonParams,omitempty"`

	// Kubernetes Source Credentials.
	//
	// Specifies the credentials needed to authenticate a Kubernetes cluster.
	KubernetesCredentials *KubernetesCredentials `json:"kubernetesCredentials,omitempty"`

	// Extra parameters needed for updating a K8s resource.
	KubernetesParams *KubernetesParams `json:"kubernetesParams,omitempty"`

	// Specifies the minimum space in GB after which backup jobs will be canceled
	// due to low space.
	MinimumFreeSpaceGB *int64 `json:"minimumFreeSpaceGB,omitempty"`

	// NAS Server Credentials.
	//
	// Specifies the server credentials to connect to a NetApp server.
	// This field is required for mounting SMB volumes on NetApp servers.
	NasMountCredentials struct {
		NasMountCredentialParams
	} `json:"nasMountCredentials,omitempty"`

	// Office365 Source Credentials.
	//
	// Specifies credentials needed to authenticate & authorize user for
	// Office365 using MS Graph APIs.
	Office365CredentialsList []*Office365Credentials `json:"office365CredentialsList"`

	// Specifies the region for Office365.
	Office365Region *string `json:"office365Region,omitempty"`

	// Office365 Service Account Credentials.
	//
	// Specifies credentials for improving mailbox backup performance for O365.
	Office365ServiceAccountCredentialsList []*Credentials `json:"office365ServiceAccountCredentialsList"`

	// Specifies password of the username to access the target source.
	Password *string `json:"password,omitempty"`

	// Specifies the list of the protection source id of the windows physical
	// host which will be used during the protection and recovery of the sites
	// that belong to a office365 domain.
	ProxyHostSourceIDList []int64 `json:"proxyHostSourceIdList"`

	// ReRegister is applicable to Physical Environment. By default, the
	// agent running on a physical host will fail the registration, if it is
	// already registered with the cluster. By setting this option to true, agent
	// can be re-registered with the current cluster.
	ReRegister *bool `json:"reRegister,omitempty"`

	// RestoreConfig is applicable to Physical Environment. The ReRegister option
	// needs to be true if RestoreConfig is true. By setting this option to true,
	// the agent configuration can be restored.
	RestoreConfig *bool `json:"restoreConfig,omitempty"`

	// This controls whether to use source side dedup on the source or not.
	// This is only applicable to sources which support source side dedup
	// (e.g., Linux physical servers).
	SourceSideDedupEnabled *bool `json:"sourceSideDedupEnabled,omitempty"`

	// SSL verification parameter is applicable to VMware environment. It can be
	// populated with the server's CA certificate or certificate chain and
	// vCenter's certificate will be validated against this.
	SslVerification *SslVerification `json:"sslVerification,omitempty"`

	// Specifies the list of subnet IP addresses and CIDR prefix for enabeling
	// network data transfer. Currently, only Subnet IP and NetbaskBits are valid
	// input fields. All other fields provided as input will be ignored.
	Subnets []*Subnet `json:"subnets"`

	// Specifies the throttling policy that should be applied to this Source.
	ThrottlingPolicy struct {
		ThrottlingPolicyParameters
	} `json:"throttlingPolicy,omitempty"`

	// Array of Throttling Policy Overrides for Datastores.
	//
	// Specifies a list of Throttling Policy for datastores that override the
	// common throttling policy specified for the registered Protection Source.
	// For datastores not in this list, common policy will still apply.
	ThrottlingPolicyOverrides []*ThrottlingPolicyOverride `json:"throttlingPolicyOverrides"`

	// Specifies whether to use existing Office365 credentials like password and
	// client secret for app id's.
	UseExistingCredentials *bool `json:"useExistingCredentials,omitempty"`

	// Specifies whether OAuth should be used for authentication in case of
	// Exchange Online.
	UseOAuthForExchangeOnline *bool `json:"useOAuthForExchangeOnline,omitempty"`

	// Specifies username to access the target source.
	Username *string `json:"username,omitempty"`

	// Specifies the VLAN parameters to be used while taking the backup of this
	// entity and is the preferred selection for restoring the same.
	// For restores, the VLAN parameters specifed here can be overridden.
	// Currently, this is only applicable for Physical hosts running Oracle.
	VlanParams *VlanParameters `json:"vlanParams,omitempty"`
}

// Validate validates this update protection source parameters
func (m *UpdateProtectionSourceParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsFleetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterNetworkInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeDagProtectionPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpFleetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNasMountCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365CredentialsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365ServiceAccountCredentialsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingPolicyOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateProtectionSourceParameters) validateAwsCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsCredentials) { // not required
		return nil
	}

	if m.AwsCredentials != nil {
		if err := m.AwsCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateAwsFleetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsFleetParams) { // not required
		return nil
	}

	if m.AwsFleetParams != nil {
		if err := m.AwsFleetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateAzureCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureCredentials) { // not required
		return nil
	}

	if m.AzureCredentials != nil {
		if err := m.AzureCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateCloudCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudCredentials) { // not required
		return nil
	}

	if m.CloudCredentials != nil {
		if err := m.CloudCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateClusterNetworkInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterNetworkInfo) { // not required
		return nil
	}

	if m.ClusterNetworkInfo != nil {
		if err := m.ClusterNetworkInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterNetworkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterNetworkInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateExchangeDagProtectionPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeDagProtectionPreference) { // not required
		return nil
	}

	if m.ExchangeDagProtectionPreference != nil {
		if err := m.ExchangeDagProtectionPreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeDagProtectionPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeDagProtectionPreference")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateGcpCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpCredentials) { // not required
		return nil
	}

	if m.GcpCredentials != nil {
		if err := m.GcpCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateGcpFleetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpFleetParams) { // not required
		return nil
	}

	if m.GcpFleetParams != nil {
		if err := m.GcpFleetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpFleetParams")
			}
			return err
		}
	}

	return nil
}

var updateProtectionSourceParametersTypeHostTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateProtectionSourceParametersTypeHostTypePropEnum = append(updateProtectionSourceParametersTypeHostTypePropEnum, v)
	}
}

const (

	// UpdateProtectionSourceParametersHostTypeKLinux captures enum value "kLinux"
	UpdateProtectionSourceParametersHostTypeKLinux string = "kLinux"

	// UpdateProtectionSourceParametersHostTypeKWindows captures enum value "kWindows"
	UpdateProtectionSourceParametersHostTypeKWindows string = "kWindows"

	// UpdateProtectionSourceParametersHostTypeKAix captures enum value "kAix"
	UpdateProtectionSourceParametersHostTypeKAix string = "kAix"

	// UpdateProtectionSourceParametersHostTypeKSolaris captures enum value "kSolaris"
	UpdateProtectionSourceParametersHostTypeKSolaris string = "kSolaris"

	// UpdateProtectionSourceParametersHostTypeKSapHana captures enum value "kSapHana"
	UpdateProtectionSourceParametersHostTypeKSapHana string = "kSapHana"

	// UpdateProtectionSourceParametersHostTypeKSapOracle captures enum value "kSapOracle"
	UpdateProtectionSourceParametersHostTypeKSapOracle string = "kSapOracle"

	// UpdateProtectionSourceParametersHostTypeKCockroachDB captures enum value "kCockroachDB"
	UpdateProtectionSourceParametersHostTypeKCockroachDB string = "kCockroachDB"

	// UpdateProtectionSourceParametersHostTypeKMySQL captures enum value "kMySQL"
	UpdateProtectionSourceParametersHostTypeKMySQL string = "kMySQL"

	// UpdateProtectionSourceParametersHostTypeKOther captures enum value "kOther"
	UpdateProtectionSourceParametersHostTypeKOther string = "kOther"

	// UpdateProtectionSourceParametersHostTypeKSapSybase captures enum value "kSapSybase"
	UpdateProtectionSourceParametersHostTypeKSapSybase string = "kSapSybase"

	// UpdateProtectionSourceParametersHostTypeKSapMaxDB captures enum value "kSapMaxDB"
	UpdateProtectionSourceParametersHostTypeKSapMaxDB string = "kSapMaxDB"

	// UpdateProtectionSourceParametersHostTypeKSapSybaseIQ captures enum value "kSapSybaseIQ"
	UpdateProtectionSourceParametersHostTypeKSapSybaseIQ string = "kSapSybaseIQ"

	// UpdateProtectionSourceParametersHostTypeKDB2 captures enum value "kDB2"
	UpdateProtectionSourceParametersHostTypeKDB2 string = "kDB2"

	// UpdateProtectionSourceParametersHostTypeKSapASE captures enum value "kSapASE"
	UpdateProtectionSourceParametersHostTypeKSapASE string = "kSapASE"

	// UpdateProtectionSourceParametersHostTypeKMariaDB captures enum value "kMariaDB"
	UpdateProtectionSourceParametersHostTypeKMariaDB string = "kMariaDB"

	// UpdateProtectionSourceParametersHostTypeKPostgreSQL captures enum value "kPostgreSQL"
	UpdateProtectionSourceParametersHostTypeKPostgreSQL string = "kPostgreSQL"

	// UpdateProtectionSourceParametersHostTypeKVOS captures enum value "kVOS"
	UpdateProtectionSourceParametersHostTypeKVOS string = "kVOS"

	// UpdateProtectionSourceParametersHostTypeKHPUX captures enum value "kHPUX"
	UpdateProtectionSourceParametersHostTypeKHPUX string = "kHPUX"
)

// prop value enum
func (m *UpdateProtectionSourceParameters) validateHostTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateProtectionSourceParametersTypeHostTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateProtectionSourceParameters) validateHostType(formats strfmt.Registry) error {
	if swag.IsZero(m.HostType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostTypeEnum("hostType", "body", *m.HostType); err != nil {
		return err
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateIsilonParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateKubernetesCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesCredentials) { // not required
		return nil
	}

	if m.KubernetesCredentials != nil {
		if err := m.KubernetesCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateKubernetesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesParams) { // not required
		return nil
	}

	if m.KubernetesParams != nil {
		if err := m.KubernetesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateNasMountCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.NasMountCredentials) { // not required
		return nil
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateOffice365CredentialsList(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365CredentialsList) { // not required
		return nil
	}

	for i := 0; i < len(m.Office365CredentialsList); i++ {
		if swag.IsZero(m.Office365CredentialsList[i]) { // not required
			continue
		}

		if m.Office365CredentialsList[i] != nil {
			if err := m.Office365CredentialsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateOffice365ServiceAccountCredentialsList(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365ServiceAccountCredentialsList) { // not required
		return nil
	}

	for i := 0; i < len(m.Office365ServiceAccountCredentialsList); i++ {
		if swag.IsZero(m.Office365ServiceAccountCredentialsList[i]) { // not required
			continue
		}

		if m.Office365ServiceAccountCredentialsList[i] != nil {
			if err := m.Office365ServiceAccountCredentialsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateSslVerification(formats strfmt.Registry) error {
	if swag.IsZero(m.SslVerification) { // not required
		return nil
	}

	if m.SslVerification != nil {
		if err := m.SslVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sslVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sslVerification")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateSubnets(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {
		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {
			if err := m.Subnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateThrottlingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingPolicy) { // not required
		return nil
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateThrottlingPolicyOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingPolicyOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.ThrottlingPolicyOverrides); i++ {
		if swag.IsZero(m.ThrottlingPolicyOverrides[i]) { // not required
			continue
		}

		if m.ThrottlingPolicyOverrides[i] != nil {
			if err := m.ThrottlingPolicyOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateProtectionSourceParameters) validateVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParams) { // not required
		return nil
	}

	if m.VlanParams != nil {
		if err := m.VlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update protection source parameters based on the context it is used
func (m *UpdateProtectionSourceParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsFleetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterNetworkInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeDagProtectionPreference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpFleetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNasMountCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365CredentialsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365ServiceAccountCredentialsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSslVerification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingPolicyOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateAwsCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsCredentials != nil {

		if swag.IsZero(m.AwsCredentials) { // not required
			return nil
		}

		if err := m.AwsCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateAwsFleetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsFleetParams != nil {

		if swag.IsZero(m.AwsFleetParams) { // not required
			return nil
		}

		if err := m.AwsFleetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateAzureCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureCredentials != nil {

		if swag.IsZero(m.AzureCredentials) { // not required
			return nil
		}

		if err := m.AzureCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateCloudCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudCredentials != nil {

		if swag.IsZero(m.CloudCredentials) { // not required
			return nil
		}

		if err := m.CloudCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateClusterNetworkInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterNetworkInfo != nil {

		if swag.IsZero(m.ClusterNetworkInfo) { // not required
			return nil
		}

		if err := m.ClusterNetworkInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterNetworkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterNetworkInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateExchangeDagProtectionPreference(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeDagProtectionPreference != nil {

		if swag.IsZero(m.ExchangeDagProtectionPreference) { // not required
			return nil
		}

		if err := m.ExchangeDagProtectionPreference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeDagProtectionPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeDagProtectionPreference")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateGcpCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpCredentials != nil {

		if swag.IsZero(m.GcpCredentials) { // not required
			return nil
		}

		if err := m.GcpCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateGcpFleetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpFleetParams != nil {

		if swag.IsZero(m.GcpFleetParams) { // not required
			return nil
		}

		if err := m.GcpFleetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateKubernetesCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesCredentials != nil {

		if swag.IsZero(m.KubernetesCredentials) { // not required
			return nil
		}

		if err := m.KubernetesCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateKubernetesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesParams != nil {

		if swag.IsZero(m.KubernetesParams) { // not required
			return nil
		}

		if err := m.KubernetesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateNasMountCredentials(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateOffice365CredentialsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Office365CredentialsList); i++ {

		if m.Office365CredentialsList[i] != nil {

			if swag.IsZero(m.Office365CredentialsList[i]) { // not required
				return nil
			}

			if err := m.Office365CredentialsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateOffice365ServiceAccountCredentialsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Office365ServiceAccountCredentialsList); i++ {

		if m.Office365ServiceAccountCredentialsList[i] != nil {

			if swag.IsZero(m.Office365ServiceAccountCredentialsList[i]) { // not required
				return nil
			}

			if err := m.Office365ServiceAccountCredentialsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateSslVerification(ctx context.Context, formats strfmt.Registry) error {

	if m.SslVerification != nil {

		if swag.IsZero(m.SslVerification) { // not required
			return nil
		}

		if err := m.SslVerification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sslVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sslVerification")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateSubnets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subnets); i++ {

		if m.Subnets[i] != nil {

			if swag.IsZero(m.Subnets[i]) { // not required
				return nil
			}

			if err := m.Subnets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateThrottlingPolicy(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateThrottlingPolicyOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ThrottlingPolicyOverrides); i++ {

		if m.ThrottlingPolicyOverrides[i] != nil {

			if swag.IsZero(m.ThrottlingPolicyOverrides[i]) { // not required
				return nil
			}

			if err := m.ThrottlingPolicyOverrides[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateProtectionSourceParameters) contextValidateVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParams != nil {

		if swag.IsZero(m.VlanParams) { // not required
			return nil
		}

		if err := m.VlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateProtectionSourceParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateProtectionSourceParameters) UnmarshalBinary(b []byte) error {
	var res UpdateProtectionSourceParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
