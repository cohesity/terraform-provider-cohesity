// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateSourcesForPrincipalsParams Update Sources for Principal Parameters.
//
// Set Access Permissions for Principals.
// Specifies a list of principals to set access permissions for.
// For each principal, set the Protection Sources and View names
// that the specified principal has permissions to access.
//
// swagger:model UpdateSourcesForPrincipalsParams
type UpdateSourcesForPrincipalsParams struct {

	// Array of Principals, Sources and Views.
	//
	// Specifies a list of principals. For each principal, specify
	// the Protection Sources and Views that the principal has
	// permissions to access.
	SourcesForPrincipals []*SourceForPrincipalParam `json:"sourcesForPrincipals"`
}

// Validate validates this update sources for principals params
func (m *UpdateSourcesForPrincipalsParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourcesForPrincipals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateSourcesForPrincipalsParams) validateSourcesForPrincipals(formats strfmt.Registry) error {
	if swag.IsZero(m.SourcesForPrincipals) { // not required
		return nil
	}

	for i := 0; i < len(m.SourcesForPrincipals); i++ {
		if swag.IsZero(m.SourcesForPrincipals[i]) { // not required
			continue
		}

		if m.SourcesForPrincipals[i] != nil {
			if err := m.SourcesForPrincipals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourcesForPrincipals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourcesForPrincipals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update sources for principals params based on the context it is used
func (m *UpdateSourcesForPrincipalsParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSourcesForPrincipals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateSourcesForPrincipalsParams) contextValidateSourcesForPrincipals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SourcesForPrincipals); i++ {

		if m.SourcesForPrincipals[i] != nil {

			if swag.IsZero(m.SourcesForPrincipals[i]) { // not required
				return nil
			}

			if err := m.SourcesForPrincipals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourcesForPrincipals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourcesForPrincipals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateSourcesForPrincipalsParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateSourcesForPrincipalsParams) UnmarshalBinary(b []byte) error {
	var res UpdateSourcesForPrincipalsParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
