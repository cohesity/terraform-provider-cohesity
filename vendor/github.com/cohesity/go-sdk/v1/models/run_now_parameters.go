// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RunNowParameters RunNowParameters.
//
// Specifies the parameters of a Run Now operation. A Run Now operation
// will try to backup the a source and/or its databases instantly.
//
// swagger:model RunNowParameters
type RunNowParameters struct {

	// Specifies the ids of the DB's to perform run now on.
	DatabaseIds []int64 `json:"databaseIds"`

	// Specifies optional physical parameters for a specific source id.
	PhysicalParams *RunNowPhysicalParameters `json:"physicalParams,omitempty"`

	// Specifies the source id of the Databases to perform the Run Now
	// operation on.
	SourceID *int64 `json:"sourceId,omitempty"`
}

// Validate validates this run now parameters
func (m *RunNowParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunNowParameters) validatePhysicalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this run now parameters based on the context it is used
func (m *RunNowParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunNowParameters) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunNowParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunNowParameters) UnmarshalBinary(b []byte) error {
	var res RunNowParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
