// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Entity Message encapsulating a Kubernetes entity
//
// swagger:model Entity
type Entity struct {

	// Software version of the agent running in the DataMover pod.
	DatamoverAgentVersion *string `json:"datamoverAgentVersion,omitempty"`

	// Location of the datamover image specified by the user.
	DatamoverImageLocation *string `json:"datamoverImageLocation,omitempty"`

	// Type of service to be deployed for communication with DataMover pods.
	// Currently, LoadBalancer and NodePort are supported.
	DatamoverServiceType *int32 `json:"datamoverServiceType,omitempty"`

	// Indicates if deployed datamover needs to be upgraded
	// for this kubernetes entity.
	DatamoverUpgradability *int32 `json:"datamoverUpgradability,omitempty"`

	// VLAN information of the default VLAN.
	DefaultVlanParams *VlanParams `json:"defaultVlanParams,omitempty"`

	// This is a general description that could be set for some entities.
	Description *string `json:"description,omitempty"`

	// K8s distribution. This will only be applicable to kCluster entities.
	Distribution *int32 `json:"distribution,omitempty"`

	// Location of the init container image specified by the user.
	InitContainerImageLocation *string `json:"initContainerImageLocation,omitempty"`

	// IP mode of the kubernetes source.
	IPMode *IPMode `json:"ipMode,omitempty"`

	// Label attributes vector contains info about the label nodes corresponding
	// to the current entity's labels.
	// TODO(jhwang): Make it applicable to non-kNamespace type entities also.
	LabelAttributesVec []*LabelAttributesInfo `json:"labelAttributesVec"`

	// List of labels associated with this entity in the form "key:value".
	// Currently, only populated for PVCs to be used for label based
	// include/exclude filters.
	LabelVec []string `json:"labelVec"`

	// A human readable name for the object.
	Name *string `json:"name,omitempty"`

	// Namespace of object, if applicable.
	// For a PV, this field stores the namespace of the PVC which is bound to the
	// PV.
	Namespace *string `json:"namespace,omitempty"`

	// Name of the PVC which is bound to the PV. Applicable only to
	// 'kPersistentVolume' type entity.
	PvcName *string `json:"pvcName,omitempty"`

	// Contains generic annotations to be put on services.
	ServiceAnnotations map[string]string `json:"serviceAnnotations,omitempty"`

	// A mapping from datamover services to corresponding unique connector_params
	// IDs. This will be generated during registration and updated during
	// refresh. Applicable only for 'kCluster' type entities.
	ServicesToConnectorIdsMap map[string]int64 `json:"servicesToConnectorIdsMap,omitempty"`

	// This is populated for the root entity only (type kCluster).
	StorageClassVec []*EntityStorageClassInfo `json:"storageClassVec"`

	// Custom tolerations for Datamover pods.
	TolerationsVec []*PodInfoPodSpecToleration `json:"tolerationsVec"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// The UUID of the object.
	UUID *string `json:"uuid,omitempty"`

	// Location of the Velero AWS plugin image specified by the user.
	VeleroAwsPluginImageLocation *string `json:"veleroAwsPluginImageLocation,omitempty"`

	// Location of the Velero image specified by the user.
	VeleroImageLocation *string `json:"veleroImageLocation,omitempty"`

	// Location of the Velero Openshift plugin image specified by the user.
	VeleroOpenshiftPluginImageLocation *string `json:"veleroOpenshiftPluginImageLocation,omitempty"`

	// Indicates if deployed Velero image needs to be upgraded
	// for this kubernetes entity.
	VeleroUpgradability *int32 `json:"veleroUpgradability,omitempty"`

	// Velero version deployed.
	VeleroVersion *string `json:"veleroVersion,omitempty"`

	// Kubernetes cluster version.
	Version *string `json:"version,omitempty"`

	// VLAN information provided during registration.
	VlanInfoVec []*VlanInfo `json:"vlanInfoVec"`
}

// Validate validates this entity
func (m *Entity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelAttributesVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageClassVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTolerationsVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Entity) validateDefaultVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultVlanParams) { // not required
		return nil
	}

	if m.DefaultVlanParams != nil {
		if err := m.DefaultVlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *Entity) validateIPMode(formats strfmt.Registry) error {
	if swag.IsZero(m.IPMode) { // not required
		return nil
	}

	if m.IPMode != nil {
		if err := m.IPMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipMode")
			}
			return err
		}
	}

	return nil
}

func (m *Entity) validateLabelAttributesVec(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelAttributesVec) { // not required
		return nil
	}

	for i := 0; i < len(m.LabelAttributesVec); i++ {
		if swag.IsZero(m.LabelAttributesVec[i]) { // not required
			continue
		}

		if m.LabelAttributesVec[i] != nil {
			if err := m.LabelAttributesVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelAttributesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelAttributesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Entity) validateStorageClassVec(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageClassVec) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageClassVec); i++ {
		if swag.IsZero(m.StorageClassVec[i]) { // not required
			continue
		}

		if m.StorageClassVec[i] != nil {
			if err := m.StorageClassVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageClassVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageClassVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Entity) validateTolerationsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.TolerationsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.TolerationsVec); i++ {
		if swag.IsZero(m.TolerationsVec[i]) { // not required
			continue
		}

		if m.TolerationsVec[i] != nil {
			if err := m.TolerationsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tolerationsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tolerationsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Entity) validateVlanInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.VlanInfoVec); i++ {
		if swag.IsZero(m.VlanInfoVec[i]) { // not required
			continue
		}

		if m.VlanInfoVec[i] != nil {
			if err := m.VlanInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlanInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlanInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this entity based on the context it is used
func (m *Entity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelAttributesVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageClassVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTolerationsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Entity) contextValidateDefaultVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultVlanParams != nil {

		if swag.IsZero(m.DefaultVlanParams) { // not required
			return nil
		}

		if err := m.DefaultVlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *Entity) contextValidateIPMode(ctx context.Context, formats strfmt.Registry) error {

	if m.IPMode != nil {

		if swag.IsZero(m.IPMode) { // not required
			return nil
		}

		if err := m.IPMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipMode")
			}
			return err
		}
	}

	return nil
}

func (m *Entity) contextValidateLabelAttributesVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelAttributesVec); i++ {

		if m.LabelAttributesVec[i] != nil {

			if swag.IsZero(m.LabelAttributesVec[i]) { // not required
				return nil
			}

			if err := m.LabelAttributesVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelAttributesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelAttributesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Entity) contextValidateStorageClassVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageClassVec); i++ {

		if m.StorageClassVec[i] != nil {

			if swag.IsZero(m.StorageClassVec[i]) { // not required
				return nil
			}

			if err := m.StorageClassVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageClassVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageClassVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Entity) contextValidateTolerationsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TolerationsVec); i++ {

		if m.TolerationsVec[i] != nil {

			if swag.IsZero(m.TolerationsVec[i]) { // not required
				return nil
			}

			if err := m.TolerationsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tolerationsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tolerationsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Entity) contextValidateVlanInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VlanInfoVec); i++ {

		if m.VlanInfoVec[i] != nil {

			if swag.IsZero(m.VlanInfoVec[i]) { // not required
				return nil
			}

			if err := m.VlanInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlanInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlanInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Entity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Entity) UnmarshalBinary(b []byte) error {
	var res Entity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
