// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMDirEntry VM Directory Entry.
//
// VmDirEntry is the struct to represent a file or a folder on a VM.
//
// swagger:model VmDirEntry
type VMDirEntry struct {

	// FstatInfo is the stat information for the file.
	FstatInfo *FileStatInfo `json:"fstatInfo,omitempty"`

	// FullPath is the full path of the file/directory.
	FullPath *string `json:"fullPath,omitempty"`

	// Name is the name of the file or folder. For /test/file.txt, name will be
	// file.txt.
	Name *string `json:"name,omitempty"`

	// DirEntryType is the type of entry i.e. file/folder.
	// Specifies the type of directory entry.
	//
	// 'kFile' indicates that current entry is of file type.
	// 'kDirectory' indicates that current entry is of directory type.
	// 'kSymlink' indicates that current entry is of symbolic link.
	// Enum: ["kFile","kDirectory","kSymlink"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this Vm dir entry
func (m *VMDirEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFstatInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDirEntry) validateFstatInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FstatInfo) { // not required
		return nil
	}

	if m.FstatInfo != nil {
		if err := m.FstatInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fstatInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fstatInfo")
			}
			return err
		}
	}

	return nil
}

var vmDirEntryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kFile","kDirectory","kSymlink"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmDirEntryTypeTypePropEnum = append(vmDirEntryTypeTypePropEnum, v)
	}
}

const (

	// VMDirEntryTypeKFile captures enum value "kFile"
	VMDirEntryTypeKFile string = "kFile"

	// VMDirEntryTypeKDirectory captures enum value "kDirectory"
	VMDirEntryTypeKDirectory string = "kDirectory"

	// VMDirEntryTypeKSymlink captures enum value "kSymlink"
	VMDirEntryTypeKSymlink string = "kSymlink"
)

// prop value enum
func (m *VMDirEntry) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmDirEntryTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VMDirEntry) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Vm dir entry based on the context it is used
func (m *VMDirEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFstatInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDirEntry) contextValidateFstatInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FstatInfo != nil {

		if swag.IsZero(m.FstatInfo) { // not required
			return nil
		}

		if err := m.FstatInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fstatInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fstatInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMDirEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDirEntry) UnmarshalBinary(b []byte) error {
	var res VMDirEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
