// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateAwsEntity private aws entity
//
// swagger:model PrivateAwsEntity
type PrivateAwsEntity struct {

	// The availability zone of this entity. This is only populated for entities
	// of type kSubnet.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	// Information related to AWS fleets launched for various purposes. This
	// will only be set for kIAMUser entity.
	AwsFleetParams *AWSFleetParams `json:"awsFleetParams,omitempty"`

	// Information related to cluster. This is only valid for CE clusters. This
	// is only populated for kIAMUser entity.
	ClusterNetworkInfo *AWSFleetParamsNetworkParams `json:"clusterNetworkInfo,omitempty"`

	// Information common to all types of cloud entities.
	CommonInfo *EntityCommonInfo `json:"commonInfo,omitempty"`

	// The retention period in days for the automated snapshots of the DB
	// instance in RDS. This is only populated for kRDSInstance entities.
	DbBackupRetentionPeriodDays *int32 `json:"dbBackupRetentionPeriodDays,omitempty"`

	// DB engine and version info of the entity. This is populated only for
	// RDSInstance, kAuroraCluster, RDSOptionGroup and RDSParameterGroup entity
	// types.
	DbEngineID *string `json:"dbEngineId,omitempty"`

	// Front end size information. An example use case is for billing purposes
	// in "[Backup | Data Management] as a Service" offering.
	FrontEndSizeInfo *SizeInfo `json:"frontEndSizeInfo,omitempty"`

	// The host environment type. This is set for entities of type
	// kVirtualMachine.
	HostType *int32 `json:"hostType,omitempty"`

	// iam info
	IamInfo *EntityIAMInfo `json:"iamInfo,omitempty"`

	// KMS key specific info.
	KmsKeyInfo *KmsKeyInfo `json:"kmsKeyInfo,omitempty"`

	// This field contains the latest restorable time in milliseconds that an
	// RDS database can be restored to. This is only populated for kRDSInstance
	// entities.
	LatestDbRestorableTimeMsecs *int64 `json:"latestDbRestorableTimeMsecs,omitempty"`

	// The Amazon Resource Name (ARN) of the IAM user.
	// type, name, owner_id gives a globally unique identifier for an AWS entity.
	OwnerID *string `json:"ownerId,omitempty"`

	// Private ip address. This is set for entities of type kVirtualMachine.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty"`

	// Connection information related to RDS Instances. This will only be set
	// for kRDSInstance and kAuroraCluster entity types.
	RdsDbConnectorParams *RDSDbConnectorParams `json:"rdsDbConnectorParams,omitempty"`

	// The following is set if the entity is an EC2 instance.
	RegionID *string `json:"regionId,omitempty"`

	// S3 bucket specific info.
	S3EntityInfo *PrivateS3ProtoEntity `json:"s3EntityInfo,omitempty"`

	// Params required for s3 backups for the registered entity.
	S3ProtectionParams *PrivateS3ProtectionParams `json:"s3ProtectionParams,omitempty"`

	// Optional list of tag attributes associated with this entity.
	TagAttributesVec []*TagAttributes `json:"tagAttributesVec"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// use case
	UseCase []int32 `json:"useCase"`

	// List of volumes attached to an EC2 instance. This is populated only for
	// kEC2Instance entity type.
	VolumeInfoVec []*EBSVolumeInfo `json:"volumeInfoVec"`
}

// Validate validates this private aws entity
func (m *PrivateAwsEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsFleetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterNetworkInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrontEndSizeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKmsKeyInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsDbConnectorParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3EntityInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3ProtectionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagAttributesVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAwsEntity) validateAwsFleetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsFleetParams) { // not required
		return nil
	}

	if m.AwsFleetParams != nil {
		if err := m.AwsFleetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) validateClusterNetworkInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterNetworkInfo) { // not required
		return nil
	}

	if m.ClusterNetworkInfo != nil {
		if err := m.ClusterNetworkInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterNetworkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterNetworkInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) validateCommonInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CommonInfo) { // not required
		return nil
	}

	if m.CommonInfo != nil {
		if err := m.CommonInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) validateFrontEndSizeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FrontEndSizeInfo) { // not required
		return nil
	}

	if m.FrontEndSizeInfo != nil {
		if err := m.FrontEndSizeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frontEndSizeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("frontEndSizeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) validateIamInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.IamInfo) { // not required
		return nil
	}

	if m.IamInfo != nil {
		if err := m.IamInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) validateKmsKeyInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.KmsKeyInfo) { // not required
		return nil
	}

	if m.KmsKeyInfo != nil {
		if err := m.KmsKeyInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kmsKeyInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kmsKeyInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) validateRdsDbConnectorParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RdsDbConnectorParams) { // not required
		return nil
	}

	if m.RdsDbConnectorParams != nil {
		if err := m.RdsDbConnectorParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsDbConnectorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsDbConnectorParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) validateS3EntityInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.S3EntityInfo) { // not required
		return nil
	}

	if m.S3EntityInfo != nil {
		if err := m.S3EntityInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3EntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3EntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) validateS3ProtectionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.S3ProtectionParams) { // not required
		return nil
	}

	if m.S3ProtectionParams != nil {
		if err := m.S3ProtectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3ProtectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3ProtectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) validateTagAttributesVec(formats strfmt.Registry) error {
	if swag.IsZero(m.TagAttributesVec) { // not required
		return nil
	}

	for i := 0; i < len(m.TagAttributesVec); i++ {
		if swag.IsZero(m.TagAttributesVec[i]) { // not required
			continue
		}

		if m.TagAttributesVec[i] != nil {
			if err := m.TagAttributesVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateAwsEntity) validateVolumeInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeInfoVec); i++ {
		if swag.IsZero(m.VolumeInfoVec[i]) { // not required
			continue
		}

		if m.VolumeInfoVec[i] != nil {
			if err := m.VolumeInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this private aws entity based on the context it is used
func (m *PrivateAwsEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsFleetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterNetworkInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommonInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrontEndSizeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIamInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKmsKeyInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRdsDbConnectorParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3EntityInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3ProtectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagAttributesVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAwsEntity) contextValidateAwsFleetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsFleetParams != nil {

		if swag.IsZero(m.AwsFleetParams) { // not required
			return nil
		}

		if err := m.AwsFleetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) contextValidateClusterNetworkInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterNetworkInfo != nil {

		if swag.IsZero(m.ClusterNetworkInfo) { // not required
			return nil
		}

		if err := m.ClusterNetworkInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterNetworkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterNetworkInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) contextValidateCommonInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CommonInfo != nil {

		if swag.IsZero(m.CommonInfo) { // not required
			return nil
		}

		if err := m.CommonInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) contextValidateFrontEndSizeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FrontEndSizeInfo != nil {

		if swag.IsZero(m.FrontEndSizeInfo) { // not required
			return nil
		}

		if err := m.FrontEndSizeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frontEndSizeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("frontEndSizeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) contextValidateIamInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.IamInfo != nil {

		if swag.IsZero(m.IamInfo) { // not required
			return nil
		}

		if err := m.IamInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) contextValidateKmsKeyInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.KmsKeyInfo != nil {

		if swag.IsZero(m.KmsKeyInfo) { // not required
			return nil
		}

		if err := m.KmsKeyInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kmsKeyInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kmsKeyInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) contextValidateRdsDbConnectorParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RdsDbConnectorParams != nil {

		if swag.IsZero(m.RdsDbConnectorParams) { // not required
			return nil
		}

		if err := m.RdsDbConnectorParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsDbConnectorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsDbConnectorParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) contextValidateS3EntityInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.S3EntityInfo != nil {

		if swag.IsZero(m.S3EntityInfo) { // not required
			return nil
		}

		if err := m.S3EntityInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3EntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3EntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) contextValidateS3ProtectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.S3ProtectionParams != nil {

		if swag.IsZero(m.S3ProtectionParams) { // not required
			return nil
		}

		if err := m.S3ProtectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3ProtectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3ProtectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsEntity) contextValidateTagAttributesVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagAttributesVec); i++ {

		if m.TagAttributesVec[i] != nil {

			if swag.IsZero(m.TagAttributesVec[i]) { // not required
				return nil
			}

			if err := m.TagAttributesVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateAwsEntity) contextValidateVolumeInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeInfoVec); i++ {

		if m.VolumeInfoVec[i] != nil {

			if swag.IsZero(m.VolumeInfoVec[i]) { // not required
				return nil
			}

			if err := m.VolumeInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateAwsEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateAwsEntity) UnmarshalBinary(b []byte) error {
	var res PrivateAwsEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
