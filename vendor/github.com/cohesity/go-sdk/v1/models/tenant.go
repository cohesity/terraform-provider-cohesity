// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Tenant Tenant Details.
//
// Specifies details about a tenant.
//
// swagger:model Tenant
type Tenant struct {

	// Specifies the active directories this tenant is associated to.
	ActiveDirectories []*ActiveDirectoryEntry `json:"activeDirectories"`

	// Specifies whether bifrost (Ambassador proxy) is enabled for tenant.
	BifrostEnabled *bool `json:"bifrostEnabled,omitempty"`

	// The hostname for Cohesity cluster as seen by tenants and as is routable
	// from the tenant's network. Tenant's VLAN's hostname, if available can be
	// used instead but it is mandatory to provide this value if there's no VLAN
	// hostname to use. Also, when set, this field would take precedence over
	// VLAN hostname.
	ClusterHostname *string `json:"clusterHostname,omitempty"`

	// Set of IPs as seen from the tenant's network for the Cohesity cluster.
	// Only one from 'ClusterHostname' and 'ClusterIps' is needed.
	ClusterIps []string `json:"clusterIps"`

	// Specifies the epoch time in milliseconds when the tenant account
	// was created on the Cohesity Cluster.
	CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

	// Specifies if the Tenant is deleted.
	Deleted *bool `json:"deleted,omitempty"`

	// Specifies the timestamp at which the tenant was deleted.
	DeletedTimeMsecs *int64 `json:"deletedTimeMsecs,omitempty"`

	// Specifies if the object collection is complete for the tenant.
	DeletionFinished *bool `json:"deletionFinished,omitempty"`

	// Specifies the current deletion state of object categories.
	DeletionInfoVec []*TenantDeletionInfo `json:"deletionInfoVec"`

	// Specifies the description of this tenant.
	Description *string `json:"description,omitempty"`

	// Specifies the EntityIds this tenant is associated to.
	EntityIds []int64 `json:"entityIds"`

	// Specifies whether this tenant is manged on helios
	IsManagedOnHelios *bool `json:"isManagedOnHelios,omitempty"`

	// Specifies the epoch time in milliseconds when the tenant account was last
	// modified on the Cohesity Cluster.
	LastUpdatedTimeMsecs *int64 `json:"lastUpdatedTimeMsecs,omitempty"`

	// Specifies the ldap providers this tenant is associated to.
	LdapProviders []*LdapProviderResponse `json:"ldapProviders"`

	// Specifies the name of the tenant.
	Name *string `json:"name,omitempty"`

	// Specifies the organization suffix needed to construct tenant id. Tenant id
	// is not completely auto generated rather chosen by tenant/SP admin as we
	// needed same tenant id on multiple clusters to support replication across
	// clusters, etc.
	OrgSuffix *string `json:"orgSuffix,omitempty"`

	// Specifies the parent tenant of this tenant if available.
	ParentTenantID *string `json:"parentTenantId,omitempty"`

	// Specifies the PolicyIds this tenant is associated to.
	PolicyIds []string `json:"policyIds"`

	// Specifies the ProtectionJobs this tenant is associated to.
	ProtectionJobs []*BackupJobProto `json:"protectionJobs"`

	// Service provider can optionally unsubscribe from the Tenant Alert Emails.
	SubscribeToAlertEmails *bool `json:"subscribeToAlertEmails,omitempty"`

	// Specifies the Swift configuration of this tenant.
	SwiftConfig *SwiftParams `json:"swiftConfig,omitempty"`

	// Specifies the unique id of the tenant.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies the ViewBoxIds this tenant is associated to.
	ViewBoxIds []int64 `json:"viewBoxIds"`

	// Specifies the Views this tenant is associated to.
	Views []*View `json:"views"`

	// Specifies the VlanIfaceNames this tenant is associated to,
	// in the format of bond1.200.
	VlanIfaceNames []string `json:"vlanIfaceNames"`
}

// Validate validates this tenant
func (m *Tenant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveDirectories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletionInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwiftConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViews(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tenant) validateActiveDirectories(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveDirectories) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveDirectories); i++ {
		if swag.IsZero(m.ActiveDirectories[i]) { // not required
			continue
		}

		if m.ActiveDirectories[i] != nil {
			if err := m.ActiveDirectories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeDirectories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activeDirectories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Tenant) validateDeletionInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletionInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DeletionInfoVec); i++ {
		if swag.IsZero(m.DeletionInfoVec[i]) { // not required
			continue
		}

		if m.DeletionInfoVec[i] != nil {
			if err := m.DeletionInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletionInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletionInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Tenant) validateLdapProviders(formats strfmt.Registry) error {
	if swag.IsZero(m.LdapProviders) { // not required
		return nil
	}

	for i := 0; i < len(m.LdapProviders); i++ {
		if swag.IsZero(m.LdapProviders[i]) { // not required
			continue
		}

		if m.LdapProviders[i] != nil {
			if err := m.LdapProviders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ldapProviders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ldapProviders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Tenant) validateProtectionJobs(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionJobs) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionJobs); i++ {
		if swag.IsZero(m.ProtectionJobs[i]) { // not required
			continue
		}

		if m.ProtectionJobs[i] != nil {
			if err := m.ProtectionJobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Tenant) validateSwiftConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SwiftConfig) { // not required
		return nil
	}

	if m.SwiftConfig != nil {
		if err := m.SwiftConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swiftConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("swiftConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Tenant) validateViews(formats strfmt.Registry) error {
	if swag.IsZero(m.Views) { // not required
		return nil
	}

	for i := 0; i < len(m.Views); i++ {
		if swag.IsZero(m.Views[i]) { // not required
			continue
		}

		if m.Views[i] != nil {
			if err := m.Views[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("views" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("views" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tenant based on the context it is used
func (m *Tenant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveDirectories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletionInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLdapProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionJobs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSwiftConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViews(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tenant) contextValidateActiveDirectories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActiveDirectories); i++ {

		if m.ActiveDirectories[i] != nil {

			if swag.IsZero(m.ActiveDirectories[i]) { // not required
				return nil
			}

			if err := m.ActiveDirectories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeDirectories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activeDirectories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Tenant) contextValidateDeletionInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeletionInfoVec); i++ {

		if m.DeletionInfoVec[i] != nil {

			if swag.IsZero(m.DeletionInfoVec[i]) { // not required
				return nil
			}

			if err := m.DeletionInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletionInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletionInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Tenant) contextValidateLdapProviders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LdapProviders); i++ {

		if m.LdapProviders[i] != nil {

			if swag.IsZero(m.LdapProviders[i]) { // not required
				return nil
			}

			if err := m.LdapProviders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ldapProviders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ldapProviders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Tenant) contextValidateProtectionJobs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionJobs); i++ {

		if m.ProtectionJobs[i] != nil {

			if swag.IsZero(m.ProtectionJobs[i]) { // not required
				return nil
			}

			if err := m.ProtectionJobs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Tenant) contextValidateSwiftConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SwiftConfig != nil {

		if swag.IsZero(m.SwiftConfig) { // not required
			return nil
		}

		if err := m.SwiftConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swiftConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("swiftConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Tenant) contextValidateViews(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Views); i++ {

		if m.Views[i] != nil {

			if swag.IsZero(m.Views[i]) { // not required
				return nil
			}

			if err := m.Views[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("views" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("views" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tenant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tenant) UnmarshalBinary(b []byte) error {
	var res Tenant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
