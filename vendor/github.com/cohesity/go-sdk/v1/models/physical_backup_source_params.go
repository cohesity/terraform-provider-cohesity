// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PhysicalBackupSourceParams Physical Backup Source Parameters.
//
// Message to capture additional backup params for a Physical type source.
//
// swagger:model PhysicalBackupSourceParams
type PhysicalBackupSourceParams struct {

	// Allows Magneto to drive a "system" backup using a 3rd-party tool installed
	// on the Agent host.
	EnableSystemBackup *bool `json:"enableSystemBackup,omitempty"`

	// If the backup job type is kPhysicalFiles, this field should be set to
	// specify the files to be backed up from the volumes on this source.
	FileBackupParams *PhysicalFileBackupParams `json:"fileBackupParams,omitempty"`

	// This captures params to use for taking the snapshot.
	SnapshotParams *PhysicalSnapshotParams `json:"snapshotParams,omitempty"`

	// This message will capture params for applications that are running as
	// part of the server.
	SourceAppParams *SourceAppParams `json:"sourceAppParams,omitempty"`

	// If this list is non-empty, then only volumes in this will be
	// protected, otherwise all volumes belonging to the host will be
	// protected.
	VolumeGUIDVec []string `json:"volumeGuidVec"`
}

// Validate validates this physical backup source params
func (m *PhysicalBackupSourceParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceAppParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalBackupSourceParams) validateFileBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FileBackupParams) { // not required
		return nil
	}

	if m.FileBackupParams != nil {
		if err := m.FileBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalBackupSourceParams) validateSnapshotParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotParams) { // not required
		return nil
	}

	if m.SnapshotParams != nil {
		if err := m.SnapshotParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotParams")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalBackupSourceParams) validateSourceAppParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceAppParams) { // not required
		return nil
	}

	if m.SourceAppParams != nil {
		if err := m.SourceAppParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceAppParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this physical backup source params based on the context it is used
func (m *PhysicalBackupSourceParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceAppParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalBackupSourceParams) contextValidateFileBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FileBackupParams != nil {

		if swag.IsZero(m.FileBackupParams) { // not required
			return nil
		}

		if err := m.FileBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalBackupSourceParams) contextValidateSnapshotParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotParams != nil {

		if swag.IsZero(m.SnapshotParams) { // not required
			return nil
		}

		if err := m.SnapshotParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotParams")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalBackupSourceParams) contextValidateSourceAppParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceAppParams != nil {

		if swag.IsZero(m.SourceAppParams) { // not required
			return nil
		}

		if err := m.SourceAppParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceAppParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalBackupSourceParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalBackupSourceParams) UnmarshalBinary(b []byte) error {
	var res PhysicalBackupSourceParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
