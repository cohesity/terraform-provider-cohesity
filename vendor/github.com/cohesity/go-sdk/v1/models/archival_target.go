// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArchivalTarget Message that specifies the details about an archival target (such as cloud
// or tape) where backup snapshots may be archived to.
//
// swagger:model ArchivalTarget
type ArchivalTarget struct {

	// Tier settings in case of cloud target.
	// Contains default tier type and information for moving snapshot data across
	// cloud tiers.
	CloudTierSetting *ClusterConfigProtoVaultCloudTierSetting `json:"cloudTierSetting,omitempty"`

	// The name of the archival target.
	Name *string `json:"name,omitempty"`

	// OwnershipContext of an archival target.
	OwnershipContext *int32 `json:"ownershipContext,omitempty"`

	// The type of the archival target.
	Type *int32 `json:"type,omitempty"`

	// Usage of the archival target. Regular archival and RPaas archival are
	// potential UsageType. By default it is regular archival.
	// A vault can only be used for one UsageType and UsageType should not be
	// changed once set.
	//
	// Note: This field will be deprecated in future. Use OwnershipContext
	// instead.
	UsageType *int32 `json:"usageType,omitempty"`

	// The id of the archival vault.
	VaultID *int64 `json:"vaultId,omitempty"`
}

// Validate validates this archival target
func (m *ArchivalTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudTierSetting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivalTarget) validateCloudTierSetting(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudTierSetting) { // not required
		return nil
	}

	if m.CloudTierSetting != nil {
		if err := m.CloudTierSetting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudTierSetting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudTierSetting")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this archival target based on the context it is used
func (m *ArchivalTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudTierSetting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivalTarget) contextValidateCloudTierSetting(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudTierSetting != nil {

		if swag.IsZero(m.CloudTierSetting) { // not required
			return nil
		}

		if err := m.CloudTierSetting.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudTierSetting")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudTierSetting")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArchivalTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchivalTarget) UnmarshalBinary(b []byte) error {
	var res ArchivalTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
