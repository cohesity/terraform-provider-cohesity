// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreObject Captures information about an object being restored.
//
// swagger:model RestoreObject
type RestoreObject struct {

	// This field must be set if the object is to be restored/retrieved from an
	// archive.
	ArchivalTarget *ArchivalTarget `json:"archivalTarget,omitempty"`

	// The attempt number of the job run to restore from.
	AttemptNum *int32 `json:"attemptNum,omitempty"`

	// Backup type of corresponding backup run. Currently, this is only populated
	// for restore tasks.
	BackupType *int32 `json:"backupType,omitempty"`

	// This field must be set if the restore type is kDeployVMs and the object is
	// to be deployed to cloud using a previously converted image.
	CloudDeployTarget *CloudDeployTarget `json:"cloudDeployTarget,omitempty"`

	// This field must be set if the restore type is kReplicateSnapshots and the
	// snapshots need to be repliated accross regions in the Cloud.
	CloudReplicationTarget *CloudDeployTarget `json:"cloudReplicationTarget,omitempty"`

	// Common Configuration Parameters for recovery
	ConfigVec []*ConfigurationParams `json:"configVec"`

	// The entity to restore. If this is not specified, all entities from job id
	// will be restored (from the latest snapshot). If specified, this can only
	// have leaf-level entities.
	// Notes:
	// This must be specified for RestoreFiles task.
	// Disable object rewriting in the outgoing API path. This is needed to
	// preserve the content of objects().entity() as it must reflect the
	// Entity object as it was at the point the restore task was submitted.
	Entity *EntityProto `json:"entity,omitempty"`

	// The time to which CDP logs hydrated. This field is currently only
	// applicable to MongoDb.
	// This field is used during restore as the 'start time' for copying the
	// remaining cdp logs that are yet to be hydrated by agent.
	HydrationTimeUsecs *int64 `json:"hydrationTimeUsecs,omitempty"`

	// The job id from which to restore. This is used while communicating with
	// yoda.
	JobID *int64 `json:"jobId,omitempty"`

	// Id identifying a specific run to restore from. If this is not specified,
	// and we need to restore from a run, the latest run is used.
	// NOTE: This must be specified for RestoreFiles, RecoverDisks and
	// GetVirtualDisks APIs.
	JobInstanceID *int64 `json:"jobInstanceId,omitempty"`

	// The universal id of the job from which to restore.
	// Caller can set this as local, remote or primary job_uid. Magneto will will
	// look for this UID across all local/remote/primary jobs. See ENG-231303 for
	// more context.
	JobUID *UniversalIDProto `json:"jobUid,omitempty"`

	// This field contains params specific to restore of K8s namespace entity.
	KubernetesNamespaceRecoverParams *KubernetesNamespaceRecoverParams `json:"kubernetesNamespaceRecoverParams,omitempty"`

	// This is a sequencer which will incremented whenever the restore task
	// reaches a new milestone. A milestone can be a change in state, progress
	// percentage incrementals (e.g. 10%).
	LastUpdateLogicalTimestamp *int64 `json:"lastUpdateLogicalTimestamp,omitempty"`

	// Params specific to M365 Backup Storage API based recoveries. This object
	// will contain the restore point from which recovery has to be done.
	// This is common for Exchange, OneDrive & Sharepoint, which recovery to
	// trigger will be decided by entity type.
	M365CsmRestoreAdditionalParams *M365CSMRestoreAdditionalParams `json:"m365CsmRestoreAdditionalParams,omitempty"`

	// This field contains params specific to the restore of a nosql entity.
	NosqlRecoverParams *NoSQLRecoverParams `json:"nosqlRecoverParams,omitempty"`

	// O365 one drive specific parameters needed to restore the One Drive for a
	// single user entity.
	OneDriveRestoreEntityParams *O365OneDriveRestoreEntityParams `json:"oneDriveRestoreEntityParams,omitempty"`

	// The registered source that was managing the entity being restored.
	ParentSource *EntityProto `json:"parentSource,omitempty"`

	// Preferred archival target for the point in time restore.
	PitPreferredArchivalTarget *ArchivalTarget `json:"pitPreferredArchivalTarget,omitempty"`

	// The time to which the object needs to be restored. If this is not set,
	// then the object will be restored to the full/incremental snapshot. This
	// is applicable only if the object is protected using CDP.
	PointInTimeRestoreTimeUsecs *int64 `json:"pointInTimeRestoreTimeUsecs,omitempty"`

	// This field specifies whether the object should be recovered from the
	// latest snapshot. This will only be honored iff 'job_instance_id' &
	// 'start_time_usecs' are not set by the caller.
	// Currently only M365 CSM based restores are capable of honoring this.
	RecoverFromLatest *bool `json:"recoverFromLatest,omitempty"`

	// This field indicates if the object should be recovered from standby if it
	// is enabled.
	RecoverFromStandby *bool `json:"recoverFromStandby,omitempty"`

	// This field contains params specific to the restore of an Acropolis VM.
	RestoreAcropolisVMParam *RestoreAcropolisVMParam `json:"restoreAcropolisVmParam,omitempty"`

	// This field defines the Azure SQL specific params for restore task of type
	// kRecoverAzureSQL.
	RestoreAzureSQLParams *RestoreAzureSQLParams `json:"restoreAzureSqlParams,omitempty"`

	// This field contains params specific to the restore of a Exchange entities.
	RestoreExchangeParams *RestoreExchangeParams `json:"restoreExchangeParams,omitempty"`

	// restore rds postgres params
	RestoreRdsPostgresParams *RestoreRDSPostgresParams `json:"restoreRdsPostgresParams,omitempty"`

	// This field contains params specific to restore of VCD vApp entity.
	RestoreVappInfo *RestoreVappInfo `json:"restoreVappInfo,omitempty"`

	// This field contains params specific to the restore of a SAN entities.
	SanRecoverParams *SANRecoverParams `json:"sanRecoverParams,omitempty"`

	// This field contains params specific to the restore of a Sfdc entities.
	SfdcRecoverParams *SfdcRecoverParams `json:"sfdcRecoverParams,omitempty"`

	// The relative path to the directory containing the entity's snapshot.
	SnapshotRelativeDirPath *string `json:"snapshotRelativeDirPath,omitempty"`

	// The start time of the specific job run. Iff 'job_instance_id' is set,
	// this field must be set. In-memory indices on the Magneto master are
	// laid-out by the start time of the job, and this is how the master pulls
	// up a specific run.
	// NOTE: This must be specified for RestoreFiles, RecoverDisks and
	// GetVirtualDisks APIs
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// This field contains params specific to the restore of a Uda entities.
	UdaRecoverParams *UdaRecoverParams `json:"udaRecoverParams,omitempty"`

	// The name of the view where the object's snapshot is located.
	ViewName *string `json:"viewName,omitempty"`

	// This is applicable only to VMs and is set to true when the VM being
	// recovered or cloned contained independent disks when it was backed up.
	VMHadIndependentDisks *bool `json:"vmHadIndependentDisks,omitempty"`
}

// Validate validates this restore object
func (m *RestoreObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchivalTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudDeployTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudReplicationTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesNamespaceRecoverParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateM365CsmRestoreAdditionalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNosqlRecoverParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneDriveRestoreEntityParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePitPreferredArchivalTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreAcropolisVMParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreAzureSQLParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreExchangeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreRdsPostgresParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreVappInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSanRecoverParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcRecoverParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaRecoverParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreObject) validateArchivalTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalTarget) { // not required
		return nil
	}

	if m.ArchivalTarget != nil {
		if err := m.ArchivalTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateCloudDeployTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudDeployTarget) { // not required
		return nil
	}

	if m.CloudDeployTarget != nil {
		if err := m.CloudDeployTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDeployTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudDeployTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateCloudReplicationTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudReplicationTarget) { // not required
		return nil
	}

	if m.CloudReplicationTarget != nil {
		if err := m.CloudReplicationTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudReplicationTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudReplicationTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateConfigVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigVec); i++ {
		if swag.IsZero(m.ConfigVec[i]) { // not required
			continue
		}

		if m.ConfigVec[i] != nil {
			if err := m.ConfigVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreObject) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.JobUID) { // not required
		return nil
	}

	if m.JobUID != nil {
		if err := m.JobUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobUid")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateKubernetesNamespaceRecoverParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesNamespaceRecoverParams) { // not required
		return nil
	}

	if m.KubernetesNamespaceRecoverParams != nil {
		if err := m.KubernetesNamespaceRecoverParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesNamespaceRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesNamespaceRecoverParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateM365CsmRestoreAdditionalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.M365CsmRestoreAdditionalParams) { // not required
		return nil
	}

	if m.M365CsmRestoreAdditionalParams != nil {
		if err := m.M365CsmRestoreAdditionalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m365CsmRestoreAdditionalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m365CsmRestoreAdditionalParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateNosqlRecoverParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NosqlRecoverParams) { // not required
		return nil
	}

	if m.NosqlRecoverParams != nil {
		if err := m.NosqlRecoverParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlRecoverParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateOneDriveRestoreEntityParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OneDriveRestoreEntityParams) { // not required
		return nil
	}

	if m.OneDriveRestoreEntityParams != nil {
		if err := m.OneDriveRestoreEntityParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveRestoreEntityParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveRestoreEntityParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateParentSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentSource) { // not required
		return nil
	}

	if m.ParentSource != nil {
		if err := m.ParentSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSource")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validatePitPreferredArchivalTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.PitPreferredArchivalTarget) { // not required
		return nil
	}

	if m.PitPreferredArchivalTarget != nil {
		if err := m.PitPreferredArchivalTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pitPreferredArchivalTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pitPreferredArchivalTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateRestoreAcropolisVMParam(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreAcropolisVMParam) { // not required
		return nil
	}

	if m.RestoreAcropolisVMParam != nil {
		if err := m.RestoreAcropolisVMParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAcropolisVmParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAcropolisVmParam")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateRestoreAzureSQLParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreAzureSQLParams) { // not required
		return nil
	}

	if m.RestoreAzureSQLParams != nil {
		if err := m.RestoreAzureSQLParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAzureSqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAzureSqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateRestoreExchangeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreExchangeParams) { // not required
		return nil
	}

	if m.RestoreExchangeParams != nil {
		if err := m.RestoreExchangeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreExchangeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreExchangeParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateRestoreRdsPostgresParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreRdsPostgresParams) { // not required
		return nil
	}

	if m.RestoreRdsPostgresParams != nil {
		if err := m.RestoreRdsPostgresParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreRdsPostgresParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreRdsPostgresParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateRestoreVappInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreVappInfo) { // not required
		return nil
	}

	if m.RestoreVappInfo != nil {
		if err := m.RestoreVappInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVappInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVappInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateSanRecoverParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SanRecoverParams) { // not required
		return nil
	}

	if m.SanRecoverParams != nil {
		if err := m.SanRecoverParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sanRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sanRecoverParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateSfdcRecoverParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcRecoverParams) { // not required
		return nil
	}

	if m.SfdcRecoverParams != nil {
		if err := m.SfdcRecoverParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcRecoverParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) validateUdaRecoverParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaRecoverParams) { // not required
		return nil
	}

	if m.UdaRecoverParams != nil {
		if err := m.UdaRecoverParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaRecoverParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore object based on the context it is used
func (m *RestoreObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchivalTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudDeployTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudReplicationTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesNamespaceRecoverParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateM365CsmRestoreAdditionalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNosqlRecoverParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneDriveRestoreEntityParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePitPreferredArchivalTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreAcropolisVMParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreAzureSQLParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreExchangeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreRdsPostgresParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreVappInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSanRecoverParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcRecoverParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaRecoverParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreObject) contextValidateArchivalTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchivalTarget != nil {

		if swag.IsZero(m.ArchivalTarget) { // not required
			return nil
		}

		if err := m.ArchivalTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateCloudDeployTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudDeployTarget != nil {

		if swag.IsZero(m.CloudDeployTarget) { // not required
			return nil
		}

		if err := m.CloudDeployTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDeployTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudDeployTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateCloudReplicationTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudReplicationTarget != nil {

		if swag.IsZero(m.CloudReplicationTarget) { // not required
			return nil
		}

		if err := m.CloudReplicationTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudReplicationTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudReplicationTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateConfigVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConfigVec); i++ {

		if m.ConfigVec[i] != nil {

			if swag.IsZero(m.ConfigVec[i]) { // not required
				return nil
			}

			if err := m.ConfigVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreObject) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateJobUID(ctx context.Context, formats strfmt.Registry) error {

	if m.JobUID != nil {

		if swag.IsZero(m.JobUID) { // not required
			return nil
		}

		if err := m.JobUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobUid")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateKubernetesNamespaceRecoverParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesNamespaceRecoverParams != nil {

		if swag.IsZero(m.KubernetesNamespaceRecoverParams) { // not required
			return nil
		}

		if err := m.KubernetesNamespaceRecoverParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesNamespaceRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesNamespaceRecoverParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateM365CsmRestoreAdditionalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.M365CsmRestoreAdditionalParams != nil {

		if swag.IsZero(m.M365CsmRestoreAdditionalParams) { // not required
			return nil
		}

		if err := m.M365CsmRestoreAdditionalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m365CsmRestoreAdditionalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m365CsmRestoreAdditionalParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateNosqlRecoverParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NosqlRecoverParams != nil {

		if swag.IsZero(m.NosqlRecoverParams) { // not required
			return nil
		}

		if err := m.NosqlRecoverParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlRecoverParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateOneDriveRestoreEntityParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OneDriveRestoreEntityParams != nil {

		if swag.IsZero(m.OneDriveRestoreEntityParams) { // not required
			return nil
		}

		if err := m.OneDriveRestoreEntityParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveRestoreEntityParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveRestoreEntityParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateParentSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentSource != nil {

		if swag.IsZero(m.ParentSource) { // not required
			return nil
		}

		if err := m.ParentSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSource")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidatePitPreferredArchivalTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.PitPreferredArchivalTarget != nil {

		if swag.IsZero(m.PitPreferredArchivalTarget) { // not required
			return nil
		}

		if err := m.PitPreferredArchivalTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pitPreferredArchivalTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pitPreferredArchivalTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateRestoreAcropolisVMParam(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreAcropolisVMParam != nil {

		if swag.IsZero(m.RestoreAcropolisVMParam) { // not required
			return nil
		}

		if err := m.RestoreAcropolisVMParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAcropolisVmParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAcropolisVmParam")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateRestoreAzureSQLParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreAzureSQLParams != nil {

		if swag.IsZero(m.RestoreAzureSQLParams) { // not required
			return nil
		}

		if err := m.RestoreAzureSQLParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAzureSqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAzureSqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateRestoreExchangeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreExchangeParams != nil {

		if swag.IsZero(m.RestoreExchangeParams) { // not required
			return nil
		}

		if err := m.RestoreExchangeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreExchangeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreExchangeParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateRestoreRdsPostgresParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreRdsPostgresParams != nil {

		if swag.IsZero(m.RestoreRdsPostgresParams) { // not required
			return nil
		}

		if err := m.RestoreRdsPostgresParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreRdsPostgresParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreRdsPostgresParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateRestoreVappInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreVappInfo != nil {

		if swag.IsZero(m.RestoreVappInfo) { // not required
			return nil
		}

		if err := m.RestoreVappInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVappInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVappInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateSanRecoverParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SanRecoverParams != nil {

		if swag.IsZero(m.SanRecoverParams) { // not required
			return nil
		}

		if err := m.SanRecoverParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sanRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sanRecoverParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateSfdcRecoverParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcRecoverParams != nil {

		if swag.IsZero(m.SfdcRecoverParams) { // not required
			return nil
		}

		if err := m.SfdcRecoverParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcRecoverParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreObject) contextValidateUdaRecoverParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaRecoverParams != nil {

		if swag.IsZero(m.UdaRecoverParams) { // not required
			return nil
		}

		if err := m.UdaRecoverParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaRecoverParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaRecoverParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreObject) UnmarshalBinary(b []byte) error {
	var res RestoreObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
