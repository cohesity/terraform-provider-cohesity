// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NasMountCredentialParams NAS Mount Credentials.
//
// Specifies the credentials to mount a volume on a NetApp server.
//
// swagger:model NasMountCredentialParams
type NasMountCredentialParams struct {

	// Specifies the domain in which this credential is valid.
	Domain *string `json:"domain,omitempty"`

	// Specifies the protocol used by the NAS server.
	// Specifies the protocol used by a NAS server.
	// 'kNoProtocol' indicates no protocol set.
	// 'kNfs3' indicates NFS v3 protocol.
	// 'kNfs4_1' indicates NFS v4.1 protocol.
	// 'kCifs1' indicates CIFS v1.0 protocol.
	// 'kCifs2' indicates CIFS v2.0 protocol.
	// 'kCifs3' indicates CIFS v3.0 protocol.
	// Enum: ["kNoProtocol","kNfs3","kNfs4_1","kCifs1","kCifs2","kCifs3"]
	NasProtocol *string `json:"nasProtocol,omitempty"`

	// Specifies the type of a NAS Object such as 'kGroup', or 'kHost'.
	// Specifies the kind of NAS mount.
	// 'kGroup' indicates top level node that holds individual NAS hosts.
	// 'kHost' indicates a single NAS path that can be mounted.
	// Enum: ["kGroup","kHost"]
	NasType *string `json:"nasType,omitempty"`

	// Specifies the password for the username to use for mounting the NAS.
	Password *string `json:"password,omitempty"`

	// Specifies the flag to disable mount point validation during registration
	// process.
	SkipValidation *bool `json:"skipValidation,omitempty"`

	// Specifies a username to use for mounting the NAS.
	Username *string `json:"username,omitempty"`
}

// Validate validates this nas mount credential params
func (m *NasMountCredentialParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNasProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNasType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nasMountCredentialParamsTypeNasProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNoProtocol","kNfs3","kNfs4_1","kCifs1","kCifs2","kCifs3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nasMountCredentialParamsTypeNasProtocolPropEnum = append(nasMountCredentialParamsTypeNasProtocolPropEnum, v)
	}
}

const (

	// NasMountCredentialParamsNasProtocolKNoProtocol captures enum value "kNoProtocol"
	NasMountCredentialParamsNasProtocolKNoProtocol string = "kNoProtocol"

	// NasMountCredentialParamsNasProtocolKNfs3 captures enum value "kNfs3"
	NasMountCredentialParamsNasProtocolKNfs3 string = "kNfs3"

	// NasMountCredentialParamsNasProtocolKNfs41 captures enum value "kNfs4_1"
	NasMountCredentialParamsNasProtocolKNfs41 string = "kNfs4_1"

	// NasMountCredentialParamsNasProtocolKCifs1 captures enum value "kCifs1"
	NasMountCredentialParamsNasProtocolKCifs1 string = "kCifs1"

	// NasMountCredentialParamsNasProtocolKCifs2 captures enum value "kCifs2"
	NasMountCredentialParamsNasProtocolKCifs2 string = "kCifs2"

	// NasMountCredentialParamsNasProtocolKCifs3 captures enum value "kCifs3"
	NasMountCredentialParamsNasProtocolKCifs3 string = "kCifs3"
)

// prop value enum
func (m *NasMountCredentialParams) validateNasProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nasMountCredentialParamsTypeNasProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NasMountCredentialParams) validateNasProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.NasProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateNasProtocolEnum("nasProtocol", "body", *m.NasProtocol); err != nil {
		return err
	}

	return nil
}

var nasMountCredentialParamsTypeNasTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kGroup","kHost"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nasMountCredentialParamsTypeNasTypePropEnum = append(nasMountCredentialParamsTypeNasTypePropEnum, v)
	}
}

const (

	// NasMountCredentialParamsNasTypeKGroup captures enum value "kGroup"
	NasMountCredentialParamsNasTypeKGroup string = "kGroup"

	// NasMountCredentialParamsNasTypeKHost captures enum value "kHost"
	NasMountCredentialParamsNasTypeKHost string = "kHost"
)

// prop value enum
func (m *NasMountCredentialParams) validateNasTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nasMountCredentialParamsTypeNasTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NasMountCredentialParams) validateNasType(formats strfmt.Registry) error {
	if swag.IsZero(m.NasType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNasTypeEnum("nasType", "body", *m.NasType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nas mount credential params based on context it is used
func (m *NasMountCredentialParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NasMountCredentialParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NasMountCredentialParams) UnmarshalBinary(b []byte) error {
	var res NasMountCredentialParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
