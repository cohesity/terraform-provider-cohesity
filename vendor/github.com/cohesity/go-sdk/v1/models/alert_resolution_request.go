// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AlertResolutionRequest Create Alert Resolution Request.
//
// Request that provides the details of a resolution and the list of
// Alert Ids to be marked resolved.
//
// swagger:model AlertResolutionRequest
type AlertResolutionRequest struct {

	// Specifies list of alerts resolved by a Resolution, which are specified by
	// Alert Ids.
	AlertIDList []string `json:"alertIdList"`

	// Specifies short description and detailed notes about the Resolution.
	ResolutionDetails *AlertResolutionInfo `json:"resolutionDetails,omitempty"`
}

// Validate validates this alert resolution request
func (m *AlertResolutionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResolutionDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertResolutionRequest) validateResolutionDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ResolutionDetails) { // not required
		return nil
	}

	if m.ResolutionDetails != nil {
		if err := m.ResolutionDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolutionDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resolutionDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this alert resolution request based on the context it is used
func (m *AlertResolutionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResolutionDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertResolutionRequest) contextValidateResolutionDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ResolutionDetails != nil {

		if swag.IsZero(m.ResolutionDetails) { // not required
			return nil
		}

		if err := m.ResolutionDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolutionDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resolutionDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertResolutionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertResolutionRequest) UnmarshalBinary(b []byte) error {
	var res AlertResolutionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
