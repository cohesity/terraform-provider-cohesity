// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ADObjectRestoreParam Restore AD objects from recycle bin or from a mounted AD snapshot database.
//
// swagger:model ADObjectRestoreParam
type ADObjectRestoreParam struct {

	// For restoring user type objects (user, inetOrgPerson or
	// organizationalPerson LDAP classes) that is returned in search result with
	// 'kRestorePasswordRequired' flag, an initial password is required. The
	// password is UTF8 string encoded. Password cannot be empty
	// and must satisfy production AD password complexity. If
	// 'kFromDestRecycleBinIfFound' is true and the user is restored from
	// production AD recycle bin, password will not be changed and the restored
	// user retains their original password. For non-user type objects, this
	// password value is ignored. The username field is ignored in the
	// credentials.
	Credentials *Credentials `json:"credentials,omitempty"`

	// Array of AD object guids to restore either from recycle bin or from AD
	// snapshot. The guid should not exist in production AD. If it exits, then
	// kDuplicate error is output in status.
	GUIDVec []string `json:"guidVec"`

	// Restore option flags of type ADObjectRestoreOptionFlags.
	OptionFlags *uint32 `json:"optionFlags,omitempty"`

	// Distinguished name(DN) of the target Organization Unit (OU) to restore
	// non-OU object. This can be empty, in which case objects are restored
	// to their original OU. The 'credential' specified must have privileges to
	// add objects to this OU. Example: 'OU=SJC,OU=EngOU,DC=contoso,DC=com'.
	// This parameter is ignored for OU objects.
	OuPath *string `json:"ouPath,omitempty"`

	// When restoring a GPO, need to know the absolute path for SYSVOL folder.
	SrcSysvolFolder *string `json:"srcSysvolFolder,omitempty"`
}

// Validate validates this a d object restore param
func (m *ADObjectRestoreParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ADObjectRestoreParam) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this a d object restore param based on the context it is used
func (m *ADObjectRestoreParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ADObjectRestoreParam) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ADObjectRestoreParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ADObjectRestoreParam) UnmarshalBinary(b []byte) error {
	var res ADObjectRestoreParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
