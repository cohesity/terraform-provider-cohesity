// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SanPort A message to encapsulate a port on a SAN device.
//
// This proto captures both iSCSI and FC ports information.
//
// swagger:model SanPort
type SanPort struct {

	// The flag that determines whether group target name is enabled or not.
	GroupTargetEnabled *bool `json:"groupTargetEnabled,omitempty"`

	// The IP address of the SAN port.
	IPAddr *string `json:"ipAddr,omitempty"`

	// The IQN of the SAN port (Set).
	Iqn *string `json:"iqn,omitempty"`

	// The IP port of the SAN port.
	Port *int32 `json:"port,omitempty"`

	// Tag to filter ports. This can be used to include additional information
	// about port which is source specific. E.g. In case of IBM FlashSystem
	// this is used to include high availability group information.
	Tag *string `json:"tag,omitempty"`

	// The world wide number (WWN) for the FC port in hex representation.
	Wwn *string `json:"wwn,omitempty"`
}

// Validate validates this san port
func (m *SanPort) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this san port based on context it is used
func (m *SanPort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SanPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SanPort) UnmarshalBinary(b []byte) error {
	var res SanPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
