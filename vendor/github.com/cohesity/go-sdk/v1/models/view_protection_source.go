// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewProtectionSource View Protection Source.
//
// Specifies a Protection Source in a View environment.
//
// swagger:model ViewProtectionSource
type ViewProtectionSource struct {

	// Specifies a unique id of a Protection Source for a View.
	// The id is unique across Cohesity Clusters.
	ID struct {
		UniversalID
	} `json:"id,omitempty"`

	// Specifies a human readable name of the Protection Source of a View.
	Name *string `json:"name,omitempty"`

	// Specifies the type of managed Object in a View Protection Source
	// environment.
	// Examples of View Objects include 'kViewBox' or 'kView'.
	// 'kViewBox' indicates Storage Domain as a Protection Source type.
	// 'kView' indicates View as a Protection Source type.
	// Enum: ["kViewBox","kView"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this view protection source
func (m *ViewProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewProtectionSource) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	return nil
}

var viewProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kViewBox","kView"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewProtectionSourceTypeTypePropEnum = append(viewProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// ViewProtectionSourceTypeKViewBox captures enum value "kViewBox"
	ViewProtectionSourceTypeKViewBox string = "kViewBox"

	// ViewProtectionSourceTypeKView captures enum value "kView"
	ViewProtectionSourceTypeKView string = "kView"
)

// prop value enum
func (m *ViewProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this view protection source based on the context it is used
func (m *ViewProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewProtectionSource) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ViewProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewProtectionSource) UnmarshalBinary(b []byte) error {
	var res ViewProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
