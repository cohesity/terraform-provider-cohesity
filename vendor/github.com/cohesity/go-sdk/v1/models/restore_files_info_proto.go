// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreFilesInfoProto Message that encapsulates information about restore file tasks for any of
// the environments we support. Environment specific restore infos are defined
// as extensions to this proto.
//
// Each available extension is listed below along with the location of the
// proto file (relative to magneto/connectors) where it is defined.
//
// RestoreFilesInfoProto extension                  Location               Extn
// =============================================================================
// vmware::RestoreFilesInfo::vmware_restore_files_info
//
// vmware/vmware.proto     100
//
// AgentRestoreFilesInfo::agent_restore_files_info  base/agent.proto        101
// file::RestoreFilesInfo::restore_files_info
//
// file/file.proto         102
//
// hyperv::RestoreFilesInfo::hyperv_restore_files_info
//
// hyperv/hyperv.proto     103
//
// =============================================================================
//
// swagger:model RestoreFilesInfoProto
type RestoreFilesInfoProto struct {

	// The path that the user should use to download files through the UI. If
	// only a single file needs to be downloaded, this will be the path to that
	// file. If a directory or multiple files & directories need to be
	// downloaded, this will be the path to the .zip file to download. Only
	// applicable to a download files task.
	DownloadFilesPath *string `json:"downloadFilesPath,omitempty"`

	// If the restore files failed, this field may contain the cause of the
	// failure.
	Error *ErrorProto `json:"error,omitempty"`

	// The expiry time of the view. Applicable for download files task (if filled
	// by adapter).
	ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

	// Contains the connector params of the proxy server if one was specified.
	ProxyEntityConnectorParams *ConnectorParams `json:"proxyEntityConnectorParams,omitempty"`

	// Contains the result information of the restored files.
	RestoreFilesResultVec []*RestoreFileResultInfo `json:"restoreFilesResultVec"`

	// This is the timestamp at which the slave task started.
	SlaveTaskStartTimeUsecs *int64 `json:"slaveTaskStartTimeUsecs,omitempty"`

	// Specifies the target type for the task. The field is only valid if the
	// task has got a permit.
	TargetType *int32 `json:"targetType,omitempty"`

	// If an error was encountered during teardown of the setup (for ex:
	// unmounting the datastore from the host), then this field will contain
	// the cause of the failure.
	TeardownError *ErrorProto `json:"teardownError,omitempty"`

	// The type of environment this restore files info pertains to.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this restore files info proto
func (m *RestoreFilesInfoProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyEntityConnectorParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreFilesResultVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeardownError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreFilesInfoProto) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFilesInfoProto) validateProxyEntityConnectorParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyEntityConnectorParams) { // not required
		return nil
	}

	if m.ProxyEntityConnectorParams != nil {
		if err := m.ProxyEntityConnectorParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyEntityConnectorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyEntityConnectorParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFilesInfoProto) validateRestoreFilesResultVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreFilesResultVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RestoreFilesResultVec); i++ {
		if swag.IsZero(m.RestoreFilesResultVec[i]) { // not required
			continue
		}

		if m.RestoreFilesResultVec[i] != nil {
			if err := m.RestoreFilesResultVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreFilesResultVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreFilesResultVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreFilesInfoProto) validateTeardownError(formats strfmt.Registry) error {
	if swag.IsZero(m.TeardownError) { // not required
		return nil
	}

	if m.TeardownError != nil {
		if err := m.TeardownError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teardownError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("teardownError")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore files info proto based on the context it is used
func (m *RestoreFilesInfoProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxyEntityConnectorParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreFilesResultVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeardownError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreFilesInfoProto) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFilesInfoProto) contextValidateProxyEntityConnectorParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxyEntityConnectorParams != nil {

		if swag.IsZero(m.ProxyEntityConnectorParams) { // not required
			return nil
		}

		if err := m.ProxyEntityConnectorParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyEntityConnectorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyEntityConnectorParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFilesInfoProto) contextValidateRestoreFilesResultVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestoreFilesResultVec); i++ {

		if m.RestoreFilesResultVec[i] != nil {

			if swag.IsZero(m.RestoreFilesResultVec[i]) { // not required
				return nil
			}

			if err := m.RestoreFilesResultVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreFilesResultVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreFilesResultVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreFilesInfoProto) contextValidateTeardownError(ctx context.Context, formats strfmt.Registry) error {

	if m.TeardownError != nil {

		if swag.IsZero(m.TeardownError) { // not required
			return nil
		}

		if err := m.TeardownError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teardownError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("teardownError")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreFilesInfoProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreFilesInfoProto) UnmarshalBinary(b []byte) error {
	var res RestoreFilesInfoProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
