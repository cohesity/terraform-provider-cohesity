// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterConfigProtoVaultCloudProperties The following represents the cloud properties proto which handles
// different properties supported by different cloud providers.
//
// swagger:model ClusterConfigProto_Vault_CloudProperties
type ClusterConfigProtoVaultCloudProperties struct {

	// amazon properties
	AmazonProperties *ClusterConfigProtoVaultCloudPropertiesAmazonProperties `json:"amazonProperties,omitempty"`

	// azure properties
	AzureProperties *ClusterConfigProtoVaultCloudPropertiesAzureProperties `json:"azureProperties,omitempty"`

	// google properties
	GoogleProperties *ClusterConfigProtoVaultCloudPropertiesGoogleProperties `json:"googleProperties,omitempty"`

	// oracle properties
	OracleProperties *ClusterConfigProtoVaultCloudPropertiesOracleProperties `json:"oracleProperties,omitempty"`

	// Encapsulates various properties of S3 Compatible targets.
	S3CompatibleProperties *ClusterConfigProtoVaultCloudPropertiesS3CompatibleProperties `json:"s3CompatibleProperties,omitempty"`
}

// Validate validates this cluster config proto vault cloud properties
func (m *ClusterConfigProtoVaultCloudProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGoogleProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3CompatibleProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigProtoVaultCloudProperties) validateAmazonProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.AmazonProperties) { // not required
		return nil
	}

	if m.AmazonProperties != nil {
		if err := m.AmazonProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigProtoVaultCloudProperties) validateAzureProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureProperties) { // not required
		return nil
	}

	if m.AzureProperties != nil {
		if err := m.AzureProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigProtoVaultCloudProperties) validateGoogleProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.GoogleProperties) { // not required
		return nil
	}

	if m.GoogleProperties != nil {
		if err := m.GoogleProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("googleProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("googleProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigProtoVaultCloudProperties) validateOracleProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleProperties) { // not required
		return nil
	}

	if m.OracleProperties != nil {
		if err := m.OracleProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigProtoVaultCloudProperties) validateS3CompatibleProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.S3CompatibleProperties) { // not required
		return nil
	}

	if m.S3CompatibleProperties != nil {
		if err := m.S3CompatibleProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3CompatibleProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3CompatibleProperties")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster config proto vault cloud properties based on the context it is used
func (m *ClusterConfigProtoVaultCloudProperties) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmazonProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGoogleProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3CompatibleProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigProtoVaultCloudProperties) contextValidateAmazonProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.AmazonProperties != nil {

		if swag.IsZero(m.AmazonProperties) { // not required
			return nil
		}

		if err := m.AmazonProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigProtoVaultCloudProperties) contextValidateAzureProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureProperties != nil {

		if swag.IsZero(m.AzureProperties) { // not required
			return nil
		}

		if err := m.AzureProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigProtoVaultCloudProperties) contextValidateGoogleProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.GoogleProperties != nil {

		if swag.IsZero(m.GoogleProperties) { // not required
			return nil
		}

		if err := m.GoogleProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("googleProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("googleProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigProtoVaultCloudProperties) contextValidateOracleProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleProperties != nil {

		if swag.IsZero(m.OracleProperties) { // not required
			return nil
		}

		if err := m.OracleProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleProperties")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterConfigProtoVaultCloudProperties) contextValidateS3CompatibleProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.S3CompatibleProperties != nil {

		if swag.IsZero(m.S3CompatibleProperties) { // not required
			return nil
		}

		if err := m.S3CompatibleProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3CompatibleProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3CompatibleProperties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterConfigProtoVaultCloudProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterConfigProtoVaultCloudProperties) UnmarshalBinary(b []byte) error {
	var res ClusterConfigProtoVaultCloudProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
