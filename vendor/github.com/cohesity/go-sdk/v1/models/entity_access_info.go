// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntityAccessInfo entity access info
//
// swagger:model EntityAccessInfo
type EntityAccessInfo struct {

	// The endpoint information of the delegate agent to access the entity.
	// NOTE: This takes precedence when estabilishing connections to over
	// endpoint. This is presently used in Hyper-V environment.
	AgentEndpoint *string `json:"agentEndpoint,omitempty"`

	// The agent port information to reach the agent.
	AgentPort *int32 `json:"agentPort,omitempty"`

	// Credentials that will be used to login to the environment.
	Credentials *PrivateCredentials `json:"credentials,omitempty"`

	// The endpoint URL to access the entity.
	Endpoint *string `json:"endpoint,omitempty"`

	// Optional type of the host (such as Windows/Linux).
	HostType *int32 `json:"hostType,omitempty"`

	// Stores the region name which decides the endpoint to be used by all
	// o365 connector ops.
	Office365Region *string `json:"office365Region,omitempty"`

	// The list of entity ids of the windows physical host which will be used for
	// backup and recovery of templates of the site that belong to a o365 domain.
	// This will be used for Exchange Online PST download as well.
	ProxyEntityIDVec []int64 `json:"proxyEntityIdVec"`

	// The type of environment behind the endpoint.
	Type *int32 `json:"type,omitempty"`

	// Whether OAuth should be used for authentication with EWS API (outlook
	// backup), applicable only for Exchange Online.
	UseOutlookEwsOauth *bool `json:"useOutlookEwsOauth,omitempty"`
}

// Validate validates this entity access info
func (m *EntityAccessInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityAccessInfo) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this entity access info based on the context it is used
func (m *EntityAccessInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityAccessInfo) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityAccessInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityAccessInfo) UnmarshalBinary(b []byte) error {
	var res EntityAccessInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
