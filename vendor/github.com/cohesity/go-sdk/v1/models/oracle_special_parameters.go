// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleSpecialParameters Oracle Special Parameters.
//
// Specifies special settings applicable for 'kOracle' environment.
//
// swagger:model OracleSpecialParameters
type OracleSpecialParameters struct {

	// Array of application parameters i.e. database parameters for
	// standalone/RAC and DG parameters for data guard.
	//
	// Specifies the list of parameters required at app entity level.
	AppParamsList []*OracleAppParams `json:"appParamsList"`

	// Array of Ids of Application Entities like Oracle instances, and
	// databases that should be protected in a Protection Source.
	//
	// Specifies the subset of application entities like Oracle instances, and
	// databases to protect in a Protection Source of type kOracle'. If
	// not specified, all application entities on the Protection Source.
	ApplicationEntityIds []int64 `json:"applicationEntityIds"`

	// Specifies if the mountpoints for Oracle view for the current host are to
	// be persisted.
	PersistMountpoints *bool `json:"persistMountpoints,omitempty"`
}

// Validate validates this oracle special parameters
func (m *OracleSpecialParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppParamsList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleSpecialParameters) validateAppParamsList(formats strfmt.Registry) error {
	if swag.IsZero(m.AppParamsList) { // not required
		return nil
	}

	for i := 0; i < len(m.AppParamsList); i++ {
		if swag.IsZero(m.AppParamsList[i]) { // not required
			continue
		}

		if m.AppParamsList[i] != nil {
			if err := m.AppParamsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appParamsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appParamsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this oracle special parameters based on the context it is used
func (m *OracleSpecialParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppParamsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleSpecialParameters) contextValidateAppParamsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppParamsList); i++ {

		if m.AppParamsList[i] != nil {

			if swag.IsZero(m.AppParamsList[i]) { // not required
				return nil
			}

			if err := m.AppParamsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appParamsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appParamsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleSpecialParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleSpecialParameters) UnmarshalBinary(b []byte) error {
	var res OracleSpecialParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
