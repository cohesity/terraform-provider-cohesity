// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreAppObject Message that captures information about an application object being
// restored.
//
// swagger:model RestoreAppObject
type RestoreAppObject struct {

	// Any additional parameters associated with a restore task.
	AdditionalParams *RestoreTaskAdditionalParams `json:"additionalParams,omitempty"`

	// The application entity to restore (for example, kSQL, kOracle). If this is
	// not set, all the apps in the owning entity will be restored.
	AppEntity *EntityProto `json:"appEntity,omitempty"`

	// The proper display name of this object in the UI, if app_entity is not
	// empty. For example, for SQL databases the name should also include the
	// instance name.
	DisplayName *string `json:"displayName,omitempty"`

	// Universal id of entity node created in graphDB to refer the entity created
	// by clone task.
	EntityNodeUID *UniversalIDProto `json:"entityNodeUid,omitempty"`

	// The restore params for the RestoreAppObject.
	RestoreParams *RestoreAppObjectParams `json:"restoreParams,omitempty"`

	// Universal id of task node created in graphDB to refer the clone task.
	TaskNodeUID *UniversalIDProto `json:"taskNodeUid,omitempty"`
}

// Validate validates this restore app object
func (m *RestoreAppObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityNodeUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskNodeUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAppObject) validateAdditionalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalParams) { // not required
		return nil
	}

	if m.AdditionalParams != nil {
		if err := m.AdditionalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("additionalParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppObject) validateAppEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.AppEntity) { // not required
		return nil
	}

	if m.AppEntity != nil {
		if err := m.AppEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppObject) validateEntityNodeUID(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityNodeUID) { // not required
		return nil
	}

	if m.EntityNodeUID != nil {
		if err := m.EntityNodeUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityNodeUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityNodeUid")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppObject) validateRestoreParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreParams) { // not required
		return nil
	}

	if m.RestoreParams != nil {
		if err := m.RestoreParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppObject) validateTaskNodeUID(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskNodeUID) { // not required
		return nil
	}

	if m.TaskNodeUID != nil {
		if err := m.TaskNodeUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskNodeUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taskNodeUid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore app object based on the context it is used
func (m *RestoreAppObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityNodeUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskNodeUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAppObject) contextValidateAdditionalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AdditionalParams != nil {

		if swag.IsZero(m.AdditionalParams) { // not required
			return nil
		}

		if err := m.AdditionalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("additionalParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppObject) contextValidateAppEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.AppEntity != nil {

		if swag.IsZero(m.AppEntity) { // not required
			return nil
		}

		if err := m.AppEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppObject) contextValidateEntityNodeUID(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityNodeUID != nil {

		if swag.IsZero(m.EntityNodeUID) { // not required
			return nil
		}

		if err := m.EntityNodeUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityNodeUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityNodeUid")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppObject) contextValidateRestoreParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreParams != nil {

		if swag.IsZero(m.RestoreParams) { // not required
			return nil
		}

		if err := m.RestoreParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppObject) contextValidateTaskNodeUID(ctx context.Context, formats strfmt.Registry) error {

	if m.TaskNodeUID != nil {

		if swag.IsZero(m.TaskNodeUID) { // not required
			return nil
		}

		if err := m.TaskNodeUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskNodeUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taskNodeUid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreAppObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreAppObject) UnmarshalBinary(b []byte) error {
	var res RestoreAppObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
