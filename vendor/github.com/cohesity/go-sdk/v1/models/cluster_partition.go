// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterPartition Cluster Partition.
//
// Provides details about a Cluster Partition.
//
// swagger:model ClusterPartition
type ClusterPartition struct {

	// Specifies that hostname that resolves to one or more Virtual IP
	// Addresses (VIPs).
	HostName *string `json:"hostName,omitempty"`

	// Specifies a unique identifier for the Cluster Partition.
	ID *int64 `json:"id,omitempty"`

	// Specifies the name of the Cluster Partition.
	Name *string `json:"name,omitempty"`

	// Array of Node Ids.
	//
	// Specifies a list of Node Ids that assigned to the Cluster Partition.
	NodeIds []int64 `json:"nodeIds"`

	// Array of VIPs.
	//
	// Specifies a list of Virtual IP Addresses (VIPs) that route
	// network traffic to the Cluster Partition.
	Vips []string `json:"vips"`

	// Array of VLAN IPs.
	//
	// Specifies a list of VLAN IP Addresses that route network traffic
	// within certain VLANs to the Cluster Partition.
	VlanIps []string `json:"vlanIps"`

	// Array of VLANs.
	//
	// Specifies a list of VLANs for the Cluster Partition.
	Vlans []*Vlan `json:"vlans"`
}

// Validate validates this cluster partition
func (m *ClusterPartition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVlans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterPartition) validateVlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlans) { // not required
		return nil
	}

	for i := 0; i < len(m.Vlans); i++ {
		if swag.IsZero(m.Vlans[i]) { // not required
			continue
		}

		if m.Vlans[i] != nil {
			if err := m.Vlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster partition based on the context it is used
func (m *ClusterPartition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterPartition) contextValidateVlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vlans); i++ {

		if m.Vlans[i] != nil {

			if swag.IsZero(m.Vlans[i]) { // not required
				return nil
			}

			if err := m.Vlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterPartition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterPartition) UnmarshalBinary(b []byte) error {
	var res ClusterPartition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
