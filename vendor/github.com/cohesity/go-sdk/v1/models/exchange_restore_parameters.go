// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExchangeRestoreParameters Exchange Application Server Restore Parameters.
//
// Specifies the exchange restore parameters.
//
// swagger:model ExchangeRestoreParameters
type ExchangeRestoreParameters struct {

	// Specifies the Exchange restore type.
	// Specifies the type of Exchange restore.
	//
	// 'kNone' specifies no special behaviour.
	// 'kView' specifies the option to create a view which cann be used by the
	// external tools like Kroll to perform mailbox or mail-item recovery.
	// 'kDatabase' specifies the option to restore an Exchange database.
	// Enum: ["kNone","kView","kDatabase"]
	Type *string `json:"type,omitempty"`

	// Specifies the paramters for the restore of type kView.
	ViewParameters *ExchangeRestoreViewParameters `json:"viewParameters,omitempty"`
}

// Validate validates this exchange restore parameters
func (m *ExchangeRestoreParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var exchangeRestoreParametersTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNone","kView","kDatabase"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exchangeRestoreParametersTypeTypePropEnum = append(exchangeRestoreParametersTypeTypePropEnum, v)
	}
}

const (

	// ExchangeRestoreParametersTypeKNone captures enum value "kNone"
	ExchangeRestoreParametersTypeKNone string = "kNone"

	// ExchangeRestoreParametersTypeKView captures enum value "kView"
	ExchangeRestoreParametersTypeKView string = "kView"

	// ExchangeRestoreParametersTypeKDatabase captures enum value "kDatabase"
	ExchangeRestoreParametersTypeKDatabase string = "kDatabase"
)

// prop value enum
func (m *ExchangeRestoreParameters) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exchangeRestoreParametersTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExchangeRestoreParameters) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ExchangeRestoreParameters) validateViewParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewParameters) { // not required
		return nil
	}

	if m.ViewParameters != nil {
		if err := m.ViewParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exchange restore parameters based on the context it is used
func (m *ExchangeRestoreParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateViewParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeRestoreParameters) contextValidateViewParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewParameters != nil {

		if swag.IsZero(m.ViewParameters) { // not required
			return nil
		}

		if err := m.ViewParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeRestoreParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeRestoreParameters) UnmarshalBinary(b []byte) error {
	var res ExchangeRestoreParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
