// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateHypervEntity private hyperv entity
//
// swagger:model PrivateHypervEntity
type PrivateHypervEntity struct {

	// This will be set for Hyper-V host entities whose agent cannot be reached,
	// either because it is not installed or due some error.
	AgentError *PrivateErrorProto `json:"agentError,omitempty"`

	// Information about the Agents (see agent.proto for details). The kHost case
	// a single one while the kWindowsCluster has several.
	AgentStatusVec []*HostAgentStatus `json:"agentStatusVec"`

	// Supported backup type.
	BackupType *int32 `json:"backupType,omitempty"`

	// SCVMM build number.
	BuildNumber *string `json:"buildNumber,omitempty"`

	// This is populated for entities of type kHostCluster.
	ClusterName *string `json:"clusterName,omitempty"`

	// This is populated for entities of type kDatastore.
	DatastoreInfo *PrivateDatastoreInfo `json:"datastoreInfo,omitempty"`

	// This is a general description that could be set for some entities.
	Description *string `json:"description,omitempty"`

	// This is populated for entities of type kHypervHost.
	DomainName *string `json:"domainName,omitempty"`

	// For some entities such as a VirtualMachine, a different id will be present
	// on the HyperV host. This captures that.
	HypervUUID *string `json:"hypervUuid,omitempty"`

	// A human readable name for the object.
	Name *string `json:"name,omitempty"`

	// Optional list of tag attributes associated with this entity.
	TagAttributesVec []*TagAttributes `json:"tagAttributesVec"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// The UUID of the object. This is set for all the objects returned from the
	// Hyper-V environment and is unique within a registered source.
	UUID *string `json:"uuid,omitempty"`

	// version
	Version *int32 `json:"version,omitempty"`

	// This is populated for entities of type kVirtualMachine.
	VMInfo *VirtualMachineInfo `json:"vmInfo,omitempty"`
}

// Validate validates this private hyperv entity
func (m *PrivateHypervEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentStatusVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatastoreInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagAttributesVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateHypervEntity) validateAgentError(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentError) { // not required
		return nil
	}

	if m.AgentError != nil {
		if err := m.AgentError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentError")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateHypervEntity) validateAgentStatusVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentStatusVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentStatusVec); i++ {
		if swag.IsZero(m.AgentStatusVec[i]) { // not required
			continue
		}

		if m.AgentStatusVec[i] != nil {
			if err := m.AgentStatusVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentStatusVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentStatusVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateHypervEntity) validateDatastoreInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreInfo) { // not required
		return nil
	}

	if m.DatastoreInfo != nil {
		if err := m.DatastoreInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateHypervEntity) validateTagAttributesVec(formats strfmt.Registry) error {
	if swag.IsZero(m.TagAttributesVec) { // not required
		return nil
	}

	for i := 0; i < len(m.TagAttributesVec); i++ {
		if swag.IsZero(m.TagAttributesVec[i]) { // not required
			continue
		}

		if m.TagAttributesVec[i] != nil {
			if err := m.TagAttributesVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateHypervEntity) validateVMInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VMInfo) { // not required
		return nil
	}

	if m.VMInfo != nil {
		if err := m.VMInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private hyperv entity based on the context it is used
func (m *PrivateHypervEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentStatusVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatastoreInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagAttributesVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateHypervEntity) contextValidateAgentError(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentError != nil {

		if swag.IsZero(m.AgentError) { // not required
			return nil
		}

		if err := m.AgentError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentError")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateHypervEntity) contextValidateAgentStatusVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AgentStatusVec); i++ {

		if m.AgentStatusVec[i] != nil {

			if swag.IsZero(m.AgentStatusVec[i]) { // not required
				return nil
			}

			if err := m.AgentStatusVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentStatusVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentStatusVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateHypervEntity) contextValidateDatastoreInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DatastoreInfo != nil {

		if swag.IsZero(m.DatastoreInfo) { // not required
			return nil
		}

		if err := m.DatastoreInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateHypervEntity) contextValidateTagAttributesVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagAttributesVec); i++ {

		if m.TagAttributesVec[i] != nil {

			if swag.IsZero(m.TagAttributesVec[i]) { // not required
				return nil
			}

			if err := m.TagAttributesVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateHypervEntity) contextValidateVMInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.VMInfo != nil {

		if swag.IsZero(m.VMInfo) { // not required
			return nil
		}

		if err := m.VMInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateHypervEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateHypervEntity) UnmarshalBinary(b []byte) error {
	var res PrivateHypervEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
