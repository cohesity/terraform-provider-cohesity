// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateEntityProto private entity proto
//
// swagger:model PrivateEntityProto
type PrivateEntityProto struct {

	// The acropolis specific structure. Set when type is kAcropolis.
	AcropolisEntity *PrivateAcropolisEntity `json:"acropolisEntity,omitempty"`

	// If this is set, EntityProto refers to an Active Directory entity,
	AdEntity *PrivateAdEntity `json:"adEntity,omitempty"`

	// Entity info for the additional environments supported by this object.
	AdditionalEntityInfoVec []*AdditionalEntityInfo `json:"additionalEntityInfoVec"`

	// The Agent-specific structure. Set when type is kAgent, or kPhysical.
	AgentEntity *PrivateAgentEntity `json:"agentEntity,omitempty"`

	// If this is set, EntityProto refers to an AWS entity.
	AwsEntity *PrivateAwsEntity `json:"awsEntity,omitempty"`

	// If this is set, EntityProto refers to an Azure entity.
	AzureEntity *PrivateAzureEntity `json:"azureEntity,omitempty"`

	// The cassandra db specific structure. Set when type is kCassandra.
	CassandraEntity *PrivateCassandraEntity `json:"cassandraEntity,omitempty"`

	// This is populated with magneto clone task id, if the entity is created by
	// clone workflow.
	CloneTaskID *int64 `json:"cloneTaskId,omitempty"`

	// Each realm is collection of connector groups. Each connector group is
	// collection of Rigel/hyx.
	// Each entity will be tagged with connector group id.
	// Realm -> connector_group -> {Rigel/hyx ...}
	ConnectorGroupID *int64 `json:"connectorGroupId,omitempty"`

	// The Couchbase specific structure. Set when type is kCouchbase.
	CouchbaseEntity *PrivateCouchbaseEntity `json:"couchbaseEntity,omitempty"`

	// Contains a user provided custom name for this entity
	CustomName *string `json:"customName,omitempty"`

	// Contains the inner object's name or a human-readable string made off the
	// salient attributes. This is only plumbed when Entity objects are exposed
	// to Iris BE or to Yoda.
	DisplayName *string `json:"displayName,omitempty"`

	// The Elastifile specific structure. Set when type is kElastifile.
	ElastifileEntity *PrivateElastifileEntity `json:"elastifileEntity,omitempty"`

	// An ID generated by magneto to uniquely identify an entity.
	EntityID *EntityIDProto `json:"entityId,omitempty"`

	// If this is set, EntityProto refers to an Exchange entity.
	ExchangeEntity *PrivateExchangeEntity `json:"exchangeEntity,omitempty"`

	// If this is set, EntityProto refers to a FlashBlade entity.
	FlashbladeEntity *PrivateFlashbladeEntity `json:"flashbladeEntity,omitempty"`

	// If this is set, EntityProto refers to a GCP entity.
	GcpEntity *PrivateGcpEntity `json:"gcpEntity,omitempty"`

	// The generic NAS structure. Set when type is kGenericNas.
	GenericNasEntity *PrivateGenericNasEntity `json:"genericNasEntity,omitempty"`

	// The GPFS specific structure. Set when type is kGPFS.
	GpfsEntity *PrivateGpfsEntity `json:"gpfsEntity,omitempty"`

	// The HBase specific structure. Set when type is kHBase.
	HbaseEntity *PrivateHbaseEntity `json:"hbaseEntity,omitempty"`

	// The Hdfs specific structure. Set when type is kHdfs.
	HdfsEntity *PrivateHdfsEntity `json:"hdfsEntity,omitempty"`

	// The Hive specific structure. Set when type is kHive.
	HiveEntity *PrivateHiveEntity `json:"hiveEntity,omitempty"`

	// If this is set, EntityProto refers to a HyperFlex entity.
	HyperflexEntity *PrivateHyperflexEntity `json:"hyperflexEntity,omitempty"`

	// The Hyperv-specific structure. Set when type is kHyperv.
	HypervEntity *PrivateHypervEntity `json:"hypervEntity,omitempty"`

	// A stable ID generated by Magneto that uniquely identifies this entity.
	// The ID will only occupy the first 53 bits, which is required since this
	// ID may be passed to javascript which only considers the first 53 bits.
	// Note: Populate the id value in entity_id field below as well. This field
	// will be deprecated in future.
	ID *int64 `json:"id,omitempty"`

	// This flag is used to identify if the entity held in this proto is a clone
	// entity. This is set to true if the entity is clone and false otherwise.
	IsClone *bool `json:"isClone,omitempty"`

	// The Isilon specific structure. Set when type is kIsilon.
	IsilonEntity *PrivateIsilonEntity `json:"isilonEntity,omitempty"`

	// The Kubernetes specific structure. Set when type is kKubernetes.
	KubernetesEntity *PrivateKubernetesEntity `json:"kubernetesEntity,omitempty"`

	// The KVM specific structure. Set when type is kKvm.
	KvmEntity *PrivateKvmEntity `json:"kvmEntity,omitempty"`

	// The MongoDB specific structure. Set when type is kMongoDB.
	MongodbEntity *PrivateMongodbEntity `json:"mongodbEntity,omitempty"`

	// If this is set, EntityProto refers to a Netapp entity.
	NetappEntity *PrivateNetappEntity `json:"netappEntity,omitempty"`

	// The network-realm id of the tenant through which this entity should be
	// accessible from the cluster. This realm could be a collection of
	// Rigel/HyX. Non root entities can also have this value set. If it is set
	// for non root entities then this realm should be preferred over the root
	// entity's realm.
	NetworkRealmID *int64 `json:"networkRealmId,omitempty"`

	// If this is set, EntityProto refers to an o365 entity.
	O365Entity *PrivateO365Entity `json:"o365Entity,omitempty"`

	// The Oracle specific structure. Set when type is kOracle.
	OracleEntity *PrivateOracleEntity `json:"oracleEntity,omitempty"`

	// The ID of the top-level parent source that is managing this entity. For
	// example, in a VMware environment, this would be the ID of the vCenter or
	// the standalone ESXi host managing the entity.
	ParentID *int64 `json:"parentId,omitempty"`

	// If this is set, EntityProto refers to a Physical entity.
	PhysicalEntity *PrivatePhysicalEntity `json:"physicalEntity,omitempty"`

	// If this is set, EntityProto refers to one of the following
	// FlashArrays -
	// Pure FlashArray, Numble FlashArray, IBM FlashSystem
	PureEntity *PrivatePureEntity `json:"pureEntity,omitempty"`

	// The sfdc specific structure. Set when type is kSfdc.
	SfdcEntity *PrivateSfdcEntity `json:"sfdcEntity,omitempty"`

	// Size information for this entity. This is populated for leaf level
	// entities only (as information for non-leaf level entities could be
	// dynamically computed). Key for this map is the entity id. The common
	// case is to have only one entry in this map.
	//
	// This is a map (as opposed to a singular field) to support the fact that
	// O365 adapter has something called satellite entities (See the field
	// additional_entity_info_vec above). In that case, the map may contain
	// information about satellite entities as well.
	SizeInfo []*EntityProtoSizeInfoEntry `json:"sizeInfo"`

	// If this is set, EntityProto refers to a SQL entity.
	SQLEntity *PrivateSQLEntity `json:"sqlEntity,omitempty"`

	// The type of environment this entity pertains to.
	Type *int32 `json:"type,omitempty"`

	// The UDA specific structure. Set when type is kUDA.
	UdaEntity *PrivateUdaEntity `json:"udaEntity,omitempty"`

	// If this is set, EntityProto refers to a View entity.
	ViewEntity *PrivateViewEntity `json:"viewEntity,omitempty"`

	// If this is set, EntityProto refers to a VMware entity.
	VmwareEntity *PrivateVmwareEntity `json:"vmwareEntity,omitempty"`
}

// Validate validates this private entity proto
func (m *PrivateEntityProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcropolisEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalEntityInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouchbaseEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElastifileEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlashbladeEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericNasEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpfsEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHyperflexEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKvmEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO365Entity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePureEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSizeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateEntityProto) validateAcropolisEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisEntity) { // not required
		return nil
	}

	if m.AcropolisEntity != nil {
		if err := m.AcropolisEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateAdEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.AdEntity) { // not required
		return nil
	}

	if m.AdEntity != nil {
		if err := m.AdEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateAdditionalEntityInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalEntityInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalEntityInfoVec); i++ {
		if swag.IsZero(m.AdditionalEntityInfoVec[i]) { // not required
			continue
		}

		if m.AdditionalEntityInfoVec[i] != nil {
			if err := m.AdditionalEntityInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalEntityInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additionalEntityInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateEntityProto) validateAgentEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentEntity) { // not required
		return nil
	}

	if m.AgentEntity != nil {
		if err := m.AgentEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateAwsEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsEntity) { // not required
		return nil
	}

	if m.AwsEntity != nil {
		if err := m.AwsEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateAzureEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureEntity) { // not required
		return nil
	}

	if m.AzureEntity != nil {
		if err := m.AzureEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateCassandraEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraEntity) { // not required
		return nil
	}

	if m.CassandraEntity != nil {
		if err := m.CassandraEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateCouchbaseEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.CouchbaseEntity) { // not required
		return nil
	}

	if m.CouchbaseEntity != nil {
		if err := m.CouchbaseEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateElastifileEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ElastifileEntity) { // not required
		return nil
	}

	if m.ElastifileEntity != nil {
		if err := m.ElastifileEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateEntityID(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityID) { // not required
		return nil
	}

	if m.EntityID != nil {
		if err := m.EntityID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityId")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateExchangeEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeEntity) { // not required
		return nil
	}

	if m.ExchangeEntity != nil {
		if err := m.ExchangeEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateFlashbladeEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.FlashbladeEntity) { // not required
		return nil
	}

	if m.FlashbladeEntity != nil {
		if err := m.FlashbladeEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateGcpEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpEntity) { // not required
		return nil
	}

	if m.GcpEntity != nil {
		if err := m.GcpEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateGenericNasEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.GenericNasEntity) { // not required
		return nil
	}

	if m.GenericNasEntity != nil {
		if err := m.GenericNasEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateGpfsEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.GpfsEntity) { // not required
		return nil
	}

	if m.GpfsEntity != nil {
		if err := m.GpfsEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateHbaseEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseEntity) { // not required
		return nil
	}

	if m.HbaseEntity != nil {
		if err := m.HbaseEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateHdfsEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsEntity) { // not required
		return nil
	}

	if m.HdfsEntity != nil {
		if err := m.HdfsEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateHiveEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveEntity) { // not required
		return nil
	}

	if m.HiveEntity != nil {
		if err := m.HiveEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateHyperflexEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.HyperflexEntity) { // not required
		return nil
	}

	if m.HyperflexEntity != nil {
		if err := m.HyperflexEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hyperflexEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hyperflexEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateHypervEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervEntity) { // not required
		return nil
	}

	if m.HypervEntity != nil {
		if err := m.HypervEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateIsilonEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonEntity) { // not required
		return nil
	}

	if m.IsilonEntity != nil {
		if err := m.IsilonEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateKubernetesEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesEntity) { // not required
		return nil
	}

	if m.KubernetesEntity != nil {
		if err := m.KubernetesEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateKvmEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.KvmEntity) { // not required
		return nil
	}

	if m.KvmEntity != nil {
		if err := m.KvmEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvmEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kvmEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateMongodbEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.MongodbEntity) { // not required
		return nil
	}

	if m.MongodbEntity != nil {
		if err := m.MongodbEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateNetappEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.NetappEntity) { // not required
		return nil
	}

	if m.NetappEntity != nil {
		if err := m.NetappEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateO365Entity(formats strfmt.Registry) error {
	if swag.IsZero(m.O365Entity) { // not required
		return nil
	}

	if m.O365Entity != nil {
		if err := m.O365Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Entity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateOracleEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleEntity) { // not required
		return nil
	}

	if m.OracleEntity != nil {
		if err := m.OracleEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validatePhysicalEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalEntity) { // not required
		return nil
	}

	if m.PhysicalEntity != nil {
		if err := m.PhysicalEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validatePureEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.PureEntity) { // not required
		return nil
	}

	if m.PureEntity != nil {
		if err := m.PureEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pureEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pureEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateSfdcEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcEntity) { // not required
		return nil
	}

	if m.SfdcEntity != nil {
		if err := m.SfdcEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateSizeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SizeInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.SizeInfo); i++ {
		if swag.IsZero(m.SizeInfo[i]) { // not required
			continue
		}

		if m.SizeInfo[i] != nil {
			if err := m.SizeInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sizeInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sizeInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateEntityProto) validateSQLEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLEntity) { // not required
		return nil
	}

	if m.SQLEntity != nil {
		if err := m.SQLEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateUdaEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaEntity) { // not required
		return nil
	}

	if m.UdaEntity != nil {
		if err := m.UdaEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateViewEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewEntity) { // not required
		return nil
	}

	if m.ViewEntity != nil {
		if err := m.ViewEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) validateVmwareEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareEntity) { // not required
		return nil
	}

	if m.VmwareEntity != nil {
		if err := m.VmwareEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private entity proto based on the context it is used
func (m *PrivateEntityProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcropolisEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdditionalEntityInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCouchbaseEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElastifileEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlashbladeEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenericNasEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpfsEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHyperflexEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKvmEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongodbEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateO365Entity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePureEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSizeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateEntityProto) contextValidateAcropolisEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.AcropolisEntity != nil {

		if swag.IsZero(m.AcropolisEntity) { // not required
			return nil
		}

		if err := m.AcropolisEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateAdEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.AdEntity != nil {

		if swag.IsZero(m.AdEntity) { // not required
			return nil
		}

		if err := m.AdEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateAdditionalEntityInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalEntityInfoVec); i++ {

		if m.AdditionalEntityInfoVec[i] != nil {

			if swag.IsZero(m.AdditionalEntityInfoVec[i]) { // not required
				return nil
			}

			if err := m.AdditionalEntityInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalEntityInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additionalEntityInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateEntityProto) contextValidateAgentEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentEntity != nil {

		if swag.IsZero(m.AgentEntity) { // not required
			return nil
		}

		if err := m.AgentEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateAwsEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsEntity != nil {

		if swag.IsZero(m.AwsEntity) { // not required
			return nil
		}

		if err := m.AwsEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateAzureEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureEntity != nil {

		if swag.IsZero(m.AzureEntity) { // not required
			return nil
		}

		if err := m.AzureEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateCassandraEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraEntity != nil {

		if swag.IsZero(m.CassandraEntity) { // not required
			return nil
		}

		if err := m.CassandraEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateCouchbaseEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.CouchbaseEntity != nil {

		if swag.IsZero(m.CouchbaseEntity) { // not required
			return nil
		}

		if err := m.CouchbaseEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateElastifileEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ElastifileEntity != nil {

		if swag.IsZero(m.ElastifileEntity) { // not required
			return nil
		}

		if err := m.ElastifileEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateEntityID(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityID != nil {

		if swag.IsZero(m.EntityID) { // not required
			return nil
		}

		if err := m.EntityID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityId")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateExchangeEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeEntity != nil {

		if swag.IsZero(m.ExchangeEntity) { // not required
			return nil
		}

		if err := m.ExchangeEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateFlashbladeEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.FlashbladeEntity != nil {

		if swag.IsZero(m.FlashbladeEntity) { // not required
			return nil
		}

		if err := m.FlashbladeEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateGcpEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpEntity != nil {

		if swag.IsZero(m.GcpEntity) { // not required
			return nil
		}

		if err := m.GcpEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateGenericNasEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericNasEntity != nil {

		if swag.IsZero(m.GenericNasEntity) { // not required
			return nil
		}

		if err := m.GenericNasEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateGpfsEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.GpfsEntity != nil {

		if swag.IsZero(m.GpfsEntity) { // not required
			return nil
		}

		if err := m.GpfsEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateHbaseEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseEntity != nil {

		if swag.IsZero(m.HbaseEntity) { // not required
			return nil
		}

		if err := m.HbaseEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateHdfsEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsEntity != nil {

		if swag.IsZero(m.HdfsEntity) { // not required
			return nil
		}

		if err := m.HdfsEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateHiveEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveEntity != nil {

		if swag.IsZero(m.HiveEntity) { // not required
			return nil
		}

		if err := m.HiveEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateHyperflexEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.HyperflexEntity != nil {

		if swag.IsZero(m.HyperflexEntity) { // not required
			return nil
		}

		if err := m.HyperflexEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hyperflexEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hyperflexEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateHypervEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervEntity != nil {

		if swag.IsZero(m.HypervEntity) { // not required
			return nil
		}

		if err := m.HypervEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateIsilonEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonEntity != nil {

		if swag.IsZero(m.IsilonEntity) { // not required
			return nil
		}

		if err := m.IsilonEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateKubernetesEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesEntity != nil {

		if swag.IsZero(m.KubernetesEntity) { // not required
			return nil
		}

		if err := m.KubernetesEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateKvmEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.KvmEntity != nil {

		if swag.IsZero(m.KvmEntity) { // not required
			return nil
		}

		if err := m.KvmEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvmEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kvmEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateMongodbEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.MongodbEntity != nil {

		if swag.IsZero(m.MongodbEntity) { // not required
			return nil
		}

		if err := m.MongodbEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateNetappEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.NetappEntity != nil {

		if swag.IsZero(m.NetappEntity) { // not required
			return nil
		}

		if err := m.NetappEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateO365Entity(ctx context.Context, formats strfmt.Registry) error {

	if m.O365Entity != nil {

		if swag.IsZero(m.O365Entity) { // not required
			return nil
		}

		if err := m.O365Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Entity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateOracleEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleEntity != nil {

		if swag.IsZero(m.OracleEntity) { // not required
			return nil
		}

		if err := m.OracleEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidatePhysicalEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalEntity != nil {

		if swag.IsZero(m.PhysicalEntity) { // not required
			return nil
		}

		if err := m.PhysicalEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidatePureEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.PureEntity != nil {

		if swag.IsZero(m.PureEntity) { // not required
			return nil
		}

		if err := m.PureEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pureEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pureEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateSfdcEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcEntity != nil {

		if swag.IsZero(m.SfdcEntity) { // not required
			return nil
		}

		if err := m.SfdcEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateSizeInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SizeInfo); i++ {

		if m.SizeInfo[i] != nil {

			if swag.IsZero(m.SizeInfo[i]) { // not required
				return nil
			}

			if err := m.SizeInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sizeInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sizeInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateEntityProto) contextValidateSQLEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLEntity != nil {

		if swag.IsZero(m.SQLEntity) { // not required
			return nil
		}

		if err := m.SQLEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateUdaEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaEntity != nil {

		if swag.IsZero(m.UdaEntity) { // not required
			return nil
		}

		if err := m.UdaEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateViewEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewEntity != nil {

		if swag.IsZero(m.ViewEntity) { // not required
			return nil
		}

		if err := m.ViewEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateEntityProto) contextValidateVmwareEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareEntity != nil {

		if swag.IsZero(m.VmwareEntity) { // not required
			return nil
		}

		if err := m.VmwareEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateEntityProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateEntityProto) UnmarshalBinary(b []byte) error {
	var res PrivateEntityProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
