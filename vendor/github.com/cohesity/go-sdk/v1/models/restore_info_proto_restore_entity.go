// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreInfoProtoRestoreEntity restore info proto restore entity
//
// swagger:model RestoreInfoProto_RestoreEntity
type RestoreInfoProtoRestoreEntity struct {

	// The entity that was restored.
	Entity *EntityProto `json:"entity,omitempty"`

	// If the restore of the 'entity' failed, this field may contain the cause
	// of the failure.
	Error *ErrorProto `json:"error,omitempty"`

	// The path relative to the root path of the restore task progress monitor
	// of the progress monitor for this entity.
	ProgressMonitorTaskPath *string `json:"progressMonitorTaskPath,omitempty"`

	// Iris-facing task state. This field is stamped during the export.
	PublicStatus *int32 `json:"publicStatus,omitempty"`

	// All the paths that the entity's files were restored to. Each path is
	// relative to the destination view.
	RelativeRestorePaths []string `json:"relativeRestorePaths"`

	// This represents a cluster or a HyperV host in HyperV environments, and a
	// resource pool in VMware environments.
	// For a restore task of type kCloneVMs, all entities are attached to the
	// same resource entity. So this field seems redundant for kCloneVMs task.
	// However, for a restore task of type kRecoverVMs, an entity can be
	// restored back to its original resource entity in which case value of
	// this field can be different for different entities.
	//
	// Even though, this field is redundant for kCloneVMs task, we will set
	// this field for sake of consistency.
	//
	// Please note that this field may not be set if the restore of this entity
	// fails.
	ResourcePoolEntity *EntityProto `json:"resourcePoolEntity,omitempty"`

	// Proto of the entity created by the restore operation.
	//
	// Note: For a recovery task in the VMware environment, once the VM is
	// created, it is storage vMotioned to its primary datastore. If storage
	// vMotion fails, Magneto marks the recovery task as failed. However, this
	// field will still be set for the recovered VM. It can be used later to
	// clean up the VM from primary environment (i.e, vCenter)
	RestoredEntity *EntityProto `json:"restoredEntity,omitempty"`

	// Cloned or converted view name which is used to restore the entity.
	// In case of on-prem deploy task this view name will be used in next run.
	RestoredViewName *string `json:"restoredViewName,omitempty"`

	// The restore status of the entity.
	Status *int32 `json:"status,omitempty"`

	// Contains the information regarding total bytes restored for this
	// entity. Currently updated only in case of outlook restore.
	TotalBytesRestored *int64 `json:"totalBytesRestored,omitempty"`

	// Optional warnings if any.
	Warnings []*ErrorProto `json:"warnings"`
}

// Validate validates this restore info proto restore entity
func (m *RestoreInfoProtoRestoreEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePoolEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreInfoProtoRestoreEntity) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfoProtoRestoreEntity) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfoProtoRestoreEntity) validateResourcePoolEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePoolEntity) { // not required
		return nil
	}

	if m.ResourcePoolEntity != nil {
		if err := m.ResourcePoolEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfoProtoRestoreEntity) validateRestoredEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredEntity) { // not required
		return nil
	}

	if m.RestoredEntity != nil {
		if err := m.RestoredEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfoProtoRestoreEntity) validateWarnings(formats strfmt.Registry) error {
	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	for i := 0; i < len(m.Warnings); i++ {
		if swag.IsZero(m.Warnings[i]) { // not required
			continue
		}

		if m.Warnings[i] != nil {
			if err := m.Warnings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this restore info proto restore entity based on the context it is used
func (m *RestoreInfoProtoRestoreEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourcePoolEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreInfoProtoRestoreEntity) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfoProtoRestoreEntity) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfoProtoRestoreEntity) contextValidateResourcePoolEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourcePoolEntity != nil {

		if swag.IsZero(m.ResourcePoolEntity) { // not required
			return nil
		}

		if err := m.ResourcePoolEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfoProtoRestoreEntity) contextValidateRestoredEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredEntity != nil {

		if swag.IsZero(m.RestoredEntity) { // not required
			return nil
		}

		if err := m.RestoredEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfoProtoRestoreEntity) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Warnings); i++ {

		if m.Warnings[i] != nil {

			if swag.IsZero(m.Warnings[i]) { // not required
				return nil
			}

			if err := m.Warnings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreInfoProtoRestoreEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreInfoProtoRestoreEntity) UnmarshalBinary(b []byte) error {
	var res RestoreInfoProtoRestoreEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
