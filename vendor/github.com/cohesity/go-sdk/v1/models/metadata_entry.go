// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MetadataEntry vCD object metadata (key-value pair)
//
// swagger:model MetadataEntry
type MetadataEntry struct {

	// The metadata domain.
	Domain *MetadataDomain `json:"domain,omitempty"`

	// The metadata key.
	Key *string `json:"key,omitempty"`

	// The metadata value and type.
	TypedValue *TypedValue `json:"typed_value,omitempty"`
}

// Validate validates this metadata entry
func (m *MetadataEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypedValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataEntry) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if m.Domain != nil {
		if err := m.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataEntry) validateTypedValue(formats strfmt.Registry) error {
	if swag.IsZero(m.TypedValue) { // not required
		return nil
	}

	if m.TypedValue != nil {
		if err := m.TypedValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typed_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typed_value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this metadata entry based on the context it is used
func (m *MetadataEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypedValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataEntry) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.Domain != nil {

		if swag.IsZero(m.Domain) { // not required
			return nil
		}

		if err := m.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataEntry) contextValidateTypedValue(ctx context.Context, formats strfmt.Registry) error {

	if m.TypedValue != nil {

		if swag.IsZero(m.TypedValue) { // not required
			return nil
		}

		if err := m.TypedValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typed_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typed_value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetadataEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataEntry) UnmarshalBinary(b []byte) error {
	var res MetadataEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
