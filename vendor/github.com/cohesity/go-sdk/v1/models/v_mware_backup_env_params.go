// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMwareBackupEnvParams VMware Backup Environment Parameters.
//
// Message to capture any additional backup params for a VMware environment.
//
// swagger:model VMwareBackupEnvParams
type VMwareBackupEnvParams struct {

	// Whether to fallback to take a crash-consistent snapshot incase taking
	// an app-consistent snapshot fails.
	AllowCrashConsistentSnapshot *bool `json:"allowCrashConsistentSnapshot,omitempty"`

	// Whether to fallback to use NBDSSL transport for backup in case using
	// SAN transport backup fails.
	AllowNbdsslTransportFallback *bool `json:"allowNbdsslTransportFallback,omitempty"`

	// Physical RDM disks cannot be backed up using VADP. By default the backups
	// of such VMs will fail. If this is set to true, then such VMs in this
	// backup job will be backed up by excluding the physical RDM disks.
	AllowVmsWithPhysicalRdmDisks *bool `json:"allowVmsWithPhysicalRdmDisks,omitempty"`

	// Whether the backup job should allow enabling CBT for VM when the backup
	// runs. Currently, by default, the backup run enables CBT for a VM during
	// the backup if it's not already enabled. However, there may be a case,
	// where customer doesn't want to enable CBT during the backup. This param
	// will be used to determine that.
	EnableCbtAllowed *bool `json:"enableCbtAllowed,omitempty"`

	// List of all vApps and their corresponding child VMs being backed up in
	// a backup run. This is only populated when vApp is being autoprotected.
	VappsToVmsList []*VMwareBackupEnvParamsVAppChildVMsList `json:"vappsToVmsList"`

	// List of Virtual Disk(s) to be excluded from the backup job. These disks
	// will be excluded for all VMs in this environment unless overriden by the
	// disk exclusion list from BackupSourceParams.VMwareBackupSourceParams.
	VmwareDiskExclusionInfo []*VMwareDiskExclusionProto `json:"vmwareDiskExclusionInfo"`
}

// Validate validates this v mware backup env params
func (m *VMwareBackupEnvParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVappsToVmsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareDiskExclusionInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareBackupEnvParams) validateVappsToVmsList(formats strfmt.Registry) error {
	if swag.IsZero(m.VappsToVmsList) { // not required
		return nil
	}

	for i := 0; i < len(m.VappsToVmsList); i++ {
		if swag.IsZero(m.VappsToVmsList[i]) { // not required
			continue
		}

		if m.VappsToVmsList[i] != nil {
			if err := m.VappsToVmsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vappsToVmsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vappsToVmsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMwareBackupEnvParams) validateVmwareDiskExclusionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareDiskExclusionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.VmwareDiskExclusionInfo); i++ {
		if swag.IsZero(m.VmwareDiskExclusionInfo[i]) { // not required
			continue
		}

		if m.VmwareDiskExclusionInfo[i] != nil {
			if err := m.VmwareDiskExclusionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmwareDiskExclusionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmwareDiskExclusionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v mware backup env params based on the context it is used
func (m *VMwareBackupEnvParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVappsToVmsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareDiskExclusionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareBackupEnvParams) contextValidateVappsToVmsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VappsToVmsList); i++ {

		if m.VappsToVmsList[i] != nil {

			if swag.IsZero(m.VappsToVmsList[i]) { // not required
				return nil
			}

			if err := m.VappsToVmsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vappsToVmsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vappsToVmsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMwareBackupEnvParams) contextValidateVmwareDiskExclusionInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VmwareDiskExclusionInfo); i++ {

		if m.VmwareDiskExclusionInfo[i] != nil {

			if swag.IsZero(m.VmwareDiskExclusionInfo[i]) { // not required
				return nil
			}

			if err := m.VmwareDiskExclusionInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmwareDiskExclusionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmwareDiskExclusionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMwareBackupEnvParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMwareBackupEnvParams) UnmarshalBinary(b []byte) error {
	var res VMwareBackupEnvParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
