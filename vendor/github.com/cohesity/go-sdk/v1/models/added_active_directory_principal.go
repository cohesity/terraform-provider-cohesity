// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddedActiveDirectoryPrincipal Non-LOCAL Group or User.
//
// Specifies a group or user added to the Cohesity Cluster for an Active
// Directory principal.
//
// swagger:model AddedActiveDirectoryPrincipal
type AddedActiveDirectoryPrincipal struct {

	// Specifies the epoch time in milliseconds when the group or user
	// was added to the Cohesity Cluster.
	CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

	// Specifies a description about the user or group.
	Description *string `json:"description,omitempty"`

	// Specifies the domain of the Active Directory where the
	// referenced principal is stored.
	Domain *string `json:"domain,omitempty"`

	// Specifies the epoch time in milliseconds when the group or user
	// was last modified on the Cohesity Cluster.
	LastUpdatedTimeMsecs *int64 `json:"lastUpdatedTimeMsecs,omitempty"`

	// Specifies the type of the referenced Active Directory principal.
	// If 'kGroup', the referenced Active Directory principal is a group.
	// If 'kUser', the referenced Active Directory principal is a user.
	// 'kUser' specifies a user object class.
	// 'kGroup' specifies a group object class.
	// 'kComputer' specifies a computer object class.
	// 'kWellKnownPrincipal' specifies a well known principal.
	// 'kServiceAccount' specifies a service account object class.
	// Enum: ["kUser","kGroup","kComputer","kWellKnownPrincipal","kServiceAccount"]
	ObjectClass *string `json:"objectClass,omitempty"`

	// Specifies the name of the Active Directory principal,
	// that will be referenced by the group or user.
	// The name of the Active Directory principal is used for naming
	// the new group or user on the Cohesity Cluster.
	PrincipalName *string `json:"principalName,omitempty"`

	// Whether the principal is a restricted principal. A restricted principal
	// can only view the objects he has permissions to.
	Restricted *bool `json:"restricted,omitempty"`

	// Array of Roles.
	//
	// Specifies the Cohesity roles to associate with this user or group
	// such as 'Admin', 'Ops' or 'View'.
	// The Cohesity roles determine privileges on the Cohesity Cluster
	// for this group or user.
	// For example if the 'joe' user is added for the Active Directory
	// 'joe' user principal and is associated with the Cohesity
	// 'View' role, 'joe' can log in to the Cohesity Dashboard
	// and has a read-only view of the data on the Cohesity Cluster.
	Roles []string `json:"roles"`

	// Specifies the unique Security ID (SID) of the Active Directory principal
	// associated with this group or user.
	Sid *string `json:"sid,omitempty"`
}

// Validate validates this added active directory principal
func (m *AddedActiveDirectoryPrincipal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectClass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addedActiveDirectoryPrincipalTypeObjectClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUser","kGroup","kComputer","kWellKnownPrincipal","kServiceAccount"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addedActiveDirectoryPrincipalTypeObjectClassPropEnum = append(addedActiveDirectoryPrincipalTypeObjectClassPropEnum, v)
	}
}

const (

	// AddedActiveDirectoryPrincipalObjectClassKUser captures enum value "kUser"
	AddedActiveDirectoryPrincipalObjectClassKUser string = "kUser"

	// AddedActiveDirectoryPrincipalObjectClassKGroup captures enum value "kGroup"
	AddedActiveDirectoryPrincipalObjectClassKGroup string = "kGroup"

	// AddedActiveDirectoryPrincipalObjectClassKComputer captures enum value "kComputer"
	AddedActiveDirectoryPrincipalObjectClassKComputer string = "kComputer"

	// AddedActiveDirectoryPrincipalObjectClassKWellKnownPrincipal captures enum value "kWellKnownPrincipal"
	AddedActiveDirectoryPrincipalObjectClassKWellKnownPrincipal string = "kWellKnownPrincipal"

	// AddedActiveDirectoryPrincipalObjectClassKServiceAccount captures enum value "kServiceAccount"
	AddedActiveDirectoryPrincipalObjectClassKServiceAccount string = "kServiceAccount"
)

// prop value enum
func (m *AddedActiveDirectoryPrincipal) validateObjectClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addedActiveDirectoryPrincipalTypeObjectClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddedActiveDirectoryPrincipal) validateObjectClass(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectClass) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectClassEnum("objectClass", "body", *m.ObjectClass); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this added active directory principal based on context it is used
func (m *AddedActiveDirectoryPrincipal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddedActiveDirectoryPrincipal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddedActiveDirectoryPrincipal) UnmarshalBinary(b []byte) error {
	var res AddedActiveDirectoryPrincipal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
