// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZoneInfo Proto that contains information about an access zone.
//
// swagger:model ZoneInfo
type ZoneInfo struct {

	// The groupnet name for this zone.
	Groupnet *string `json:"groupnet,omitempty"`

	// The string ID of this zone.
	ID *string `json:"id,omitempty"`

	// Network pools associated with this zone.
	NetworkPools []*ZoneInfoNetworkPool `json:"networkPools"`

	// The path of this zone in ifs. This should include the leading "/ifs/".
	Path *string `json:"path,omitempty"`

	// The numeric ID of this zone.
	ZoneID *int64 `json:"zoneId,omitempty"`
}

// Validate validates this zone info
func (m *ZoneInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkPools(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneInfo) validateNetworkPools(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkPools) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkPools); i++ {
		if swag.IsZero(m.NetworkPools[i]) { // not required
			continue
		}

		if m.NetworkPools[i] != nil {
			if err := m.NetworkPools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkPools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkPools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this zone info based on the context it is used
func (m *ZoneInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkPools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneInfo) contextValidateNetworkPools(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkPools); i++ {

		if m.NetworkPools[i] != nil {

			if swag.IsZero(m.NetworkPools[i]) { // not required
				return nil
			}

			if err := m.NetworkPools[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkPools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkPools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneInfo) UnmarshalBinary(b []byte) error {
	var res ZoneInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
