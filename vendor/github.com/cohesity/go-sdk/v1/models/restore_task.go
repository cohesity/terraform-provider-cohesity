// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestoreTask Restore Task.
//
// Specifies information about a Restore Task.
//
// swagger:model RestoreTask
type RestoreTask struct {

	// Specifies parameters for 'kAcropolis' restore task.
	AcropolisParameters *AcropolisRestoreParameters `json:"acropolisParameters,omitempty"`

	// Specifies parameters for restore task of application server object.
	ApplicationParameters *ApplicationRestoreParameters `json:"applicationParameters,omitempty"`

	// Specifies the uid of the Restore Task that retrieves objects from
	// an archive. This field is only populated when objects
	// must be retrieved from an archive before being restored.
	// This field is deprecated.
	// deprecated:true
	ArchiveTaskUID struct {
		UniversalID
	} `json:"archiveTaskUid,omitempty"`

	// Specifies the uids of the Restore Task that retrieves objects from
	// an archive. This field is only populated when objects
	// must be retrieved from an archive before being restored.
	// overrideDescription:true
	ArchiveTaskUids []*UniversalID `json:"archiveTaskUids"`

	// Specifies the latest state of the clone. This is only set when this
	// task is a clone task.
	// Enum: ["kRunning","kTearingDown","kTornDown","kTearDownFailed"]
	CloneStatus *string `json:"cloneStatus,omitempty"`

	// Specifies the View settings used when cloning a View.
	CloneViewParameters struct {
		UpdateViewParam
	} `json:"cloneViewParameters,omitempty"`

	// Specifies if the Restore Task should continue when some operations on some
	// objects fail. If true, the Cohesity Cluster ignores intermittent
	// errors and restores as many objects as possible.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies the datastore where the object's files are recovered to.
	// This field is populated when objects are recovered to a different
	// resource pool or to a different parent source.
	// This field is not populated when objects are recovered to their
	// original datastore locations in the original parent source.
	DatastoreID *int64 `json:"datastoreId,omitempty"`

	// Specifies parameters to deploy VMs to cloud.
	DeployVmsToCloud *DeployVmsToCloud `json:"deployVmsToCloud,omitempty"`

	// Specifies the end time of the Restore Task as a Unix epoch
	// Timestamp (in microseconds). This field is only populated if the
	// Restore Task completes.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Restore Task Error.
	//
	// Specifies the error reported by the Restore Task (if any) after the
	// Task has finished.
	Error struct {
		RequestError
	} `json:"error,omitempty"`

	// Specifies the full name of a View.
	FullViewName *string `json:"fullViewName,omitempty"`

	// Specifies additional parameters for 'kHyperV' restore objects.
	HypervParameters *HypervRestoreParameters `json:"hypervParameters,omitempty"`

	// Specifies the id of the Restore Task assigned by
	// Cohesity Cluster.
	ID *int64 `json:"id,omitempty"`

	// Specifies the states of mounting all the volumes onto a mount target
	// for a 'kRecoverVMs' Restore Task.
	MountVolumesState *MountVolumesState `json:"mountVolumesState,omitempty"`

	// Specifies the name of the Restore Task. This field must be set and
	// must be a unique name.
	// Required: true
	Name *string `json:"name"`

	// Specify a new registered parent Protection Source. If specified
	// the selected objects are cloned or recovered to this new Protection
	// Source. If not specified, objects are cloned or recovered
	// to the original Protection Source that was managing them.
	NewParentID *int64 `json:"newParentId,omitempty"`

	// Array of Objects.
	//
	// Specifies a list of Protection Source objects or Protection Job objects
	// (with specified Protection Source objects).
	Objects []*RestoreObjectDetails `json:"objects"`

	// Specifies additional parameters for 'kRecoverO365Drive' restore task.
	OneDriveParameters *OneDriveRestoreParameters `json:"oneDriveParameters,omitempty"`

	// Specifies parameters for 'kRecoverEmails' restore task.
	OutlookParameters *OutlookRestoreParameters `json:"outlookParameters,omitempty"`

	// Specifies additional parameters for 'kRecoverO365PublicFolders' restore
	// task.
	PublicFoldersParameters *PublicFoldersRestoreParameters `json:"publicFoldersParameters,omitempty"`

	// Array of Object States.
	//
	// Specifies the states of all the objects for the 'kRecoverVMs' and
	// 'kCloneVMs' Restore Tasks.
	RestoreObjectState []*RestoreObjectState `json:"restoreObjectState"`

	// Specifies additional parameters for 'kRecoverSites' restore task.
	SharePointParameters *SharePointRestoreParameters `json:"sharePointParameters,omitempty"`

	// Specifies the start time for the Restore Task as a Unix epoch
	// Timestamp (in microseconds).
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the overall status of the Restore Task.
	// 'kReadyToSchedule' indicates the Restore Task is waiting to be scheduled.
	// 'kProgressMonitorCreated' indicates the progress monitor for the
	// Restore Task has been created.
	// 'kRetrievedFromArchive' indicates that the objects to restore have been
	// retrieved from the specified archive. A Task will only ever transition to
	// this state if a retrieval is necessary.
	// 'kAdmitted' indicates the task has been admitted. After a task has been
	// admitted, its status does not move back to 'kReadyToSchedule' state
	// even if it is rescheduled.
	// 'kInProgress' indicates that the Restore Task is in progress.
	// 'kFinishingProgressMonitor' indicates that the Restore Task is
	// finishing its progress monitoring.
	// 'kFinished' indicates that the Restore Task has finished.
	// The status indicating success or failure is found in the error code that
	// is stored with the Restore Task.
	// 'kInternalViewCreated' indicates that internal view for the task
	// has been created.
	// 'kZipFileRequested' indicates that request has been sent to create zip
	// files for the files to be downloaded. This state is only going to be
	// present for kDownloadFiles Task.
	// 'kCancelled' indicates that task or jb has been cancelled.
	// Enum: ["kReadyToSchedule","kProgressMonitorCreated","kRetrievedFromArchive","kAdmitted","kInProgress","kFinishingProgressMonitor","kFinished","kInternalViewCreated","kZipFileRequested","kCancelled"]
	Status *string `json:"status,omitempty"`

	// Is true if a new View was created by a 'kCloneVMs' Restore Task.
	// This field is only set for a 'kCloneVMs' Restore Task.
	TargetViewCreated *bool `json:"targetViewCreated,omitempty"`

	// Specifies the type of Restore Task.
	//
	// 'kRecoverVMs' specifies a Restore Task that recovers VMs.
	// 'kCloneVMs' specifies a Restore Task that clones VMs.
	// 'kCloneView' specifies a Restore Task that clones a View.
	// 'kMountVolumes' specifies a Restore Task that mounts volumes.
	// 'kRestoreFiles' specifies a Restore Task that recovers files and folders.
	// 'kRecoverApp' specifies a Restore Task that recovers app.
	// 'kCloneApp' specifies a Restore Task that clone app.
	// 'kRecoverSanVolume' specifies a Restore Task that recovers SAN volumes.
	// 'kConvertAndDeployVMs' specifies a Restore Task that converts and deploy VMs to a target environment.
	// 'kMountFileVolume' specifies a Restore Task that mounts a file volume.
	// 'kSystem' specifies a Restore Task that recovers a system.
	// 'kRecoverVolumes' specifies a Restore Task that recovers volumes via the physical agent.
	// 'kDeployVolumes' specifies a Restore Task that deploys volumes to a target environment.
	// 'kDownloadFiles' specifies a Restore Task that downloads the requested files and folders in zip format.
	// 'kRecoverEmails' specifies a Restore Task that recovers the mailbox/email items.
	// 'kConvertToPst' specifies a PST conversion task for selected mailbox/email items.
	// 'kRecoverDisks' specifies a Restore Task that recovers the virtual disks.
	// 'kRecoverNamespaces' specifies a Restore Task that recovers Kubernetes namespaces.
	// 'kCloneVMsToView' specifies a Restore Task that clones VMs into a View.
	// 'kDownloadChats' specifies a chats/posts download task for selected user/channel(s).
	// Enum: ["kRecoverVMs","kCloneVMs","kCloneView","kMountVolumes","kRestoreFiles","kRecoverApp","kCloneApp","kRecoverSanVolume","kConvertAndDeployVMs","kMountFileVolume","kSystem","kRecoverVolumes","kDeployVMs","kDownloadFiles","kRecoverEmails","kConvertToPst","kRecoverDisks","kRecoverNamespaces","kCloneVMsToView","kDownloadChats"]
	Type *string `json:"type,omitempty"`

	// Specifies the Cohesity user who requested this Restore Task.
	Username *string `json:"username,omitempty"`

	// Specifies the id of the Domain (View Box) where the View is stored.
	ViewBoxID *int64 `json:"viewBoxId,omitempty"`

	// Specifies the state of recovering all the specifies virtual disks of a vm.
	VirtualDiskRestoreState *VirtualDiskRecoverTaskState `json:"virtualDiskRestoreState,omitempty"`

	// Specifies VLAN parameters for the restore operation.
	VlanParameters *VlanParameters `json:"vlanParameters,omitempty"`

	// Specifies additional parameters for 'kVmware' restore objects.
	VmwareParameters *VmwareRestoreParameters `json:"vmwareParameters,omitempty"`
}

// Validate validates this restore task
func (m *RestoreTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcropolisParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchiveTaskUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchiveTaskUids(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloneStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloneViewParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployVmsToCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountVolumesState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneDriveParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutlookParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicFoldersParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreObjectState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharePointParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDiskRestoreState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreTask) validateAcropolisParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisParameters) { // not required
		return nil
	}

	if m.AcropolisParameters != nil {
		if err := m.AcropolisParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) validateApplicationParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationParameters) { // not required
		return nil
	}

	if m.ApplicationParameters != nil {
		if err := m.ApplicationParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) validateArchiveTaskUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchiveTaskUID) { // not required
		return nil
	}

	return nil
}

func (m *RestoreTask) validateArchiveTaskUids(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchiveTaskUids) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchiveTaskUids); i++ {
		if swag.IsZero(m.ArchiveTaskUids[i]) { // not required
			continue
		}

		if m.ArchiveTaskUids[i] != nil {
			if err := m.ArchiveTaskUids[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("archiveTaskUids" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("archiveTaskUids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var restoreTaskTypeCloneStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRunning","kTearingDown","kTornDown","kTearDownFailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		restoreTaskTypeCloneStatusPropEnum = append(restoreTaskTypeCloneStatusPropEnum, v)
	}
}

const (

	// RestoreTaskCloneStatusKRunning captures enum value "kRunning"
	RestoreTaskCloneStatusKRunning string = "kRunning"

	// RestoreTaskCloneStatusKTearingDown captures enum value "kTearingDown"
	RestoreTaskCloneStatusKTearingDown string = "kTearingDown"

	// RestoreTaskCloneStatusKTornDown captures enum value "kTornDown"
	RestoreTaskCloneStatusKTornDown string = "kTornDown"

	// RestoreTaskCloneStatusKTearDownFailed captures enum value "kTearDownFailed"
	RestoreTaskCloneStatusKTearDownFailed string = "kTearDownFailed"
)

// prop value enum
func (m *RestoreTask) validateCloneStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, restoreTaskTypeCloneStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RestoreTask) validateCloneStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CloneStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloneStatusEnum("cloneStatus", "body", *m.CloneStatus); err != nil {
		return err
	}

	return nil
}

func (m *RestoreTask) validateCloneViewParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.CloneViewParameters) { // not required
		return nil
	}

	return nil
}

func (m *RestoreTask) validateDeployVmsToCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToCloud) { // not required
		return nil
	}

	if m.DeployVmsToCloud != nil {
		if err := m.DeployVmsToCloud.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloud")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloud")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	return nil
}

func (m *RestoreTask) validateHypervParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParameters) { // not required
		return nil
	}

	if m.HypervParameters != nil {
		if err := m.HypervParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) validateMountVolumesState(formats strfmt.Registry) error {
	if swag.IsZero(m.MountVolumesState) { // not required
		return nil
	}

	if m.MountVolumesState != nil {
		if err := m.MountVolumesState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountVolumesState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountVolumesState")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RestoreTask) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreTask) validateOneDriveParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.OneDriveParameters) { // not required
		return nil
	}

	if m.OneDriveParameters != nil {
		if err := m.OneDriveParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) validateOutlookParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.OutlookParameters) { // not required
		return nil
	}

	if m.OutlookParameters != nil {
		if err := m.OutlookParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) validatePublicFoldersParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicFoldersParameters) { // not required
		return nil
	}

	if m.PublicFoldersParameters != nil {
		if err := m.PublicFoldersParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicFoldersParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicFoldersParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) validateRestoreObjectState(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreObjectState) { // not required
		return nil
	}

	for i := 0; i < len(m.RestoreObjectState); i++ {
		if swag.IsZero(m.RestoreObjectState[i]) { // not required
			continue
		}

		if m.RestoreObjectState[i] != nil {
			if err := m.RestoreObjectState[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjectState" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjectState" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreTask) validateSharePointParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.SharePointParameters) { // not required
		return nil
	}

	if m.SharePointParameters != nil {
		if err := m.SharePointParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharePointParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharePointParameters")
			}
			return err
		}
	}

	return nil
}

var restoreTaskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kReadyToSchedule","kProgressMonitorCreated","kRetrievedFromArchive","kAdmitted","kInProgress","kFinishingProgressMonitor","kFinished","kInternalViewCreated","kZipFileRequested","kCancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		restoreTaskTypeStatusPropEnum = append(restoreTaskTypeStatusPropEnum, v)
	}
}

const (

	// RestoreTaskStatusKReadyToSchedule captures enum value "kReadyToSchedule"
	RestoreTaskStatusKReadyToSchedule string = "kReadyToSchedule"

	// RestoreTaskStatusKProgressMonitorCreated captures enum value "kProgressMonitorCreated"
	RestoreTaskStatusKProgressMonitorCreated string = "kProgressMonitorCreated"

	// RestoreTaskStatusKRetrievedFromArchive captures enum value "kRetrievedFromArchive"
	RestoreTaskStatusKRetrievedFromArchive string = "kRetrievedFromArchive"

	// RestoreTaskStatusKAdmitted captures enum value "kAdmitted"
	RestoreTaskStatusKAdmitted string = "kAdmitted"

	// RestoreTaskStatusKInProgress captures enum value "kInProgress"
	RestoreTaskStatusKInProgress string = "kInProgress"

	// RestoreTaskStatusKFinishingProgressMonitor captures enum value "kFinishingProgressMonitor"
	RestoreTaskStatusKFinishingProgressMonitor string = "kFinishingProgressMonitor"

	// RestoreTaskStatusKFinished captures enum value "kFinished"
	RestoreTaskStatusKFinished string = "kFinished"

	// RestoreTaskStatusKInternalViewCreated captures enum value "kInternalViewCreated"
	RestoreTaskStatusKInternalViewCreated string = "kInternalViewCreated"

	// RestoreTaskStatusKZipFileRequested captures enum value "kZipFileRequested"
	RestoreTaskStatusKZipFileRequested string = "kZipFileRequested"

	// RestoreTaskStatusKCancelled captures enum value "kCancelled"
	RestoreTaskStatusKCancelled string = "kCancelled"
)

// prop value enum
func (m *RestoreTask) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, restoreTaskTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RestoreTask) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var restoreTaskTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRecoverVMs","kCloneVMs","kCloneView","kMountVolumes","kRestoreFiles","kRecoverApp","kCloneApp","kRecoverSanVolume","kConvertAndDeployVMs","kMountFileVolume","kSystem","kRecoverVolumes","kDeployVMs","kDownloadFiles","kRecoverEmails","kConvertToPst","kRecoverDisks","kRecoverNamespaces","kCloneVMsToView","kDownloadChats"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		restoreTaskTypeTypePropEnum = append(restoreTaskTypeTypePropEnum, v)
	}
}

const (

	// RestoreTaskTypeKRecoverVMs captures enum value "kRecoverVMs"
	RestoreTaskTypeKRecoverVMs string = "kRecoverVMs"

	// RestoreTaskTypeKCloneVMs captures enum value "kCloneVMs"
	RestoreTaskTypeKCloneVMs string = "kCloneVMs"

	// RestoreTaskTypeKCloneView captures enum value "kCloneView"
	RestoreTaskTypeKCloneView string = "kCloneView"

	// RestoreTaskTypeKMountVolumes captures enum value "kMountVolumes"
	RestoreTaskTypeKMountVolumes string = "kMountVolumes"

	// RestoreTaskTypeKRestoreFiles captures enum value "kRestoreFiles"
	RestoreTaskTypeKRestoreFiles string = "kRestoreFiles"

	// RestoreTaskTypeKRecoverApp captures enum value "kRecoverApp"
	RestoreTaskTypeKRecoverApp string = "kRecoverApp"

	// RestoreTaskTypeKCloneApp captures enum value "kCloneApp"
	RestoreTaskTypeKCloneApp string = "kCloneApp"

	// RestoreTaskTypeKRecoverSanVolume captures enum value "kRecoverSanVolume"
	RestoreTaskTypeKRecoverSanVolume string = "kRecoverSanVolume"

	// RestoreTaskTypeKConvertAndDeployVMs captures enum value "kConvertAndDeployVMs"
	RestoreTaskTypeKConvertAndDeployVMs string = "kConvertAndDeployVMs"

	// RestoreTaskTypeKMountFileVolume captures enum value "kMountFileVolume"
	RestoreTaskTypeKMountFileVolume string = "kMountFileVolume"

	// RestoreTaskTypeKSystem captures enum value "kSystem"
	RestoreTaskTypeKSystem string = "kSystem"

	// RestoreTaskTypeKRecoverVolumes captures enum value "kRecoverVolumes"
	RestoreTaskTypeKRecoverVolumes string = "kRecoverVolumes"

	// RestoreTaskTypeKDeployVMs captures enum value "kDeployVMs"
	RestoreTaskTypeKDeployVMs string = "kDeployVMs"

	// RestoreTaskTypeKDownloadFiles captures enum value "kDownloadFiles"
	RestoreTaskTypeKDownloadFiles string = "kDownloadFiles"

	// RestoreTaskTypeKRecoverEmails captures enum value "kRecoverEmails"
	RestoreTaskTypeKRecoverEmails string = "kRecoverEmails"

	// RestoreTaskTypeKConvertToPst captures enum value "kConvertToPst"
	RestoreTaskTypeKConvertToPst string = "kConvertToPst"

	// RestoreTaskTypeKRecoverDisks captures enum value "kRecoverDisks"
	RestoreTaskTypeKRecoverDisks string = "kRecoverDisks"

	// RestoreTaskTypeKRecoverNamespaces captures enum value "kRecoverNamespaces"
	RestoreTaskTypeKRecoverNamespaces string = "kRecoverNamespaces"

	// RestoreTaskTypeKCloneVMsToView captures enum value "kCloneVMsToView"
	RestoreTaskTypeKCloneVMsToView string = "kCloneVMsToView"

	// RestoreTaskTypeKDownloadChats captures enum value "kDownloadChats"
	RestoreTaskTypeKDownloadChats string = "kDownloadChats"
)

// prop value enum
func (m *RestoreTask) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, restoreTaskTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RestoreTask) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *RestoreTask) validateVirtualDiskRestoreState(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualDiskRestoreState) { // not required
		return nil
	}

	if m.VirtualDiskRestoreState != nil {
		if err := m.VirtualDiskRestoreState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualDiskRestoreState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualDiskRestoreState")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) validateVlanParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParameters) { // not required
		return nil
	}

	if m.VlanParameters != nil {
		if err := m.VlanParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) validateVmwareParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParameters) { // not required
		return nil
	}

	if m.VmwareParameters != nil {
		if err := m.VmwareParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore task based on the context it is used
func (m *RestoreTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcropolisParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApplicationParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchiveTaskUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchiveTaskUids(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloneViewParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployVmsToCloud(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountVolumesState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneDriveParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutlookParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicFoldersParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreObjectState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharePointParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualDiskRestoreState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreTask) contextValidateAcropolisParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.AcropolisParameters != nil {

		if swag.IsZero(m.AcropolisParameters) { // not required
			return nil
		}

		if err := m.AcropolisParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidateApplicationParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationParameters != nil {

		if swag.IsZero(m.ApplicationParameters) { // not required
			return nil
		}

		if err := m.ApplicationParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidateArchiveTaskUID(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RestoreTask) contextValidateArchiveTaskUids(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArchiveTaskUids); i++ {

		if m.ArchiveTaskUids[i] != nil {

			if swag.IsZero(m.ArchiveTaskUids[i]) { // not required
				return nil
			}

			if err := m.ArchiveTaskUids[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("archiveTaskUids" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("archiveTaskUids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreTask) contextValidateCloneViewParameters(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RestoreTask) contextValidateDeployVmsToCloud(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToCloud != nil {

		if swag.IsZero(m.DeployVmsToCloud) { // not required
			return nil
		}

		if err := m.DeployVmsToCloud.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloud")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloud")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RestoreTask) contextValidateHypervParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParameters != nil {

		if swag.IsZero(m.HypervParameters) { // not required
			return nil
		}

		if err := m.HypervParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidateMountVolumesState(ctx context.Context, formats strfmt.Registry) error {

	if m.MountVolumesState != nil {

		if swag.IsZero(m.MountVolumesState) { // not required
			return nil
		}

		if err := m.MountVolumesState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountVolumesState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountVolumesState")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreTask) contextValidateOneDriveParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.OneDriveParameters != nil {

		if swag.IsZero(m.OneDriveParameters) { // not required
			return nil
		}

		if err := m.OneDriveParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidateOutlookParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.OutlookParameters != nil {

		if swag.IsZero(m.OutlookParameters) { // not required
			return nil
		}

		if err := m.OutlookParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidatePublicFoldersParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicFoldersParameters != nil {

		if swag.IsZero(m.PublicFoldersParameters) { // not required
			return nil
		}

		if err := m.PublicFoldersParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicFoldersParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicFoldersParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidateRestoreObjectState(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestoreObjectState); i++ {

		if m.RestoreObjectState[i] != nil {

			if swag.IsZero(m.RestoreObjectState[i]) { // not required
				return nil
			}

			if err := m.RestoreObjectState[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjectState" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjectState" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreTask) contextValidateSharePointParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.SharePointParameters != nil {

		if swag.IsZero(m.SharePointParameters) { // not required
			return nil
		}

		if err := m.SharePointParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharePointParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharePointParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidateVirtualDiskRestoreState(ctx context.Context, formats strfmt.Registry) error {

	if m.VirtualDiskRestoreState != nil {

		if swag.IsZero(m.VirtualDiskRestoreState) { // not required
			return nil
		}

		if err := m.VirtualDiskRestoreState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualDiskRestoreState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualDiskRestoreState")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidateVlanParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParameters != nil {

		if swag.IsZero(m.VlanParameters) { // not required
			return nil
		}

		if err := m.VlanParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTask) contextValidateVmwareParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParameters != nil {

		if swag.IsZero(m.VmwareParameters) { // not required
			return nil
		}

		if err := m.VmwareParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreTask) UnmarshalBinary(b []byte) error {
	var res RestoreTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
