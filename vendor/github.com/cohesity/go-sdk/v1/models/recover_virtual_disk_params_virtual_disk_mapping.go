// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverVirtualDiskParamsVirtualDiskMapping Represents a single source/destination pair for the block-based restore.
//
// swagger:model RecoverVirtualDiskParams_VirtualDiskMapping
type RecoverVirtualDiskParamsVirtualDiskMapping struct {

	// If the user is overwriting a destination disk, then this will capture
	// the target disk info.
	// NOTE: If this is specified, then power_off_vm_before_recovery must be
	// true.
	DiskToOverwrite *VirtualDiskID `json:"diskToOverwrite,omitempty"`

	// The source disk information.
	SrcDisk *VirtualDiskID `json:"srcDisk,omitempty"`

	// This contains the target location information, for e.g. a datastore in
	// VMware environment.
	// NOTE: If disk_to_overwrite is specified then the target location is
	// automatically deduced, if not this must be specified.
	TargetLocation *EntityProto `json:"targetLocation,omitempty"`
}

// Validate validates this recover virtual disk params virtual disk mapping
func (m *RecoverVirtualDiskParamsVirtualDiskMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskToOverwrite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVirtualDiskParamsVirtualDiskMapping) validateDiskToOverwrite(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskToOverwrite) { // not required
		return nil
	}

	if m.DiskToOverwrite != nil {
		if err := m.DiskToOverwrite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskToOverwrite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskToOverwrite")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskParamsVirtualDiskMapping) validateSrcDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.SrcDisk) { // not required
		return nil
	}

	if m.SrcDisk != nil {
		if err := m.SrcDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("srcDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("srcDisk")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskParamsVirtualDiskMapping) validateTargetLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetLocation) { // not required
		return nil
	}

	if m.TargetLocation != nil {
		if err := m.TargetLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetLocation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover virtual disk params virtual disk mapping based on the context it is used
func (m *RecoverVirtualDiskParamsVirtualDiskMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskToOverwrite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSrcDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVirtualDiskParamsVirtualDiskMapping) contextValidateDiskToOverwrite(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskToOverwrite != nil {

		if swag.IsZero(m.DiskToOverwrite) { // not required
			return nil
		}

		if err := m.DiskToOverwrite.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskToOverwrite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskToOverwrite")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskParamsVirtualDiskMapping) contextValidateSrcDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.SrcDisk != nil {

		if swag.IsZero(m.SrcDisk) { // not required
			return nil
		}

		if err := m.SrcDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("srcDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("srcDisk")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskParamsVirtualDiskMapping) contextValidateTargetLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetLocation != nil {

		if swag.IsZero(m.TargetLocation) { // not required
			return nil
		}

		if err := m.TargetLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetLocation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverVirtualDiskParamsVirtualDiskMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverVirtualDiskParamsVirtualDiskMapping) UnmarshalBinary(b []byte) error {
	var res RecoverVirtualDiskParamsVirtualDiskMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
