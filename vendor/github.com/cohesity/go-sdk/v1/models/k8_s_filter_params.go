// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// K8SFilterParams Message defining the different criteria to filter objects, such as
// persistent volumes from backup for include or exclude. This is used to
// specify both object-level (BackupSourceParams) and job-level
// (EnvBackupParams) in/exclusion criteria.  If a criterion is specified at
// both object-level and job-level, then job-level setting will be ignored.
//
// swagger:model K8SFilterParams
type K8SFilterParams struct {

	// List of entities included in filter. This contains the list of entities
	// corresponding to entity IDs in 'object_id_vec' and the list of entities
	// under the union of intersection of labels specified by 'label_vec_vec'.
	// This will be populated during backup run.
	EntityVec []*Entity `json:"entityVec"`

	// Array of Arrays of Label Ids that Specify Persistent Volumes (PV) and
	// Persistent Volume Claims (PVC) to include in filter. The outer array
	// represents a union operation (i.e.: match any label rule), while the inner
	// array represents an intersection operation (i.e.: match all label rules).
	// See iris/apiSpecs/v2/common/adapters/kubernetes/jobs.yaml:filterLabelIds
	// for full description.
	LabelVecVec []*K8SFilterParamsLabelVec `json:"labelVecVec"`

	// IDs of objects to be included in filter.
	ObjectIDVec []int64 `json:"objectIdVec"`
}

// Validate validates this k8 s filter params
func (m *K8SFilterParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelVecVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8SFilterParams) validateEntityVec(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityVec) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityVec); i++ {
		if swag.IsZero(m.EntityVec[i]) { // not required
			continue
		}

		if m.EntityVec[i] != nil {
			if err := m.EntityVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *K8SFilterParams) validateLabelVecVec(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelVecVec) { // not required
		return nil
	}

	for i := 0; i < len(m.LabelVecVec); i++ {
		if swag.IsZero(m.LabelVecVec[i]) { // not required
			continue
		}

		if m.LabelVecVec[i] != nil {
			if err := m.LabelVecVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelVecVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelVecVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this k8 s filter params based on the context it is used
func (m *K8SFilterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntityVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelVecVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8SFilterParams) contextValidateEntityVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityVec); i++ {

		if m.EntityVec[i] != nil {

			if swag.IsZero(m.EntityVec[i]) { // not required
				return nil
			}

			if err := m.EntityVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *K8SFilterParams) contextValidateLabelVecVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelVecVec); i++ {

		if m.LabelVecVec[i] != nil {

			if swag.IsZero(m.LabelVecVec[i]) { // not required
				return nil
			}

			if err := m.LabelVecVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelVecVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelVecVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *K8SFilterParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8SFilterParams) UnmarshalBinary(b []byte) error {
	var res K8SFilterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
