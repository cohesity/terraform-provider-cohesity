// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CrackedFileDocumentVersionInfo These are the old versioning format fields. This takes a lot of space.
//
// Essentially we end up storing 5 8 byte ints, with 6 tags. This exists only
// because of migration. When we read an old doc where this field is
// populated, we convert it internally to the new format.
// TODO(apurv): Remove this.
// DEPRECATED.
//
// swagger:model CrackedFileDocument_VersionInfo
type CrackedFileDocumentVersionInfo struct {

	// Extracted tags from file content.
	// Unused as of now, but plan is to do content analysis and add tags like:
	// _has_ssn, _has_cc, ....
	ContentAnalysisTags []string `json:"contentAnalysisTags"`

	// instance Id
	InstanceID *MagnetoInstanceID `json:"instanceId,omitempty"`

	// mtime usecs
	MtimeUsecs *int64 `json:"mtimeUsecs,omitempty"`

	// size bytes
	SizeBytes *int64 `json:"sizeBytes,omitempty"`

	// snapshot timestamp usecs
	SnapshotTimestampUsecs *int64 `json:"snapshotTimestampUsecs,omitempty"`
}

// Validate validates this cracked file document version info
func (m *CrackedFileDocumentVersionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrackedFileDocumentVersionInfo) validateInstanceID(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceID) { // not required
		return nil
	}

	if m.InstanceID != nil {
		if err := m.InstanceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cracked file document version info based on the context it is used
func (m *CrackedFileDocumentVersionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrackedFileDocumentVersionInfo) contextValidateInstanceID(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceID != nil {

		if swag.IsZero(m.InstanceID) { // not required
			return nil
		}

		if err := m.InstanceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrackedFileDocumentVersionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrackedFileDocumentVersionInfo) UnmarshalBinary(b []byte) error {
	var res CrackedFileDocumentVersionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
