// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IdpUserInfo IdP User Information.
//
// Specifies an IdP User's information logged in using an IdP.
// This information is not stored on the Cluster.
//
// swagger:model IdpUserInfo
type IdpUserInfo struct {

	// Specifies the SIDs of the groups.
	GroupSids []string `json:"groupSids"`

	// Specifies the Idp groups that the user is part of. As the user may not be
	// registered on the cluster, we may have to capture the idp group
	// membership. This way, if a group is created on the cluster later,
	// users will instantly have access to tenantIds from that group as well.
	Groups []string `json:"groups"`

	// Specifies the unique Id assigned by the Cluster for the IdP.
	IdpID *int64 `json:"idpId,omitempty"`

	// Specifies whether or not this is a floating user.
	IsFloatingUser *bool `json:"isFloatingUser,omitempty"`

	// Specifies the unique identifier assigned by the vendor for this Cluster.
	IssuerID *string `json:"issuerId,omitempty"`

	// Specifies the unique identifier assigned by the vendor for the user.
	UserID *string `json:"userId,omitempty"`

	// Specifies the vendor providing the IdP service.
	Vendor *string `json:"vendor,omitempty"`
}

// Validate validates this idp user info
func (m *IdpUserInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this idp user info based on context it is used
func (m *IdpUserInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IdpUserInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdpUserInfo) UnmarshalBinary(b []byte) error {
	var res IdpUserInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
