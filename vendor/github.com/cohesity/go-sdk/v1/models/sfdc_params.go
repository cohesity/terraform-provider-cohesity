// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SfdcParams Specifies an Object containing information about a registered Salesforce
// source.
//
// swagger:model SfdcParams
type SfdcParams struct {

	// Token that will be used in subsequent api requests.
	AccessToken *string `json:"accessToken,omitempty"`

	// Specifies the maximum number of concurrent API requests allowed for salesforce.
	ConcurrentAPIRequestsLimit *int64 `json:"concurrentApiRequestsLimit,omitempty"`

	// Consumer key from the connected app in Sfdc.
	ConsumerKey *string `json:"consumerKey,omitempty"`

	// Consumer secret from the connected app in Sfdc.
	ConsumerSecret *string `json:"consumerSecret,omitempty"`

	// Maximum daily api limit
	DailyAPILimit *int64 `json:"dailyApiLimit,omitempty"`

	// Sfdc Endpoint URL.
	Endpoint *string `json:"endpoint,omitempty"`

	// Specifies the Environment type for salesforce.
	// 'PROD'
	// 'SANDBOX'
	// 'OTHER'
	// Enum: ["PROD","SANDBOX","OTHER"]
	EndpointType *string `json:"endpointType,omitempty"`

	// Metadata endpoint url. All metadata requests must be made to this url.
	MetadataEndpointURL *string `json:"metadataEndpointUrl,omitempty"`

	// Token that will be used to refresh the access token.
	RefreshToken *string `json:"refreshToken,omitempty"`

	// Soap endpoint url. All soap requests must be made to this url.
	SoapEndpointURL *string `json:"soapEndpointUrl,omitempty"`

	// use bulk api if set to true
	UseBulkAPI *bool `json:"useBulkApi,omitempty"`
}

// Validate validates this sfdc params
func (m *SfdcParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sfdcParamsTypeEndpointTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROD","SANDBOX","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sfdcParamsTypeEndpointTypePropEnum = append(sfdcParamsTypeEndpointTypePropEnum, v)
	}
}

const (

	// SfdcParamsEndpointTypePROD captures enum value "PROD"
	SfdcParamsEndpointTypePROD string = "PROD"

	// SfdcParamsEndpointTypeSANDBOX captures enum value "SANDBOX"
	SfdcParamsEndpointTypeSANDBOX string = "SANDBOX"

	// SfdcParamsEndpointTypeOTHER captures enum value "OTHER"
	SfdcParamsEndpointTypeOTHER string = "OTHER"
)

// prop value enum
func (m *SfdcParams) validateEndpointTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sfdcParamsTypeEndpointTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SfdcParams) validateEndpointType(formats strfmt.Registry) error {
	if swag.IsZero(m.EndpointType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEndpointTypeEnum("endpointType", "body", *m.EndpointType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sfdc params based on context it is used
func (m *SfdcParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SfdcParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcParams) UnmarshalBinary(b []byte) error {
	var res SfdcParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
