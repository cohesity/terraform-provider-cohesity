// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HdfsConnectParams Hdfs Connect Params.
//
// Specifies an Object containing information about a registered Hdfs
// source.
//
// swagger:model HdfsConnectParams
type HdfsConnectParams struct {

	// Specifies the Hadoop Distribution.
	// Hadoop distribution.
	//
	// 'CDH' indicates Hadoop distribution type Cloudera.
	// 'HDP' indicates Hadoop distribution type Hortonworks.
	// Enum: ["CDH","HDP"]
	HadoopDistribution *string `json:"hadoopDistribution,omitempty"`

	// Specifies the Hadoop version
	HadoopVersion *string `json:"hadoopVersion,omitempty"`

	// Specifies the Hdfs discovery params.
	HdfsDiscoveryParams *HadoopDiscoveryParams `json:"hdfsDiscoveryParams,omitempty"`

	// Specifies the kerberos principal.
	KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

	// Specifies the Namenode host or Nameservice.
	Namenode *string `json:"namenode,omitempty"`

	// Specifies the Webhdfs Port
	Port *int32 `json:"port,omitempty"`
}

// Validate validates this hdfs connect params
func (m *HdfsConnectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHadoopDistribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsDiscoveryParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hdfsConnectParamsTypeHadoopDistributionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CDH","HDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hdfsConnectParamsTypeHadoopDistributionPropEnum = append(hdfsConnectParamsTypeHadoopDistributionPropEnum, v)
	}
}

const (

	// HdfsConnectParamsHadoopDistributionCDH captures enum value "CDH"
	HdfsConnectParamsHadoopDistributionCDH string = "CDH"

	// HdfsConnectParamsHadoopDistributionHDP captures enum value "HDP"
	HdfsConnectParamsHadoopDistributionHDP string = "HDP"
)

// prop value enum
func (m *HdfsConnectParams) validateHadoopDistributionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hdfsConnectParamsTypeHadoopDistributionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HdfsConnectParams) validateHadoopDistribution(formats strfmt.Registry) error {
	if swag.IsZero(m.HadoopDistribution) { // not required
		return nil
	}

	// value enum
	if err := m.validateHadoopDistributionEnum("hadoopDistribution", "body", *m.HadoopDistribution); err != nil {
		return err
	}

	return nil
}

func (m *HdfsConnectParams) validateHdfsDiscoveryParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsDiscoveryParams) { // not required
		return nil
	}

	if m.HdfsDiscoveryParams != nil {
		if err := m.HdfsDiscoveryParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsDiscoveryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsDiscoveryParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hdfs connect params based on the context it is used
func (m *HdfsConnectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHdfsDiscoveryParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HdfsConnectParams) contextValidateHdfsDiscoveryParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsDiscoveryParams != nil {

		if swag.IsZero(m.HdfsDiscoveryParams) { // not required
			return nil
		}

		if err := m.HdfsDiscoveryParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsDiscoveryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsDiscoveryParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HdfsConnectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HdfsConnectParams) UnmarshalBinary(b []byte) error {
	var res HdfsConnectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
