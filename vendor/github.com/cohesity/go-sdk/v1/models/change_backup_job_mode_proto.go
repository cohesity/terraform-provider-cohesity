// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChangeBackupJobModeProto A wrapper proto that contains the activate and deactivate of a job state
// proto. This will be used for WAL-logging.
//
// swagger:model ChangeBackupJobModeProto
type ChangeBackupJobModeProto struct {

	// Information associated with the deactivate backup job task (active or
	// finished).
	DeactivateJobState *DeactivateJobStateProto `json:"deactivateJobState,omitempty"`
}

// Validate validates this change backup job mode proto
func (m *ChangeBackupJobModeProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeactivateJobState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChangeBackupJobModeProto) validateDeactivateJobState(formats strfmt.Registry) error {
	if swag.IsZero(m.DeactivateJobState) { // not required
		return nil
	}

	if m.DeactivateJobState != nil {
		if err := m.DeactivateJobState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deactivateJobState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deactivateJobState")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this change backup job mode proto based on the context it is used
func (m *ChangeBackupJobModeProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeactivateJobState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChangeBackupJobModeProto) contextValidateDeactivateJobState(ctx context.Context, formats strfmt.Registry) error {

	if m.DeactivateJobState != nil {

		if swag.IsZero(m.DeactivateJobState) { // not required
			return nil
		}

		if err := m.DeactivateJobState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deactivateJobState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deactivateJobState")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChangeBackupJobModeProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangeBackupJobModeProto) UnmarshalBinary(b []byte) error {
	var res ChangeBackupJobModeProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
