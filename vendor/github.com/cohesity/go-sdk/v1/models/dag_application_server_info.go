// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DagApplicationServerInfo Exchange DAG Application Server Information
//
// Specifies the information about the status of the Exchange Application
// Server which is a member of the DAG.
//
// swagger:model DagApplicationServerInfo
type DagApplicationServerInfo struct {

	// Specifies the fully qualified domain name of the Exchange Server.
	Fqdn *string `json:"fqdn,omitempty"`

	// Specifies the Guid of the Exchange Application Server.
	GUID *string `json:"guid,omitempty"`

	// Specifies the entity id of the Exchange Application server.
	ID *int64 `json:"id,omitempty"`

	// Specifies the display name of the Exchange Application Server.
	Name *string `json:"name,omitempty"`

	// Specifies the entity id of the owner entity of the Exchange Application
	// Server.
	OwnerID *int64 `json:"ownerId,omitempty"`

	// Specifies the status of the registration of the Exchange Application
	// Server.
	// Specifies the status of registration of Exchange Application Server.
	// 'kUnknown' indicates the status is not known.
	// 'kHealthy' indicates the status is healty and is registered as
	// Exchange Server.
	// 'kUnHealthy' indicates the exchange application is registered on the
	// physical server but it is unreachable now.
	// 'kUnregistered' indicates the server is not registered as physical source.
	// 'kUnreachable' indicates the server is not reachable from the cohesity
	// cluster or the cohesity protection server is not installed on the exchange
	// server.
	// 'kDetached' indicates the server is removed from the ExchangeDAG.
	// Enum: ["kUnknown","kHealthy","kUnHealthy","kUnregistered","kUreachable","kDetached"]
	Status *string `json:"status,omitempty"`

	// Specifies the total size of all Exchange database copies in all the
	// Exchange Application Servers that are part of the DAG.
	TotalSizeBytes *int64 `json:"totalSizeBytes,omitempty"`
}

// Validate validates this dag application server info
func (m *DagApplicationServerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dagApplicationServerInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUnknown","kHealthy","kUnHealthy","kUnregistered","kUreachable","kDetached"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dagApplicationServerInfoTypeStatusPropEnum = append(dagApplicationServerInfoTypeStatusPropEnum, v)
	}
}

const (

	// DagApplicationServerInfoStatusKUnknown captures enum value "kUnknown"
	DagApplicationServerInfoStatusKUnknown string = "kUnknown"

	// DagApplicationServerInfoStatusKHealthy captures enum value "kHealthy"
	DagApplicationServerInfoStatusKHealthy string = "kHealthy"

	// DagApplicationServerInfoStatusKUnHealthy captures enum value "kUnHealthy"
	DagApplicationServerInfoStatusKUnHealthy string = "kUnHealthy"

	// DagApplicationServerInfoStatusKUnregistered captures enum value "kUnregistered"
	DagApplicationServerInfoStatusKUnregistered string = "kUnregistered"

	// DagApplicationServerInfoStatusKUreachable captures enum value "kUreachable"
	DagApplicationServerInfoStatusKUreachable string = "kUreachable"

	// DagApplicationServerInfoStatusKDetached captures enum value "kDetached"
	DagApplicationServerInfoStatusKDetached string = "kDetached"
)

// prop value enum
func (m *DagApplicationServerInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dagApplicationServerInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DagApplicationServerInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dag application server info based on context it is used
func (m *DagApplicationServerInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DagApplicationServerInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DagApplicationServerInfo) UnmarshalBinary(b []byte) error {
	var res DagApplicationServerInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
