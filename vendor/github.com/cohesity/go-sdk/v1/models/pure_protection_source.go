// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PureProtectionSource Pure Protection Source.
//
// Specifies a Protection Source in a Pure environment.
//
// swagger:model PureProtectionSource
type PureProtectionSource struct {

	// Specifies a unique name of the Protection Source
	Name *string `json:"name,omitempty"`

	// Specifies a SAN Storage Array information. This is set only when
	// the type is kStorageArray.
	StorageArray *SanStorageArray `json:"storageArray,omitempty"`

	// Specifies the type of managed Object in a SAN/Pure Protection
	// Source like a kStorageArray or kVolume.
	// Examples of SAN Objects include 'kStorageArray' and 'kVolume'.
	// 'kStorageArray' indicates that entire SAN storage array is being
	// protected.
	// 'kVolume' indicates that volume within the array is being protected.
	// Enum: ["kStorageArray","kVolume"]
	Type *string `json:"type,omitempty"`

	// Specifies a SAN Volume information within a storage array.
	// This is set only when the type is kVolume.
	Volume *SanVolume `json:"volume,omitempty"`
}

// Validate validates this pure protection source
func (m *PureProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageArray(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PureProtectionSource) validateStorageArray(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageArray) { // not required
		return nil
	}

	if m.StorageArray != nil {
		if err := m.StorageArray.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageArray")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageArray")
			}
			return err
		}
	}

	return nil
}

var pureProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStorageArray","kVolume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pureProtectionSourceTypeTypePropEnum = append(pureProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// PureProtectionSourceTypeKStorageArray captures enum value "kStorageArray"
	PureProtectionSourceTypeKStorageArray string = "kStorageArray"

	// PureProtectionSourceTypeKVolume captures enum value "kVolume"
	PureProtectionSourceTypeKVolume string = "kVolume"
)

// prop value enum
func (m *PureProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pureProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PureProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PureProtectionSource) validateVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.Volume) { // not required
		return nil
	}

	if m.Volume != nil {
		if err := m.Volume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volume")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pure protection source based on the context it is used
func (m *PureProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageArray(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PureProtectionSource) contextValidateStorageArray(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageArray != nil {

		if swag.IsZero(m.StorageArray) { // not required
			return nil
		}

		if err := m.StorageArray.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageArray")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageArray")
			}
			return err
		}
	}

	return nil
}

func (m *PureProtectionSource) contextValidateVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.Volume != nil {

		if swag.IsZero(m.Volume) { // not required
			return nil
		}

		if err := m.Volume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PureProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PureProtectionSource) UnmarshalBinary(b []byte) error {
	var res PureProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
