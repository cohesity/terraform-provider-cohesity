// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateLinuxPasswordReqParams Update Linux Password Req Params.
//
// Specifies the user input parameters.
//
// swagger:model UpdateLinuxPasswordReqParams
type UpdateLinuxPasswordReqParams struct {

	// Specifies the current password.
	LinuxCurrentPassword *string `json:"linuxCurrentPassword,omitempty"`

	// Specifies the new linux password.
	// Required: true
	LinuxPassword *string `json:"linuxPassword"`

	// Specifies the linux username for which the password will be updated.
	// Required: true
	LinuxUsername *string `json:"linuxUsername"`

	// True if request is only to verify if current password
	// matches with set password.
	VerifyPassword *bool `json:"verifyPassword,omitempty"`
}

// Validate validates this update linux password req params
func (m *UpdateLinuxPasswordReqParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinuxPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinuxUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateLinuxPasswordReqParams) validateLinuxPassword(formats strfmt.Registry) error {

	if err := validate.Required("linuxPassword", "body", m.LinuxPassword); err != nil {
		return err
	}

	return nil
}

func (m *UpdateLinuxPasswordReqParams) validateLinuxUsername(formats strfmt.Registry) error {

	if err := validate.Required("linuxUsername", "body", m.LinuxUsername); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update linux password req params based on context it is used
func (m *UpdateLinuxPasswordReqParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateLinuxPasswordReqParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateLinuxPasswordReqParams) UnmarshalBinary(b []byte) error {
	var res UpdateLinuxPasswordReqParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
