// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectSnapshotDocumentVolumeMountIOInfoMapVersion Message to represent vm volume mount io info map for each instance id. For
// optimization purpose we keep volume mount io info map and repeated magneto
// instance id if volume mount io info map is same.
//
// swagger:model ObjectSnapshotDocument_VolumeMountIOInfoMapVersion
type ObjectSnapshotDocumentVolumeMountIOInfoMapVersion struct {

	// Magneto instance id.
	InstanceIDVec []*MagnetoInstanceID `json:"instanceIdVec"`

	// VM volume mount map information.
	VolumeMountIoInfoMap *VolumeMappingReportVolumeMountIOInfo `json:"volumeMountIoInfoMap,omitempty"`
}

// Validate validates this object snapshot document volume mount i o info map version
func (m *ObjectSnapshotDocumentVolumeMountIOInfoMapVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceIDVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeMountIoInfoMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectSnapshotDocumentVolumeMountIOInfoMapVersion) validateInstanceIDVec(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceIDVec) { // not required
		return nil
	}

	for i := 0; i < len(m.InstanceIDVec); i++ {
		if swag.IsZero(m.InstanceIDVec[i]) { // not required
			continue
		}

		if m.InstanceIDVec[i] != nil {
			if err := m.InstanceIDVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceIdVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instanceIdVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectSnapshotDocumentVolumeMountIOInfoMapVersion) validateVolumeMountIoInfoMap(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeMountIoInfoMap) { // not required
		return nil
	}

	if m.VolumeMountIoInfoMap != nil {
		if err := m.VolumeMountIoInfoMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeMountIoInfoMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeMountIoInfoMap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this object snapshot document volume mount i o info map version based on the context it is used
func (m *ObjectSnapshotDocumentVolumeMountIOInfoMapVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceIDVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeMountIoInfoMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectSnapshotDocumentVolumeMountIOInfoMapVersion) contextValidateInstanceIDVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstanceIDVec); i++ {

		if m.InstanceIDVec[i] != nil {

			if swag.IsZero(m.InstanceIDVec[i]) { // not required
				return nil
			}

			if err := m.InstanceIDVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceIdVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instanceIdVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectSnapshotDocumentVolumeMountIOInfoMapVersion) contextValidateVolumeMountIoInfoMap(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeMountIoInfoMap != nil {

		if swag.IsZero(m.VolumeMountIoInfoMap) { // not required
			return nil
		}

		if err := m.VolumeMountIoInfoMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeMountIoInfoMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeMountIoInfoMap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectSnapshotDocumentVolumeMountIOInfoMapVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectSnapshotDocumentVolumeMountIOInfoMapVersion) UnmarshalBinary(b []byte) error {
	var res ObjectSnapshotDocumentVolumeMountIOInfoMapVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
