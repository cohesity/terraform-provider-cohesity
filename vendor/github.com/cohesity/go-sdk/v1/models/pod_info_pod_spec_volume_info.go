// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PodInfoPodSpecVolumeInfo Contains information about volumes of different types that can be
// mounted to a pod. Reference:
// https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/
//
// swagger:model PodInfo_PodSpec_VolumeInfo
type PodInfoPodSpecVolumeInfo struct {

	// Below fields determine type of volume.
	AwsElasticBlockStore *PodInfoPodSpecVolumeInfoAWSEBS `json:"awsElasticBlockStore,omitempty"`

	// azure disk
	AzureDisk *PodInfoPodSpecVolumeInfoAzureDisk `json:"azureDisk,omitempty"`

	// azure file
	AzureFile *PodInfoPodSpecVolumeInfoAzureFile `json:"azureFile,omitempty"`

	// cephfs
	Cephfs *PodInfoPodSpecVolumeInfoCephfs `json:"cephfs,omitempty"`

	// cinder
	Cinder *PodInfoPodSpecVolumeInfoCinder `json:"cinder,omitempty"`

	// config map
	ConfigMap *PodInfoPodSpecVolumeInfoConfigMap `json:"configMap,omitempty"`

	// csi
	Csi *PodInfoPodSpecVolumeInfoCSI `json:"csi,omitempty"`

	// downward Api
	DownwardAPI *PodInfoPodSpecVolumeInfoDownwardAPI `json:"downwardApi,omitempty"`

	// empty dir
	EmptyDir PodInfoPodSpecVolumeInfoEmptyDir `json:"emptyDir,omitempty"`

	// ephemeral
	Ephemeral *PodInfoPodSpecVolumeInfoEphemeralVolumeSource `json:"ephemeral,omitempty"`

	// fc
	Fc *PodInfoPodSpecVolumeInfoFC `json:"fc,omitempty"`

	// flex volume
	FlexVolume *PodInfoPodSpecVolumeInfoFlex `json:"flexVolume,omitempty"`

	// flocker
	Flocker *PodInfoPodSpecVolumeInfoFlocker `json:"flocker,omitempty"`

	// gce persistent disk
	GcePersistentDisk *PodInfoPodSpecVolumeInfoGcePersistentDisk `json:"gcePersistentDisk,omitempty"`

	// glusterfs
	Glusterfs *PodInfoPodSpecVolumeInfoGlusterFs `json:"glusterfs,omitempty"`

	// Mount from host node's file system into pod.
	HostPath *PodInfoPodSpecVolumeInfoHostPath `json:"hostPath,omitempty"`

	// iscsi
	Iscsi *PodInfoPodSpecVolumeInfoISCSI `json:"iscsi,omitempty"`

	// local
	Local *PodInfoPodSpecVolumeInfoLocal `json:"local,omitempty"`

	// Name of the volume.
	Name *string `json:"name,omitempty"`

	// nfs
	Nfs *PodInfoPodSpecVolumeInfoNFS `json:"nfs,omitempty"`

	// persistent volume claim
	PersistentVolumeClaim *PodInfoPodSpecVolumeInfoPVC `json:"persistentVolumeClaim,omitempty"`

	// photon persistent disk
	PhotonPersistentDisk *PodInfoPodSpecVolumeInfoPhotonPersistentDisk `json:"photonPersistentDisk,omitempty"`

	// portworx volume
	PortworxVolume *PodInfoPodSpecVolumeInfoPortworx `json:"portworxVolume,omitempty"`

	// projected
	Projected *PodInfoPodSpecVolumeInfoProjected `json:"projected,omitempty"`

	// quobyte
	Quobyte *PodInfoPodSpecVolumeInfoQuobyte `json:"quobyte,omitempty"`

	// rbd
	Rbd *PodInfoPodSpecVolumeInfoRBD `json:"rbd,omitempty"`

	// scale io
	ScaleIo *PodInfoPodSpecVolumeInfoScaleIO `json:"scaleIo,omitempty"`

	// Changing the json_name of this field so that API responses of secret
	// volumes do not get parsed into this message.
	Secret *PodInfoPodSpecVolumeInfoConfigMap `json:"secret,omitempty"`

	// secret volume
	SecretVolume *PodInfoPodSpecVolumeInfoSecretVolumeSource `json:"secretVolume,omitempty"`

	// storageos
	Storageos *PodInfoPodSpecVolumeInfoStorageOS `json:"storageos,omitempty"`

	// vsphere volume
	VsphereVolume *PodInfoPodSpecVolumeInfoVsphereVirtualDisk `json:"vsphereVolume,omitempty"`
}

// Validate validates this pod info pod spec volume info
func (m *PodInfoPodSpecVolumeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsElasticBlockStore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCephfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCinder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCsi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownwardAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEphemeral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlexVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlocker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcePersistentDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlusterfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentVolumeClaim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhotonPersistentDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortworxVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuobyte(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRbd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleIo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsphereVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateAwsElasticBlockStore(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsElasticBlockStore) { // not required
		return nil
	}

	if m.AwsElasticBlockStore != nil {
		if err := m.AwsElasticBlockStore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsElasticBlockStore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsElasticBlockStore")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateAzureDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureDisk) { // not required
		return nil
	}

	if m.AzureDisk != nil {
		if err := m.AzureDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureDisk")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateAzureFile(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureFile) { // not required
		return nil
	}

	if m.AzureFile != nil {
		if err := m.AzureFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureFile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureFile")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateCephfs(formats strfmt.Registry) error {
	if swag.IsZero(m.Cephfs) { // not required
		return nil
	}

	if m.Cephfs != nil {
		if err := m.Cephfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cephfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cephfs")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateCinder(formats strfmt.Registry) error {
	if swag.IsZero(m.Cinder) { // not required
		return nil
	}

	if m.Cinder != nil {
		if err := m.Cinder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cinder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cinder")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateConfigMap(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigMap) { // not required
		return nil
	}

	if m.ConfigMap != nil {
		if err := m.ConfigMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configMap")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateCsi(formats strfmt.Registry) error {
	if swag.IsZero(m.Csi) { // not required
		return nil
	}

	if m.Csi != nil {
		if err := m.Csi.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("csi")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateDownwardAPI(formats strfmt.Registry) error {
	if swag.IsZero(m.DownwardAPI) { // not required
		return nil
	}

	if m.DownwardAPI != nil {
		if err := m.DownwardAPI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downwardApi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downwardApi")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateEphemeral(formats strfmt.Registry) error {
	if swag.IsZero(m.Ephemeral) { // not required
		return nil
	}

	if m.Ephemeral != nil {
		if err := m.Ephemeral.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ephemeral")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ephemeral")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateFc(formats strfmt.Registry) error {
	if swag.IsZero(m.Fc) { // not required
		return nil
	}

	if m.Fc != nil {
		if err := m.Fc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fc")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateFlexVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.FlexVolume) { // not required
		return nil
	}

	if m.FlexVolume != nil {
		if err := m.FlexVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flexVolume")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateFlocker(formats strfmt.Registry) error {
	if swag.IsZero(m.Flocker) { // not required
		return nil
	}

	if m.Flocker != nil {
		if err := m.Flocker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flocker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flocker")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateGcePersistentDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.GcePersistentDisk) { // not required
		return nil
	}

	if m.GcePersistentDisk != nil {
		if err := m.GcePersistentDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcePersistentDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcePersistentDisk")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateGlusterfs(formats strfmt.Registry) error {
	if swag.IsZero(m.Glusterfs) { // not required
		return nil
	}

	if m.Glusterfs != nil {
		if err := m.Glusterfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("glusterfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("glusterfs")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateHostPath(formats strfmt.Registry) error {
	if swag.IsZero(m.HostPath) { // not required
		return nil
	}

	if m.HostPath != nil {
		if err := m.HostPath.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostPath")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostPath")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateIscsi(formats strfmt.Registry) error {
	if swag.IsZero(m.Iscsi) { // not required
		return nil
	}

	if m.Iscsi != nil {
		if err := m.Iscsi.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateLocal(formats strfmt.Registry) error {
	if swag.IsZero(m.Local) { // not required
		return nil
	}

	if m.Local != nil {
		if err := m.Local.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("local")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("local")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateNfs(formats strfmt.Registry) error {
	if swag.IsZero(m.Nfs) { // not required
		return nil
	}

	if m.Nfs != nil {
		if err := m.Nfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfs")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validatePersistentVolumeClaim(formats strfmt.Registry) error {
	if swag.IsZero(m.PersistentVolumeClaim) { // not required
		return nil
	}

	if m.PersistentVolumeClaim != nil {
		if err := m.PersistentVolumeClaim.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistentVolumeClaim")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("persistentVolumeClaim")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validatePhotonPersistentDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.PhotonPersistentDisk) { // not required
		return nil
	}

	if m.PhotonPersistentDisk != nil {
		if err := m.PhotonPersistentDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("photonPersistentDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("photonPersistentDisk")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validatePortworxVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.PortworxVolume) { // not required
		return nil
	}

	if m.PortworxVolume != nil {
		if err := m.PortworxVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portworxVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portworxVolume")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateProjected(formats strfmt.Registry) error {
	if swag.IsZero(m.Projected) { // not required
		return nil
	}

	if m.Projected != nil {
		if err := m.Projected.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projected")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateQuobyte(formats strfmt.Registry) error {
	if swag.IsZero(m.Quobyte) { // not required
		return nil
	}

	if m.Quobyte != nil {
		if err := m.Quobyte.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quobyte")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quobyte")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateRbd(formats strfmt.Registry) error {
	if swag.IsZero(m.Rbd) { // not required
		return nil
	}

	if m.Rbd != nil {
		if err := m.Rbd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rbd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rbd")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateScaleIo(formats strfmt.Registry) error {
	if swag.IsZero(m.ScaleIo) { // not required
		return nil
	}

	if m.ScaleIo != nil {
		if err := m.ScaleIo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleIo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleIo")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.Secret) { // not required
		return nil
	}

	if m.Secret != nil {
		if err := m.Secret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateSecretVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretVolume) { // not required
		return nil
	}

	if m.SecretVolume != nil {
		if err := m.SecretVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secretVolume")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateStorageos(formats strfmt.Registry) error {
	if swag.IsZero(m.Storageos) { // not required
		return nil
	}

	if m.Storageos != nil {
		if err := m.Storageos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageos")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageos")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) validateVsphereVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.VsphereVolume) { // not required
		return nil
	}

	if m.VsphereVolume != nil {
		if err := m.VsphereVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphereVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsphereVolume")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pod info pod spec volume info based on the context it is used
func (m *PodInfoPodSpecVolumeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsElasticBlockStore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCephfs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCinder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCsi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDownwardAPI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEphemeral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlexVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlocker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcePersistentDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlusterfs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostPath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePersistentVolumeClaim(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhotonPersistentDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortworxVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjected(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuobyte(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRbd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScaleIo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecretVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVsphereVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateAwsElasticBlockStore(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsElasticBlockStore != nil {

		if swag.IsZero(m.AwsElasticBlockStore) { // not required
			return nil
		}

		if err := m.AwsElasticBlockStore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsElasticBlockStore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsElasticBlockStore")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateAzureDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureDisk != nil {

		if swag.IsZero(m.AzureDisk) { // not required
			return nil
		}

		if err := m.AzureDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureDisk")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateAzureFile(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureFile != nil {

		if swag.IsZero(m.AzureFile) { // not required
			return nil
		}

		if err := m.AzureFile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureFile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureFile")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateCephfs(ctx context.Context, formats strfmt.Registry) error {

	if m.Cephfs != nil {

		if swag.IsZero(m.Cephfs) { // not required
			return nil
		}

		if err := m.Cephfs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cephfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cephfs")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateCinder(ctx context.Context, formats strfmt.Registry) error {

	if m.Cinder != nil {

		if swag.IsZero(m.Cinder) { // not required
			return nil
		}

		if err := m.Cinder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cinder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cinder")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateConfigMap(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigMap != nil {

		if swag.IsZero(m.ConfigMap) { // not required
			return nil
		}

		if err := m.ConfigMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configMap")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateCsi(ctx context.Context, formats strfmt.Registry) error {

	if m.Csi != nil {

		if swag.IsZero(m.Csi) { // not required
			return nil
		}

		if err := m.Csi.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("csi")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateDownwardAPI(ctx context.Context, formats strfmt.Registry) error {

	if m.DownwardAPI != nil {

		if swag.IsZero(m.DownwardAPI) { // not required
			return nil
		}

		if err := m.DownwardAPI.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downwardApi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downwardApi")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateEphemeral(ctx context.Context, formats strfmt.Registry) error {

	if m.Ephemeral != nil {

		if swag.IsZero(m.Ephemeral) { // not required
			return nil
		}

		if err := m.Ephemeral.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ephemeral")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ephemeral")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateFc(ctx context.Context, formats strfmt.Registry) error {

	if m.Fc != nil {

		if swag.IsZero(m.Fc) { // not required
			return nil
		}

		if err := m.Fc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fc")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateFlexVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.FlexVolume != nil {

		if swag.IsZero(m.FlexVolume) { // not required
			return nil
		}

		if err := m.FlexVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flexVolume")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateFlocker(ctx context.Context, formats strfmt.Registry) error {

	if m.Flocker != nil {

		if swag.IsZero(m.Flocker) { // not required
			return nil
		}

		if err := m.Flocker.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flocker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flocker")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateGcePersistentDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.GcePersistentDisk != nil {

		if swag.IsZero(m.GcePersistentDisk) { // not required
			return nil
		}

		if err := m.GcePersistentDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcePersistentDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcePersistentDisk")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateGlusterfs(ctx context.Context, formats strfmt.Registry) error {

	if m.Glusterfs != nil {

		if swag.IsZero(m.Glusterfs) { // not required
			return nil
		}

		if err := m.Glusterfs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("glusterfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("glusterfs")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateHostPath(ctx context.Context, formats strfmt.Registry) error {

	if m.HostPath != nil {

		if swag.IsZero(m.HostPath) { // not required
			return nil
		}

		if err := m.HostPath.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostPath")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostPath")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateIscsi(ctx context.Context, formats strfmt.Registry) error {

	if m.Iscsi != nil {

		if swag.IsZero(m.Iscsi) { // not required
			return nil
		}

		if err := m.Iscsi.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateLocal(ctx context.Context, formats strfmt.Registry) error {

	if m.Local != nil {

		if swag.IsZero(m.Local) { // not required
			return nil
		}

		if err := m.Local.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("local")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("local")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateNfs(ctx context.Context, formats strfmt.Registry) error {

	if m.Nfs != nil {

		if swag.IsZero(m.Nfs) { // not required
			return nil
		}

		if err := m.Nfs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfs")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidatePersistentVolumeClaim(ctx context.Context, formats strfmt.Registry) error {

	if m.PersistentVolumeClaim != nil {

		if swag.IsZero(m.PersistentVolumeClaim) { // not required
			return nil
		}

		if err := m.PersistentVolumeClaim.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistentVolumeClaim")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("persistentVolumeClaim")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidatePhotonPersistentDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.PhotonPersistentDisk != nil {

		if swag.IsZero(m.PhotonPersistentDisk) { // not required
			return nil
		}

		if err := m.PhotonPersistentDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("photonPersistentDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("photonPersistentDisk")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidatePortworxVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.PortworxVolume != nil {

		if swag.IsZero(m.PortworxVolume) { // not required
			return nil
		}

		if err := m.PortworxVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portworxVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portworxVolume")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateProjected(ctx context.Context, formats strfmt.Registry) error {

	if m.Projected != nil {

		if swag.IsZero(m.Projected) { // not required
			return nil
		}

		if err := m.Projected.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projected")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateQuobyte(ctx context.Context, formats strfmt.Registry) error {

	if m.Quobyte != nil {

		if swag.IsZero(m.Quobyte) { // not required
			return nil
		}

		if err := m.Quobyte.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quobyte")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quobyte")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateRbd(ctx context.Context, formats strfmt.Registry) error {

	if m.Rbd != nil {

		if swag.IsZero(m.Rbd) { // not required
			return nil
		}

		if err := m.Rbd.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rbd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rbd")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateScaleIo(ctx context.Context, formats strfmt.Registry) error {

	if m.ScaleIo != nil {

		if swag.IsZero(m.ScaleIo) { // not required
			return nil
		}

		if err := m.ScaleIo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleIo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleIo")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.Secret != nil {

		if swag.IsZero(m.Secret) { // not required
			return nil
		}

		if err := m.Secret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateSecretVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.SecretVolume != nil {

		if swag.IsZero(m.SecretVolume) { // not required
			return nil
		}

		if err := m.SecretVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secretVolume")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateStorageos(ctx context.Context, formats strfmt.Registry) error {

	if m.Storageos != nil {

		if swag.IsZero(m.Storageos) { // not required
			return nil
		}

		if err := m.Storageos.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageos")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageos")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfo) contextValidateVsphereVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.VsphereVolume != nil {

		if swag.IsZero(m.VsphereVolume) { // not required
			return nil
		}

		if err := m.VsphereVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphereVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsphereVolume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodInfoPodSpecVolumeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodInfoPodSpecVolumeInfo) UnmarshalBinary(b []byte) error {
	var res PodInfoPodSpecVolumeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
