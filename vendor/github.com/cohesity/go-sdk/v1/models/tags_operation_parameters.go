// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TagsOperationParameters TagsOperationParameters specifies tagging details.
//
// swagger:model TagsOperationParameters
type TagsOperationParameters struct {

	// ClusterId is the Id of the cluster used for constructing JobUid.
	ClusterID *int64 `json:"clusterId,omitempty"`

	// ClusterIncarnationId is the incarnation Id of the cluster used for
	// constructing JobUid.
	ClusterIncarnationID *int64 `json:"clusterIncarnationId,omitempty"`

	// DocumentIds are list of documents to be tagged.
	DocumentIds []string `json:"documentIds"`

	// EntityId is the Id of the entity where the file resides.
	EntityID *int64 `json:"entityId,omitempty"`

	// JobId is the Id of the job that took the snapshot.
	JobID *int64 `json:"jobId,omitempty"`

	// JobInstanceIds to tag corresponding snapshots.
	JobInstanceIds []int64 `json:"jobInstanceIds"`

	// Tags are list of tags uuids that will be operated on to corresponding
	// objects.
	TagIds []string `json:"tagIds"`

	// Tags are list of tags that will be operated on to corresponding objects.
	// This is deprecated. Use tagIds instead.
	// deprecated: true
	Tags []string `json:"tags"`
}

// Validate validates this tags operation parameters
func (m *TagsOperationParameters) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tags operation parameters based on context it is used
func (m *TagsOperationParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TagsOperationParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagsOperationParameters) UnmarshalBinary(b []byte) error {
	var res TagsOperationParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
