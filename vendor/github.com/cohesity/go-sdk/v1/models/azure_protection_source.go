// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureProtectionSource Azure Protection Source.
//
// Specifies a Protection Source in Azure environment.
//
// swagger:model AzureProtectionSource
type AzureProtectionSource struct {

	// Specifies Application Id of the active directory of Azure account.
	ApplicationID *string `json:"applicationId,omitempty"`

	// Specifies Application key of the active directory of Azure account.
	ApplicationKey *string `json:"applicationKey,omitempty"`

	// Specifies the entity type such as 'kSubscription' if the environment is
	// kAzure.
	// Specifies the type of an Azure source entity.
	// 'kSubscription' indicates a billing unit within Azure account.
	// 'kResourceGroup' indicates a container that holds related resources.
	// 'kVirtualMachine' indicates a Virtual Machine in Azure environment.
	// 'kStorageAccount' represents a collection of storage containers.
	// 'kStorageKey' indicates a key required to access the storage account.
	// 'kStorageContainer' represents a storage container within a storage account.
	// 'kStorageBlob' represents a storage blog within a storage container.
	// 'kStorageResourceGroup' indicates a container that holds related
	// storage resources.
	// 'kNetworkSecurityGroup' represents a network security group.
	// 'kVirtualNetwork' represents a virtual network.
	// 'kNetworkResourceGroup' indicates a container that holds related
	// network resources.
	// 'kSubnet' represents a subnet within the virtual network.
	// 'kComputeOptions' indicates the number of CPU cores and memory size
	// available for a type of a Virtual Machine.
	// 'kAvailabilitySet' indicates the availability set.
	// Enum: ["kSubscription","kResourceGroup","kVirtualMachine","kStorageAccount","kStorageKey","kStorageContainer","kStorageBlob","kStorageResourceGroup","kNetworkSecurityGroup","kVirtualNetwork","kNetworkResourceGroup","kSubnet","kComputeOptions","kAvailabilitySet"]
	AzureType *string `json:"azureType,omitempty"`

	// Speecifies the list of Azure disk info.
	DiskInfoList []*AzureDiskInfo `json:"diskInfoList"`

	// Specifies Azure stack hub domain name for where the given subscription is
	// present.
	DomainName *string `json:"domainName,omitempty"`

	// Specifies the OS type of the Protection Source of type 'kVirtualMachine'
	// such as 'kWindows' or 'kLinux'.
	// overrideDescription: true
	// 'kLinux' indicates the Linux operating system.
	// 'kWindows' indicates the Microsoft Windows operating system.
	// 'kAix' indicates the IBM AIX operating system.
	// 'kSolaris' indicates the Oracle Solaris operating system.
	// 'kSapHana' indicates the Sap Hana database system developed by SAP SE.
	// 'kSapOracle' indicates the Sap Oracle database system developed by SAP SE.
	// 'kCockroachDB' indicates the CockroachDB database system.
	// 'kMySQL' indicates the MySQL database system.
	// 'kSapSybase' indicates the SapSybase database system.
	// 'kSapMaxDB' indicates the SapMaxDB database system.
	// 'kSapSybaseIQ' indicates the SapSybaseIQ database system.
	// 'kDB2' indicates the DB2 database system.
	// 'kSapASE' indicates the SapASE database system.
	// 'kMariaDB' indicates the MariaDB database system.
	// 'kPostgreSQL' indicates the PostgreSQL database system.
	// 'kHPUX' indicates the HPUX database system.
	// 'kVOS' indicates the VOS database system.
	// 'kOther' indicates the other types of operating system.
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]
	HostType *string `json:"hostType,omitempty"`

	// Specifies a list of IP addresses for entities of type 'kVirtualMachine'.
	IPAddresses []string `json:"ipAddresses"`

	// Specifies whether VM is managed or not for entities of type
	// 'kVirtualMachine'.
	IsManagedVM *bool `json:"isManagedVm,omitempty"`

	// Specifies the physical location of the resource group.
	Location *string `json:"location,omitempty"`

	// Specifies the amount of memory in MegaBytes of the Azure resource of
	// type 'kComputeOptions'.
	MemoryMbytes *int64 `json:"memoryMbytes,omitempty"`

	// Specifies the name of the Object set by the Cloud Provider.
	// If the provider did not set a name for the object, this field is not set.
	Name *string `json:"name,omitempty"`

	// Specifies the number of CPU cores of the Azure resource of
	// type 'kComputeOptions'.
	NumCores *int32 `json:"numCores,omitempty"`

	// Specifies the Protection Source id of the registered Physical Host.
	// If the cloud entity is protected using a Physical Agent, it must be
	// registered as a physical host.
	PhysicalSourceID *int64 `json:"physicalSourceId,omitempty"`

	// Specifies the region in which the Azure Stack will be registered.
	Region *string `json:"region,omitempty"`

	// Specifies the unique Id of the resource given by the cloud provider.
	ResourceID *string `json:"resourceId,omitempty"`

	// Specifies the id of the "convert and deploy" restore task that
	// created the entity in the cloud.
	//
	// It is required to support the DR-to-cloud usecase where we replicate an
	// on-prem entity to a cluster running in cloud, bring it up using
	// "convert and deploy" mechanism, protect it using a cloud job that uses
	// physical adapter, and convert it back to the on-prem format before
	// replication.
	//
	// Before replicating, we need to update the backup task state of the backed
	// up entity using the on-prem entity and on-prem entity's parent.
	// The id is used to lookup the restore entity that contains details about
	// the on-prem entity.
	//
	// It is set at the time of refreshing the cloud entity hierarchy if all the
	// following conditions are met:
	// Name of the current entity matches with name of any cloud entity
	// deployed using the "convert and deploy" restore task.
	// Restore entity associated with the above matched cloud entity has
	// 'failed_over' flag set to true in its cloud extension.
	RestoreTaskID *int64 `json:"restoreTaskId,omitempty"`

	// Specifies Subscription id inside a customer's Azure account. It represents
	// sub-section within the Azure account where a customer allows us to
	// create VMs, storage account etc.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// Specifies the subscription type of Azure such as 'kAzureCommercial',
	// 'kAzureGovCloud', 'kAzureStackCommercial' or 'kAzureStackADFS'.
	// Specifies the subscription type of an Azure source entity.
	// 'kAzureCommercial' indicates a standard Azure subscription.
	// 'kAzureGovCloud' indicates a govt Azure subscription.
	// 'kAzureStackCommercial' indicates a stack commercial Azure subscription.
	// 'kAzureStackADFS' indicates a ADFS Azure subbscription.
	// Enum: ["kAzureCommercial","kAzureGovCloud","kAzureStackCommercial","kAzureStackADFS"]
	SubscriptionType *string `json:"subscriptionType,omitempty"`

	// Specifies the list of Azure tag attributes.
	TagAttributes []*TagAttribute `json:"tagAttributes"`

	// Specifies Tenant Id of the active directory of Azure account.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies the type of an Azure Protection Source Object such as
	// 'kStorageContainer', 'kVirtualMachine', 'kVirtualNetwork', etc.
	// Specifies the type of an Azure source entity.
	// 'kSubscription' indicates a billing unit within Azure account.
	// 'kResourceGroup' indicates a container that holds related resources.
	// 'kVirtualMachine' indicates a Virtual Machine in Azure environment.
	// 'kStorageAccount' represents a collection of storage containers.
	// 'kStorageKey' indicates a key required to access the storage account.
	// 'kStorageContainer' represents a storage container within a storage account.
	// 'kStorageBlob' represents a storage blog within a storage container.
	// 'kStorageResourceGroup' indicates a container that holds related
	// storage resources.
	// 'kNetworkSecurityGroup' represents a network security group.
	// 'kVirtualNetwork' represents a virtual network.
	// 'kNetworkResourceGroup' indicates a container that holds related
	// network resources.
	// 'kSubnet' represents a subnet within the virtual network.
	// 'kComputeOptions' indicates the number of CPU cores and memory size
	// available for a type of a Virtual Machine.
	// 'kAvailabilitySet' indicates the availability set.
	// Enum: ["kSubscription","kResourceGroup","kVirtualMachine","kStorageAccount","kStorageKey","kStorageContainer","kStorageBlob","kStorageResourceGroup","kNetworkSecurityGroup","kVirtualNetwork","kNetworkResourceGroup","kSubnet","kComputeOptions","kAvailabilitySet"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this azure protection source
func (m *AzureProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzureType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskInfoList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var azureProtectionSourceTypeAzureTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSubscription","kResourceGroup","kVirtualMachine","kStorageAccount","kStorageKey","kStorageContainer","kStorageBlob","kStorageResourceGroup","kNetworkSecurityGroup","kVirtualNetwork","kNetworkResourceGroup","kSubnet","kComputeOptions","kAvailabilitySet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureProtectionSourceTypeAzureTypePropEnum = append(azureProtectionSourceTypeAzureTypePropEnum, v)
	}
}

const (

	// AzureProtectionSourceAzureTypeKSubscription captures enum value "kSubscription"
	AzureProtectionSourceAzureTypeKSubscription string = "kSubscription"

	// AzureProtectionSourceAzureTypeKResourceGroup captures enum value "kResourceGroup"
	AzureProtectionSourceAzureTypeKResourceGroup string = "kResourceGroup"

	// AzureProtectionSourceAzureTypeKVirtualMachine captures enum value "kVirtualMachine"
	AzureProtectionSourceAzureTypeKVirtualMachine string = "kVirtualMachine"

	// AzureProtectionSourceAzureTypeKStorageAccount captures enum value "kStorageAccount"
	AzureProtectionSourceAzureTypeKStorageAccount string = "kStorageAccount"

	// AzureProtectionSourceAzureTypeKStorageKey captures enum value "kStorageKey"
	AzureProtectionSourceAzureTypeKStorageKey string = "kStorageKey"

	// AzureProtectionSourceAzureTypeKStorageContainer captures enum value "kStorageContainer"
	AzureProtectionSourceAzureTypeKStorageContainer string = "kStorageContainer"

	// AzureProtectionSourceAzureTypeKStorageBlob captures enum value "kStorageBlob"
	AzureProtectionSourceAzureTypeKStorageBlob string = "kStorageBlob"

	// AzureProtectionSourceAzureTypeKStorageResourceGroup captures enum value "kStorageResourceGroup"
	AzureProtectionSourceAzureTypeKStorageResourceGroup string = "kStorageResourceGroup"

	// AzureProtectionSourceAzureTypeKNetworkSecurityGroup captures enum value "kNetworkSecurityGroup"
	AzureProtectionSourceAzureTypeKNetworkSecurityGroup string = "kNetworkSecurityGroup"

	// AzureProtectionSourceAzureTypeKVirtualNetwork captures enum value "kVirtualNetwork"
	AzureProtectionSourceAzureTypeKVirtualNetwork string = "kVirtualNetwork"

	// AzureProtectionSourceAzureTypeKNetworkResourceGroup captures enum value "kNetworkResourceGroup"
	AzureProtectionSourceAzureTypeKNetworkResourceGroup string = "kNetworkResourceGroup"

	// AzureProtectionSourceAzureTypeKSubnet captures enum value "kSubnet"
	AzureProtectionSourceAzureTypeKSubnet string = "kSubnet"

	// AzureProtectionSourceAzureTypeKComputeOptions captures enum value "kComputeOptions"
	AzureProtectionSourceAzureTypeKComputeOptions string = "kComputeOptions"

	// AzureProtectionSourceAzureTypeKAvailabilitySet captures enum value "kAvailabilitySet"
	AzureProtectionSourceAzureTypeKAvailabilitySet string = "kAvailabilitySet"
)

// prop value enum
func (m *AzureProtectionSource) validateAzureTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureProtectionSourceTypeAzureTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureProtectionSource) validateAzureType(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAzureTypeEnum("azureType", "body", *m.AzureType); err != nil {
		return err
	}

	return nil
}

func (m *AzureProtectionSource) validateDiskInfoList(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskInfoList) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskInfoList); i++ {
		if swag.IsZero(m.DiskInfoList[i]) { // not required
			continue
		}

		if m.DiskInfoList[i] != nil {
			if err := m.DiskInfoList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var azureProtectionSourceTypeHostTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureProtectionSourceTypeHostTypePropEnum = append(azureProtectionSourceTypeHostTypePropEnum, v)
	}
}

const (

	// AzureProtectionSourceHostTypeKLinux captures enum value "kLinux"
	AzureProtectionSourceHostTypeKLinux string = "kLinux"

	// AzureProtectionSourceHostTypeKWindows captures enum value "kWindows"
	AzureProtectionSourceHostTypeKWindows string = "kWindows"

	// AzureProtectionSourceHostTypeKAix captures enum value "kAix"
	AzureProtectionSourceHostTypeKAix string = "kAix"

	// AzureProtectionSourceHostTypeKSolaris captures enum value "kSolaris"
	AzureProtectionSourceHostTypeKSolaris string = "kSolaris"

	// AzureProtectionSourceHostTypeKSapHana captures enum value "kSapHana"
	AzureProtectionSourceHostTypeKSapHana string = "kSapHana"

	// AzureProtectionSourceHostTypeKSapOracle captures enum value "kSapOracle"
	AzureProtectionSourceHostTypeKSapOracle string = "kSapOracle"

	// AzureProtectionSourceHostTypeKCockroachDB captures enum value "kCockroachDB"
	AzureProtectionSourceHostTypeKCockroachDB string = "kCockroachDB"

	// AzureProtectionSourceHostTypeKMySQL captures enum value "kMySQL"
	AzureProtectionSourceHostTypeKMySQL string = "kMySQL"

	// AzureProtectionSourceHostTypeKOther captures enum value "kOther"
	AzureProtectionSourceHostTypeKOther string = "kOther"

	// AzureProtectionSourceHostTypeKSapSybase captures enum value "kSapSybase"
	AzureProtectionSourceHostTypeKSapSybase string = "kSapSybase"

	// AzureProtectionSourceHostTypeKSapMaxDB captures enum value "kSapMaxDB"
	AzureProtectionSourceHostTypeKSapMaxDB string = "kSapMaxDB"

	// AzureProtectionSourceHostTypeKSapSybaseIQ captures enum value "kSapSybaseIQ"
	AzureProtectionSourceHostTypeKSapSybaseIQ string = "kSapSybaseIQ"

	// AzureProtectionSourceHostTypeKDB2 captures enum value "kDB2"
	AzureProtectionSourceHostTypeKDB2 string = "kDB2"

	// AzureProtectionSourceHostTypeKSapASE captures enum value "kSapASE"
	AzureProtectionSourceHostTypeKSapASE string = "kSapASE"

	// AzureProtectionSourceHostTypeKMariaDB captures enum value "kMariaDB"
	AzureProtectionSourceHostTypeKMariaDB string = "kMariaDB"

	// AzureProtectionSourceHostTypeKPostgreSQL captures enum value "kPostgreSQL"
	AzureProtectionSourceHostTypeKPostgreSQL string = "kPostgreSQL"

	// AzureProtectionSourceHostTypeKVOS captures enum value "kVOS"
	AzureProtectionSourceHostTypeKVOS string = "kVOS"

	// AzureProtectionSourceHostTypeKHPUX captures enum value "kHPUX"
	AzureProtectionSourceHostTypeKHPUX string = "kHPUX"
)

// prop value enum
func (m *AzureProtectionSource) validateHostTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureProtectionSourceTypeHostTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureProtectionSource) validateHostType(formats strfmt.Registry) error {
	if swag.IsZero(m.HostType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostTypeEnum("hostType", "body", *m.HostType); err != nil {
		return err
	}

	return nil
}

var azureProtectionSourceTypeSubscriptionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAzureCommercial","kAzureGovCloud","kAzureStackCommercial","kAzureStackADFS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureProtectionSourceTypeSubscriptionTypePropEnum = append(azureProtectionSourceTypeSubscriptionTypePropEnum, v)
	}
}

const (

	// AzureProtectionSourceSubscriptionTypeKAzureCommercial captures enum value "kAzureCommercial"
	AzureProtectionSourceSubscriptionTypeKAzureCommercial string = "kAzureCommercial"

	// AzureProtectionSourceSubscriptionTypeKAzureGovCloud captures enum value "kAzureGovCloud"
	AzureProtectionSourceSubscriptionTypeKAzureGovCloud string = "kAzureGovCloud"

	// AzureProtectionSourceSubscriptionTypeKAzureStackCommercial captures enum value "kAzureStackCommercial"
	AzureProtectionSourceSubscriptionTypeKAzureStackCommercial string = "kAzureStackCommercial"

	// AzureProtectionSourceSubscriptionTypeKAzureStackADFS captures enum value "kAzureStackADFS"
	AzureProtectionSourceSubscriptionTypeKAzureStackADFS string = "kAzureStackADFS"
)

// prop value enum
func (m *AzureProtectionSource) validateSubscriptionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureProtectionSourceTypeSubscriptionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureProtectionSource) validateSubscriptionType(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriptionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubscriptionTypeEnum("subscriptionType", "body", *m.SubscriptionType); err != nil {
		return err
	}

	return nil
}

func (m *AzureProtectionSource) validateTagAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.TagAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.TagAttributes); i++ {
		if swag.IsZero(m.TagAttributes[i]) { // not required
			continue
		}

		if m.TagAttributes[i] != nil {
			if err := m.TagAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var azureProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSubscription","kResourceGroup","kVirtualMachine","kStorageAccount","kStorageKey","kStorageContainer","kStorageBlob","kStorageResourceGroup","kNetworkSecurityGroup","kVirtualNetwork","kNetworkResourceGroup","kSubnet","kComputeOptions","kAvailabilitySet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureProtectionSourceTypeTypePropEnum = append(azureProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// AzureProtectionSourceTypeKSubscription captures enum value "kSubscription"
	AzureProtectionSourceTypeKSubscription string = "kSubscription"

	// AzureProtectionSourceTypeKResourceGroup captures enum value "kResourceGroup"
	AzureProtectionSourceTypeKResourceGroup string = "kResourceGroup"

	// AzureProtectionSourceTypeKVirtualMachine captures enum value "kVirtualMachine"
	AzureProtectionSourceTypeKVirtualMachine string = "kVirtualMachine"

	// AzureProtectionSourceTypeKStorageAccount captures enum value "kStorageAccount"
	AzureProtectionSourceTypeKStorageAccount string = "kStorageAccount"

	// AzureProtectionSourceTypeKStorageKey captures enum value "kStorageKey"
	AzureProtectionSourceTypeKStorageKey string = "kStorageKey"

	// AzureProtectionSourceTypeKStorageContainer captures enum value "kStorageContainer"
	AzureProtectionSourceTypeKStorageContainer string = "kStorageContainer"

	// AzureProtectionSourceTypeKStorageBlob captures enum value "kStorageBlob"
	AzureProtectionSourceTypeKStorageBlob string = "kStorageBlob"

	// AzureProtectionSourceTypeKStorageResourceGroup captures enum value "kStorageResourceGroup"
	AzureProtectionSourceTypeKStorageResourceGroup string = "kStorageResourceGroup"

	// AzureProtectionSourceTypeKNetworkSecurityGroup captures enum value "kNetworkSecurityGroup"
	AzureProtectionSourceTypeKNetworkSecurityGroup string = "kNetworkSecurityGroup"

	// AzureProtectionSourceTypeKVirtualNetwork captures enum value "kVirtualNetwork"
	AzureProtectionSourceTypeKVirtualNetwork string = "kVirtualNetwork"

	// AzureProtectionSourceTypeKNetworkResourceGroup captures enum value "kNetworkResourceGroup"
	AzureProtectionSourceTypeKNetworkResourceGroup string = "kNetworkResourceGroup"

	// AzureProtectionSourceTypeKSubnet captures enum value "kSubnet"
	AzureProtectionSourceTypeKSubnet string = "kSubnet"

	// AzureProtectionSourceTypeKComputeOptions captures enum value "kComputeOptions"
	AzureProtectionSourceTypeKComputeOptions string = "kComputeOptions"

	// AzureProtectionSourceTypeKAvailabilitySet captures enum value "kAvailabilitySet"
	AzureProtectionSourceTypeKAvailabilitySet string = "kAvailabilitySet"
)

// prop value enum
func (m *AzureProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this azure protection source based on the context it is used
func (m *AzureProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskInfoList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureProtectionSource) contextValidateDiskInfoList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiskInfoList); i++ {

		if m.DiskInfoList[i] != nil {

			if swag.IsZero(m.DiskInfoList[i]) { // not required
				return nil
			}

			if err := m.DiskInfoList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureProtectionSource) contextValidateTagAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagAttributes); i++ {

		if m.TagAttributes[i] != nil {

			if swag.IsZero(m.TagAttributes[i]) { // not required
				return nil
			}

			if err := m.TagAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureProtectionSource) UnmarshalBinary(b []byte) error {
	var res AzureProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
