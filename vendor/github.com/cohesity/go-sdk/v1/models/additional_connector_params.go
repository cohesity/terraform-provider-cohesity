// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdditionalConnectorParams Message that encapsulates the additional connector params to establish a
// connection with a particular environment.
//
// swagger:model AdditionalConnectorParams
type AdditionalConnectorParams struct {

	// If set, the cert_cache_ in ConnectorCertificateValidator will not be
	// used for this connector conext.
	// Specific to agent connector contexts.
	DisableCertCache *bool `json:"disableCertCache,omitempty"`

	// Endpoint URL for querying the MS graph token fetched from
	// openid-configuration.
	GraphTokenEndpoint *string `json:"graphTokenEndpoint,omitempty"`

	// Max http sessions per context for VMWare vAPI calls.
	MaxVmwareHTTPSessions *int32 `json:"maxVmwareHttpSessions,omitempty"`

	// Endpoint or host url where all the graph calls are made. It is fetched
	// from openid-configuration.
	MsgraphHost *string `json:"msgraphHost,omitempty"`

	// A token used only in O365 Emulator identifying the information of number
	// of Users, Sites, Groups, Teams & Public Folders and their ids.
	O365EmulatorEntityInfo *string `json:"o365EmulatorEntityInfo,omitempty"`

	// Optional o365_region proto to store the region info to be used while
	// making ews/graph api calls in o365 adapter.
	O365Region *O365RegionProto `json:"o365Region,omitempty"`

	// Whether we should skip creating autodiscove proxy. This is needed only
	// during fetching eh and in public folder backups setup.
	OutlookSkipCreatingAutodiscoverProxy *bool `json:"outlookSkipCreatingAutodiscoverProxy,omitempty"`

	// RegisteredEntitySfdcParams contains soap_endpoint_url and
	// metadata_endpoint_url which are needed for connecting to Sfdc in connector
	// params.
	RegisteredEntitySfdcParams *RegisteredEntitySfdcParams `json:"registeredEntitySfdcParams,omitempty"`

	// Wheather to use GetSearchableMailboxes EWS API while descovering User
	// Mailboxes or not.
	UseGetSearchableMailboxesAPI *bool `json:"useGetSearchableMailboxesApi,omitempty"`

	// Whether OAuth should be used for authentication with EWS API (outlook
	// backup), applicable only for Exchange Online.
	UseOutlookEwsOauth *bool `json:"useOutlookEwsOauth,omitempty"`
}

// Validate validates this additional connector params
func (m *AdditionalConnectorParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateO365Region(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredEntitySfdcParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalConnectorParams) validateO365Region(formats strfmt.Registry) error {
	if swag.IsZero(m.O365Region) { // not required
		return nil
	}

	if m.O365Region != nil {
		if err := m.O365Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Region")
			}
			return err
		}
	}

	return nil
}

func (m *AdditionalConnectorParams) validateRegisteredEntitySfdcParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredEntitySfdcParams) { // not required
		return nil
	}

	if m.RegisteredEntitySfdcParams != nil {
		if err := m.RegisteredEntitySfdcParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredEntitySfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredEntitySfdcParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this additional connector params based on the context it is used
func (m *AdditionalConnectorParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateO365Region(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredEntitySfdcParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalConnectorParams) contextValidateO365Region(ctx context.Context, formats strfmt.Registry) error {

	if m.O365Region != nil {

		if swag.IsZero(m.O365Region) { // not required
			return nil
		}

		if err := m.O365Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Region")
			}
			return err
		}
	}

	return nil
}

func (m *AdditionalConnectorParams) contextValidateRegisteredEntitySfdcParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RegisteredEntitySfdcParams != nil {

		if swag.IsZero(m.RegisteredEntitySfdcParams) { // not required
			return nil
		}

		if err := m.RegisteredEntitySfdcParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredEntitySfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredEntitySfdcParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdditionalConnectorParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdditionalConnectorParams) UnmarshalBinary(b []byte) error {
	var res AdditionalConnectorParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
