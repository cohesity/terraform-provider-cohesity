// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeSecurityInfo Volume Security Information.
//
// Specifies information about NetApp volume security settings.
//
// swagger:model VolumeSecurityInfo
type VolumeSecurityInfo struct {

	// Specifies the Unix group ID for this volume. 0 indicates the root id.
	GroupID *int32 `json:"groupId,omitempty"`

	// Specifies the Unix permission bits in octal string format.
	Permissions *string `json:"permissions,omitempty"`

	// Specifies the security style associated with this volume.
	// Specifies the type of a NetApp Volume.
	// 'kUnix' indicates Unix-style security.
	// 'kNtfs' indicates Windows NTFS-style security.
	// 'kMixed' indicates mixed-style security.
	// 'kUnified' indicates Unified-style security.
	// 'kUnknown' indicates the security style is unknown.
	// Enum: ["kUnix","kNtfs","kMixed","kUnified","kUnknown"]
	Style *string `json:"style,omitempty"`

	// Specifies the Unix user id for this volume. 0 indicates the root id.
	UserID *int32 `json:"userId,omitempty"`
}

// Validate validates this volume security info
func (m *VolumeSecurityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStyle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var volumeSecurityInfoTypeStylePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUnix","kNtfs","kMixed","kUnified","kUnknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeSecurityInfoTypeStylePropEnum = append(volumeSecurityInfoTypeStylePropEnum, v)
	}
}

const (

	// VolumeSecurityInfoStyleKUnix captures enum value "kUnix"
	VolumeSecurityInfoStyleKUnix string = "kUnix"

	// VolumeSecurityInfoStyleKNtfs captures enum value "kNtfs"
	VolumeSecurityInfoStyleKNtfs string = "kNtfs"

	// VolumeSecurityInfoStyleKMixed captures enum value "kMixed"
	VolumeSecurityInfoStyleKMixed string = "kMixed"

	// VolumeSecurityInfoStyleKUnified captures enum value "kUnified"
	VolumeSecurityInfoStyleKUnified string = "kUnified"

	// VolumeSecurityInfoStyleKUnknown captures enum value "kUnknown"
	VolumeSecurityInfoStyleKUnknown string = "kUnknown"
)

// prop value enum
func (m *VolumeSecurityInfo) validateStyleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, volumeSecurityInfoTypeStylePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VolumeSecurityInfo) validateStyle(formats strfmt.Registry) error {
	if swag.IsZero(m.Style) { // not required
		return nil
	}

	// value enum
	if err := m.validateStyleEnum("style", "body", *m.Style); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this volume security info based on context it is used
func (m *VolumeSecurityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeSecurityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeSecurityInfo) UnmarshalBinary(b []byte) error {
	var res VolumeSecurityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
