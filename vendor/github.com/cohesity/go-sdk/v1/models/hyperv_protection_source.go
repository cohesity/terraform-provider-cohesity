// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HypervProtectionSource HyperV Protection Source.
//
// Specifies a Protection Source in HyperV environment.
//
// swagger:model HypervProtectionSource
type HypervProtectionSource struct {

	// Array of Agents on the Physical Protection Source.
	//
	// Specifiles the agents running on the HyperV Protection Source
	// and the status information.
	Agents []*AgentInformation `json:"agents"`

	// Specifies the type of backup supported by the VM.
	// 'kRctBackup', 'kVssBackup'
	// Specifies the type of an HyperV datastore object.
	// 'kRctBackup' indicates backup is done using RCT/checkpoints.
	// 'kVssBackup' indicates backup is done using VSS.
	// Enum: ["kRctBackup","kVssBackup"]
	BackupType *string `json:"backupType,omitempty"`

	// Specifies the build number for HyperV SCVMM Servers.
	BuildNumber *string `json:"buildNumber,omitempty"`

	// Specifies the cluster name for 'kHostCluster' objects.
	ClusterName *string `json:"clusterName,omitempty"`

	// Specifies additional information for 'kDatastore' objects.
	DatastoreInfo *HypervDatastore `json:"datastoreInfo,omitempty"`

	// Specifies a description about the Protection Source.
	Description *string `json:"description,omitempty"`

	// Specifies host OS type for 'kVirtualMachine' objects.
	// 'kLinux' indicates the Linux operating system.
	// 'kWindows' indicates the Microsoft Windows operating system.
	// 'kAix' indicates the IBM AIX operating system.
	// 'kSolaris' indicates the Oracle Solaris operating system.
	// 'kSapHana' indicates the Sap Hana database system developed by SAP SE.
	// 'kSapOracle' indicates the Sap Oracle database system developed by SAP SE.
	// 'kCockroachDB' indicates the CockroachDB database system.
	// 'kMySQL' indicates the MySQL database system.
	// 'kSapSybase' indicates the SapSybase database system.
	// 'kSapMaxDB' indicates the SapMaxDB database system.
	// 'kSapSybaseIQ' indicates the SapSybaseIQ database system.
	// 'kDB2' indicates the DB2 database system.
	// 'kSapASE' indicates the SapASE database system.
	// 'kMariaDB' indicates the MariaDB database system.
	// 'kPostgreSQL' indicates the PostgreSQL database system.
	// 'kHPUX' indicates the HPUX database system.
	// 'kVOS' indicates the VOS database system.
	// 'kOther' indicates the other types of operating system.
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]
	HostType *string `json:"hostType,omitempty"`

	// Specifies the UUID for 'kVirtualMachine' HyperV objects.
	HypervUUID *string `json:"hypervUuid,omitempty"`

	// Specifies the name of the HyperV Object.
	Name *string `json:"name,omitempty"`

	// Specifies the list of VM Tag attributes associated with this
	// Object.
	TagAttributes []*TagAttribute `json:"tagAttributes"`

	// Specifies the type of an HyperV Protection Source Object such as
	// 'kSCVMMServer', 'kStandaloneHost', 'kNetwork', etc.
	// overrideDescription: true
	// Specifies the type of an HyperV Protection Source.
	// 'kSCVMMServer' indicates a collection of root folders clusters.
	// 'kStandaloneHost' indicates a single Nutanix cluster.
	// 'kStandaloneCluster' indicates a single Nutanix cluster.
	// 'kHostGroup' indicates a Nutanix cluster managed by a Prism Central.
	// 'kHypervHost' indicates an HyperV host.
	// 'kHostCluster' indicates a Nutanix cluster managed by a Prism Central.
	// 'kVirtualMachine' indicates a Virtual Machine.
	// 'kNetwork' indicates a Virtual Machine network object.
	// 'kDatastore' represents a storage container object.
	// 'kTag' indicates a tag type object.
	// 'kCustomProperty' indicates a custom property including tag type.
	// Enum: ["kSCVMMServer","kStandaloneHost","kStandaloneCluster","kHostGroup","kHypervHost","kHostCluster","kVirtualMachine","kNetwork","kDatastore","kTag","kCustomProperty"]
	Type *string `json:"type,omitempty"`

	// Specifies the UUID of the Object. This is unique within the HyperV
	// environment.
	UUID *string `json:"uuid,omitempty"`

	// Specifies additional information for 'kVirtualMachine' objects.
	VMInfo *HypervVirtualMachine `json:"vmInfo,omitempty"`

	// Specifies the windows version for HyperV hosts.
	WindowsVersion *string `json:"windowsVersion,omitempty"`
}

// Validate validates this hyperv protection source
func (m *HypervProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatastoreInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HypervProtectionSource) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	for i := 0; i < len(m.Agents); i++ {
		if swag.IsZero(m.Agents[i]) { // not required
			continue
		}

		if m.Agents[i] != nil {
			if err := m.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var hypervProtectionSourceTypeBackupTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRctBackup","kVssBackup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hypervProtectionSourceTypeBackupTypePropEnum = append(hypervProtectionSourceTypeBackupTypePropEnum, v)
	}
}

const (

	// HypervProtectionSourceBackupTypeKRctBackup captures enum value "kRctBackup"
	HypervProtectionSourceBackupTypeKRctBackup string = "kRctBackup"

	// HypervProtectionSourceBackupTypeKVssBackup captures enum value "kVssBackup"
	HypervProtectionSourceBackupTypeKVssBackup string = "kVssBackup"
)

// prop value enum
func (m *HypervProtectionSource) validateBackupTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hypervProtectionSourceTypeBackupTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HypervProtectionSource) validateBackupType(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackupTypeEnum("backupType", "body", *m.BackupType); err != nil {
		return err
	}

	return nil
}

func (m *HypervProtectionSource) validateDatastoreInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreInfo) { // not required
		return nil
	}

	if m.DatastoreInfo != nil {
		if err := m.DatastoreInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreInfo")
			}
			return err
		}
	}

	return nil
}

var hypervProtectionSourceTypeHostTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hypervProtectionSourceTypeHostTypePropEnum = append(hypervProtectionSourceTypeHostTypePropEnum, v)
	}
}

const (

	// HypervProtectionSourceHostTypeKLinux captures enum value "kLinux"
	HypervProtectionSourceHostTypeKLinux string = "kLinux"

	// HypervProtectionSourceHostTypeKWindows captures enum value "kWindows"
	HypervProtectionSourceHostTypeKWindows string = "kWindows"

	// HypervProtectionSourceHostTypeKAix captures enum value "kAix"
	HypervProtectionSourceHostTypeKAix string = "kAix"

	// HypervProtectionSourceHostTypeKSolaris captures enum value "kSolaris"
	HypervProtectionSourceHostTypeKSolaris string = "kSolaris"

	// HypervProtectionSourceHostTypeKSapHana captures enum value "kSapHana"
	HypervProtectionSourceHostTypeKSapHana string = "kSapHana"

	// HypervProtectionSourceHostTypeKSapOracle captures enum value "kSapOracle"
	HypervProtectionSourceHostTypeKSapOracle string = "kSapOracle"

	// HypervProtectionSourceHostTypeKCockroachDB captures enum value "kCockroachDB"
	HypervProtectionSourceHostTypeKCockroachDB string = "kCockroachDB"

	// HypervProtectionSourceHostTypeKMySQL captures enum value "kMySQL"
	HypervProtectionSourceHostTypeKMySQL string = "kMySQL"

	// HypervProtectionSourceHostTypeKOther captures enum value "kOther"
	HypervProtectionSourceHostTypeKOther string = "kOther"

	// HypervProtectionSourceHostTypeKSapSybase captures enum value "kSapSybase"
	HypervProtectionSourceHostTypeKSapSybase string = "kSapSybase"

	// HypervProtectionSourceHostTypeKSapMaxDB captures enum value "kSapMaxDB"
	HypervProtectionSourceHostTypeKSapMaxDB string = "kSapMaxDB"

	// HypervProtectionSourceHostTypeKSapSybaseIQ captures enum value "kSapSybaseIQ"
	HypervProtectionSourceHostTypeKSapSybaseIQ string = "kSapSybaseIQ"

	// HypervProtectionSourceHostTypeKDB2 captures enum value "kDB2"
	HypervProtectionSourceHostTypeKDB2 string = "kDB2"

	// HypervProtectionSourceHostTypeKSapASE captures enum value "kSapASE"
	HypervProtectionSourceHostTypeKSapASE string = "kSapASE"

	// HypervProtectionSourceHostTypeKMariaDB captures enum value "kMariaDB"
	HypervProtectionSourceHostTypeKMariaDB string = "kMariaDB"

	// HypervProtectionSourceHostTypeKPostgreSQL captures enum value "kPostgreSQL"
	HypervProtectionSourceHostTypeKPostgreSQL string = "kPostgreSQL"

	// HypervProtectionSourceHostTypeKVOS captures enum value "kVOS"
	HypervProtectionSourceHostTypeKVOS string = "kVOS"

	// HypervProtectionSourceHostTypeKHPUX captures enum value "kHPUX"
	HypervProtectionSourceHostTypeKHPUX string = "kHPUX"
)

// prop value enum
func (m *HypervProtectionSource) validateHostTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hypervProtectionSourceTypeHostTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HypervProtectionSource) validateHostType(formats strfmt.Registry) error {
	if swag.IsZero(m.HostType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostTypeEnum("hostType", "body", *m.HostType); err != nil {
		return err
	}

	return nil
}

func (m *HypervProtectionSource) validateTagAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.TagAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.TagAttributes); i++ {
		if swag.IsZero(m.TagAttributes[i]) { // not required
			continue
		}

		if m.TagAttributes[i] != nil {
			if err := m.TagAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var hypervProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSCVMMServer","kStandaloneHost","kStandaloneCluster","kHostGroup","kHypervHost","kHostCluster","kVirtualMachine","kNetwork","kDatastore","kTag","kCustomProperty"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hypervProtectionSourceTypeTypePropEnum = append(hypervProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// HypervProtectionSourceTypeKSCVMMServer captures enum value "kSCVMMServer"
	HypervProtectionSourceTypeKSCVMMServer string = "kSCVMMServer"

	// HypervProtectionSourceTypeKStandaloneHost captures enum value "kStandaloneHost"
	HypervProtectionSourceTypeKStandaloneHost string = "kStandaloneHost"

	// HypervProtectionSourceTypeKStandaloneCluster captures enum value "kStandaloneCluster"
	HypervProtectionSourceTypeKStandaloneCluster string = "kStandaloneCluster"

	// HypervProtectionSourceTypeKHostGroup captures enum value "kHostGroup"
	HypervProtectionSourceTypeKHostGroup string = "kHostGroup"

	// HypervProtectionSourceTypeKHypervHost captures enum value "kHypervHost"
	HypervProtectionSourceTypeKHypervHost string = "kHypervHost"

	// HypervProtectionSourceTypeKHostCluster captures enum value "kHostCluster"
	HypervProtectionSourceTypeKHostCluster string = "kHostCluster"

	// HypervProtectionSourceTypeKVirtualMachine captures enum value "kVirtualMachine"
	HypervProtectionSourceTypeKVirtualMachine string = "kVirtualMachine"

	// HypervProtectionSourceTypeKNetwork captures enum value "kNetwork"
	HypervProtectionSourceTypeKNetwork string = "kNetwork"

	// HypervProtectionSourceTypeKDatastore captures enum value "kDatastore"
	HypervProtectionSourceTypeKDatastore string = "kDatastore"

	// HypervProtectionSourceTypeKTag captures enum value "kTag"
	HypervProtectionSourceTypeKTag string = "kTag"

	// HypervProtectionSourceTypeKCustomProperty captures enum value "kCustomProperty"
	HypervProtectionSourceTypeKCustomProperty string = "kCustomProperty"
)

// prop value enum
func (m *HypervProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hypervProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HypervProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *HypervProtectionSource) validateVMInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VMInfo) { // not required
		return nil
	}

	if m.VMInfo != nil {
		if err := m.VMInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hyperv protection source based on the context it is used
func (m *HypervProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatastoreInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HypervProtectionSource) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Agents); i++ {

		if m.Agents[i] != nil {

			if swag.IsZero(m.Agents[i]) { // not required
				return nil
			}

			if err := m.Agents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HypervProtectionSource) contextValidateDatastoreInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DatastoreInfo != nil {

		if swag.IsZero(m.DatastoreInfo) { // not required
			return nil
		}

		if err := m.DatastoreInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *HypervProtectionSource) contextValidateTagAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagAttributes); i++ {

		if m.TagAttributes[i] != nil {

			if swag.IsZero(m.TagAttributes[i]) { // not required
				return nil
			}

			if err := m.TagAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HypervProtectionSource) contextValidateVMInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.VMInfo != nil {

		if swag.IsZero(m.VMInfo) { // not required
			return nil
		}

		if err := m.VMInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HypervProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HypervProtectionSource) UnmarshalBinary(b []byte) error {
	var res HypervProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
