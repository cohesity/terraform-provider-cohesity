// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserQuotaAndUsage User Quota And Usage.
//
// Specifies the quota override and usage statistics
// for a particular user.
//
// swagger:model UserQuotaAndUsage
type UserQuotaAndUsage struct {

	// User quota policy applied to this user.
	QuotaPolicy *QuotaPolicy `json:"quotaPolicy,omitempty"`

	// If interested in a user via smb_client, include SID.
	// Otherwise, If a valid unix-id to SID mappings are available (i.e., when
	// mixed mode is enabled) the server will perform the necessary id mapping
	// and return the correct usage irrespective of whether the unix id / SID is
	// provided.
	// The string is of following format -
	// S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn.
	Sid *string `json:"sid,omitempty"`

	// If interested in a user via unix-identifier, include UnixUid.
	// Otherwise, If a valid unix-id to SID mappings are available (i.e., when
	// mixed mode is enabled) the server will perform the necessary id mapping
	// and return the correct usage irrespective of whether the unix id / SID is
	// provided.
	UnixUID *uint32 `json:"unixUid,omitempty"`

	// Current logical usage of user id in the input view.
	UsageBytes *int64 `json:"usageBytes,omitempty"`
}

// Validate validates this user quota and usage
func (m *UserQuotaAndUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuotaPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserQuotaAndUsage) validateQuotaPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.QuotaPolicy) { // not required
		return nil
	}

	if m.QuotaPolicy != nil {
		if err := m.QuotaPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quotaPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quotaPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user quota and usage based on the context it is used
func (m *UserQuotaAndUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuotaPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserQuotaAndUsage) contextValidateQuotaPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.QuotaPolicy != nil {

		if swag.IsZero(m.QuotaPolicy) { // not required
			return nil
		}

		if err := m.QuotaPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quotaPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quotaPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserQuotaAndUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserQuotaAndUsage) UnmarshalBinary(b []byte) error {
	var res UserQuotaAndUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
