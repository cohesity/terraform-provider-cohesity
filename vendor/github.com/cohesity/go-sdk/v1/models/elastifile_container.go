// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ElastifileContainer Elastifile Container.
//
// Specifies information about container in an Elastifile Cluster.
//
// swagger:model ElastifileContainer
type ElastifileContainer struct {

	// Specifies the creation date of the container.
	CreatedAt *string `json:"createdAt,omitempty"`

	// Specifies id of a Elastifile Container in a Cluster.
	ID *int32 `json:"id,omitempty"`

	// Specifies if the container has NFS volumes or not.
	IsNfsInterface *bool `json:"isNfsInterface,omitempty"`

	// Specifies if the container has SMB volumes or not.
	IsSmbInterface *bool `json:"isSmbInterface,omitempty"`

	// Specifies the name of the container.
	Name *string `json:"name,omitempty"`

	// Specifies Elastifile supported Protocol information enabled on Elastifile
	// container.
	// 'kNfs' indicates NFS protocol in an elastifile container.
	// 'kSmb' indicates SMB protocol in an elastifile container.
	Protocols []string `json:"protocols"`

	// Specifies the bytes used by the container.
	UsedBytes *int64 `json:"usedBytes,omitempty"`

	// Specifies the UUID of the container.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this elastifile container
func (m *ElastifileContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocols(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var elastifileContainerProtocolsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kSmb"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		elastifileContainerProtocolsItemsEnum = append(elastifileContainerProtocolsItemsEnum, v)
	}
}

func (m *ElastifileContainer) validateProtocolsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, elastifileContainerProtocolsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ElastifileContainer) validateProtocols(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocols) { // not required
		return nil
	}

	for i := 0; i < len(m.Protocols); i++ {

		// value enum
		if err := m.validateProtocolsItemsEnum("protocols"+"."+strconv.Itoa(i), "body", m.Protocols[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this elastifile container based on context it is used
func (m *ElastifileContainer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ElastifileContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElastifileContainer) UnmarshalBinary(b []byte) error {
	var res ElastifileContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
