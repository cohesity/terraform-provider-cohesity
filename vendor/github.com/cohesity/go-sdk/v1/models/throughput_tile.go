// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ThroughputTile Throughput Tile.
//
// Throughput information for dashboard.
//
// swagger:model ThroughputTile
type ThroughputTile struct {

	// Maxium Read throughput in last 24 hours.
	MaxReadThroughput *int64 `json:"maxReadThroughput,omitempty"`

	// Maximum Write throughput in last 24 hours.
	MaxWriteThroughput *int64 `json:"maxWriteThroughput,omitempty"`

	// Read throughput samples taken for the past 24 hours at 10 minutes
	// interval given in descending order of time.
	ReadThroughputSamples []*Sample `json:"readThroughputSamples"`

	// Write throughput samples taken for the past 24 hours at 10 minutes
	// interval given in descending order of time.
	WriteThroughputSamples []*Sample `json:"writeThroughputSamples"`
}

// Validate validates this throughput tile
func (m *ThroughputTile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReadThroughputSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWriteThroughputSamples(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThroughputTile) validateReadThroughputSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.ReadThroughputSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.ReadThroughputSamples); i++ {
		if swag.IsZero(m.ReadThroughputSamples[i]) { // not required
			continue
		}

		if m.ReadThroughputSamples[i] != nil {
			if err := m.ReadThroughputSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readThroughputSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readThroughputSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThroughputTile) validateWriteThroughputSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.WriteThroughputSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.WriteThroughputSamples); i++ {
		if swag.IsZero(m.WriteThroughputSamples[i]) { // not required
			continue
		}

		if m.WriteThroughputSamples[i] != nil {
			if err := m.WriteThroughputSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("writeThroughputSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("writeThroughputSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this throughput tile based on the context it is used
func (m *ThroughputTile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReadThroughputSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWriteThroughputSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThroughputTile) contextValidateReadThroughputSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReadThroughputSamples); i++ {

		if m.ReadThroughputSamples[i] != nil {

			if swag.IsZero(m.ReadThroughputSamples[i]) { // not required
				return nil
			}

			if err := m.ReadThroughputSamples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readThroughputSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readThroughputSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThroughputTile) contextValidateWriteThroughputSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WriteThroughputSamples); i++ {

		if m.WriteThroughputSamples[i] != nil {

			if swag.IsZero(m.WriteThroughputSamples[i]) { // not required
				return nil
			}

			if err := m.WriteThroughputSamples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("writeThroughputSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("writeThroughputSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThroughputTile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThroughputTile) UnmarshalBinary(b []byte) error {
	var res ThroughputTile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
