// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FileStatInfo Represents fstat result on a file.
//
// swagger:model FileStatInfo
type FileStatInfo struct {

	// Source inode id metadata for certain adapters e.g. Netapp.
	BackupSourceInodeID *int64 `json:"backupSourceInodeId,omitempty"`

	// If this is a file, the mtime as returned by stat.
	MtimeUsecs *int64 `json:"mtimeUsecs,omitempty"`

	// Metadata for the sharepoint item in browse. This will be set only if we
	// are quering for sharepoint site. This is used to further different between
	// item types, for example a kDirectory item in sharepoint site could be a
	// Document library (kSiteDoclib), list (kSiteList) or folder (kDirectory).
	SharepointItemMetadata *SharepointItemMetadata `json:"sharepointItemMetadata,omitempty"`

	// If this is a file, the size of the file as returned by stat.
	Size *int64 `json:"size,omitempty"`

	// The type of this entity. This field will not be populated for ReadDir
	// results, since the DirEntry already contains the type information.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this file stat info
func (m *FileStatInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSharepointItemMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileStatInfo) validateSharepointItemMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.SharepointItemMetadata) { // not required
		return nil
	}

	if m.SharepointItemMetadata != nil {
		if err := m.SharepointItemMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharepointItemMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharepointItemMetadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this file stat info based on the context it is used
func (m *FileStatInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSharepointItemMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileStatInfo) contextValidateSharepointItemMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.SharepointItemMetadata != nil {

		if swag.IsZero(m.SharepointItemMetadata) { // not required
			return nil
		}

		if err := m.SharepointItemMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharepointItemMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharepointItemMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FileStatInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileStatInfo) UnmarshalBinary(b []byte) error {
	var res FileStatInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
