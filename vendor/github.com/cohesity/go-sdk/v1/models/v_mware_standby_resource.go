// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMwareStandbyResource VMware specific resources needed to create a VM entity on the vCenter.
//
// swagger:model VMwareStandbyResource
type VMwareStandbyResource struct {

	// Datastore entities where the standby VM should be created.
	DatastoreEntityVec []*EntityProto `json:"datastoreEntityVec"`

	// Network configuration for the standby VM.
	NetworkConfig *RestoredObjectNetworkConfigProto `json:"networkConfig,omitempty"`

	// The vCenter to which the user wants to create a standby VM.
	ParentSource *EntityProto `json:"parentSource,omitempty"`

	// User defined prefix and suffix that need to be added to the standby VM.
	RenameObjectParams *RenameObjectParamProto `json:"renameObjectParams,omitempty"`

	// Resource pool entity where the standby VM should be created.
	ResourcePoolEntity *EntityProto `json:"resourcePoolEntity,omitempty"`

	// Folder where the VM disks should be placed.
	TargetDatastoreFolder *EntityProto `json:"targetDatastoreFolder,omitempty"`

	// Folder where the VMs should be created.
	TargetVMFolder *EntityProto `json:"targetVmFolder,omitempty"`
}

// Validate validates this v mware standby resource
func (m *VMwareStandbyResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastoreEntityVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameObjectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePoolEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetDatastoreFolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetVMFolder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareStandbyResource) validateDatastoreEntityVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreEntityVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DatastoreEntityVec); i++ {
		if swag.IsZero(m.DatastoreEntityVec[i]) { // not required
			continue
		}

		if m.DatastoreEntityVec[i] != nil {
			if err := m.DatastoreEntityVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datastoreEntityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datastoreEntityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMwareStandbyResource) validateNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkConfig) { // not required
		return nil
	}

	if m.NetworkConfig != nil {
		if err := m.NetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareStandbyResource) validateParentSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentSource) { // not required
		return nil
	}

	if m.ParentSource != nil {
		if err := m.ParentSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSource")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareStandbyResource) validateRenameObjectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameObjectParams) { // not required
		return nil
	}

	if m.RenameObjectParams != nil {
		if err := m.RenameObjectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameObjectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameObjectParams")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareStandbyResource) validateResourcePoolEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePoolEntity) { // not required
		return nil
	}

	if m.ResourcePoolEntity != nil {
		if err := m.ResourcePoolEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolEntity")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareStandbyResource) validateTargetDatastoreFolder(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetDatastoreFolder) { // not required
		return nil
	}

	if m.TargetDatastoreFolder != nil {
		if err := m.TargetDatastoreFolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetDatastoreFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetDatastoreFolder")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareStandbyResource) validateTargetVMFolder(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetVMFolder) { // not required
		return nil
	}

	if m.TargetVMFolder != nil {
		if err := m.TargetVMFolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVmFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVmFolder")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v mware standby resource based on the context it is used
func (m *VMwareStandbyResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatastoreEntityVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameObjectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourcePoolEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetDatastoreFolder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetVMFolder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareStandbyResource) contextValidateDatastoreEntityVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DatastoreEntityVec); i++ {

		if m.DatastoreEntityVec[i] != nil {

			if swag.IsZero(m.DatastoreEntityVec[i]) { // not required
				return nil
			}

			if err := m.DatastoreEntityVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datastoreEntityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datastoreEntityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMwareStandbyResource) contextValidateNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkConfig != nil {

		if swag.IsZero(m.NetworkConfig) { // not required
			return nil
		}

		if err := m.NetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareStandbyResource) contextValidateParentSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentSource != nil {

		if swag.IsZero(m.ParentSource) { // not required
			return nil
		}

		if err := m.ParentSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSource")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareStandbyResource) contextValidateRenameObjectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameObjectParams != nil {

		if swag.IsZero(m.RenameObjectParams) { // not required
			return nil
		}

		if err := m.RenameObjectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameObjectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameObjectParams")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareStandbyResource) contextValidateResourcePoolEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourcePoolEntity != nil {

		if swag.IsZero(m.ResourcePoolEntity) { // not required
			return nil
		}

		if err := m.ResourcePoolEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolEntity")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareStandbyResource) contextValidateTargetDatastoreFolder(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetDatastoreFolder != nil {

		if swag.IsZero(m.TargetDatastoreFolder) { // not required
			return nil
		}

		if err := m.TargetDatastoreFolder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetDatastoreFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetDatastoreFolder")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareStandbyResource) contextValidateTargetVMFolder(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetVMFolder != nil {

		if swag.IsZero(m.TargetVMFolder) { // not required
			return nil
		}

		if err := m.TargetVMFolder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVmFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVmFolder")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMwareStandbyResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMwareStandbyResource) UnmarshalBinary(b []byte) error {
	var res VMwareStandbyResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
