// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleDatabaseNode Data related to a 'kOracle' database node.
// Refer: magnetoProto.OracleDBChannelInfo_HostInfo
//
// Oracle Database Node.
//
// Specifies database node required for the backup and restore.
//
// swagger:model OracleDatabaseNode
type OracleDatabaseNode struct {

	// Specifies the number of channels user wants for the backup/recovery
	// of this node.
	ChannelCount *int32 `json:"channelCount,omitempty"`

	// Specifies the ip of the database node.
	Node *string `json:"node,omitempty"`

	// Specifies the port on which user wants to run the backup/recovery.
	Port *int64 `json:"port,omitempty"`

	// Specifies the necessary parameters for SBT.
	SbtHostParams *OracleSbtHostParams `json:"sbtHostParams,omitempty"`
}

// Validate validates this oracle database node
func (m *OracleDatabaseNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSbtHostParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleDatabaseNode) validateSbtHostParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SbtHostParams) { // not required
		return nil
	}

	if m.SbtHostParams != nil {
		if err := m.SbtHostParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sbtHostParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sbtHostParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle database node based on the context it is used
func (m *OracleDatabaseNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSbtHostParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleDatabaseNode) contextValidateSbtHostParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SbtHostParams != nil {

		if swag.IsZero(m.SbtHostParams) { // not required
			return nil
		}

		if err := m.SbtHostParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sbtHostParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sbtHostParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleDatabaseNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleDatabaseNode) UnmarshalBinary(b []byte) error {
	var res OracleDatabaseNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
