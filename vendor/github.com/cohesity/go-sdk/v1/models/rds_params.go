// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RdsParams RDS parameters.
//
// Specifies rds params for the restore operation.
//
// swagger:model RdsParams
type RdsParams struct {

	// Entity representing the availability zone to use while restoring the DB.
	AvailabilityZoneID *int64 `json:"availabilityZoneId,omitempty"`

	// The DB instance identifier to use for the restored DB. This field is
	// required.
	// Required: true
	DbInstanceID *string `json:"dbInstanceId"`

	// Entity representing the RDS option group to use while restoring the DB.
	DbOptionGroupID *int64 `json:"dbOptionGroupId,omitempty"`

	// Entity representing the RDS parameter group to use while restoring the DB.
	DbParameterGroupID *int64 `json:"dbParameterGroupId,omitempty"`

	// Port to use for the DB in the restored RDS instance.
	DbPort *int32 `json:"dbPort,omitempty"`

	// Whether to enable auto minor version upgrade in the restored DB.
	EnableAutoMinorVersionUpgrade *bool `json:"enableAutoMinorVersionUpgrade,omitempty"`

	// Whether to enable copying of tags to snapshots of the DB.
	EnableCopyTagsToSnapshots *bool `json:"enableCopyTagsToSnapshots,omitempty"`

	// Whether to enable IAM authentication for the DB.
	EnableDbAuthentication *bool `json:"enableDbAuthentication,omitempty"`

	// Whether this DB will be publicly accessible or not.
	EnablePublicAccessibility *bool `json:"enablePublicAccessibility,omitempty"`

	// Whether this is a multi-az deployment or not.
	IsMultiAzDeployment *bool `json:"isMultiAzDeployment,omitempty"`
}

// Validate validates this rds params
func (m *RdsParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RdsParams) validateDbInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("dbInstanceId", "body", m.DbInstanceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rds params based on context it is used
func (m *RdsParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RdsParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RdsParams) UnmarshalBinary(b []byte) error {
	var res RdsParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
