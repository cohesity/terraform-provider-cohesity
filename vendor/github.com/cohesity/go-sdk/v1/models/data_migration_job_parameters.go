// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataMigrationJobParameters Data Migration Job Parameters.
//
// Specifies parameters applicable for data migration jobs in NAS environment.
//
// swagger:model DataMigrationJobParameters
type DataMigrationJobParameters struct {

	// Identifies the cold files in the NAS source. Files that haven't been
	// accessed/modified in the last cold_file_window are migrated.
	ColdFileWindow *int64 `json:"coldFileWindow,omitempty"`

	// Delete migrated data if no symlink at source is pointing to it.
	DeleteOrphanData *bool `json:"deleteOrphanData,omitempty"`

	// The filtering policy to decide which objects within a source should be
	// migrated. If this is not specified, then all the objects within the
	// source will be migrated based on the migration policy.
	FilePathFilter *FilePathFilter `json:"filePathFilter,omitempty"`

	// Specifies policy to select a file to migrate based on its creation, last
	// access or modification time.
	// eg. A file can be selected to migrate if it has not been accessed/modified
	// in the ColdFileWindow.
	// enum: kOlderThan, kLastAccessed, kLastModified.
	// Specifies policy for file selection in data migration jobs based on time.
	// 'kOlderThan': Migrate the files that are older than cold file window.
	// 'kLastAccessed': Migrate the files that are not accessed in cold file window.
	// 'kLastModified': Migrate the files that have not been modified in cold file window.
	// Enum: ["kOlderThan","kLastAccessed","kLastModified"]
	FileSelectionPolicy *string `json:"fileSelectionPolicy,omitempty"`

	// Gives the size criteria to be used for selecting the files to be migrated
	// in bytes. The cold files that are equal and greater than this size are
	// migrated.
	FileSizeBytes *int64 `json:"fileSizeBytes,omitempty"`

	// Specifies policy to select a file to migrate based on its size.
	// eg. A file can be selected to migrate if its size is greater than or
	// smaller than the FileSizeBytes.
	// enum: kGreaterThan, kSmallerThan.
	// Specifies policy for file selection in data migration jobs based on file size.
	// 'kGreaterThan': Migrate the files whose size are greater than specified file size.
	// 'kSmallerThan': Migrate the files whose size are smaller than specified file size.
	// Enum: ["kGreaterThan","kSmallerThan"]
	FileSizePolicy *string `json:"fileSizePolicy,omitempty"`

	// Specifies if data is to be migrated without stub.
	MigrateWithoutStub *bool `json:"migrateWithoutStub,omitempty"`

	// Mount path where the target view must be mounted on all NFS clients for
	// accessing the migrated data.
	NfsMountPath *string `json:"nfsMountPath,omitempty"`

	// The target view name to which the data will be migrated.
	TargetViewName *string `json:"targetViewName,omitempty"`
}

// Validate validates this data migration job parameters
func (m *DataMigrationJobParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilePathFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSelectionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSizePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataMigrationJobParameters) validateFilePathFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.FilePathFilter) { // not required
		return nil
	}

	if m.FilePathFilter != nil {
		if err := m.FilePathFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filePathFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filePathFilter")
			}
			return err
		}
	}

	return nil
}

var dataMigrationJobParametersTypeFileSelectionPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kOlderThan","kLastAccessed","kLastModified"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataMigrationJobParametersTypeFileSelectionPolicyPropEnum = append(dataMigrationJobParametersTypeFileSelectionPolicyPropEnum, v)
	}
}

const (

	// DataMigrationJobParametersFileSelectionPolicyKOlderThan captures enum value "kOlderThan"
	DataMigrationJobParametersFileSelectionPolicyKOlderThan string = "kOlderThan"

	// DataMigrationJobParametersFileSelectionPolicyKLastAccessed captures enum value "kLastAccessed"
	DataMigrationJobParametersFileSelectionPolicyKLastAccessed string = "kLastAccessed"

	// DataMigrationJobParametersFileSelectionPolicyKLastModified captures enum value "kLastModified"
	DataMigrationJobParametersFileSelectionPolicyKLastModified string = "kLastModified"
)

// prop value enum
func (m *DataMigrationJobParameters) validateFileSelectionPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataMigrationJobParametersTypeFileSelectionPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataMigrationJobParameters) validateFileSelectionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.FileSelectionPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileSelectionPolicyEnum("fileSelectionPolicy", "body", *m.FileSelectionPolicy); err != nil {
		return err
	}

	return nil
}

var dataMigrationJobParametersTypeFileSizePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kGreaterThan","kSmallerThan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataMigrationJobParametersTypeFileSizePolicyPropEnum = append(dataMigrationJobParametersTypeFileSizePolicyPropEnum, v)
	}
}

const (

	// DataMigrationJobParametersFileSizePolicyKGreaterThan captures enum value "kGreaterThan"
	DataMigrationJobParametersFileSizePolicyKGreaterThan string = "kGreaterThan"

	// DataMigrationJobParametersFileSizePolicyKSmallerThan captures enum value "kSmallerThan"
	DataMigrationJobParametersFileSizePolicyKSmallerThan string = "kSmallerThan"
)

// prop value enum
func (m *DataMigrationJobParameters) validateFileSizePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataMigrationJobParametersTypeFileSizePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataMigrationJobParameters) validateFileSizePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.FileSizePolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileSizePolicyEnum("fileSizePolicy", "body", *m.FileSizePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data migration job parameters based on the context it is used
func (m *DataMigrationJobParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilePathFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataMigrationJobParameters) contextValidateFilePathFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.FilePathFilter != nil {

		if swag.IsZero(m.FilePathFilter) { // not required
			return nil
		}

		if err := m.FilePathFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filePathFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filePathFilter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataMigrationJobParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataMigrationJobParameters) UnmarshalBinary(b []byte) error {
	var res DataMigrationJobParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
