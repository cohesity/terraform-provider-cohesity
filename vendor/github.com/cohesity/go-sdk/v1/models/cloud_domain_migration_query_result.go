// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudDomainMigrationQueryResult Cloud Domain Migration Query Response.
//
// CloudDomainMigrationQueryResult represents the info returned while querying
// cloud domain migration.
//
// swagger:model CloudDomainMigrationQueryResult
type CloudDomainMigrationQueryResult struct {

	// Specifies the list of the application jobs discovered.
	AppJobUIDList []*UniversalID `json:"appJobUidList"`

	// Specifies the Id of a specific cloud domain present inside the vault, that
	// needs to be migrated. If not set, all cloud domains found in the vault or
	// under the 'domain_namespace' specified in CADConfig will be migrated.
	CloudDomainID *int64 `json:"cloudDomainId,omitempty"`

	// Specifies the common job info.
	CommonJobInfo *CommonJobInfo `json:"commonJobInfo,omitempty"`

	// Specifies if the migration mode is CAD or not.
	IsCadMode *bool `json:"isCadMode,omitempty"`

	// Specifies whether the protection jobs/objects in the cloud domain are
	// ready to be migrated. This is set after required snap trees have been
	// downloaded and CM tables have been populated.
	IsMigrationReady *bool `json:"isMigrationReady,omitempty"`

	// Specifies the Number of bytes downloaded by this job. The downloaded bytes
	// are for reading metadata object, data objects and index files.
	NumOfBytesDownloaded *int64 `json:"numOfBytesDownloaded,omitempty"`
}

// Validate validates this cloud domain migration query result
func (m *CloudDomainMigrationQueryResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppJobUIDList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonJobInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudDomainMigrationQueryResult) validateAppJobUIDList(formats strfmt.Registry) error {
	if swag.IsZero(m.AppJobUIDList) { // not required
		return nil
	}

	for i := 0; i < len(m.AppJobUIDList); i++ {
		if swag.IsZero(m.AppJobUIDList[i]) { // not required
			continue
		}

		if m.AppJobUIDList[i] != nil {
			if err := m.AppJobUIDList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appJobUidList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appJobUidList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudDomainMigrationQueryResult) validateCommonJobInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CommonJobInfo) { // not required
		return nil
	}

	if m.CommonJobInfo != nil {
		if err := m.CommonJobInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonJobInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonJobInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloud domain migration query result based on the context it is used
func (m *CloudDomainMigrationQueryResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppJobUIDList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommonJobInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudDomainMigrationQueryResult) contextValidateAppJobUIDList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppJobUIDList); i++ {

		if m.AppJobUIDList[i] != nil {

			if swag.IsZero(m.AppJobUIDList[i]) { // not required
				return nil
			}

			if err := m.AppJobUIDList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appJobUidList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appJobUidList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudDomainMigrationQueryResult) contextValidateCommonJobInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CommonJobInfo != nil {

		if swag.IsZero(m.CommonJobInfo) { // not required
			return nil
		}

		if err := m.CommonJobInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonJobInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonJobInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudDomainMigrationQueryResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudDomainMigrationQueryResult) UnmarshalBinary(b []byte) error {
	var res CloudDomainMigrationQueryResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
