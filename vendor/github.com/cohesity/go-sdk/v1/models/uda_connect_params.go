// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UdaConnectParams Universal Data Adapter Connect Params.
//
// Specifies an Object containing information about a registered Universal Data
// Adapter source.
//
// swagger:model UdaConnectParams
type UdaConnectParams struct {

	// Types of backups supported.
	Capabilities *UdaSourceCapabilities `json:"capabilities,omitempty"`

	// Credentials that will be used to log into the application environment.
	Credentials *Credentials `json:"credentials,omitempty"`

	// Specifies whether to enable cohesity policy triggered log backups along
	// with externally triggered backups.
	// Only applicable if etLogBackup capability is true.
	EtEnableLogBackupPolicy *bool `json:"etEnableLogBackupPolicy,omitempty"`

	// Specifies if the user triggered runs are allowed along with
	// externally triggered backups.
	// Only applicable if etLogBackup is true.
	EtEnableRunNow *bool `json:"etEnableRunNow,omitempty"`

	// Specifies the environment type for the host.
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kOther","kHPUX","kVOS"]
	HostType *string `json:"hostType,omitempty"`

	// List of hosts forming the Universal Data Adapter cluster.
	Hosts []string `json:"hosts"`

	// Whether to use a live view for data backups.
	LiveDataView *bool `json:"liveDataView,omitempty"`

	// Whether to use a live view for log backups.
	LiveLogView *bool `json:"liveLogView,omitempty"`

	// This field is deprecated and its value will be ignored. It was used to
	// specify the absolute path on the host where the view would be mounted.
	// This is now controlled by the agent configuration and is common for all
	// the Universal Data Adapter sources.
	// deprecated: true
	MountDir *string `json:"mountDir,omitempty"`

	// Whether to mount a view during the source backup.
	MountView *bool `json:"mountView,omitempty"`

	// Path where various source scripts will be located.
	ScriptDir *string `json:"scriptDir,omitempty"`

	// Custom arguments which will be provided to the source registration
	// scripts. This is deprecated. Use 'sourceRegistrationArguments' instead.
	SourceArgs *string `json:"sourceArgs,omitempty"`

	// Specifies a map of custom arguments to be supplied to the source
	// registration scripts.
	SourceRegistrationArguments []*KeyValueStrPair `json:"sourceRegistrationArguments"`

	// Global app source type.
	SourceType *string `json:"sourceType,omitempty"`
}

// Validate validates this uda connect params
func (m *UdaConnectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceRegistrationArguments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaConnectParams) validateCapabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	if m.Capabilities != nil {
		if err := m.Capabilities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capabilities")
			}
			return err
		}
	}

	return nil
}

func (m *UdaConnectParams) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

var udaConnectParamsTypeHostTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kOther","kHPUX","kVOS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		udaConnectParamsTypeHostTypePropEnum = append(udaConnectParamsTypeHostTypePropEnum, v)
	}
}

const (

	// UdaConnectParamsHostTypeKLinux captures enum value "kLinux"
	UdaConnectParamsHostTypeKLinux string = "kLinux"

	// UdaConnectParamsHostTypeKWindows captures enum value "kWindows"
	UdaConnectParamsHostTypeKWindows string = "kWindows"

	// UdaConnectParamsHostTypeKAix captures enum value "kAix"
	UdaConnectParamsHostTypeKAix string = "kAix"

	// UdaConnectParamsHostTypeKSolaris captures enum value "kSolaris"
	UdaConnectParamsHostTypeKSolaris string = "kSolaris"

	// UdaConnectParamsHostTypeKSapHana captures enum value "kSapHana"
	UdaConnectParamsHostTypeKSapHana string = "kSapHana"

	// UdaConnectParamsHostTypeKOther captures enum value "kOther"
	UdaConnectParamsHostTypeKOther string = "kOther"

	// UdaConnectParamsHostTypeKHPUX captures enum value "kHPUX"
	UdaConnectParamsHostTypeKHPUX string = "kHPUX"

	// UdaConnectParamsHostTypeKVOS captures enum value "kVOS"
	UdaConnectParamsHostTypeKVOS string = "kVOS"
)

// prop value enum
func (m *UdaConnectParams) validateHostTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, udaConnectParamsTypeHostTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UdaConnectParams) validateHostType(formats strfmt.Registry) error {
	if swag.IsZero(m.HostType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostTypeEnum("hostType", "body", *m.HostType); err != nil {
		return err
	}

	return nil
}

func (m *UdaConnectParams) validateSourceRegistrationArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceRegistrationArguments) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceRegistrationArguments); i++ {
		if swag.IsZero(m.SourceRegistrationArguments[i]) { // not required
			continue
		}

		if m.SourceRegistrationArguments[i] != nil {
			if err := m.SourceRegistrationArguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceRegistrationArguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceRegistrationArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this uda connect params based on the context it is used
func (m *UdaConnectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceRegistrationArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaConnectParams) contextValidateCapabilities(ctx context.Context, formats strfmt.Registry) error {

	if m.Capabilities != nil {

		if swag.IsZero(m.Capabilities) { // not required
			return nil
		}

		if err := m.Capabilities.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capabilities")
			}
			return err
		}
	}

	return nil
}

func (m *UdaConnectParams) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *UdaConnectParams) contextValidateSourceRegistrationArguments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SourceRegistrationArguments); i++ {

		if m.SourceRegistrationArguments[i] != nil {

			if swag.IsZero(m.SourceRegistrationArguments[i]) { // not required
				return nil
			}

			if err := m.SourceRegistrationArguments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceRegistrationArguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceRegistrationArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UdaConnectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaConnectParams) UnmarshalBinary(b []byte) error {
	var res UdaConnectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
