// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TaskProgress The progress information about a task.
//
// swagger:model TaskProgress
type TaskProgress struct {

	// If set this indicate the percentage of work which is not know at this
	// time. This will be useful if client does not know total amount of work
	// that has to done. But client know how much work it has completed and
	// approximate how much more work need to be done.
	// This is usually reported by the clients for leaf tasks.
	// For non-leaf tasks, the progress may be dynamically inferred.
	// (see ReportTaskProgressArg)
	ApproxPercentUnknownWork *float32 `json:"approxPercentUnknownWork,omitempty"`

	// The latest attributes (if any) reported for this task.
	AttributeVec []*KeyValuePair `json:"attributeVec"`

	// The time when the task finished.
	EndTimeSecs *int64 `json:"endTimeSecs,omitempty"`

	// The events (if any) reported for this task.
	EventVec []*PrivateTaskEvent `json:"eventVec"`

	// The expected end time of this task (if it hasn't ended).
	// This is extrapolated using the current progress, and any historic
	// data about this task if it occurs periodically.
	// TODO(gaurav): Deprecate this field once Iris has stopped using it.
	ExpectedEndTimeSecs *int64 `json:"expectedEndTimeSecs,omitempty"`

	// Expected time remaining for this task (if it hasn't ended).
	ExpectedTimeRemainingSecs *int64 `json:"expectedTimeRemainingSecs,omitempty"`

	// The expected raw count of the total work remaining. This is the highest
	// work count value reported by the client. This field can be set to let
	// pulse compute percent_finished by looking at the currently reported
	// remaining_work_count and the expected_total_work_count.
	ExpectedTotalWorkCount *int64 `json:"expectedTotalWorkCount,omitempty"`

	// The timestamp at which task progress was last reported.
	LastUpdateTimeSecs *int64 `json:"lastUpdateTimeSecs,omitempty"`

	// The reported progress on this task.
	// This is usually reported by clients for leaf tasks.
	// For non-leaf tasks, the progress may be dynamically inferred.
	// (see ReportTaskProgressArg)
	PercentFinished *float32 `json:"percentFinished,omitempty"`

	// The time when the task was started.
	StartTimeSecs *int64 `json:"startTimeSecs,omitempty"`

	// The status of the task.
	Status *TaskStatus `json:"status,omitempty"`
}

// Validate validates this task progress
func (m *TaskProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskProgress) validateAttributeVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AttributeVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeVec); i++ {
		if swag.IsZero(m.AttributeVec[i]) { // not required
			continue
		}

		if m.AttributeVec[i] != nil {
			if err := m.AttributeVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskProgress) validateEventVec(formats strfmt.Registry) error {
	if swag.IsZero(m.EventVec) { // not required
		return nil
	}

	for i := 0; i < len(m.EventVec); i++ {
		if swag.IsZero(m.EventVec[i]) { // not required
			continue
		}

		if m.EventVec[i] != nil {
			if err := m.EventVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskProgress) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this task progress based on the context it is used
func (m *TaskProgress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributeVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskProgress) contextValidateAttributeVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttributeVec); i++ {

		if m.AttributeVec[i] != nil {

			if swag.IsZero(m.AttributeVec[i]) { // not required
				return nil
			}

			if err := m.AttributeVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskProgress) contextValidateEventVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EventVec); i++ {

		if m.EventVec[i] != nil {

			if swag.IsZero(m.EventVec[i]) { // not required
				return nil
			}

			if err := m.EventVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskProgress) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskProgress) UnmarshalBinary(b []byte) error {
	var res TaskProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
