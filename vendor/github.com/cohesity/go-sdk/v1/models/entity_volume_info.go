// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntityVolumeInfo entity volume info
//
// swagger:model Entity_VolumeInfo
type EntityVolumeInfo struct {

	// Unique name of the clustered resource.
	ClusterResourceName *string `json:"clusterResourceName,omitempty"`

	// If this is a local volume, the path to the device that hosts the
	// volume.
	DevicePath *string `json:"devicePath,omitempty"`

	// Whether this volume supports extended attributes (like ACLs) when
	// performing file backups.
	ExtendedAttributesSupported *bool `json:"extendedAttributesSupported,omitempty"`

	// Whether the volume is boot volume or has system files
	IsBootVolume *bool `json:"isBootVolume,omitempty"`

	// Whether this is a cohesity mount volume
	IsCohesityMountVolume *bool `json:"isCohesityMountVolume,omitempty"`

	// This is set to true if the volume is protected as part of a backup job.
	IsProtected *bool `json:"isProtected,omitempty"`

	// Whether this is a ReFS volume
	IsRefsVolume *bool `json:"isRefsVolume,omitempty"`

	// Whether this is a shared volume, (e.g. for VCS clusters)
	IsSharedVolume *bool `json:"isSharedVolume,omitempty"`

	// Logical size of the volume in bytes.
	LogicalSizeBytes *uint64 `json:"logicalSizeBytes,omitempty"`

	// Mount points where the volume is mounted. For ex: 'C:\', '/mnt/foo' etc.
	MountPointVec []string `json:"mountPointVec"`

	// Mount type of volume i.e. nfs, autofs, ext4 etc.
	MountType *string `json:"mountType,omitempty"`

	// If this is a network attached volume, the full path to connect to the
	// volume (e.g., (IP or hostname):/path/to/share for NFS volumes).
	NetworkPath *string `json:"networkPath,omitempty"`

	// Used size of the volume in bytes.
	UsedSizeBytes *uint64 `json:"usedSizeBytes,omitempty"`

	// Instead of storing all information about remote volumes(logical size,
	// mount point, ...) this field store count of particular type of remote
	// volumes(eg. mount_type=nfs, volume_count=3)
	VolumeCount *int64 `json:"volumeCount,omitempty"`

	// Volume GUID. This may not be present for all volumes (for example, this
	// will not be present for non-LVM volumes or network attached volumes).
	VolumeGUID *string `json:"volumeGuid,omitempty"`

	// The volume label that can be used for displaying additional
	// identifying information regarding volume.
	VolumeLabel *string `json:"volumeLabel,omitempty"`
}

// Validate validates this entity volume info
func (m *EntityVolumeInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this entity volume info based on context it is used
func (m *EntityVolumeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EntityVolumeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityVolumeInfo) UnmarshalBinary(b []byte) error {
	var res EntityVolumeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
