// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// S3EntityInfo AWS S3 entity Info.
//
// Specifies S3 specific information about an S3 Entity.
//
// swagger:model S3EntityInfo
type S3EntityInfo struct {

	// Specifies the creation time of the entity.
	CreateTimeMsecs *int64 `json:"createTimeMsecs,omitempty"`

	// Specifies the Versioning state of S3 bucket.
	// Specifies the versioning state of S3 bucket.
	// 'kUnversioned' implies versioning is not enabled.
	// 'kEnabled' implies versioning is enabled.
	// 'kSuspended' versioning is suspended.
	// Enum: ["kUnversioned","kEnabled","kSuspended"]
	Versioning *string `json:"versioning,omitempty"`
}

// Validate validates this s3 entity info
func (m *S3EntityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersioning(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var s3EntityInfoTypeVersioningPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUnversioned","kEnabled","kSuspended"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		s3EntityInfoTypeVersioningPropEnum = append(s3EntityInfoTypeVersioningPropEnum, v)
	}
}

const (

	// S3EntityInfoVersioningKUnversioned captures enum value "kUnversioned"
	S3EntityInfoVersioningKUnversioned string = "kUnversioned"

	// S3EntityInfoVersioningKEnabled captures enum value "kEnabled"
	S3EntityInfoVersioningKEnabled string = "kEnabled"

	// S3EntityInfoVersioningKSuspended captures enum value "kSuspended"
	S3EntityInfoVersioningKSuspended string = "kSuspended"
)

// prop value enum
func (m *S3EntityInfo) validateVersioningEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, s3EntityInfoTypeVersioningPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *S3EntityInfo) validateVersioning(formats strfmt.Registry) error {
	if swag.IsZero(m.Versioning) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersioningEnum("versioning", "body", *m.Versioning); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this s3 entity info based on context it is used
func (m *S3EntityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *S3EntityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3EntityInfo) UnmarshalBinary(b []byte) error {
	var res S3EntityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
