// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CrackedFileDocumentPublicFolderMetadata Message used to store the metadata for Public Folder data type.
//
// Refer https://bit.ly/3gocxcw for details.
//
// swagger:model CrackedFileDocument_PublicFolderMetadata
type CrackedFileDocumentPublicFolderMetadata struct {

	// Metdata document type.
	DocType *int32 `json:"docType,omitempty"`

	// Captures the Folder metadata info. This is populated only if the
	// doc_type is 'kFolder'.
	FolderMetadata *FolderContentInfo `json:"folderMetadata,omitempty"`

	// Specifies the type of folder if the doc_type is 'kFolder'
	FolderType FolderType `json:"folderType,omitempty"`

	// Captures the Item metatdata info. This is populated only if the doc_type
	// is not 'kFolder'.
	ItemMetadata *ItemMetaData `json:"itemMetadata,omitempty"`
}

// Validate validates this cracked file document public folder metadata
func (m *CrackedFileDocumentPublicFolderMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFolderMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrackedFileDocumentPublicFolderMetadata) validateFolderMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.FolderMetadata) { // not required
		return nil
	}

	if m.FolderMetadata != nil {
		if err := m.FolderMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("folderMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("folderMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *CrackedFileDocumentPublicFolderMetadata) validateItemMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemMetadata) { // not required
		return nil
	}

	if m.ItemMetadata != nil {
		if err := m.ItemMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemMetadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cracked file document public folder metadata based on the context it is used
func (m *CrackedFileDocumentPublicFolderMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFolderMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrackedFileDocumentPublicFolderMetadata) contextValidateFolderMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.FolderMetadata != nil {

		if swag.IsZero(m.FolderMetadata) { // not required
			return nil
		}

		if err := m.FolderMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("folderMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("folderMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *CrackedFileDocumentPublicFolderMetadata) contextValidateItemMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ItemMetadata != nil {

		if swag.IsZero(m.ItemMetadata) { // not required
			return nil
		}

		if err := m.ItemMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrackedFileDocumentPublicFolderMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrackedFileDocumentPublicFolderMetadata) UnmarshalBinary(b []byte) error {
	var res CrackedFileDocumentPublicFolderMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
