// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ThrottlingPolicyRegisteredSourceThrottlingConfig The configuration for backups on registered source.
//
// swagger:model ThrottlingPolicy_RegisteredSourceThrottlingConfig
type ThrottlingPolicyRegisteredSourceThrottlingConfig struct {

	// max concurrent backups
	MaxConcurrentBackups *int32 `json:"maxConcurrentBackups,omitempty"`

	// This is applicable to all NAS sources. The parameters can be overridden
	// by job.env_backup_params.nas_backup_params().throttling_params() in job
	// settings.
	NasThrottlingParams *NasThrottlingParams `json:"nasThrottlingParams,omitempty"`

	// Capture Uda throttling params.
	UdaThrottlingParams *UdaThrottlingParams `json:"udaThrottlingParams,omitempty"`
}

// Validate validates this throttling policy registered source throttling config
func (m *ThrottlingPolicyRegisteredSourceThrottlingConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNasThrottlingParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaThrottlingParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThrottlingPolicyRegisteredSourceThrottlingConfig) validateNasThrottlingParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NasThrottlingParams) { // not required
		return nil
	}

	if m.NasThrottlingParams != nil {
		if err := m.NasThrottlingParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasThrottlingParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasThrottlingParams")
			}
			return err
		}
	}

	return nil
}

func (m *ThrottlingPolicyRegisteredSourceThrottlingConfig) validateUdaThrottlingParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaThrottlingParams) { // not required
		return nil
	}

	if m.UdaThrottlingParams != nil {
		if err := m.UdaThrottlingParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaThrottlingParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaThrottlingParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this throttling policy registered source throttling config based on the context it is used
func (m *ThrottlingPolicyRegisteredSourceThrottlingConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNasThrottlingParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaThrottlingParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThrottlingPolicyRegisteredSourceThrottlingConfig) contextValidateNasThrottlingParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NasThrottlingParams != nil {

		if swag.IsZero(m.NasThrottlingParams) { // not required
			return nil
		}

		if err := m.NasThrottlingParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasThrottlingParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasThrottlingParams")
			}
			return err
		}
	}

	return nil
}

func (m *ThrottlingPolicyRegisteredSourceThrottlingConfig) contextValidateUdaThrottlingParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaThrottlingParams != nil {

		if swag.IsZero(m.UdaThrottlingParams) { // not required
			return nil
		}

		if err := m.UdaThrottlingParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaThrottlingParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaThrottlingParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThrottlingPolicyRegisteredSourceThrottlingConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThrottlingPolicyRegisteredSourceThrottlingConfig) UnmarshalBinary(b []byte) error {
	var res ThrottlingPolicyRegisteredSourceThrottlingConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
