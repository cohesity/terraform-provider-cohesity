// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RunProtectionJobParam Protection Run Parameters.
//
// Specify the parameters to run a protection job.
//
// swagger:model RunProtectionJobParam
type RunProtectionJobParam struct {

	// Optional parameter to be set if you want specific replication or archival
	// associated with the policy to run.
	CopyRunTargets []*RunJobSnapshotTarget `json:"copyRunTargets"`

	// Optional parameters of a Run Now operation.
	RunNowParameters []*RunNowParameters `json:"runNowParameters"`

	// Specifies the type of backup. If not specified, 'kRegular' is assumed.
	// 'kRegular' indicates a incremental (CBT) backup. Incremental backups
	// utilizing CBT (if supported) are captured of the target protection objects.
	// The first run of a kRegular schedule captures all the blocks.
	// 'kFull' indicates a full (no CBT) backup. A complete backup
	// (all blocks) of the target protection objects are always captured and
	// Change Block Tracking (CBT) is not utilized.
	// 'kLog' indicates a Database Log backup. Capture the database
	// transaction logs to allow rolling back to a specific point in time.
	// 'kSystem' indicates a system backup. System backups are used to do
	// bare metal recovery of the system to a specific point in time.
	// Enum: ["kRegular","kFull","kLog","kSystem"]
	RunType *string `json:"runType,omitempty"`

	// Optional parameter if you want to back up only a subset of sources that
	// are protected by the job in this run. If a Run Now operation is to be
	// performed then the source ids should only be provided in the
	// runNowParameters along with the database Ids.
	SourceIds []int64 `json:"sourceIds"`

	// Specifies if default policy settings should be used interanally to
	// copy snapshots to external targets already configured in policy. This
	// field will only apply if "CopyRunTargets" is empty.
	UsePolicyDefaults *bool `json:"usePolicyDefaults,omitempty"`
}

// Validate validates this run protection job param
func (m *RunProtectionJobParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCopyRunTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunNowParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunProtectionJobParam) validateCopyRunTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.CopyRunTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.CopyRunTargets); i++ {
		if swag.IsZero(m.CopyRunTargets[i]) { // not required
			continue
		}

		if m.CopyRunTargets[i] != nil {
			if err := m.CopyRunTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("copyRunTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("copyRunTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunProtectionJobParam) validateRunNowParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.RunNowParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.RunNowParameters); i++ {
		if swag.IsZero(m.RunNowParameters[i]) { // not required
			continue
		}

		if m.RunNowParameters[i] != nil {
			if err := m.RunNowParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runNowParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runNowParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var runProtectionJobParamTypeRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kFull","kLog","kSystem"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runProtectionJobParamTypeRunTypePropEnum = append(runProtectionJobParamTypeRunTypePropEnum, v)
	}
}

const (

	// RunProtectionJobParamRunTypeKRegular captures enum value "kRegular"
	RunProtectionJobParamRunTypeKRegular string = "kRegular"

	// RunProtectionJobParamRunTypeKFull captures enum value "kFull"
	RunProtectionJobParamRunTypeKFull string = "kFull"

	// RunProtectionJobParamRunTypeKLog captures enum value "kLog"
	RunProtectionJobParamRunTypeKLog string = "kLog"

	// RunProtectionJobParamRunTypeKSystem captures enum value "kSystem"
	RunProtectionJobParamRunTypeKSystem string = "kSystem"
)

// prop value enum
func (m *RunProtectionJobParam) validateRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, runProtectionJobParamTypeRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RunProtectionJobParam) validateRunType(formats strfmt.Registry) error {
	if swag.IsZero(m.RunType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunTypeEnum("runType", "body", *m.RunType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this run protection job param based on the context it is used
func (m *RunProtectionJobParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCopyRunTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunNowParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunProtectionJobParam) contextValidateCopyRunTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CopyRunTargets); i++ {

		if m.CopyRunTargets[i] != nil {

			if swag.IsZero(m.CopyRunTargets[i]) { // not required
				return nil
			}

			if err := m.CopyRunTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("copyRunTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("copyRunTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunProtectionJobParam) contextValidateRunNowParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RunNowParameters); i++ {

		if m.RunNowParameters[i] != nil {

			if swag.IsZero(m.RunNowParameters[i]) { // not required
				return nil
			}

			if err := m.RunNowParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runNowParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runNowParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunProtectionJobParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunProtectionJobParam) UnmarshalBinary(b []byte) error {
	var res RunProtectionJobParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
