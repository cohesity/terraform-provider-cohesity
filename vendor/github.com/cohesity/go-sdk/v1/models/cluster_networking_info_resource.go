// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterNetworkingInfoResource Represents a resource that has an IP address.
//
// swagger:model ClusterNetworkingInfo_Resource
type ClusterNetworkingInfoResource struct {

	// The endpoints by which the resource is accessible.
	EndpointVec []*ClusterNetworkingInfoEndpoint `json:"endpointVec"`

	// GUID from the Windows Cluster API that identifies the resource. We need
	// this for kSQL resources in order to implement a stable UID of the
	// kPhysical/kWindowsCluster objects. It is used to identify nodes in
	// the SQL topology tree. It is unique and consistent across all nodes of
	// a WSFC.
	// If the resource is a standalone kServer not part of WSFC, this field
	// is not set.
	// If the resource is of type kServer part of WSFC, this field is set to
	// the label of a node in a WSFC,  eg. (id:2)
	// If the resource is of type kAAG, this field is set to the resource ID
	// of the AAG in the WSFC. eg. (id:f9332cdf-84c2-4b7c-961c-2fcbaae690f8)
	// If the resource is of type kSQL, this field is set to the resource ID
	// of the FCI in the WSFC. eg. (id:b1h124hl-fal1-15ja-af81-asfkih0812ho)
	ID *string `json:"id,omitempty"`

	// The name of the SQL Clustered Instance (aka FCI Instance). Only applies
	// to resources of type kSQL.
	InstanceName *string `json:"instanceName,omitempty"`

	// Set to 'true' when the information pertains to kServer and is produced
	// by the cluster node on which the Agent is running. This information is
	// complete unlike the non-native objects do not have the full networking
	// info but are sufficient for connectivity. The point here is to surface
	// complete and stable information that is only available on the given
	// cluster node.
	IsNative *bool `json:"isNative,omitempty"`

	// The name of the resource. Useful for capturing the names of resources
	// of type kSQL, kSqlAAG and kServer for SQL topology detection. Note that
	// the name only makes sense in the context of the type of resource.
	// kSqlAAG: AAG group name
	// kSQL: FCI Virtual Server Name
	// kServer: NetBIOS Name/Hostname
	Name *string `json:"name,omitempty"`

	// The type of the resource.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this cluster networking info resource
func (m *ClusterNetworkingInfoResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkingInfoResource) validateEndpointVec(formats strfmt.Registry) error {
	if swag.IsZero(m.EndpointVec) { // not required
		return nil
	}

	for i := 0; i < len(m.EndpointVec); i++ {
		if swag.IsZero(m.EndpointVec[i]) { // not required
			continue
		}

		if m.EndpointVec[i] != nil {
			if err := m.EndpointVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpointVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpointVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster networking info resource based on the context it is used
func (m *ClusterNetworkingInfoResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndpointVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkingInfoResource) contextValidateEndpointVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EndpointVec); i++ {

		if m.EndpointVec[i] != nil {

			if swag.IsZero(m.EndpointVec[i]) { // not required
				return nil
			}

			if err := m.EndpointVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpointVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpointVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNetworkingInfoResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNetworkingInfoResource) UnmarshalBinary(b []byte) error {
	var res ClusterNetworkingInfoResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
