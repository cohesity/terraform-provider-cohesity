// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExchangeDatabaseBackupTimes Backup times for a database as resported by Exchange Server. All times are
// in local time.
//
// swagger:model ExchangeDatabaseBackupTimes
type ExchangeDatabaseBackupTimes struct {

	// Last copy backup done time.
	LastCopyBackupDate *LocalTime `json:"lastCopyBackupDate,omitempty"`

	// Last differential backup done time. Note that Cohesity will not do
	// differential backup.
	LastDifferentialBackupDate *LocalTime `json:"lastDifferentialBackupDate,omitempty"`

	// Last full backup done time.
	LastFullBackupDate *LocalTime `json:"lastFullBackupDate,omitempty"`

	// Last incremental backup done time.
	LastIncrementalBackupDate *LocalTime `json:"lastIncrementalBackupDate,omitempty"`
}

// Validate validates this exchange database backup times
func (m *ExchangeDatabaseBackupTimes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastCopyBackupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDifferentialBackupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastFullBackupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastIncrementalBackupDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeDatabaseBackupTimes) validateLastCopyBackupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastCopyBackupDate) { // not required
		return nil
	}

	if m.LastCopyBackupDate != nil {
		if err := m.LastCopyBackupDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastCopyBackupDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastCopyBackupDate")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDatabaseBackupTimes) validateLastDifferentialBackupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDifferentialBackupDate) { // not required
		return nil
	}

	if m.LastDifferentialBackupDate != nil {
		if err := m.LastDifferentialBackupDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastDifferentialBackupDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastDifferentialBackupDate")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDatabaseBackupTimes) validateLastFullBackupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastFullBackupDate) { // not required
		return nil
	}

	if m.LastFullBackupDate != nil {
		if err := m.LastFullBackupDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastFullBackupDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastFullBackupDate")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDatabaseBackupTimes) validateLastIncrementalBackupDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastIncrementalBackupDate) { // not required
		return nil
	}

	if m.LastIncrementalBackupDate != nil {
		if err := m.LastIncrementalBackupDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastIncrementalBackupDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastIncrementalBackupDate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exchange database backup times based on the context it is used
func (m *ExchangeDatabaseBackupTimes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastCopyBackupDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastDifferentialBackupDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastFullBackupDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastIncrementalBackupDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeDatabaseBackupTimes) contextValidateLastCopyBackupDate(ctx context.Context, formats strfmt.Registry) error {

	if m.LastCopyBackupDate != nil {

		if swag.IsZero(m.LastCopyBackupDate) { // not required
			return nil
		}

		if err := m.LastCopyBackupDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastCopyBackupDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastCopyBackupDate")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDatabaseBackupTimes) contextValidateLastDifferentialBackupDate(ctx context.Context, formats strfmt.Registry) error {

	if m.LastDifferentialBackupDate != nil {

		if swag.IsZero(m.LastDifferentialBackupDate) { // not required
			return nil
		}

		if err := m.LastDifferentialBackupDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastDifferentialBackupDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastDifferentialBackupDate")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDatabaseBackupTimes) contextValidateLastFullBackupDate(ctx context.Context, formats strfmt.Registry) error {

	if m.LastFullBackupDate != nil {

		if swag.IsZero(m.LastFullBackupDate) { // not required
			return nil
		}

		if err := m.LastFullBackupDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastFullBackupDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastFullBackupDate")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDatabaseBackupTimes) contextValidateLastIncrementalBackupDate(ctx context.Context, formats strfmt.Registry) error {

	if m.LastIncrementalBackupDate != nil {

		if swag.IsZero(m.LastIncrementalBackupDate) { // not required
			return nil
		}

		if err := m.LastIncrementalBackupDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastIncrementalBackupDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastIncrementalBackupDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeDatabaseBackupTimes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeDatabaseBackupTimes) UnmarshalBinary(b []byte) error {
	var res ExchangeDatabaseBackupTimes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
