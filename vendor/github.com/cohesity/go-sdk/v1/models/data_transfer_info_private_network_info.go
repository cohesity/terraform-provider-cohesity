// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataTransferInfoPrivateNetworkInfo Information required to create a endpoint in private network.
//
// swagger:model DataTransferInfo_PrivateNetworkInfo
type DataTransferInfoPrivateNetworkInfo struct {

	// Region/location of the virtual network.
	Location *string `json:"location,omitempty"`

	// Deprecated fields below.
	//
	// Proto of the region of the virtual network.
	Region *EntityProto `json:"region,omitempty"`

	// Subnet in which we will create a private endpoint.
	Subnet *EntityProto `json:"subnet,omitempty"`

	// Vitual network in which we will create a private endpoint.
	Vpn *EntityProto `json:"vpn,omitempty"`
}

// Validate validates this data transfer info private network info
func (m *DataTransferInfoPrivateNetworkInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTransferInfoPrivateNetworkInfo) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *DataTransferInfoPrivateNetworkInfo) validateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {
		if err := m.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *DataTransferInfoPrivateNetworkInfo) validateVpn(formats strfmt.Registry) error {
	if swag.IsZero(m.Vpn) { // not required
		return nil
	}

	if m.Vpn != nil {
		if err := m.Vpn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpn")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data transfer info private network info based on the context it is used
func (m *DataTransferInfoPrivateNetworkInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTransferInfoPrivateNetworkInfo) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *DataTransferInfoPrivateNetworkInfo) contextValidateSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.Subnet != nil {

		if swag.IsZero(m.Subnet) { // not required
			return nil
		}

		if err := m.Subnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *DataTransferInfoPrivateNetworkInfo) contextValidateVpn(ctx context.Context, formats strfmt.Registry) error {

	if m.Vpn != nil {

		if swag.IsZero(m.Vpn) { // not required
			return nil
		}

		if err := m.Vpn.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpn")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTransferInfoPrivateNetworkInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTransferInfoPrivateNetworkInfo) UnmarshalBinary(b []byte) error {
	var res DataTransferInfoPrivateNetworkInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
