// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetRestoreAppTimeRangesResult get restore app time ranges result
//
// swagger:model GetRestoreAppTimeRangesResult
type GetRestoreAppTimeRangesResult struct {

	// Error encountered by the RPC.
	Error *PrivateErrorProto `json:"error,omitempty"`

	// The time range information, given by the set of time ranges available for
	// application restore, associated with each restore object in the
	// 'owner_object_vec' of the GetRestoreAppTimeRangesArg request. There is
	// a 1-1 correspondence between this vector and
	// 'GetRestoreAppTimeRangesArg::owner_object_vec'.
	OwnerObjectTimeRangeInfoVec []*TimeRangeInfo `json:"ownerObjectTimeRangeInfoVec"`
}

// Validate validates this get restore app time ranges result
func (m *GetRestoreAppTimeRangesResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerObjectTimeRangeInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetRestoreAppTimeRangesResult) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *GetRestoreAppTimeRangesResult) validateOwnerObjectTimeRangeInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerObjectTimeRangeInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnerObjectTimeRangeInfoVec); i++ {
		if swag.IsZero(m.OwnerObjectTimeRangeInfoVec[i]) { // not required
			continue
		}

		if m.OwnerObjectTimeRangeInfoVec[i] != nil {
			if err := m.OwnerObjectTimeRangeInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ownerObjectTimeRangeInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ownerObjectTimeRangeInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get restore app time ranges result based on the context it is used
func (m *GetRestoreAppTimeRangesResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerObjectTimeRangeInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetRestoreAppTimeRangesResult) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *GetRestoreAppTimeRangesResult) contextValidateOwnerObjectTimeRangeInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OwnerObjectTimeRangeInfoVec); i++ {

		if m.OwnerObjectTimeRangeInfoVec[i] != nil {

			if swag.IsZero(m.OwnerObjectTimeRangeInfoVec[i]) { // not required
				return nil
			}

			if err := m.OwnerObjectTimeRangeInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ownerObjectTimeRangeInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ownerObjectTimeRangeInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetRestoreAppTimeRangesResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetRestoreAppTimeRangesResult) UnmarshalBinary(b []byte) error {
	var res GetRestoreAppTimeRangesResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
