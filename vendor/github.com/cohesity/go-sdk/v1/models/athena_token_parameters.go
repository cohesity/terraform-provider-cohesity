// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AthenaTokenParameters Athena Token Parameters.
//
// Specifies the user information and the secret required for generating an
// access token for Athena. Athena gets this access token on behalf of a
// Cluster user who is trusted by Athena.
//
// swagger:model AthenaTokenParameters
type AthenaTokenParameters struct {

	// Specifies information about the App. It is used when audit logs are
	// generated.
	// Required: true
	AppInfo *AppInfo `json:"appInfo"`

	// Specifies the domain the user is logging in to. For a Local user model,
	// the domain is always LOCAL. For LDAP/AD user models, the domain will map
	// to an LDAP connection string. A user is uniquely identified by a
	// combination of username and domain. If this field is not set,
	// LOCAL domain is assumed.
	Domain *string `json:"domain,omitempty"`

	// Specifies an encrypted phrase. Encryption is done by a shared secret key.
	// The key and the phrase are known between iris and athena. It is off the
	// format "ProcessName:%s;PID:%d". Athena must set it to "athena_exec" and
	// the pid of the process. There is no such process running on that node
	// this request will be rejected.
	// Required: true
	EncryptedPassPhrase *string `json:"encryptedPassPhrase"`

	// Specifies the unique Security ID (SID) of the user. The request must have
	// one form of user identification. It could be either the username and the
	// domain combination or the sid and the domain combination.
	Sid *string `json:"sid,omitempty"`

	// Specifies the Tenant Id of the user.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies the login name of the Cohesity user.
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this athena token parameters
func (m *AthenaTokenParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptedPassPhrase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AthenaTokenParameters) validateAppInfo(formats strfmt.Registry) error {

	if err := validate.Required("appInfo", "body", m.AppInfo); err != nil {
		return err
	}

	if m.AppInfo != nil {
		if err := m.AppInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AthenaTokenParameters) validateEncryptedPassPhrase(formats strfmt.Registry) error {

	if err := validate.Required("encryptedPassPhrase", "body", m.EncryptedPassPhrase); err != nil {
		return err
	}

	return nil
}

func (m *AthenaTokenParameters) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this athena token parameters based on the context it is used
func (m *AthenaTokenParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AthenaTokenParameters) contextValidateAppInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AppInfo != nil {

		if err := m.AppInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AthenaTokenParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AthenaTokenParameters) UnmarshalBinary(b []byte) error {
	var res AthenaTokenParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
