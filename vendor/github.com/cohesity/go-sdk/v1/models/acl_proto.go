// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ACLProto Protobuf that describes the access control list (ACL) permissions for a
// bucket or for an object.
//
// swagger:model ACLProto
type ACLProto struct {

	// CommonACL of the Swift container.
	CommonACL *CommonACLProto `json:"commonAcl,omitempty"`

	// grant vec
	GrantVec []*ACLProtoGrant `json:"grantVec"`

	// KeystoneACL of the Swift container.
	KeystoneACL *KeystoneACLProto `json:"keystoneAcl,omitempty"`

	// Swift ACL strings.
	SwiftReadACL *string `json:"swiftReadAcl,omitempty"`

	// swift write Acl
	SwiftWriteACL *string `json:"swiftWriteAcl,omitempty"`
}

// Validate validates this ACL proto
func (m *ACLProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeystoneACL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ACLProto) validateCommonACL(formats strfmt.Registry) error {
	if swag.IsZero(m.CommonACL) { // not required
		return nil
	}

	if m.CommonACL != nil {
		if err := m.CommonACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonAcl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonAcl")
			}
			return err
		}
	}

	return nil
}

func (m *ACLProto) validateGrantVec(formats strfmt.Registry) error {
	if swag.IsZero(m.GrantVec) { // not required
		return nil
	}

	for i := 0; i < len(m.GrantVec); i++ {
		if swag.IsZero(m.GrantVec[i]) { // not required
			continue
		}

		if m.GrantVec[i] != nil {
			if err := m.GrantVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("grantVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("grantVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ACLProto) validateKeystoneACL(formats strfmt.Registry) error {
	if swag.IsZero(m.KeystoneACL) { // not required
		return nil
	}

	if m.KeystoneACL != nil {
		if err := m.KeystoneACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keystoneAcl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keystoneAcl")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ACL proto based on the context it is used
func (m *ACLProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommonACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrantVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeystoneACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ACLProto) contextValidateCommonACL(ctx context.Context, formats strfmt.Registry) error {

	if m.CommonACL != nil {

		if swag.IsZero(m.CommonACL) { // not required
			return nil
		}

		if err := m.CommonACL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonAcl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonAcl")
			}
			return err
		}
	}

	return nil
}

func (m *ACLProto) contextValidateGrantVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GrantVec); i++ {

		if m.GrantVec[i] != nil {

			if swag.IsZero(m.GrantVec[i]) { // not required
				return nil
			}

			if err := m.GrantVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("grantVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("grantVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ACLProto) contextValidateKeystoneACL(ctx context.Context, formats strfmt.Registry) error {

	if m.KeystoneACL != nil {

		if swag.IsZero(m.KeystoneACL) { // not required
			return nil
		}

		if err := m.KeystoneACL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keystoneAcl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keystoneAcl")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ACLProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ACLProto) UnmarshalBinary(b []byte) error {
	var res ACLProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
