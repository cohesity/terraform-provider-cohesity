// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FreeNodeInformation Free Node Information.
//
// Specifies the Metadata of a free Node on the network.
//
// swagger:model FreeNodeInformation
type FreeNodeInformation struct {

	// Specifies the serial number of the Chassis the Node is installed in.
	ChassisSerial *string `json:"chassisSerial,omitempty"`

	// Specifies whether or not this is the Node that is sending the response.
	ConnectedTo *bool `json:"connectedTo,omitempty"`

	// Free node hostname.
	Hostname *string `json:"hostname,omitempty"`

	// Specifies the ID of the node.
	ID *int64 `json:"id,omitempty"`

	// Deprecated. Specifies the IP address of the Node. Use Ips instead.
	IP *string `json:"ip,omitempty"`

	// Specifies the IPMI IP of the Node.
	IpmiIP *string `json:"ipmiIp,omitempty"`

	// List of discovered ipv4/ipv6 addresses of the node.
	// Ip field returns ips as comma separated single string which is incorrect.
	Ips []string `json:"ips"`

	// Specifies the serial number of the Node.
	NodeSerial *string `json:"nodeSerial,omitempty"`

	// Specifies the postition for the UI to display the Node in the Cluster
	// creation page.
	NodeUISlot *string `json:"nodeUiSlot,omitempty"`

	// Specifies the number of Node slots present in the Chassis where this
	// Node is installed.
	NumSlotsInChassis *uint32 `json:"numSlotsInChassis,omitempty"`

	// Specifies the product model of the node.
	ProductModel *string `json:"productModel,omitempty"`

	// Specifies the number of the slot the Node is installed in.
	SlotNumber *string `json:"slotNumber,omitempty"`

	// Specifies the version of the software installed on the Node.
	SoftwareVersion *string `json:"softwareVersion,omitempty"`
}

// Validate validates this free node information
func (m *FreeNodeInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this free node information based on context it is used
func (m *FreeNodeInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FreeNodeInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FreeNodeInformation) UnmarshalBinary(b []byte) error {
	var res FreeNodeInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
