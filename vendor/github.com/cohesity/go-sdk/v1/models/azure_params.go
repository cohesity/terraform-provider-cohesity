// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureParams Azure Parameters.
//
// Specifies various resources when converting and deploying a VM to Azure.
//
// swagger:model AzureParams
type AzureParams struct {

	// Specifies id of the Availability set in which the VM is to be restored.
	AvailabilitySetID *int64 `json:"availabilitySetId,omitempty"`

	// Specifies the disk type used by the data.
	// 'kPremiumSSD' is disk type backed by SSDs, delivers high performance, low
	// latency disk support for VMs running I/O intensive workloads.
	// 'kStandardSSD' implies disk type that offers more consistent performance and
	// reliability than HDD.
	// 'kStandardHDD' implies disk type backed by HDDs, delivers cost effective
	// storage.
	// Enum: ["kPremiumSSD","kStandardSSD","kStandardHDD"]
	DataDiskType *string `json:"dataDiskType,omitempty"`

	// Specifies Type of VM (e.g. small, medium, large) when cloning the VM in
	// Azure.
	InstanceID *int64 `json:"instanceId,omitempty"`

	// Specifies id of the resource group for the selected virtual network.
	NetworkResourceGroupID *int64 `json:"networkResourceGroupId,omitempty"`

	// Specifies the disk type used by the OS.
	// 'kPremiumSSD' is disk type backed by SSDs, delivers high performance, low
	// latency disk support for VMs running I/O intensive workloads.
	// 'kStandardSSD' implies disk type that offers more consistent performance and
	// reliability than HDD.
	// 'kStandardHDD' implies disk type backed by HDDs, delivers cost effective
	// storage.
	// Enum: ["kPremiumSSD","kStandardSSD","kStandardHDD"]
	OsDiskType *string `json:"osDiskType,omitempty"`

	// Specifies id of the Azure resource group. Its value is globally unique
	// within Azure.
	ResourceGroup *int64 `json:"resourceGroup,omitempty"`

	// Specifies id of the storage account that will contain the storage
	// container within which we will create the blob that will become the VHD
	// disk for the cloned VM.
	StorageAccount *int64 `json:"storageAccount,omitempty"`

	// Specifies id of the storage container within the above storage account.
	StorageContainer *int64 `json:"storageContainer,omitempty"`

	// Specifies id of the resource group for the selected storage account.
	StorageResourceGroupID *int64 `json:"storageResourceGroupId,omitempty"`

	// Specifies Id of the subnet within the above virtual network.
	SubnetID *int64 `json:"subnetId,omitempty"`

	// Specifies the resource group where temporary VM needs to be created.
	TempVMResourceGroupID *int64 `json:"tempVmResourceGroupId,omitempty"`

	// Specifies the Storage account where temporary VM needs to be created.
	TempVMStorageAccountID *int64 `json:"tempVmStorageAccountId,omitempty"`

	// Specifies the Storage container where temporary VM needs to be created.
	TempVMStorageContainerID *int64 `json:"tempVmStorageContainerId,omitempty"`

	// Specifies the Subnet where temporary VM needs to be created.
	TempVMSubnetID *int64 `json:"tempVmSubnetId,omitempty"`

	// Specifies the Virtual network where temporary VM needs to be created.
	TempVMVirtualNetworkID *int64 `json:"tempVmVirtualNetworkId,omitempty"`

	// Specifies Id of the Virtual Network.
	VirtualNetworkID *int64 `json:"virtualNetworkId,omitempty"`
}

// Validate validates this azure params
func (m *AzureParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataDiskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsDiskType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var azureParamsTypeDataDiskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPremiumSSD","kStandardSSD","kStandardHDD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureParamsTypeDataDiskTypePropEnum = append(azureParamsTypeDataDiskTypePropEnum, v)
	}
}

const (

	// AzureParamsDataDiskTypeKPremiumSSD captures enum value "kPremiumSSD"
	AzureParamsDataDiskTypeKPremiumSSD string = "kPremiumSSD"

	// AzureParamsDataDiskTypeKStandardSSD captures enum value "kStandardSSD"
	AzureParamsDataDiskTypeKStandardSSD string = "kStandardSSD"

	// AzureParamsDataDiskTypeKStandardHDD captures enum value "kStandardHDD"
	AzureParamsDataDiskTypeKStandardHDD string = "kStandardHDD"
)

// prop value enum
func (m *AzureParams) validateDataDiskTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureParamsTypeDataDiskTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureParams) validateDataDiskType(formats strfmt.Registry) error {
	if swag.IsZero(m.DataDiskType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataDiskTypeEnum("dataDiskType", "body", *m.DataDiskType); err != nil {
		return err
	}

	return nil
}

var azureParamsTypeOsDiskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPremiumSSD","kStandardSSD","kStandardHDD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureParamsTypeOsDiskTypePropEnum = append(azureParamsTypeOsDiskTypePropEnum, v)
	}
}

const (

	// AzureParamsOsDiskTypeKPremiumSSD captures enum value "kPremiumSSD"
	AzureParamsOsDiskTypeKPremiumSSD string = "kPremiumSSD"

	// AzureParamsOsDiskTypeKStandardSSD captures enum value "kStandardSSD"
	AzureParamsOsDiskTypeKStandardSSD string = "kStandardSSD"

	// AzureParamsOsDiskTypeKStandardHDD captures enum value "kStandardHDD"
	AzureParamsOsDiskTypeKStandardHDD string = "kStandardHDD"
)

// prop value enum
func (m *AzureParams) validateOsDiskTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureParamsTypeOsDiskTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureParams) validateOsDiskType(formats strfmt.Registry) error {
	if swag.IsZero(m.OsDiskType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsDiskTypeEnum("osDiskType", "body", *m.OsDiskType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure params based on context it is used
func (m *AzureParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureParams) UnmarshalBinary(b []byte) error {
	var res AzureParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
