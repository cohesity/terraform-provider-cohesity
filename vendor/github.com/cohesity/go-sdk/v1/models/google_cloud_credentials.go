// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GoogleCloudCredentials Google Cloud Credentials.
//
// Specifies the cloud credentials to connect to a Google service account.
//
// swagger:model GoogleCloudCredentials
type GoogleCloudCredentials struct {

	// Specifies the client email address used to access Google
	// Cloud Storage.
	ClientEmailAddress *string `json:"clientEmailAddress,omitempty"`

	// Specifies the private key used to access Google Cloud Storage that is
	// generated when the service account is created.
	ClientPrivateKey *string `json:"clientPrivateKey,omitempty"`

	// Specifies the project id of an existing Google Cloud project to store
	// objects.
	ProjectID *string `json:"projectId,omitempty"`

	// Specifies the storage class of GCP.
	// GoogleTierType specifies the storage class for Google.
	// 'kGoogleStandard' indicates a tier type of Google properties.
	// 'kGoogleNearline' indicates a tier type of Google properties that is not
	// accessed frequently.
	// 'kGoogleColdline' indicates a tier type of Google properties that is rarely
	// accessed.
	// 'kGoogleRegional' indicates a tier type of Google properties that stores
	// frequently accessed data in the same region.
	// 'kGoogleMultiRegional' indicates a tier type of Google properties that is
	// frequently accessed ("hot" objects) around the world.
	// Enum: ["kGoogleStandard","kGoogleNearline","kGoogleColdline","kGoogleRegional","kGoogleMultiRegional"]
	TierType *string `json:"tierType,omitempty"`

	// Specifies the list of all tiers for Google account.
	Tiers []string `json:"tiers"`
}

// Validate validates this google cloud credentials
func (m *GoogleCloudCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTierType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var googleCloudCredentialsTypeTierTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kGoogleStandard","kGoogleNearline","kGoogleColdline","kGoogleRegional","kGoogleMultiRegional"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		googleCloudCredentialsTypeTierTypePropEnum = append(googleCloudCredentialsTypeTierTypePropEnum, v)
	}
}

const (

	// GoogleCloudCredentialsTierTypeKGoogleStandard captures enum value "kGoogleStandard"
	GoogleCloudCredentialsTierTypeKGoogleStandard string = "kGoogleStandard"

	// GoogleCloudCredentialsTierTypeKGoogleNearline captures enum value "kGoogleNearline"
	GoogleCloudCredentialsTierTypeKGoogleNearline string = "kGoogleNearline"

	// GoogleCloudCredentialsTierTypeKGoogleColdline captures enum value "kGoogleColdline"
	GoogleCloudCredentialsTierTypeKGoogleColdline string = "kGoogleColdline"

	// GoogleCloudCredentialsTierTypeKGoogleRegional captures enum value "kGoogleRegional"
	GoogleCloudCredentialsTierTypeKGoogleRegional string = "kGoogleRegional"

	// GoogleCloudCredentialsTierTypeKGoogleMultiRegional captures enum value "kGoogleMultiRegional"
	GoogleCloudCredentialsTierTypeKGoogleMultiRegional string = "kGoogleMultiRegional"
)

// prop value enum
func (m *GoogleCloudCredentials) validateTierTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, googleCloudCredentialsTypeTierTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GoogleCloudCredentials) validateTierType(formats strfmt.Registry) error {
	if swag.IsZero(m.TierType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTierTypeEnum("tierType", "body", *m.TierType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this google cloud credentials based on context it is used
func (m *GoogleCloudCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GoogleCloudCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GoogleCloudCredentials) UnmarshalBinary(b []byte) error {
	var res GoogleCloudCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
