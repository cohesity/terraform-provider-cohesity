// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActiveDirectoryPrincipal Active Directory Principal.
//
// Specifies information about a single principal in an Active Directory.
//
// swagger:model ActiveDirectoryPrincipal
type ActiveDirectoryPrincipal struct {

	// Specifies the domain name of the where the principal' account is
	// maintained.
	Domain *string `json:"domain,omitempty"`

	// Specifies the full name (first and last names) of the principal.
	FullName *string `json:"fullName,omitempty"`

	// Specifies the object class of the principal (either 'kGroup' or 'kUser').
	// 'kUser' specifies a user object class.
	// 'kGroup' specifies a group object class.
	// 'kComputer' specifies a computer object class.
	// 'kWellKnownPrincipal' specifies a well known principal.
	// 'kServiceAccount' specifies a service account object class.
	// Enum: ["kUser","kGroup","kComputer","kWellKnownPrincipal","kServiceAccount"]
	ObjectClass *string `json:"objectClass,omitempty"`

	// Specifies the name of the principal.
	PrincipalName *string `json:"principalName,omitempty"`

	// Specifies the unique Security id (SID) of the principal.
	Sid *string `json:"sid,omitempty"`
}

// Validate validates this active directory principal
func (m *ActiveDirectoryPrincipal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectClass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var activeDirectoryPrincipalTypeObjectClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUser","kGroup","kComputer","kWellKnownPrincipal","kServiceAccount"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		activeDirectoryPrincipalTypeObjectClassPropEnum = append(activeDirectoryPrincipalTypeObjectClassPropEnum, v)
	}
}

const (

	// ActiveDirectoryPrincipalObjectClassKUser captures enum value "kUser"
	ActiveDirectoryPrincipalObjectClassKUser string = "kUser"

	// ActiveDirectoryPrincipalObjectClassKGroup captures enum value "kGroup"
	ActiveDirectoryPrincipalObjectClassKGroup string = "kGroup"

	// ActiveDirectoryPrincipalObjectClassKComputer captures enum value "kComputer"
	ActiveDirectoryPrincipalObjectClassKComputer string = "kComputer"

	// ActiveDirectoryPrincipalObjectClassKWellKnownPrincipal captures enum value "kWellKnownPrincipal"
	ActiveDirectoryPrincipalObjectClassKWellKnownPrincipal string = "kWellKnownPrincipal"

	// ActiveDirectoryPrincipalObjectClassKServiceAccount captures enum value "kServiceAccount"
	ActiveDirectoryPrincipalObjectClassKServiceAccount string = "kServiceAccount"
)

// prop value enum
func (m *ActiveDirectoryPrincipal) validateObjectClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, activeDirectoryPrincipalTypeObjectClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActiveDirectoryPrincipal) validateObjectClass(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectClass) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectClassEnum("objectClass", "body", *m.ObjectClass); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this active directory principal based on context it is used
func (m *ActiveDirectoryPrincipal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ActiveDirectoryPrincipal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActiveDirectoryPrincipal) UnmarshalBinary(b []byte) error {
	var res ActiveDirectoryPrincipal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
