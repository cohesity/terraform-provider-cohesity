// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtectionJobAuditTrail Protection Job Audit Trail.
//
// Specifies the fields for Protection job audit Response.
//
// swagger:model ProtectionJobAuditTrail
type ProtectionJobAuditTrail struct {

	// Specifies the audit logs for Protection Job after change.
	After *ProtectionJob `json:"after,omitempty"`

	// Specifies the audit logs for Protection Job before change.
	Before *ProtectionJob `json:"before,omitempty"`

	// Specifies the list of changed values in a Protection Job.
	// kProtectionJobName implies that protection job has change in the name field
	// kProtectionJobDescription implies that protection job has change in the
	// description field.
	// kProtectionJobSources implies that protection job has change in the
	// source field.
	// kProtectionJobSchedule implies that protection job has change in the
	// schedule field.
	// kProtectionJobFullSchedule implies that protection job has change in the
	// full schedule field.
	// kProtectionJobRetrySettings implies that protection job has change in the
	// retry settings.
	// kProtectionJobRetentionPolicy implies that protection job has change in the
	// retention policy.
	// kProtectionJobIndexingPolicy implies that protection job has change in the
	// indexing policy.
	// kProtectionJobAlertingPolicy implies that protection job has change in the
	// alerting policy.
	// kProtectionJobPriority implies that protection job has change in the
	// alerting policy.
	// kProtectionJobQuiesce implies that protection job has change in the
	// Quiesce.
	// kProtectionJobSla implies that protection job has change in the SLA
	// settings.
	// kProtectionJobPolicyId implies that protection job has change in the
	// poilcy Id settings.
	// kProtectionJobTimezone implies that protection job has change in the
	// timezone settings.
	// kProtectionJobFutureRunsPaused implies that protection job has change in
	// the future run settings.
	// kProtectionJobFutureRunsResumed implies that protection job has change in
	// the future run resume settings.
	// kSnapshotTargetPolicy implies that protection job has change in
	// the snapshot target policy settings.
	// kProtectionJobQOS implies that protection job has change in QOS settings.
	// kProtectionJobInvalidField implies that the changed field is invalid.
	Changes []string `json:"changes"`
}

// Validate validates this protection job audit trail
func (m *ProtectionJobAuditTrail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionJobAuditTrail) validateAfter(formats strfmt.Registry) error {
	if swag.IsZero(m.After) { // not required
		return nil
	}

	if m.After != nil {
		if err := m.After.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("after")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("after")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionJobAuditTrail) validateBefore(formats strfmt.Registry) error {
	if swag.IsZero(m.Before) { // not required
		return nil
	}

	if m.Before != nil {
		if err := m.Before.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("before")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("before")
			}
			return err
		}
	}

	return nil
}

var protectionJobAuditTrailChangesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kProtectionJobName","kProtectionJobDescription","kProtectionJobSources","kProtectionJobSchedule","kProtectionJobFullSchedule","kProtectionJobRetrySettings","kProtectionJobRetentionPolicy","kProtectionJobIndexingPolicy","kProtectionJobAlertingPolicy","kProtectionJobPriority","kProtectionJobQuiesce","kProtectionJobSla","kProtectionJobPolicyId","kProtectionJobTimezone","kProtectionJobFutureRunsPaused","kProtectionJobFutureRunsResumed","kSnapshotTargetPolicy","kProtectionJobBlackoutWindow","kProtectionJobQOS","kProtectionJobInvalidField"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protectionJobAuditTrailChangesItemsEnum = append(protectionJobAuditTrailChangesItemsEnum, v)
	}
}

func (m *ProtectionJobAuditTrail) validateChangesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, protectionJobAuditTrailChangesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProtectionJobAuditTrail) validateChanges(formats strfmt.Registry) error {
	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {

		// value enum
		if err := m.validateChangesItemsEnum("changes"+"."+strconv.Itoa(i), "body", m.Changes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this protection job audit trail based on the context it is used
func (m *ProtectionJobAuditTrail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAfter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBefore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionJobAuditTrail) contextValidateAfter(ctx context.Context, formats strfmt.Registry) error {

	if m.After != nil {

		if swag.IsZero(m.After) { // not required
			return nil
		}

		if err := m.After.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("after")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("after")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionJobAuditTrail) contextValidateBefore(ctx context.Context, formats strfmt.Registry) error {

	if m.Before != nil {

		if swag.IsZero(m.Before) { // not required
			return nil
		}

		if err := m.Before.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("before")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("before")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionJobAuditTrail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionJobAuditTrail) UnmarshalBinary(b []byte) error {
	var res ProtectionJobAuditTrail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
