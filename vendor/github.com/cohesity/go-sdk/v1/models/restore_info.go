// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreInfo Full Snapshot Information.
//
// Specifies the info regarding a full SQL snapshot.
//
// swagger:model RestoreInfo
type RestoreInfo struct {

	// Specifies the info related to the archival target.
	ArchivalTarget *ArchivalExternalTarget `json:"archivalTarget,omitempty"`

	// Specifies the attempt number.
	AttemptNumber *int32 `json:"attemptNumber,omitempty"`

	// Specifies the info related to the cloud deploy target.
	CloudDeployTarget *CloudDeployTargetDetails `json:"cloudDeployTarget,omitempty"`

	// Specifies the id of the job run.
	JobRunID *int64 `json:"jobRunId,omitempty"`

	// Specifies the universal id for the job.
	JobUID *UniversalID `json:"jobUid,omitempty"`

	// Specifies the parent source related information.
	ParentSource *ProtectionSource `json:"parentSource,omitempty"`

	// This field specifies the time in to which the object needs to be restored.
	// This filed is only applicable when object is being backeup using CDP
	// feature.
	RestoreTimeUsecs *int64 `json:"restoreTimeUsecs,omitempty"`

	// Specifies the relative path of the snapshot directory.
	SnapshotRelativeDirPath *string `json:"snapshotRelativeDirPath,omitempty"`

	// Specifies the info related to the entity.
	Source *ProtectionSource `json:"source,omitempty"`

	// Specifies the start time specified as a Unix epoch Timestamp
	// (in microseconds).
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the name of the view.
	ViewName *string `json:"viewName,omitempty"`

	// Specifies if the VM had independent disks.
	VMHadIndependentDisks *bool `json:"vmHadIndependentDisks,omitempty"`
}

// Validate validates this restore info
func (m *RestoreInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchivalTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudDeployTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreInfo) validateArchivalTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalTarget) { // not required
		return nil
	}

	if m.ArchivalTarget != nil {
		if err := m.ArchivalTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) validateCloudDeployTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudDeployTarget) { // not required
		return nil
	}

	if m.CloudDeployTarget != nil {
		if err := m.CloudDeployTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDeployTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudDeployTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) validateJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.JobUID) { // not required
		return nil
	}

	if m.JobUID != nil {
		if err := m.JobUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobUid")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) validateParentSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentSource) { // not required
		return nil
	}

	if m.ParentSource != nil {
		if err := m.ParentSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSource")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore info based on the context it is used
func (m *RestoreInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchivalTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudDeployTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreInfo) contextValidateArchivalTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchivalTarget != nil {

		if swag.IsZero(m.ArchivalTarget) { // not required
			return nil
		}

		if err := m.ArchivalTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) contextValidateCloudDeployTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudDeployTarget != nil {

		if swag.IsZero(m.CloudDeployTarget) { // not required
			return nil
		}

		if err := m.CloudDeployTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDeployTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudDeployTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) contextValidateJobUID(ctx context.Context, formats strfmt.Registry) error {

	if m.JobUID != nil {

		if swag.IsZero(m.JobUID) { // not required
			return nil
		}

		if err := m.JobUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobUid")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) contextValidateParentSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentSource != nil {

		if swag.IsZero(m.ParentSource) { // not required
			return nil
		}

		if err := m.ParentSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSource")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreInfo) UnmarshalBinary(b []byte) error {
	var res RestoreInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
