// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OraclePluggableDatabaseInfo Specifies the informatiomn about the pluggable database. A Pluggabele
// Database(PDB) is a portable collection of schemas, schema objects, and
// nonschema objects that appears to an Oracle Net client as a non-CDB.
//
// swagger:model OraclePluggableDatabaseInfo
type OraclePluggableDatabaseInfo struct {

	// Specifies the ID of the Pluggable Database.
	DatabaseID *string `json:"databaseId,omitempty"`

	// Speicifes the name of the Pluggable Database.
	Name *string `json:"name,omitempty"`

	// Specifies the OPEN_MODE information.
	// Specifies the OPEN_MODE type for the Oracle database.
	// 'kMounted' indicates that the database is open in Mounted mode.
	// 'kReadWrite' indicates that the database is open in R/W mode.
	// 'kReadOnly' indicates that the database is open in ReadOnly mode.
	// 'kMigrate' inidcates that the database is open in Migrate mode.
	// Enum: ["kMounted","kReadWrite","kReadOnly","kMigrate"]
	OpenMode *string `json:"openMode,omitempty"`

	// Specifies the Size in Bytes of the Pluggable Database.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`
}

// Validate validates this oracle pluggable database info
func (m *OraclePluggableDatabaseInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOpenMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oraclePluggableDatabaseInfoTypeOpenModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kMounted","kReadWrite","kReadOnly","kMigrate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oraclePluggableDatabaseInfoTypeOpenModePropEnum = append(oraclePluggableDatabaseInfoTypeOpenModePropEnum, v)
	}
}

const (

	// OraclePluggableDatabaseInfoOpenModeKMounted captures enum value "kMounted"
	OraclePluggableDatabaseInfoOpenModeKMounted string = "kMounted"

	// OraclePluggableDatabaseInfoOpenModeKReadWrite captures enum value "kReadWrite"
	OraclePluggableDatabaseInfoOpenModeKReadWrite string = "kReadWrite"

	// OraclePluggableDatabaseInfoOpenModeKReadOnly captures enum value "kReadOnly"
	OraclePluggableDatabaseInfoOpenModeKReadOnly string = "kReadOnly"

	// OraclePluggableDatabaseInfoOpenModeKMigrate captures enum value "kMigrate"
	OraclePluggableDatabaseInfoOpenModeKMigrate string = "kMigrate"
)

// prop value enum
func (m *OraclePluggableDatabaseInfo) validateOpenModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oraclePluggableDatabaseInfoTypeOpenModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OraclePluggableDatabaseInfo) validateOpenMode(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateOpenModeEnum("openMode", "body", *m.OpenMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle pluggable database info based on context it is used
func (m *OraclePluggableDatabaseInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OraclePluggableDatabaseInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OraclePluggableDatabaseInfo) UnmarshalBinary(b []byte) error {
	var res OraclePluggableDatabaseInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
