// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterConfigProtoVaultCloudTierInfo Proto representing snapshot tier info for a cloud target.
//
// swagger:model ClusterConfigProto_Vault_CloudTierInfo
type ClusterConfigProtoVaultCloudTierInfo struct {

	// Flag that determines whether this tiering info is to be honored or
	// not. By default this tiering setting will be ignored. This must be
	// explicitly set to true in order to honor this setting.
	HonorTierInfo *bool `json:"honorTierInfo,omitempty"`

	// Represents the number of seconds since the snapshot first got archived
	// (to default tier) after which it needs to be moved to the target tier.
	// For example, if user selects target as an AWS vault (default: S3 tier)
	// with 3 months retention, move to glacier after 1 month, and move to
	// deep glacier after 2 months, then the below field should be set to
	// appropriate number of seconds corresponding to 1 or 2 months by iris.
	// The snapshot will reside in S3 (default tier) for 1 month, then 1
	// month in glacier tier, and then another 1 month in deep glacier before
	// being deleted.
	NumSecsToMoveAfter *int64 `json:"numSecsToMoveAfter,omitempty"`

	// Represents the target tier to which a archive snapshot needs to be
	// moved/migrated. Currently we only allow down-tiering (i.e. moving
	// snapshots to a colder tier compared to current tier).
	TargetTierType *ClusterConfigProtoVaultCloudTierType `json:"targetTierType,omitempty"`
}

// Validate validates this cluster config proto vault cloud tier info
func (m *ClusterConfigProtoVaultCloudTierInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetTierType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigProtoVaultCloudTierInfo) validateTargetTierType(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetTierType) { // not required
		return nil
	}

	if m.TargetTierType != nil {
		if err := m.TargetTierType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetTierType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetTierType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster config proto vault cloud tier info based on the context it is used
func (m *ClusterConfigProtoVaultCloudTierInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetTierType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigProtoVaultCloudTierInfo) contextValidateTargetTierType(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetTierType != nil {

		if swag.IsZero(m.TargetTierType) { // not required
			return nil
		}

		if err := m.TargetTierType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetTierType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetTierType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterConfigProtoVaultCloudTierInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterConfigProtoVaultCloudTierInfo) UnmarshalBinary(b []byte) error {
	var res ClusterConfigProtoVaultCloudTierInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
