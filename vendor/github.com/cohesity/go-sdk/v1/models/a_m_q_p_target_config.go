// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AMQPTargetConfig Specifies the AMQP target config.
//
// swagger:model AMQPTargetConfig
type AMQPTargetConfig struct {

	// Specifies the certificate.
	Certificate *string `json:"certificate,omitempty"`

	// Specifies the exchange.
	Exchange *string `json:"exchange,omitempty"`

	// Specifies the filer id.
	FilerID *int64 `json:"filerId,omitempty"`

	// Specifies the password.
	Password *string `json:"password,omitempty"`

	// Specifies the server ip.
	ServerIP *string `json:"serverIp,omitempty"`

	// Specifies the username.
	Username *string `json:"username,omitempty"`

	// Specifies the virtual host.
	VirtualHost *string `json:"virtualHost,omitempty"`
}

// Validate validates this a m q p target config
func (m *AMQPTargetConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this a m q p target config based on context it is used
func (m *AMQPTargetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AMQPTargetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AMQPTargetConfig) UnmarshalBinary(b []byte) error {
	var res AMQPTargetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
