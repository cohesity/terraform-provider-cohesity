// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntitySchemaProtoGranularity Rolling up or Down sampling is performed on timeseries data to reduce
// space usage by timeseries. Rollup Granularity is defined per entity
// schema but rollup function is not defined. Instead we create rolledup
// values for all the rollup functions.
//
// swagger:model EntitySchemaProto_Granularity
type EntitySchemaProtoGranularity struct {

	// Defines the rollup interval or a bucket size. All data points within
	// one time bucket are rolled up to one summary data point using the
	// defined rollup function. For example, say, raw metric is published
	// at ~30 secs granularity. To generate a hourly or a daily summary
	// time series, client can define rolled up metrics having interval
	// 3600 secs and 86400 secs respectively.
	RollupIntervalSecs *int32 `json:"rollupIntervalSecs,omitempty"`

	// Defines the duration for which the rolled up data is to be stored.
	// Once the lifespan has elapsed, expired data is garbage collected.
	TimeToLiveSecs *int64 `json:"timeToLiveSecs,omitempty"`
}

// Validate validates this entity schema proto granularity
func (m *EntitySchemaProtoGranularity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this entity schema proto granularity based on context it is used
func (m *EntitySchemaProtoGranularity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EntitySchemaProtoGranularity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntitySchemaProtoGranularity) UnmarshalBinary(b []byte) error {
	var res EntitySchemaProtoGranularity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
