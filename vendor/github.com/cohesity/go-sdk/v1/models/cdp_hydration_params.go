// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CdpHydrationParams CDP hydration parameters. These will be used to create a hydrated view using
// Atom logs. This op is treated similar to a backup run.
//
// swagger:model CdpHydrationParams
type CdpHydrationParams struct {

	// Unique task id for the CDP hydration slave helper op. This is required to
	// request for a permit from the CDP hydration slave helper op.
	CdpHydrationTaskID *int64 `json:"cdpHydrationTaskId,omitempty"`

	// CDP entity version. v1 entities move log files and apply them to base
	// disks. v2 entities only apply log files.
	CdpVersion *int32 `json:"cdpVersion,omitempty"`

	// Logs for the various disks of the VM.
	DiskLogsVec []*CdpHydrationParamsDiskLog `json:"diskLogsVec"`

	// In some cases, it may happen that we just want to clone the log files and
	// don't need to hydrate the snapshot. This variable can mark those cases.
	HydrationNeeded *bool `json:"hydrationNeeded,omitempty"`

	// The time in usecs till which we need the the logs to be played on
	// the base VMDK.
	HydrationTimeUsecs *int64 `json:"hydrationTimeUsecs,omitempty"`

	// CDP hydration version. v1 version is the default way for hydration and v2
	// version provides improved performance compared with v1.
	HydrationVersion *int32 `json:"hydrationVersion,omitempty"`

	// CDP Directory in which logs are placed in SnapFS.
	LogViewDir *string `json:"logViewDir,omitempty"`

	// The start time of the base run.
	RunStartTimeUsecs *int64 `json:"runStartTimeUsecs,omitempty"`

	// The VADP snapshot or CDP hydration time, starting from which the log(s)
	// needs to be applied.
	SnapshotStartTimeUsecs *int64 `json:"snapshotStartTimeUsecs,omitempty"`
}

// Validate validates this cdp hydration params
func (m *CdpHydrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskLogsVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpHydrationParams) validateDiskLogsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskLogsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskLogsVec); i++ {
		if swag.IsZero(m.DiskLogsVec[i]) { // not required
			continue
		}

		if m.DiskLogsVec[i] != nil {
			if err := m.DiskLogsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskLogsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskLogsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cdp hydration params based on the context it is used
func (m *CdpHydrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskLogsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpHydrationParams) contextValidateDiskLogsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiskLogsVec); i++ {

		if m.DiskLogsVec[i] != nil {

			if swag.IsZero(m.DiskLogsVec[i]) { // not required
				return nil
			}

			if err := m.DiskLogsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskLogsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskLogsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdpHydrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdpHydrationParams) UnmarshalBinary(b []byte) error {
	var res CdpHydrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
