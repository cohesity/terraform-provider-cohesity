// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FolderContentInfoExtendedProperty A message that captures the extended properties of the folder.
//
// swagger:model FolderContentInfo_ExtendedProperty
type FolderContentInfoExtendedProperty struct {

	// Extended MAPI property.
	ExtendedFieldURI *ExtendedFieldURI `json:"extendedFieldUri,omitempty"`

	// Value of the extended MAPI property. If the property_type in
	// extended_field_uri is kBinary, this field stores the value in the
	// base64 format.
	Value *string `json:"value,omitempty"`
}

// Validate validates this folder content info extended property
func (m *FolderContentInfoExtendedProperty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtendedFieldURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FolderContentInfoExtendedProperty) validateExtendedFieldURI(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtendedFieldURI) { // not required
		return nil
	}

	if m.ExtendedFieldURI != nil {
		if err := m.ExtendedFieldURI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extendedFieldUri")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extendedFieldUri")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this folder content info extended property based on the context it is used
func (m *FolderContentInfoExtendedProperty) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtendedFieldURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FolderContentInfoExtendedProperty) contextValidateExtendedFieldURI(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtendedFieldURI != nil {

		if swag.IsZero(m.ExtendedFieldURI) { // not required
			return nil
		}

		if err := m.ExtendedFieldURI.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extendedFieldUri")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extendedFieldUri")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FolderContentInfoExtendedProperty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FolderContentInfoExtendedProperty) UnmarshalBinary(b []byte) error {
	var res FolderContentInfoExtendedProperty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
