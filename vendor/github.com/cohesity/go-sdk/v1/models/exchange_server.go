// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExchangeServer Exchange Server. This message is created and maintained by magneto.
//
// swagger:model ExchangeServer
type ExchangeServer struct {

	// Status conveying whether the agent on the Exchange server is supported for
	// backups or not.
	AgentSupportedStatus *int32 `json:"agentSupportedStatus,omitempty"`

	// The entity id of the Exchange source which hosts this Exchange server.
	// This field will only be set when this Exchange server is registered as
	// Exchange entity.
	ExchangeID *int64 `json:"exchangeId,omitempty"`

	// Identity of the server.
	ID *ExchangeServerIdentity `json:"id,omitempty"`

	// Time (in usecs) when the agent info was fetched.
	LastAgentInfoTimeUsecs *int64 `json:"lastAgentInfoTimeUsecs,omitempty"`

	// The owner entity id on which this Exchange server is running.
	// This field will only be set when the Exchange server is registered as
	// Exchange entity.
	OwnerID *int64 `json:"ownerId,omitempty"`

	// Exchange server status.
	Status *int32 `json:"status,omitempty"`
}

// Validate validates this exchange server
func (m *ExchangeServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeServer) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if m.ID != nil {
		if err := m.ID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exchange server based on the context it is used
func (m *ExchangeServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeServer) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if m.ID != nil {

		if swag.IsZero(m.ID) { // not required
			return nil
		}

		if err := m.ID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeServer) UnmarshalBinary(b []byte) error {
	var res ExchangeServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
