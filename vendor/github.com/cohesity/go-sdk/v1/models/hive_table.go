// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HiveTable Hive Table Info.
//
// Specifies an Object containing information about a Hive table.
//
// swagger:model HiveTable
type HiveTable struct {

	// Specifies the approx size of the table in bytes.
	ApproxSizeBytes *int64 `json:"approxSizeBytes,omitempty"`

	// Specifies the created on, epoch millis.
	CreatedOn *int64 `json:"createdOn,omitempty"`

	// Specifies if this is a transactional table.
	IsTransactionalTable *bool `json:"isTransactionalTable,omitempty"`

	// Specifies the owner of the table.
	Owner *string `json:"owner,omitempty"`

	// Specifies the type of table ex. MANAGED,VIRTUAL etc.
	// Specifies the type of an Hive table.
	// 'kManaged' indicates a MANAGED Hive table.
	// 'kExternal' indicates a EXTERNAL Hive table.
	// 'kVirtual' indicates a VIRTUAL Hive tablet.
	// 'kIndex' indicates a INDEX Hive table.
	// Enum: ["kManaged","kExternal","kVirtual","kIndex"]
	TableType *string `json:"tableType,omitempty"`
}

// Validate validates this hive table
func (m *HiveTable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTableType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hiveTableTypeTableTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kManaged","kExternal","kVirtual","kIndex"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hiveTableTypeTableTypePropEnum = append(hiveTableTypeTableTypePropEnum, v)
	}
}

const (

	// HiveTableTableTypeKManaged captures enum value "kManaged"
	HiveTableTableTypeKManaged string = "kManaged"

	// HiveTableTableTypeKExternal captures enum value "kExternal"
	HiveTableTableTypeKExternal string = "kExternal"

	// HiveTableTableTypeKVirtual captures enum value "kVirtual"
	HiveTableTableTypeKVirtual string = "kVirtual"

	// HiveTableTableTypeKIndex captures enum value "kIndex"
	HiveTableTableTypeKIndex string = "kIndex"
)

// prop value enum
func (m *HiveTable) validateTableTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hiveTableTypeTableTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HiveTable) validateTableType(formats strfmt.Registry) error {
	if swag.IsZero(m.TableType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTableTypeEnum("tableType", "body", *m.TableType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hive table based on context it is used
func (m *HiveTable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HiveTable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HiveTable) UnmarshalBinary(b []byte) error {
	var res HiveTable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
