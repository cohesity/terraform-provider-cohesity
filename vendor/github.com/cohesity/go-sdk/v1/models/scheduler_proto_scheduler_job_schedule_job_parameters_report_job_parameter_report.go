// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport Specifies the type and parameters of a report.
//
// swagger:model SchedulerProto_SchedulerJob_ScheduleJobParameters_ReportJobParameter_Report
type SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport struct {

	// Specifies the report name.
	Name *string `json:"name,omitempty"`

	// Specifies the output format of the report.
	OutputFormat *string `json:"outputFormat,omitempty"`

	// parameters
	Parameters *SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReportParameters `json:"parameters,omitempty"`

	// Specifies the subject line for report.
	SubjectLine *string `json:"subjectLine,omitempty"`

	// Specifies the report type.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this scheduler proto scheduler job schedule job parameters report job parameter report
func (m *SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scheduler proto scheduler job schedule job parameters report job parameter report based on the context it is used
func (m *SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameters != nil {

		if swag.IsZero(m.Parameters) { // not required
			return nil
		}

		if err := m.Parameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport) UnmarshalBinary(b []byte) error {
	var res SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
