// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectionRunStateProto Contains information about a protection run. This includes information about
// the backup run that took snapshots, and any copy tasks that copied out the
// snapshots to one or more targets.
//
// swagger:model ProtectionRunStateProto
type ProtectionRunStateProto struct {

	// Information about the backup run.
	BackupRun *BackupJobRunStateProto `json:"backupRun,omitempty"`

	// If there was copy tasks that copied the snapshots from the backup run,
	// this field will contain information about all the copy tasks.
	CopyRun *CopyBackupRunStateProto `json:"copyRun,omitempty"`

	// The originator type for this run. This specifies the origin from where
	// this run came to this cluster. The possibilities are:
	// 1) kLocal: This is a local run.
	// 2) kRemote: This is a remote replicated run.
	// 3) kArchival: This run was remote restored by Icebox.
	OriginatorType *int32 `json:"originatorType,omitempty"`

	// If only shell information is being requested, this contains the minimal
	// shell info for the run.
	ProtectionRunShell *ProtectionRunShellInfoProto `json:"protectionRunShell,omitempty"`
}

// Validate validates this protection run state proto
func (m *ProtectionRunStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopyRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionRunShell(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionRunStateProto) validateBackupRun(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRun) { // not required
		return nil
	}

	if m.BackupRun != nil {
		if err := m.BackupRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupRun")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionRunStateProto) validateCopyRun(formats strfmt.Registry) error {
	if swag.IsZero(m.CopyRun) { // not required
		return nil
	}

	if m.CopyRun != nil {
		if err := m.CopyRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copyRun")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionRunStateProto) validateProtectionRunShell(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionRunShell) { // not required
		return nil
	}

	if m.ProtectionRunShell != nil {
		if err := m.ProtectionRunShell.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionRunShell")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionRunShell")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this protection run state proto based on the context it is used
func (m *ProtectionRunStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCopyRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionRunShell(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionRunStateProto) contextValidateBackupRun(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRun != nil {

		if swag.IsZero(m.BackupRun) { // not required
			return nil
		}

		if err := m.BackupRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupRun")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionRunStateProto) contextValidateCopyRun(ctx context.Context, formats strfmt.Registry) error {

	if m.CopyRun != nil {

		if swag.IsZero(m.CopyRun) { // not required
			return nil
		}

		if err := m.CopyRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copyRun")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionRunStateProto) contextValidateProtectionRunShell(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionRunShell != nil {

		if swag.IsZero(m.ProtectionRunShell) { // not required
			return nil
		}

		if err := m.ProtectionRunShell.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionRunShell")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionRunShell")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionRunStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionRunStateProto) UnmarshalBinary(b []byte) error {
	var res ProtectionRunStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
