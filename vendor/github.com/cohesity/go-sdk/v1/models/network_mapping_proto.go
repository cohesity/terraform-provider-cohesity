// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkMappingProto network mapping proto
//
// swagger:model NetworkMappingProto
type NetworkMappingProto struct {

	// This can be set to true to indicate that the attached network should be
	// left in disabled state. This value takes priority over the value in
	// RestoredObjectNetworkConfigProto.
	DisableNetwork *bool `json:"disableNetwork,omitempty"`

	// Source VMs network adapter name for which mapping is selected. Example:
	// "Network adapter 1", "Network adapter 2".
	NetworkAdapterName *string `json:"networkAdapterName,omitempty"`

	// This will be populated for recovery of the VM to the VCD.
	OrgVdcNetwork *OrgVDCNetwork `json:"orgVdcNetwork,omitempty"`

	// VM's MAC address will be preserved on the new network. This value takes
	// priority over the value in RestoredObjectNetworkConfigProto.
	PreserveMacAddressOnNewNetwork *bool `json:"preserveMacAddressOnNewNetwork,omitempty"`

	// The network entity (i.e, either a standard switch port group or a
	// distributed port group or Opaque network in a VMware env) that is attached
	// to one of the source object.
	SourceNetworkEntity *EntityProto `json:"sourceNetworkEntity,omitempty"`

	// The network entity (i.e, either a standard switch port group or a
	// distributed port group in a VMware env) that will be attached to
	// one of the target object.
	TargetNetworkEntity *EntityProto `json:"targetNetworkEntity,omitempty"`
}

// Validate validates this network mapping proto
func (m *NetworkMappingProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrgVdcNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceNetworkEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetNetworkEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkMappingProto) validateOrgVdcNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.OrgVdcNetwork) { // not required
		return nil
	}

	if m.OrgVdcNetwork != nil {
		if err := m.OrgVdcNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orgVdcNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orgVdcNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkMappingProto) validateSourceNetworkEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceNetworkEntity) { // not required
		return nil
	}

	if m.SourceNetworkEntity != nil {
		if err := m.SourceNetworkEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceNetworkEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceNetworkEntity")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkMappingProto) validateTargetNetworkEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetNetworkEntity) { // not required
		return nil
	}

	if m.TargetNetworkEntity != nil {
		if err := m.TargetNetworkEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetNetworkEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetNetworkEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network mapping proto based on the context it is used
func (m *NetworkMappingProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrgVdcNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceNetworkEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetNetworkEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkMappingProto) contextValidateOrgVdcNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.OrgVdcNetwork != nil {

		if swag.IsZero(m.OrgVdcNetwork) { // not required
			return nil
		}

		if err := m.OrgVdcNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orgVdcNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orgVdcNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkMappingProto) contextValidateSourceNetworkEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceNetworkEntity != nil {

		if swag.IsZero(m.SourceNetworkEntity) { // not required
			return nil
		}

		if err := m.SourceNetworkEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceNetworkEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceNetworkEntity")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkMappingProto) contextValidateTargetNetworkEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetNetworkEntity != nil {

		if swag.IsZero(m.TargetNetworkEntity) { // not required
			return nil
		}

		if err := m.TargetNetworkEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetNetworkEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetNetworkEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkMappingProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkMappingProto) UnmarshalBinary(b []byte) error {
	var res NetworkMappingProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
