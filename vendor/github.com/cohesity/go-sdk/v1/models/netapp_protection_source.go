// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetappProtectionSource NetApp Protection Source.
//
// Specifies a Protection Source in a NetApp environment.
//
// swagger:model NetappProtectionSource
type NetappProtectionSource struct {

	// Specifies information about a NetApp cluster and is only valid for a
	// NetApp Object of type kCluster.
	ClusterInfo *NetappClusterInfo `json:"clusterInfo,omitempty"`

	// Specifies if this Object is a top level Object.
	// Because a top level Object can either be a NetApp cluster or a Vserver,
	// this cannot be determined only by type.
	IsTopLevel *bool `json:"isTopLevel,omitempty"`

	// Specifies the type of license available on Netapp Cluster
	// 'kSnapmirrorCloud' indicates a SnapMirror license on Netapp.
	LicenseTypes []string `json:"licenseTypes"`

	// Specifies the name of the NetApp Object.
	Name *string `json:"name,omitempty"`

	// Specifies the type of managed NetApp Object in a NetApp Protection Source
	// such as 'kCluster', 'kVserver' or 'kVolume'.
	// 'kCluster' indicates a Netapp cluster as a protection source.
	// 'kVserver' indicates a Netapp vserver in a cluster as a protection source.
	// 'kVolume' indicates  a volume in Netapp vserver as a protection source.
	// Enum: ["kCluster","kVserver","kVolume"]
	Type *string `json:"type,omitempty"`

	// Specifies the globally unique ID of this Object assigned by the
	// NetApp server.
	UUID *string `json:"uuid,omitempty"`

	// Specifies the version of Netapp Cluster.
	VersionTuple *NetappVersionTuple `json:"versionTuple,omitempty"`

	// Specifies information about a NetApp volume and is only valid for a
	// NetApp Object of type kVolume.
	VolumeInfo *NetappVolumeInfo `json:"volumeInfo,omitempty"`

	// Specifies information about a NetApp Vserver and is only valid for a
	// NetApp Object of type kVserver.
	VserverInfo *NetappVserverInfo `json:"vserverInfo,omitempty"`
}

// Validate validates this netapp protection source
func (m *NetappProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionTuple(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVserverInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetappProtectionSource) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

var netappProtectionSourceLicenseTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSnapmirrorCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netappProtectionSourceLicenseTypesItemsEnum = append(netappProtectionSourceLicenseTypesItemsEnum, v)
	}
}

func (m *NetappProtectionSource) validateLicenseTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, netappProtectionSourceLicenseTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetappProtectionSource) validateLicenseTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseTypes); i++ {

		// value enum
		if err := m.validateLicenseTypesItemsEnum("licenseTypes"+"."+strconv.Itoa(i), "body", m.LicenseTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var netappProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kVserver","kVolume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netappProtectionSourceTypeTypePropEnum = append(netappProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// NetappProtectionSourceTypeKCluster captures enum value "kCluster"
	NetappProtectionSourceTypeKCluster string = "kCluster"

	// NetappProtectionSourceTypeKVserver captures enum value "kVserver"
	NetappProtectionSourceTypeKVserver string = "kVserver"

	// NetappProtectionSourceTypeKVolume captures enum value "kVolume"
	NetappProtectionSourceTypeKVolume string = "kVolume"
)

// prop value enum
func (m *NetappProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, netappProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetappProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *NetappProtectionSource) validateVersionTuple(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionTuple) { // not required
		return nil
	}

	if m.VersionTuple != nil {
		if err := m.VersionTuple.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionTuple")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionTuple")
			}
			return err
		}
	}

	return nil
}

func (m *NetappProtectionSource) validateVolumeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeInfo) { // not required
		return nil
	}

	if m.VolumeInfo != nil {
		if err := m.VolumeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *NetappProtectionSource) validateVserverInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VserverInfo) { // not required
		return nil
	}

	if m.VserverInfo != nil {
		if err := m.VserverInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vserverInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vserverInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this netapp protection source based on the context it is used
func (m *NetappProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionTuple(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVserverInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetappProtectionSource) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {

		if swag.IsZero(m.ClusterInfo) { // not required
			return nil
		}

		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *NetappProtectionSource) contextValidateVersionTuple(ctx context.Context, formats strfmt.Registry) error {

	if m.VersionTuple != nil {

		if swag.IsZero(m.VersionTuple) { // not required
			return nil
		}

		if err := m.VersionTuple.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionTuple")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionTuple")
			}
			return err
		}
	}

	return nil
}

func (m *NetappProtectionSource) contextValidateVolumeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeInfo != nil {

		if swag.IsZero(m.VolumeInfo) { // not required
			return nil
		}

		if err := m.VolumeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *NetappProtectionSource) contextValidateVserverInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.VserverInfo != nil {

		if swag.IsZero(m.VserverInfo) { // not required
			return nil
		}

		if err := m.VserverInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vserverInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vserverInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetappProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetappProtectionSource) UnmarshalBinary(b []byte) error {
	var res NetappProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
