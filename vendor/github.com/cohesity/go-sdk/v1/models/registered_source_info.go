// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisteredSourceInfo Registered Source Info.
//
// Specifies information about a registered Source.
//
// swagger:model RegisteredSourceInfo
type RegisteredSourceInfo struct {

	// Specifies the parameters required to establish a connection
	// with a particular environment.
	AccessInfo *ConnectorParameters `json:"accessInfo,omitempty"`

	// Specifies the list of IP Addresses on the registered source to be
	// exclusively allowed for doing any type of IO operations.
	AllowedIPAddresses []string `json:"allowedIpAddresses"`

	// Specifies an authentication error message. This indicates the given
	// credentials are rejected and the registration of the source is not
	// successful.
	AuthenticationErrorMessage *string `json:"authenticationErrorMessage,omitempty"`

	// Specifies the status of the authenticating to the Protection Source
	// when registering it with Cohesity Cluster. If the status is 'kFinished'
	// and there is no error, registration is successful.
	// Specifies the status of the authentication during the registration of a
	// Protection Source.
	// 'kPending' indicates the authentication is in progress.
	// 'kScheduled' indicates the authentication is scheduled.
	// 'kFinished' indicates the authentication is completed.
	// 'kRefreshInProgress' indicates the refresh is in progress.
	// Enum: ["kPending","kScheduled","kFinished","kRefreshInProgress"]
	AuthenticationStatus *string `json:"authenticationStatus,omitempty"`

	// This field is deprecated. Use DeniedIpAddresses instead.
	// deprecated: true
	BlacklistedIPAddresses []string `json:"blacklistedIpAddresses"`

	// Contains all the additional params specified by the user while registering
	// the Cassandra source.
	CassandraParams *CassandraConnectParams `json:"cassandraParams,omitempty"`

	// Specifies the cloud credentials used to authenticate with cloud(Aws).
	CloudCredentials *CloudCredentials `json:"cloudCredentials,omitempty"`

	// Contains all the additional params specified by the user while registering
	// the Couchbase source.
	CouchbaseParams *CouchbaseConnectParams `json:"couchbaseParams,omitempty"`

	// Specifies the list of IP Addresses on the registered source to be denied
	// for doing any type of IO operations.
	DeniedIPAddresses []string `json:"deniedIpAddresses"`

	// Specifies a list of applications environment that are registered
	// with this Protection Source such as 'kSQL'.
	// Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	// NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	// 'kVMware' indicates the VMware Protection Source environment.
	// 'kHyperV' indicates the HyperV Protection Source environment.
	// 'kSQL' indicates the SQL Protection Source environment.
	// 'kView' indicates the View Protection Source environment.
	// 'kPuppeteer' indicates the Cohesity's Remote Adapter.
	// 'kPhysical' indicates the physical Protection Source environment.
	// 'kPure' indicates the Pure Storage Protection Source environment.
	// 'kNimble' indicates the Nimble Storage Protection Source environment.
	// 'kAzure' indicates the Microsoft's Azure Protection Source environment.
	// 'kNetapp' indicates the Netapp Protection Source environment.
	// 'kAgent' indicates the Agent Protection Source environment.
	// 'kGenericNas' indicates the Generic Network Attached Storage Protection
	// Source environment.
	// 'kAcropolis' indicates the Acropolis Protection Source environment.
	// 'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	// 'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	// 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	// 'kGPFS' indicates IBM's GPFS Protection Source environment.
	// 'kKVM' indicates the KVM Protection Source environment.
	// 'kAWS' indicates the AWS Protection Source environment.
	// 'kExchange' indicates the Exchange Protection Source environment.
	// 'kHyperVVSS' indicates the HyperV VSS Protection Source
	// environment.
	// 'kOracle' indicates the Oracle Protection Source environment.
	// 'kGCP' indicates the Google Cloud Platform Protection Source environment.
	// 'kFlashBlade' indicates the Flash Blade Protection Source environment.
	// 'kAWSNative' indicates the AWS Native Protection Source environment.
	// 'kO365' indicates the Office 365 Protection Source environment.
	// 'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	// 'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	// 'kGCPNative' indicates the GCP Native Protection Source environment.
	// 'kAzureNative' indicates the Azure Native Protection Source environment.
	// 'kKubernetes' indicates a Kubernetes Protection Source environment.
	// 'kElastifile' indicates Elastifile Protection Source environment.
	// 'kAD' indicates Active Directory Protection Source environment.
	// 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	// 'kCassandra' indicates Cassandra Protection Source environment.
	// 'kMongoDB' indicates MongoDB Protection Source environment.
	// 'kCouchbase' indicates Couchbase Protection Source environment.
	// 'kHdfs' indicates Hdfs Protection Source environment.
	// 'kHive' indicates Hive Protection Source environment.
	// 'kHBase' indicates HBase Protection Source environment.
	// 'kUDA' indicates Universal Data Adapter Protection Source environment.
	// 'kSAPHANA' indicates SAP HANA protection source environment.
	// 'kO365Teams' indicates the Office365 Teams Protection Source environment.
	// 'kO365Group' indicates the Office365 Groups Protection Source environment.
	// 'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	// 'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	// 'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	// 'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	// kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	// kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	// kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	// kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	// kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	// kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	// kO365PublicFolders
	Environments []string `json:"environments"`

	// Contains all the additional params specified by the user while registering
	// the HBase source.
	HbaseParams *HBaseConnectParams `json:"hbaseParams,omitempty"`

	// Contains all the additional params specified by the user while registering
	// the Hdfs source.
	HdfsParams *HdfsConnectParams `json:"hdfsParams,omitempty"`

	// Contains all the additional params specified by the user while registering
	// the Hive source.
	HiveParams *HiveConnectParams `json:"hiveParams,omitempty"`

	// Specifies if application entity dbAuthenticated or not.
	// ex: oracle database.
	IsDbAuthenticated *bool `json:"isDbAuthenticated,omitempty"`

	// Specifies if this source entity has enabled storage array snapshot or not.
	IsStorageArraySnapshotEnabled *bool `json:"isStorageArraySnapshotEnabled,omitempty"`

	// Contains all the registered source params specified by the user while
	// configuring the Isilon source.
	IsilonParams *RegisteredProtectionSourceIsilonParams `json:"isilonParams,omitempty"`

	// Specifies if the VM linking feature is enabled for this VCenter
	// This means that VMs present in this VCenter which earlier belonged to some
	// other VCenter(also registerd on same cluster) and were migrated, will be
	// linked during EH refresh. This will enable preserving snapshot chains
	// for migrated VMs.
	LinkVmsAcrossVcenter *bool `json:"linkVmsAcrossVcenter,omitempty"`

	// Specifies the minimum free space in GiB of the space expected to be
	// available on the datastore where the virtual disks of the VM being backed
	// up. If the amount of free space(in GiB) is lower than the value given by
	// this field, backup will be aborted. Note that this field is applicable
	// only to 'kVMware' type of environments.
	MinimumFreeSpaceGB *int64 `json:"minimumFreeSpaceGB,omitempty"`

	// Specifies the minimum free space in percentage of the space expected to be
	// available on the datastore where the virtual disks of the VM being backed
	// up. If the amount of free space(in percentage) is lower than the value
	// given by this field, backup will be aborted.
	// Note that this field is applicable only to 'kVMware' type of environments.
	MinimumFreeSpacePercent *int64 `json:"minimumFreeSpacePercent,omitempty"`

	// Contains all the additional params specified by the user while registering
	// the MongoDB source.
	MongodbParams *MongoDBConnectParams `json:"mongodbParams,omitempty"`

	// NAS Server Credentials.
	//
	// Specifies the credentials required to mount directories on the NetApp
	// server if given.
	NasMountCredentials struct {
		NasMountCredentialParams
	} `json:"nasMountCredentials,omitempty"`

	// Contains all the additional params specified by the user while registering
	// the Office 365 source.
	O365Params *O365ConnectParams `json:"o365Params,omitempty"`

	// Office365 Source Credentials.
	//
	// Specifies credentials needed to authenticate & authorize user for
	// Office365.
	Office365CredentialsList []*Office365Credentials `json:"office365CredentialsList"`

	// Specifies the region for Office365. Inorder to truly categorize M365
	// region, clients should not depend upon the endpoint, instead look at this
	// attribute for the same.
	Office365Region *string `json:"office365Region,omitempty"`

	// Office365 Service Account Credentials.
	//
	// Specifies credentials for improving mailbox backup performance for O365.
	Office365ServiceAccountCredentialsList []*Credentials `json:"office365ServiceAccountCredentialsList"`

	// Specifies password of the username to access the target source.
	Password *string `json:"password,omitempty"`

	// Contains all the additional params specified by the user for source
	// throttling configuration.
	PhysicalParams *PhysicalParams `json:"physicalParams,omitempty"`

	// Captures the current progress and pulse details w.r.t to either the
	// registration or refresh.
	ProgressMonitorPath *string `json:"progressMonitorPath,omitempty"`

	// Specifies a message if there was any error encountered during the last
	// rebuild of the Protection Source tree. If there was no error during the
	// last rebuild, this field is reset.
	RefreshErrorMessage *string `json:"refreshErrorMessage,omitempty"`

	// Specifies the Unix epoch time (in microseconds) when the Protection
	// Source tree was most recently fetched and built.
	RefreshTimeUsecs *int64 `json:"refreshTimeUsecs,omitempty"`

	// Specifies information of the applications registered on this protection
	// source.
	RegisteredAppsInfo []*RegisteredAppInfo `json:"registeredAppsInfo"`

	// Specifies the Unix epoch time (in microseconds) when the Protection
	// Source was registered.
	RegistrationTimeUsecs *int64 `json:"registrationTimeUsecs,omitempty"`

	// Contains all the additional params specified by the user while registering
	// the Salesforce source.
	SfdcParams *SfdcParams `json:"sfdcParams,omitempty"`

	// Specifies the list of subnets added during creation or updation of vmare
	// source. Currently, this field will only be populated in case of VMware
	// registration.
	Subnets []*Subnet `json:"subnets"`

	// Specifies the throttling policy that should be applied to all datastores
	// under this registered Protection Source.
	ThrottlingPolicy *ThrottlingPolicyParameters `json:"throttlingPolicy,omitempty"`

	// Array of Throttling Policy Overrides for Datastores.
	//
	// Specifies a list of Throttling Policy for datastores that override the
	// common throttling policy specified for the registered Protection Source.
	// For datastores not in this list, common policy will still apply.
	ThrottlingPolicyOverrides []*ThrottlingPolicyOverride `json:"throttlingPolicyOverrides"`

	// Contains all the additional params specified by the user while registering
	// the Universal Data Adapter source.
	UdaParams *UdaConnectParams `json:"udaParams,omitempty"`

	// Specifies if the last backup time and status should be updated for the
	// VMs protected from the vCenter.
	UpdateLastBackupDetails *bool `json:"updateLastBackupDetails,omitempty"`

	// Specifies whether OAuth should be used for authentication in case of
	// Exchange Online.
	UseOAuthForExchangeOnline *bool `json:"useOAuthForExchangeOnline,omitempty"`

	// Specifies if registered vCenter is using BIOS UUID to track virtual
	// machines.
	UseVMBiosUUID *bool `json:"useVmBiosUuid,omitempty"`

	// Specifies the additional details encountered during registration.
	// Though the registration may succeed, user messages imply the
	// host environment requires some cleanup or fixing.
	UserMessages []string `json:"userMessages"`

	// Specifies username to access the target source.
	Username *string `json:"username,omitempty"`

	// Specifies the VLAN parameters to be used for performing the backup/restore
	// of this entity.
	VlanParams *VlanParameters `json:"vlanParams,omitempty"`

	// Specifies a list of warnings encountered during registration.
	// Though the registration may succeed, warning messages imply the
	// host environment requires some cleanup or fixing.
	WarningMessages []string `json:"warningMessages"`
}

// Validate validates this registered source info
func (m *RegisteredSourceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouchbaseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNasMountCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO365Params(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365CredentialsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365ServiceAccountCredentialsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredAppsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingPolicyOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredSourceInfo) validateAccessInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessInfo) { // not required
		return nil
	}

	if m.AccessInfo != nil {
		if err := m.AccessInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessInfo")
			}
			return err
		}
	}

	return nil
}

var registeredSourceInfoTypeAuthenticationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPending","kScheduled","kFinished","kRefreshInProgress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registeredSourceInfoTypeAuthenticationStatusPropEnum = append(registeredSourceInfoTypeAuthenticationStatusPropEnum, v)
	}
}

const (

	// RegisteredSourceInfoAuthenticationStatusKPending captures enum value "kPending"
	RegisteredSourceInfoAuthenticationStatusKPending string = "kPending"

	// RegisteredSourceInfoAuthenticationStatusKScheduled captures enum value "kScheduled"
	RegisteredSourceInfoAuthenticationStatusKScheduled string = "kScheduled"

	// RegisteredSourceInfoAuthenticationStatusKFinished captures enum value "kFinished"
	RegisteredSourceInfoAuthenticationStatusKFinished string = "kFinished"

	// RegisteredSourceInfoAuthenticationStatusKRefreshInProgress captures enum value "kRefreshInProgress"
	RegisteredSourceInfoAuthenticationStatusKRefreshInProgress string = "kRefreshInProgress"
)

// prop value enum
func (m *RegisteredSourceInfo) validateAuthenticationStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registeredSourceInfoTypeAuthenticationStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisteredSourceInfo) validateAuthenticationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationStatusEnum("authenticationStatus", "body", *m.AuthenticationStatus); err != nil {
		return err
	}

	return nil
}

func (m *RegisteredSourceInfo) validateCassandraParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraParams) { // not required
		return nil
	}

	if m.CassandraParams != nil {
		if err := m.CassandraParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateCloudCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudCredentials) { // not required
		return nil
	}

	if m.CloudCredentials != nil {
		if err := m.CloudCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateCouchbaseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CouchbaseParams) { // not required
		return nil
	}

	if m.CouchbaseParams != nil {
		if err := m.CouchbaseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseParams")
			}
			return err
		}
	}

	return nil
}

var registeredSourceInfoEnvironmentsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registeredSourceInfoEnvironmentsItemsEnum = append(registeredSourceInfoEnvironmentsItemsEnum, v)
	}
}

func (m *RegisteredSourceInfo) validateEnvironmentsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registeredSourceInfoEnvironmentsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisteredSourceInfo) validateEnvironments(formats strfmt.Registry) error {
	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {

		// value enum
		if err := m.validateEnvironmentsItemsEnum("environments"+"."+strconv.Itoa(i), "body", m.Environments[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) validateHbaseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseParams) { // not required
		return nil
	}

	if m.HbaseParams != nil {
		if err := m.HbaseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateHdfsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsParams) { // not required
		return nil
	}

	if m.HdfsParams != nil {
		if err := m.HdfsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateHiveParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveParams) { // not required
		return nil
	}

	if m.HiveParams != nil {
		if err := m.HiveParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateIsilonParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateMongodbParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MongodbParams) { // not required
		return nil
	}

	if m.MongodbParams != nil {
		if err := m.MongodbParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateNasMountCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.NasMountCredentials) { // not required
		return nil
	}

	return nil
}

func (m *RegisteredSourceInfo) validateO365Params(formats strfmt.Registry) error {
	if swag.IsZero(m.O365Params) { // not required
		return nil
	}

	if m.O365Params != nil {
		if err := m.O365Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Params")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateOffice365CredentialsList(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365CredentialsList) { // not required
		return nil
	}

	for i := 0; i < len(m.Office365CredentialsList); i++ {
		if swag.IsZero(m.Office365CredentialsList[i]) { // not required
			continue
		}

		if m.Office365CredentialsList[i] != nil {
			if err := m.Office365CredentialsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) validateOffice365ServiceAccountCredentialsList(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365ServiceAccountCredentialsList) { // not required
		return nil
	}

	for i := 0; i < len(m.Office365ServiceAccountCredentialsList); i++ {
		if swag.IsZero(m.Office365ServiceAccountCredentialsList[i]) { // not required
			continue
		}

		if m.Office365ServiceAccountCredentialsList[i] != nil {
			if err := m.Office365ServiceAccountCredentialsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) validatePhysicalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateRegisteredAppsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredAppsInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.RegisteredAppsInfo); i++ {
		if swag.IsZero(m.RegisteredAppsInfo[i]) { // not required
			continue
		}

		if m.RegisteredAppsInfo[i] != nil {
			if err := m.RegisteredAppsInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registeredAppsInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registeredAppsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) validateSfdcParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcParams) { // not required
		return nil
	}

	if m.SfdcParams != nil {
		if err := m.SfdcParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateSubnets(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {
		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {
			if err := m.Subnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) validateThrottlingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingPolicy) { // not required
		return nil
	}

	if m.ThrottlingPolicy != nil {
		if err := m.ThrottlingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateThrottlingPolicyOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingPolicyOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.ThrottlingPolicyOverrides); i++ {
		if swag.IsZero(m.ThrottlingPolicyOverrides[i]) { // not required
			continue
		}

		if m.ThrottlingPolicyOverrides[i] != nil {
			if err := m.ThrottlingPolicyOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) validateUdaParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaParams) { // not required
		return nil
	}

	if m.UdaParams != nil {
		if err := m.UdaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) validateVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParams) { // not required
		return nil
	}

	if m.VlanParams != nil {
		if err := m.VlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this registered source info based on the context it is used
func (m *RegisteredSourceInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCouchbaseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongodbParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNasMountCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateO365Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365CredentialsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365ServiceAccountCredentialsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredAppsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingPolicyOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredSourceInfo) contextValidateAccessInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessInfo != nil {

		if swag.IsZero(m.AccessInfo) { // not required
			return nil
		}

		if err := m.AccessInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateCassandraParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraParams != nil {

		if swag.IsZero(m.CassandraParams) { // not required
			return nil
		}

		if err := m.CassandraParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateCloudCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudCredentials != nil {

		if swag.IsZero(m.CloudCredentials) { // not required
			return nil
		}

		if err := m.CloudCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateCouchbaseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CouchbaseParams != nil {

		if swag.IsZero(m.CouchbaseParams) { // not required
			return nil
		}

		if err := m.CouchbaseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateHbaseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseParams != nil {

		if swag.IsZero(m.HbaseParams) { // not required
			return nil
		}

		if err := m.HbaseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateHdfsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsParams != nil {

		if swag.IsZero(m.HdfsParams) { // not required
			return nil
		}

		if err := m.HdfsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateHiveParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveParams != nil {

		if swag.IsZero(m.HiveParams) { // not required
			return nil
		}

		if err := m.HiveParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateMongodbParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MongodbParams != nil {

		if swag.IsZero(m.MongodbParams) { // not required
			return nil
		}

		if err := m.MongodbParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateNasMountCredentials(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RegisteredSourceInfo) contextValidateO365Params(ctx context.Context, formats strfmt.Registry) error {

	if m.O365Params != nil {

		if swag.IsZero(m.O365Params) { // not required
			return nil
		}

		if err := m.O365Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Params")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateOffice365CredentialsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Office365CredentialsList); i++ {

		if m.Office365CredentialsList[i] != nil {

			if swag.IsZero(m.Office365CredentialsList[i]) { // not required
				return nil
			}

			if err := m.Office365CredentialsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateOffice365ServiceAccountCredentialsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Office365ServiceAccountCredentialsList); i++ {

		if m.Office365ServiceAccountCredentialsList[i] != nil {

			if swag.IsZero(m.Office365ServiceAccountCredentialsList[i]) { // not required
				return nil
			}

			if err := m.Office365ServiceAccountCredentialsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateRegisteredAppsInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegisteredAppsInfo); i++ {

		if m.RegisteredAppsInfo[i] != nil {

			if swag.IsZero(m.RegisteredAppsInfo[i]) { // not required
				return nil
			}

			if err := m.RegisteredAppsInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registeredAppsInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registeredAppsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateSfdcParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcParams != nil {

		if swag.IsZero(m.SfdcParams) { // not required
			return nil
		}

		if err := m.SfdcParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateSubnets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subnets); i++ {

		if m.Subnets[i] != nil {

			if swag.IsZero(m.Subnets[i]) { // not required
				return nil
			}

			if err := m.Subnets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateThrottlingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ThrottlingPolicy != nil {

		if swag.IsZero(m.ThrottlingPolicy) { // not required
			return nil
		}

		if err := m.ThrottlingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateThrottlingPolicyOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ThrottlingPolicyOverrides); i++ {

		if m.ThrottlingPolicyOverrides[i] != nil {

			if swag.IsZero(m.ThrottlingPolicyOverrides[i]) { // not required
				return nil
			}

			if err := m.ThrottlingPolicyOverrides[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateUdaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaParams != nil {

		if swag.IsZero(m.UdaParams) { // not required
			return nil
		}

		if err := m.UdaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredSourceInfo) contextValidateVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParams != nil {

		if swag.IsZero(m.VlanParams) { // not required
			return nil
		}

		if err := m.VlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredSourceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredSourceInfo) UnmarshalBinary(b []byte) error {
	var res RegisteredSourceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
