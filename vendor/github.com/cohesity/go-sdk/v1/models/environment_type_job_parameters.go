// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EnvironmentTypeJobParameters Environment Specific Common Job Parameters.
//
// Specifies additional parameters that are common to all Protection
// Sources in a Protection Job created for a particular environment type.
//
// swagger:model EnvironmentTypeJobParameters
type EnvironmentTypeJobParameters struct {

	// Specifies additional special parameters that are applicable only to
	// snaphot manger jobs.
	AwsSnapshotParameters *AwsSnapshotManagerParameters `json:"awsSnapshotParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Types of 'kExchange' type.
	ExchangeParameters *ExchangeEnvJobParameters `json:"exchangeParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// externally triggered backup jobs of 'kView' type.
	ExternallyTriggeredJobParameters *ExternallyTriggeredEnvJobParameters `json:"externallyTriggeredJobParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Types of 'kHyperV' type.
	HypervParameters *HypervEnvJobParameters `json:"hypervParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Types of 'kGenericNas' type.
	NasParameters *NasEnvJobParameters `json:"nasParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// types of 'kO365Outlook' type which incorporates both Mailbox & OneDrive
	// backup parameters.
	Office365Parameters *Office365EnvJobParameters `json:"office365Parameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Types of 'kOracle' type.
	OracleParameters *OracleEnvJobParameters `json:"oracleParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Sources of 'kPhysical' type in a kPhysical environment.
	PhysicalParameters *PhysicalEnvJobParameters `json:"physicalParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// SAN Types.
	PureParameters *SanEnvJobParameters `json:"pureParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Types of 'kSQL' type.
	SQLParameters *SQLEnvJobParameters `json:"sqlParameters,omitempty"`

	// Specifies additional special parameters that are applicable only to
	// Types of 'kVMware' type.
	VmwareParameters *VmwareEnvJobParameters `json:"vmwareParameters,omitempty"`
}

// Validate validates this environment type job parameters
func (m *EnvironmentTypeJobParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsSnapshotParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternallyTriggeredJobParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNasParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365Parameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePureParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentTypeJobParameters) validateAwsSnapshotParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsSnapshotParameters) { // not required
		return nil
	}

	if m.AwsSnapshotParameters != nil {
		if err := m.AwsSnapshotParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsSnapshotParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsSnapshotParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) validateExchangeParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeParameters) { // not required
		return nil
	}

	if m.ExchangeParameters != nil {
		if err := m.ExchangeParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) validateExternallyTriggeredJobParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternallyTriggeredJobParameters) { // not required
		return nil
	}

	if m.ExternallyTriggeredJobParameters != nil {
		if err := m.ExternallyTriggeredJobParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externallyTriggeredJobParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externallyTriggeredJobParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) validateHypervParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParameters) { // not required
		return nil
	}

	if m.HypervParameters != nil {
		if err := m.HypervParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) validateNasParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.NasParameters) { // not required
		return nil
	}

	if m.NasParameters != nil {
		if err := m.NasParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) validateOffice365Parameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365Parameters) { // not required
		return nil
	}

	if m.Office365Parameters != nil {
		if err := m.Office365Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Parameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) validateOracleParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleParameters) { // not required
		return nil
	}

	if m.OracleParameters != nil {
		if err := m.OracleParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) validatePhysicalParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParameters) { // not required
		return nil
	}

	if m.PhysicalParameters != nil {
		if err := m.PhysicalParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) validatePureParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.PureParameters) { // not required
		return nil
	}

	if m.PureParameters != nil {
		if err := m.PureParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pureParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pureParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) validateSQLParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLParameters) { // not required
		return nil
	}

	if m.SQLParameters != nil {
		if err := m.SQLParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) validateVmwareParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParameters) { // not required
		return nil
	}

	if m.VmwareParameters != nil {
		if err := m.VmwareParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this environment type job parameters based on the context it is used
func (m *EnvironmentTypeJobParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsSnapshotParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternallyTriggeredJobParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNasParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365Parameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePureParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidateAwsSnapshotParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsSnapshotParameters != nil {

		if swag.IsZero(m.AwsSnapshotParameters) { // not required
			return nil
		}

		if err := m.AwsSnapshotParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsSnapshotParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsSnapshotParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidateExchangeParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeParameters != nil {

		if swag.IsZero(m.ExchangeParameters) { // not required
			return nil
		}

		if err := m.ExchangeParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidateExternallyTriggeredJobParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternallyTriggeredJobParameters != nil {

		if swag.IsZero(m.ExternallyTriggeredJobParameters) { // not required
			return nil
		}

		if err := m.ExternallyTriggeredJobParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externallyTriggeredJobParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externallyTriggeredJobParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidateHypervParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParameters != nil {

		if swag.IsZero(m.HypervParameters) { // not required
			return nil
		}

		if err := m.HypervParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidateNasParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.NasParameters != nil {

		if swag.IsZero(m.NasParameters) { // not required
			return nil
		}

		if err := m.NasParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidateOffice365Parameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Office365Parameters != nil {

		if swag.IsZero(m.Office365Parameters) { // not required
			return nil
		}

		if err := m.Office365Parameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Parameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidateOracleParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleParameters != nil {

		if swag.IsZero(m.OracleParameters) { // not required
			return nil
		}

		if err := m.OracleParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidatePhysicalParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParameters != nil {

		if swag.IsZero(m.PhysicalParameters) { // not required
			return nil
		}

		if err := m.PhysicalParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidatePureParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.PureParameters != nil {

		if swag.IsZero(m.PureParameters) { // not required
			return nil
		}

		if err := m.PureParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pureParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pureParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidateSQLParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLParameters != nil {

		if swag.IsZero(m.SQLParameters) { // not required
			return nil
		}

		if err := m.SQLParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlParameters")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParameters) contextValidateVmwareParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParameters != nil {

		if swag.IsZero(m.VmwareParameters) { // not required
			return nil
		}

		if err := m.VmwareParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentTypeJobParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentTypeJobParameters) UnmarshalBinary(b []byte) error {
	var res EnvironmentTypeJobParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
