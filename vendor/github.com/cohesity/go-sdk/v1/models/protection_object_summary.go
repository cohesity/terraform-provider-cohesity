// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectionObjectSummary protection object summary
//
// swagger:model ProtectionObjectSummary
type ProtectionObjectSummary struct {

	// Specifies the Unix epoch Timestamp (in microseconds) of the latest
	// Archival Snapshot.
	LatestArchivalSnapshotTimeUsecs *int64 `json:"latestArchivalSnapshotTimeUsecs,omitempty"`

	// Specifies the Unix epoch Timestamp (in microseconds) of the latest
	// Local Snapshot.
	LatestLocalSnapshotTimeUsecs *int64 `json:"latestLocalSnapshotTimeUsecs,omitempty"`

	// Specifies the Unix epoch Timestamp (in microseconds) of the latest
	// Replication Snapshot.
	LatestReplicationSnapshotTimeUsecs *int64 `json:"latestReplicationSnapshotTimeUsecs,omitempty"`

	// Specifies the parent Protection Source object such as vCenter.
	ParentProtectionSource *ProtectionSource `json:"parentProtectionSource,omitempty"`

	// Returns the list of Protection Jobs with summary Information.
	ProtectionJobs []*ProtectionRunInstance `json:"protectionJobs"`

	// Specifies the leaf Protection Source Object such as a VM.
	ProtectionSource struct {
		ProtectionSource
	} `json:"protectionSource,omitempty"`

	// Specifies the id of the RPO policy protecting this object.
	RpoPolicies []*ProtectionPolicy `json:"rpoPolicies"`

	// Specifies the total number of Archival Snapshots.
	TotalArchivalSnapshots *int32 `json:"totalArchivalSnapshots,omitempty"`

	// Specifies the total number of Local Snapshots.
	TotalLocalSnapshots *int32 `json:"totalLocalSnapshots,omitempty"`

	// Specifies the total number of Replication Snapshots.
	TotalReplicationSnapshots *int32 `json:"totalReplicationSnapshots,omitempty"`
}

// Validate validates this protection object summary
func (m *ProtectionObjectSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParentProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRpoPolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionObjectSummary) validateParentProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentProtectionSource) { // not required
		return nil
	}

	if m.ParentProtectionSource != nil {
		if err := m.ParentProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionObjectSummary) validateProtectionJobs(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionJobs) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionJobs); i++ {
		if swag.IsZero(m.ProtectionJobs[i]) { // not required
			continue
		}

		if m.ProtectionJobs[i] != nil {
			if err := m.ProtectionJobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionObjectSummary) validateProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionObjectSummary) validateRpoPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.RpoPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.RpoPolicies); i++ {
		if swag.IsZero(m.RpoPolicies[i]) { // not required
			continue
		}

		if m.RpoPolicies[i] != nil {
			if err := m.RpoPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rpoPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rpoPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this protection object summary based on the context it is used
func (m *ProtectionObjectSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParentProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionJobs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRpoPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionObjectSummary) contextValidateParentProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentProtectionSource != nil {

		if swag.IsZero(m.ParentProtectionSource) { // not required
			return nil
		}

		if err := m.ParentProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionObjectSummary) contextValidateProtectionJobs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionJobs); i++ {

		if m.ProtectionJobs[i] != nil {

			if swag.IsZero(m.ProtectionJobs[i]) { // not required
				return nil
			}

			if err := m.ProtectionJobs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionObjectSummary) contextValidateProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionObjectSummary) contextValidateRpoPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RpoPolicies); i++ {

		if m.RpoPolicies[i] != nil {

			if swag.IsZero(m.RpoPolicies[i]) { // not required
				return nil
			}

			if err := m.RpoPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rpoPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rpoPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionObjectSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionObjectSummary) UnmarshalBinary(b []byte) error {
	var res ProtectionObjectSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
