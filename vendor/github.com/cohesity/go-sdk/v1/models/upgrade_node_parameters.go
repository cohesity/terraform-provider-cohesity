// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpgradeNodeParameters Upgrade Node Parameters.
//
// Specifies the parameters needed for a Node upgrade request.
//
// swagger:model UpgradeNodeParameters
type UpgradeNodeParameters struct {

	// Specifies a list of IDs of additional nodes to be upgraded. These must
	// be free Nodes present on the same local network as the Node that the
	// request was sent to. The ID of the Node the request was sent to should
	// not be included in this list. This parameter can only be specified if
	// upgradeAllFreeNodes is not.
	NodeIds []int64 `json:"nodeIds"`

	// Specifies the target software version. The node that the request is sent
	// to will search itself for the specified software package and if that
	// package is found, it will be used for the upgrade.
	TargetSwVersion *string `json:"targetSwVersion,omitempty"`

	// Specifies whether or not to attempt to upgrade all free nodes which
	// are currently connected to the same local network as the node that the
	// request was sent to. This parameter can only be specified if nodeIds
	// is not.
	UpgradeAllFreeNodes *bool `json:"upgradeAllFreeNodes,omitempty"`

	// Specifies that the node that the request is being sent to should be
	// upgraded. By default, this is set to true.
	UpgradeSelf *bool `json:"upgradeSelf,omitempty"`
}

// Validate validates this upgrade node parameters
func (m *UpgradeNodeParameters) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this upgrade node parameters based on context it is used
func (m *UpgradeNodeParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeNodeParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeNodeParameters) UnmarshalBinary(b []byte) error {
	var res UpgradeNodeParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
