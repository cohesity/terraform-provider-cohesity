// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntityOperationSpecProto Message defining async operations that can be performed on an entity.
//
// swagger:model EntityOperationSpecProto
type EntityOperationSpecProto struct {

	// If specified, magneto will store the intent for unregister request and
	// respond back to iris. Magneto will later internally delete all the
	// active jobs associated with the entity and then proceed for
	// unregistration. Note that to use this 'delete_entity' must be true.
	MarkSourceForUnregistrationParams *EntityOperationSpecProtoMarkSourceForUnregistrationParams `json:"markSourceForUnregistrationParams,omitempty"`
}

// Validate validates this entity operation spec proto
func (m *EntityOperationSpecProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarkSourceForUnregistrationParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityOperationSpecProto) validateMarkSourceForUnregistrationParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MarkSourceForUnregistrationParams) { // not required
		return nil
	}

	if m.MarkSourceForUnregistrationParams != nil {
		if err := m.MarkSourceForUnregistrationParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("markSourceForUnregistrationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("markSourceForUnregistrationParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this entity operation spec proto based on the context it is used
func (m *EntityOperationSpecProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMarkSourceForUnregistrationParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityOperationSpecProto) contextValidateMarkSourceForUnregistrationParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MarkSourceForUnregistrationParams != nil {

		if swag.IsZero(m.MarkSourceForUnregistrationParams) { // not required
			return nil
		}

		if err := m.MarkSourceForUnregistrationParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("markSourceForUnregistrationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("markSourceForUnregistrationParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityOperationSpecProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityOperationSpecProto) UnmarshalBinary(b []byte) error {
	var res EntityOperationSpecProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
