// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserQuotaSummaryForView User Quota Summary For View.
//
// Specifies the user quota summary information/result for a view.
//
// swagger:model UserQuotaSummaryForView
type UserQuotaSummaryForView struct {

	// Default quota policy applied to all the users in the view who doesn't
	// have a policy override.
	DefaultUserQuotaPolicy *QuotaPolicy `json:"defaultUserQuotaPolicy,omitempty"`

	// Number of users who has exceeded their specified alert limit.
	NumUsersAboveAlertThreshold *int64 `json:"numUsersAboveAlertThreshold,omitempty"`

	// Number of users who has exceeded their specified quota hard limit.
	NumUsersAboveHardLimit *int64 `json:"numUsersAboveHardLimit,omitempty"`

	// Total number of users who has either a user quota policy override
	// specified or has non-zero logical usage.
	TotalNumUsers *int64 `json:"totalNumUsers,omitempty"`
}

// Validate validates this user quota summary for view
func (m *UserQuotaSummaryForView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultUserQuotaPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserQuotaSummaryForView) validateDefaultUserQuotaPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultUserQuotaPolicy) { // not required
		return nil
	}

	if m.DefaultUserQuotaPolicy != nil {
		if err := m.DefaultUserQuotaPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultUserQuotaPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultUserQuotaPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user quota summary for view based on the context it is used
func (m *UserQuotaSummaryForView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultUserQuotaPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserQuotaSummaryForView) contextValidateDefaultUserQuotaPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultUserQuotaPolicy != nil {

		if swag.IsZero(m.DefaultUserQuotaPolicy) { // not required
			return nil
		}

		if err := m.DefaultUserQuotaPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultUserQuotaPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultUserQuotaPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserQuotaSummaryForView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserQuotaSummaryForView) UnmarshalBinary(b []byte) error {
	var res UserQuotaSummaryForView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
