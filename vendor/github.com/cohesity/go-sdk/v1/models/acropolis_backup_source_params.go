// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AcropolisBackupSourceParams Acropolis Backup Source Parameters.
//
// Message to capture additional backup params for a Acropolis type source.
//
// swagger:model AcropolisBackupSourceParams
type AcropolisBackupSourceParams struct {

	// List of Virtual Disk(s) to be excluded from the from the backup job for
	// the source. Overrides the exclusion list requested (if any) through
	// EnvBackupParams.AcropolisBackupEnvParams.
	AcropolisDiskExclusionInfo []*AcropolisDiskFilterProto `json:"acropolisDiskExclusionInfo"`

	// List of Virtual Disk(s) to be included from the from the backup job for
	// the source. These disks will be only included for the source and all other
	// disks will be excluded. Overrides the disk exclusion/inclusion list from
	// EnvBackupParams.AcropolisBackupEnvParams.
	AcropolisDiskInclusionInfo []*AcropolisDiskFilterProto `json:"acropolisDiskInclusionInfo"`
}

// Validate validates this acropolis backup source params
func (m *AcropolisBackupSourceParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcropolisDiskExclusionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcropolisDiskInclusionInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AcropolisBackupSourceParams) validateAcropolisDiskExclusionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisDiskExclusionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.AcropolisDiskExclusionInfo); i++ {
		if swag.IsZero(m.AcropolisDiskExclusionInfo[i]) { // not required
			continue
		}

		if m.AcropolisDiskExclusionInfo[i] != nil {
			if err := m.AcropolisDiskExclusionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acropolisDiskExclusionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acropolisDiskExclusionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AcropolisBackupSourceParams) validateAcropolisDiskInclusionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisDiskInclusionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.AcropolisDiskInclusionInfo); i++ {
		if swag.IsZero(m.AcropolisDiskInclusionInfo[i]) { // not required
			continue
		}

		if m.AcropolisDiskInclusionInfo[i] != nil {
			if err := m.AcropolisDiskInclusionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acropolisDiskInclusionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acropolisDiskInclusionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this acropolis backup source params based on the context it is used
func (m *AcropolisBackupSourceParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcropolisDiskExclusionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcropolisDiskInclusionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AcropolisBackupSourceParams) contextValidateAcropolisDiskExclusionInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AcropolisDiskExclusionInfo); i++ {

		if m.AcropolisDiskExclusionInfo[i] != nil {

			if swag.IsZero(m.AcropolisDiskExclusionInfo[i]) { // not required
				return nil
			}

			if err := m.AcropolisDiskExclusionInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acropolisDiskExclusionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acropolisDiskExclusionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AcropolisBackupSourceParams) contextValidateAcropolisDiskInclusionInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AcropolisDiskInclusionInfo); i++ {

		if m.AcropolisDiskInclusionInfo[i] != nil {

			if swag.IsZero(m.AcropolisDiskInclusionInfo[i]) { // not required
				return nil
			}

			if err := m.AcropolisDiskInclusionInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acropolisDiskInclusionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acropolisDiskInclusionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AcropolisBackupSourceParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AcropolisBackupSourceParams) UnmarshalBinary(b []byte) error {
	var res AcropolisBackupSourceParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
