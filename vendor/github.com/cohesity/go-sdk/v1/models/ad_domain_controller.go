// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdDomainController AD Domain Controller.
//
// Specifies information about an AD domain controller.
//
// swagger:model AdDomainController
type AdDomainController struct {

	// Specifies whether backup of this domain controller is supported.
	BackupSupported *bool `json:"backupSupported,omitempty"`

	// Specifies any reason(s) for domain controller backup not supported.
	BackupUnsupportedReasons []string `json:"backupUnsupportedReasons"`

	// Specifies Domain hosted on this domain controller.
	Domain *AdDomain `json:"domain,omitempty"`

	// Specifies FQDN host name of the domain controller.
	HostName *string `json:"hostName,omitempty"`

	// Specifies whether this domain controller is a global catalog server.
	IsGlobalCatalog *bool `json:"isGlobalCatalog,omitempty"`

	// Specifies whether this domain controller is read only.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// Specifies UTC time offset of this domain controller in minutes.
	UtcOffsetMin *int32 `json:"utcOffsetMin,omitempty"`
}

// Validate validates this ad domain controller
func (m *AdDomainController) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdDomainController) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if m.Domain != nil {
		if err := m.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ad domain controller based on the context it is used
func (m *AdDomainController) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdDomainController) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.Domain != nil {

		if swag.IsZero(m.Domain) { // not required
			return nil
		}

		if err := m.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdDomainController) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdDomainController) UnmarshalBinary(b []byte) error {
	var res AdDomainController
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
