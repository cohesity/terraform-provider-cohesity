// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserIDMapping User ID Mapping.
//
// Specifies how the Unix and Windows users are mapped in an Active Directory.
//
// swagger:model UserIdMapping
type UserIDMapping struct {

	// Specifies a centrify zone when mapping type is set to 'kCentrify'. It
	// defines a centrify zone from which the user id mapping info would be
	// derived.
	CentrifyZoneMapping *CentrifyZone `json:"centrifyZoneMapping,omitempty"`

	// Specifies the custom attributes when mapping type is set to
	// 'kCustomAttributes'. It defines the attribute names to derive the mapping
	// for a user of an Active Directory domain.
	CustomAttributesMapping *CustomUnixIDAttributes `json:"customAttributesMapping,omitempty"`

	// Specifies the fields when mapping type is set to 'kFixed'. It maps all
	// Active Directory users of this domain to a fixed uid, and gid.
	FixedMapping *FixedUnixIDMapping `json:"fixedMapping,omitempty"`

	// Specifies the mapping type used.
	// 'kRid' indicates the kRid mapping type.
	// 'kRfc2307' indicates the kRfc2307 mapping type.
	// 'kSfu30' indicates the kSfu30 mapping type.
	// 'kCentrify' indicates the mapping type to refer to a centrify zone.
	// 'kFixed' indicates the mapping from all Active Directory users to a fixed Unix uid, and gid.
	// 'kCustomAttributes' indicates the mapping to derive from custom attributes defined in an AD domain.
	// 'kLdapProvider' indicates the Active Directory to LDAP provider mapping.
	// Enum: ["kRid","kRfc2307","kSfu30","kCentrify","kFixed","kCustomAttributes","kLdapProvider"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this user Id mapping
func (m *UserIDMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCentrifyZoneMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomAttributesMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserIDMapping) validateCentrifyZoneMapping(formats strfmt.Registry) error {
	if swag.IsZero(m.CentrifyZoneMapping) { // not required
		return nil
	}

	if m.CentrifyZoneMapping != nil {
		if err := m.CentrifyZoneMapping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("centrifyZoneMapping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("centrifyZoneMapping")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMapping) validateCustomAttributesMapping(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomAttributesMapping) { // not required
		return nil
	}

	if m.CustomAttributesMapping != nil {
		if err := m.CustomAttributesMapping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customAttributesMapping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customAttributesMapping")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMapping) validateFixedMapping(formats strfmt.Registry) error {
	if swag.IsZero(m.FixedMapping) { // not required
		return nil
	}

	if m.FixedMapping != nil {
		if err := m.FixedMapping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixedMapping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fixedMapping")
			}
			return err
		}
	}

	return nil
}

var userIdMappingTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRid","kRfc2307","kSfu30","kCentrify","kFixed","kCustomAttributes","kLdapProvider"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userIdMappingTypeTypePropEnum = append(userIdMappingTypeTypePropEnum, v)
	}
}

const (

	// UserIDMappingTypeKRid captures enum value "kRid"
	UserIDMappingTypeKRid string = "kRid"

	// UserIDMappingTypeKRfc2307 captures enum value "kRfc2307"
	UserIDMappingTypeKRfc2307 string = "kRfc2307"

	// UserIDMappingTypeKSfu30 captures enum value "kSfu30"
	UserIDMappingTypeKSfu30 string = "kSfu30"

	// UserIDMappingTypeKCentrify captures enum value "kCentrify"
	UserIDMappingTypeKCentrify string = "kCentrify"

	// UserIDMappingTypeKFixed captures enum value "kFixed"
	UserIDMappingTypeKFixed string = "kFixed"

	// UserIDMappingTypeKCustomAttributes captures enum value "kCustomAttributes"
	UserIDMappingTypeKCustomAttributes string = "kCustomAttributes"

	// UserIDMappingTypeKLdapProvider captures enum value "kLdapProvider"
	UserIDMappingTypeKLdapProvider string = "kLdapProvider"
)

// prop value enum
func (m *UserIDMapping) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userIdMappingTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserIDMapping) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user Id mapping based on the context it is used
func (m *UserIDMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCentrifyZoneMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomAttributesMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFixedMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserIDMapping) contextValidateCentrifyZoneMapping(ctx context.Context, formats strfmt.Registry) error {

	if m.CentrifyZoneMapping != nil {

		if swag.IsZero(m.CentrifyZoneMapping) { // not required
			return nil
		}

		if err := m.CentrifyZoneMapping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("centrifyZoneMapping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("centrifyZoneMapping")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMapping) contextValidateCustomAttributesMapping(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomAttributesMapping != nil {

		if swag.IsZero(m.CustomAttributesMapping) { // not required
			return nil
		}

		if err := m.CustomAttributesMapping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customAttributesMapping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customAttributesMapping")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMapping) contextValidateFixedMapping(ctx context.Context, formats strfmt.Registry) error {

	if m.FixedMapping != nil {

		if swag.IsZero(m.FixedMapping) { // not required
			return nil
		}

		if err := m.FixedMapping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixedMapping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fixedMapping")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserIDMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserIDMapping) UnmarshalBinary(b []byte) error {
	var res UserIDMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
