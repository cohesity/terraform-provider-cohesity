// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateFlashbladeEntity private flashblade entity
//
// swagger:model PrivateFlashbladeEntity
type PrivateFlashbladeEntity struct {

	// Specific information of an array, only valid for an entity of type
	// kArray'.
	ArrayInfo *ArrayInfo `json:"arrayInfo,omitempty"`

	// Specific information of a file system, only valid for an entity of type
	// 'kFileSystem'.
	FileSystemInfo *FileSystemInfo `json:"fileSystemInfo,omitempty"`

	// The name of the entity. An entity of type 'kFileSystem' is uniquely
	// identified by its name.
	Name *string `json:"name,omitempty"`

	// The smb host name for kerberos authentication.
	SmbKrb5Hostname *string `json:"smbKrb5Hostname,omitempty"`

	// The type of the entity.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this private flashblade entity
func (m *PrivateFlashbladeEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrayInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSystemInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateFlashbladeEntity) validateArrayInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrayInfo) { // not required
		return nil
	}

	if m.ArrayInfo != nil {
		if err := m.ArrayInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arrayInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("arrayInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateFlashbladeEntity) validateFileSystemInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FileSystemInfo) { // not required
		return nil
	}

	if m.FileSystemInfo != nil {
		if err := m.FileSystemInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSystemInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileSystemInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private flashblade entity based on the context it is used
func (m *PrivateFlashbladeEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArrayInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileSystemInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateFlashbladeEntity) contextValidateArrayInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ArrayInfo != nil {

		if swag.IsZero(m.ArrayInfo) { // not required
			return nil
		}

		if err := m.ArrayInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arrayInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("arrayInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateFlashbladeEntity) contextValidateFileSystemInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FileSystemInfo != nil {

		if swag.IsZero(m.FileSystemInfo) { // not required
			return nil
		}

		if err := m.FileSystemInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSystemInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileSystemInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateFlashbladeEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateFlashbladeEntity) UnmarshalBinary(b []byte) error {
	var res PrivateFlashbladeEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
