// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SwiftContainerTaggingProto Proto to define the tagging info associated with a Swift container.
//
// swagger:model SwiftContainerTaggingProto
type SwiftContainerTaggingProto struct {

	// [optional] The Keystone user who could get grant of access to this
	// container after creation by ACL. It is used to let this user get access to
	// this container if noboby has any Swift roles from Keystone. If this user
	// has a Swift role, other Keystone users could get grant by this 'root' user
	// through ACL.
	// If 'acl_root_user' is set, below fields are mandatory.
	// [mandatory] acl_root_user.name
	// [mandatory] acl_root_user.domain.name
	ACLRootUser *User `json:"aclRootUser,omitempty"`

	// [mandatory] The Keystone project this Swift container belongs to.
	// Below fields are mandatory.
	// [mandatory] project_tag.name
	// [mandatory] project_tag.domain.name
	ProjectTag *Project `json:"projectTag,omitempty"`
}

// Validate validates this swift container tagging proto
func (m *SwiftContainerTaggingProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLRootUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwiftContainerTaggingProto) validateACLRootUser(formats strfmt.Registry) error {
	if swag.IsZero(m.ACLRootUser) { // not required
		return nil
	}

	if m.ACLRootUser != nil {
		if err := m.ACLRootUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aclRootUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aclRootUser")
			}
			return err
		}
	}

	return nil
}

func (m *SwiftContainerTaggingProto) validateProjectTag(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectTag) { // not required
		return nil
	}

	if m.ProjectTag != nil {
		if err := m.ProjectTag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectTag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectTag")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this swift container tagging proto based on the context it is used
func (m *SwiftContainerTaggingProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateACLRootUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwiftContainerTaggingProto) contextValidateACLRootUser(ctx context.Context, formats strfmt.Registry) error {

	if m.ACLRootUser != nil {

		if swag.IsZero(m.ACLRootUser) { // not required
			return nil
		}

		if err := m.ACLRootUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aclRootUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aclRootUser")
			}
			return err
		}
	}

	return nil
}

func (m *SwiftContainerTaggingProto) contextValidateProjectTag(ctx context.Context, formats strfmt.Registry) error {

	if m.ProjectTag != nil {

		if swag.IsZero(m.ProjectTag) { // not required
			return nil
		}

		if err := m.ProjectTag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectTag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectTag")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwiftContainerTaggingProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwiftContainerTaggingProto) UnmarshalBinary(b []byte) error {
	var res SwiftContainerTaggingProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
