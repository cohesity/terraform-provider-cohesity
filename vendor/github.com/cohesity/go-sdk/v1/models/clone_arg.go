// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloneArg CloneArg represents the argument for clone VM operations.
//
// swagger:model CloneArg
type CloneArg struct {

	// Type of restore to perform.
	Action *int32 `json:"action,omitempty"`

	// ContinueRestoreOnError specifies whether to continue with the clone
	// operation if clone of any object fails.
	ContinueRestoreOnError *bool `json:"continueRestoreOnError,omitempty"`

	// Parameters to deploy VMs to cloud. Only populate this if deploying VMs
	// to cloud.
	DeployVmsToCloudParams *DeployVMsToCloudParams `json:"deployVmsToCloudParams,omitempty"`

	// Defines the HyperV specific params for restore tasks.
	HypervParams *RestoreHyperVVMParams `json:"hypervParams,omitempty"`

	// Name is the name of the clone task. This field has to be set, and it needs
	// to be unique across all clone tasks using the specified view name.
	Name *string `json:"name,omitempty"`

	// Objects is the list of objects to clone.
	Objects []*RestoreObject `json:"objects"`

	// PowerStateConfig is the power state configuration to be applied to the
	// restored object.
	//
	// By default, objects are cloned in the powered off state.
	PowerStateConfig *PowerStateConfigProto `json:"powerStateConfig,omitempty"`

	// PreserveTags specifies whether or not to preserve tags during the
	// operations. This is used for VMware and HyperV.
	PreserveTags *bool `json:"preserveTags,omitempty"`

	// RenameRestoredObjectParam can be used to specify the transformation
	// ( i.e prefix/suffix) to be applied to the source object name to derive the
	// new name of the cloned object.
	//
	// By default, objects are cloned with their original name.
	RenameRestoredObjectParam *RenameObjectParamProto `json:"renameRestoredObjectParam,omitempty"`

	// Specifies the name transformation to be applied to the vApp during restore.
	RenameRestoredVappParams *RenameObjectParamProto `json:"renameRestoredVappParams,omitempty"`

	// ResourcePoolEntity is the resource pool entity where the cloned objects
	// will be attached. This field is mandatory.
	ResourcePoolEntity *PrivateEntityProto `json:"resourcePoolEntity,omitempty"`

	// RestoreParentSource is the optional registered parent source to which
	// objects are to be cloned. If not specified, objects are cloned back to
	// the original source that was managing the objects.
	RestoreParentSource *PrivateEntityProto `json:"restoreParentSource,omitempty"`

	// Vlan Params associated with the restore.
	// If this is not specified, then the VLAN settings will be automatically
	// selected from one of the following options:
	// a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be
	// automatically based on the client's (e.g. ESXI host) IP address.
	// b. If VLANs are not configured on Cohesity, then the partition hostname or
	// VIPs will be used for restores.
	RestoreVlanParams *VlanParams `json:"restoreVlanParams,omitempty"`

	// RestoredObjectsNetworkConfig is the network configuration to be applied to
	// the cloned object.
	//
	// By default, objects are cloned with network detached/disabled. This field
	// can be used to specify the network configuration if user wants to attach
	// network.
	RestoredObjectsNetworkConfig *RestoredObjectNetworkConfigProto `json:"restoredObjectsNetworkConfig,omitempty"`

	// Specifies whether to skip image deploy or not.
	// This flag can be set to true to just create the image and not deploy the
	// VM. This flag is applicable for restore type kConvertAndDeployVMs.
	// This flag is set to true during the DR operation that is invoked via
	// runbooks, the creation of image(AMI in case of AWS) and snapshots of the
	// data disk is achieved by invoking a restore of type kConvertAndDeployVMs
	// and orchestration of the VMs is achieved by runbooks.
	SkipImageDeploy *bool `json:"skipImageDeploy,omitempty"`

	// Specifies whether to skip Rigel in case of restore or not.
	SkipRigelForRestore *bool `json:"skipRigelForRestore,omitempty"`

	// Specifies the way data needs to be retrieved/restored from the vault.
	VaultRestoreParams *VaultParamsRestoreParams `json:"vaultRestoreParams,omitempty"`

	// Specifies the Vcd config info parameter for restore tasks.
	VcdConfigParams *RestoredObjectVCDConfigProto `json:"vcdConfigParams,omitempty"`

	// ViewName is the target view into which the objects are to be cloned.
	ViewName *string `json:"viewName,omitempty"`

	// ViewParams are the parameters to clone a view.
	ViewParams *CloneViewRequest `json:"viewParams,omitempty"`

	// Defines special VMWare specific params that are not provided at top level.
	VmwareParams *RestoreVMwareVMParams `json:"vmwareParams,omitempty"`
}

// Validate validates this clone arg
func (m *CloneArg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployVmsToCloudParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerStateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredObjectParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredVappParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePoolEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreParentSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredObjectsNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultRestoreParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdConfigParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneArg) validateDeployVmsToCloudParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToCloudParams) { // not required
		return nil
	}

	if m.DeployVmsToCloudParams != nil {
		if err := m.DeployVmsToCloudParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateHypervParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParams) { // not required
		return nil
	}

	if m.HypervParams != nil {
		if err := m.HypervParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloneArg) validatePowerStateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerStateConfig) { // not required
		return nil
	}

	if m.PowerStateConfig != nil {
		if err := m.PowerStateConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerStateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerStateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateRenameRestoredObjectParam(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredObjectParam) { // not required
		return nil
	}

	if m.RenameRestoredObjectParam != nil {
		if err := m.RenameRestoredObjectParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateRenameRestoredVappParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredVappParams) { // not required
		return nil
	}

	if m.RenameRestoredVappParams != nil {
		if err := m.RenameRestoredVappParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredVappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredVappParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateResourcePoolEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePoolEntity) { // not required
		return nil
	}

	if m.ResourcePoolEntity != nil {
		if err := m.ResourcePoolEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolEntity")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateRestoreParentSource(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreParentSource) { // not required
		return nil
	}

	if m.RestoreParentSource != nil {
		if err := m.RestoreParentSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParentSource")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateRestoreVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreVlanParams) { // not required
		return nil
	}

	if m.RestoreVlanParams != nil {
		if err := m.RestoreVlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateRestoredObjectsNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredObjectsNetworkConfig) { // not required
		return nil
	}

	if m.RestoredObjectsNetworkConfig != nil {
		if err := m.RestoredObjectsNetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredObjectsNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredObjectsNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateVaultRestoreParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultRestoreParams) { // not required
		return nil
	}

	if m.VaultRestoreParams != nil {
		if err := m.VaultRestoreParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vaultRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vaultRestoreParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateVcdConfigParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdConfigParams) { // not required
		return nil
	}

	if m.VcdConfigParams != nil {
		if err := m.VcdConfigParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfigParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfigParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateViewParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewParams) { // not required
		return nil
	}

	if m.ViewParams != nil {
		if err := m.ViewParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this clone arg based on the context it is used
func (m *CloneArg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeployVmsToCloudParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerStateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredObjectParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredVappParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourcePoolEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreParentSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredObjectsNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVaultRestoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdConfigParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneArg) contextValidateDeployVmsToCloudParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToCloudParams != nil {

		if swag.IsZero(m.DeployVmsToCloudParams) { // not required
			return nil
		}

		if err := m.DeployVmsToCloudParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateHypervParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParams != nil {

		if swag.IsZero(m.HypervParams) { // not required
			return nil
		}

		if err := m.HypervParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloneArg) contextValidatePowerStateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerStateConfig != nil {

		if swag.IsZero(m.PowerStateConfig) { // not required
			return nil
		}

		if err := m.PowerStateConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerStateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerStateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateRenameRestoredObjectParam(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredObjectParam != nil {

		if swag.IsZero(m.RenameRestoredObjectParam) { // not required
			return nil
		}

		if err := m.RenameRestoredObjectParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateRenameRestoredVappParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredVappParams != nil {

		if swag.IsZero(m.RenameRestoredVappParams) { // not required
			return nil
		}

		if err := m.RenameRestoredVappParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredVappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredVappParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateResourcePoolEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourcePoolEntity != nil {

		if swag.IsZero(m.ResourcePoolEntity) { // not required
			return nil
		}

		if err := m.ResourcePoolEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolEntity")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateRestoreParentSource(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreParentSource != nil {

		if swag.IsZero(m.RestoreParentSource) { // not required
			return nil
		}

		if err := m.RestoreParentSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParentSource")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateRestoreVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreVlanParams != nil {

		if swag.IsZero(m.RestoreVlanParams) { // not required
			return nil
		}

		if err := m.RestoreVlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateRestoredObjectsNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredObjectsNetworkConfig != nil {

		if swag.IsZero(m.RestoredObjectsNetworkConfig) { // not required
			return nil
		}

		if err := m.RestoredObjectsNetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredObjectsNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredObjectsNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateVaultRestoreParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VaultRestoreParams != nil {

		if swag.IsZero(m.VaultRestoreParams) { // not required
			return nil
		}

		if err := m.VaultRestoreParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vaultRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vaultRestoreParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateVcdConfigParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdConfigParams != nil {

		if swag.IsZero(m.VcdConfigParams) { // not required
			return nil
		}

		if err := m.VcdConfigParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfigParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfigParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateViewParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewParams != nil {

		if swag.IsZero(m.ViewParams) { // not required
			return nil
		}

		if err := m.ViewParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneArg) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloneArg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloneArg) UnmarshalBinary(b []byte) error {
	var res CloneArg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
