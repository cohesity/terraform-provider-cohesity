// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SnmpUser Snmp User is the struct containing SNMP user info for this cluster.
//
// swagger:model SnmpUser
type SnmpUser struct {

	// AuthPassword is the authentication password for SNMP V3 users.
	// Mandatory for SNMP V3, and no default value.
	AuthPassword *string `json:"authPassword,omitempty"`

	// AuthPrototol is the authentication protocol for SNMP V3 users.
	// Mandatory for SNMP V3,default is MD5.
	AuthProtocol *int32 `json:"authProtocol,omitempty"`

	// ContextName is the context used for SNMP V3.
	// Optional, default is " ".
	ContextName *string `json:"contextName,omitempty"`

	// EngineID is the SNMP V3 Engine ID used by trap users.
	// Optional, default is cluster name.
	EngineID *string `json:"engineID,omitempty"`

	// PrivPassword is the privacy password for SNMP V3 users.
	// Optional, default is same as AuthPassword.
	PrivPassword *string `json:"privPassword,omitempty"`

	// PrivPrototol is the privacy protocol for SNMP V3 users.
	// Optional, default is DES.
	PrivProtocol *int32 `json:"privProtocol,omitempty"`

	// SecurityLevel is the SNMP V3 security level.
	// It can be authNoPriv, noPriv, and authPriv.
	// Optional, default is authNoPriv.
	SecurityLevel *int32 `json:"securityLevel,omitempty"`

	// UserName is the user name to access SNMP V2 or SNMP V3 agent.
	// Mandatory, and default is cohesityV2Public for SNMP V2,
	// cohesityV3Public for SNMP V3.
	UserName *string `json:"userName,omitempty"`

	// UserType is the SNMP user type, can be read-only user, read/write user,
	// or trap users.
	// Mandatory, default is is read-only user.
	Usertype *int32 `json:"usertype,omitempty"`
}

// Validate validates this snmp user
func (m *SnmpUser) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this snmp user based on context it is used
func (m *SnmpUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnmpUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnmpUser) UnmarshalBinary(b []byte) error {
	var res SnmpUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
