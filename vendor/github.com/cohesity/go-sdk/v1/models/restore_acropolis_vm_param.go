// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreAcropolisVMParam Message to capture the info of a particular Acropolis VM being restored.
//
// swagger:model RestoreAcropolisVMParam
type RestoreAcropolisVMParam struct {

	// If specified, this field defines the info of the snapshot that is known
	// to be present on both Acropolis and Cohesity cluster. We can compute the
	// changed blocks between the snapshot to be restored and this reference
	// snapshot and thus push only changed blocks to the Acropolis cluster for
	// fast/incremental recovery.
	// If this field is not specified, Cohesity cluster will push all the VM
	// snapshot data back to the Acropolis cluster.
	BaseCbtSnapshotInfoProto *SnapshotInfoProto `json:"baseCbtSnapshotInfoProto,omitempty"`

	// network config
	NetworkConfig *RestoreAcropolisVMParamNetworkConfigInfo `json:"networkConfig,omitempty"`
}

// Validate validates this restore acropolis VM param
func (m *RestoreAcropolisVMParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCbtSnapshotInfoProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAcropolisVMParam) validateBaseCbtSnapshotInfoProto(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseCbtSnapshotInfoProto) { // not required
		return nil
	}

	if m.BaseCbtSnapshotInfoProto != nil {
		if err := m.BaseCbtSnapshotInfoProto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseCbtSnapshotInfoProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseCbtSnapshotInfoProto")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAcropolisVMParam) validateNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkConfig) { // not required
		return nil
	}

	if m.NetworkConfig != nil {
		if err := m.NetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore acropolis VM param based on the context it is used
func (m *RestoreAcropolisVMParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseCbtSnapshotInfoProto(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAcropolisVMParam) contextValidateBaseCbtSnapshotInfoProto(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseCbtSnapshotInfoProto != nil {

		if swag.IsZero(m.BaseCbtSnapshotInfoProto) { // not required
			return nil
		}

		if err := m.BaseCbtSnapshotInfoProto.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseCbtSnapshotInfoProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseCbtSnapshotInfoProto")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAcropolisVMParam) contextValidateNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkConfig != nil {

		if swag.IsZero(m.NetworkConfig) { // not required
			return nil
		}

		if err := m.NetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreAcropolisVMParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreAcropolisVMParam) UnmarshalBinary(b []byte) error {
	var res RestoreAcropolisVMParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
