// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateAzureCredentials Message that encapsulates credentials to authenticate while invoking REST
// API calls to Azure.
//
// Reference: https://azure.microsoft.com/en-us/documentation/articles/
// resource-group-create-service-principal-portal/
//
// swagger:model PrivateAzureCredentials
type PrivateAzureCredentials struct {

	// Value of the active directory application id generated using the URL
	// mentioned above.
	ApplicationID *string `json:"applicationId,omitempty"`

	// Value of the active directory application key generated using the URL
	// mentioned above.
	ApplicationKey *string `json:"applicationKey,omitempty"`

	// Represents the list of applications to be used to fetch a source.
	Applications []*AzureApplication `json:"applications"`

	// Authentication method to use while communicating with Azure.
	AuthMethod *int32 `json:"authMethod,omitempty"`

	// Azure stack hub domain name for where the given subscription is present.
	AzureStackHubDomainName *string `json:"azureStackHubDomainName,omitempty"`

	// Region in which the Azure Stack will be registered.
	AzureStackRegion *string `json:"azureStackRegion,omitempty"`

	// Encrypted application key.
	EncryptedApplicationKey []uint8 `json:"encryptedApplicationKey"`

	// Managed Identity's client id associated with the Virtual Machine using
	// actions can be performed. Used in case of DMaaS's dataplane clusters.
	ManagedIdentityClientID *string `json:"managedIdentityClientId,omitempty"`

	// Subscription id inside a customer's Azure account. It represents
	// sub-section within the Azure account where a customer allows us to
	// create VMs, storage account etc.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// Represents which type of subscription the credentials belong to. Depending
	// upon the type of subscription, whether Azure Commercial or Azure
	// Government we will need to use different endpoints when talking to various
	// Azure services. Refer to -
	// https://docs.microsoft.com/en-us/azure/azure-government/
	// documentation-government-developer-guide#endpoint-mapping
	SubscriptionType *int32 `json:"subscriptionType,omitempty"`

	// Represents the list of subscriptions to be fetched for a source.
	Subscriptions []*AzureSubscription `json:"subscriptions"`

	// Value of the customer's tenant id in the active directory. Please refer to
	// the above URL for details.
	TenantID *string `json:"tenantId,omitempty"`
}

// Validate validates this private azure credentials
func (m *PrivateAzureCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAzureCredentials) validateApplications(formats strfmt.Registry) error {
	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	for i := 0; i < len(m.Applications); i++ {
		if swag.IsZero(m.Applications[i]) { // not required
			continue
		}

		if m.Applications[i] != nil {
			if err := m.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateAzureCredentials) validateSubscriptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Subscriptions) { // not required
		return nil
	}

	for i := 0; i < len(m.Subscriptions); i++ {
		if swag.IsZero(m.Subscriptions[i]) { // not required
			continue
		}

		if m.Subscriptions[i] != nil {
			if err := m.Subscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this private azure credentials based on the context it is used
func (m *PrivateAzureCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAzureCredentials) contextValidateApplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Applications); i++ {

		if m.Applications[i] != nil {

			if swag.IsZero(m.Applications[i]) { // not required
				return nil
			}

			if err := m.Applications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateAzureCredentials) contextValidateSubscriptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subscriptions); i++ {

		if m.Subscriptions[i] != nil {

			if swag.IsZero(m.Subscriptions[i]) { // not required
				return nil
			}

			if err := m.Subscriptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateAzureCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateAzureCredentials) UnmarshalBinary(b []byte) error {
	var res PrivateAzureCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
