// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationRule Notification Rule
//
// Specifies a rule to notify delivery targets such as sending emails,
// invoking an external api etc based on the alert type, category and
// severity of the generated alert.
//
// swagger:model NotificationRule
type NotificationRule struct {

	// Specifies alert types this rule is applicable to.
	AlertTypeList []int32 `json:"alertTypeList"`

	// Specifies alert categories this rule is applicable to.
	// Specifies the category of an Alert.
	// kDisk - Alert associated with the disk.
	// kNode - Alert associated with general hardware on a specific node.
	// kCluster - Alert associated with general hardware in cluster level.
	// kChassis - Alert associated with the Chassis.
	// kPowerSupply - Alert associated with the power supply.
	// kCPU - Alert associated with the CPU usage.
	// kMemory - Alert associated with the RAM/Memory.
	// kTemperature - Alert associated with the temperature.
	// kFan - Alert associated with the fan.
	// kNIC - Alert associated with network chips and interfaces.
	// kFirmware - Alert associated with the firmware.
	// kNodeHealth - Alert associated with node health status.
	// kOperatingSystem - Alert associated with operating systems.
	// kDataPath - Alert associated with data management in the cluster.
	// kMetadata - Alert associated with metadata management.
	// kIndexing - Alert associated with indexing services.
	// kHelios - Alert associated with Helios.
	// kAppMarketPlace - Alert associated with App MarketPlace.
	// kSystemService -Alert associated with System service apps.
	// kLicense - Alert associated with licensing.
	// kSecurity - Alert associated with security.
	// kUpgrade - Alert associated with upgrade activities.
	// kClusterManagement - Alert associated with cluster management activities.
	// kAuditLog - Alert associated with audit log events.
	// kNetworking - Alert associated with networking issue.
	// kConfiguration - Alert associated with cluster or system configurations.
	// kStorageUsage - Alert associated with the disk/domain/cluster storage usage.
	// kFaultTolerance - Alert associated with the fault tolerance in different levels.
	// kBackupRestore - Alert associated with Backup-Restore job.
	// kArchivalRestore - Alert associated with Archival-Restore job.
	// kRemoteReplication - Alert associated with Replication job.
	// kQuota - Alert associated with Quotas.
	// kCDP - Alert associated with Continuous Data Protection.
	// kViewFailover - Alert associated with view Failover.
	// kDisasterRecovery - Alert associated with Disaster Recovery.
	// kStorageDevice - Alert associated with storage hardware(tape drives & libraries, Fiber HBAs used to attach devices, etc).
	// kStoragePool - Alert associated with storage pools -- logical groupings of similar kinds of storage hardware (disk, tape, etc) into which client data is stored.
	// kGeneralSoftwareFailure - Alert associated with general software failures - that don't fall into any known categories.
	// kAgent - Alert associated with agent based protection workloads.
	Categories []string `json:"categories"`

	// Specifies email addresses to be notified when an alert matching this
	// rule is generated.
	EmailDeliveryTargets []*EmailDeliveryTarget `json:"emailDeliveryTargets"`

	// Specifies id of the alert delivery rule.
	RuleID *int64 `json:"ruleId,omitempty"`

	// Specifies name of the alert delivery rule.
	RuleName *string `json:"ruleName,omitempty"`

	// Specifies alert severity types this rule is applicable to.
	// Specifies the severity level of an Alert.
	// kCritical - Alerts whose severity type is Critical.
	// kWarning - Alerts whose severity type is Warning.
	// kInfo - Alerts whose severity type is Info.
	Severities []string `json:"severities"`

	// Specifies whether SNMP notification to be invoked when an alert matching
	// this rule is generated.
	SnmpEnabled *bool `json:"snmpEnabled,omitempty"`

	// Specifies whether syslog notification to be invoked when an alert matching
	// this rule is generated.
	SyslogEnabled *bool `json:"syslogEnabled,omitempty"`

	// Specifies tenant id this rule is applicable to.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies external api urls to be invoked when an alert matching this
	// rule is generated.
	WebHookDeliveryTargets []*WebHookDeliveryTarget `json:"webHookDeliveryTargets"`
}

// Validate validates this notification rule
func (m *NotificationRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailDeliveryTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebHookDeliveryTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var notificationRuleCategoriesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDisk","kNode","kCluster","kChassis","kPowerSupply","kCPU","kMemory","kTemperature","kFan","kNIC","kFirmware","kNodeHealth","kOperatingSystem","kDataPath","kMetadata","kIndexing","kHelios","kAppMarketPlace","kSystemService","kLicense","kSecurity","kUpgrade","kClusterManagement","kAuditLog","kNetworking","kConfiguration","kStorageUsage","kFaultTolerance","kBackupRestore","kArchivalRestore","kRemoteReplication","kQuota","kCDP","kViewFailover","kDisasterRecovery","kStorageDevice","kStoragePool","kGeneralSoftwareFailure","kAgent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationRuleCategoriesItemsEnum = append(notificationRuleCategoriesItemsEnum, v)
	}
}

func (m *NotificationRule) validateCategoriesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationRuleCategoriesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NotificationRule) validateCategories(formats strfmt.Registry) error {
	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for i := 0; i < len(m.Categories); i++ {

		// value enum
		if err := m.validateCategoriesItemsEnum("categories"+"."+strconv.Itoa(i), "body", m.Categories[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *NotificationRule) validateEmailDeliveryTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailDeliveryTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailDeliveryTargets); i++ {
		if swag.IsZero(m.EmailDeliveryTargets[i]) { // not required
			continue
		}

		if m.EmailDeliveryTargets[i] != nil {
			if err := m.EmailDeliveryTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var notificationRuleSeveritiesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCritical","kWarning","kInfo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationRuleSeveritiesItemsEnum = append(notificationRuleSeveritiesItemsEnum, v)
	}
}

func (m *NotificationRule) validateSeveritiesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationRuleSeveritiesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NotificationRule) validateSeverities(formats strfmt.Registry) error {
	if swag.IsZero(m.Severities) { // not required
		return nil
	}

	for i := 0; i < len(m.Severities); i++ {

		// value enum
		if err := m.validateSeveritiesItemsEnum("severities"+"."+strconv.Itoa(i), "body", m.Severities[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *NotificationRule) validateWebHookDeliveryTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.WebHookDeliveryTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.WebHookDeliveryTargets); i++ {
		if swag.IsZero(m.WebHookDeliveryTargets[i]) { // not required
			continue
		}

		if m.WebHookDeliveryTargets[i] != nil {
			if err := m.WebHookDeliveryTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("webHookDeliveryTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("webHookDeliveryTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this notification rule based on the context it is used
func (m *NotificationRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmailDeliveryTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebHookDeliveryTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationRule) contextValidateEmailDeliveryTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EmailDeliveryTargets); i++ {

		if m.EmailDeliveryTargets[i] != nil {

			if swag.IsZero(m.EmailDeliveryTargets[i]) { // not required
				return nil
			}

			if err := m.EmailDeliveryTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NotificationRule) contextValidateWebHookDeliveryTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WebHookDeliveryTargets); i++ {

		if m.WebHookDeliveryTargets[i] != nil {

			if swag.IsZero(m.WebHookDeliveryTargets[i]) { // not required
				return nil
			}

			if err := m.WebHookDeliveryTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("webHookDeliveryTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("webHookDeliveryTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotificationRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationRule) UnmarshalBinary(b []byte) error {
	var res NotificationRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
