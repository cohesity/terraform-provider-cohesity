// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ViewBoxStats Storage Domain (View Box) Stats.
//
// Provides statistics about the Storage Domain (View Box).
//
// swagger:model ViewBoxStats
type ViewBoxStats struct {

	// Provides the usage statistics for the data stored in the
	// cloud for the Storage Domain (View Box). Performance statistics are not
	// populated.
	CloudUsagePerfStats *UsageAndPerformanceStats `json:"cloudUsagePerfStats,omitempty"`

	// Data Usage Statistics.
	//
	// Specifies the data usage metric of the data stored on the Storage Domain
	// (View Box).
	DataUsageStats *DataUsageStats `json:"dataUsageStats,omitempty"`

	// Specifies the id of the Storage Domain (View Box).
	ID *int64 `json:"id,omitempty"`

	// Provides usage statistics for the locally stored data
	// on the Storage Domain (View Box). Performance statistics are not populated.
	LocalUsagePerfStats *UsageAndPerformanceStats `json:"localUsagePerfStats,omitempty"`

	// Provides the logical usage statistics for the Storage Domain (View Box).
	LogicalStats *LogicalStats `json:"logicalStats,omitempty"`

	// Provides usage and performance statistics for the Storage Domain
	// (View Box)
	// (includes both local and cloud data).
	UsagePerfStats *UsageAndPerformanceStats `json:"usagePerfStats,omitempty"`
}

// Validate validates this view box stats
func (m *ViewBoxStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudUsagePerfStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataUsageStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalUsagePerfStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsagePerfStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewBoxStats) validateCloudUsagePerfStats(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudUsagePerfStats) { // not required
		return nil
	}

	if m.CloudUsagePerfStats != nil {
		if err := m.CloudUsagePerfStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudUsagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudUsagePerfStats")
			}
			return err
		}
	}

	return nil
}

func (m *ViewBoxStats) validateDataUsageStats(formats strfmt.Registry) error {
	if swag.IsZero(m.DataUsageStats) { // not required
		return nil
	}

	if m.DataUsageStats != nil {
		if err := m.DataUsageStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataUsageStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataUsageStats")
			}
			return err
		}
	}

	return nil
}

func (m *ViewBoxStats) validateLocalUsagePerfStats(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalUsagePerfStats) { // not required
		return nil
	}

	if m.LocalUsagePerfStats != nil {
		if err := m.LocalUsagePerfStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localUsagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localUsagePerfStats")
			}
			return err
		}
	}

	return nil
}

func (m *ViewBoxStats) validateLogicalStats(formats strfmt.Registry) error {
	if swag.IsZero(m.LogicalStats) { // not required
		return nil
	}

	if m.LogicalStats != nil {
		if err := m.LogicalStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logicalStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logicalStats")
			}
			return err
		}
	}

	return nil
}

func (m *ViewBoxStats) validateUsagePerfStats(formats strfmt.Registry) error {
	if swag.IsZero(m.UsagePerfStats) { // not required
		return nil
	}

	if m.UsagePerfStats != nil {
		if err := m.UsagePerfStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usagePerfStats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this view box stats based on the context it is used
func (m *ViewBoxStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudUsagePerfStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataUsageStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalUsagePerfStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogicalStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsagePerfStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewBoxStats) contextValidateCloudUsagePerfStats(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudUsagePerfStats != nil {

		if swag.IsZero(m.CloudUsagePerfStats) { // not required
			return nil
		}

		if err := m.CloudUsagePerfStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudUsagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudUsagePerfStats")
			}
			return err
		}
	}

	return nil
}

func (m *ViewBoxStats) contextValidateDataUsageStats(ctx context.Context, formats strfmt.Registry) error {

	if m.DataUsageStats != nil {

		if swag.IsZero(m.DataUsageStats) { // not required
			return nil
		}

		if err := m.DataUsageStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataUsageStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataUsageStats")
			}
			return err
		}
	}

	return nil
}

func (m *ViewBoxStats) contextValidateLocalUsagePerfStats(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalUsagePerfStats != nil {

		if swag.IsZero(m.LocalUsagePerfStats) { // not required
			return nil
		}

		if err := m.LocalUsagePerfStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localUsagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localUsagePerfStats")
			}
			return err
		}
	}

	return nil
}

func (m *ViewBoxStats) contextValidateLogicalStats(ctx context.Context, formats strfmt.Registry) error {

	if m.LogicalStats != nil {

		if swag.IsZero(m.LogicalStats) { // not required
			return nil
		}

		if err := m.LogicalStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logicalStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logicalStats")
			}
			return err
		}
	}

	return nil
}

func (m *ViewBoxStats) contextValidateUsagePerfStats(ctx context.Context, formats strfmt.Registry) error {

	if m.UsagePerfStats != nil {

		if swag.IsZero(m.UsagePerfStats) { // not required
			return nil
		}

		if err := m.UsagePerfStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usagePerfStats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewBoxStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewBoxStats) UnmarshalBinary(b []byte) error {
	var res ViewBoxStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
