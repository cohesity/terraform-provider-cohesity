// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverDisksTaskStateProto Persistent state for a "recover disks" restore task.
//
// swagger:model RecoverDisksTaskStateProto
type RecoverDisksTaskStateProto struct {

	// Captures the details of the recover virtual disk info.
	RecoverVirtualDiskInfo *RecoverVirtualDiskInfoProto `json:"recoverVirtualDiskInfo,omitempty"`

	// Captures the original parameters from Iris.
	RecoverVirtualDiskParams *RecoverVirtualDiskParams `json:"recoverVirtualDiskParams,omitempty"`
}

// Validate validates this recover disks task state proto
func (m *RecoverDisksTaskStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoverVirtualDiskInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverVirtualDiskParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverDisksTaskStateProto) validateRecoverVirtualDiskInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverVirtualDiskInfo) { // not required
		return nil
	}

	if m.RecoverVirtualDiskInfo != nil {
		if err := m.RecoverVirtualDiskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVirtualDiskInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVirtualDiskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverDisksTaskStateProto) validateRecoverVirtualDiskParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverVirtualDiskParams) { // not required
		return nil
	}

	if m.RecoverVirtualDiskParams != nil {
		if err := m.RecoverVirtualDiskParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVirtualDiskParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVirtualDiskParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover disks task state proto based on the context it is used
func (m *RecoverDisksTaskStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecoverVirtualDiskInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverVirtualDiskParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverDisksTaskStateProto) contextValidateRecoverVirtualDiskInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverVirtualDiskInfo != nil {

		if swag.IsZero(m.RecoverVirtualDiskInfo) { // not required
			return nil
		}

		if err := m.RecoverVirtualDiskInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVirtualDiskInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVirtualDiskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverDisksTaskStateProto) contextValidateRecoverVirtualDiskParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverVirtualDiskParams != nil {

		if swag.IsZero(m.RecoverVirtualDiskParams) { // not required
			return nil
		}

		if err := m.RecoverVirtualDiskParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVirtualDiskParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVirtualDiskParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverDisksTaskStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverDisksTaskStateProto) UnmarshalBinary(b []byte) error {
	var res RecoverDisksTaskStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
