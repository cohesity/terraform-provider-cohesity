// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AlertingPolicyProto alerting policy proto
//
// swagger:model AlertingPolicyProto
type AlertingPolicyProto struct {

	// The delivery targets to be alerted.
	DeliveryTargetVec []*DeliveryRuleProtoDeliveryTarget `json:"deliveryTargetVec"`

	// The email addresses to send alerts to.
	// This field has been deprecated in favor of the field delivery_target_vec.
	// The clients should take care to ensure that the emails stored in here
	// are migrated to that field, or else utilise both the fields when trying
	// to obtain the complete list of delivery targets.
	Emails []string `json:"emails"`

	// 'policy' is declared as int32 because ORing the enums will generate values
	// which are invalid as enums. Protobuf doesn't allow those invalid enums
	// to be set.
	Policy *int32 `json:"policy,omitempty"`

	// Raise per object alert for failures.
	RaiseObjectLevelFailureAlert *bool `json:"raiseObjectLevelFailureAlert,omitempty"`

	// Raise per object alert for failures after each backup attempt.
	RaiseObjectLevelFailureAlertAfterEachAttempt *bool `json:"raiseObjectLevelFailureAlertAfterEachAttempt,omitempty"`

	// Raise per object alert for failures after last backup attempt.
	RaiseObjectLevelFailureAlertAfterLastAttempt *bool `json:"raiseObjectLevelFailureAlertAfterLastAttempt,omitempty"`
}

// Validate validates this alerting policy proto
func (m *AlertingPolicyProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeliveryTargetVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertingPolicyProto) validateDeliveryTargetVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryTargetVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DeliveryTargetVec); i++ {
		if swag.IsZero(m.DeliveryTargetVec[i]) { // not required
			continue
		}

		if m.DeliveryTargetVec[i] != nil {
			if err := m.DeliveryTargetVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deliveryTargetVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deliveryTargetVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this alerting policy proto based on the context it is used
func (m *AlertingPolicyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeliveryTargetVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertingPolicyProto) contextValidateDeliveryTargetVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeliveryTargetVec); i++ {

		if m.DeliveryTargetVec[i] != nil {

			if swag.IsZero(m.DeliveryTargetVec[i]) { // not required
				return nil
			}

			if err := m.DeliveryTargetVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deliveryTargetVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deliveryTargetVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertingPolicyProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertingPolicyProto) UnmarshalBinary(b []byte) error {
	var res AlertingPolicyProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
