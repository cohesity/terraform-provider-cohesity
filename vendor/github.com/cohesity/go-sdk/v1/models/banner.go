// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Banner Banner is used for storing the banner content in scribe and also for
// transferring it over the wire.
//
// swagger:model Banner
type Banner struct {

	// Specifies a banner_id which can uniquely identify a banner. This may be
	// the cluster_id, or the tenant_id, or the group_id, or the user SID etc.
	// If this field is nil, the it is assumed to be the cluster_id.
	// The content is stored against this 'row' in Scribe.
	BannerID *string `json:"bannerId,omitempty"`

	// Specifies the content of the banner.
	Content *string `json:"content,omitempty"`

	// createdTimeMsecs field is deprecated.
	// Timestamp at which banner was created.
	CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

	// description field is deprecated.
	// Specifies the description of this banner.
	Description *string `json:"description,omitempty"`

	// lastUpdatedTimeMsecs field is deprecated.
	// Timestamp at which banner was last updated.
	LastUpdatedTimeMsecs *int64 `json:"lastUpdatedTimeMsecs,omitempty"`
}

// Validate validates this banner
func (m *Banner) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this banner based on context it is used
func (m *Banner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Banner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Banner) UnmarshalBinary(b []byte) error {
	var res Banner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
