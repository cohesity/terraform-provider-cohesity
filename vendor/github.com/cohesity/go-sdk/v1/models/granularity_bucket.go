// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GranularityBucket Granularity Bucket.
//
// Message that specifies the frequency granularity at which to copy the
// snapshots from a backup job's runs.
//
// swagger:model GranularityBucket
type GranularityBucket struct {

	// Date information for granularity of type kExactDates.
	// Sequence of specific dates on which snapshots need to be applied.
	ExactDates *GranularityBucketExactDatesInfo `json:"exactDates,omitempty"`

	// The base time period granularity that determines the frequency at which
	// backup run snapshots will be copied.
	//
	// NOTE: The granularity (in combination with the 'multiplier' field below
	// but for the case of kExactDates) that is specified should be such that
	// the frequency of copying snapshots is lower than the frequency of
	// actually creating the snapshots (i.e.,lower than the frequency of the
	// backup job runs).
	Granularity *int32 `json:"granularity,omitempty"`

	// A factor to multiply the granularity by.
	// For example, if this is 2 and the granularity is kHour, then snapshots
	// from the first eligible run from every 2 hour period will be copied.
	Multiplier *int32 `json:"multiplier,omitempty"`
}

// Validate validates this granularity bucket
func (m *GranularityBucket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExactDates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GranularityBucket) validateExactDates(formats strfmt.Registry) error {
	if swag.IsZero(m.ExactDates) { // not required
		return nil
	}

	if m.ExactDates != nil {
		if err := m.ExactDates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exactDates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exactDates")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this granularity bucket based on the context it is used
func (m *GranularityBucket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExactDates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GranularityBucket) contextValidateExactDates(ctx context.Context, formats strfmt.Registry) error {

	if m.ExactDates != nil {

		if swag.IsZero(m.ExactDates) { // not required
			return nil
		}

		if err := m.ExactDates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exactDates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exactDates")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GranularityBucket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GranularityBucket) UnmarshalBinary(b []byte) error {
	var res GranularityBucket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
