// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoredObjectNetworkConfigProto restored object network config proto
//
// swagger:model RestoredObjectNetworkConfigProto
type RestoredObjectNetworkConfigProto struct {

	// If this is set to true, then the network will be detached from the
	// recovered or cloned VMs.
	// NOTE: If this is set to true, then all the following fields will be
	// ignored.
	DetachNetwork *bool `json:"detachNetwork,omitempty"`

	// This can be set to true to indicate that the attached network should be
	// left in disabled state.
	DisableNetwork *bool `json:"disableNetwork,omitempty"`

	// The network mappings to be applied to the target object.
	Mappings []*NetworkMappingProto `json:"mappings"`

	// The network entity (i.e, either a standard switch port group or a
	// distributed port group in a VMware env) that will attached to the restored
	// object.
	NetworkEntity *EntityProto `json:"networkEntity,omitempty"`

	// If this is true and we are attaching to a new network entity, then the
	// VM's MAC address will be preserved on the new network.
	PreserveMacAddressOnNewNetwork *bool `json:"preserveMacAddressOnNewNetwork,omitempty"`

	// This will be populated for kVirtualDatacenter.
	VcdNetwork *OrgVDCNetwork `json:"vcdNetwork,omitempty"`

	// The VNicProfile that will be attached to the restored object.
	VnicEntity *EntityProto `json:"vnicEntity,omitempty"`
}

// Validate validates this restored object network config proto
func (m *RestoredObjectNetworkConfigProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVnicEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoredObjectNetworkConfigProto) validateMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.Mappings) { // not required
		return nil
	}

	for i := 0; i < len(m.Mappings); i++ {
		if swag.IsZero(m.Mappings[i]) { // not required
			continue
		}

		if m.Mappings[i] != nil {
			if err := m.Mappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoredObjectNetworkConfigProto) validateNetworkEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkEntity) { // not required
		return nil
	}

	if m.NetworkEntity != nil {
		if err := m.NetworkEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectNetworkConfigProto) validateVcdNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdNetwork) { // not required
		return nil
	}

	if m.VcdNetwork != nil {
		if err := m.VcdNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectNetworkConfigProto) validateVnicEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.VnicEntity) { // not required
		return nil
	}

	if m.VnicEntity != nil {
		if err := m.VnicEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vnicEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vnicEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restored object network config proto based on the context it is used
func (m *RestoredObjectNetworkConfigProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVnicEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoredObjectNetworkConfigProto) contextValidateMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Mappings); i++ {

		if m.Mappings[i] != nil {

			if swag.IsZero(m.Mappings[i]) { // not required
				return nil
			}

			if err := m.Mappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoredObjectNetworkConfigProto) contextValidateNetworkEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkEntity != nil {

		if swag.IsZero(m.NetworkEntity) { // not required
			return nil
		}

		if err := m.NetworkEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectNetworkConfigProto) contextValidateVcdNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdNetwork != nil {

		if swag.IsZero(m.VcdNetwork) { // not required
			return nil
		}

		if err := m.VcdNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectNetworkConfigProto) contextValidateVnicEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.VnicEntity != nil {

		if swag.IsZero(m.VnicEntity) { // not required
			return nil
		}

		if err := m.VnicEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vnicEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vnicEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoredObjectNetworkConfigProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoredObjectNetworkConfigProto) UnmarshalBinary(b []byte) error {
	var res RestoredObjectNetworkConfigProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
