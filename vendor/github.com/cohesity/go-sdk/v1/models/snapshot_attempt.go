// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SnapshotAttempt Snapshot Attempt.
//
// Specifies information about a single snapshot.
//
// swagger:model SnapshotAttempt
type SnapshotAttempt struct {

	// Specifies the number of the attempts made by the Job Run
	// to capture a snapshot of the object. For example, if an snapshot
	// is successfully captured after three attempts, this field equals 3.
	AttemptNumber *int64 `json:"attemptNumber,omitempty"`

	// Specifies the id of the Job Run that captured the snapshot.
	JobRunID *int64 `json:"jobRunId,omitempty"`

	// Specifies the time when the Job Run starts capturing a snapshot.
	// Specified as a Unix epoch Timestamp (in microseconds).
	StartedTimeUsecs *int64 `json:"startedTimeUsecs,omitempty"`
}

// Validate validates this snapshot attempt
func (m *SnapshotAttempt) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this snapshot attempt based on context it is used
func (m *SnapshotAttempt) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotAttempt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotAttempt) UnmarshalBinary(b []byte) error {
	var res SnapshotAttempt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
