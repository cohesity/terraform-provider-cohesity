// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExtendedRetentionPolicyProto Message that specifies additional retention policies to apply to backup
// snapshots.
//
// swagger:model ExtendedRetentionPolicyProto
type ExtendedRetentionPolicyProto struct {

	// The backup type to which this extended retention applies to. If this is
	// not set, the extended retention will be applicable to all non-log backup
	// types.
	//
	// Currently, the only value that can be set here is kFull (Magneto will
	// return an error if it is set to anything else).
	BackupType *int32 `json:"backupType,omitempty"`

	// If this is false, then only snapshots from the first completely successful
	// run in the given time granularity will be considered eligible for this
	// extended retention policy. If this is true, then snapshots from the first
	// partially successful run will also be considered eligible.
	CopyPartiallySuccessfulRun *bool `json:"copyPartiallySuccessfulRun,omitempty"`

	// The granularity bucket frequency which determines the backup snapshots
	// that this extended retention policy applies to.
	GranularityBucket *GranularityBucket `json:"granularityBucket,omitempty"`

	// This id uniquely identifies this entry in the ProtectionPolicyProto.
	//
	// If this message is from global policy, this id is generated by Helios.
	// Otherwise, it is generated by Iris. Magneto treats this as an opaque
	// identifier.
	ID *string `json:"id,omitempty"`

	// The retention that applies to the backup snapshots matched by the above
	// granularity bucket.
	RetentionPolicy *RetentionPolicyProto `json:"retentionPolicy,omitempty"`
}

// Validate validates this extended retention policy proto
func (m *ExtendedRetentionPolicyProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGranularityBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtendedRetentionPolicyProto) validateGranularityBucket(formats strfmt.Registry) error {
	if swag.IsZero(m.GranularityBucket) { // not required
		return nil
	}

	if m.GranularityBucket != nil {
		if err := m.GranularityBucket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("granularityBucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("granularityBucket")
			}
			return err
		}
	}

	return nil
}

func (m *ExtendedRetentionPolicyProto) validateRetentionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.RetentionPolicy) { // not required
		return nil
	}

	if m.RetentionPolicy != nil {
		if err := m.RetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retentionPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this extended retention policy proto based on the context it is used
func (m *ExtendedRetentionPolicyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGranularityBucket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetentionPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtendedRetentionPolicyProto) contextValidateGranularityBucket(ctx context.Context, formats strfmt.Registry) error {

	if m.GranularityBucket != nil {

		if swag.IsZero(m.GranularityBucket) { // not required
			return nil
		}

		if err := m.GranularityBucket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("granularityBucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("granularityBucket")
			}
			return err
		}
	}

	return nil
}

func (m *ExtendedRetentionPolicyProto) contextValidateRetentionPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.RetentionPolicy != nil {

		if swag.IsZero(m.RetentionPolicy) { // not required
			return nil
		}

		if err := m.RetentionPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retentionPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtendedRetentionPolicyProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtendedRetentionPolicyProto) UnmarshalBinary(b []byte) error {
	var res ExtendedRetentionPolicyProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
