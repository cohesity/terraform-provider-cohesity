// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserInformation User Information.
//
// A message to encapsulate information about the user who made the request.
// Request should be filtered by these fields if specified so that only the
// objects that the user is permissioned for are returned. If both sid_vec &
// tenant_id are specified then an intersection of respective results should
// be returned.
//
// swagger:model UserInformation
type UserInformation struct {

	// Whether objects owned by subtenants should be returned. This would
	// require a prefix search with the passed tenant_id.
	// All tenants are considered sub-tenants of the admin. For GET requests, if
	// tenant id is empty(admin user is querying) and if this flag is false, we
	// will only return untagged objects. If it is true, we will return
	// everything.
	IncludeSubtenantObjects *bool `json:"includeSubtenantObjects,omitempty"`

	// Specifies the KeyValuePair that client (eg. Iris) wants to persist along
	// with the corresponding (soon-to-be-created) Pulse task for the current
	// action. Eg. pulse_attribute_vec can drive user notifications by
	// associating a Pulse Task with user SID and later Pulse can be searched by
	// client specified Sid to get all finished tasks for the logged in user.
	PulseAttributeVec []*KeyValuePair `json:"pulseAttributeVec"`

	// If specified, only the objects associated with these SIDs should be
	// returned.
	SidVec []*ClusterConfigProtoSID `json:"sidVec"`

	// If specified, only the objects associated with this tenant should be
	// returned. A given tenant ID is always a prefix of the ids of its
	// subtenants. Eg. if tenant_id of cluster admin is empty string then it will
	// be a prefix match for all the tenants on the cluster.
	TenantIDVec []string `json:"tenantIdVec"`
}

// Validate validates this user information
func (m *UserInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePulseAttributeVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSidVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserInformation) validatePulseAttributeVec(formats strfmt.Registry) error {
	if swag.IsZero(m.PulseAttributeVec) { // not required
		return nil
	}

	for i := 0; i < len(m.PulseAttributeVec); i++ {
		if swag.IsZero(m.PulseAttributeVec[i]) { // not required
			continue
		}

		if m.PulseAttributeVec[i] != nil {
			if err := m.PulseAttributeVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pulseAttributeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pulseAttributeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserInformation) validateSidVec(formats strfmt.Registry) error {
	if swag.IsZero(m.SidVec) { // not required
		return nil
	}

	for i := 0; i < len(m.SidVec); i++ {
		if swag.IsZero(m.SidVec[i]) { // not required
			continue
		}

		if m.SidVec[i] != nil {
			if err := m.SidVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sidVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sidVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user information based on the context it is used
func (m *UserInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePulseAttributeVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSidVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserInformation) contextValidatePulseAttributeVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PulseAttributeVec); i++ {

		if m.PulseAttributeVec[i] != nil {

			if swag.IsZero(m.PulseAttributeVec[i]) { // not required
				return nil
			}

			if err := m.PulseAttributeVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pulseAttributeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pulseAttributeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserInformation) contextValidateSidVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SidVec); i++ {

		if m.SidVec[i] != nil {

			if swag.IsZero(m.SidVec[i]) { // not required
				return nil
			}

			if err := m.SidVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sidVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sidVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserInformation) UnmarshalBinary(b []byte) error {
	var res UserInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
