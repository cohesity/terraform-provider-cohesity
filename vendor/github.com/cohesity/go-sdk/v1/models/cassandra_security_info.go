// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CassandraSecurityInfo CassandraSecurityInfo Cassandra security info.
//
// Specifies an Object containing information on Cassandra security.
//
// swagger:model CassandraSecurityInfo
type CassandraSecurityInfo struct {

	// Is Cassandra authentication required ?
	CassandraAuthRequired *bool `json:"cassandraAuthRequired,omitempty"`

	// Cassandra Authentication type.
	// Enum: [PASSWORD KERBEROS LDAP]
	// Specifies the Cassandra auth type.
	// 'PASSWORD'
	// 'KERBEROS'
	// 'LDAP'
	// Enum: ["PASSWORD","KERBEROS","LDAP"]
	CassandraAuthType *string `json:"cassandraAuthType,omitempty"`

	// Cassandra Authenticator/Authorizer.
	CassandraAuthorizer *string `json:"cassandraAuthorizer,omitempty"`

	// Is Client Encryption enabled for this cluster ?
	ClientEncryption *bool `json:"clientEncryption,omitempty"`

	// Is DSE Authorization enabled for this cluster ?
	DseAuthorization *bool `json:"dseAuthorization,omitempty"`

	// Is 'Server encryption request client authentication' enabled for this cluster ?
	ServerEncryptionReqClientAuth *bool `json:"serverEncryptionReqClientAuth,omitempty"`

	// 'Server internal node Encryption' type for this cluster.
	ServerInternodeEncryptionType *string `json:"serverInternodeEncryptionType,omitempty"`
}

// Validate validates this cassandra security info
func (m *CassandraSecurityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCassandraAuthType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cassandraSecurityInfoTypeCassandraAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PASSWORD","KERBEROS","LDAP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cassandraSecurityInfoTypeCassandraAuthTypePropEnum = append(cassandraSecurityInfoTypeCassandraAuthTypePropEnum, v)
	}
}

const (

	// CassandraSecurityInfoCassandraAuthTypePASSWORD captures enum value "PASSWORD"
	CassandraSecurityInfoCassandraAuthTypePASSWORD string = "PASSWORD"

	// CassandraSecurityInfoCassandraAuthTypeKERBEROS captures enum value "KERBEROS"
	CassandraSecurityInfoCassandraAuthTypeKERBEROS string = "KERBEROS"

	// CassandraSecurityInfoCassandraAuthTypeLDAP captures enum value "LDAP"
	CassandraSecurityInfoCassandraAuthTypeLDAP string = "LDAP"
)

// prop value enum
func (m *CassandraSecurityInfo) validateCassandraAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cassandraSecurityInfoTypeCassandraAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CassandraSecurityInfo) validateCassandraAuthType(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraAuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCassandraAuthTypeEnum("cassandraAuthType", "body", *m.CassandraAuthType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cassandra security info based on context it is used
func (m *CassandraSecurityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CassandraSecurityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraSecurityInfo) UnmarshalBinary(b []byte) error {
	var res CassandraSecurityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
