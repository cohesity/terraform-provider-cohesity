// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UdaBackupParams Message contains connection params and other info generated
// by magneto for UDA backup.
//
// swagger:model UdaBackupParams
type UdaBackupParams struct {

	// Optional param, used to attach a temprory disk for the backup. It will be
	// set for Azure SQL backup.
	DiskAttachParams *DiskAttachParams `json:"diskAttachParams,omitempty"`

	// Expansion of entity types specified in
	// object_types_excluded_from_expansion will get skipped but are needed
	// for indexing.
	ExpandedEntities []*PrivateEntityProto `json:"expandedEntities"`

	// This field specifies whether this is a full or regular backup
	// of the job/task.
	// Set from BackupJobTaskStateBaseProto::is_full_backup field.
	IsFullBackup *bool `json:"isFullBackup,omitempty"`

	// Parents of protected entities, needed for indexing.
	ParentEntities []*PrivateEntityProto `json:"parentEntities"`

	// Includes connection parameters and info saved during register.
	RegisteredEntityUdaParams *RegisteredEntityUdaParams `json:"registeredEntityUdaParams,omitempty"`

	// The retention mins for this protection job.
	RetentionMins *int64 `json:"retentionMins,omitempty"`

	// Run parameters, used for the externally triggered runs.
	RunParams *UdaBackupRunParams `json:"runParams,omitempty"`
}

// Validate validates this uda backup params
func (m *UdaBackupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskAttachParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpandedEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredEntityUdaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaBackupParams) validateDiskAttachParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskAttachParams) { // not required
		return nil
	}

	if m.DiskAttachParams != nil {
		if err := m.DiskAttachParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskAttachParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskAttachParams")
			}
			return err
		}
	}

	return nil
}

func (m *UdaBackupParams) validateExpandedEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpandedEntities) { // not required
		return nil
	}

	for i := 0; i < len(m.ExpandedEntities); i++ {
		if swag.IsZero(m.ExpandedEntities[i]) { // not required
			continue
		}

		if m.ExpandedEntities[i] != nil {
			if err := m.ExpandedEntities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expandedEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("expandedEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaBackupParams) validateParentEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentEntities) { // not required
		return nil
	}

	for i := 0; i < len(m.ParentEntities); i++ {
		if swag.IsZero(m.ParentEntities[i]) { // not required
			continue
		}

		if m.ParentEntities[i] != nil {
			if err := m.ParentEntities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parentEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parentEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaBackupParams) validateRegisteredEntityUdaParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredEntityUdaParams) { // not required
		return nil
	}

	if m.RegisteredEntityUdaParams != nil {
		if err := m.RegisteredEntityUdaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredEntityUdaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredEntityUdaParams")
			}
			return err
		}
	}

	return nil
}

func (m *UdaBackupParams) validateRunParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RunParams) { // not required
		return nil
	}

	if m.RunParams != nil {
		if err := m.RunParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this uda backup params based on the context it is used
func (m *UdaBackupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskAttachParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpandedEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredEntityUdaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaBackupParams) contextValidateDiskAttachParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskAttachParams != nil {

		if swag.IsZero(m.DiskAttachParams) { // not required
			return nil
		}

		if err := m.DiskAttachParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskAttachParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskAttachParams")
			}
			return err
		}
	}

	return nil
}

func (m *UdaBackupParams) contextValidateExpandedEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExpandedEntities); i++ {

		if m.ExpandedEntities[i] != nil {

			if swag.IsZero(m.ExpandedEntities[i]) { // not required
				return nil
			}

			if err := m.ExpandedEntities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expandedEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("expandedEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaBackupParams) contextValidateParentEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ParentEntities); i++ {

		if m.ParentEntities[i] != nil {

			if swag.IsZero(m.ParentEntities[i]) { // not required
				return nil
			}

			if err := m.ParentEntities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parentEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parentEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaBackupParams) contextValidateRegisteredEntityUdaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RegisteredEntityUdaParams != nil {

		if swag.IsZero(m.RegisteredEntityUdaParams) { // not required
			return nil
		}

		if err := m.RegisteredEntityUdaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredEntityUdaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredEntityUdaParams")
			}
			return err
		}
	}

	return nil
}

func (m *UdaBackupParams) contextValidateRunParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RunParams != nil {

		if swag.IsZero(m.RunParams) { // not required
			return nil
		}

		if err := m.RunParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UdaBackupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaBackupParams) UnmarshalBinary(b []byte) error {
	var res UdaBackupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
