// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataMigrationPolicy Data Migration Policy.
//
// Specifies settings for data migration in NAS environment. This also
// specifies the retention policy that should be applied to files after they
// have been moved to cohesity cluster.
//
// swagger:model DataMigrationPolicy
type DataMigrationPolicy struct {

	// Specifies how many days to retain Snapshots on the Cohesity Cluster.
	DaysToKeep *int64 `json:"daysToKeep,omitempty"`

	// Specifies schedule for the data migration job.
	SchedulingPolicy *SchedulingPolicy `json:"schedulingPolicy,omitempty"`

	// Specifies WORM retention type for the files. When a WORM retention
	// type is specified, the files will be kept until the maximum of the
	// retention time. During that time, the files cannot be deleted.
	// 'kNone' implies there is no WORM retention set.
	// 'kCompliance' implies WORM retention is set for compliance reason.
	// 'kAdministrative' implies WORM retention is set for administrative purposes.
	// Enum: ["kNone","kCompliance","kAdministrative"]
	WormRetentionType *string `json:"wormRetentionType,omitempty"`
}

// Validate validates this data migration policy
func (m *DataMigrationPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchedulingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWormRetentionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataMigrationPolicy) validateSchedulingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.SchedulingPolicy) { // not required
		return nil
	}

	if m.SchedulingPolicy != nil {
		if err := m.SchedulingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedulingPolicy")
			}
			return err
		}
	}

	return nil
}

var dataMigrationPolicyTypeWormRetentionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNone","kCompliance","kAdministrative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataMigrationPolicyTypeWormRetentionTypePropEnum = append(dataMigrationPolicyTypeWormRetentionTypePropEnum, v)
	}
}

const (

	// DataMigrationPolicyWormRetentionTypeKNone captures enum value "kNone"
	DataMigrationPolicyWormRetentionTypeKNone string = "kNone"

	// DataMigrationPolicyWormRetentionTypeKCompliance captures enum value "kCompliance"
	DataMigrationPolicyWormRetentionTypeKCompliance string = "kCompliance"

	// DataMigrationPolicyWormRetentionTypeKAdministrative captures enum value "kAdministrative"
	DataMigrationPolicyWormRetentionTypeKAdministrative string = "kAdministrative"
)

// prop value enum
func (m *DataMigrationPolicy) validateWormRetentionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataMigrationPolicyTypeWormRetentionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataMigrationPolicy) validateWormRetentionType(formats strfmt.Registry) error {
	if swag.IsZero(m.WormRetentionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateWormRetentionTypeEnum("wormRetentionType", "body", *m.WormRetentionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data migration policy based on the context it is used
func (m *DataMigrationPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSchedulingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataMigrationPolicy) contextValidateSchedulingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.SchedulingPolicy != nil {

		if swag.IsZero(m.SchedulingPolicy) { // not required
			return nil
		}

		if err := m.SchedulingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedulingPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataMigrationPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataMigrationPolicy) UnmarshalBinary(b []byte) error {
	var res DataMigrationPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
