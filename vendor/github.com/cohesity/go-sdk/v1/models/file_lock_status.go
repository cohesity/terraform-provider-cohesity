// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileLockStatus File Lock Status.
//
// Specifies the information of lock status for a file.
//
// swagger:model FileLockStatus
type FileLockStatus struct {

	// Specifies a expiry timestamp in milliseconds until the file is locked.
	ExpiryTimestampMsecs *int64 `json:"expiryTimestampMsecs,omitempty"`

	// Specifies a override timestamp in milliseconds when an expired file is
	// kept on hold.
	HoldTimestampMsecs *int64 `json:"holdTimestampMsecs,omitempty"`

	// Specifies the timestamp at which the file was locked.
	LockTimestampMsecs *int64 `json:"lockTimestampMsecs,omitempty"`

	// Specifies the mode of the file lock. 'kCompliance', 'kEnterprise'.
	// A lock mode of a file in a view can be in one of the following:
	//
	// 'kCompliance': Default mode of datalock, in this mode, Data Security Admin
	// cannot modify/delete this view when datalock is in effect. Data Security
	// Admin can delete this view when datalock is expired.
	// 'kEnterprise' : In this mode, Data Security Admin can change view name or
	// delete view when datalock is in effect. Datalock in this mode can be
	// upgraded to 'kCompliance' mode.
	// Enum: ["kCompliance","kEnterprise"]
	Mode *string `json:"mode,omitempty"`

	// Specifies the lock state of the file.
	State *int32 `json:"state,omitempty"`
}

// Validate validates this file lock status
func (m *FileLockStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fileLockStatusTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCompliance","kEnterprise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileLockStatusTypeModePropEnum = append(fileLockStatusTypeModePropEnum, v)
	}
}

const (

	// FileLockStatusModeKCompliance captures enum value "kCompliance"
	FileLockStatusModeKCompliance string = "kCompliance"

	// FileLockStatusModeKEnterprise captures enum value "kEnterprise"
	FileLockStatusModeKEnterprise string = "kEnterprise"
)

// prop value enum
func (m *FileLockStatus) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fileLockStatusTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FileLockStatus) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this file lock status based on context it is used
func (m *FileLockStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FileLockStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileLockStatus) UnmarshalBinary(b []byte) error {
	var res FileLockStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
