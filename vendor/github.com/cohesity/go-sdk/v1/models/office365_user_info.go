// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Office365UserInfo Office 365 User Info.
//
// Specifies information about an Office365 user.
//
// swagger:model Office365UserInfo
type Office365UserInfo struct {

	// Specifies the city in which the Office365 user is located.
	City *string `json:"city,omitempty"`

	// Specifies the country/region in which the Office365 user is located.
	Country *string `json:"country,omitempty"`

	// Specifies the department within the enterprise of the Office365 user.
	Department *string `json:"department,omitempty"`

	// Specifies the designation of the Office365 user.
	Designation *string `json:"designation,omitempty"`

	// Specifies the MS Graph UUID for the given user entity.
	GraphUUID *string `json:"graphUuid,omitempty"`

	// Specifies the Group entities which hold this user entity as its member.
	GroupMembershipInfoList []*GroupMembershipInfo `json:"groupMembershipInfoList"`

	// Specifies whether the Office365 user has a mailbox associated.
	IsMailboxEnabled *bool `json:"isMailboxEnabled,omitempty"`

	// Specifies whether the Office365 user has a OneDrive associated.
	IsOneDriveEnabled *bool `json:"isOneDriveEnabled,omitempty"`

	// Specifies the size of the Outlook Mailbox associated with this Office365
	// entity.
	MailboxSize *int64 `json:"mailboxSize,omitempty"`

	// Specifies the type of mailbox associated
	// Specifies the type of user mailbox.
	// 'kUserMailbox' indicates that the user has been assigned
	// an individual mailbox.
	// 'kSharedMailbox' indicates that the user has been assigned a shared mailbox.
	// Enum: ["kUserMailbox","kSharedMailbox"]
	MailboxType *string `json:"mailboxType,omitempty"`

	// Specifies the Id of the OneDrive associated with the this Office 365
	// entity.
	OneDriveID *string `json:"oneDriveId,omitempty"`

	// Specifies the size of the OneDrive associated with this Office365 entity.
	OneDriveSize *int64 `json:"oneDriveSize,omitempty"`
}

// Validate validates this office365 user info
func (m *Office365UserInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupMembershipInfoList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailboxType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Office365UserInfo) validateGroupMembershipInfoList(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupMembershipInfoList) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupMembershipInfoList); i++ {
		if swag.IsZero(m.GroupMembershipInfoList[i]) { // not required
			continue
		}

		if m.GroupMembershipInfoList[i] != nil {
			if err := m.GroupMembershipInfoList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupMembershipInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupMembershipInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var office365UserInfoTypeMailboxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUserMailbox","kSharedMailbox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		office365UserInfoTypeMailboxTypePropEnum = append(office365UserInfoTypeMailboxTypePropEnum, v)
	}
}

const (

	// Office365UserInfoMailboxTypeKUserMailbox captures enum value "kUserMailbox"
	Office365UserInfoMailboxTypeKUserMailbox string = "kUserMailbox"

	// Office365UserInfoMailboxTypeKSharedMailbox captures enum value "kSharedMailbox"
	Office365UserInfoMailboxTypeKSharedMailbox string = "kSharedMailbox"
)

// prop value enum
func (m *Office365UserInfo) validateMailboxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, office365UserInfoTypeMailboxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Office365UserInfo) validateMailboxType(formats strfmt.Registry) error {
	if swag.IsZero(m.MailboxType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMailboxTypeEnum("mailboxType", "body", *m.MailboxType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this office365 user info based on the context it is used
func (m *Office365UserInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroupMembershipInfoList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Office365UserInfo) contextValidateGroupMembershipInfoList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GroupMembershipInfoList); i++ {

		if m.GroupMembershipInfoList[i] != nil {

			if swag.IsZero(m.GroupMembershipInfoList[i]) { // not required
				return nil
			}

			if err := m.GroupMembershipInfoList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupMembershipInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupMembershipInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Office365UserInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Office365UserInfo) UnmarshalBinary(b []byte) error {
	var res Office365UserInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
