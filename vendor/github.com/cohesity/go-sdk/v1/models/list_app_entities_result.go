// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListAppEntitiesResult ListAppEntitiesResult is the struct for listing app VMs along with its
// auxiliary hierarchy e.g. SQL VMs along with instances.
//
// swagger:model ListAppEntitiesResult
type ListAppEntitiesResult struct {

	// AppEntity is the entity hierarchy for the app entity.
	AppEntity *EntityHierarchyProto `json:"appEntity,omitempty"`

	// RootEntity is the root entity e.g. VCenter.
	RootEntity *PrivateEntityProto `json:"rootEntity,omitempty"`
}

// Validate validates this list app entities result
func (m *ListAppEntitiesResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListAppEntitiesResult) validateAppEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.AppEntity) { // not required
		return nil
	}

	if m.AppEntity != nil {
		if err := m.AppEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appEntity")
			}
			return err
		}
	}

	return nil
}

func (m *ListAppEntitiesResult) validateRootEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.RootEntity) { // not required
		return nil
	}

	if m.RootEntity != nil {
		if err := m.RootEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list app entities result based on the context it is used
func (m *ListAppEntitiesResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListAppEntitiesResult) contextValidateAppEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.AppEntity != nil {

		if swag.IsZero(m.AppEntity) { // not required
			return nil
		}

		if err := m.AppEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appEntity")
			}
			return err
		}
	}

	return nil
}

func (m *ListAppEntitiesResult) contextValidateRootEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.RootEntity != nil {

		if swag.IsZero(m.RootEntity) { // not required
			return nil
		}

		if err := m.RootEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListAppEntitiesResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListAppEntitiesResult) UnmarshalBinary(b []byte) error {
	var res ListAppEntitiesResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
