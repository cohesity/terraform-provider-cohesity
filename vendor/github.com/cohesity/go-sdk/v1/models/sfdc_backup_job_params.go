// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SfdcBackupJobParams Message to capture any additional backup params for Group within the
// Sfdc environment.
//
// swagger:model SfdcBackupJobParams
type SfdcBackupJobParams struct {

	// Last access token refresh time.
	AccessTokenRefreshTimeUsecs *int64 `json:"accessTokenRefreshTimeUsecs,omitempty"`

	// Contains the information of the Aurora database cluster and Iam role info
	// needed to access the Aurora cluster.
	AuroraClusterInfo *AuroraClusterInfo `json:"auroraClusterInfo,omitempty"`

	// IAM role used to get access to the S3 bucket.
	AwsIamRole *string `json:"awsIamRole,omitempty"`

	// Contains the postgres database name where the org's data will be backed
	// up.
	BackupDatabaseName *string `json:"backupDatabaseName,omitempty"`

	// List of details per Sfdc object.
	ObjectInfoVec []*ObjectLevelParams `json:"objectInfoVec"`

	// Sfdc Server Time for the previous run
	PreviousRunSfdcServerTimestampUsecs *int64 `json:"previousRunSfdcServerTimestampUsecs,omitempty"`

	// Includes connection parameters and info saved during registration.
	// This field is not populated as it is not read from backup job params.
	RegisteredEntitySfdcParams *RegisteredEntitySfdcParams `json:"registeredEntitySfdcParams,omitempty"`

	// Contains the information of the S3 bucket used for uploading data.
	S3BucketInfo *S3BucketInfo `json:"s3BucketInfo,omitempty"`

	// Path on snapfs where we persist the SfdcObjectMetadata.
	SfdcObjectMetadataProtoPath *string `json:"sfdcObjectMetadataProtoPath,omitempty"`

	// Sfdc Server Time
	// This time is being used as a snapshot time for fetching
	// only incremental records in the next incremental backup.
	SfdcServerTimestampUsecs *int64 `json:"sfdcServerTimestampUsecs,omitempty"`

	// Contains the DMaaS tenant id.
	TenantID *string `json:"tenantId,omitempty"`
}

// Validate validates this sfdc backup job params
func (m *SfdcBackupJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuroraClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredEntitySfdcParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3BucketInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcBackupJobParams) validateAuroraClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AuroraClusterInfo) { // not required
		return nil
	}

	if m.AuroraClusterInfo != nil {
		if err := m.AuroraClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraClusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraClusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SfdcBackupJobParams) validateObjectInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ObjectInfoVec); i++ {
		if swag.IsZero(m.ObjectInfoVec[i]) { // not required
			continue
		}

		if m.ObjectInfoVec[i] != nil {
			if err := m.ObjectInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SfdcBackupJobParams) validateRegisteredEntitySfdcParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredEntitySfdcParams) { // not required
		return nil
	}

	if m.RegisteredEntitySfdcParams != nil {
		if err := m.RegisteredEntitySfdcParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredEntitySfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredEntitySfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *SfdcBackupJobParams) validateS3BucketInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.S3BucketInfo) { // not required
		return nil
	}

	if m.S3BucketInfo != nil {
		if err := m.S3BucketInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3BucketInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3BucketInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sfdc backup job params based on the context it is used
func (m *SfdcBackupJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuroraClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredEntitySfdcParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3BucketInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcBackupJobParams) contextValidateAuroraClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AuroraClusterInfo != nil {

		if swag.IsZero(m.AuroraClusterInfo) { // not required
			return nil
		}

		if err := m.AuroraClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraClusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraClusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SfdcBackupJobParams) contextValidateObjectInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ObjectInfoVec); i++ {

		if m.ObjectInfoVec[i] != nil {

			if swag.IsZero(m.ObjectInfoVec[i]) { // not required
				return nil
			}

			if err := m.ObjectInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SfdcBackupJobParams) contextValidateRegisteredEntitySfdcParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RegisteredEntitySfdcParams != nil {

		if swag.IsZero(m.RegisteredEntitySfdcParams) { // not required
			return nil
		}

		if err := m.RegisteredEntitySfdcParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredEntitySfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredEntitySfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *SfdcBackupJobParams) contextValidateS3BucketInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.S3BucketInfo != nil {

		if swag.IsZero(m.S3BucketInfo) { // not required
			return nil
		}

		if err := m.S3BucketInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3BucketInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3BucketInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SfdcBackupJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcBackupJobParams) UnmarshalBinary(b []byte) error {
	var res SfdcBackupJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
