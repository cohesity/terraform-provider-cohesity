// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MountVolumesInfoProto Message that encapsulates information about mount volumes task for any
// of the environments we support. Environment specific mount volume infos are
// defined as extensions to this proto.
//
// Each available extension is listed below along with the location of the
// proto file (relative to magneto/connectors) where it is defined.
//
// MountVolumesInfoProto extension                     Location
// =============================================================================
// vmware::MountVolumesInfoProto::vmware_mount_volumes_info vmware/vmware.proto
// =============================================================================
//
// swagger:model MountVolumesInfoProto
type MountVolumesInfoProto struct {

	// If an error is encountered while cleaning up state, then it will be
	// captured as part of this.
	CleanupError *ErrorProto `json:"cleanupError,omitempty"`

	// If the mounting of volumes failed, this field may contain the cause
	// of the failure.
	Error *ErrorProto `json:"error,omitempty"`

	// This will be set to true if the task is complete on the slave.
	Finished *bool `json:"finished,omitempty"`

	// Contains the result information of the mounted volumes.
	MountVolumeResultVec []*MountVolumeResult `json:"mountVolumeResultVec"`

	// The state of the task that sets up and tears down the restore disks that
	// are needed during the mount/teardown operation
	//
	// The environment specific extensions of this proto store the detailed
	// status information about the task.
	RestoreDisksTaskInfoProto *SetupRestoreDiskTaskInfoProto `json:"restoreDisksTaskInfoProto,omitempty"`

	// This is the timestamp at which the slave task started.
	SlaveTaskStartTimeUsecs *int64 `json:"slaveTaskStartTimeUsecs,omitempty"`

	// The type of environment this mount volumes info pertains to.
	Type *int32 `json:"type,omitempty"`

	// If an error was encountered while onlining the disks within the VM, then
	// this will capture that error. This is only applicable to the VMware
	// environment.
	VMOnlineDisksError *ErrorProto `json:"vmOnlineDisksError,omitempty"`
}

// Validate validates this mount volumes info proto
func (m *MountVolumesInfoProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCleanupError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountVolumeResultVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreDisksTaskInfoProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMOnlineDisksError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountVolumesInfoProto) validateCleanupError(formats strfmt.Registry) error {
	if swag.IsZero(m.CleanupError) { // not required
		return nil
	}

	if m.CleanupError != nil {
		if err := m.CleanupError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cleanupError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cleanupError")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesInfoProto) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesInfoProto) validateMountVolumeResultVec(formats strfmt.Registry) error {
	if swag.IsZero(m.MountVolumeResultVec) { // not required
		return nil
	}

	for i := 0; i < len(m.MountVolumeResultVec); i++ {
		if swag.IsZero(m.MountVolumeResultVec[i]) { // not required
			continue
		}

		if m.MountVolumeResultVec[i] != nil {
			if err := m.MountVolumeResultVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mountVolumeResultVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mountVolumeResultVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MountVolumesInfoProto) validateRestoreDisksTaskInfoProto(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreDisksTaskInfoProto) { // not required
		return nil
	}

	if m.RestoreDisksTaskInfoProto != nil {
		if err := m.RestoreDisksTaskInfoProto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreDisksTaskInfoProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreDisksTaskInfoProto")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesInfoProto) validateVMOnlineDisksError(formats strfmt.Registry) error {
	if swag.IsZero(m.VMOnlineDisksError) { // not required
		return nil
	}

	if m.VMOnlineDisksError != nil {
		if err := m.VMOnlineDisksError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmOnlineDisksError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmOnlineDisksError")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mount volumes info proto based on the context it is used
func (m *MountVolumesInfoProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCleanupError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountVolumeResultVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreDisksTaskInfoProto(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMOnlineDisksError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountVolumesInfoProto) contextValidateCleanupError(ctx context.Context, formats strfmt.Registry) error {

	if m.CleanupError != nil {

		if swag.IsZero(m.CleanupError) { // not required
			return nil
		}

		if err := m.CleanupError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cleanupError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cleanupError")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesInfoProto) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesInfoProto) contextValidateMountVolumeResultVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MountVolumeResultVec); i++ {

		if m.MountVolumeResultVec[i] != nil {

			if swag.IsZero(m.MountVolumeResultVec[i]) { // not required
				return nil
			}

			if err := m.MountVolumeResultVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mountVolumeResultVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mountVolumeResultVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MountVolumesInfoProto) contextValidateRestoreDisksTaskInfoProto(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreDisksTaskInfoProto != nil {

		if swag.IsZero(m.RestoreDisksTaskInfoProto) { // not required
			return nil
		}

		if err := m.RestoreDisksTaskInfoProto.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreDisksTaskInfoProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreDisksTaskInfoProto")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesInfoProto) contextValidateVMOnlineDisksError(ctx context.Context, formats strfmt.Registry) error {

	if m.VMOnlineDisksError != nil {

		if swag.IsZero(m.VMOnlineDisksError) { // not required
			return nil
		}

		if err := m.VMOnlineDisksError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmOnlineDisksError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmOnlineDisksError")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountVolumesInfoProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountVolumesInfoProto) UnmarshalBinary(b []byte) error {
	var res MountVolumesInfoProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
