// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Permission Defines the access that a delegate has to a folder.
//
// swagger:model Permission
type Permission struct {

	// Indicates whether a user has permission to create items in a folder.
	CanCreateItems *bool `json:"canCreateItems,omitempty"`

	// Indicates whether a user has permission to create sub-folders in a
	// folder.
	CanCreateSubFolders *bool `json:"canCreateSubFolders,omitempty"`

	// Indicates whether a user has permission to edit items in a folder.
	DeleteItems *int32 `json:"deleteItems,omitempty"`

	// Indicates whether a user has permission to delete items in a folder.
	EditItems *int32 `json:"editItems,omitempty"`

	// Indicates whether a user is a contact for a folder.
	IsFolderContact *bool `json:"isFolderContact,omitempty"`

	// Indicates whether a user is the owner of a folder.
	IsFolderOwner *bool `json:"isFolderOwner,omitempty"`

	// Indicates whether a user can view a folder.
	IsFolderVisible *bool `json:"isFolderVisible,omitempty"`

	// Represents the combination of permissions that a user has on a folder.
	PermissionLevel *int32 `json:"permissionLevel,omitempty"`

	// Indicates whether a user has permission to read items within a folder.
	ReadItems *int32 `json:"readItems,omitempty"`

	// Identifies a delegate user or a user who has folder access
	// permissions.
	UserID *PrivateUserID `json:"userId,omitempty"`
}

// Validate validates this permission
func (m *Permission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Permission) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if m.UserID != nil {
		if err := m.UserID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this permission based on the context it is used
func (m *Permission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Permission) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	if m.UserID != nil {

		if swag.IsZero(m.UserID) { // not required
			return nil
		}

		if err := m.UserID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Permission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Permission) UnmarshalBinary(b []byte) error {
	var res Permission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
