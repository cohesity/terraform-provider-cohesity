// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleDBChannelInfo Message to contain backup or restore parameters for a unique Oracle
// database. The Oracle database unique name is used to determine uniqueness
// of the database.
//
// Note: The name of this proto message is out-dated. This proto can represent
//
// more than just the database channel information. It should be renamed
// in the future.
//
// swagger:model OracleDBChannelInfo
type OracleDBChannelInfo struct {

	// Archived log deletion policy for this unique Oracle database.
	// 1: keep archived log forever
	// 0: delete archived log immediately
	// n>0: delete archived log after n days
	ArchivelogKeepDays *int32 `json:"archivelogKeepDays,omitempty"`

	// Archived log deletion policy for Oracle database.
	// 1: if hours value is not specified
	// 0: delete archived log immediately
	// k>0: delete archived log after k hours
	ArchivelogKeepHours *int32 `json:"archivelogKeepHours,omitempty"`

	// The credentials to be used for this database.
	Credentials *Credentials `json:"credentials,omitempty"`

	// The unique name of the database.
	DbUniqueName *string `json:"dbUniqueName,omitempty"`

	// Database id, internal field, is filled by magneto master based on
	// corresponding app entity id.
	DbUUID *string `json:"dbUuid,omitempty"`

	// If set to false, and if the DG database role is primary, we will not allow
	// the backup of that database.
	EnableDgPrimaryBackup *bool `json:"enableDgPrimaryBackup,omitempty"`

	// Vector of Oracle hosts from which we are allowed to take the
	// backup/restore. In case of RAC database it may be more than one.
	HostInfoVec []*OracleDBChannelInfoHostInfo `json:"hostInfoVec"`

	// Maximum number of hosts from which we are allowed to take backup/restore
	// parallely. This will be less than or equal to host_info_vec_size. If
	// this is less than host_info_vec_size we will choose max_num_host from
	// host_info_vec and take backup/restore from this number of host.
	MaxNumHost *int32 `json:"maxNumHost,omitempty"`

	// The default number of channels to use per host per db. This value is used
	// on all hosts unless host_info_vec.num_channels is specified for that host.
	// Default value for num_channels will be calculated as minimum number of
	// nodes in cohesity cluster, and 2 * number of cpu on Oracle host.
	// Preference order for number of channels per host for given db is:
	// 1. If user has specified host_info_vec.num_channels for host we will use
	// that.
	// 2. If user has not specified host_info_vec.num_channels but specified
	// num_channels we will use this.
	// 3. If user has neither specified host_info_vec.num_channels nor
	// num_channels we will calculate default channels with above formula.
	NumChannels *int32 `json:"numChannels,omitempty"`

	// Type of Oracle RMAN backup rquested (i.e ImageCopy, BackupSets).
	RmanBackupType *int32 `json:"rmanBackupType,omitempty"`
}

// Validate validates this oracle d b channel info
func (m *OracleDBChannelInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleDBChannelInfo) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *OracleDBChannelInfo) validateHostInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.HostInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.HostInfoVec); i++ {
		if swag.IsZero(m.HostInfoVec[i]) { // not required
			continue
		}

		if m.HostInfoVec[i] != nil {
			if err := m.HostInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this oracle d b channel info based on the context it is used
func (m *OracleDBChannelInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleDBChannelInfo) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *OracleDBChannelInfo) contextValidateHostInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostInfoVec); i++ {

		if m.HostInfoVec[i] != nil {

			if swag.IsZero(m.HostInfoVec[i]) { // not required
				return nil
			}

			if err := m.HostInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleDBChannelInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleDBChannelInfo) UnmarshalBinary(b []byte) error {
	var res OracleDBChannelInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
