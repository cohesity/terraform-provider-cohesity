// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SubscriptionInfo SubscriptionInfo holds all the subscriptions for the current account.
//
// Extends this to have Helios, DRaaS and DSaaS.
//
// swagger:model SubscriptionInfo
type SubscriptionInfo struct {

	// Specifies whether Datahawk Classification subscription was/is enabled
	// for account.
	Classification *ClassificationInfo `json:"classification,omitempty"`

	// Specifies whether Data Insights subscription was/is enabled
	// for account.
	DataInsights *DataInsightsInfo `json:"dataInsights,omitempty"`

	// Specifies whether data protect subscription was subscribed for account.
	// This is for AWS data plane.
	DataProtect *DataProtectInfo `json:"dataProtect,omitempty"`

	// Specifies whether data protect subscription was subscribed for account.
	// This is for Azure data plane.
	DataProtectAzure *DataProtectAzureInfo `json:"dataProtectAzure,omitempty"`

	// Specifies whether Fortknox AzureCool or AzureCool FreeTrial subscription
	// was/is enabled for account.
	FortKnoxAzureCool *FortKnoxAzureInfo `json:"fortKnoxAzureCool,omitempty"`

	// Specifies whether Fortknox AzureHot or AzureHot FreeTrial subscription
	// was/is enabled for account.
	FortKnoxAzureHot *FortKnoxAzureInfo `json:"fortKnoxAzureHot,omitempty"`

	// Specifies whether Fortknox AwsCold or AwsCold FreeTrial subscription
	// was/is enabled for account.
	FortKnoxCold *FortKnoxColdInfo `json:"fortKnoxCold,omitempty"`

	// Specifies whether Fortknox AwsWarm or AwsWarm FreeTrial subscription
	// was/is enabled for account.
	Ransomware *RansomwareInfo `json:"ransomware,omitempty"`

	// Specifies whether site continuity subscription was/is enabled for account.
	SiteContinuity *SiteContinuityInfo `json:"siteContinuity,omitempty"`

	// Specifies whether Datahawk ThreatProtection subscription was/is enabled
	// for account.
	ThreatProtection *ThreatProtectionInfo `json:"threatProtection,omitempty"`
}

// Validate validates this subscription info
func (m *SubscriptionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataInsights(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataProtect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataProtectAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFortKnoxAzureCool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFortKnoxAzureHot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFortKnoxCold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRansomware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteContinuity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreatProtection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionInfo) validateClassification(formats strfmt.Registry) error {
	if swag.IsZero(m.Classification) { // not required
		return nil
	}

	if m.Classification != nil {
		if err := m.Classification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classification")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) validateDataInsights(formats strfmt.Registry) error {
	if swag.IsZero(m.DataInsights) { // not required
		return nil
	}

	if m.DataInsights != nil {
		if err := m.DataInsights.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataInsights")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataInsights")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) validateDataProtect(formats strfmt.Registry) error {
	if swag.IsZero(m.DataProtect) { // not required
		return nil
	}

	if m.DataProtect != nil {
		if err := m.DataProtect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataProtect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataProtect")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) validateDataProtectAzure(formats strfmt.Registry) error {
	if swag.IsZero(m.DataProtectAzure) { // not required
		return nil
	}

	if m.DataProtectAzure != nil {
		if err := m.DataProtectAzure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataProtectAzure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataProtectAzure")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) validateFortKnoxAzureCool(formats strfmt.Registry) error {
	if swag.IsZero(m.FortKnoxAzureCool) { // not required
		return nil
	}

	if m.FortKnoxAzureCool != nil {
		if err := m.FortKnoxAzureCool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fortKnoxAzureCool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fortKnoxAzureCool")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) validateFortKnoxAzureHot(formats strfmt.Registry) error {
	if swag.IsZero(m.FortKnoxAzureHot) { // not required
		return nil
	}

	if m.FortKnoxAzureHot != nil {
		if err := m.FortKnoxAzureHot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fortKnoxAzureHot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fortKnoxAzureHot")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) validateFortKnoxCold(formats strfmt.Registry) error {
	if swag.IsZero(m.FortKnoxCold) { // not required
		return nil
	}

	if m.FortKnoxCold != nil {
		if err := m.FortKnoxCold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fortKnoxCold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fortKnoxCold")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) validateRansomware(formats strfmt.Registry) error {
	if swag.IsZero(m.Ransomware) { // not required
		return nil
	}

	if m.Ransomware != nil {
		if err := m.Ransomware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ransomware")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ransomware")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) validateSiteContinuity(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteContinuity) { // not required
		return nil
	}

	if m.SiteContinuity != nil {
		if err := m.SiteContinuity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteContinuity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteContinuity")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) validateThreatProtection(formats strfmt.Registry) error {
	if swag.IsZero(m.ThreatProtection) { // not required
		return nil
	}

	if m.ThreatProtection != nil {
		if err := m.ThreatProtection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threatProtection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threatProtection")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this subscription info based on the context it is used
func (m *SubscriptionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataInsights(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataProtect(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataProtectAzure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFortKnoxAzureCool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFortKnoxAzureHot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFortKnoxCold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRansomware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSiteContinuity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThreatProtection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionInfo) contextValidateClassification(ctx context.Context, formats strfmt.Registry) error {

	if m.Classification != nil {

		if swag.IsZero(m.Classification) { // not required
			return nil
		}

		if err := m.Classification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classification")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) contextValidateDataInsights(ctx context.Context, formats strfmt.Registry) error {

	if m.DataInsights != nil {

		if swag.IsZero(m.DataInsights) { // not required
			return nil
		}

		if err := m.DataInsights.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataInsights")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataInsights")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) contextValidateDataProtect(ctx context.Context, formats strfmt.Registry) error {

	if m.DataProtect != nil {

		if swag.IsZero(m.DataProtect) { // not required
			return nil
		}

		if err := m.DataProtect.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataProtect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataProtect")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) contextValidateDataProtectAzure(ctx context.Context, formats strfmt.Registry) error {

	if m.DataProtectAzure != nil {

		if swag.IsZero(m.DataProtectAzure) { // not required
			return nil
		}

		if err := m.DataProtectAzure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataProtectAzure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataProtectAzure")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) contextValidateFortKnoxAzureCool(ctx context.Context, formats strfmt.Registry) error {

	if m.FortKnoxAzureCool != nil {

		if swag.IsZero(m.FortKnoxAzureCool) { // not required
			return nil
		}

		if err := m.FortKnoxAzureCool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fortKnoxAzureCool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fortKnoxAzureCool")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) contextValidateFortKnoxAzureHot(ctx context.Context, formats strfmt.Registry) error {

	if m.FortKnoxAzureHot != nil {

		if swag.IsZero(m.FortKnoxAzureHot) { // not required
			return nil
		}

		if err := m.FortKnoxAzureHot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fortKnoxAzureHot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fortKnoxAzureHot")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) contextValidateFortKnoxCold(ctx context.Context, formats strfmt.Registry) error {

	if m.FortKnoxCold != nil {

		if swag.IsZero(m.FortKnoxCold) { // not required
			return nil
		}

		if err := m.FortKnoxCold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fortKnoxCold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fortKnoxCold")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) contextValidateRansomware(ctx context.Context, formats strfmt.Registry) error {

	if m.Ransomware != nil {

		if swag.IsZero(m.Ransomware) { // not required
			return nil
		}

		if err := m.Ransomware.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ransomware")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ransomware")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) contextValidateSiteContinuity(ctx context.Context, formats strfmt.Registry) error {

	if m.SiteContinuity != nil {

		if swag.IsZero(m.SiteContinuity) { // not required
			return nil
		}

		if err := m.SiteContinuity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteContinuity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteContinuity")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionInfo) contextValidateThreatProtection(ctx context.Context, formats strfmt.Registry) error {

	if m.ThreatProtection != nil {

		if swag.IsZero(m.ThreatProtection) { // not required
			return nil
		}

		if err := m.ThreatProtection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threatProtection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threatProtection")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionInfo) UnmarshalBinary(b []byte) error {
	var res SubscriptionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
