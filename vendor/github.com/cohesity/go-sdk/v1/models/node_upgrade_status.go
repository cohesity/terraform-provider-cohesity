// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NodeUpgradeStatus NodeUpgradeStatus contains the upgrade status of a node.
//
// swagger:model NodeUpgradeStatus
type NodeUpgradeStatus struct {

	// CurrentSwVersion is the current software version of the node.
	CurrentSwVersion *string `json:"currentSwVersion,omitempty"`

	// HasUpgraded indicates whether an upgrade operation completed successfully,
	// i.e. the node software version is the same as the cluster target version.
	HasUpgraded *bool `json:"hasUpgraded,omitempty"`

	// NodeId is the id of the node.
	NodeID *int64 `json:"nodeId,omitempty"`

	// NodeIp is the IP address of the node.
	NodeIP *string `json:"nodeIp,omitempty"`
}

// Validate validates this node upgrade status
func (m *NodeUpgradeStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this node upgrade status based on context it is used
func (m *NodeUpgradeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeUpgradeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeUpgradeStatus) UnmarshalBinary(b []byte) error {
	var res NodeUpgradeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
