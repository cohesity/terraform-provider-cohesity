// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VaultRunStatsSummary Vault Run Stats Summary.
//
// Specifies the stats by run type for each vault run.
//
// swagger:model VaultRunStatsSummary
type VaultRunStatsSummary struct {

	// Specifies the time series for the failed runs that ended in the given time frame.
	FailureTimeSeries []*VaultRunInfo `json:"failureTimeSeries"`

	// Specifies the number of runs that ended in failure during the given time frame.
	NumFailedRuns *int64 `json:"numFailedRuns,omitempty"`

	// Specifies the number of runs that were currently in progress at the time that the API call was made.
	NumInProgressRuns *int64 `json:"numInProgressRuns,omitempty"`

	// Specifies the number of runs that were currently queued at the time that the API call was made.
	NumQueuedRuns *int64 `json:"numQueuedRuns,omitempty"`

	// Specifies the number of runs that ended in success during the given time frame.
	NumSuccessfulRuns *int64 `json:"numSuccessfulRuns,omitempty"`

	// Specifies the time series for the successful runs that ended in the given time frame.
	SuccessTimeSeries []*VaultRunInfo `json:"successTimeSeries"`
}

// Validate validates this vault run stats summary
func (m *VaultRunStatsSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureTimeSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessTimeSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultRunStatsSummary) validateFailureTimeSeries(formats strfmt.Registry) error {
	if swag.IsZero(m.FailureTimeSeries) { // not required
		return nil
	}

	for i := 0; i < len(m.FailureTimeSeries); i++ {
		if swag.IsZero(m.FailureTimeSeries[i]) { // not required
			continue
		}

		if m.FailureTimeSeries[i] != nil {
			if err := m.FailureTimeSeries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failureTimeSeries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failureTimeSeries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VaultRunStatsSummary) validateSuccessTimeSeries(formats strfmt.Registry) error {
	if swag.IsZero(m.SuccessTimeSeries) { // not required
		return nil
	}

	for i := 0; i < len(m.SuccessTimeSeries); i++ {
		if swag.IsZero(m.SuccessTimeSeries[i]) { // not required
			continue
		}

		if m.SuccessTimeSeries[i] != nil {
			if err := m.SuccessTimeSeries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("successTimeSeries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("successTimeSeries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vault run stats summary based on the context it is used
func (m *VaultRunStatsSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFailureTimeSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuccessTimeSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultRunStatsSummary) contextValidateFailureTimeSeries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FailureTimeSeries); i++ {

		if m.FailureTimeSeries[i] != nil {

			if swag.IsZero(m.FailureTimeSeries[i]) { // not required
				return nil
			}

			if err := m.FailureTimeSeries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failureTimeSeries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failureTimeSeries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VaultRunStatsSummary) contextValidateSuccessTimeSeries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SuccessTimeSeries); i++ {

		if m.SuccessTimeSeries[i] != nil {

			if swag.IsZero(m.SuccessTimeSeries[i]) { // not required
				return nil
			}

			if err := m.SuccessTimeSeries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("successTimeSeries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("successTimeSeries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VaultRunStatsSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VaultRunStatsSummary) UnmarshalBinary(b []byte) error {
	var res VaultRunStatsSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
