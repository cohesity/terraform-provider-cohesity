// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCloudClusterParameters Create Cloud Cluster Parameters.
//
// Specifies the parameters needed for creation of a new Cluster.
//
// swagger:model CreateCloudClusterParameters
type CreateCloudClusterParameters struct {

	// Specifies the name of the new Cluster.
	// Required: true
	ClusterName *string `json:"clusterName"`

	// Specifies the size of the cluster. It is set as Large by default if the
	// parameter is not specified.
	// Enum: ["Small","Medium","Large","XLarge"]
	ClusterSize *string `json:"clusterSize,omitempty"`

	// Specifies the encryption configuration parameters.
	EncryptionConfig *EncryptionConfiguration `json:"encryptionConfig,omitempty"`

	// Specifies IP preference.
	IPPreference *int32 `json:"ipPreference,omitempty"`

	// Specifies the metadata fault tolerance.
	MetadataFaultTolerance *int32 `json:"metadataFaultTolerance,omitempty"`

	// Specifies the network configuration parameters.
	// Required: true
	NetworkConfig *CloudNetworkConfiguration `json:"networkConfig"`

	// Specifies the configuration for the nodes in the new cluster.
	// Required: true
	NodeIps []string `json:"nodeIps"`

	// Specifies Trust Domain used for Service Identity.
	TrustDomain *string `json:"trustDomain,omitempty"`
}

// Validate validates this create cloud cluster parameters
func (m *CreateCloudClusterParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeIps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCloudClusterParameters) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("clusterName", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

var createCloudClusterParametersTypeClusterSizePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Small","Medium","Large","XLarge"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCloudClusterParametersTypeClusterSizePropEnum = append(createCloudClusterParametersTypeClusterSizePropEnum, v)
	}
}

const (

	// CreateCloudClusterParametersClusterSizeSmall captures enum value "Small"
	CreateCloudClusterParametersClusterSizeSmall string = "Small"

	// CreateCloudClusterParametersClusterSizeMedium captures enum value "Medium"
	CreateCloudClusterParametersClusterSizeMedium string = "Medium"

	// CreateCloudClusterParametersClusterSizeLarge captures enum value "Large"
	CreateCloudClusterParametersClusterSizeLarge string = "Large"

	// CreateCloudClusterParametersClusterSizeXLarge captures enum value "XLarge"
	CreateCloudClusterParametersClusterSizeXLarge string = "XLarge"
)

// prop value enum
func (m *CreateCloudClusterParameters) validateClusterSizeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCloudClusterParametersTypeClusterSizePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateCloudClusterParameters) validateClusterSize(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterSize) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterSizeEnum("clusterSize", "body", *m.ClusterSize); err != nil {
		return err
	}

	return nil
}

func (m *CreateCloudClusterParameters) validateEncryptionConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionConfig) { // not required
		return nil
	}

	if m.EncryptionConfig != nil {
		if err := m.EncryptionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCloudClusterParameters) validateNetworkConfig(formats strfmt.Registry) error {

	if err := validate.Required("networkConfig", "body", m.NetworkConfig); err != nil {
		return err
	}

	if m.NetworkConfig != nil {
		if err := m.NetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCloudClusterParameters) validateNodeIps(formats strfmt.Registry) error {

	if err := validate.Required("nodeIps", "body", m.NodeIps); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create cloud cluster parameters based on the context it is used
func (m *CreateCloudClusterParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEncryptionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCloudClusterParameters) contextValidateEncryptionConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionConfig != nil {

		if swag.IsZero(m.EncryptionConfig) { // not required
			return nil
		}

		if err := m.EncryptionConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCloudClusterParameters) contextValidateNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkConfig != nil {

		if err := m.NetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCloudClusterParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCloudClusterParameters) UnmarshalBinary(b []byte) error {
	var res CreateCloudClusterParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
