// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationsRestoreTaskRequest Create Applications Restore Task Request.
//
// Specifies the request to create a restore task for restoring Application
// Servers like SQL or Exchange servers hosted by a Protection Source.
//
// swagger:model ApplicationsRestoreTaskRequest
type ApplicationsRestoreTaskRequest struct {

	// Specifies the Environment of the Application to restore like 'kSQL', or
	// 'kExchange'.
	// overrideDescription: true
	// Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	// NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	// 'kVMware' indicates the VMware Protection Source environment.
	// 'kHyperV' indicates the HyperV Protection Source environment.
	// 'kSQL' indicates the SQL Protection Source environment.
	// 'kView' indicates the View Protection Source environment.
	// 'kPuppeteer' indicates the Cohesity's Remote Adapter.
	// 'kPhysical' indicates the physical Protection Source environment.
	// 'kPure' indicates the Pure Storage Protection Source environment.
	// 'kNimble' indicates the Nimble Storage Protection Source environment.
	// 'kAzure' indicates the Microsoft's Azure Protection Source environment.
	// 'kNetapp' indicates the Netapp Protection Source environment.
	// 'kAgent' indicates the Agent Protection Source environment.
	// 'kGenericNas' indicates the Generic Network Attached Storage Protection
	// Source environment.
	// 'kAcropolis' indicates the Acropolis Protection Source environment.
	// 'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	// 'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	// 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	// 'kGPFS' indicates IBM's GPFS Protection Source environment.
	// 'kKVM' indicates the KVM Protection Source environment.
	// 'kAWS' indicates the AWS Protection Source environment.
	// 'kExchange' indicates the Exchange Protection Source environment.
	// 'kHyperVVSS' indicates the HyperV VSS Protection Source
	// environment.
	// 'kOracle' indicates the Oracle Protection Source environment.
	// 'kGCP' indicates the Google Cloud Platform Protection Source environment.
	// 'kFlashBlade' indicates the Flash Blade Protection Source environment.
	// 'kAWSNative' indicates the AWS Native Protection Source environment.
	// 'kO365' indicates the Office 365 Protection Source environment.
	// 'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	// 'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	// 'kGCPNative' indicates the GCP Native Protection Source environment.
	// 'kAzureNative' indicates the Azure Native Protection Source environment.
	// 'kKubernetes' indicates a Kubernetes Protection Source environment.
	// 'kElastifile' indicates Elastifile Protection Source environment.
	// 'kAD' indicates Active Directory Protection Source environment.
	// 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	// 'kCassandra' indicates Cassandra Protection Source environment.
	// 'kMongoDB' indicates MongoDB Protection Source environment.
	// 'kCouchbase' indicates Couchbase Protection Source environment.
	// 'kHdfs' indicates Hdfs Protection Source environment.
	// 'kHive' indicates Hive Protection Source environment.
	// 'kHBase' indicates HBase Protection Source environment.
	// 'kUDA' indicates Universal Data Adapter Protection Source environment.
	// 'kSAPHANA' indicates SAP HANA protection source environment.
	// 'kO365Teams' indicates the Office365 Teams Protection Source environment.
	// 'kO365Group' indicates the Office365 Groups Protection Source environment.
	// 'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	// 'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	// 'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	// 'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	// kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	// kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	// kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	// kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	// kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	// kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	// kO365PublicFolders
	// Required: true
	// Enum: ["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]
	ApplicationEnvironment *string `json:"applicationEnvironment"`

	// Specifies the Application Server objects whose data should be restored
	// and the restore parameters for each of them.
	// This field will be deprecated. Use the field
	// ProtectionSourceAndApplicationRestoreObjects.
	// deprecated: true
	ApplicationRestoreObjects []*ApplicationRestoreObject `json:"applicationRestoreObjects"`

	// Specifies the cloud credentials used to authenticate with cloud(Aws).
	CloudCredentials *CloudCredentials `json:"cloudCredentials,omitempty"`

	// Specifies the restore information for the Protection Source object that
	// registered and hosts the Application Servers. This provides the
	// snapshot details from which the applications should be restored.
	// This field will be deprecated. Use the field
	// ProtectionSourceAndApplicationRestoreObjects.
	// deprecated: true
	// Required: true
	HostingProtectionSource *RestoreObjectDetails `json:"hostingProtectionSource"`

	// Specifies a name for the new task to be created. This field has to be
	// set, and it needs to be unique across all restore tasks.
	// Required: true
	Name *string `json:"name"`

	// Specifies password of the username to access the target source.
	Password *string `json:"password,omitempty"`

	// Specifies the list of hosting protection source and Application restore
	// objects tuple.
	ProtectionSourceAndApplicationObjects []*ProtectionSourceAndApplicationRestoreObjects `json:"protectionSourceAndApplicationObjects"`

	// Specifies username to access the target source.
	Username *string `json:"username,omitempty"`

	// Specifies VLAN parameters for the restore operation.
	VlanParameters *VlanParameters `json:"vlanParameters,omitempty"`
}

// Validate validates this applications restore task request
func (m *ApplicationsRestoreTaskRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationRestoreObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostingProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionSourceAndApplicationObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var applicationsRestoreTaskRequestTypeApplicationEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationsRestoreTaskRequestTypeApplicationEnvironmentPropEnum = append(applicationsRestoreTaskRequestTypeApplicationEnvironmentPropEnum, v)
	}
}

const (

	// ApplicationsRestoreTaskRequestApplicationEnvironmentKVMware captures enum value "kVMware"
	ApplicationsRestoreTaskRequestApplicationEnvironmentKVMware string = "kVMware"

	// ApplicationsRestoreTaskRequestApplicationEnvironmentKHyperV captures enum value "kHyperV"
	ApplicationsRestoreTaskRequestApplicationEnvironmentKHyperV string = "kHyperV"

	// ApplicationsRestoreTaskRequestApplicationEnvironmentKSQL captures enum value "kSQL"
	ApplicationsRestoreTaskRequestApplicationEnvironmentKSQL string = "kSQL"

	// ApplicationsRestoreTaskRequestApplicationEnvironmentKView captures enum value "kView"
	ApplicationsRestoreTaskRequestApplicationEnvironmentKView string = "kView"

	// ApplicationsRestoreTaskRequestApplicationEnvironmentKPuppeteer captures enum value "kPuppeteer"
	ApplicationsRestoreTaskRequestApplicationEnvironmentKPuppeteer string = "kPuppeteer"

	// ApplicationsRestoreTaskRequestApplicationEnvironmentKPhysical captures enum value "kPhysical"
	ApplicationsRestoreTaskRequestApplicationEnvironmentKPhysical string = "kPhysical"

	// ApplicationsRestoreTaskRequestApplicationEnvironmentKPure captures enum value "kPure"
	ApplicationsRestoreTaskRequestApplicationEnvironmentKPure string = "kPure"

	// ApplicationsRestoreTaskRequestApplicationEnvironmentKNimble captures enum value "kNimble"
	ApplicationsRestoreTaskRequestApplicationEnvironmentKNimble string = "kNimble"
)

// prop value enum
func (m *ApplicationsRestoreTaskRequest) validateApplicationEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationsRestoreTaskRequestTypeApplicationEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationsRestoreTaskRequest) validateApplicationEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("applicationEnvironment", "body", m.ApplicationEnvironment); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationEnvironmentEnum("applicationEnvironment", "body", *m.ApplicationEnvironment); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationsRestoreTaskRequest) validateApplicationRestoreObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationRestoreObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationRestoreObjects); i++ {
		if swag.IsZero(m.ApplicationRestoreObjects[i]) { // not required
			continue
		}

		if m.ApplicationRestoreObjects[i] != nil {
			if err := m.ApplicationRestoreObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationRestoreObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applicationRestoreObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationsRestoreTaskRequest) validateCloudCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudCredentials) { // not required
		return nil
	}

	if m.CloudCredentials != nil {
		if err := m.CloudCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationsRestoreTaskRequest) validateHostingProtectionSource(formats strfmt.Registry) error {

	if err := validate.Required("hostingProtectionSource", "body", m.HostingProtectionSource); err != nil {
		return err
	}

	if m.HostingProtectionSource != nil {
		if err := m.HostingProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostingProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostingProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationsRestoreTaskRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationsRestoreTaskRequest) validateProtectionSourceAndApplicationObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionSourceAndApplicationObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionSourceAndApplicationObjects); i++ {
		if swag.IsZero(m.ProtectionSourceAndApplicationObjects[i]) { // not required
			continue
		}

		if m.ProtectionSourceAndApplicationObjects[i] != nil {
			if err := m.ProtectionSourceAndApplicationObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionSourceAndApplicationObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionSourceAndApplicationObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationsRestoreTaskRequest) validateVlanParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParameters) { // not required
		return nil
	}

	if m.VlanParameters != nil {
		if err := m.VlanParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this applications restore task request based on the context it is used
func (m *ApplicationsRestoreTaskRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationRestoreObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostingProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionSourceAndApplicationObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationsRestoreTaskRequest) contextValidateApplicationRestoreObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApplicationRestoreObjects); i++ {

		if m.ApplicationRestoreObjects[i] != nil {

			if swag.IsZero(m.ApplicationRestoreObjects[i]) { // not required
				return nil
			}

			if err := m.ApplicationRestoreObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationRestoreObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applicationRestoreObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationsRestoreTaskRequest) contextValidateCloudCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudCredentials != nil {

		if swag.IsZero(m.CloudCredentials) { // not required
			return nil
		}

		if err := m.CloudCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationsRestoreTaskRequest) contextValidateHostingProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.HostingProtectionSource != nil {

		if err := m.HostingProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostingProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostingProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationsRestoreTaskRequest) contextValidateProtectionSourceAndApplicationObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionSourceAndApplicationObjects); i++ {

		if m.ProtectionSourceAndApplicationObjects[i] != nil {

			if swag.IsZero(m.ProtectionSourceAndApplicationObjects[i]) { // not required
				return nil
			}

			if err := m.ProtectionSourceAndApplicationObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionSourceAndApplicationObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionSourceAndApplicationObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationsRestoreTaskRequest) contextValidateVlanParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParameters != nil {

		if swag.IsZero(m.VlanParameters) { // not required
			return nil
		}

		if err := m.VlanParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationsRestoreTaskRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationsRestoreTaskRequest) UnmarshalBinary(b []byte) error {
	var res ApplicationsRestoreTaskRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
