// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CouchbaseRecoverJobParams Contains any additional couchbase environment specific params for the
// recover job.
//
// swagger:model CouchbaseRecoverJobParams
type CouchbaseRecoverJobParams struct {

	// Whether to append documents into the bucket at the destination
	AppendDocuments *bool `json:"appendDocuments,omitempty"`

	// Whether to recover only the bucket configuration
	DdlOnlyRecovery *bool `json:"ddlOnlyRecovery,omitempty"`

	// Specify the document type recovery option.
	DocumentsFilterType *int32 `json:"documentsFilterType,omitempty"`

	// A filter expression to match Documents content to be restored.
	FilterExpression *string `json:"filterExpression,omitempty"`

	// A regular expression to match Documents ID's to be restored.
	IDRegex *string `json:"idRegex,omitempty"`

	// Whether to replace existing users with users from the bucket
	OverwriteUsers *bool `json:"overwriteUsers,omitempty"`

	// A suffix that is to be applied to all recovered entities
	Suffix *string `json:"suffix,omitempty"`
}

// Validate validates this couchbase recover job params
func (m *CouchbaseRecoverJobParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this couchbase recover job params based on context it is used
func (m *CouchbaseRecoverJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CouchbaseRecoverJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CouchbaseRecoverJobParams) UnmarshalBinary(b []byte) error {
	var res CouchbaseRecoverJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
