// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OracleDataGuardInfo Oracle Data Guard Configuration Info.
//
// Specifies information about the Database in Oracle DataGuard configuration.
// Data GUard provides a comprehensive set of services that create, maintain,
// and monitor one or more standby databases to enable production Oracle
// databases to survive disasters and data corruptions. Data Guard maintains
// these standby databases as transactionally consistent copies of the
// production databases.
//
// swagger:model OracleDataGuardInfo
type OracleDataGuardInfo struct {

	// Specifies the role of the DataGuard database.
	// Specifies the role of the DataGuard database.
	//
	// A Data Guard configuration contains one production database, also referred
	// to as the primary database, that functions in the primary role.
	// The primary database can be either a single-instance Oracle database or an
	// Oracle Real Application Clusters database.
	//
	// A standby database is a transactionally consistent copy of the primary
	// database. Similar to a primary database, a standby database can be either
	// a single-instance Oracle database or an Oracle Real Application Clusters
	// database.
	// 'kPrimary' indicates that the current database is primary database.
	// 'kStandby' indicates that the current database is standby database.
	// Enum: ["kPrimary","kStandby"]
	Role *string `json:"role,omitempty"`

	// Specifies the type of standby database.
	// Specifies the type of standby database.
	// 'kPhysical' indicates that the current database provides a physically
	// identical copy of the primary database, with on disk structures identical
	// to the primary database on a block-for-block basis. It is kept
	// synchronized with the primary database, though Redo Apply, which recovers
	// the redo data received from the primary database and applies the redo to
	// the physical standby database.
	// 'kLogical' indicates that the current database provides the same logical
	// information as the production database, although the physical structure
	// can be different. It is kept synchronized with the primary database
	// thorugh SQL Apply, which transforms the data in the redo received from the
	// primary database into SQL statements and then executing the SQL statements
	// on the standby database.
	// 'kSnapshot' indicates that the current database is a fully updateable
	// standby created by converting a physical standby database into a snasphot
	// standby database. It receives and archives but does not apply redo data
	// from a primary database.
	// Enum: ["kPhysical","kLogical","kSnapshot"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this oracle data guard info
func (m *OracleDataGuardInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleDataGuardInfoTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPrimary","kStandby"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleDataGuardInfoTypeRolePropEnum = append(oracleDataGuardInfoTypeRolePropEnum, v)
	}
}

const (

	// OracleDataGuardInfoRoleKPrimary captures enum value "kPrimary"
	OracleDataGuardInfoRoleKPrimary string = "kPrimary"

	// OracleDataGuardInfoRoleKStandby captures enum value "kStandby"
	OracleDataGuardInfoRoleKStandby string = "kStandby"
)

// prop value enum
func (m *OracleDataGuardInfo) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleDataGuardInfoTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleDataGuardInfo) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

var oracleDataGuardInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPhysical","kLogical","kSnapshot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleDataGuardInfoTypeTypePropEnum = append(oracleDataGuardInfoTypeTypePropEnum, v)
	}
}

const (

	// OracleDataGuardInfoTypeKPhysical captures enum value "kPhysical"
	OracleDataGuardInfoTypeKPhysical string = "kPhysical"

	// OracleDataGuardInfoTypeKLogical captures enum value "kLogical"
	OracleDataGuardInfoTypeKLogical string = "kLogical"

	// OracleDataGuardInfoTypeKSnapshot captures enum value "kSnapshot"
	OracleDataGuardInfoTypeKSnapshot string = "kSnapshot"
)

// prop value enum
func (m *OracleDataGuardInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleDataGuardInfoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleDataGuardInfo) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle data guard info based on context it is used
func (m *OracleDataGuardInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleDataGuardInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleDataGuardInfo) UnmarshalBinary(b []byte) error {
	var res OracleDataGuardInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
