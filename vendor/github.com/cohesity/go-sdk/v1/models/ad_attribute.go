// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdAttribute AdAttribute
//
// Represnts the information about the AD attribute of the object.
// It also contains information regarding whether it is system attribute
// and whether the attribute is equal on both Snapshot and Production
// AD.
//
// swagger:model AdAttribute
type AdAttribute struct {

	// Specifies the flags related to the attribute of the AD object.
	// 'kEqual' indicates the attribute value of AD object from Snapshot and
	// Production AD are equal.
	// 'kNotEqual' indicates the attribute value of AD object from Snapshot and
	// Production AD are not equal.
	// 'kNotFound' indicates attribute of the AD object is missing from both
	// Snapshot and Production AD.
	// 'kSystem' indicates this is system attribute. This can only be updated
	// by the AD internal component.
	// 'kMultiValue' indicates that the attribute is mutli-value attribute. This
	// attribute supports mutli-value merge during attribute restore operation.
	AdAttributeFlags []string `json:"adAttributeFlags"`

	// Specifies the value of the attribute of the AD object present on the
	// Production AD.
	DestinationValue *AttributeValue `json:"destinationValue,omitempty"`

	// Specifies the error message regarding the attribute
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Specifies the name of the attribute of the AD object.
	Name *string `json:"name,omitempty"`

	// Specifies the value of the attribute of the AD object here if attribute
	// is equal on both Snapshot and Production AD. I
	SameValue *AttributeValue `json:"sameValue,omitempty"`

	// Specifies the value of the attribute of the AD object present on the
	// Snapshot AD.
	SourceValue *AttributeValue `json:"sourceValue,omitempty"`
}

// Validate validates this ad attribute
func (m *AdAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdAttributeFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSameValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var adAttributeAdAttributeFlagsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kEqual","kNotEqual","kNotFound","kSystem","kMultiValue"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adAttributeAdAttributeFlagsItemsEnum = append(adAttributeAdAttributeFlagsItemsEnum, v)
	}
}

func (m *AdAttribute) validateAdAttributeFlagsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adAttributeAdAttributeFlagsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdAttribute) validateAdAttributeFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.AdAttributeFlags) { // not required
		return nil
	}

	for i := 0; i < len(m.AdAttributeFlags); i++ {

		// value enum
		if err := m.validateAdAttributeFlagsItemsEnum("adAttributeFlags"+"."+strconv.Itoa(i), "body", m.AdAttributeFlags[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *AdAttribute) validateDestinationValue(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationValue) { // not required
		return nil
	}

	if m.DestinationValue != nil {
		if err := m.DestinationValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationValue")
			}
			return err
		}
	}

	return nil
}

func (m *AdAttribute) validateSameValue(formats strfmt.Registry) error {
	if swag.IsZero(m.SameValue) { // not required
		return nil
	}

	if m.SameValue != nil {
		if err := m.SameValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sameValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sameValue")
			}
			return err
		}
	}

	return nil
}

func (m *AdAttribute) validateSourceValue(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceValue) { // not required
		return nil
	}

	if m.SourceValue != nil {
		if err := m.SourceValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceValue")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ad attribute based on the context it is used
func (m *AdAttribute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSameValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdAttribute) contextValidateDestinationValue(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationValue != nil {

		if swag.IsZero(m.DestinationValue) { // not required
			return nil
		}

		if err := m.DestinationValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationValue")
			}
			return err
		}
	}

	return nil
}

func (m *AdAttribute) contextValidateSameValue(ctx context.Context, formats strfmt.Registry) error {

	if m.SameValue != nil {

		if swag.IsZero(m.SameValue) { // not required
			return nil
		}

		if err := m.SameValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sameValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sameValue")
			}
			return err
		}
	}

	return nil
}

func (m *AdAttribute) contextValidateSourceValue(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceValue != nil {

		if swag.IsZero(m.SourceValue) { // not required
			return nil
		}

		if err := m.SourceValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceValue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdAttribute) UnmarshalBinary(b []byte) error {
	var res AdAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
