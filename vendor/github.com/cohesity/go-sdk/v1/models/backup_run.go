// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupRun Backup Run Task.
//
// Specifies details about the Backup task for a Job Run.
// A Backup task captures the original backup snapshots for each Protection
// Source in the Job.
//
// swagger:model BackupRun
type BackupRun struct {

	// Specifies the environment type that the task is protecting.
	// Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	// NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	// 'kVMware' indicates the VMware Protection Source environment.
	// 'kHyperV' indicates the HyperV Protection Source environment.
	// 'kSQL' indicates the SQL Protection Source environment.
	// 'kView' indicates the View Protection Source environment.
	// 'kPuppeteer' indicates the Cohesity's Remote Adapter.
	// 'kPhysical' indicates the physical Protection Source environment.
	// 'kPure' indicates the Pure Storage Protection Source environment.
	// 'kNimble' indicates the Nimble Storage Protection Source environment.
	// 'kAzure' indicates the Microsoft's Azure Protection Source environment.
	// 'kNetapp' indicates the Netapp Protection Source environment.
	// 'kAgent' indicates the Agent Protection Source environment.
	// 'kGenericNas' indicates the Generic Network Attached Storage Protection
	// Source environment.
	// 'kAcropolis' indicates the Acropolis Protection Source environment.
	// 'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	// 'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	// 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	// 'kGPFS' indicates IBM's GPFS Protection Source environment.
	// 'kKVM' indicates the KVM Protection Source environment.
	// 'kAWS' indicates the AWS Protection Source environment.
	// 'kExchange' indicates the Exchange Protection Source environment.
	// 'kHyperVVSS' indicates the HyperV VSS Protection Source
	// environment.
	// 'kOracle' indicates the Oracle Protection Source environment.
	// 'kGCP' indicates the Google Cloud Platform Protection Source environment.
	// 'kFlashBlade' indicates the Flash Blade Protection Source environment.
	// 'kAWSNative' indicates the AWS Native Protection Source environment.
	// 'kO365' indicates the Office 365 Protection Source environment.
	// 'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	// 'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	// 'kGCPNative' indicates the GCP Native Protection Source environment.
	// 'kAzureNative' indicates the Azure Native Protection Source environment.
	// 'kKubernetes' indicates a Kubernetes Protection Source environment.
	// 'kElastifile' indicates Elastifile Protection Source environment.
	// 'kAD' indicates Active Directory Protection Source environment.
	// 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	// 'kCassandra' indicates Cassandra Protection Source environment.
	// 'kMongoDB' indicates MongoDB Protection Source environment.
	// 'kCouchbase' indicates Couchbase Protection Source environment.
	// 'kHdfs' indicates Hdfs Protection Source environment.
	// 'kHive' indicates Hive Protection Source environment.
	// 'kHBase' indicates HBase Protection Source environment.
	// 'kUDA' indicates Universal Data Adapter Protection Source environment.
	// 'kSAPHANA' indicates SAP HANA protection source environment.
	// 'kO365Teams' indicates the Office365 Teams Protection Source environment.
	// 'kO365Group' indicates the Office365 Groups Protection Source environment.
	// 'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	// 'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	// 'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	// 'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	// kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	// kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	// kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	// kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	// kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	// kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	// kO365PublicFolders
	// Enum: ["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]
	Environment *string `json:"environment,omitempty"`

	// Specifies if an error occurred (if any) while running this task.
	// This field is populated when the status is equal to 'kFailure'.
	Error *string `json:"error,omitempty"`

	// Specifies the id of the Job Run that ran the backup task and
	// the copy tasks.
	JobRunID *int64 `json:"jobRunId,omitempty"`

	// Specifies a message after finishing the task successfully. This field
	// is optionally populated when the status is equal to 'kSuccess'.
	Message *string `json:"message,omitempty"`

	// Specifies if the metadata and snapshots associated with this Job Run
	// have been deleted.
	// This field is set to true when the snapshots, which are marked
	// for deletion, are removed by garbage collection.
	// The associated metadata is also deleted.
	MetadataDeleted *bool `json:"metadataDeleted,omitempty"`

	// Specifies if app-consistent snapshot was captured. This field is set to
	// true, if an app-consistent snapshot was taken by
	// quiescing applications and the file system before taking a backup.
	Quiesced *bool `json:"quiesced,omitempty"`

	// Specifies the type of backup such as 'kRegular', 'kFull', 'kLog' or
	// 'kSystem'.
	// 'kRegular' indicates a incremental (CBT) backup. Incremental backups
	// utilizing CBT (if supported) are captured of the target protection objects.
	// The first run of a kRegular schedule captures all the blocks.
	// 'kFull' indicates a full (no CBT) backup. A complete backup
	// (all blocks) of the target protection objects are always captured and
	// Change Block Tracking (CBT) is not utilized.
	// 'kLog' indicates a Database Log backup. Capture the database
	// transaction logs to allow rolling back to a specific point in time.
	// 'kSystem' indicates a system backup. System backups are used to do
	// bare metal recovery of the system to a specific point in time.
	// Enum: ["kRegular","kFull","kLog","kSystem"]
	RunType *string `json:"runType,omitempty"`

	// Specifies if the SLA was violated for the Job Run. This field is set
	// to true, if time to complete the Job Run is longer than the SLA
	// specified. This field is populated when the status is
	// set to 'kSuccess' or 'kFailure'.
	SLAViolated *bool `json:"slaViolated,omitempty"`

	// Specifies if backup snapshots associated
	// with this Job Run have been marked for deletion because of the
	// retention settings in the Policy or
	// if they were manually deleted from the Cohesity Dashboard.
	SnapshotsDeleted *bool `json:"snapshotsDeleted,omitempty"`

	// Specifies if backup snapshots associated
	// with this Job Run have been marked for deletion because of the
	// retention settings in the Policy or
	// if they were manually deleted from the Cohesity Dashboard.
	SnapshotsDeletedTimeUsecs *int64 `json:"snapshotsDeletedTimeUsecs,omitempty"`

	// Array of Source Object Backup Status.
	//
	// Specifies the status of backing up each source objects (such as VMs)
	// associated with the job.
	SourceBackupStatus []*SourceBackupStatus `json:"sourceBackupStatus"`

	// Specifies the aggregated stats of all Backup Run tasks in a
	// Protection Run.
	Stats *ProtectionJobRunStats `json:"stats,omitempty"`

	// Specifies the status of Backup task such as 'kRunning', 'kSuccess',
	// 'kFailure' etc.
	// kWarning, kOnHold, kMissed, kFinalizing, kWaitingToRetry.
	// Enum: ["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure"]
	Status *string `json:"status,omitempty"`

	// Array of Warnings.
	//
	// Specifies the warnings that occurred (if any) while running this task.
	Warnings []string `json:"warnings"`

	// Specifies WORM retention type for the snapshot as given by the policy.
	// When a WORM retention type is specified, the snapshot will be kept until
	// the maximum of the snapshot retention time. During that time, the
	// snapshot cannot be deleted.
	// 'kNone' implies there is no WORM retention set.
	// 'kCompliance' implies WORM retention is set for compliance reason.
	// 'kAdministrative' implies WORM retention is set for administrative purposes.
	// Enum: ["kNone","kCompliance","kAdministrative"]
	WormRetentionType *string `json:"wormRetentionType,omitempty"`
}

// Validate validates this backup run
func (m *BackupRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceBackupStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWormRetentionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var backupRunTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupRunTypeEnvironmentPropEnum = append(backupRunTypeEnvironmentPropEnum, v)
	}
}

const (

	// BackupRunEnvironmentKVMware captures enum value "kVMware"
	BackupRunEnvironmentKVMware string = "kVMware"

	// BackupRunEnvironmentKHyperV captures enum value "kHyperV"
	BackupRunEnvironmentKHyperV string = "kHyperV"

	// BackupRunEnvironmentKSQL captures enum value "kSQL"
	BackupRunEnvironmentKSQL string = "kSQL"

	// BackupRunEnvironmentKView captures enum value "kView"
	BackupRunEnvironmentKView string = "kView"

	// BackupRunEnvironmentKPuppeteer captures enum value "kPuppeteer"
	BackupRunEnvironmentKPuppeteer string = "kPuppeteer"

	// BackupRunEnvironmentKPhysical captures enum value "kPhysical"
	BackupRunEnvironmentKPhysical string = "kPhysical"

	// BackupRunEnvironmentKPure captures enum value "kPure"
	BackupRunEnvironmentKPure string = "kPure"

	// BackupRunEnvironmentKNimble captures enum value "kNimble"
	BackupRunEnvironmentKNimble string = "kNimble"
)

// prop value enum
func (m *BackupRun) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupRunTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BackupRun) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

var backupRunTypeRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kFull","kLog","kSystem"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupRunTypeRunTypePropEnum = append(backupRunTypeRunTypePropEnum, v)
	}
}

const (

	// BackupRunRunTypeKRegular captures enum value "kRegular"
	BackupRunRunTypeKRegular string = "kRegular"

	// BackupRunRunTypeKFull captures enum value "kFull"
	BackupRunRunTypeKFull string = "kFull"

	// BackupRunRunTypeKLog captures enum value "kLog"
	BackupRunRunTypeKLog string = "kLog"

	// BackupRunRunTypeKSystem captures enum value "kSystem"
	BackupRunRunTypeKSystem string = "kSystem"
)

// prop value enum
func (m *BackupRun) validateRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupRunTypeRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BackupRun) validateRunType(formats strfmt.Registry) error {
	if swag.IsZero(m.RunType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunTypeEnum("runType", "body", *m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *BackupRun) validateSourceBackupStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceBackupStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceBackupStatus); i++ {
		if swag.IsZero(m.SourceBackupStatus[i]) { // not required
			continue
		}

		if m.SourceBackupStatus[i] != nil {
			if err := m.SourceBackupStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceBackupStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceBackupStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupRun) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

var backupRunTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupRunTypeStatusPropEnum = append(backupRunTypeStatusPropEnum, v)
	}
}

const (

	// BackupRunStatusKAccepted captures enum value "kAccepted"
	BackupRunStatusKAccepted string = "kAccepted"

	// BackupRunStatusKRunning captures enum value "kRunning"
	BackupRunStatusKRunning string = "kRunning"

	// BackupRunStatusKCanceling captures enum value "kCanceling"
	BackupRunStatusKCanceling string = "kCanceling"

	// BackupRunStatusKCanceled captures enum value "kCanceled"
	BackupRunStatusKCanceled string = "kCanceled"

	// BackupRunStatusKSuccess captures enum value "kSuccess"
	BackupRunStatusKSuccess string = "kSuccess"

	// BackupRunStatusKFailure captures enum value "kFailure"
	BackupRunStatusKFailure string = "kFailure"
)

// prop value enum
func (m *BackupRun) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupRunTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BackupRun) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var backupRunTypeWormRetentionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNone","kCompliance","kAdministrative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupRunTypeWormRetentionTypePropEnum = append(backupRunTypeWormRetentionTypePropEnum, v)
	}
}

const (

	// BackupRunWormRetentionTypeKNone captures enum value "kNone"
	BackupRunWormRetentionTypeKNone string = "kNone"

	// BackupRunWormRetentionTypeKCompliance captures enum value "kCompliance"
	BackupRunWormRetentionTypeKCompliance string = "kCompliance"

	// BackupRunWormRetentionTypeKAdministrative captures enum value "kAdministrative"
	BackupRunWormRetentionTypeKAdministrative string = "kAdministrative"
)

// prop value enum
func (m *BackupRun) validateWormRetentionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupRunTypeWormRetentionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BackupRun) validateWormRetentionType(formats strfmt.Registry) error {
	if swag.IsZero(m.WormRetentionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateWormRetentionTypeEnum("wormRetentionType", "body", *m.WormRetentionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this backup run based on the context it is used
func (m *BackupRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSourceBackupStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupRun) contextValidateSourceBackupStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SourceBackupStatus); i++ {

		if m.SourceBackupStatus[i] != nil {

			if swag.IsZero(m.SourceBackupStatus[i]) { // not required
				return nil
			}

			if err := m.SourceBackupStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceBackupStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceBackupStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupRun) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupRun) UnmarshalBinary(b []byte) error {
	var res BackupRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
