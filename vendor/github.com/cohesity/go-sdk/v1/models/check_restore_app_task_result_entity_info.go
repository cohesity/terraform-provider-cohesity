// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CheckRestoreAppTaskResultEntityInfo Encapsulates info about an entity being restored to be displayed to the
// user.
//
// swagger:model CheckRestoreAppTaskResult_EntityInfo
type CheckRestoreAppTaskResultEntityInfo struct {

	// The entity being restored.
	Entity *PrivateEntityProto `json:"entity,omitempty"`

	// Display info about the full or incremental snapshot anchoring the
	// restore.
	FullSnapshotInfo *CheckRestoreAppTaskResultFullSnapshotInfo `json:"fullSnapshotInfo,omitempty"`

	// Display info about all the log snapshots in the restore path.
	LogSnapshotInfoVec []*CheckRestoreAppTaskResultLogSnapshotInfo `json:"logSnapshotInfoVec"`
}

// Validate validates this check restore app task result entity info
func (m *CheckRestoreAppTaskResultEntityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullSnapshotInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogSnapshotInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckRestoreAppTaskResultEntityInfo) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *CheckRestoreAppTaskResultEntityInfo) validateFullSnapshotInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FullSnapshotInfo) { // not required
		return nil
	}

	if m.FullSnapshotInfo != nil {
		if err := m.FullSnapshotInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullSnapshotInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullSnapshotInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CheckRestoreAppTaskResultEntityInfo) validateLogSnapshotInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.LogSnapshotInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.LogSnapshotInfoVec); i++ {
		if swag.IsZero(m.LogSnapshotInfoVec[i]) { // not required
			continue
		}

		if m.LogSnapshotInfoVec[i] != nil {
			if err := m.LogSnapshotInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logSnapshotInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logSnapshotInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this check restore app task result entity info based on the context it is used
func (m *CheckRestoreAppTaskResultEntityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullSnapshotInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogSnapshotInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckRestoreAppTaskResultEntityInfo) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *CheckRestoreAppTaskResultEntityInfo) contextValidateFullSnapshotInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FullSnapshotInfo != nil {

		if swag.IsZero(m.FullSnapshotInfo) { // not required
			return nil
		}

		if err := m.FullSnapshotInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullSnapshotInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullSnapshotInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CheckRestoreAppTaskResultEntityInfo) contextValidateLogSnapshotInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LogSnapshotInfoVec); i++ {

		if m.LogSnapshotInfoVec[i] != nil {

			if swag.IsZero(m.LogSnapshotInfoVec[i]) { // not required
				return nil
			}

			if err := m.LogSnapshotInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logSnapshotInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logSnapshotInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CheckRestoreAppTaskResultEntityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckRestoreAppTaskResultEntityInfo) UnmarshalBinary(b []byte) error {
	var res CheckRestoreAppTaskResultEntityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
