// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoPreferentialTier IO Preferential Tier.
//
// Specifies the preferred storage tier for IO operations.
//
// swagger:model IoPreferentialTier
type IoPreferentialTier struct {

	// Specifies the preferred storage tier used by Apollo as its working directory.
	ApolloIOPreferentialTier []*string `json:"apolloIOPreferentialTier"`

	// Specifies the preferred storage tier used by Apollo as its actions WAL.
	ApolloWalIOPreferentialTier []*string `json:"apolloWalIOPreferentialTier"`

	// Specifies the list of perferred storage tiers used by Athena.
	AthenaIOPreferentialTier []*string `json:"athenaIOPreferentialTier"`

	// Specifies the list of perferred storage tiers used by Athena for slower storage.
	AthenaSlowerIOPreferentialTier []*string `json:"athenaSlowerIOPreferentialTier"`

	// Specifies the list of perferred storage tiers used by cloud chunk repository.
	CloudChunkRepoIOPreferentialTier []*string `json:"cloudChunkRepoIOPreferentialTier"`

	// Specifies the usage percentage thresholds for the correponding storage tier.
	DownTierUsagePercentThresholds []int32 `json:"downTierUsagePercentThresholds"`

	// Specifies the preferred storage tier used by Groot as its working directory.
	GrootIOPreferentialTier []*string `json:"grootIOPreferentialTier"`

	// Specifies the list of perferred storage tiers used by Hydra for offloading.
	HydraDowntierIOPreferentialTier []*string `json:"hydraDowntierIOPreferentialTier"`

	// Specifies the list of perferred storage tiers used by Hydra.
	HydraIOPreferentialTier []*string `json:"hydraIOPreferentialTier"`

	// Specifies the list of perferred storage tiers used by librarian.
	LibrarianIOPreferentialTier []*string `json:"librarianIOPreferentialTier"`

	// Specifies the order of perferred storage tiers for random IO operations.
	RandomIOPreferentialTier []*string `json:"randomIOPreferentialTier"`

	// Specifies the list of perferred storage tiers used by Scribe.
	ScribeIOPreferentialTier []*string `json:"scribeIOPreferentialTier"`

	// Specifies the preferred storage tier for sequential IO operations.
	SequentialIOPreferentialTier []*string `json:"sequentialIOPreferentialTier"`

	// Specifies the list of perferred storage tiers used by Yoda.
	YodaIOPreferentialTier []*string `json:"yodaIOPreferentialTier"`
}

// Validate validates this io preferential tier
func (m *IoPreferentialTier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApolloIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApolloWalIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAthenaIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAthenaSlowerIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudChunkRepoIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrootIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHydraDowntierIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHydraIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibrarianIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRandomIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScribeIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequentialIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYodaIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ioPreferentialTierApolloIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierApolloIOPreferentialTierItemsEnum = append(ioPreferentialTierApolloIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateApolloIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierApolloIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateApolloIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.ApolloIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.ApolloIOPreferentialTier); i++ {
		if swag.IsZero(m.ApolloIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateApolloIOPreferentialTierItemsEnum("apolloIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.ApolloIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierApolloWalIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierApolloWalIOPreferentialTierItemsEnum = append(ioPreferentialTierApolloWalIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateApolloWalIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierApolloWalIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateApolloWalIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.ApolloWalIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.ApolloWalIOPreferentialTier); i++ {
		if swag.IsZero(m.ApolloWalIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateApolloWalIOPreferentialTierItemsEnum("apolloWalIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.ApolloWalIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierAthenaIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierAthenaIOPreferentialTierItemsEnum = append(ioPreferentialTierAthenaIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateAthenaIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierAthenaIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateAthenaIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.AthenaIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.AthenaIOPreferentialTier); i++ {
		if swag.IsZero(m.AthenaIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateAthenaIOPreferentialTierItemsEnum("athenaIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.AthenaIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierAthenaSlowerIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierAthenaSlowerIOPreferentialTierItemsEnum = append(ioPreferentialTierAthenaSlowerIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateAthenaSlowerIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierAthenaSlowerIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateAthenaSlowerIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.AthenaSlowerIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.AthenaSlowerIOPreferentialTier); i++ {
		if swag.IsZero(m.AthenaSlowerIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateAthenaSlowerIOPreferentialTierItemsEnum("athenaSlowerIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.AthenaSlowerIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierCloudChunkRepoIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierCloudChunkRepoIOPreferentialTierItemsEnum = append(ioPreferentialTierCloudChunkRepoIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateCloudChunkRepoIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierCloudChunkRepoIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateCloudChunkRepoIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudChunkRepoIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudChunkRepoIOPreferentialTier); i++ {
		if swag.IsZero(m.CloudChunkRepoIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateCloudChunkRepoIOPreferentialTierItemsEnum("cloudChunkRepoIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.CloudChunkRepoIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierGrootIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierGrootIOPreferentialTierItemsEnum = append(ioPreferentialTierGrootIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateGrootIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierGrootIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateGrootIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.GrootIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.GrootIOPreferentialTier); i++ {
		if swag.IsZero(m.GrootIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateGrootIOPreferentialTierItemsEnum("grootIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.GrootIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierHydraDowntierIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierHydraDowntierIOPreferentialTierItemsEnum = append(ioPreferentialTierHydraDowntierIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateHydraDowntierIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierHydraDowntierIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateHydraDowntierIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.HydraDowntierIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.HydraDowntierIOPreferentialTier); i++ {
		if swag.IsZero(m.HydraDowntierIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateHydraDowntierIOPreferentialTierItemsEnum("hydraDowntierIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.HydraDowntierIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierHydraIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierHydraIOPreferentialTierItemsEnum = append(ioPreferentialTierHydraIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateHydraIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierHydraIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateHydraIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.HydraIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.HydraIOPreferentialTier); i++ {
		if swag.IsZero(m.HydraIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateHydraIOPreferentialTierItemsEnum("hydraIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.HydraIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierLibrarianIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierLibrarianIOPreferentialTierItemsEnum = append(ioPreferentialTierLibrarianIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateLibrarianIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierLibrarianIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateLibrarianIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.LibrarianIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.LibrarianIOPreferentialTier); i++ {
		if swag.IsZero(m.LibrarianIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateLibrarianIOPreferentialTierItemsEnum("librarianIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.LibrarianIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierRandomIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierRandomIOPreferentialTierItemsEnum = append(ioPreferentialTierRandomIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateRandomIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierRandomIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateRandomIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.RandomIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.RandomIOPreferentialTier); i++ {
		if swag.IsZero(m.RandomIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateRandomIOPreferentialTierItemsEnum("randomIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.RandomIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierScribeIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierScribeIOPreferentialTierItemsEnum = append(ioPreferentialTierScribeIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateScribeIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierScribeIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateScribeIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.ScribeIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.ScribeIOPreferentialTier); i++ {
		if swag.IsZero(m.ScribeIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateScribeIOPreferentialTierItemsEnum("scribeIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.ScribeIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierSequentialIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierSequentialIOPreferentialTierItemsEnum = append(ioPreferentialTierSequentialIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateSequentialIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierSequentialIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateSequentialIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.SequentialIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.SequentialIOPreferentialTier); i++ {
		if swag.IsZero(m.SequentialIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateSequentialIOPreferentialTierItemsEnum("sequentialIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.SequentialIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var ioPreferentialTierYodaIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPcieSsd","kSataSsd","kSataHdd","kCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioPreferentialTierYodaIOPreferentialTierItemsEnum = append(ioPreferentialTierYodaIOPreferentialTierItemsEnum, v)
	}
}

func (m *IoPreferentialTier) validateYodaIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioPreferentialTierYodaIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoPreferentialTier) validateYodaIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.YodaIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.YodaIOPreferentialTier); i++ {
		if swag.IsZero(m.YodaIOPreferentialTier[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateYodaIOPreferentialTierItemsEnum("yodaIOPreferentialTier"+"."+strconv.Itoa(i), "body", *m.YodaIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this io preferential tier based on context it is used
func (m *IoPreferentialTier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IoPreferentialTier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoPreferentialTier) UnmarshalBinary(b []byte) error {
	var res IoPreferentialTier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
