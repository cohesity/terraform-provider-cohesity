// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverArg RecoverArg represents the argument for recover VM operations.
//
// swagger:model RecoverArg
type RecoverArg struct {

	// Defines the Acropolis specific params for restore tasks.
	AcropolisParams *RestoreAcropolisVMsParams `json:"acropolisParams,omitempty"`

	// Type of restore to perform. If it is not not specified, it will be
	// assumed to be kRecoverVMs.
	Action *int32 `json:"action,omitempty"`

	// ContinueRestoreOnError specifies whether to continue with the recover
	// operation if recover of any object fails.
	ContinueRestoreOnError *bool `json:"continueRestoreOnError,omitempty"`

	// DatastoreEntity is the datastore entity where the object's files should be
	// recovered to.
	//
	// This field is optional if object is being recovered to its original parent
	// source. If not specified, the object's files will be recovered to their
	// original datastore locations. This field is mandatory if object is being
	// recovered to a different resource pool or to a different parent source.
	DatastoreEntity *PrivateEntityProto `json:"datastoreEntity,omitempty"`

	// Specifies parameters to recover VMs to cloud. Only populate this if
	// deploying VMs to cloud.
	DeployVmsToCloudParams *DeployVMsToCloudParams `json:"deployVmsToCloudParams,omitempty"`

	// Defines the HyperV specific params for restore tasks.
	HypervParams *RestoreHyperVVMParams `json:"hypervParams,omitempty"`

	// Specifies parameters which are specific to Kubernetes namespace recoveries.
	KubernetesParams *RestoreKubernetesNamespacesParams `json:"kubernetesParams,omitempty"`

	// Defines the KVM specific params for restore tasks.
	KvmParams *RestoreKVMVMsParams `json:"kvmParams,omitempty"`

	// Contains information needed when mounting volumes. If specified, only name
	// and RestoreParentSource options apply for mounting volumes.
	MountVolumesParams *MountVolumesParams `json:"mountVolumesParams,omitempty"`

	// Name is the name of the restore task. This field is mandatory.
	Name *string `json:"name,omitempty"`

	// Objects is the list of objects to restore.
	Objects []*RestoreObject `json:"objects"`

	// Specifies the parameters to recover OneDrive items.
	OneDriveParams *RestoreOneDriveParams `json:"oneDriveParams,omitempty"`

	// Specifies parameters to recover Outlook Mailboxes, Folders or Items.
	OutlookParams *RestoreOutlookParams `json:"outlookParams,omitempty"`

	// PowerStateConfig is an optional power state configuration to be applied to
	// the recovered object.
	//
	// By default, objects are recovered in the powered on state.
	PowerStateConfig *PowerStateConfigProto `json:"powerStateConfig,omitempty"`

	// PreserveTags specifies whether or not to preserve tags during the
	// operations. This is used for VMware and HyperV.
	PreserveTags *bool `json:"preserveTags,omitempty"`

	// Specifies the parameters to recover O365 Public Folders items.
	PublicFoldersParams *RestoreO365PublicFoldersParams `json:"publicFoldersParams,omitempty"`

	// Specifies parameters to recover virtual disks.
	RecoverVirtualDiskParams *RecoverVirtualDiskParams `json:"recoverVirtualDiskParams,omitempty"`

	// Defines the params for physical server volume restore tasks.
	RecoverVolumesParams *RecoverVolumesParams `json:"recoverVolumesParams,omitempty"`

	// RenameRestoredObjectParam field can be used to specify the transformation
	// ( i.e. prefix/suffix) to be applied to the source object name to derive the
	// new name of the recovered object. By default, objects are recovered with
	// their original name.
	RenameRestoredObjectParam *RenameObjectParamProto `json:"renameRestoredObjectParam,omitempty"`

	// Specifies the name transformation to be applied to the vApp during restore.
	RenameRestoredVappParams *RenameObjectParamProto `json:"renameRestoredVappParams,omitempty"`

	// ResourcePoolEntity is the resource pool entity where the recovered objects
	// will be attached.
	//
	// This field is optional for a recover task if the objects are being
	// recovered to its original parent source. If not specified, recovered
	// objects will be attached to its original resource pool. This field is
	// mandatory if objects are being restored to a different parent source.
	ResourcePoolEntity *PrivateEntityProto `json:"resourcePoolEntity,omitempty"`

	// RestoreParentSource is an optional registered parent source to which
	// objects are to be recovered. If not specified, objects are recovered back
	// to the original source that was managing the objects.
	RestoreParentSource *PrivateEntityProto `json:"restoreParentSource,omitempty"`

	// Vlan Params associated with the restore.
	// If this is not specified, then the VLAN settings will be automatically
	// selected from one of the following options:
	// a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be
	// automatically based on the client's (e.g. ESXI host) IP address.
	// b. If VLANs are not configured on Cohesity, then the partition hostname or
	// VIPs will be used for restores.
	RestoreVlanParams *VlanParams `json:"restoreVlanParams,omitempty"`

	// RestoredObjectsNetworkConfig  is the network configuration to be applied to
	// the recovered object.
	//
	// By default, if objects are being recovered to their original parent source,
	// then either original network configuration can be applied or network can be
	// disabled for the recovered object. If objects are being recovered to
	// different resource pool or to different parent source, either network
	// configuration can be changed or network can be disabled for the recovered
	// object.
	//
	// If user want to keep the original network setting for recover task, then
	// this field should not be set.
	RestoredObjectsNetworkConfig *RestoredObjectNetworkConfigProto `json:"restoredObjectsNetworkConfig,omitempty"`

	// Specifies the parameters to recover SharePoint Site items.
	SharePointParams *RestoreSiteParams `json:"sharePointParams,omitempty"`

	// Specifies the way data needs to be retrieved/restored from the vault.
	VaultRestoreParams *VaultParamsRestoreParams `json:"vaultRestoreParams,omitempty"`

	// Specifies the Vcd config info parameter for restore tasks.
	VcdConfigParams *RestoredObjectVCDConfigProto `json:"vcdConfigParams,omitempty"`

	// Target view into which the objects are to be cloned when doing recovery
	// for NAS.
	ViewName *string `json:"viewName,omitempty"`

	// ViewParams are the parameters to set qos on View specified by ViewName
	// for NAS recovery.
	ViewParams *UpdateViewParam `json:"viewParams,omitempty"`

	// Defines special VMWare specific params that are not provided at top level.
	VmwareParams *RestoreVMwareVMParams `json:"vmwareParams,omitempty"`
}

// Validate validates this recover arg
func (m *RecoverArg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcropolisParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatastoreEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployVmsToCloudParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKvmParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountVolumesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneDriveParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutlookParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerStateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicFoldersParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverVirtualDiskParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverVolumesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredObjectParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredVappParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePoolEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreParentSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredObjectsNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharePointParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultRestoreParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdConfigParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverArg) validateAcropolisParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisParams) { // not required
		return nil
	}

	if m.AcropolisParams != nil {
		if err := m.AcropolisParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateDatastoreEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreEntity) { // not required
		return nil
	}

	if m.DatastoreEntity != nil {
		if err := m.DatastoreEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateDeployVmsToCloudParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToCloudParams) { // not required
		return nil
	}

	if m.DeployVmsToCloudParams != nil {
		if err := m.DeployVmsToCloudParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateHypervParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParams) { // not required
		return nil
	}

	if m.HypervParams != nil {
		if err := m.HypervParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateKubernetesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesParams) { // not required
		return nil
	}

	if m.KubernetesParams != nil {
		if err := m.KubernetesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateKvmParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KvmParams) { // not required
		return nil
	}

	if m.KvmParams != nil {
		if err := m.KvmParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kvmParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateMountVolumesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MountVolumesParams) { // not required
		return nil
	}

	if m.MountVolumesParams != nil {
		if err := m.MountVolumesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountVolumesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountVolumesParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverArg) validateOneDriveParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OneDriveParams) { // not required
		return nil
	}

	if m.OneDriveParams != nil {
		if err := m.OneDriveParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateOutlookParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OutlookParams) { // not required
		return nil
	}

	if m.OutlookParams != nil {
		if err := m.OutlookParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validatePowerStateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerStateConfig) { // not required
		return nil
	}

	if m.PowerStateConfig != nil {
		if err := m.PowerStateConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerStateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerStateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validatePublicFoldersParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicFoldersParams) { // not required
		return nil
	}

	if m.PublicFoldersParams != nil {
		if err := m.PublicFoldersParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicFoldersParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicFoldersParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateRecoverVirtualDiskParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverVirtualDiskParams) { // not required
		return nil
	}

	if m.RecoverVirtualDiskParams != nil {
		if err := m.RecoverVirtualDiskParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVirtualDiskParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVirtualDiskParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateRecoverVolumesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverVolumesParams) { // not required
		return nil
	}

	if m.RecoverVolumesParams != nil {
		if err := m.RecoverVolumesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVolumesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVolumesParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateRenameRestoredObjectParam(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredObjectParam) { // not required
		return nil
	}

	if m.RenameRestoredObjectParam != nil {
		if err := m.RenameRestoredObjectParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateRenameRestoredVappParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredVappParams) { // not required
		return nil
	}

	if m.RenameRestoredVappParams != nil {
		if err := m.RenameRestoredVappParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredVappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredVappParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateResourcePoolEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePoolEntity) { // not required
		return nil
	}

	if m.ResourcePoolEntity != nil {
		if err := m.ResourcePoolEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateRestoreParentSource(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreParentSource) { // not required
		return nil
	}

	if m.RestoreParentSource != nil {
		if err := m.RestoreParentSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParentSource")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateRestoreVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreVlanParams) { // not required
		return nil
	}

	if m.RestoreVlanParams != nil {
		if err := m.RestoreVlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateRestoredObjectsNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredObjectsNetworkConfig) { // not required
		return nil
	}

	if m.RestoredObjectsNetworkConfig != nil {
		if err := m.RestoredObjectsNetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredObjectsNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredObjectsNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateSharePointParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SharePointParams) { // not required
		return nil
	}

	if m.SharePointParams != nil {
		if err := m.SharePointParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharePointParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharePointParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateVaultRestoreParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultRestoreParams) { // not required
		return nil
	}

	if m.VaultRestoreParams != nil {
		if err := m.VaultRestoreParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vaultRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vaultRestoreParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateVcdConfigParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdConfigParams) { // not required
		return nil
	}

	if m.VcdConfigParams != nil {
		if err := m.VcdConfigParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfigParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfigParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateViewParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewParams) { // not required
		return nil
	}

	if m.ViewParams != nil {
		if err := m.ViewParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover arg based on the context it is used
func (m *RecoverArg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcropolisParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatastoreEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployVmsToCloudParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKvmParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountVolumesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneDriveParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutlookParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerStateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicFoldersParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverVirtualDiskParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverVolumesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredObjectParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredVappParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourcePoolEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreParentSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredObjectsNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharePointParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVaultRestoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdConfigParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverArg) contextValidateAcropolisParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AcropolisParams != nil {

		if swag.IsZero(m.AcropolisParams) { // not required
			return nil
		}

		if err := m.AcropolisParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateDatastoreEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.DatastoreEntity != nil {

		if swag.IsZero(m.DatastoreEntity) { // not required
			return nil
		}

		if err := m.DatastoreEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateDeployVmsToCloudParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToCloudParams != nil {

		if swag.IsZero(m.DeployVmsToCloudParams) { // not required
			return nil
		}

		if err := m.DeployVmsToCloudParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateHypervParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParams != nil {

		if swag.IsZero(m.HypervParams) { // not required
			return nil
		}

		if err := m.HypervParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateKubernetesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesParams != nil {

		if swag.IsZero(m.KubernetesParams) { // not required
			return nil
		}

		if err := m.KubernetesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateKvmParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KvmParams != nil {

		if swag.IsZero(m.KvmParams) { // not required
			return nil
		}

		if err := m.KvmParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kvmParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateMountVolumesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MountVolumesParams != nil {

		if swag.IsZero(m.MountVolumesParams) { // not required
			return nil
		}

		if err := m.MountVolumesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountVolumesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountVolumesParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverArg) contextValidateOneDriveParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OneDriveParams != nil {

		if swag.IsZero(m.OneDriveParams) { // not required
			return nil
		}

		if err := m.OneDriveParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateOutlookParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OutlookParams != nil {

		if swag.IsZero(m.OutlookParams) { // not required
			return nil
		}

		if err := m.OutlookParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidatePowerStateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerStateConfig != nil {

		if swag.IsZero(m.PowerStateConfig) { // not required
			return nil
		}

		if err := m.PowerStateConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerStateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerStateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidatePublicFoldersParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicFoldersParams != nil {

		if swag.IsZero(m.PublicFoldersParams) { // not required
			return nil
		}

		if err := m.PublicFoldersParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicFoldersParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicFoldersParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateRecoverVirtualDiskParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverVirtualDiskParams != nil {

		if swag.IsZero(m.RecoverVirtualDiskParams) { // not required
			return nil
		}

		if err := m.RecoverVirtualDiskParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVirtualDiskParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVirtualDiskParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateRecoverVolumesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverVolumesParams != nil {

		if swag.IsZero(m.RecoverVolumesParams) { // not required
			return nil
		}

		if err := m.RecoverVolumesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVolumesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVolumesParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateRenameRestoredObjectParam(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredObjectParam != nil {

		if swag.IsZero(m.RenameRestoredObjectParam) { // not required
			return nil
		}

		if err := m.RenameRestoredObjectParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateRenameRestoredVappParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredVappParams != nil {

		if swag.IsZero(m.RenameRestoredVappParams) { // not required
			return nil
		}

		if err := m.RenameRestoredVappParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredVappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredVappParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateResourcePoolEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourcePoolEntity != nil {

		if swag.IsZero(m.ResourcePoolEntity) { // not required
			return nil
		}

		if err := m.ResourcePoolEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateRestoreParentSource(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreParentSource != nil {

		if swag.IsZero(m.RestoreParentSource) { // not required
			return nil
		}

		if err := m.RestoreParentSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParentSource")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateRestoreVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreVlanParams != nil {

		if swag.IsZero(m.RestoreVlanParams) { // not required
			return nil
		}

		if err := m.RestoreVlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateRestoredObjectsNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredObjectsNetworkConfig != nil {

		if swag.IsZero(m.RestoredObjectsNetworkConfig) { // not required
			return nil
		}

		if err := m.RestoredObjectsNetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredObjectsNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredObjectsNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateSharePointParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SharePointParams != nil {

		if swag.IsZero(m.SharePointParams) { // not required
			return nil
		}

		if err := m.SharePointParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharePointParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharePointParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateVaultRestoreParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VaultRestoreParams != nil {

		if swag.IsZero(m.VaultRestoreParams) { // not required
			return nil
		}

		if err := m.VaultRestoreParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vaultRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vaultRestoreParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateVcdConfigParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdConfigParams != nil {

		if swag.IsZero(m.VcdConfigParams) { // not required
			return nil
		}

		if err := m.VcdConfigParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfigParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfigParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateViewParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewParams != nil {

		if swag.IsZero(m.ViewParams) { // not required
			return nil
		}

		if err := m.ViewParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverArg) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverArg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverArg) UnmarshalBinary(b []byte) error {
	var res RecoverArg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
