// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PhysicalSpecialParameters Physical Source Special Job Parameters.
//
// Specifies additional special settings applicable for a Protection Source
// of 'kPhysical' type in a Protection Job.
//
// swagger:model PhysicalSpecialParameters
type PhysicalSpecialParameters struct {

	// Specifies parameters that are related to applications running on the
	// Protection Source.
	ApplicationParameters *ApplicationParameters `json:"applicationParameters,omitempty"`

	// Specifies whether to allow system backup using 3rd party tools installed
	// on the Protection Host. System backups are used for doing bare metal
	// recovery later. This field is applicable only for System backups.
	EnableSystemBackup *bool `json:"enableSystemBackup,omitempty"`

	// Array of File Paths to Back Up.
	//
	// Specifies a list of directories or files to protect in a
	// Physical Server.
	FilePaths []*FilePathParameters `json:"filePaths"`

	// Specifies metadata path on source. This file contains absolute paths of
	// files that needs to be backed up on the same source.
	MetadataFilePath *string `json:"metadataFilePath,omitempty"`

	// Specifies mounttypes of nested volumes to be skipped.
	SkipNestedVolumesVec []string `json:"skipNestedVolumesVec"`

	// Specifies whether to use SkipNestedVolumes vec to skip nested mounts.
	UsesSkipNestedVolumesVec *bool `json:"usesSkipNestedVolumesVec,omitempty"`

	// Array of Mounted Volumes to Back Up.
	//
	// Specifies the subset of mounted volumes to protect in
	// a Physical Server. If not specified, all mounted volumes on a
	// Physical Server are protected.
	VolumeGUID []string `json:"volumeGuid"`

	// Specifies parameters applicable only to Windows hosts.
	WindowsParameters *WindowsHostSnapshotParameters `json:"windowsParameters,omitempty"`
}

// Validate validates this physical special parameters
func (m *PhysicalSpecialParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindowsParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalSpecialParameters) validateApplicationParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationParameters) { // not required
		return nil
	}

	if m.ApplicationParameters != nil {
		if err := m.ApplicationParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationParameters")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalSpecialParameters) validateFilePaths(formats strfmt.Registry) error {
	if swag.IsZero(m.FilePaths) { // not required
		return nil
	}

	for i := 0; i < len(m.FilePaths); i++ {
		if swag.IsZero(m.FilePaths[i]) { // not required
			continue
		}

		if m.FilePaths[i] != nil {
			if err := m.FilePaths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filePaths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filePaths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PhysicalSpecialParameters) validateWindowsParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.WindowsParameters) { // not required
		return nil
	}

	if m.WindowsParameters != nil {
		if err := m.WindowsParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("windowsParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("windowsParameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this physical special parameters based on the context it is used
func (m *PhysicalSpecialParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilePaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWindowsParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalSpecialParameters) contextValidateApplicationParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationParameters != nil {

		if swag.IsZero(m.ApplicationParameters) { // not required
			return nil
		}

		if err := m.ApplicationParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationParameters")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalSpecialParameters) contextValidateFilePaths(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilePaths); i++ {

		if m.FilePaths[i] != nil {

			if swag.IsZero(m.FilePaths[i]) { // not required
				return nil
			}

			if err := m.FilePaths[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filePaths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filePaths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PhysicalSpecialParameters) contextValidateWindowsParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.WindowsParameters != nil {

		if swag.IsZero(m.WindowsParameters) { // not required
			return nil
		}

		if err := m.WindowsParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("windowsParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("windowsParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalSpecialParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalSpecialParameters) UnmarshalBinary(b []byte) error {
	var res PhysicalSpecialParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
