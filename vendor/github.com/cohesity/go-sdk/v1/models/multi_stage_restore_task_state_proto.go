// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MultiStageRestoreTaskStateProto Persistent state for a multi-stage restore task.
//
// swagger:model MultiStageRestoreTaskStateProto
type MultiStageRestoreTaskStateProto struct {

	// Captures the options(parameters) corresponding to the multi-stage restore
	// task.
	MultiStageRestoreOptions *UpdateRestoreTaskOptions `json:"multiStageRestoreOptions,omitempty"`

	// Captures the size of the data being synced to the target by this restore
	// task.
	SyncSizeBytes *int64 `json:"syncSizeBytes,omitempty"`

	// Captures the target entity's sync time in microseconds. This field usage
	// depends on the type of the multi-stage restore.
	//
	// For a VMware non-CDP multi-stage restore, this represents the start time
	// of the backup run that the target VM is synced with.
	//
	// For a VMware CDP multi-stage restore(yet to be implemented), this
	// represents the time of the last applied IO on the target VM.
	SyncTimeUsecs *int64 `json:"syncTimeUsecs,omitempty"`
}

// Validate validates this multi stage restore task state proto
func (m *MultiStageRestoreTaskStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMultiStageRestoreOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MultiStageRestoreTaskStateProto) validateMultiStageRestoreOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.MultiStageRestoreOptions) { // not required
		return nil
	}

	if m.MultiStageRestoreOptions != nil {
		if err := m.MultiStageRestoreOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiStageRestoreOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multiStageRestoreOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this multi stage restore task state proto based on the context it is used
func (m *MultiStageRestoreTaskStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMultiStageRestoreOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MultiStageRestoreTaskStateProto) contextValidateMultiStageRestoreOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.MultiStageRestoreOptions != nil {

		if swag.IsZero(m.MultiStageRestoreOptions) { // not required
			return nil
		}

		if err := m.MultiStageRestoreOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiStageRestoreOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multiStageRestoreOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MultiStageRestoreTaskStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MultiStageRestoreTaskStateProto) UnmarshalBinary(b []byte) error {
	var res MultiStageRestoreTaskStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
