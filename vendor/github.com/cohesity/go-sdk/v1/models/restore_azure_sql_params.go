// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreAzureSQLParams Azure SQL environent specific restore Parameters.
//
// swagger:model RestoreAzureSQLParams
type RestoreAzureSQLParams struct {

	// The type of temporary disk to be provisioned for database restore.
	DiskType *int32 `json:"diskType,omitempty"`

	// The new name of the database.
	// It is optional, if not specified then backup time database name will be
	// used.
	NewDatabaseName *string `json:"newDatabaseName,omitempty"`

	// If false, recovery will fail if the database (with same name as this
	// request) exists on the target server.
	// If true, recovery will delete/overwrite the existing database as part of
	// recovery.
	OverwriteDatabase *bool `json:"overwriteDatabase,omitempty"`

	// SKU for the restored DB in case we want to override the backup time SKU.
	RestoredDbSku *EntitySKU `json:"restoredDbSku,omitempty"`

	// SQL package options to be used by restore.
	SQLPackageOptions *SQLPackage `json:"sqlPackageOptions,omitempty"`
}

// Validate validates this restore azure SQL params
func (m *RestoreAzureSQLParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestoredDbSku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLPackageOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAzureSQLParams) validateRestoredDbSku(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredDbSku) { // not required
		return nil
	}

	if m.RestoredDbSku != nil {
		if err := m.RestoredDbSku.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredDbSku")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredDbSku")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAzureSQLParams) validateSQLPackageOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLPackageOptions) { // not required
		return nil
	}

	if m.SQLPackageOptions != nil {
		if err := m.SQLPackageOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlPackageOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlPackageOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore azure SQL params based on the context it is used
func (m *RestoreAzureSQLParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRestoredDbSku(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLPackageOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAzureSQLParams) contextValidateRestoredDbSku(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredDbSku != nil {

		if swag.IsZero(m.RestoredDbSku) { // not required
			return nil
		}

		if err := m.RestoredDbSku.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredDbSku")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredDbSku")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAzureSQLParams) contextValidateSQLPackageOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLPackageOptions != nil {

		if swag.IsZero(m.SQLPackageOptions) { // not required
			return nil
		}

		if err := m.SQLPackageOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlPackageOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlPackageOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreAzureSQLParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreAzureSQLParams) UnmarshalBinary(b []byte) error {
	var res RestoreAzureSQLParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
