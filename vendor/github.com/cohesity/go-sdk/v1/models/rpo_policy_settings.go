// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RpoPolicySettings RPO Policy.
//
// Specifies all the additional settings that are applicable only
// to an RPO policy. This can include storage domain, settings of different
// environments, etc.
//
// swagger:model RpoPolicySettings
type RpoPolicySettings struct {

	// Alerting configuration can be used to specify optional details for the
	// alerts triggered by this policy.
	AlertingConfig *AlertingConfig `json:"alertingConfig,omitempty"`

	// Array of Job Events.
	//
	// During Job Runs, the following Job Events are generated:
	// 1) Job succeeds 2) Job fails
	// 3) Job violates the SLA
	// These Job Events can cause Alerts to be generated.
	// 'kSuccess' means the Protection Job succeeded.
	// 'kFailure' means the Protection Job failed.
	// 'kSlaViolation' means the Protection Job took longer than the time period
	// specified in the SLA.
	AlertingPolicy []string `json:"alertingPolicy"`

	// Specifies the policy level additional environment specific backup params.
	// If this is not specified, default actions will be taken,  for example for
	// NAS environments, all objects within the source will be backed up.
	EnvironmentTypeJobParams *EnvironmentTypeJobParameters `json:"environmentTypeJobParams,omitempty"`

	// Specifies the indexing policy for objects backed up by this policy.
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`

	// Specifies the QoS policy type to use.
	// 'kBackupHDD' indicates the Cohesity Cluster writes data directly to
	// the HDD tier for this Protection Job. This is the recommended setting.
	// 'kBackupSSD' indicates the Cohesity Cluster writes data directly to
	// the SSD tier for this Protection Job. Only specify this policy if
	// you need fast ingest speed for a small number of Protection Jobs.
	// 'kTestAndDevHigh' indicated the test and dev workload.
	// 'kBackupAll' indicates the Cohesity Cluster writes data directly to
	// the HDD tier and the SSD tier for this Protection Job.
	// Enum: ["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]
	QosType *string `json:"qosType,omitempty"`

	// Specifies the Storage Domain to which data will be written.
	StorageDomainID *int64 `json:"storageDomainId,omitempty"`
}

// Validate validates this rpo policy settings
func (m *RpoPolicySettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertingConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentTypeJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndexingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RpoPolicySettings) validateAlertingConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertingConfig) { // not required
		return nil
	}

	if m.AlertingConfig != nil {
		if err := m.AlertingConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertingConfig")
			}
			return err
		}
	}

	return nil
}

var rpoPolicySettingsAlertingPolicyItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSuccess","kFailure","kSlaViolation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rpoPolicySettingsAlertingPolicyItemsEnum = append(rpoPolicySettingsAlertingPolicyItemsEnum, v)
	}
}

func (m *RpoPolicySettings) validateAlertingPolicyItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rpoPolicySettingsAlertingPolicyItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RpoPolicySettings) validateAlertingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertingPolicy) { // not required
		return nil
	}

	for i := 0; i < len(m.AlertingPolicy); i++ {

		// value enum
		if err := m.validateAlertingPolicyItemsEnum("alertingPolicy"+"."+strconv.Itoa(i), "body", m.AlertingPolicy[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *RpoPolicySettings) validateEnvironmentTypeJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvironmentTypeJobParams) { // not required
		return nil
	}

	if m.EnvironmentTypeJobParams != nil {
		if err := m.EnvironmentTypeJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmentTypeJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("environmentTypeJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *RpoPolicySettings) validateIndexingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.IndexingPolicy) { // not required
		return nil
	}

	if m.IndexingPolicy != nil {
		if err := m.IndexingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indexingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indexingPolicy")
			}
			return err
		}
	}

	return nil
}

var rpoPolicySettingsTypeQosTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rpoPolicySettingsTypeQosTypePropEnum = append(rpoPolicySettingsTypeQosTypePropEnum, v)
	}
}

const (

	// RpoPolicySettingsQosTypeKBackupHDD captures enum value "kBackupHDD"
	RpoPolicySettingsQosTypeKBackupHDD string = "kBackupHDD"

	// RpoPolicySettingsQosTypeKBackupSSD captures enum value "kBackupSSD"
	RpoPolicySettingsQosTypeKBackupSSD string = "kBackupSSD"

	// RpoPolicySettingsQosTypeKTestAndDevHigh captures enum value "kTestAndDevHigh"
	RpoPolicySettingsQosTypeKTestAndDevHigh string = "kTestAndDevHigh"

	// RpoPolicySettingsQosTypeKBackupAll captures enum value "kBackupAll"
	RpoPolicySettingsQosTypeKBackupAll string = "kBackupAll"
)

// prop value enum
func (m *RpoPolicySettings) validateQosTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rpoPolicySettingsTypeQosTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RpoPolicySettings) validateQosType(formats strfmt.Registry) error {
	if swag.IsZero(m.QosType) { // not required
		return nil
	}

	// value enum
	if err := m.validateQosTypeEnum("qosType", "body", *m.QosType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rpo policy settings based on the context it is used
func (m *RpoPolicySettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironmentTypeJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIndexingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RpoPolicySettings) contextValidateAlertingConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertingConfig != nil {

		if swag.IsZero(m.AlertingConfig) { // not required
			return nil
		}

		if err := m.AlertingConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertingConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RpoPolicySettings) contextValidateEnvironmentTypeJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.EnvironmentTypeJobParams != nil {

		if swag.IsZero(m.EnvironmentTypeJobParams) { // not required
			return nil
		}

		if err := m.EnvironmentTypeJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmentTypeJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("environmentTypeJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *RpoPolicySettings) contextValidateIndexingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.IndexingPolicy != nil {

		if swag.IsZero(m.IndexingPolicy) { // not required
			return nil
		}

		if err := m.IndexingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indexingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indexingPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RpoPolicySettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RpoPolicySettings) UnmarshalBinary(b []byte) error {
	var res RpoPolicySettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
