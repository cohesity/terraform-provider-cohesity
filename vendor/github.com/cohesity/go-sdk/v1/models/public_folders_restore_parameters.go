// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PublicFoldersRestoreParameters O365 Public Folders Restore Parameters.
//
// Specifies information needed for recovering O365 Public Folders in
// O365Publicfolders environment.
//
// swagger:model PublicFoldersRestoreParameters
type PublicFoldersRestoreParameters struct {

	// Specifies the list of Public Folders to be restored.
	RootPublicFolderList []*RootPublicFolder `json:"rootPublicFolderList"`

	// Specifies the target folder path to restore the Public Folders.
	TargetFolderPath *string `json:"targetFolderPath,omitempty"`

	// Specifies the destination Public Folder where the Public Folders specified
	// within RootPublicFolders will be restored with their appropriate paths.
	TargetRootPublicFolder *ProtectionSource `json:"targetRootPublicFolder,omitempty"`
}

// Validate validates this public folders restore parameters
func (m *PublicFoldersRestoreParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRootPublicFolderList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetRootPublicFolder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicFoldersRestoreParameters) validateRootPublicFolderList(formats strfmt.Registry) error {
	if swag.IsZero(m.RootPublicFolderList) { // not required
		return nil
	}

	for i := 0; i < len(m.RootPublicFolderList); i++ {
		if swag.IsZero(m.RootPublicFolderList[i]) { // not required
			continue
		}

		if m.RootPublicFolderList[i] != nil {
			if err := m.RootPublicFolderList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootPublicFolderList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootPublicFolderList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PublicFoldersRestoreParameters) validateTargetRootPublicFolder(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetRootPublicFolder) { // not required
		return nil
	}

	if m.TargetRootPublicFolder != nil {
		if err := m.TargetRootPublicFolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetRootPublicFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetRootPublicFolder")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this public folders restore parameters based on the context it is used
func (m *PublicFoldersRestoreParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRootPublicFolderList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetRootPublicFolder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicFoldersRestoreParameters) contextValidateRootPublicFolderList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RootPublicFolderList); i++ {

		if m.RootPublicFolderList[i] != nil {

			if swag.IsZero(m.RootPublicFolderList[i]) { // not required
				return nil
			}

			if err := m.RootPublicFolderList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootPublicFolderList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootPublicFolderList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PublicFoldersRestoreParameters) contextValidateTargetRootPublicFolder(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetRootPublicFolder != nil {

		if swag.IsZero(m.TargetRootPublicFolder) { // not required
			return nil
		}

		if err := m.TargetRootPublicFolder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetRootPublicFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetRootPublicFolder")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicFoldersRestoreParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicFoldersRestoreParameters) UnmarshalBinary(b []byte) error {
	var res PublicFoldersRestoreParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
