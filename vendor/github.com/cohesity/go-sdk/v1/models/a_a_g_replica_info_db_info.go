// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AAGReplicaInfoDbInfo Infomation about one local database on this replica.
//
// When populated by the agent, this is only populated for replica on which
// the agent resides.
//
// swagger:model AAGReplicaInfo_DbInfo
type AAGReplicaInfoDbInfo struct {

	// The name of database.
	DatabaseName *string `json:"databaseName,omitempty"`

	// The entity id of the database on this replica. Only set if its host
	// has been registered with Cohesity.
	EntityID *int64 `json:"entityId,omitempty"`

	// The SQL id of the database on this replica. Only set if its host
	// has not been registered with Cohesity.
	SQLID *SQLID `json:"sqlId,omitempty"`
}

// Validate validates this a a g replica info db info
func (m *AAGReplicaInfoDbInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSQLID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAGReplicaInfoDbInfo) validateSQLID(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLID) { // not required
		return nil
	}

	if m.SQLID != nil {
		if err := m.SQLID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this a a g replica info db info based on the context it is used
func (m *AAGReplicaInfoDbInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSQLID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAGReplicaInfoDbInfo) contextValidateSQLID(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLID != nil {

		if swag.IsZero(m.SQLID) { // not required
			return nil
		}

		if err := m.SQLID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AAGReplicaInfoDbInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AAGReplicaInfoDbInfo) UnmarshalBinary(b []byte) error {
	var res AAGReplicaInfoDbInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
