// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetCrackedFileVersionsResultVersionInfo The versions that have the requested file. These are returned in
// descending order of timestamp.
//
// swagger:model GetCrackedFileVersionsResult_VersionInfo
type GetCrackedFileVersionsResultVersionInfo struct {

	// Source inode id metadata for certain adapters e.g. Netapp.
	BackupSourceInodeID *int64 `json:"backupSourceInodeId,omitempty"`

	// Set to true if version has archival replca.
	HasArchivalReplica *bool `json:"hasArchivalReplica,omitempty"`

	// Set to true if version has local replica.
	HasLocalReplica *bool `json:"hasLocalReplica,omitempty"`

	// Set to true if version has remote replica.
	HasRemoteReplica *bool `json:"hasRemoteReplica,omitempty"`

	// Magneto instance id.
	InstanceID *MagnetoInstanceID `json:"instanceId,omitempty"`

	// Mtime of the file.
	MtimeUsecs *int64 `json:"mtimeUsecs,omitempty"`

	// Replica and expiry information where this file is present.
	ReplicaInfo *SnapshotReplicas `json:"replicaInfo,omitempty"`

	// The type of the backup run that was actually scheduled.
	ScheduledBackupType *int32 `json:"scheduledBackupType,omitempty"`

	// File size in bytes.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`

	// Some metadata can get changed between snapshots. For example, Folder ID
	// of sub-folders in a root Public Folder (Office 365) can get changed due
	// to folder recreation with same name on the same path. cfile doc will
	// keep it as a different file version, but this changed metadata
	// (identifier) need to be used by Recovery as it should pick the correct
	// identifier based on snapshot selected for the item.
	VersionMetadata *GetCrackedFileVersionsResultVersionInfoVersionMetadata `json:"versionMetadata,omitempty"`
}

// Validate validates this get cracked file versions result version info
func (m *GetCrackedFileVersionsResultVersionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCrackedFileVersionsResultVersionInfo) validateInstanceID(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceID) { // not required
		return nil
	}

	if m.InstanceID != nil {
		if err := m.InstanceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceId")
			}
			return err
		}
	}

	return nil
}

func (m *GetCrackedFileVersionsResultVersionInfo) validateReplicaInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaInfo) { // not required
		return nil
	}

	if m.ReplicaInfo != nil {
		if err := m.ReplicaInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicaInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicaInfo")
			}
			return err
		}
	}

	return nil
}

func (m *GetCrackedFileVersionsResultVersionInfo) validateVersionMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionMetadata) { // not required
		return nil
	}

	if m.VersionMetadata != nil {
		if err := m.VersionMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionMetadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get cracked file versions result version info based on the context it is used
func (m *GetCrackedFileVersionsResultVersionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCrackedFileVersionsResultVersionInfo) contextValidateInstanceID(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceID != nil {

		if swag.IsZero(m.InstanceID) { // not required
			return nil
		}

		if err := m.InstanceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceId")
			}
			return err
		}
	}

	return nil
}

func (m *GetCrackedFileVersionsResultVersionInfo) contextValidateReplicaInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaInfo != nil {

		if swag.IsZero(m.ReplicaInfo) { // not required
			return nil
		}

		if err := m.ReplicaInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicaInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicaInfo")
			}
			return err
		}
	}

	return nil
}

func (m *GetCrackedFileVersionsResultVersionInfo) contextValidateVersionMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.VersionMetadata != nil {

		if swag.IsZero(m.VersionMetadata) { // not required
			return nil
		}

		if err := m.VersionMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCrackedFileVersionsResultVersionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCrackedFileVersionsResultVersionInfo) UnmarshalBinary(b []byte) error {
	var res GetCrackedFileVersionsResultVersionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
