// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MetricDataBlock Metric Data Block.
//
// Specifies a series of metric data points for a time series.
//
// swagger:model MetricDataBlock
type MetricDataBlock struct {

	// Array of Data Points.
	//
	// Specifies a list of metric data points for a time series.
	DataPointVec []*MetricDataPoint `json:"dataPointVec"`

	// Specifies the name of a metric such as 'kDiskAwaitTimeMsecs'.
	MetricName *string `json:"metricName,omitempty"`

	// Specifies the data type of the data points.
	// 0 specifies a data point of type Int64.
	// 1 specifies a data point of type Double.
	// 2 specifies a data point of type String.
	// 3 specifies a data point of type Bytes.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this metric data block
func (m *MetricDataBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataPointVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricDataBlock) validateDataPointVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DataPointVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DataPointVec); i++ {
		if swag.IsZero(m.DataPointVec[i]) { // not required
			continue
		}

		if m.DataPointVec[i] != nil {
			if err := m.DataPointVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataPointVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataPointVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this metric data block based on the context it is used
func (m *MetricDataBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataPointVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricDataBlock) contextValidateDataPointVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataPointVec); i++ {

		if m.DataPointVec[i] != nil {

			if swag.IsZero(m.DataPointVec[i]) { // not required
				return nil
			}

			if err := m.DataPointVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataPointVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataPointVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricDataBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricDataBlock) UnmarshalBinary(b []byte) error {
	var res MetricDataBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
