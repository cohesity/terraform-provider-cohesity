// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreS3ParamsNewLocationParams Message specifying new location details, should be set only when
// is_original_location is false.
//
// swagger:model RestoreS3Params_NewLocationParams
type RestoreS3ParamsNewLocationParams struct {

	// Target Region in which recovery should happen.
	Region *EntityProto `json:"region,omitempty"`

	// Target S3 bucket where recovery should happen.
	S3Bucket *EntityProto `json:"s3Bucket,omitempty"`
}

// Validate validates this restore s3 params new location params
func (m *RestoreS3ParamsNewLocationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3Bucket(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreS3ParamsNewLocationParams) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreS3ParamsNewLocationParams) validateS3Bucket(formats strfmt.Registry) error {
	if swag.IsZero(m.S3Bucket) { // not required
		return nil
	}

	if m.S3Bucket != nil {
		if err := m.S3Bucket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3Bucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3Bucket")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore s3 params new location params based on the context it is used
func (m *RestoreS3ParamsNewLocationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3Bucket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreS3ParamsNewLocationParams) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreS3ParamsNewLocationParams) contextValidateS3Bucket(ctx context.Context, formats strfmt.Registry) error {

	if m.S3Bucket != nil {

		if swag.IsZero(m.S3Bucket) { // not required
			return nil
		}

		if err := m.S3Bucket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3Bucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3Bucket")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreS3ParamsNewLocationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreS3ParamsNewLocationParams) UnmarshalBinary(b []byte) error {
	var res RestoreS3ParamsNewLocationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
