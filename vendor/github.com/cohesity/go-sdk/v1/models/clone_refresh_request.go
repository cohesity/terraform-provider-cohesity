// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloneRefreshRequest Clone Refresh Request Parameters.
//
// Specifies the settings for creating a new clone refresh task.
//
// swagger:model CloneRefreshRequest
type CloneRefreshRequest struct {

	// Specifies the ID of the clone task. This is required to determine the
	// details of the clone to be refreshed as clone task contains the details
	// of the clone.
	CloneTaskID *int64 `json:"cloneTaskId,omitempty"`

	// Specifies if the Restore Task should continue when some operations on some
	// objects fail. If true, the Cohesity Cluster ignores intermittent
	// errors and restores as many objects as possible.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies the name of the Restore Task. This field must be set and
	// must be a unique name.
	// Required: true
	Name *string `json:"name"`

	// Specify a new registered parent Protection Source. If specified
	// the selected objects are cloned or recovered to this new Protection
	// Source. If not specified, objects are cloned or recovered
	// to the original Protection Source that was managing them.
	NewParentID *int64 `json:"newParentId,omitempty"`

	// Array of Objects.
	//
	// Specifies a list of Protection Source objects or Protection Job objects
	// (with specified Protection Source objects).
	Objects []*RestoreObjectDetails `json:"objects"`

	// Specifies a point in time (unix epoch) to which the database needs to be
	// refreshed. This helps granular refresh of the database.
	// If this is set, relevant archive logs (redo logs) will also be re-played
	// to match with the specified time. For this, the log backup should be
	// enabled in the backup policy.
	// If this is not set, then only the incremental backup data will be used to
	// refresh the target database.
	RefreshTimeSecs *int64 `json:"refreshTimeSecs,omitempty"`

	// Specifies the ID of the source database in the backup job snapshot. This
	// is the entity ID of the database, which needs to be used as a source
	// during the refresh process.
	SourceDatabaseID *int64 `json:"sourceDatabaseId,omitempty"`

	// Specifies VLAN parameters for the restore operation.
	VlanParameters *VlanParameters `json:"vlanParameters,omitempty"`
}

// Validate validates this clone refresh request
func (m *CloneRefreshRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneRefreshRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CloneRefreshRequest) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloneRefreshRequest) validateVlanParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParameters) { // not required
		return nil
	}

	if m.VlanParameters != nil {
		if err := m.VlanParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this clone refresh request based on the context it is used
func (m *CloneRefreshRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneRefreshRequest) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloneRefreshRequest) contextValidateVlanParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParameters != nil {

		if swag.IsZero(m.VlanParameters) { // not required
			return nil
		}

		if err := m.VlanParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloneRefreshRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloneRefreshRequest) UnmarshalBinary(b []byte) error {
	var res CloneRefreshRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
