// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceNode Device Node.
//
// Specifies the list of devices that need to be combined to form the
// storage space.
// Only one of the fields is populated with a device node.
// If the device node is a leaf node, leafNode is populated with details
// about the partition blocks in the file.
// If the device node is an intermediate node, intermediateNode is
// populated with a device sub-tree.
//
// swagger:model DeviceNode
type DeviceNode struct {

	// Specifies an intermediate node of the logical device tree.
	IntermediateNode *DeviceTreeDetails `json:"intermediateNode,omitempty"`

	// Specifies the leaf node of the device tree.
	LeafNode *FilePartitionBlock `json:"leafNode,omitempty"`
}

// Validate validates this device node
func (m *DeviceNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntermediateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeafNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceNode) validateIntermediateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.IntermediateNode) { // not required
		return nil
	}

	if m.IntermediateNode != nil {
		if err := m.IntermediateNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intermediateNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intermediateNode")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceNode) validateLeafNode(formats strfmt.Registry) error {
	if swag.IsZero(m.LeafNode) { // not required
		return nil
	}

	if m.LeafNode != nil {
		if err := m.LeafNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("leafNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("leafNode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this device node based on the context it is used
func (m *DeviceNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIntermediateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLeafNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceNode) contextValidateIntermediateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.IntermediateNode != nil {

		if swag.IsZero(m.IntermediateNode) { // not required
			return nil
		}

		if err := m.IntermediateNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intermediateNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intermediateNode")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceNode) contextValidateLeafNode(ctx context.Context, formats strfmt.Registry) error {

	if m.LeafNode != nil {

		if swag.IsZero(m.LeafNode) { // not required
			return nil
		}

		if err := m.LeafNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("leafNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("leafNode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceNode) UnmarshalBinary(b []byte) error {
	var res DeviceNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
