// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NfsInfo Message to encapsulate information related to NFS protocol exposed by a file
// system.
//
// swagger:model NfsInfo
type NfsInfo struct {

	// Export policy id.
	ExportPolicyID *string `json:"exportPolicyId,omitempty"`

	// Export policy name.
	ExportPolicyName *string `json:"exportPolicyName,omitempty"`

	// NFS protocol export rules. Rules are in the form host(options).
	// host represents one of the following categories:
	//
	// IP address in the form ddd.ddd.ddd.ddd for IPv4, or
	// xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx for IPv6.
	//
	// Netmask in the form ddd.ddd.ddd.ddd/dd for IPv4, or
	// xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx for IPv6.
	//
	// Wildcard in the form * to represent all clients
	//
	// options in parenthesis represents a comma-separated list of NFS export
	// options.
	// Valid export options are rw, ro, root_squash, no_root_squash, and
	// fileid_32bit.
	ExportRules *string `json:"exportRules,omitempty"`
}

// Validate validates this nfs info
func (m *NfsInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this nfs info based on context it is used
func (m *NfsInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NfsInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsInfo) UnmarshalBinary(b []byte) error {
	var res NfsInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
