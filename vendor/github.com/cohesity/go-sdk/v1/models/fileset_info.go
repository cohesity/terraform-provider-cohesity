// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FilesetInfo Message to encapsulate information about a fileset.
//
// Within the GPFS file systems one can define filesets, which are treated as
// subdirectories within the file system. Filesets are groupings of files.
// Filesets are quite similar to volumes and can be treated as independent
// entities. They can have snapshots, quota, permissions of their own.
//
// swagger:model FilesetInfo
type FilesetInfo struct {

	// Name of the filesystem associated with this fileset. Keeping this
	// separately so that we do not have to parse the path while creating a
	// CreateFilesetSnapshot request to get the filesystem.
	FilesystemName *string `json:"filesystemName,omitempty"`

	// Unique identifier for the file set which doesn't change for a fileset even
	// after gpfs cluster upgrade. It is file system uuid appended to fileset id.
	Fsid *string `json:"fsid,omitempty"`

	// The fileset identifier. Field is deprecated because this field is set to
	// oid Field of the fileset which is known to change when the gpfs cluster
	// upgrades.
	ID *uint64 `json:"id,omitempty"`

	// If the given fileset is an Independent fileset or not.
	// GPFS does not support fileset level snapshots for dependent filesets but
	// only for independent filesets.
	// Dependent filesets: Inode space is inherited from the file system or
	// independent fileset to which the fileset belongs. Currently we do not
	// support nested filesets.
	// Ref: https://www.ibm.com/support/knowledgecenter/STXKQY_4.2.1/
	// com.ibm.spectrum.scale.v4r21.doc/bl1hlp_filesfilesets.htm
	IsIndependentFileset *bool `json:"isIndependentFileset,omitempty"`

	// The absolute path of the fileset.
	Path *string `json:"path,omitempty"`

	// GPFS supports NFS, SMB2, SMB3 and does not support SMB3.1.
	// List of protocols enabled on this fileset.
	SupportedProtocolVec []int32 `json:"supportedProtocolVec"`

	// Use fsid as entity hash comparator.
	UseFsidAsHashComparator *bool `json:"useFsidAsHashComparator,omitempty"`

	// If set to true, path will be used for uniqueness for fileset in entity
	// comparator.
	UsePathEntityHashComparator *bool `json:"usePathEntityHashComparator,omitempty"`
}

// Validate validates this fileset info
func (m *FilesetInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this fileset info based on context it is used
func (m *FilesetInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FilesetInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilesetInfo) UnmarshalBinary(b []byte) error {
	var res FilesetInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
