// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NoSQLBackupJobParams Contains backup params at the job level applicable for nosql environment.
//
// swagger:model NoSqlBackupJobParams
type NoSQLBackupJobParams struct {

	// Specifies a flag to auto scale concurrency.
	AutoScaleConcurrency *bool `json:"autoScaleConcurrency,omitempty"`

	// Net bandwidth bytes per second.
	BandwidthBytesPerSecond *int64 `json:"bandwidthBytesPerSecond,omitempty"`

	// Params specific to cassandra backup job.
	CassandraBackupJobParams *CassandraBackupJobParams `json:"cassandraBackupJobParams,omitempty"`

	// Frequency at which compaction jobs should run in seconds.
	// Will be only applicable for Cassandra, Mongo and Couchbase environment.
	CompactionJobIntervalSecs *int64 `json:"compactionJobIntervalSecs,omitempty"`

	// Max number of mappers.
	Concurrency *int32 `json:"concurrency,omitempty"`

	// Params specific to couchbase backup job.
	CouchbaseBackupJobParams CouchbaseBackupJobParams `json:"couchbaseBackupJobParams,omitempty"`

	// Frequency at which garbage collection jobs should run in seconds.
	GcJobIntervalSecs *int64 `json:"gcJobIntervalSecs,omitempty"`

	// Retention period for logs of this job in days.
	GcRetentionPeriodDays *int32 `json:"gcRetentionPeriodDays,omitempty"`

	// Params specific to hbase backup job.
	HbaseBackupJobParams *HBaseBackupJobParams `json:"hbaseBackupJobParams,omitempty"`

	// Params specific to hdfs backup job.
	HdfsBackupJobParams *HdfsBackupJobParams `json:"hdfsBackupJobParams,omitempty"`

	// Params specific to hive backup job.
	HiveBackupJobParams *HiveBackupJobParams `json:"hiveBackupJobParams,omitempty"`

	// A mapping to the immediate ancestor for each protected entites.
	// This is used in slave to populate immediate_ancestor_entity_id in Imanis
	// EntityProto. The immediate_ancestor_entity_id is used by Imanis to
	// populate entity id of non-leaf objects in yoda
	// (such as databases, keyspaces)
	ImmediateAncestorMap interface{} `json:"immediateAncestorMap,omitempty"`

	// The last time (in usecs) when the compaction ran for this jobs.
	LastCompactionRunTimeUsecs *int64 `json:"lastCompactionRunTimeUsecs,omitempty"`

	// The last time (in usecs) when the gc ran for this jobs.
	LastGcRunTimeUsecs *int64 `json:"lastGcRunTimeUsecs,omitempty"`

	// Params specific to mongodb backup job.
	MongodbBackupJobParams *MongoDBBackupJobParams `json:"mongodbBackupJobParams,omitempty"`

	// List of Magneto entity Ids for the entities that were protected in the
	// previous run.
	PreviousProtectedEntityIdsVec []int64 `json:"previousProtectedEntityIdsVec"`
}

// Validate validates this no Sql backup job params
func (m *NoSQLBackupJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCassandraBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLBackupJobParams) validateCassandraBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraBackupJobParams) { // not required
		return nil
	}

	if m.CassandraBackupJobParams != nil {
		if err := m.CassandraBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLBackupJobParams) validateHbaseBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseBackupJobParams) { // not required
		return nil
	}

	if m.HbaseBackupJobParams != nil {
		if err := m.HbaseBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLBackupJobParams) validateHdfsBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsBackupJobParams) { // not required
		return nil
	}

	if m.HdfsBackupJobParams != nil {
		if err := m.HdfsBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLBackupJobParams) validateHiveBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveBackupJobParams) { // not required
		return nil
	}

	if m.HiveBackupJobParams != nil {
		if err := m.HiveBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLBackupJobParams) validateMongodbBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MongodbBackupJobParams) { // not required
		return nil
	}

	if m.MongodbBackupJobParams != nil {
		if err := m.MongodbBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbBackupJobParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this no Sql backup job params based on the context it is used
func (m *NoSQLBackupJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCassandraBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongodbBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLBackupJobParams) contextValidateCassandraBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraBackupJobParams != nil {

		if swag.IsZero(m.CassandraBackupJobParams) { // not required
			return nil
		}

		if err := m.CassandraBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLBackupJobParams) contextValidateHbaseBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseBackupJobParams != nil {

		if swag.IsZero(m.HbaseBackupJobParams) { // not required
			return nil
		}

		if err := m.HbaseBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLBackupJobParams) contextValidateHdfsBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsBackupJobParams != nil {

		if swag.IsZero(m.HdfsBackupJobParams) { // not required
			return nil
		}

		if err := m.HdfsBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLBackupJobParams) contextValidateHiveBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveBackupJobParams != nil {

		if swag.IsZero(m.HiveBackupJobParams) { // not required
			return nil
		}

		if err := m.HiveBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLBackupJobParams) contextValidateMongodbBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MongodbBackupJobParams != nil {

		if swag.IsZero(m.MongodbBackupJobParams) { // not required
			return nil
		}

		if err := m.MongodbBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbBackupJobParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NoSQLBackupJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NoSQLBackupJobParams) UnmarshalBinary(b []byte) error {
	var res NoSQLBackupJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
