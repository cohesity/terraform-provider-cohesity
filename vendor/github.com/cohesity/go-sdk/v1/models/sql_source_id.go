// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SQLSourceID SQL Source Id.
//
// Specifies a unique id for a SQL Protection Source.
//
// swagger:model SqlSourceId
type SQLSourceID struct {

	// Specifies a unique identifier generated from the date the database is
	// created or renamed.
	// Cohesity uses this identifier in combination with the databaseId
	// to uniquely identify a database.
	CreatedDateMsecs *int64 `json:"createdDateMsecs,omitempty"`

	// Specifies a unique id of the database but only for the life of the
	// database. SQL Server may reuse database ids. Cohesity uses the
	// createDateMsecs in combination with this databaseId to
	// uniquely identify a database.
	DatabaseID *int64 `json:"databaseId,omitempty"`

	// The SQL Server Instance id.
	//
	// Specifies unique id for the SQL Server instance.
	// This id does not change during the life of the instance.
	InstanceID *string `json:"instanceId,omitempty"`
}

// Validate validates this Sql source Id
func (m *SQLSourceID) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this Sql source Id based on context it is used
func (m *SQLSourceID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SQLSourceID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SQLSourceID) UnmarshalBinary(b []byte) error {
	var res SQLSourceID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
