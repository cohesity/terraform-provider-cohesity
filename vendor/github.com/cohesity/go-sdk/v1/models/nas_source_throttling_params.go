// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NasSourceThrottlingParams Specifies the NAS specific source throttling parameters during source
// registration or during backup of the source.
//
// swagger:model NasSourceThrottlingParams
type NasSourceThrottlingParams struct {

	// Specifies the percentage value of maximum concurrent metadata to be
	// fetched during full backup of the source.
	MaxParallelMetadataFetchFullPercentage *int32 `json:"maxParallelMetadataFetchFullPercentage,omitempty"`

	// Specifies the percentage value of maximum concurrent metadata to be
	// fetched during incremental backup of the source.
	MaxParallelMetadataFetchIncrementalPercentage *int32 `json:"maxParallelMetadataFetchIncrementalPercentage,omitempty"`

	// Specifies the percentage value of maximum concurrent IO during full backup
	// of the source.
	MaxParallelReadWriteFullPercentage *int32 `json:"maxParallelReadWriteFullPercentage,omitempty"`

	// Specifies the percentage value of maximum concurrent IO during incremental
	// backup of the source.
	MaxParallelReadWriteIncrementalPercentage *int32 `json:"maxParallelReadWriteIncrementalPercentage,omitempty"`
}

// Validate validates this nas source throttling params
func (m *NasSourceThrottlingParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this nas source throttling params based on context it is used
func (m *NasSourceThrottlingParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NasSourceThrottlingParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NasSourceThrottlingParams) UnmarshalBinary(b []byte) error {
	var res NasSourceThrottlingParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
