// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreO365GroupsParams This message defines the O365 Groups specific restore params.
//
// swagger:model RestoreO365GroupsParams
type RestoreO365GroupsParams struct {

	// Bool which specifies, if we have to create a new group if it doesn't
	// exist.
	CreateNewGroup *bool `json:"createNewGroup,omitempty"`

	// List of groups getting restored.
	MsGroupsVec []*RestoreO365GroupsParamsMSGroupInfo `json:"msGroupsVec"`

	// Bool which specifies, if the original members/owners should be part of the
	// newly created target group.
	RestoreOriginalOwnersMembers *bool `json:"restoreOriginalOwnersMembers,omitempty"`

	// Whether or not all groups are restored to original location.
	RestoreToOriginal *bool `json:"restoreToOriginal,omitempty"`

	// Bool which specifies if SP lists needs to be restored.
	ShouldRestoreLists *bool `json:"shouldRestoreLists,omitempty"`

	// Target group in case restore_to_original is false.
	TargetGroup *string `json:"targetGroup,omitempty"`

	// Target group name in case restore_to_original is false. This will be
	// ignored if restoring to alternate existing group.
	TargetGroupName *string `json:"targetGroupName,omitempty"`

	// The string which contains the owner smtp address for the target group.
	TargetGroupOwner *string `json:"targetGroupOwner,omitempty"`
}

// Validate validates this restore o365 groups params
func (m *RestoreO365GroupsParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMsGroupsVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreO365GroupsParams) validateMsGroupsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.MsGroupsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.MsGroupsVec); i++ {
		if swag.IsZero(m.MsGroupsVec[i]) { // not required
			continue
		}

		if m.MsGroupsVec[i] != nil {
			if err := m.MsGroupsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("msGroupsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("msGroupsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this restore o365 groups params based on the context it is used
func (m *RestoreO365GroupsParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMsGroupsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreO365GroupsParams) contextValidateMsGroupsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MsGroupsVec); i++ {

		if m.MsGroupsVec[i] != nil {

			if swag.IsZero(m.MsGroupsVec[i]) { // not required
				return nil
			}

			if err := m.MsGroupsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("msGroupsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("msGroupsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreO365GroupsParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreO365GroupsParams) UnmarshalBinary(b []byte) error {
	var res RestoreO365GroupsParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
