// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkRealmInfo Contains mapping of network realms with adapter specific entities. This
// will be populated by IRIS for create/update source requests so that we can
// persist the mapping in the corresponding entity hierarchy.
//
// swagger:model NetworkRealmInfo
type NetworkRealmInfo struct {

	// 'network_realm_id' maintains the collection of connector_group_id.
	// Connector group id for the environment. If it is set, Magneto will
	// fetch the bifrost server based on <network_realm_id, connector_group_id>.
	ConnectorGroupID *int64 `json:"connectorGroupId,omitempty"`

	// Entity id to which the network_realm_id is mapped to. This can be a non
	// root entity as well.
	EntityID *int64 `json:"entityId,omitempty"`

	// Network Realm id to use for the tenant. This realm could be a collection
	// of Rigel/HyX.
	NetworkRealmID *int64 `json:"networkRealmId,omitempty"`
}

// Validate validates this network realm info
func (m *NetworkRealmInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this network realm info based on context it is used
func (m *NetworkRealmInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkRealmInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkRealmInfo) UnmarshalBinary(b []byte) error {
	var res NetworkRealmInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
