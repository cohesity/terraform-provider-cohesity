// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataLockConstraints DataLock Constraints
//
// # Specifies the datalock retention type and expiry time when datalock expires
//
// swagger:model DataLockConstraints
type DataLockConstraints struct {

	// Specifies expiry time to keep Snapshots under datalock in a protection
	// group.
	ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

	// Specifies WORM retention type for the snapshots. When a WORM retention
	// type is specified, the snapshots of the Protection Jobs using this policy
	// will be kept until the maximum of the snapshot retention time. During
	// that time, the snapshots cannot be deleted.
	// 'kNone' implies there is no WORM retention set.
	// 'kCompliance' implies WORM retention is set for compliance reason.
	// 'kAdministrative' implies WORM retention is set for administrative purposes.
	// Enum: ["kNone","kCompliance","kAdministrative"]
	WormRetentionType *string `json:"wormRetentionType,omitempty"`
}

// Validate validates this data lock constraints
func (m *DataLockConstraints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWormRetentionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataLockConstraintsTypeWormRetentionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNone","kCompliance","kAdministrative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataLockConstraintsTypeWormRetentionTypePropEnum = append(dataLockConstraintsTypeWormRetentionTypePropEnum, v)
	}
}

const (

	// DataLockConstraintsWormRetentionTypeKNone captures enum value "kNone"
	DataLockConstraintsWormRetentionTypeKNone string = "kNone"

	// DataLockConstraintsWormRetentionTypeKCompliance captures enum value "kCompliance"
	DataLockConstraintsWormRetentionTypeKCompliance string = "kCompliance"

	// DataLockConstraintsWormRetentionTypeKAdministrative captures enum value "kAdministrative"
	DataLockConstraintsWormRetentionTypeKAdministrative string = "kAdministrative"
)

// prop value enum
func (m *DataLockConstraints) validateWormRetentionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataLockConstraintsTypeWormRetentionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataLockConstraints) validateWormRetentionType(formats strfmt.Registry) error {
	if swag.IsZero(m.WormRetentionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateWormRetentionTypeEnum("wormRetentionType", "body", *m.WormRetentionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data lock constraints based on context it is used
func (m *DataLockConstraints) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataLockConstraints) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataLockConstraints) UnmarshalBinary(b []byte) error {
	var res DataLockConstraints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
