// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudArchivalInfo Cloud Archival Info.
//
// Specifies the cloud archival for active and finished tasks.
//
// swagger:model CloudArchivalInfo
type CloudArchivalInfo struct {

	// Specifies if the task if active or finished.
	IsActiveTask *bool `json:"isActiveTask,omitempty"`

	// Specifies the public status type.
	// 'kAccepted' indicates the task is queued to run but not yet running.
	// 'kRunning' indicates the task is running.
	// 'kCanceling' indicates a request to cancel the task has occurred but
	//
	// the task is not yet canceled.
	//
	// 'kCanceled' indicates the task has been canceled.
	// 'kSuccess' indicates the task was successful.
	// 'kFailure' indicates the task failed.
	// 'kWarning' indicates the task has finished with warning.
	// 'kOnHold' indicates the task is kept onHold.
	// 'kMissed' indicates the task is missed.
	// 'Finalizing' indicates the task is finalizing.
	// Enum: ["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure","kWarning","kOnHold","kMissed","kFinalizing"]
	PublicStatus *string `json:"publicStatus,omitempty"`

	// Specifies the status type.
	// 'kAccepted' indicates the task is queued to run but not yet running.
	// 'kRunning' indicates the task is running.
	// 'kCanceling' indicates a request to cancel the task has occurred but
	//
	// the task is not yet canceled.
	//
	// 'kCanceled' indicates the task has been canceled.
	// 'kSuccess' indicates the task was successful.
	// 'kFailure' indicates the task failed.
	// 'kWarning' indicates the task has finished with warning.
	// 'kOnHold' indicates the task is kept onHold.
	// 'kMissed' indicates the task is missed.
	// 'Finalizing' indicates the task is finalizing.
	// Enum: ["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure","kWarning","kOnHold","kMissed","kFinalizing"]
	Status *string `json:"status,omitempty"`

	// Specifies the id of Archival Vault assigned by the Cohesity Cluster.
	VaultID *int64 `json:"vaultId,omitempty"`

	// Name of the Archival Vault.
	VaultName *string `json:"vaultName,omitempty"`

	// Specifies the type of the Archival External Target such as 'kCloud',
	// 'kTape' or 'kNas'.
	// 'kCloud' indicates the archival location as Cloud.
	// 'kTape' indicates the archival location as Tape.
	// 'kNas' indicates the archival location as Network Attached Storage (Nas).
	// Enum: ["kCloud","kTape","kNas"]
	VaultType *string `json:"vaultType,omitempty"`
}

// Validate validates this cloud archival info
func (m *CloudArchivalInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cloudArchivalInfoTypePublicStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure","kWarning","kOnHold","kMissed","kFinalizing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudArchivalInfoTypePublicStatusPropEnum = append(cloudArchivalInfoTypePublicStatusPropEnum, v)
	}
}

const (

	// CloudArchivalInfoPublicStatusKAccepted captures enum value "kAccepted"
	CloudArchivalInfoPublicStatusKAccepted string = "kAccepted"

	// CloudArchivalInfoPublicStatusKRunning captures enum value "kRunning"
	CloudArchivalInfoPublicStatusKRunning string = "kRunning"

	// CloudArchivalInfoPublicStatusKCanceling captures enum value "kCanceling"
	CloudArchivalInfoPublicStatusKCanceling string = "kCanceling"

	// CloudArchivalInfoPublicStatusKCanceled captures enum value "kCanceled"
	CloudArchivalInfoPublicStatusKCanceled string = "kCanceled"

	// CloudArchivalInfoPublicStatusKSuccess captures enum value "kSuccess"
	CloudArchivalInfoPublicStatusKSuccess string = "kSuccess"

	// CloudArchivalInfoPublicStatusKFailure captures enum value "kFailure"
	CloudArchivalInfoPublicStatusKFailure string = "kFailure"

	// CloudArchivalInfoPublicStatusKWarning captures enum value "kWarning"
	CloudArchivalInfoPublicStatusKWarning string = "kWarning"

	// CloudArchivalInfoPublicStatusKOnHold captures enum value "kOnHold"
	CloudArchivalInfoPublicStatusKOnHold string = "kOnHold"

	// CloudArchivalInfoPublicStatusKMissed captures enum value "kMissed"
	CloudArchivalInfoPublicStatusKMissed string = "kMissed"

	// CloudArchivalInfoPublicStatusKFinalizing captures enum value "kFinalizing"
	CloudArchivalInfoPublicStatusKFinalizing string = "kFinalizing"
)

// prop value enum
func (m *CloudArchivalInfo) validatePublicStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cloudArchivalInfoTypePublicStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CloudArchivalInfo) validatePublicStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublicStatusEnum("publicStatus", "body", *m.PublicStatus); err != nil {
		return err
	}

	return nil
}

var cloudArchivalInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure","kWarning","kOnHold","kMissed","kFinalizing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudArchivalInfoTypeStatusPropEnum = append(cloudArchivalInfoTypeStatusPropEnum, v)
	}
}

const (

	// CloudArchivalInfoStatusKAccepted captures enum value "kAccepted"
	CloudArchivalInfoStatusKAccepted string = "kAccepted"

	// CloudArchivalInfoStatusKRunning captures enum value "kRunning"
	CloudArchivalInfoStatusKRunning string = "kRunning"

	// CloudArchivalInfoStatusKCanceling captures enum value "kCanceling"
	CloudArchivalInfoStatusKCanceling string = "kCanceling"

	// CloudArchivalInfoStatusKCanceled captures enum value "kCanceled"
	CloudArchivalInfoStatusKCanceled string = "kCanceled"

	// CloudArchivalInfoStatusKSuccess captures enum value "kSuccess"
	CloudArchivalInfoStatusKSuccess string = "kSuccess"

	// CloudArchivalInfoStatusKFailure captures enum value "kFailure"
	CloudArchivalInfoStatusKFailure string = "kFailure"

	// CloudArchivalInfoStatusKWarning captures enum value "kWarning"
	CloudArchivalInfoStatusKWarning string = "kWarning"

	// CloudArchivalInfoStatusKOnHold captures enum value "kOnHold"
	CloudArchivalInfoStatusKOnHold string = "kOnHold"

	// CloudArchivalInfoStatusKMissed captures enum value "kMissed"
	CloudArchivalInfoStatusKMissed string = "kMissed"

	// CloudArchivalInfoStatusKFinalizing captures enum value "kFinalizing"
	CloudArchivalInfoStatusKFinalizing string = "kFinalizing"
)

// prop value enum
func (m *CloudArchivalInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cloudArchivalInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CloudArchivalInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var cloudArchivalInfoTypeVaultTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCloud","kTape","kNas"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudArchivalInfoTypeVaultTypePropEnum = append(cloudArchivalInfoTypeVaultTypePropEnum, v)
	}
}

const (

	// CloudArchivalInfoVaultTypeKCloud captures enum value "kCloud"
	CloudArchivalInfoVaultTypeKCloud string = "kCloud"

	// CloudArchivalInfoVaultTypeKTape captures enum value "kTape"
	CloudArchivalInfoVaultTypeKTape string = "kTape"

	// CloudArchivalInfoVaultTypeKNas captures enum value "kNas"
	CloudArchivalInfoVaultTypeKNas string = "kNas"
)

// prop value enum
func (m *CloudArchivalInfo) validateVaultTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cloudArchivalInfoTypeVaultTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CloudArchivalInfo) validateVaultType(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVaultTypeEnum("vaultType", "body", *m.VaultType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cloud archival info based on context it is used
func (m *CloudArchivalInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CloudArchivalInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudArchivalInfo) UnmarshalBinary(b []byte) error {
	var res CloudArchivalInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
