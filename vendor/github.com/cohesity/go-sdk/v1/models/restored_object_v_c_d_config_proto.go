// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoredObjectVCDConfigProto restored object v c d config proto
//
// swagger:model RestoredObjectVCDConfigProto
type RestoredObjectVCDConfigProto struct {

	// Whether the restored object is a VApp.
	IsVapp *bool `json:"isVapp,omitempty"`

	// Whether the restored object is a VApp template.
	IsVappTemplate *bool `json:"isVappTemplate,omitempty"`

	// Entity info enabled only when is_vapp is true. This proto will contain
	// the original vApp that is protected (deprecated)
	RestoredVappInfo *EntityProto `json:"restoredVappInfo,omitempty"`

	// Enabled only when is_vapp is true. This proto will contain
	// the original vApp that is protected.
	RestoredVappObject *RestoreObject `json:"restoredVappObject,omitempty"`

	// Entity info enabled only when is_vapp_template is true. This proto will
	// contain the original vApp template that is protected (deprecated)
	RestoredVappTemplateInfo *EntityProto `json:"restoredVappTemplateInfo,omitempty"`

	// Enabled only when is_vapp_template is true. This proto will
	// contain the original vApp template that is protected.
	RestoredVappTemplateObject *RestoreObject `json:"restoredVappTemplateObject,omitempty"`

	// Entity info of the vApp to be used to import the VMs into while performing
	// recovery of VMs into exisintg vApps.
	VappEntity *EntityProto `json:"vappEntity,omitempty"`

	// Connector params associated with the vcenter which will be captured for
	// vCD environment.
	VcenterConnectorParams *ConnectorParams `json:"vcenterConnectorParams,omitempty"`

	// Entity info of the Virtual Datacenter used while composing a new vApp.
	VdcEntity *EntityProto `json:"vdcEntity,omitempty"`
}

// Validate validates this restored object v c d config proto
func (m *RestoredObjectVCDConfigProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestoredVappInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredVappObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredVappTemplateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredVappTemplateObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVappEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterConnectorParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdcEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoredObjectVCDConfigProto) validateRestoredVappInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredVappInfo) { // not required
		return nil
	}

	if m.RestoredVappInfo != nil {
		if err := m.RestoredVappInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredVappInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredVappInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) validateRestoredVappObject(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredVappObject) { // not required
		return nil
	}

	if m.RestoredVappObject != nil {
		if err := m.RestoredVappObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredVappObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredVappObject")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) validateRestoredVappTemplateInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredVappTemplateInfo) { // not required
		return nil
	}

	if m.RestoredVappTemplateInfo != nil {
		if err := m.RestoredVappTemplateInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredVappTemplateInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredVappTemplateInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) validateRestoredVappTemplateObject(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredVappTemplateObject) { // not required
		return nil
	}

	if m.RestoredVappTemplateObject != nil {
		if err := m.RestoredVappTemplateObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredVappTemplateObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredVappTemplateObject")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) validateVappEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.VappEntity) { // not required
		return nil
	}

	if m.VappEntity != nil {
		if err := m.VappEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vappEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vappEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) validateVcenterConnectorParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VcenterConnectorParams) { // not required
		return nil
	}

	if m.VcenterConnectorParams != nil {
		if err := m.VcenterConnectorParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcenterConnectorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcenterConnectorParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) validateVdcEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.VdcEntity) { // not required
		return nil
	}

	if m.VdcEntity != nil {
		if err := m.VdcEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vdcEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vdcEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restored object v c d config proto based on the context it is used
func (m *RestoredObjectVCDConfigProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRestoredVappInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredVappObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredVappTemplateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredVappTemplateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVappEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcenterConnectorParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdcEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoredObjectVCDConfigProto) contextValidateRestoredVappInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredVappInfo != nil {

		if swag.IsZero(m.RestoredVappInfo) { // not required
			return nil
		}

		if err := m.RestoredVappInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredVappInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredVappInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) contextValidateRestoredVappObject(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredVappObject != nil {

		if swag.IsZero(m.RestoredVappObject) { // not required
			return nil
		}

		if err := m.RestoredVappObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredVappObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredVappObject")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) contextValidateRestoredVappTemplateInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredVappTemplateInfo != nil {

		if swag.IsZero(m.RestoredVappTemplateInfo) { // not required
			return nil
		}

		if err := m.RestoredVappTemplateInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredVappTemplateInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredVappTemplateInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) contextValidateRestoredVappTemplateObject(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredVappTemplateObject != nil {

		if swag.IsZero(m.RestoredVappTemplateObject) { // not required
			return nil
		}

		if err := m.RestoredVappTemplateObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredVappTemplateObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredVappTemplateObject")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) contextValidateVappEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.VappEntity != nil {

		if swag.IsZero(m.VappEntity) { // not required
			return nil
		}

		if err := m.VappEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vappEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vappEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) contextValidateVcenterConnectorParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VcenterConnectorParams != nil {

		if swag.IsZero(m.VcenterConnectorParams) { // not required
			return nil
		}

		if err := m.VcenterConnectorParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcenterConnectorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcenterConnectorParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoredObjectVCDConfigProto) contextValidateVdcEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.VdcEntity != nil {

		if swag.IsZero(m.VdcEntity) { // not required
			return nil
		}

		if err := m.VdcEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vdcEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vdcEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoredObjectVCDConfigProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoredObjectVCDConfigProto) UnmarshalBinary(b []byte) error {
	var res RestoredObjectVCDConfigProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
