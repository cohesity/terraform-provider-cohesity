// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreSiteParams This message defines the OneDrive specific restore params.
//
// swagger:model RestoreSiteParams
type RestoreSiteParams struct {

	// Entity name of target site in case of sharepoint restore.
	DstSiteName *string `json:"dstSiteName,omitempty"`

	// Entity uuid of target site in case of sharepoint restore.
	DstSiteUUID *string `json:"dstSiteUuid,omitempty"`

	// Entity web url of target site in case of sharepoint restore.
	DstSiteWebURL *string `json:"dstSiteWebUrl,omitempty"`

	// The sharepoint domain name of the registered parent source from which the
	// site is backed up.
	ParentSourceSharepointDomainName *string `json:"parentSourceSharepointDomainName,omitempty"`

	// This prefix is pre-pended to the doc lib which is created for recovering
	// PHL. This must be set if restore_phl_drive is set to true.
	PhlRestorePrefix *string `json:"phlRestorePrefix,omitempty"`

	// When set to true, the preservation hold library (PHL) drive for the site
	// should be restored.
	RestorePhlDrive *bool `json:"restorePhlDrive,omitempty"`

	// Indicates that we have to restore the Sharepoint site template also.
	// This includes:
	// 1) Create site if it does not exist.
	// 2) Provision template.
	RestoreTemplate *bool `json:"restoreTemplate,omitempty"`

	// Whether or not all sites are restored to original location.
	RestoreToOriginal *bool `json:"restoreToOriginal,omitempty"`

	// Whether lists should be restore for this site restore.
	ShouldRestoreLists *bool `json:"shouldRestoreLists,omitempty"`

	// The list of sites whose drives are being restored.
	SiteOwnerVec []*RestoreSiteParamsSiteOwner `json:"siteOwnerVec"`

	// Site template backup status returned by the agent on successful site
	// backup.
	SiteResult *SiteBackupStatus `json:"siteResult,omitempty"`

	// Versions for site restores. There can be incompatible changes across
	// process restarts or across restores. To avoid issues, maintain a version
	// for restore.
	SiteVersion *int32 `json:"siteVersion,omitempty"`

	// SnapFS relative path where the site template backup result proto is
	// stored.
	SnapFsRelativeSiteBackupResultPath *string `json:"snapFsRelativeSiteBackupResultPath,omitempty"`

	// SnapFS relative path where the template data is stored.
	SnapFsRelativeTemplatePath *string `json:"snapFsRelativeTemplatePath,omitempty"`

	// Entity name of source site in case of sharepoint restore.
	SourceSiteName *string `json:"sourceSiteName,omitempty"`

	// Entity uuid of source site in case of sharepoint restore.
	SourceSiteUUID *string `json:"sourceSiteUuid,omitempty"`

	// Entity web url of source site in case of sharepoint restore.
	SourceWebURL *string `json:"sourceWebUrl,omitempty"`

	// Incase of alternate restore of granular items within document
	// repositiories of sites to another site, a doc lib name has to be specified
	// by the caller.
	// NOTE: It can be safely assumed that this field will only be present in
	// case of granular items restore only.
	TargetDocLibName *string `json:"targetDocLibName,omitempty"`

	// If alternate site is provided, customer may want to provide a custom
	// prefix to document libraries that we create. In any case we would also
	// have to distinguish the newly created document library as the alternate
	// site provided by the customer may as well turn out to be the original
	// backup site.
	TargetDocLibPrefix *string `json:"targetDocLibPrefix,omitempty"`

	// Target folder path prefix for granular restore. This is set in case of
	// teams or groups restore.
	TargetFolderPathPrefix *string `json:"targetFolderPathPrefix,omitempty"`

	// This is the site in whose drive the items will be restored.
	TargetSite *EntityProto `json:"targetSite,omitempty"`
}

// Validate validates this restore site params
func (m *RestoreSiteParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSiteOwnerVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreSiteParams) validateSiteOwnerVec(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteOwnerVec) { // not required
		return nil
	}

	for i := 0; i < len(m.SiteOwnerVec); i++ {
		if swag.IsZero(m.SiteOwnerVec[i]) { // not required
			continue
		}

		if m.SiteOwnerVec[i] != nil {
			if err := m.SiteOwnerVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("siteOwnerVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("siteOwnerVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreSiteParams) validateSiteResult(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteResult) { // not required
		return nil
	}

	if m.SiteResult != nil {
		if err := m.SiteResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteResult")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreSiteParams) validateTargetSite(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetSite) { // not required
		return nil
	}

	if m.TargetSite != nil {
		if err := m.TargetSite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetSite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetSite")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore site params based on the context it is used
func (m *RestoreSiteParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSiteOwnerVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSiteResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreSiteParams) contextValidateSiteOwnerVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SiteOwnerVec); i++ {

		if m.SiteOwnerVec[i] != nil {

			if swag.IsZero(m.SiteOwnerVec[i]) { // not required
				return nil
			}

			if err := m.SiteOwnerVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("siteOwnerVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("siteOwnerVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreSiteParams) contextValidateSiteResult(ctx context.Context, formats strfmt.Registry) error {

	if m.SiteResult != nil {

		if swag.IsZero(m.SiteResult) { // not required
			return nil
		}

		if err := m.SiteResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteResult")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreSiteParams) contextValidateTargetSite(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetSite != nil {

		if swag.IsZero(m.TargetSite) { // not required
			return nil
		}

		if err := m.TargetSite.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetSite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetSite")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreSiteParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreSiteParams) UnmarshalBinary(b []byte) error {
	var res RestoreSiteParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
