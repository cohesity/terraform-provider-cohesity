// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateRestoreTaskParams UpdateRestoreTaskParams holds the information to update a Restore Task in
// Magneto.
//
// swagger:model UpdateRestoreTaskParams
type UpdateRestoreTaskParams struct {

	// Specifies the Active Directory options to update the Restore Task with.
	AdOptions *AdRestoreOptions `json:"adOptions,omitempty"`

	// Specifies the ID of the child restore tasks of 'RestoreTaskId' to which
	// the update is meant.
	ChildRestoreTaskIds []int64 `json:"childRestoreTaskIds"`

	// Enables Auto Sync feature for SQL Multi-stage Restore task.
	EnableAutoSync *bool `json:"enableAutoSync,omitempty"`

	// Specifies generic options to update the restore task.
	Options *UpdateRestoreTaskOptions `json:"options,omitempty"`

	// Specifies the oracle options to update the Restore Task with.
	OracleOptions *OracleUpdateRestoreTaskOptions `json:"oracleOptions,omitempty"`

	// Specifies the ID of the existing Restore Task to update.
	RestoreTaskID *int64 `json:"restoreTaskId,omitempty"`

	// Specifies the sql options to update the Restore Task with.
	// Specifies the action type of multi stage SQL restore.
	//
	// 'kCreate' specifies the create action for a restore.
	// 'kUpdate' specifies the user action to update an ongoing restore.
	// 'kFinalize' specifies the user action to finalize a restore.
	// Enum: ["kCreate","kUpdate","kFinalize"]
	SQLOptions *string `json:"sqlOptions,omitempty"`
}

// Validate validates this update restore task params
func (m *UpdateRestoreTaskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRestoreTaskParams) validateAdOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AdOptions) { // not required
		return nil
	}

	if m.AdOptions != nil {
		if err := m.AdOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adOptions")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateRestoreTaskParams) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateRestoreTaskParams) validateOracleOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleOptions) { // not required
		return nil
	}

	if m.OracleOptions != nil {
		if err := m.OracleOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleOptions")
			}
			return err
		}
	}

	return nil
}

var updateRestoreTaskParamsTypeSQLOptionsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCreate","kUpdate","kFinalize"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateRestoreTaskParamsTypeSQLOptionsPropEnum = append(updateRestoreTaskParamsTypeSQLOptionsPropEnum, v)
	}
}

const (

	// UpdateRestoreTaskParamsSQLOptionsKCreate captures enum value "kCreate"
	UpdateRestoreTaskParamsSQLOptionsKCreate string = "kCreate"

	// UpdateRestoreTaskParamsSQLOptionsKUpdate captures enum value "kUpdate"
	UpdateRestoreTaskParamsSQLOptionsKUpdate string = "kUpdate"

	// UpdateRestoreTaskParamsSQLOptionsKFinalize captures enum value "kFinalize"
	UpdateRestoreTaskParamsSQLOptionsKFinalize string = "kFinalize"
)

// prop value enum
func (m *UpdateRestoreTaskParams) validateSQLOptionsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateRestoreTaskParamsTypeSQLOptionsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateRestoreTaskParams) validateSQLOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLOptions) { // not required
		return nil
	}

	// value enum
	if err := m.validateSQLOptionsEnum("sqlOptions", "body", *m.SQLOptions); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update restore task params based on the context it is used
func (m *UpdateRestoreTaskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRestoreTaskParams) contextValidateAdOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.AdOptions != nil {

		if swag.IsZero(m.AdOptions) { // not required
			return nil
		}

		if err := m.AdOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adOptions")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateRestoreTaskParams) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {

		if swag.IsZero(m.Options) { // not required
			return nil
		}

		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateRestoreTaskParams) contextValidateOracleOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleOptions != nil {

		if swag.IsZero(m.OracleOptions) { // not required
			return nil
		}

		if err := m.OracleOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRestoreTaskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRestoreTaskParams) UnmarshalBinary(b []byte) error {
	var res UpdateRestoreTaskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
