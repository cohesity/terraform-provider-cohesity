// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AWSFleetParams Params for AWS fleets deployment.
//
// swagger:model AWSFleetParams
type AWSFleetParams struct {

	// Fleet's subnet type. This field should always be set when specifying
	// fleet params.
	FleetSubnetType *int32 `json:"fleetSubnetType,omitempty"`

	// Optional list of tags to be associated with the fleets.
	FleetTagVec []*AWSFleetParamsTag `json:"fleetTagVec"`

	// Network information for the fleet. This will be only set when
	// fleet_subnet_type is kCustom.
	NetworkParams *AWSFleetParamsNetworkParams `json:"networkParams,omitempty"`

	// Map for a region to network params, as network params can be defined
	// per region. Only set when kCustom fleet subnet type is being used.
	NetworkParamsMap map[string]AWSFleetParamsNetworkParams `json:"networkParamsMap,omitempty"`

	// Network information for the fleet. This will be only set when
	// fleet_subnet_type is kCustom.
	NetworkParamsVec []*AWSFleetParamsNetworkParams `json:"networkParamsVec"`
}

// Validate validates this a w s fleet params
func (m *AWSFleetParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFleetTagVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkParamsMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkParamsVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AWSFleetParams) validateFleetTagVec(formats strfmt.Registry) error {
	if swag.IsZero(m.FleetTagVec) { // not required
		return nil
	}

	for i := 0; i < len(m.FleetTagVec); i++ {
		if swag.IsZero(m.FleetTagVec[i]) { // not required
			continue
		}

		if m.FleetTagVec[i] != nil {
			if err := m.FleetTagVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fleetTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fleetTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AWSFleetParams) validateNetworkParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkParams) { // not required
		return nil
	}

	if m.NetworkParams != nil {
		if err := m.NetworkParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkParams")
			}
			return err
		}
	}

	return nil
}

func (m *AWSFleetParams) validateNetworkParamsMap(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkParamsMap) { // not required
		return nil
	}

	for k := range m.NetworkParamsMap {

		if err := validate.Required("networkParamsMap"+"."+k, "body", m.NetworkParamsMap[k]); err != nil {
			return err
		}
		if val, ok := m.NetworkParamsMap[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkParamsMap" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkParamsMap" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *AWSFleetParams) validateNetworkParamsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkParamsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkParamsVec); i++ {
		if swag.IsZero(m.NetworkParamsVec[i]) { // not required
			continue
		}

		if m.NetworkParamsVec[i] != nil {
			if err := m.NetworkParamsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkParamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkParamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this a w s fleet params based on the context it is used
func (m *AWSFleetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFleetTagVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkParamsMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkParamsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AWSFleetParams) contextValidateFleetTagVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FleetTagVec); i++ {

		if m.FleetTagVec[i] != nil {

			if swag.IsZero(m.FleetTagVec[i]) { // not required
				return nil
			}

			if err := m.FleetTagVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fleetTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fleetTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AWSFleetParams) contextValidateNetworkParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkParams != nil {

		if swag.IsZero(m.NetworkParams) { // not required
			return nil
		}

		if err := m.NetworkParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkParams")
			}
			return err
		}
	}

	return nil
}

func (m *AWSFleetParams) contextValidateNetworkParamsMap(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.NetworkParamsMap {

		if val, ok := m.NetworkParamsMap[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AWSFleetParams) contextValidateNetworkParamsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkParamsVec); i++ {

		if m.NetworkParamsVec[i] != nil {

			if swag.IsZero(m.NetworkParamsVec[i]) { // not required
				return nil
			}

			if err := m.NetworkParamsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkParamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkParamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AWSFleetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AWSFleetParams) UnmarshalBinary(b []byte) error {
	var res AWSFleetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
