// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverVirtualDiskInfoProto Message that encapsulates information about recover virtual disks task for
// any of the environments we support. Environment specific virtual disk infos
// are defined as extensions to this proto.
//
// Each available extension is listed below along with the location of the
// proto file (relative to magneto/connectors) where it is defined.
//
// RecoverVirtualDiskInfoProto extension                     Location
// =============================================================================
// =============================================================================
//
// swagger:model RecoverVirtualDiskInfoProto
type RecoverVirtualDiskInfoProto struct {

	// If an error is encountered while cleaning up state, then it will be
	// captured as part of this.
	CleanupError *ErrorProto `json:"cleanupError,omitempty"`

	// If an error was encountered while migrating the disks it will be captured
	// here.
	DataMigrationError *ErrorProto `json:"dataMigrationError,omitempty"`

	// If recovering of disks failed, this field may contain the cause
	// of the failure.
	Error *ErrorProto `json:"error,omitempty"`

	// This will be set to true if the task is complete on the slave.
	Finished *bool `json:"finished,omitempty"`

	// This will be set to true once the instant recovery of the virtual disk is
	// complete.
	InstantRecoveryFinished *bool `json:"instantRecoveryFinished,omitempty"`

	// The task moref of the migrate job.
	MigrateTaskMoref *MORef `json:"migrateTaskMoref,omitempty"`

	// The state of the task that sets up and tears down the restore disks that
	// are needed during the mount/teardown operation
	//
	// The environment specific extensions of this proto store the detailed
	// status information about the task.
	RestoreDisksTaskInfoProto *SetupRestoreDiskTaskInfoProto `json:"restoreDisksTaskInfoProto,omitempty"`

	// This is the timestamp at which the slave task started.
	SlaveTaskStartTimeUsecs *int64 `json:"slaveTaskStartTimeUsecs,omitempty"`

	// The state of the task.
	TaskState *int32 `json:"taskState,omitempty"`

	// The type of environment this recover virtual disk info pertains to.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this recover virtual disk info proto
func (m *RecoverVirtualDiskInfoProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCleanupError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataMigrationError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMigrateTaskMoref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreDisksTaskInfoProto(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVirtualDiskInfoProto) validateCleanupError(formats strfmt.Registry) error {
	if swag.IsZero(m.CleanupError) { // not required
		return nil
	}

	if m.CleanupError != nil {
		if err := m.CleanupError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cleanupError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cleanupError")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskInfoProto) validateDataMigrationError(formats strfmt.Registry) error {
	if swag.IsZero(m.DataMigrationError) { // not required
		return nil
	}

	if m.DataMigrationError != nil {
		if err := m.DataMigrationError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataMigrationError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataMigrationError")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskInfoProto) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskInfoProto) validateMigrateTaskMoref(formats strfmt.Registry) error {
	if swag.IsZero(m.MigrateTaskMoref) { // not required
		return nil
	}

	if m.MigrateTaskMoref != nil {
		if err := m.MigrateTaskMoref.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("migrateTaskMoref")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("migrateTaskMoref")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskInfoProto) validateRestoreDisksTaskInfoProto(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreDisksTaskInfoProto) { // not required
		return nil
	}

	if m.RestoreDisksTaskInfoProto != nil {
		if err := m.RestoreDisksTaskInfoProto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreDisksTaskInfoProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreDisksTaskInfoProto")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover virtual disk info proto based on the context it is used
func (m *RecoverVirtualDiskInfoProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCleanupError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataMigrationError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMigrateTaskMoref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreDisksTaskInfoProto(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVirtualDiskInfoProto) contextValidateCleanupError(ctx context.Context, formats strfmt.Registry) error {

	if m.CleanupError != nil {

		if swag.IsZero(m.CleanupError) { // not required
			return nil
		}

		if err := m.CleanupError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cleanupError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cleanupError")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskInfoProto) contextValidateDataMigrationError(ctx context.Context, formats strfmt.Registry) error {

	if m.DataMigrationError != nil {

		if swag.IsZero(m.DataMigrationError) { // not required
			return nil
		}

		if err := m.DataMigrationError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataMigrationError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataMigrationError")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskInfoProto) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskInfoProto) contextValidateMigrateTaskMoref(ctx context.Context, formats strfmt.Registry) error {

	if m.MigrateTaskMoref != nil {

		if swag.IsZero(m.MigrateTaskMoref) { // not required
			return nil
		}

		if err := m.MigrateTaskMoref.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("migrateTaskMoref")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("migrateTaskMoref")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskInfoProto) contextValidateRestoreDisksTaskInfoProto(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreDisksTaskInfoProto != nil {

		if swag.IsZero(m.RestoreDisksTaskInfoProto) { // not required
			return nil
		}

		if err := m.RestoreDisksTaskInfoProto.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreDisksTaskInfoProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreDisksTaskInfoProto")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverVirtualDiskInfoProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverVirtualDiskInfoProto) UnmarshalBinary(b []byte) error {
	var res RecoverVirtualDiskInfoProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
