// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PerformRestoreJobStateProtoRestoreTask Information of the object being restored along with the info of the task
// tracking the restore of that object.
//
// swagger:model PerformRestoreJobStateProto_RestoreTask
type PerformRestoreJobStateProtoRestoreTask struct {

	// Information of the object being restored (along with the snapshot it is
	// being restored from).
	Object *RestoreObject `json:"object,omitempty"`

	// The relative task path of the progress monitor for the restore of the
	// above 'object'.
	// Please note that this field will be set only after progress monitor is
	// created for this restore job.
	ObjectProgressMonitorTaskPath *string `json:"objectProgressMonitorTaskPath,omitempty"`

	// Error encountered for the object in the preprocessing step.
	// If set, the task will not be scheduled on the slave for restore.
	// Ex: This is set in case of VCD recovery when VM with the same name
	// exist in the vapp.
	PreprocessingError *ErrorProto `json:"preprocessingError,omitempty"`

	// Id of the task tracking the restore of the above 'object'.
	TaskID *int64 `json:"taskId,omitempty"`
}

// Validate validates this perform restore job state proto restore task
func (m *PerformRestoreJobStateProtoRestoreTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreprocessingError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformRestoreJobStateProtoRestoreTask) validateObject(formats strfmt.Registry) error {
	if swag.IsZero(m.Object) { // not required
		return nil
	}

	if m.Object != nil {
		if err := m.Object.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProtoRestoreTask) validatePreprocessingError(formats strfmt.Registry) error {
	if swag.IsZero(m.PreprocessingError) { // not required
		return nil
	}

	if m.PreprocessingError != nil {
		if err := m.PreprocessingError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preprocessingError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preprocessingError")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this perform restore job state proto restore task based on the context it is used
func (m *PerformRestoreJobStateProtoRestoreTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreprocessingError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformRestoreJobStateProtoRestoreTask) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if m.Object != nil {

		if swag.IsZero(m.Object) { // not required
			return nil
		}

		if err := m.Object.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProtoRestoreTask) contextValidatePreprocessingError(ctx context.Context, formats strfmt.Registry) error {

	if m.PreprocessingError != nil {

		if swag.IsZero(m.PreprocessingError) { // not required
			return nil
		}

		if err := m.PreprocessingError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preprocessingError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preprocessingError")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformRestoreJobStateProtoRestoreTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformRestoreJobStateProtoRestoreTask) UnmarshalBinary(b []byte) error {
	var res PerformRestoreJobStateProtoRestoreTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
