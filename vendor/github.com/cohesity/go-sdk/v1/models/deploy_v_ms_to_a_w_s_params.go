// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeployVMsToAWSParams Contains AWS specific information needed to identify various resources
// when converting and deploying a VM to AWS.
//
// swagger:model DeployVMsToAWSParams
type DeployVMsToAWSParams struct {

	// This field will be populated for Aurora restores.
	// Proto containing the parameters required for restoring RDS Aurora cluster.
	AuroraParams *DeployDBInstancesToRDSParams `json:"auroraParams,omitempty"`

	// Custom Tags to be applied to permanent and temporary resources during AWS
	// Cloudspin / Convert and Deploy.
	CustomTagVec []*CustomTag `json:"customTagVec"`

	// This field defines the encryption params for restore task of type
	// kRecoverVMs. For recovery to original location, this will not be set.
	EncryptionParams *EncryptionParams `json:"encryptionParams,omitempty"`

	// Type of VM when cloning the VM in AWS as an instance.
	InstanceType *EntityProto `json:"instanceType,omitempty"`

	// Optional key-pair (public-private) name that can be used to login to an
	// VM instance. In such case, user should have already created a key-pair and
	// have a copy of the private key.
	KeyPairName *EntityProto `json:"keyPairName,omitempty"`

	// Names of the network security groups within the above VPC. At least
	// one entry should be present.
	NetworkSecurityGroups []*EntityProto `json:"networkSecurityGroups"`

	// Name of the subnet within the above VPC which will be associated with the
	// proxy vm.
	ProxyVMSubnet *EntityProto `json:"proxyVmSubnet,omitempty"`

	// Virtual Private Cloud (VPC) in which the proxy vm will be deployed.
	ProxyVMVpc *EntityProto `json:"proxyVmVpc,omitempty"`

	// Proto containing the additional parameters required for restoring RDS DB.
	// This field will only be populated for RDS restores.
	RdsParams *DeployDBInstancesToRDSParams `json:"rdsParams,omitempty"`

	// Name of the AWS region in which to deploy the VM.
	Region *EntityProto `json:"region,omitempty"`

	// Name of the optional subnet within the above VPC.
	Subnet *EntityProto `json:"subnet,omitempty"`

	// The Virtual Private Cloud (VPC) to choose for the instance.
	Vpc *EntityProto `json:"vpc,omitempty"`
}

// Validate validates this deploy v ms to a w s params
func (m *DeployVMsToAWSParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuroraParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomTagVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyPairName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyVMSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyVMVpc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployVMsToAWSParams) validateAuroraParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AuroraParams) { // not required
		return nil
	}

	if m.AuroraParams != nil {
		if err := m.AuroraParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) validateCustomTagVec(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomTagVec) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomTagVec); i++ {
		if swag.IsZero(m.CustomTagVec[i]) { // not required
			continue
		}

		if m.CustomTagVec[i] != nil {
			if err := m.CustomTagVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeployVMsToAWSParams) validateEncryptionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionParams) { // not required
		return nil
	}

	if m.EncryptionParams != nil {
		if err := m.EncryptionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) validateInstanceType(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceType) { // not required
		return nil
	}

	if m.InstanceType != nil {
		if err := m.InstanceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceType")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) validateKeyPairName(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyPairName) { // not required
		return nil
	}

	if m.KeyPairName != nil {
		if err := m.KeyPairName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyPairName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keyPairName")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) validateNetworkSecurityGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkSecurityGroups); i++ {
		if swag.IsZero(m.NetworkSecurityGroups[i]) { // not required
			continue
		}

		if m.NetworkSecurityGroups[i] != nil {
			if err := m.NetworkSecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkSecurityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeployVMsToAWSParams) validateProxyVMSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyVMSubnet) { // not required
		return nil
	}

	if m.ProxyVMSubnet != nil {
		if err := m.ProxyVMSubnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyVmSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyVmSubnet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) validateProxyVMVpc(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyVMVpc) { // not required
		return nil
	}

	if m.ProxyVMVpc != nil {
		if err := m.ProxyVMVpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyVmVpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyVmVpc")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) validateRdsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RdsParams) { // not required
		return nil
	}

	if m.RdsParams != nil {
		if err := m.RdsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) validateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {
		if err := m.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) validateVpc(formats strfmt.Registry) error {
	if swag.IsZero(m.Vpc) { // not required
		return nil
	}

	if m.Vpc != nil {
		if err := m.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deploy v ms to a w s params based on the context it is used
func (m *DeployVMsToAWSParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuroraParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomTagVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyPairName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSecurityGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxyVMSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxyVMVpc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRdsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployVMsToAWSParams) contextValidateAuroraParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AuroraParams != nil {

		if swag.IsZero(m.AuroraParams) { // not required
			return nil
		}

		if err := m.AuroraParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateCustomTagVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomTagVec); i++ {

		if m.CustomTagVec[i] != nil {

			if swag.IsZero(m.CustomTagVec[i]) { // not required
				return nil
			}

			if err := m.CustomTagVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateEncryptionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionParams != nil {

		if swag.IsZero(m.EncryptionParams) { // not required
			return nil
		}

		if err := m.EncryptionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateInstanceType(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceType != nil {

		if swag.IsZero(m.InstanceType) { // not required
			return nil
		}

		if err := m.InstanceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceType")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateKeyPairName(ctx context.Context, formats strfmt.Registry) error {

	if m.KeyPairName != nil {

		if swag.IsZero(m.KeyPairName) { // not required
			return nil
		}

		if err := m.KeyPairName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyPairName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keyPairName")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateNetworkSecurityGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkSecurityGroups); i++ {

		if m.NetworkSecurityGroups[i] != nil {

			if swag.IsZero(m.NetworkSecurityGroups[i]) { // not required
				return nil
			}

			if err := m.NetworkSecurityGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkSecurityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateProxyVMSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxyVMSubnet != nil {

		if swag.IsZero(m.ProxyVMSubnet) { // not required
			return nil
		}

		if err := m.ProxyVMSubnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyVmSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyVmSubnet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateProxyVMVpc(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxyVMVpc != nil {

		if swag.IsZero(m.ProxyVMVpc) { // not required
			return nil
		}

		if err := m.ProxyVMVpc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyVmVpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyVmVpc")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateRdsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RdsParams != nil {

		if swag.IsZero(m.RdsParams) { // not required
			return nil
		}

		if err := m.RdsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.Subnet != nil {

		if swag.IsZero(m.Subnet) { // not required
			return nil
		}

		if err := m.Subnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAWSParams) contextValidateVpc(ctx context.Context, formats strfmt.Registry) error {

	if m.Vpc != nil {

		if swag.IsZero(m.Vpc) { // not required
			return nil
		}

		if err := m.Vpc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployVMsToAWSParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployVMsToAWSParams) UnmarshalBinary(b []byte) error {
	var res DeployVMsToAWSParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
