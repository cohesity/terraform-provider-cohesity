// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisteredApplicationServer Registered Application Server.
//
// Specifies an Application Server and the Protection Source that registered
// the Application Server.
//
// swagger:model RegisteredApplicationServer
type RegisteredApplicationServer struct {

	// Application Server and the subtrees below them.
	//
	// Specifies the child subtree used to store additional application-level
	// Objects.
	// Different environments use the subtree to store application-level
	// information. For example for SQL Server, this subtree stores the
	// SQL Server instances running on a VM.
	ApplicationServer struct {
		ProtectionSourceNode
	} `json:"applicationServer,omitempty"`

	// Specifies the Protection Source like a VM or Physical Server that
	// registered the Application Server.
	RegisteredProtectionSource struct {
		ProtectionSource
	} `json:"registeredProtectionSource,omitempty"`
}

// Validate validates this registered application server
func (m *RegisteredApplicationServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredApplicationServer) validateApplicationServer(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationServer) { // not required
		return nil
	}

	return nil
}

func (m *RegisteredApplicationServer) validateRegisteredProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredProtectionSource) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this registered application server based on the context it is used
func (m *RegisteredApplicationServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredApplicationServer) contextValidateApplicationServer(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RegisteredApplicationServer) contextValidateRegisteredProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredApplicationServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredApplicationServer) UnmarshalBinary(b []byte) error {
	var res RegisteredApplicationServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
