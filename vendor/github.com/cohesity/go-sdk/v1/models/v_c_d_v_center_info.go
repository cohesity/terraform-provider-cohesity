// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VCDVCenterInfo VCD Vcenter information.
//
// swagger:model VCDVCenterInfo
type VCDVCenterInfo struct {

	// vCenter credentials.
	Credentials *PrivateCredentials `json:"credentials,omitempty"`

	// vCenter endpoint.
	Endpoint *string `json:"endpoint,omitempty"`

	// Unique id associated with this vCenter when it is registered, this is used
	// while constructing the connector params.
	ID *int64 `json:"id,omitempty"`

	// vCenter name.
	Name *string `json:"name,omitempty"`

	// Whether to register the source as stand alone.
	// NOTE: This information is not used after first time registration is
	// complete.
	RegisterAsStandaloneSource *bool `json:"registerAsStandaloneSource,omitempty"`

	// A version that is associated with the params. This is updated anytime
	// any of the params change. This is used to discard older connector params.
	Version *int64 `json:"version,omitempty"`
}

// Validate validates this v c d v center info
func (m *VCDVCenterInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VCDVCenterInfo) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v c d v center info based on the context it is used
func (m *VCDVCenterInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VCDVCenterInfo) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VCDVCenterInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VCDVCenterInfo) UnmarshalBinary(b []byte) error {
	var res VCDVCenterInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
