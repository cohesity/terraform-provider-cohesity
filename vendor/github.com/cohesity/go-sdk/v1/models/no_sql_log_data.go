// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NoSQLLogData Proto that contains the information about a log file containing MongoDB
// cdp logs pertaining to an entity. This is populated from the data events
// written to scribe for corresponding entity. The start and end sequence
// numbers correspond to the range of logs inside this file which need to
// be applied for hydration. We also mark if a file has recorded an oplog
// rollover and if it contains at least 1 change event.
//
// swagger:model NoSqlLogData
type NoSQLLogData struct {

	// True if this file contains at least 1 change event.
	ContainsChangeEvent *bool `json:"containsChangeEvent,omitempty"`

	// End sequence number in the log file till which the data needs to be
	// applied. If this not populated, hydration_time_usecs must be used for
	// determining the point till which the log needs to be applied for
	// hydration.
	EndSeqNumber *Sequencer `json:"endSeqNumber,omitempty"`

	// Name of the log file that needs to be processed.
	LogFileName *string `json:"logFileName,omitempty"`

	// True if log rollover has happened.
	LogRollover *bool `json:"logRollover,omitempty"`

	// Start sequence number in the log file from which the data needs to be
	// applied for hydration.
	StartSeqNumber *Sequencer `json:"startSeqNumber,omitempty"`
}

// Validate validates this no Sql log data
func (m *NoSQLLogData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndSeqNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartSeqNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLLogData) validateEndSeqNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.EndSeqNumber) { // not required
		return nil
	}

	if m.EndSeqNumber != nil {
		if err := m.EndSeqNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endSeqNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endSeqNumber")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLLogData) validateStartSeqNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.StartSeqNumber) { // not required
		return nil
	}

	if m.StartSeqNumber != nil {
		if err := m.StartSeqNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startSeqNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startSeqNumber")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this no Sql log data based on the context it is used
func (m *NoSQLLogData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndSeqNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartSeqNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLLogData) contextValidateEndSeqNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.EndSeqNumber != nil {

		if swag.IsZero(m.EndSeqNumber) { // not required
			return nil
		}

		if err := m.EndSeqNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endSeqNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endSeqNumber")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLLogData) contextValidateStartSeqNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.StartSeqNumber != nil {

		if swag.IsZero(m.StartSeqNumber) { // not required
			return nil
		}

		if err := m.StartSeqNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startSeqNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startSeqNumber")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NoSQLLogData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NoSQLLogData) UnmarshalBinary(b []byte) error {
	var res NoSQLLogData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
