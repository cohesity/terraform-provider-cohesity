// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Task Task.
//
// Specifies one task.
//
// swagger:model Task
type Task struct {

	// The latest attributes reported for this task.
	Attributes []*TaskAttribute `json:"attributes"`

	// Specifies the end time of the task.
	EndTimeSeconds *int64 `json:"endTimeSeconds,omitempty"`

	// Specifies an optional error message for this task.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Specifies the events reported for this task.
	Events []*TaskEvent `json:"events"`

	// Specifies the estimated end time of the task.
	ExpectedEndTimeSeconds *int64 `json:"expectedEndTimeSeconds,omitempty"`

	// Specifies the expected remaining time for this task in seconds.
	ExpectedSecondsRemaining *int64 `json:"expectedSecondsRemaining,omitempty"`

	// The expected raw count of the total work remaining. This is the highest
	// work count value reported by the client. This field can be set to let
	// pulse compute percentFinished by looking at the currently reported
	// remainingWorkCount and the expectedTotalWorkCount.
	ExpectedTotalWorkCount *int64 `json:"expectedTotalWorkCount,omitempty"`

	// Specifies the timestamp when the last progress was reported.
	LastUpdateTimeSeconds *int64 `json:"lastUpdateTimeSeconds,omitempty"`

	// Specifies the reported progress on the task.
	PercentFinished *float32 `json:"percentFinished,omitempty"`

	// Specifies the start time of the task.
	StartTimeSeconds *int64 `json:"startTimeSeconds,omitempty"`

	// Specifies the status of the task being queried.
	// 'kActive' indicates that the task is still active.
	// 'kFinished' indicates that the task has finished without any errors.
	// 'kFinishedWithError' indicates that the task has finished, but that there
	// was an errror of some kind.
	// 'kCancelled' indicates that the task was cancelled.
	// 'kFinishedGarbageCollected' indicates that the task was garbage collected
	// due to its subtasks not finishing within the allotted time.
	// Enum: ["kActive","kFinished","kFinishedWithError","kCancelled","kFinishedGarbageCollected"]
	Status *string `json:"status,omitempty"`

	// Specifies a list of subtasks belonging to this task.
	SubTasks []interface{} `json:"subTasks"`

	// Specifes the path of this task.
	TaskPath *string `json:"taskPath,omitempty"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Task) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var taskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kActive","kFinished","kFinishedWithError","kCancelled","kFinishedGarbageCollected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypeStatusPropEnum = append(taskTypeStatusPropEnum, v)
	}
}

const (

	// TaskStatusKActive captures enum value "kActive"
	TaskStatusKActive string = "kActive"

	// TaskStatusKFinished captures enum value "kFinished"
	TaskStatusKFinished string = "kFinished"

	// TaskStatusKFinishedWithError captures enum value "kFinishedWithError"
	TaskStatusKFinishedWithError string = "kFinishedWithError"

	// TaskStatusKCancelled captures enum value "kCancelled"
	TaskStatusKCancelled string = "kCancelled"

	// TaskStatusKFinishedGarbageCollected captures enum value "kFinishedGarbageCollected"
	TaskStatusKFinishedGarbageCollected string = "kFinishedGarbageCollected"
)

// prop value enum
func (m *Task) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Task) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this task based on the context it is used
func (m *Task) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attributes); i++ {

		if m.Attributes[i] != nil {

			if swag.IsZero(m.Attributes[i]) { // not required
				return nil
			}

			if err := m.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Task) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {

			if swag.IsZero(m.Events[i]) { // not required
				return nil
			}

			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
