// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragePolicy Storage Policy.
//
// Specifies the storage options applied to a Storage Domain (View Box).
//
// swagger:model StoragePolicy
type StoragePolicy struct {

	// If EncryptionLevel is 'KEncryptionStrong' EncryptionMode tells whether
	// encryption algorithm used is AES_CBC or AES_GCM.
	AesEncryptionMode *string `json:"aesEncryptionMode,omitempty"`

	// Specifies Whether to support app marker detection. When this is set to
	// true, app markers (like commvault markers) will be removed from data and
	// put in separate chunks. This way deduplication is improved as it is done
	// on data that has no app markers.
	AppMarkerDetection *bool `json:"appMarkerDetection,omitempty"`

	// Specifies the vault id assigned for an external Storage
	// Target to facilitate cloud spill.
	CloudSpillVaultID *int64 `json:"cloudSpillVaultId,omitempty"`

	// Specifies the compression setting to be applied to a Storage Domain
	// (View Box).
	// 'kCompressionNone' indicates that data is not compressed.
	// 'kCompressionLow' indicates that data is compressed using LZ4 or Snappy.
	// 'kCompressionHigh' indicates that data is compressed in Gzip.
	// Enum: ["kCompressionNone","kCompressionLow","kCompressionHigh"]
	CompressionPolicy *string `json:"compressionPolicy,omitempty"`

	// Specifies the time in seconds when deduplication and compression
	// of data on the Storage Domain (View Box) starts.
	// If set to 0, deduplication and compression is done inline
	// (as the data is being written).
	// Otherwise, post-process deduplication and compression is done after the
	// specified delay.
	DeduplicateCompressDelaySecs *int32 `json:"deduplicateCompressDelaySecs,omitempty"`

	// Specifies if deduplication is enabled for the Storage Domain (View Box).
	// If deduplication is enabled, the Cohesity Cluster eliminates
	// duplicate blocks of repeating data stored on the Cluster
	// thus reducing the amount of storage space needed to store data.
	DeduplicationEnabled *bool `json:"deduplicationEnabled,omitempty"`

	// Specifies the encryption setting for the Storage Domain (View Box).
	// 'kEncryptionNone' indicates the data is not encrypted.
	// 'kEncryptionStrong' indicates the data is encrypted.
	// Enum: ["kEncryptionNone","kEncryptionStrong","kEncryptionWeak"]
	EncryptionPolicy *string `json:"encryptionPolicy,omitempty"`

	// Specifies information about erasure coding if erasure coding is enabled.
	ErasureCodingInfo *ErasureCodingInfo `json:"erasureCodingInfo,omitempty"`

	// Specifies if compression should occur inline (as the data is being
	// written). This field is only relevant if compression is enabled. If
	// deduplication is set to inline, Cohesity recommends setting compression to
	// inline.
	InlineCompress *bool `json:"inlineCompress,omitempty"`

	// Specifies if deduplication should occur inline (as the data is being
	// written). This field is only relevant if deduplication is enabled.
	InlineDeduplicate *bool `json:"inlineDeduplicate,omitempty"`

	// Number of disk failures to tolerate. This is an optional field. Default value
	// is 1 for cluster having 3 or more nodes. If erasure coding is not enabled,
	// then this specifies the replication factor for the Storage Domain (View Box).
	// For RF=2, number of failures to tolerate should be specified as 1. If
	// erasure coding is enabled, then this value will be same as number of coded
	// stripes.
	NumFailuresTolerated *int32 `json:"numFailuresTolerated,omitempty"`

	// Number of node failures to tolerate. If NumNodeFailuresTolerated is set to
	// 2, then we would tolerate up to two node failures. If the following is not
	// set, then the number of node failures tolerated would be same as
	// replication factor - 1 for replicated chunk files or number of coded
	// stripes for erasure coding chunk files.
	NumNodeFailuresTolerated *int32 `json:"numNodeFailuresTolerated,omitempty"`
}

// Validate validates this storage policy
func (m *StoragePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompressionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErasureCodingInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storagePolicyTypeCompressionPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCompressionNone","kCompressionLow","kCompressionHigh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagePolicyTypeCompressionPolicyPropEnum = append(storagePolicyTypeCompressionPolicyPropEnum, v)
	}
}

const (

	// StoragePolicyCompressionPolicyKCompressionNone captures enum value "kCompressionNone"
	StoragePolicyCompressionPolicyKCompressionNone string = "kCompressionNone"

	// StoragePolicyCompressionPolicyKCompressionLow captures enum value "kCompressionLow"
	StoragePolicyCompressionPolicyKCompressionLow string = "kCompressionLow"

	// StoragePolicyCompressionPolicyKCompressionHigh captures enum value "kCompressionHigh"
	StoragePolicyCompressionPolicyKCompressionHigh string = "kCompressionHigh"
)

// prop value enum
func (m *StoragePolicy) validateCompressionPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storagePolicyTypeCompressionPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StoragePolicy) validateCompressionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.CompressionPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateCompressionPolicyEnum("compressionPolicy", "body", *m.CompressionPolicy); err != nil {
		return err
	}

	return nil
}

var storagePolicyTypeEncryptionPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kEncryptionNone","kEncryptionStrong","kEncryptionWeak"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagePolicyTypeEncryptionPolicyPropEnum = append(storagePolicyTypeEncryptionPolicyPropEnum, v)
	}
}

const (

	// StoragePolicyEncryptionPolicyKEncryptionNone captures enum value "kEncryptionNone"
	StoragePolicyEncryptionPolicyKEncryptionNone string = "kEncryptionNone"

	// StoragePolicyEncryptionPolicyKEncryptionStrong captures enum value "kEncryptionStrong"
	StoragePolicyEncryptionPolicyKEncryptionStrong string = "kEncryptionStrong"

	// StoragePolicyEncryptionPolicyKEncryptionWeak captures enum value "kEncryptionWeak"
	StoragePolicyEncryptionPolicyKEncryptionWeak string = "kEncryptionWeak"
)

// prop value enum
func (m *StoragePolicy) validateEncryptionPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storagePolicyTypeEncryptionPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StoragePolicy) validateEncryptionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateEncryptionPolicyEnum("encryptionPolicy", "body", *m.EncryptionPolicy); err != nil {
		return err
	}

	return nil
}

func (m *StoragePolicy) validateErasureCodingInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ErasureCodingInfo) { // not required
		return nil
	}

	if m.ErasureCodingInfo != nil {
		if err := m.ErasureCodingInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("erasureCodingInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("erasureCodingInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage policy based on the context it is used
func (m *StoragePolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErasureCodingInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePolicy) contextValidateErasureCodingInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ErasureCodingInfo != nil {

		if swag.IsZero(m.ErasureCodingInfo) { // not required
			return nil
		}

		if err := m.ErasureCodingInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("erasureCodingInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("erasureCodingInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePolicy) UnmarshalBinary(b []byte) error {
	var res StoragePolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
