// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SourceBackupStatus Source Object Backup Status.
//
// Specifies the source object to protect and the current backup status.
//
// swagger:model SourceBackupStatus
type SourceBackupStatus struct {

	// Specifies the backup status at app/DB level.
	AppsBackupStatus []*AppEntityBackupStatusInfo `json:"appsBackupStatus"`

	// Specifies the attempt number of the source object run.
	AttemptNum *int32 `json:"attemptNum,omitempty"`

	// Specifies details about the snapshot captured to backup the
	// source object (such as a VM).
	CurrentSnapshotInfo *SnapshotInfo `json:"currentSnapshotInfo,omitempty"`

	// Specifies if an error occurred (if any) while running this task.
	// This field is populated when the status is equal to 'kFailure'.
	Error *string `json:"error,omitempty"`

	// Specifies whether this is a 'kFull' or 'kRegular' backup of the Run.
	// This may be true even if the scheduled backup type is 'kRegular'.
	// This will happen when this run corresponds to the first backup run of
	// the Job or if no previous snapshot information is found.
	IsFullBackup *bool `json:"isFullBackup,omitempty"`

	// Specifies the number of times the task was restarted because of the
	// changes on the backup source host.
	NumRestarts *int32 `json:"numRestarts,omitempty"`

	// Specifies the id of the registered Protection Source that is the
	// parent of the Objects that are protected by this Job Run.
	ParentSourceID *int64 `json:"parentSourceId,omitempty"`

	// Specifies the yoda progress monitor task path which is used to get pulse
	// information about the source that is being backed up.
	ProgressMonitorTaskPath *string `json:"progressMonitorTaskPath,omitempty"`

	// Specifies if app-consistent snapshot was captured. This field is set to
	// true, if an app-consistent snapshot was taken by
	// quiescing applications and the file system before taking a backup.
	Quiesced *bool `json:"quiesced,omitempty"`

	// Specifies if the SLA was violated for the Job Run. This field is set
	// to true, if time to complete the Job Run is longer than the SLA
	// specified. This field is populated when the status is
	// set to 'kSuccess' or 'kFailure'.
	SLAViolated *bool `json:"slaViolated,omitempty"`

	// Specifies the source object to protect.
	Source *ProtectionSource `json:"source,omitempty"`

	// Specifies the stats of the Backup Run task for the Protection Source.
	Stats *BackupSourceStats `json:"stats,omitempty"`

	// Specifies the status of the source object being protected.
	// 'kAccepted' indicates the task is queued to run but not yet running.
	// 'kRunning' indicates the task is running.
	// 'kCanceling' indicates a request to cancel the task has occurred but
	//
	// the task is not yet canceled.
	//
	// 'kCanceled' indicates the task has been canceled.
	// 'kSuccess' indicates the task was successful.
	// 'kFailure' indicates the task failed.
	// 'kWarning' indicates the task has finished with warning.
	// 'kOnHold' indicates the task is kept onHold.
	// 'kMissed' indicates the task is missed.
	// 'Finalizing' indicates the task is finalizing.
	// Enum: ["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure","kWarning","kOnHold","kMissed","kFinalizing"]
	Status *string `json:"status,omitempty"`

	// Array of Warnings.
	//
	// Specifies the warnings that occurred (if any) while running this task.
	Warnings []string `json:"warnings"`
}

// Validate validates this source backup status
func (m *SourceBackupStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppsBackupStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentSnapshotInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceBackupStatus) validateAppsBackupStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AppsBackupStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.AppsBackupStatus); i++ {
		if swag.IsZero(m.AppsBackupStatus[i]) { // not required
			continue
		}

		if m.AppsBackupStatus[i] != nil {
			if err := m.AppsBackupStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appsBackupStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appsBackupStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SourceBackupStatus) validateCurrentSnapshotInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentSnapshotInfo) { // not required
		return nil
	}

	if m.CurrentSnapshotInfo != nil {
		if err := m.CurrentSnapshotInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentSnapshotInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentSnapshotInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SourceBackupStatus) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *SourceBackupStatus) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

var sourceBackupStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure","kWarning","kOnHold","kMissed","kFinalizing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sourceBackupStatusTypeStatusPropEnum = append(sourceBackupStatusTypeStatusPropEnum, v)
	}
}

const (

	// SourceBackupStatusStatusKAccepted captures enum value "kAccepted"
	SourceBackupStatusStatusKAccepted string = "kAccepted"

	// SourceBackupStatusStatusKRunning captures enum value "kRunning"
	SourceBackupStatusStatusKRunning string = "kRunning"

	// SourceBackupStatusStatusKCanceling captures enum value "kCanceling"
	SourceBackupStatusStatusKCanceling string = "kCanceling"

	// SourceBackupStatusStatusKCanceled captures enum value "kCanceled"
	SourceBackupStatusStatusKCanceled string = "kCanceled"

	// SourceBackupStatusStatusKSuccess captures enum value "kSuccess"
	SourceBackupStatusStatusKSuccess string = "kSuccess"

	// SourceBackupStatusStatusKFailure captures enum value "kFailure"
	SourceBackupStatusStatusKFailure string = "kFailure"

	// SourceBackupStatusStatusKWarning captures enum value "kWarning"
	SourceBackupStatusStatusKWarning string = "kWarning"

	// SourceBackupStatusStatusKOnHold captures enum value "kOnHold"
	SourceBackupStatusStatusKOnHold string = "kOnHold"

	// SourceBackupStatusStatusKMissed captures enum value "kMissed"
	SourceBackupStatusStatusKMissed string = "kMissed"

	// SourceBackupStatusStatusKFinalizing captures enum value "kFinalizing"
	SourceBackupStatusStatusKFinalizing string = "kFinalizing"
)

// prop value enum
func (m *SourceBackupStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sourceBackupStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SourceBackupStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this source backup status based on the context it is used
func (m *SourceBackupStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppsBackupStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentSnapshotInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceBackupStatus) contextValidateAppsBackupStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppsBackupStatus); i++ {

		if m.AppsBackupStatus[i] != nil {

			if swag.IsZero(m.AppsBackupStatus[i]) { // not required
				return nil
			}

			if err := m.AppsBackupStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appsBackupStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appsBackupStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SourceBackupStatus) contextValidateCurrentSnapshotInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentSnapshotInfo != nil {

		if swag.IsZero(m.CurrentSnapshotInfo) { // not required
			return nil
		}

		if err := m.CurrentSnapshotInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentSnapshotInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentSnapshotInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SourceBackupStatus) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *SourceBackupStatus) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SourceBackupStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceBackupStatus) UnmarshalBinary(b []byte) error {
	var res SourceBackupStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
