// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoteVaultSearchJobResults Remote Vault Search Job Result.
//
// Specifies detailed information about Job Runs of Protection Jobs found
// by a search Job when searching a remote Vault for archived data.
//
// swagger:model RemoteVaultSearchJobResults
type RemoteVaultSearchJobResults struct {

	// Specifies number of Clusters that have archived to the remote Vault
	// that match the criteria specified in the search Job,
	// up to this point in the search.
	// If the search is complete, the total number of Clusters that have
	// archived to the remote Vault and that match the search criteria
	// for the search Job, are reported.
	// If the search was not complete, a partial number is reported.
	ClusterCount *int32 `json:"clusterCount,omitempty"`

	// Specifies the value of the clusterMatchSting if it was set in the
	// original search Job.
	ClusterMatchString *string `json:"clusterMatchString,omitempty"`

	// Specifies an opaque string to pass to the next request to get the
	// next set of search results. This is provided to support pagination.
	// If null, this is the last set of search results.
	Cookie *string `json:"cookie,omitempty"`

	// Specifies the value of endTimeUsecs if it was set in the original
	// search Job. End time is recorded as a Unix epoch Timestamp
	// (in microseconds).
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the error message if the search fails.
	Error *string `json:"error,omitempty"`

	// Specifies number of Protection Jobs that have archived to the remote Vault
	// that match the criteria specified in the search Job.
	// If the search is complete, the total number of Protection Jobs that have
	// archived to the remote Vault and match the search criteria
	// for the search Job, are reported.
	// If the search is not complete, a partial number is reported.
	JobCount *int32 `json:"jobCount,omitempty"`

	// Specifies the value of the jobMatchSting if it was set in the
	// original search Job.
	JobMatchString *string `json:"jobMatchString,omitempty"`

	// Array of Protection Jobs.
	//
	// Specifies a list of Protection Jobs that have archived data to a
	// remote Vault and that also match the filter criteria.
	ProtectionJobs []*RemoteProtectionJobRunInformation `json:"protectionJobs"`

	// Specifies the status of the search Job.
	// 'kJobRunning' indicates that the Job/task is currently running.
	// 'kJobFinished' indicates that the Job/task completed and finished.
	// 'kJobFailed' indicates that the Job/task failed and did not complete.
	// 'kJobCanceled' indicates that the Job/task was canceled.
	// 'kJobPaused' indicates the Job/task is paused.
	// Enum: ["kJobRunning","kJobFinished","kJobFailed","kJobCanceled","kJobPaused"]
	SearchJobStatus *string `json:"searchJobStatus,omitempty"`

	// Search Job Id.
	//
	// Specifies the unique id of the search Job assigned by the Cluster.
	SearchJobUID struct {
		UniversalID
	} `json:"searchJobUid,omitempty"`

	// Specifies the value of startTimeUsecs if it was set in the original
	// search Job. Start time is recorded as a Unix epoch Timestamp
	// (in microseconds).
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the id of the remote Vault that was searched.
	VaultID *int64 `json:"vaultId,omitempty"`

	// Specifies the name of the remote Vault that was searched.
	VaultName *string `json:"vaultName,omitempty"`
}

// Validate validates this remote vault search job results
func (m *RemoteVaultSearchJobResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchJobStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchJobUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteVaultSearchJobResults) validateProtectionJobs(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionJobs) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionJobs); i++ {
		if swag.IsZero(m.ProtectionJobs[i]) { // not required
			continue
		}

		if m.ProtectionJobs[i] != nil {
			if err := m.ProtectionJobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var remoteVaultSearchJobResultsTypeSearchJobStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kJobRunning","kJobFinished","kJobFailed","kJobCanceled","kJobPaused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remoteVaultSearchJobResultsTypeSearchJobStatusPropEnum = append(remoteVaultSearchJobResultsTypeSearchJobStatusPropEnum, v)
	}
}

const (

	// RemoteVaultSearchJobResultsSearchJobStatusKJobRunning captures enum value "kJobRunning"
	RemoteVaultSearchJobResultsSearchJobStatusKJobRunning string = "kJobRunning"

	// RemoteVaultSearchJobResultsSearchJobStatusKJobFinished captures enum value "kJobFinished"
	RemoteVaultSearchJobResultsSearchJobStatusKJobFinished string = "kJobFinished"

	// RemoteVaultSearchJobResultsSearchJobStatusKJobFailed captures enum value "kJobFailed"
	RemoteVaultSearchJobResultsSearchJobStatusKJobFailed string = "kJobFailed"

	// RemoteVaultSearchJobResultsSearchJobStatusKJobCanceled captures enum value "kJobCanceled"
	RemoteVaultSearchJobResultsSearchJobStatusKJobCanceled string = "kJobCanceled"

	// RemoteVaultSearchJobResultsSearchJobStatusKJobPaused captures enum value "kJobPaused"
	RemoteVaultSearchJobResultsSearchJobStatusKJobPaused string = "kJobPaused"
)

// prop value enum
func (m *RemoteVaultSearchJobResults) validateSearchJobStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remoteVaultSearchJobResultsTypeSearchJobStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RemoteVaultSearchJobResults) validateSearchJobStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SearchJobStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateSearchJobStatusEnum("searchJobStatus", "body", *m.SearchJobStatus); err != nil {
		return err
	}

	return nil
}

func (m *RemoteVaultSearchJobResults) validateSearchJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.SearchJobUID) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this remote vault search job results based on the context it is used
func (m *RemoteVaultSearchJobResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtectionJobs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSearchJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteVaultSearchJobResults) contextValidateProtectionJobs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionJobs); i++ {

		if m.ProtectionJobs[i] != nil {

			if swag.IsZero(m.ProtectionJobs[i]) { // not required
				return nil
			}

			if err := m.ProtectionJobs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RemoteVaultSearchJobResults) contextValidateSearchJobUID(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteVaultSearchJobResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteVaultSearchJobResults) UnmarshalBinary(b []byte) error {
	var res RemoteVaultSearchJobResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
