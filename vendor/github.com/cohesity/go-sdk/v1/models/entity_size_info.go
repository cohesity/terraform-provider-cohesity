// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntitySizeInfo Contains the size information for an entity.
//
// swagger:model EntitySizeInfo
type EntitySizeInfo struct {

	// Size of the data on the source as seen by the application level. This is
	// optional. This field is provided to account for the volume size as seen by
	// the OS on the source. This can be populated for certain adapters
	// and certain sources (agent based, NAS, VMs with guest tools). Other
	// adapters can leave this blank.
	//
	// Example: In windows, a 100GB volume can have a space usage of 30GB. In
	// that case, this value is set to 30GB.
	//
	// This suffers from the following two uncertainties:
	// 1. Unclear whether to include externally attached storage in the
	// calculations.
	//
	// 2. This data is available only for agent based backups, some NAS backups
	// and for some VMs with guest tools installed.
	//
	// Due to the above ambiguities, this is used only for some status reporting
	// purposes.
	SourceDataSizeBytes *int64 `json:"sourceDataSizeBytes,omitempty"`

	// Space provisioned for the protected entity at the source storage.
	//
	// VMWare: For a thin provisoned volume of 100GB that is taking up 10GB of
	// space on underlying storage, this value is 100GB.
	//
	// Windows: A volume that is 100GB will have this field set to 100GB.
	//
	// The primary intent of this should be to display some stats in the UI (e.g.
	// in vCenter source hierarchy, show the VM size).
	//
	// This field suffers from the following ambiguity:
	// It is unclear whether to include externally attached storage in this
	// calculation.
	SourceProvisionedLogicalSizeBytes *int64 `json:"sourceProvisionedLogicalSizeBytes,omitempty"`
}

// Validate validates this entity size info
func (m *EntitySizeInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this entity size info based on context it is used
func (m *EntitySizeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EntitySizeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntitySizeInfo) UnmarshalBinary(b []byte) error {
	var res EntitySizeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
