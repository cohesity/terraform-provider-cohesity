// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserParameters User Request.
//
// Specifies the settings used to create/add a new user or modify an
// existing user.
//
// swagger:model UserParameters
type UserParameters struct {

	// Array of Additional Groups.
	//
	// Specifies the names of additional groups this User may belong to.
	AdditionalGroupNames []string `json:"additionalGroupNames"`

	// Specifies the list of clusters this user has access to. If this is not
	// specified, access will be granted to all clusters.
	ClusterIdentifiers []*ClusterIdentifier `json:"clusterIdentifiers"`

	// Specifies a description about the user.
	Description *string `json:"description,omitempty"`

	// Specifies the fully qualified domain name (FQDN) of an Active Directory
	// or LOCAL for the default LOCAL domain on the Cohesity Cluster.
	// A user is uniquely identified by combination of the username and
	// the domain.
	Domain *string `json:"domain,omitempty"`

	// Specifies the epoch time in milliseconds when the user becomes
	// effective. Until that time, the user cannot log in.
	EffectiveTimeMsecs *int64 `json:"effectiveTimeMsecs,omitempty"`

	// Specifies the email address of the user.
	EmailAddress *string `json:"emailAddress,omitempty"`

	// Specifies the epoch time in milliseconds when the user becomes
	// expired. After that, the user cannot log in.
	ExpiredTimeMsecs *int64 `json:"expiredTimeMsecs,omitempty"`

	// Specifies the password of this user.
	Password *string `json:"password,omitempty"`

	// Specifies the name of the primary group of this User.
	PrimaryGroupName *string `json:"primaryGroupName,omitempty"`

	// Array of Privileges.
	//
	// Specifies the Cohesity privileges from the roles. This will be populated
	// based on the union of all privileges in roles.
	// Type for unique privilege Id values.
	// All below enum values specify a value for all uniquely defined
	// privileges in Cohesity.
	PrivilegeIds []string `json:"privilegeIds"`

	// Specifies the user profiles.
	// NOTE: Currently used for Helios.
	Profiles []*McmUserProfile `json:"profiles"`

	// Whether the user is a restricted user. A restricted user can only view
	// the objects he has permissions to.
	Restricted *bool `json:"restricted,omitempty"`

	// Array of Roles.
	//
	// Specifies the Cohesity roles to associate with the user such as
	// such as 'Admin', 'Ops' or 'View'.
	// The Cohesity roles determine privileges on the Cohesity Cluster
	// for this user.
	Roles []string `json:"roles"`

	// Specifies the tenant access available to current user.
	// NOTE: Currently used for Helios.
	TenantAccesses []*TenantAccess `json:"tenantAccesses"`

	// Specifies the login name of the user.
	Username *string `json:"username,omitempty"`
}

// Validate validates this user parameters
func (m *UserParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivilegeIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantAccesses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserParameters) validateClusterIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterIdentifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterIdentifiers); i++ {
		if swag.IsZero(m.ClusterIdentifiers[i]) { // not required
			continue
		}

		if m.ClusterIdentifiers[i] != nil {
			if err := m.ClusterIdentifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterIdentifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterIdentifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var userParametersPrivilegeIdsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPrincipalView","kPrincipalModify","kAppLaunch","kAppsManagement","kOrganizationView","kOrganizationModify","kOrganizationImpersonate","kCloneView","kCloneModify","kClusterView","kClusterModify","kClusterCreate","kClusterSupport","kClusterUpgrade","kClusterRemoteView","kClusterRemoteModify","kClusterExternalTargetView","kClusterExternalTargetModify","kClusterAudit","kAlertView","kAlertModify","kVlanView","kVlanModify","kHybridExtenderView","kHybridExtenderDownload","kAdLdapView","kAdLdapModify","kSchedulerView","kSchedulerModify","kProtectionView","kProtectionModify","kProtectionJobOperate","kProtectionSourceModify","kProtectionPolicyView","kProtectionPolicyModify","kRestoreView","kRestoreModify","kRestoreDownload","kRemoteRestore","kStorageView","kStorageModify","kStorageDomainView","kStorageDomainModify","kAnalyticsView","kAnalyticsModify","kReportsView","kMcmModify","kDataSecurity","kSmbBackup","kSmbRestore","kSmbTakeOwnership","kSmbAuditing","kMcmUnregister","kMcmUpgrade","kMcmModifySuperAdmin","kMcmViewSuperAdmin","kMcmModifyCohesityAdmin","kMcmViewCohesityAdmin","kObjectSearch","kFileDatalockExpiryTimeDecrease"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userParametersPrivilegeIdsItemsEnum = append(userParametersPrivilegeIdsItemsEnum, v)
	}
}

func (m *UserParameters) validatePrivilegeIdsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userParametersPrivilegeIdsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserParameters) validatePrivilegeIds(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivilegeIds) { // not required
		return nil
	}

	for i := 0; i < len(m.PrivilegeIds); i++ {

		// value enum
		if err := m.validatePrivilegeIdsItemsEnum("privilegeIds"+"."+strconv.Itoa(i), "body", m.PrivilegeIds[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *UserParameters) validateProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	for i := 0; i < len(m.Profiles); i++ {
		if swag.IsZero(m.Profiles[i]) { // not required
			continue
		}

		if m.Profiles[i] != nil {
			if err := m.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserParameters) validateTenantAccesses(formats strfmt.Registry) error {
	if swag.IsZero(m.TenantAccesses) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantAccesses); i++ {
		if swag.IsZero(m.TenantAccesses[i]) { // not required
			continue
		}

		if m.TenantAccesses[i] != nil {
			if err := m.TenantAccesses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenantAccesses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tenantAccesses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user parameters based on the context it is used
func (m *UserParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenantAccesses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserParameters) contextValidateClusterIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterIdentifiers); i++ {

		if m.ClusterIdentifiers[i] != nil {

			if swag.IsZero(m.ClusterIdentifiers[i]) { // not required
				return nil
			}

			if err := m.ClusterIdentifiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterIdentifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterIdentifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserParameters) contextValidateProfiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Profiles); i++ {

		if m.Profiles[i] != nil {

			if swag.IsZero(m.Profiles[i]) { // not required
				return nil
			}

			if err := m.Profiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserParameters) contextValidateTenantAccesses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TenantAccesses); i++ {

		if m.TenantAccesses[i] != nil {

			if swag.IsZero(m.TenantAccesses[i]) { // not required
				return nil
			}

			if err := m.TenantAccesses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenantAccesses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tenantAccesses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserParameters) UnmarshalBinary(b []byte) error {
	var res UserParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
