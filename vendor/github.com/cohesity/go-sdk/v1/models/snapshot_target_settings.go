// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotTargetSettings Snapshot Target.
//
// Specifies settings about a target where a copied Snapshot is stored.
// A target can be a Remote Cluster or an Archival External Target such as
// AWS or Tape.
//
// swagger:model SnapshotTargetSettings
type SnapshotTargetSettings struct {

	// Specifies the Archival External Target for storing a copied Snapshot.
	// If the type is not 'kLocal', either a replicationTarget,
	// archivalExternalTarget or cloudReplicationTarget must be specified.
	ArchivalTarget *ArchivalExternalTarget `json:"archivalTarget,omitempty"`

	// Specifies the cloud replication target for storing a copied Snapshot.
	// If the type is not 'kLocal', either a replicationTarget,
	// archivalExternalTarget or cloudReplicationTarget must be specified.
	CloudReplicationTarget *CloudDeployTargetDetails `json:"cloudReplicationTarget,omitempty"`

	// Specifies the replication target (Remote Cluster) for storing a copied
	// Snapshot.
	// If the type is not 'kLocal', either a replicationTarget,
	// archivalExternalTarget or cloudReplicationTarget must be specified.
	ReplicationTarget *ReplicationTargetSettings `json:"replicationTarget,omitempty"`

	// Specifies the type of a Snapshot target such as 'kLocal', 'kRemote' or
	// 'kArchival'.
	// 'kLocal' means the Snapshot is stored on a local Cohesity Cluster.
	// 'kRemote' means the Snapshot is stored on a Remote Cohesity Cluster.
	// (It was copied to the Remote Cohesity Cluster using replication.)
	// 'kArchival' means the Snapshot is stored on a Archival External Target
	// (such as Tape or AWS).
	// 'kCloudDeploy' means the Snapshot is stored on a Cloud platform.
	// Enum: ["kLocal","kRemote","kArchival","kCloudDeploy","kCloudReplication"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this snapshot target settings
func (m *SnapshotTargetSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchivalTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudReplicationTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotTargetSettings) validateArchivalTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalTarget) { // not required
		return nil
	}

	if m.ArchivalTarget != nil {
		if err := m.ArchivalTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTarget")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTargetSettings) validateCloudReplicationTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudReplicationTarget) { // not required
		return nil
	}

	if m.CloudReplicationTarget != nil {
		if err := m.CloudReplicationTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudReplicationTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudReplicationTarget")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTargetSettings) validateReplicationTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTarget) { // not required
		return nil
	}

	if m.ReplicationTarget != nil {
		if err := m.ReplicationTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationTarget")
			}
			return err
		}
	}

	return nil
}

var snapshotTargetSettingsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLocal","kRemote","kArchival","kCloudDeploy","kCloudReplication"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotTargetSettingsTypeTypePropEnum = append(snapshotTargetSettingsTypeTypePropEnum, v)
	}
}

const (

	// SnapshotTargetSettingsTypeKLocal captures enum value "kLocal"
	SnapshotTargetSettingsTypeKLocal string = "kLocal"

	// SnapshotTargetSettingsTypeKRemote captures enum value "kRemote"
	SnapshotTargetSettingsTypeKRemote string = "kRemote"

	// SnapshotTargetSettingsTypeKArchival captures enum value "kArchival"
	SnapshotTargetSettingsTypeKArchival string = "kArchival"

	// SnapshotTargetSettingsTypeKCloudDeploy captures enum value "kCloudDeploy"
	SnapshotTargetSettingsTypeKCloudDeploy string = "kCloudDeploy"

	// SnapshotTargetSettingsTypeKCloudReplication captures enum value "kCloudReplication"
	SnapshotTargetSettingsTypeKCloudReplication string = "kCloudReplication"
)

// prop value enum
func (m *SnapshotTargetSettings) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapshotTargetSettingsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapshotTargetSettings) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this snapshot target settings based on the context it is used
func (m *SnapshotTargetSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchivalTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudReplicationTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotTargetSettings) contextValidateArchivalTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchivalTarget != nil {

		if swag.IsZero(m.ArchivalTarget) { // not required
			return nil
		}

		if err := m.ArchivalTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTarget")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTargetSettings) contextValidateCloudReplicationTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudReplicationTarget != nil {

		if swag.IsZero(m.CloudReplicationTarget) { // not required
			return nil
		}

		if err := m.CloudReplicationTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudReplicationTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudReplicationTarget")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTargetSettings) contextValidateReplicationTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationTarget != nil {

		if swag.IsZero(m.ReplicationTarget) { // not required
			return nil
		}

		if err := m.ReplicationTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationTarget")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotTargetSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotTargetSettings) UnmarshalBinary(b []byte) error {
	var res SnapshotTargetSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
