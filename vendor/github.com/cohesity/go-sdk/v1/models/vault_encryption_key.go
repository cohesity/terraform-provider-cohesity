// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VaultEncryptionKey Vault Encryption Key.
//
// Specifies the encryption information needed to restore data.
//
// swagger:model VaultEncryptionKey
type VaultEncryptionKey struct {

	// Specifies the name of the source Cohesity Cluster
	// that archived the data on the Vault.
	ClusterName *string `json:"clusterName,omitempty"`

	// Specifies the encryption key data corresponding to the specified keyUid.
	// It contains a Key Encryption Key (KEK) or a
	// Encrypted Data Encryption Key (eDEK).
	EncryptionKeyData *string `json:"encryptionKeyData,omitempty"`

	// Universal Id.
	//
	// Specifies the universal id of the Data Encryption Key.
	KeyUID struct {
		UniversalID
	} `json:"keyUid,omitempty"`

	// Specifies the id of the Vault whose data is encrypted by
	// this key.
	VaultID *int64 `json:"vaultId,omitempty"`

	// Specifies the name of the Vault whose data is encrypted by this key.
	VaultName *string `json:"vaultName,omitempty"`
}

// Validate validates this vault encryption key
func (m *VaultEncryptionKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultEncryptionKey) validateKeyUID(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyUID) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this vault encryption key based on the context it is used
func (m *VaultEncryptionKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKeyUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultEncryptionKey) contextValidateKeyUID(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *VaultEncryptionKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VaultEncryptionKey) UnmarshalBinary(b []byte) error {
	var res VaultEncryptionKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
