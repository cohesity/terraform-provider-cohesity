// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SfdcObject Salesforce Object Info.
//
// Specifies an Object containing information about a Salseforce object.
//
// swagger:model SfdcObject
type SfdcObject struct {

	// Type of this object
	Fields []*SfdcObjectFields `json:"fields"`

	// Type of this object
	// Specifies the type of an Universal Data Adapter source entity.
	// 'kStandard' indicates a Universal Data Adapter source, possibly distributed
	// over several physical nodes.
	// 'kCustom' indicates a generic object within the UDA environment.
	// Enum: ["kStandard","kCustom"]
	ObjectType *string `json:"objectType,omitempty"`

	// Number of records in this object.
	RecordCount *uint64 `json:"recordCount,omitempty"`
}

// Validate validates this sfdc object
func (m *SfdcObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcObject) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var sfdcObjectTypeObjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStandard","kCustom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sfdcObjectTypeObjectTypePropEnum = append(sfdcObjectTypeObjectTypePropEnum, v)
	}
}

const (

	// SfdcObjectObjectTypeKStandard captures enum value "kStandard"
	SfdcObjectObjectTypeKStandard string = "kStandard"

	// SfdcObjectObjectTypeKCustom captures enum value "kCustom"
	SfdcObjectObjectTypeKCustom string = "kCustom"
)

// prop value enum
func (m *SfdcObject) validateObjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sfdcObjectTypeObjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SfdcObject) validateObjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectTypeEnum("objectType", "body", *m.ObjectType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sfdc object based on the context it is used
func (m *SfdcObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcObject) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fields); i++ {

		if m.Fields[i] != nil {

			if swag.IsZero(m.Fields[i]) { // not required
				return nil
			}

			if err := m.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SfdcObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcObject) UnmarshalBinary(b []byte) error {
	var res SfdcObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
