// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectionSourceNode Node in a Protection Sources Tree.
//
// Many different node types are supported such as
// 'kComputeResource' and 'kResourcePool'.
//
// swagger:model ProtectionSourceNode
type ProtectionSourceNode struct {

	// Array of Child Subtrees.
	//
	// Specifies the child subtree used to store additional application-level
	// Objects.
	// Different environments use the subtree to store application-level
	// information. For example for SQL Server, this subtree stores the
	// SQL Server instances running on a VM.
	ApplicationNodes []interface{} `json:"applicationNodes"`

	// Specifies the Credential vector of the external metadata. Currently only postgres credentials
	// for the aws entities are populated, can be extended to other usecase as well.
	CredentialList []*AppCredentials `json:"credentialList"`

	// Specifies the cursor based pagination parameters for Protection Source to
	// fetch the next set of sources within a level. This parameter will only be
	// present at the parent entity.
	EntityPaginationParameters *PaginationParameters `json:"entityPaginationParameters,omitempty"`

	// Specifies permission information for the entities.
	EntityPermissionInfo *EntityPermissionInformation `json:"entityPermissionInfo,omitempty"`

	// Specifies the logical size of the data in bytes for the Object
	// on this node.
	// Presence of this field indicates this node is a leaf node.
	LogicalSize *int64 `json:"logicalSize,omitempty"`

	// Specifies the maintenance mode configuration of the protection source for the root
	// node (we currently only support setting the maintenance mode of the root node only
	// v7.1)
	MaintenanceModeConfig *MaintenanceModeConfigProto `json:"maintenanceModeConfig,omitempty"`

	// Array of Child Nodes.
	//
	// Specifies children of the current node in the Protection Sources hierarchy.
	// When representing Objects in memory, the entire Object subtree
	// hierarchy is represented.
	// You can use this subtree to navigate down the Object hierarchy.
	Nodes []interface{} `json:"nodes"`

	// Specifies object protectionInfo information for the entities.
	ObjectProtectionInfo *ObjectProtectionInfo `json:"objectProtectionInfo,omitempty"`

	// Array of Protected Objects.
	//
	// Specifies aggregated information about all the
	// child Objects of this node that are currently protected by
	// a Protection Job.
	// There is one entry for each environment that is being backed up.
	// The aggregated information for the Object hierarchy's environment will
	// be available at the 0th index of the vector.
	ProtectedSourcesSummary []*AggregatedSubtreeInfo `json:"protectedSourcesSummary"`

	// Specifies the Protection Source for the current node.
	ProtectionSource struct {
		ProtectionSource
	} `json:"protectionSource,omitempty"`

	// Specifies registration information for a root node in a Protection
	// Sources tree. A root node represents a registered Source on the
	// Cohesity Cluster, such as a vCenter Server.
	RegistrationInfo struct {
		RegisteredSourceInfo
	} `json:"registrationInfo,omitempty"`

	// Specifies the total bytes downtiered from the source so far.
	TotalDowntieredSizeInBytes *int64 `json:"totalDowntieredSizeInBytes,omitempty"`

	// Specifies the total bytes uptiered to the source so far.
	TotalUptieredSizeInBytes *int64 `json:"totalUptieredSizeInBytes,omitempty"`

	// Array of Unprotected Sources.
	//
	// Specifies aggregated information about all the
	// child Objects of this node that are not protected by any Protection Jobs.
	// The aggregated information for the Objects hierarchy's environment
	// will be available at the 0th index of the vector.
	// NOTE: This list includes Objects that were protected at some point in the
	// past but are no longer actively protected.
	// Snapshots containing these Objects may even exist on the Cohesity Cluster
	// and be available to recover from.
	UnprotectedSourcesSummary []*AggregatedSubtreeInfo `json:"unprotectedSourcesSummary"`
}

// Validate validates this protection source node
func (m *ProtectionSourceNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityPaginationParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityPermissionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceModeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectProtectionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectedSourcesSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnprotectedSourcesSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSourceNode) validateCredentialList(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialList) { // not required
		return nil
	}

	for i := 0; i < len(m.CredentialList); i++ {
		if swag.IsZero(m.CredentialList[i]) { // not required
			continue
		}

		if m.CredentialList[i] != nil {
			if err := m.CredentialList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentialList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentialList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionSourceNode) validateEntityPaginationParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityPaginationParameters) { // not required
		return nil
	}

	if m.EntityPaginationParameters != nil {
		if err := m.EntityPaginationParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityPaginationParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityPaginationParameters")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceNode) validateEntityPermissionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityPermissionInfo) { // not required
		return nil
	}

	if m.EntityPermissionInfo != nil {
		if err := m.EntityPermissionInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityPermissionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityPermissionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceNode) validateMaintenanceModeConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MaintenanceModeConfig) { // not required
		return nil
	}

	if m.MaintenanceModeConfig != nil {
		if err := m.MaintenanceModeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenanceModeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenanceModeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceNode) validateObjectProtectionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectProtectionInfo) { // not required
		return nil
	}

	if m.ObjectProtectionInfo != nil {
		if err := m.ObjectProtectionInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectProtectionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectProtectionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceNode) validateProtectedSourcesSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectedSourcesSummary) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectedSourcesSummary); i++ {
		if swag.IsZero(m.ProtectedSourcesSummary[i]) { // not required
			continue
		}

		if m.ProtectedSourcesSummary[i] != nil {
			if err := m.ProtectedSourcesSummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectedSourcesSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectedSourcesSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionSourceNode) validateProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSourceNode) validateRegistrationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationInfo) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSourceNode) validateUnprotectedSourcesSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.UnprotectedSourcesSummary) { // not required
		return nil
	}

	for i := 0; i < len(m.UnprotectedSourcesSummary); i++ {
		if swag.IsZero(m.UnprotectedSourcesSummary[i]) { // not required
			continue
		}

		if m.UnprotectedSourcesSummary[i] != nil {
			if err := m.UnprotectedSourcesSummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unprotectedSourcesSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unprotectedSourcesSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this protection source node based on the context it is used
func (m *ProtectionSourceNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentialList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityPaginationParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityPermissionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaintenanceModeConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectProtectionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectedSourcesSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnprotectedSourcesSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSourceNode) contextValidateCredentialList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CredentialList); i++ {

		if m.CredentialList[i] != nil {

			if swag.IsZero(m.CredentialList[i]) { // not required
				return nil
			}

			if err := m.CredentialList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentialList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentialList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionSourceNode) contextValidateEntityPaginationParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityPaginationParameters != nil {

		if swag.IsZero(m.EntityPaginationParameters) { // not required
			return nil
		}

		if err := m.EntityPaginationParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityPaginationParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityPaginationParameters")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceNode) contextValidateEntityPermissionInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityPermissionInfo != nil {

		if swag.IsZero(m.EntityPermissionInfo) { // not required
			return nil
		}

		if err := m.EntityPermissionInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityPermissionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityPermissionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceNode) contextValidateMaintenanceModeConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MaintenanceModeConfig != nil {

		if swag.IsZero(m.MaintenanceModeConfig) { // not required
			return nil
		}

		if err := m.MaintenanceModeConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenanceModeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenanceModeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceNode) contextValidateObjectProtectionInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectProtectionInfo != nil {

		if swag.IsZero(m.ObjectProtectionInfo) { // not required
			return nil
		}

		if err := m.ObjectProtectionInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectProtectionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectProtectionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceNode) contextValidateProtectedSourcesSummary(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectedSourcesSummary); i++ {

		if m.ProtectedSourcesSummary[i] != nil {

			if swag.IsZero(m.ProtectedSourcesSummary[i]) { // not required
				return nil
			}

			if err := m.ProtectedSourcesSummary[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectedSourcesSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectedSourcesSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionSourceNode) contextValidateProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSourceNode) contextValidateRegistrationInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSourceNode) contextValidateUnprotectedSourcesSummary(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UnprotectedSourcesSummary); i++ {

		if m.UnprotectedSourcesSummary[i] != nil {

			if swag.IsZero(m.UnprotectedSourcesSummary[i]) { // not required
				return nil
			}

			if err := m.UnprotectedSourcesSummary[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unprotectedSourcesSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unprotectedSourcesSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionSourceNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionSourceNode) UnmarshalBinary(b []byte) error {
	var res ProtectionSourceNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
