// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMwareBackupSourceParams VMware Backup Source Parameters.
//
// Message to capture additional backup params for a VMware type source.
//
// swagger:model VMwareBackupSourceParams
type VMwareBackupSourceParams struct {

	// This message will capture params for applications that are running as
	// part of the server.
	SourceAppParams *SourceAppParams `json:"sourceAppParams,omitempty"`

	// Target entity credentials.
	// This should usually be set if the source_app_params is set, i.e any
	// additional operations that require access within the guest.
	VMCredentials *Credentials `json:"vmCredentials,omitempty"`

	// List of Virtual Disk(s) to be excluded from the backup job for the source.
	// Overrides the exclusion list requested (if any) through
	// EnvBackupParams.VMwareBackupEnvParams.
	VmwareDiskExclusionInfo []*VMwareDiskExclusionProto `json:"vmwareDiskExclusionInfo"`
}

// Validate validates this v mware backup source params
func (m *VMwareBackupSourceParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceAppParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareDiskExclusionInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareBackupSourceParams) validateSourceAppParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceAppParams) { // not required
		return nil
	}

	if m.SourceAppParams != nil {
		if err := m.SourceAppParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceAppParams")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareBackupSourceParams) validateVMCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.VMCredentials) { // not required
		return nil
	}

	if m.VMCredentials != nil {
		if err := m.VMCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareBackupSourceParams) validateVmwareDiskExclusionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareDiskExclusionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.VmwareDiskExclusionInfo); i++ {
		if swag.IsZero(m.VmwareDiskExclusionInfo[i]) { // not required
			continue
		}

		if m.VmwareDiskExclusionInfo[i] != nil {
			if err := m.VmwareDiskExclusionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmwareDiskExclusionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmwareDiskExclusionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v mware backup source params based on the context it is used
func (m *VMwareBackupSourceParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSourceAppParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareDiskExclusionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareBackupSourceParams) contextValidateSourceAppParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceAppParams != nil {

		if swag.IsZero(m.SourceAppParams) { // not required
			return nil
		}

		if err := m.SourceAppParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceAppParams")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareBackupSourceParams) contextValidateVMCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.VMCredentials != nil {

		if swag.IsZero(m.VMCredentials) { // not required
			return nil
		}

		if err := m.VMCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareBackupSourceParams) contextValidateVmwareDiskExclusionInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VmwareDiskExclusionInfo); i++ {

		if m.VmwareDiskExclusionInfo[i] != nil {

			if swag.IsZero(m.VmwareDiskExclusionInfo[i]) { // not required
				return nil
			}

			if err := m.VmwareDiskExclusionInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmwareDiskExclusionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmwareDiskExclusionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMwareBackupSourceParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMwareBackupSourceParams) UnmarshalBinary(b []byte) error {
	var res VMwareBackupSourceParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
