// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntityHierarchyProto This message can either represent a single-entity, a hierarchy of entities,
//
// or multiple hierarchies of entities rooted at a fake "super root" entity.
//
// swagger:model EntityHierarchyProto
type EntityHierarchyProto struct {

	// Aggregated information about all the entities rooted at this node that are
	// being protected by a CDP backup job.
	AggregatedCdpProtectedInfoVec *EntityHierarchyProtoAggregatedEntityInfo `json:"aggregatedCdpProtectedInfoVec,omitempty"`

	// Aggregated information about all the entities rooted at this node that are
	// being protected by some backup job. There is one entry for each
	// environment being backed up. The aggregated information for the entity
	// hierarchy's environment will be available at the 0th index of the vector.
	AggregatedProtectedInfoVec []*EntityHierarchyProtoAggregatedEntityInfo `json:"aggregatedProtectedInfoVec"`

	// Aggregated information about all the entities rooted at this node that are
	// not being protected by any backup job. There is one entry for each
	// environment being backed up. The aggregated information for the entity
	// hierarchy's environment will be available at the 0th index of the vector.
	//
	// NOTE: This includes entities that were protected at some point in the past
	// (and may even have snapshots to restore from), but are no longer being
	// actively protected.
	AggregatedUnprotectedInfoVec []*EntityHierarchyProtoAggregatedEntityInfo `json:"aggregatedUnprotectedInfoVec"`

	// The list of auxiliary children for this node in the hierarchy. The
	// auxiliary children can be used to extend the entity hierarchy to contain
	// application level entities. The application level entities may be in a
	// different environment. For example, the SQL server instances running on
	// a VM will be in this list.
	// These are only present when exporting the data to Iris.
	// See HierarchyNode message below for the WAL format.
	AuxChildren []interface{} `json:"auxChildren"`

	// Complete sub-trees rooted at this node:
	// These are only present when exporting the data to Iris.
	// See HierarchyNode message below for the WAL format.
	Children []interface{} `json:"children"`

	// The entity at the current node. This is set for all entities except the
	// super root entity.
	Entity *PrivateEntityProto `json:"entity,omitempty"`

	// Information about ongoing operations on the entity. Note that this is
	// populated only in Iris response. Magneto stores this information
	// seperately in 'EntityOperationManager'.
	EntityOperationInfo *EntityOperationInfoProto `json:"entityOperationInfo,omitempty"`

	// This stores the external metadata for any entity. Note that this is
	// populated only in Iris responses.
	ExternalMetadata *EntityExternalMetadataProto `json:"externalMetadata,omitempty"`

	// We maintain a "super root" entity to encapsulate a forest of trees (each
	// tree representing a different entity hierarchy). For instance, if there
	// are two independent vCenter hosts, they are two separate hierarchies, and
	// are both children of this super root entity.
	IsSuperRootEntity *bool `json:"isSuperRootEntity,omitempty"`

	// Time when this entity info was last updated. This should only include the
	// modifications due to SET APIs and not the update to object due to
	// background refresh.
	// Note: For the View entity, following used for CAS error check for parallel
	// update in view_box hierarchy by refresh and view backup/restore related
	// APIs.
	LastModificationTimeUsecs *int64 `json:"lastModificationTimeUsecs,omitempty"`

	// Only valid for leaf-level objects. The logical size of the leaf-level
	// object in bytes. If this is set to 0xDEADBAAD, then it will be shown as
	// "N/A" in the UI, for entities that we cannot get the real logical size.
	LogicalSizeInBytes *int64 `json:"logicalSizeInBytes,omitempty"`

	// Immediate parent. Currently used only for O365 site entities.
	Parent *EntityHierarchyProto `json:"parent,omitempty"`

	// Only valid for leaf-level objects. The physical size of the leaf-level
	// object in bytes. Currently only populated for Hyper-V VMs.
	PhysicalSizeInBytes *int64 `json:"physicalSizeInBytes,omitempty"`

	// Information about top-level entities. This is only valid for entities that
	// are explicitly registered by the end-user (and are children of the
	// super-root node).
	RegisteredEntityInfo *RegisteredEntityInfo `json:"registeredEntityInfo,omitempty"`

	// Only valid for leaf-level objects. Total bytes downtiered from the
	// leaf-level object so far.
	TotalDowntieredSizeInBytes *int64 `json:"totalDowntieredSizeInBytes,omitempty"`

	// Only valid for leaf-level objects. Total bytes uptiered to the
	// leaf-level object so far.
	TotalUptieredSizeInBytes *int64 `json:"totalUptieredSizeInBytes,omitempty"`
}

// Validate validates this entity hierarchy proto
func (m *EntityHierarchyProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregatedCdpProtectedInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregatedProtectedInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregatedUnprotectedInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityOperationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredEntityInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityHierarchyProto) validateAggregatedCdpProtectedInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregatedCdpProtectedInfoVec) { // not required
		return nil
	}

	if m.AggregatedCdpProtectedInfoVec != nil {
		if err := m.AggregatedCdpProtectedInfoVec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregatedCdpProtectedInfoVec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregatedCdpProtectedInfoVec")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyProto) validateAggregatedProtectedInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregatedProtectedInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AggregatedProtectedInfoVec); i++ {
		if swag.IsZero(m.AggregatedProtectedInfoVec[i]) { // not required
			continue
		}

		if m.AggregatedProtectedInfoVec[i] != nil {
			if err := m.AggregatedProtectedInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregatedProtectedInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aggregatedProtectedInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityHierarchyProto) validateAggregatedUnprotectedInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregatedUnprotectedInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AggregatedUnprotectedInfoVec); i++ {
		if swag.IsZero(m.AggregatedUnprotectedInfoVec[i]) { // not required
			continue
		}

		if m.AggregatedUnprotectedInfoVec[i] != nil {
			if err := m.AggregatedUnprotectedInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregatedUnprotectedInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aggregatedUnprotectedInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityHierarchyProto) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyProto) validateEntityOperationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityOperationInfo) { // not required
		return nil
	}

	if m.EntityOperationInfo != nil {
		if err := m.EntityOperationInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityOperationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityOperationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyProto) validateExternalMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalMetadata) { // not required
		return nil
	}

	if m.ExternalMetadata != nil {
		if err := m.ExternalMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyProto) validateParent(formats strfmt.Registry) error {
	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyProto) validateRegisteredEntityInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredEntityInfo) { // not required
		return nil
	}

	if m.RegisteredEntityInfo != nil {
		if err := m.RegisteredEntityInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredEntityInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this entity hierarchy proto based on the context it is used
func (m *EntityHierarchyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregatedCdpProtectedInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAggregatedProtectedInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAggregatedUnprotectedInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityOperationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredEntityInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityHierarchyProto) contextValidateAggregatedCdpProtectedInfoVec(ctx context.Context, formats strfmt.Registry) error {

	if m.AggregatedCdpProtectedInfoVec != nil {

		if swag.IsZero(m.AggregatedCdpProtectedInfoVec) { // not required
			return nil
		}

		if err := m.AggregatedCdpProtectedInfoVec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregatedCdpProtectedInfoVec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregatedCdpProtectedInfoVec")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyProto) contextValidateAggregatedProtectedInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AggregatedProtectedInfoVec); i++ {

		if m.AggregatedProtectedInfoVec[i] != nil {

			if swag.IsZero(m.AggregatedProtectedInfoVec[i]) { // not required
				return nil
			}

			if err := m.AggregatedProtectedInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregatedProtectedInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aggregatedProtectedInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityHierarchyProto) contextValidateAggregatedUnprotectedInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AggregatedUnprotectedInfoVec); i++ {

		if m.AggregatedUnprotectedInfoVec[i] != nil {

			if swag.IsZero(m.AggregatedUnprotectedInfoVec[i]) { // not required
				return nil
			}

			if err := m.AggregatedUnprotectedInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregatedUnprotectedInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aggregatedUnprotectedInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityHierarchyProto) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyProto) contextValidateEntityOperationInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityOperationInfo != nil {

		if swag.IsZero(m.EntityOperationInfo) { // not required
			return nil
		}

		if err := m.EntityOperationInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityOperationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityOperationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyProto) contextValidateExternalMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalMetadata != nil {

		if swag.IsZero(m.ExternalMetadata) { // not required
			return nil
		}

		if err := m.ExternalMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyProto) contextValidateParent(ctx context.Context, formats strfmt.Registry) error {

	if m.Parent != nil {

		if swag.IsZero(m.Parent) { // not required
			return nil
		}

		if err := m.Parent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyProto) contextValidateRegisteredEntityInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RegisteredEntityInfo != nil {

		if swag.IsZero(m.RegisteredEntityInfo) { // not required
			return nil
		}

		if err := m.RegisteredEntityInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredEntityInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityHierarchyProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityHierarchyProto) UnmarshalBinary(b []byte) error {
	var res EntityHierarchyProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
