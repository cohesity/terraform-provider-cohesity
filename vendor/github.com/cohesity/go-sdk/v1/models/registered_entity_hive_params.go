// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisteredEntityHiveParams Contains all params specified by the user while registering a hive
// entity.
//
// swagger:model RegisteredEntityHiveParams
type RegisteredEntityHiveParams struct {

	// hive connect params
	HiveConnectParams *PrivateHiveConnectParams `json:"hiveConnectParams,omitempty"`

	// hive discovery params
	HiveDiscoveryParams *HiveDiscoveryParams `json:"hiveDiscoveryParams,omitempty"`

	// Whether the request is discovery request or the final registration.
	IsDiscoveryRequest *bool `json:"isDiscoveryRequest,omitempty"`
}

// Validate validates this registered entity hive params
func (m *RegisteredEntityHiveParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHiveConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveDiscoveryParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityHiveParams) validateHiveConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveConnectParams) { // not required
		return nil
	}

	if m.HiveConnectParams != nil {
		if err := m.HiveConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityHiveParams) validateHiveDiscoveryParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveDiscoveryParams) { // not required
		return nil
	}

	if m.HiveDiscoveryParams != nil {
		if err := m.HiveDiscoveryParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveDiscoveryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveDiscoveryParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this registered entity hive params based on the context it is used
func (m *RegisteredEntityHiveParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHiveConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveDiscoveryParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityHiveParams) contextValidateHiveConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveConnectParams != nil {

		if swag.IsZero(m.HiveConnectParams) { // not required
			return nil
		}

		if err := m.HiveConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityHiveParams) contextValidateHiveDiscoveryParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveDiscoveryParams != nil {

		if swag.IsZero(m.HiveDiscoveryParams) { // not required
			return nil
		}

		if err := m.HiveDiscoveryParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveDiscoveryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveDiscoveryParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredEntityHiveParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredEntityHiveParams) UnmarshalBinary(b []byte) error {
	var res RegisteredEntityHiveParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
