// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CdpLogRunParams CDP log run parameters. These will be used to move logs from Atom's view to
// Magneto's backup view in a log run
//
// swagger:model CdpLogRunParams
type CdpLogRunParams struct {

	// Logs for the various disks of the VM.
	DiskLogsVec []*CdpLogRunParamsDiskLog `json:"diskLogsVec"`

	// List of epoch(s) to be consumed by the log run.
	EpochDataVec []*CdpLogRunParamsEpochData `json:"epochDataVec"`

	// The time in usecs to sync the disk sequence numbers for this log run.
	// All IOs that will be consumed in this log run will have end time less than
	// this specified time.
	LogRunTimeUsecs *int64 `json:"logRunTimeUsecs,omitempty"`
}

// Validate validates this cdp log run params
func (m *CdpLogRunParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskLogsVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEpochDataVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpLogRunParams) validateDiskLogsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskLogsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskLogsVec); i++ {
		if swag.IsZero(m.DiskLogsVec[i]) { // not required
			continue
		}

		if m.DiskLogsVec[i] != nil {
			if err := m.DiskLogsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskLogsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskLogsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdpLogRunParams) validateEpochDataVec(formats strfmt.Registry) error {
	if swag.IsZero(m.EpochDataVec) { // not required
		return nil
	}

	for i := 0; i < len(m.EpochDataVec); i++ {
		if swag.IsZero(m.EpochDataVec[i]) { // not required
			continue
		}

		if m.EpochDataVec[i] != nil {
			if err := m.EpochDataVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("epochDataVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("epochDataVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cdp log run params based on the context it is used
func (m *CdpLogRunParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskLogsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEpochDataVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpLogRunParams) contextValidateDiskLogsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiskLogsVec); i++ {

		if m.DiskLogsVec[i] != nil {

			if swag.IsZero(m.DiskLogsVec[i]) { // not required
				return nil
			}

			if err := m.DiskLogsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskLogsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskLogsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdpLogRunParams) contextValidateEpochDataVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EpochDataVec); i++ {

		if m.EpochDataVec[i] != nil {

			if swag.IsZero(m.EpochDataVec[i]) { // not required
				return nil
			}

			if err := m.EpochDataVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("epochDataVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("epochDataVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdpLogRunParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdpLogRunParams) UnmarshalBinary(b []byte) error {
	var res CdpLogRunParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
