// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PhysicalFileBackupParamsBackupPathInfo Backup Path Information.
//
// Describes a set of files rooted under a path that need to be backed up.
//
// swagger:model PhysicalFileBackupParams_BackupPathInfo
type PhysicalFileBackupParamsBackupPathInfo struct {

	// A list of absolute paths on the Physical source that should not be
	// backed up. Any path that is a descendant of these paths will also be
	// skipped.
	ExcludePaths []string `json:"excludePaths"`

	// An absolute path on the Physical source that should be backed up. Any
	// path that is a descendant of this path will also be backed up, unless
	// (a) it is excluded from backup by exclude_paths below, OR
	// (b) it belongs to a volume that is different from the volume
	// include_path belongs to and there are no relevant paths in that
	// volume being backed up.
	IncludePath *string `json:"includePath,omitempty"`

	// Whether to skip any nested volumes (both local and network) that are
	// mounted under 'include_path'. Note that if a path to a nested volume
	// is specified as an include_path in another BackupPathInfo entry, that
	// path will still get backed up.
	SkipNestedVolumes *bool `json:"skipNestedVolumes,omitempty"`
}

// Validate validates this physical file backup params backup path info
func (m *PhysicalFileBackupParamsBackupPathInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this physical file backup params backup path info based on context it is used
func (m *PhysicalFileBackupParamsBackupPathInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalFileBackupParamsBackupPathInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalFileBackupParamsBackupPathInfo) UnmarshalBinary(b []byte) error {
	var res PhysicalFileBackupParamsBackupPathInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
