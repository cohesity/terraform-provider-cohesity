// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PvcInfo Information about a PVC.
//
// swagger:model PvcInfo
type PvcInfo struct {

	// Access modes of the PVC.
	AccessModes []string `json:"accessModes"`

	// A set of key-value pairs, capturing the annotations of a k8s object.
	Annotations map[string]string `json:"annotations,omitempty"`

	// A set of key-value pairs, capturing the labels of a k8s object.
	Labels map[string]string `json:"labels,omitempty"`

	// Name of the pvc.
	Name *string `json:"name,omitempty"`

	// Status of pod.
	// Eg: "Bound", "Pending".
	Phase *string `json:"phase,omitempty"`

	// Size of request as in the PVC spec.
	Request *int64 `json:"request,omitempty"`

	// If the PVC has not been provisioned as it waiting for first consumer.
	// This property is controlled by the volumeBindingMode of the storage class.
	ScWaitForFirstConsumer *bool `json:"scWaitForFirstConsumer,omitempty"`

	// If the PVC has not been provisioned as it waiting for pod to be scheduled.
	ScWaitForPodScheduled *bool `json:"scWaitForPodScheduled,omitempty"`

	// Size of the PVC.
	SizeInBytes *int64 `json:"sizeInBytes,omitempty"`

	// Storage class of the PVC.
	StorageClass *string `json:"storageClass,omitempty"`

	// UUID of the PVC
	UUID *string `json:"uuid,omitempty"`

	// Volume mode of the PVC. Value could be Block, Filesystem, or
	// empty (implying Filesystem).
	VolumeMode *string `json:"volumeMode,omitempty"`

	// Name of the volume that is used by this PVC.
	VolumeName *string `json:"volumeName,omitempty"`
}

// Validate validates this pvc info
func (m *PvcInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pvc info based on context it is used
func (m *PvcInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PvcInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PvcInfo) UnmarshalBinary(b []byte) error {
	var res PvcInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
