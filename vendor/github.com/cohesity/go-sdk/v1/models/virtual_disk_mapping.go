// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualDiskMapping Virtual Disk Mapping.
//
// Specifies the request data struct for virtual disk mapping with only the
// disk ids.
//
// swagger:model VirtualDiskMapping
type VirtualDiskMapping struct {

	// Specifies information about disk which user wants to overwrite. If
	// specified, then powerOffVmBeforeRecovery must be true.
	DiskToOverwrite *VirtualDiskIDInformation `json:"diskToOverwrite,omitempty"`

	// Specifies information about the source disk.
	SourceDisk *VirtualDiskIDInformation `json:"sourceDisk,omitempty"`

	// Specifies the target location information, for e.g. a datastore in
	// VMware environment. If diskToOverwrite is specified, then the target
	// location is automatically deduced.
	TargetLocationID *int64 `json:"targetLocationId,omitempty"`
}

// Validate validates this virtual disk mapping
func (m *VirtualDiskMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskToOverwrite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceDisk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualDiskMapping) validateDiskToOverwrite(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskToOverwrite) { // not required
		return nil
	}

	if m.DiskToOverwrite != nil {
		if err := m.DiskToOverwrite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskToOverwrite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskToOverwrite")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualDiskMapping) validateSourceDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceDisk) { // not required
		return nil
	}

	if m.SourceDisk != nil {
		if err := m.SourceDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceDisk")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual disk mapping based on the context it is used
func (m *VirtualDiskMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskToOverwrite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualDiskMapping) contextValidateDiskToOverwrite(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskToOverwrite != nil {

		if swag.IsZero(m.DiskToOverwrite) { // not required
			return nil
		}

		if err := m.DiskToOverwrite.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskToOverwrite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskToOverwrite")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualDiskMapping) contextValidateSourceDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceDisk != nil {

		if swag.IsZero(m.SourceDisk) { // not required
			return nil
		}

		if err := m.SourceDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceDisk")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualDiskMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualDiskMapping) UnmarshalBinary(b []byte) error {
	var res VirtualDiskMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
