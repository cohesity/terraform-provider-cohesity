// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VserverNetworkInterface Vserver Network Interface.
//
// Specifies information about a logical network interface on a
// NetApp Vserver. The interface's IP address is the mount point for a
// specific data protocol, such as NFS or CIFS.
//
// swagger:model VserverNetworkInterface
type VserverNetworkInterface struct {

	// Array of Data Protocols.
	//
	// Specifies the set of data protocols supported by this interface.
	// 'kNfs' indicates NFS connections.
	// 'kCifs' indicates SMB (CIFS) connections.
	// 'kIscsi' indicates iSCSI connections.
	// 'kFc' indicates Fiber Channel connections.
	// 'kFcache' indicates Flex Cache connections.
	// 'kHttp' indicates HTTP connections.
	// 'kNdmp' indicates NDMP connections.
	// 'kManagement' indicates non-data connections used for management purposes.
	// 'kNvme' indicates NVMe connections.
	DataProtocols []string `json:"dataProtocols"`

	// Specifies the IP address of this interface.
	IPAddress *string `json:"ipAddress,omitempty"`

	// Specifies the name of this interface.
	Name *string `json:"name,omitempty"`
}

// Validate validates this vserver network interface
func (m *VserverNetworkInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataProtocols(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vserverNetworkInterfaceDataProtocolsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kCifs","kIscsi","kFc","kFcache","kHttp","kNdmp","kManagement","kNvme"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vserverNetworkInterfaceDataProtocolsItemsEnum = append(vserverNetworkInterfaceDataProtocolsItemsEnum, v)
	}
}

func (m *VserverNetworkInterface) validateDataProtocolsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vserverNetworkInterfaceDataProtocolsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VserverNetworkInterface) validateDataProtocols(formats strfmt.Registry) error {
	if swag.IsZero(m.DataProtocols) { // not required
		return nil
	}

	for i := 0; i < len(m.DataProtocols); i++ {

		// value enum
		if err := m.validateDataProtocolsItemsEnum("dataProtocols"+"."+strconv.Itoa(i), "body", m.DataProtocols[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this vserver network interface based on context it is used
func (m *VserverNetworkInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VserverNetworkInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VserverNetworkInterface) UnmarshalBinary(b []byte) error {
	var res VserverNetworkInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
