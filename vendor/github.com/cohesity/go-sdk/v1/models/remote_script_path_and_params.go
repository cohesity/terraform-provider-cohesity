// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemoteScriptPathAndParams Remote Script.
//
// Specifies the path to the remote script and any parameters
// expected by the remote script.
//
// swagger:model RemoteScriptPathAndParams
type RemoteScriptPathAndParams struct {

	// Specifies if the script needs to continue even if there is an occurence of
	// an error. If this flag is set to true, then backup job will start even if
	// the pre backup script fails. Applicable only for pre backup scripts.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies if the script is active. If set to false, this script will not
	// be executed even if it is part of the backup job.
	IsActive *bool `json:"isActive,omitempty"`

	// Specifies the parameters and values to pass into the remote script.
	// For example if the script expects values for the 'database' and
	// 'user' parameters, specify the parameters and values using
	// the following string: "database=myDatabase user=me".
	ScriptParams *string `json:"scriptParams,omitempty"`

	// Specifies the path to the script on the remote host.
	ScriptPath *string `json:"scriptPath,omitempty"`

	// Specifies the timeout of the script in seconds. The script will be killed
	// if it exceeds this value. If the value of the field is '-1' then timeout
	// is not set for the script.
	TimeoutSecs *int32 `json:"timeoutSecs,omitempty"`
}

// Validate validates this remote script path and params
func (m *RemoteScriptPathAndParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this remote script path and params based on context it is used
func (m *RemoteScriptPathAndParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RemoteScriptPathAndParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteScriptPathAndParams) UnmarshalBinary(b []byte) error {
	var res RemoteScriptPathAndParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
