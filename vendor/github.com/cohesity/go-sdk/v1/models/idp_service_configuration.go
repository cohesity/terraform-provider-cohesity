// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IdpServiceConfiguration IdP Service Configuration.
//
// Specifies the configuration of an IdP service.
//
// swagger:model IdpServiceConfiguration
type IdpServiceConfiguration struct {

	// Specifies whether to allow local authentication. When IdP is configured,
	// only IdP users are allowed to login to the Cluster. Local login is
	// disabled except for users with admin role. If this flag is set to true,
	// local (non-IdP) logins are allowed for all local and AD users. Local or
	// AD users with admin role can login always independent of this flag's
	// setting.
	AllowLocalAuthentication *bool `json:"allowLocalAuthentication,omitempty"`

	// Specifies the certificate generated for the app by the IdP service when
	// the Cluster is registered as an app. This is required to verify the
	// SAML response.
	Certificate *string `json:"certificate,omitempty"`

	// Specifies the filename used to upload the certificate.
	CertificateFilename *string `json:"certificateFilename,omitempty"`

	// Specifies a unique name for this IdP configuration.
	Domain *string `json:"domain,omitempty"`

	// Specifies a flag to enable or disable this IdP service. When it is set
	// to true, IdP service is enabled. When it is set to false, IdP service
	// is disabled. When an IdP service is created, it is set to true.
	Enable *bool `json:"enable,omitempty"`

	// Specifies the Id assigned by the Cluster for the IdP service.
	ID *int64 `json:"id,omitempty"`

	// Specifies the IdP provided Issuer ID for the app.
	// For example, exkh1aov1nhHrgFhN0h7.
	IssuerID *string `json:"issuerId,omitempty"`

	// Specifies the name of the vendor providing IdP service.
	Name *string `json:"name,omitempty"`

	// Specifies a list of roles assigned to an IdP user if samlAttributeName is
	// not given.
	Roles []string `json:"roles"`

	// Specifies the SAML attribute name that contains a comma separated list
	// of Cluster roles. Either this field or roles must be set. This field
	// takes higher precedence than the roles field.
	SamlAttributeName *string `json:"samlAttributeName,omitempty"`

	// Specifies whether to sign the SAML request or not. When it is set
	// to true, SAML request will be signed. When it is set to false, SAML
	// request is not signed. Default is false. Set this flag to true if
	// the IdP site is configured to expect the SAML request from the Cluster
	// signed. If this is set to true, users must get the Cluster's certificate
	// and upload it on the IdP site.
	SignRequest *bool `json:"signRequest,omitempty"`

	// Specifies the SSO URL of the IdP service for the customer. This is the
	// URL given by IdP when the customer created an account. Customers may use
	// this for several clusters that are registered with on IdP site.
	// For example, dev-332534.oktapreview.com
	SsoURL *string `json:"ssoUrl,omitempty"`

	// Specifies the Tenant Id if the IdP is configured for a Tenant. If this is
	// not set, this IdP configuration is used for the Cluster level users and
	// for all users of Tenants not having an IdP configuration.
	TenantID *string `json:"tenantId,omitempty"`
}

// Validate validates this idp service configuration
func (m *IdpServiceConfiguration) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this idp service configuration based on context it is used
func (m *IdpServiceConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IdpServiceConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdpServiceConfiguration) UnmarshalBinary(b []byte) error {
	var res IdpServiceConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
