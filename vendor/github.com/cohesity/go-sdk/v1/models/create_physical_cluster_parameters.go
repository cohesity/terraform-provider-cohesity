// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatePhysicalClusterParameters Create Physical Cluster Parameters.
//
// Specifies the parameters needed for creation of a new Cluster.
//
// swagger:model CreatePhysicalClusterParameters
type CreatePhysicalClusterParameters struct {

	// Specifies if API based GET should be enabled for cluster destroy
	// params.
	AllowAPIBasedFetch *bool `json:"allowApiBasedFetch,omitempty"`

	// Specifies HMAC secret key that will be used to validate OTP used
	// for destroy request. This is b32 format of the HMAC key.
	// This should only be set/modified during cluster creation.
	ClusterDestroyHmacKey *string `json:"clusterDestroyHmacKey,omitempty"`

	// Specifies the name of the new Cluster.
	// Required: true
	ClusterName *string `json:"clusterName"`

	// Specifies if cluster destroy op is enabled on this cluster.
	// This should only be set/modified during cluster creation.
	EnableClusterDestroy *bool `json:"enableClusterDestroy,omitempty"`

	// Specifies the encryption configuration parameters.
	EncryptionConfig *EncryptionConfiguration `json:"encryptionConfig,omitempty"`

	// Specifies IP preference.
	IPPreference *int32 `json:"ipPreference,omitempty"`

	// Specifies the IPMI configuration parameters.
	// Required: true
	IpmiConfig *IpmiConfiguration `json:"ipmiConfig"`

	// Specifies the metadata fault tolerance.
	MetadataFaultTolerance *int32 `json:"metadataFaultTolerance,omitempty"`

	// Specifies the network configuration parameters.
	// Required: true
	NetworkConfig *NetworkConfiguration `json:"networkConfig"`

	// Specifies the configuration for the nodes in the new cluster.
	// Required: true
	NodeConfigs []*PhysicalNodeConfiguration `json:"nodeConfigs"`

	// Specifies Trust Domain used for Service Identity.
	TrustDomain *string `json:"trustDomain,omitempty"`
}

// Validate validates this create physical cluster parameters
func (m *CreatePhysicalClusterParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIpmiConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePhysicalClusterParameters) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("clusterName", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *CreatePhysicalClusterParameters) validateEncryptionConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionConfig) { // not required
		return nil
	}

	if m.EncryptionConfig != nil {
		if err := m.EncryptionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePhysicalClusterParameters) validateIpmiConfig(formats strfmt.Registry) error {

	if err := validate.Required("ipmiConfig", "body", m.IpmiConfig); err != nil {
		return err
	}

	if m.IpmiConfig != nil {
		if err := m.IpmiConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipmiConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipmiConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePhysicalClusterParameters) validateNetworkConfig(formats strfmt.Registry) error {

	if err := validate.Required("networkConfig", "body", m.NetworkConfig); err != nil {
		return err
	}

	if m.NetworkConfig != nil {
		if err := m.NetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePhysicalClusterParameters) validateNodeConfigs(formats strfmt.Registry) error {

	if err := validate.Required("nodeConfigs", "body", m.NodeConfigs); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeConfigs); i++ {
		if swag.IsZero(m.NodeConfigs[i]) { // not required
			continue
		}

		if m.NodeConfigs[i] != nil {
			if err := m.NodeConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create physical cluster parameters based on the context it is used
func (m *CreatePhysicalClusterParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEncryptionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIpmiConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreatePhysicalClusterParameters) contextValidateEncryptionConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionConfig != nil {

		if swag.IsZero(m.EncryptionConfig) { // not required
			return nil
		}

		if err := m.EncryptionConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePhysicalClusterParameters) contextValidateIpmiConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.IpmiConfig != nil {

		if err := m.IpmiConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipmiConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipmiConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePhysicalClusterParameters) contextValidateNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkConfig != nil {

		if err := m.NetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreatePhysicalClusterParameters) contextValidateNodeConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeConfigs); i++ {

		if m.NodeConfigs[i] != nil {

			if swag.IsZero(m.NodeConfigs[i]) { // not required
				return nil
			}

			if err := m.NodeConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreatePhysicalClusterParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreatePhysicalClusterParameters) UnmarshalBinary(b []byte) error {
	var res CreatePhysicalClusterParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
