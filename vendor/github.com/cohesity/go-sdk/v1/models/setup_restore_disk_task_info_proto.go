// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SetupRestoreDiskTaskInfoProto Message that encapsulates information about the task that sets up and
// tears down restore disks in environments such as VMware, Physical, and
// HyperV. Environment specific information is defined as extensions to this
// proto.
//
// Each available extension is listed below along with the location of the
// proto file (relative to magneto/connectors) where it is defined.
//
// # SetupRestoreDiskTaskInfoProto
//
// extension, extension_number
// Location
//
// =============================================================================
// vmware::SetupRestoreDiskTaskInfo
//
// vmware_setup_restore_disk_task_info, 100
// connectors/vmware/vmware_setup_restore_disks.proto.proto
//
// # AgentSetupRestoreDiskTaskInfo
//
// agent_setup_restore_disk_task_info, 101
// base/agent.proto
//
// app_file::SetupRestoreTaskInfo
//
// app_file_setup_restore_task_info, 102
// connectors/app_file/app_file_setup_restore.proto
//
// hyperv::SetupRestoreDiskTaskInfo
//
// hyperv_setup_restore_disk_task_info, 103
// connectors/hyperv/hyperv_setup_restore_disks.proto
//
// =============================================================================
//
// swagger:model SetupRestoreDiskTaskInfoProto
type SetupRestoreDiskTaskInfoProto struct {

	// The entity on which disks will be setup.
	Entity *EntityProto `json:"entity,omitempty"`

	// The path to the progress monitor root task if any.
	ProgressMonitorRootTaskPath *string `json:"progressMonitorRootTaskPath,omitempty"`

	// The root entity that the entity was running under.
	RootEntity *EntityProto `json:"rootEntity,omitempty"`

	// The source view which contains the backups for the 'entity'.
	SourceViewName *string `json:"sourceViewName,omitempty"`

	// The id of the associated task.
	TaskID *int64 `json:"taskId,omitempty"`

	// The view box id containing the backups for the 'entity'.
	ViewBoxID *int64 `json:"viewBoxId,omitempty"`

	// Destination view into which the files will be cloned.
	ViewName *string `json:"viewName,omitempty"`
}

// Validate validates this setup restore disk task info proto
func (m *SetupRestoreDiskTaskInfoProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetupRestoreDiskTaskInfoProto) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *SetupRestoreDiskTaskInfoProto) validateRootEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.RootEntity) { // not required
		return nil
	}

	if m.RootEntity != nil {
		if err := m.RootEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this setup restore disk task info proto based on the context it is used
func (m *SetupRestoreDiskTaskInfoProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetupRestoreDiskTaskInfoProto) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *SetupRestoreDiskTaskInfoProto) contextValidateRootEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.RootEntity != nil {

		if swag.IsZero(m.RootEntity) { // not required
			return nil
		}

		if err := m.RootEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetupRestoreDiskTaskInfoProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetupRestoreDiskTaskInfoProto) UnmarshalBinary(b []byte) error {
	var res SetupRestoreDiskTaskInfoProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
