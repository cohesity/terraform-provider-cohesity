// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VolumeInfo Information about each logical volume (filesystem).
//
// swagger:model VolumeInfo
type VolumeInfo struct {

	// Information about all the disks and partitions needed to mount this
	// logical volume.
	DiskVec []*VolumeInfoDiskInfo `json:"diskVec"`

	// Display name.
	DisplayName *string `json:"displayName,omitempty"`

	// Filesystem on this volume.
	FilesystemType *string `json:"filesystemType,omitempty"`

	// Filesystem label.
	FsLabel *string `json:"fsLabel,omitempty"`

	// Filesystem uuid.
	FsUUID *string `json:"fsUuid,omitempty"`

	// Is this volume bootable?
	IsBootable *bool `json:"isBootable,omitempty"`

	// Is this a dedup volume?
	// Currently, set to true only for ntfs dedup volume.
	IsDedup *bool `json:"isDedup,omitempty"`

	// Is this a supported Volume (filesystem)?
	IsSupported *bool `json:"isSupported,omitempty"`

	// This field is set only for lvm and ldm volume only.
	LvInfo *VolumeInfoLogicalVolumeInfo `json:"lvInfo,omitempty"`

	// This is set to capture info about any active subvolume for this volume.
	SubvolInfo *VolumeInfoSubVolumeInfo `json:"subvolInfo,omitempty"`

	// The guid of the volume represented by this virtual disk.
	// This information will be originally populated by magneto for physical
	// environments.
	VolumeGUID *string `json:"volumeGuid,omitempty"`

	// We assign a unique number to every volume within a VM which we see for the
	// first time. The identifier will be monotonically increasing number startin
	// from 1.
	VolumeIdentifier *int32 `json:"volumeIdentifier,omitempty"`

	// The source type of the volume. This field is typically stamped before
	// processing volume and used to customize process behavior like rpc timeout,
	// max retries, mount options, etc.
	VolumeSourceType *int32 `json:"volumeSourceType,omitempty"`

	// Whether this volume is simple, lvm or ldm.
	VolumeType *int32 `json:"volumeType,omitempty"`
}

// Validate validates this volume info
func (m *VolumeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLvInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubvolInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeInfo) validateDiskVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskVec); i++ {
		if swag.IsZero(m.DiskVec[i]) { // not required
			continue
		}

		if m.DiskVec[i] != nil {
			if err := m.DiskVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VolumeInfo) validateLvInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.LvInfo) { // not required
		return nil
	}

	if m.LvInfo != nil {
		if err := m.LvInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lvInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lvInfo")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeInfo) validateSubvolInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SubvolInfo) { // not required
		return nil
	}

	if m.SubvolInfo != nil {
		if err := m.SubvolInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subvolInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subvolInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume info based on the context it is used
func (m *VolumeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLvInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubvolInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeInfo) contextValidateDiskVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiskVec); i++ {

		if m.DiskVec[i] != nil {

			if swag.IsZero(m.DiskVec[i]) { // not required
				return nil
			}

			if err := m.DiskVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VolumeInfo) contextValidateLvInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.LvInfo != nil {

		if swag.IsZero(m.LvInfo) { // not required
			return nil
		}

		if err := m.LvInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lvInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lvInfo")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeInfo) contextValidateSubvolInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SubvolInfo != nil {

		if swag.IsZero(m.SubvolInfo) { // not required
			return nil
		}

		if err := m.SubvolInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subvolInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subvolInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeInfo) UnmarshalBinary(b []byte) error {
	var res VolumeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
