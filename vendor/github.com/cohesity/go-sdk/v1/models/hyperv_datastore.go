// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HypervDatastore HyperV Datastore Object.
//
// Specifies information about a Datastore Object in HyperV environment.
//
// swagger:model HypervDatastore
type HypervDatastore struct {

	// Specifies the capacity of the datastore in bytes.
	Capacity *uint64 `json:"capacity,omitempty"`

	// Specifies the available space on the datastore in bytes.
	FreeSpace *uint64 `json:"freeSpace,omitempty"`

	// Specifies the available mount points on the datastore.
	MountPoints []string `json:"mountPoints"`

	// Specifies the type of the datastore object like kFileShare or kVolume.
	// overrideDescription: true
	// Specifies the type of a HyperV datastore object.
	// 'kFileShare' indicates SMB file share datastore.
	// 'kVolume' indicates a volume which can a LUN.
	// Enum: ["kFileShare","kVolume"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this hyperv datastore
func (m *HypervDatastore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hypervDatastoreTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kFileShare","kVolume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hypervDatastoreTypeTypePropEnum = append(hypervDatastoreTypeTypePropEnum, v)
	}
}

const (

	// HypervDatastoreTypeKFileShare captures enum value "kFileShare"
	HypervDatastoreTypeKFileShare string = "kFileShare"

	// HypervDatastoreTypeKVolume captures enum value "kVolume"
	HypervDatastoreTypeKVolume string = "kVolume"
)

// prop value enum
func (m *HypervDatastore) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hypervDatastoreTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HypervDatastore) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hyperv datastore based on context it is used
func (m *HypervDatastore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HypervDatastore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HypervDatastore) UnmarshalBinary(b []byte) error {
	var res HypervDatastore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
