// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CrackedFileDocumentMailboxItemMetadata Message used to store metadata of a Mailbox Item.
//
// swagger:model CrackedFileDocument_MailboxItemMetadata
type CrackedFileDocumentMailboxItemMetadata struct {

	// List of BccRecipient's email address.
	BccRecipientsEmail []string `json:"bccRecipientsEmail"`

	// Birthday of the contact stored in seconds from epoch.
	BirthdaySecs *int64 `json:"birthdaySecs,omitempty"`

	// List of CcRecipient's email address.
	CcRecipientsEmail []string `json:"ccRecipientsEmail"`

	// Task completion date stored in seconds from epoch.
	CompletionDateSecs *int64 `json:"completionDateSecs,omitempty"`

	// Email addresses assigned to the contact.
	ContactEmailAddressesVec []string `json:"contactEmailAddressesVec"`

	// Seconds from epoch at which the item is created.
	CreationTimeSecs *int64 `json:"creationTimeSecs,omitempty"`

	// Task due date stored in seconds from epoch.
	DueDateSecs *int64 `json:"dueDateSecs,omitempty"`

	// Email addresses assigned to the Contact. This field is deprecated now.
	// TODO(richa): Reserve this field after iris changes are done to no
	// longer use this field.
	EmailAddressesVec []string `json:"emailAddressesVec"`

	// Seconds from epoch of the end date/time for the single occurence events.
	EndTimeSecs *int64 `json:"endTimeSecs,omitempty"`

	// Contact item type specific fields
	// First name of the Contact.
	FirstName *string `json:"firstName,omitempty"`

	// Date/time for the first occurence of the recurring events.
	FirstOccurrence *ItemMetaDataOccurrence `json:"firstOccurrence,omitempty"`

	// Unique key (within the mailbox) generated for folder by magneto.
	FolderKey *int64 `json:"folderKey,omitempty"`

	// Name of the folder in which mailbox item exists in case of an email, and
	// display name of folder, in case of an email folder.
	FolderName *string `json:"folderName,omitempty"`

	// Specifies which folder root the email belongs to.
	FolderRootType *int32 `json:"folderRootType,omitempty"`

	// Email address from whom the mail is received.
	FromEmail *string `json:"fromEmail,omitempty"`

	// The fully qualified path (valid inside the current object) of the parent
	// of this item (item itself can be folder or mails).
	FullItemParentPath *string `json:"fullItemParentPath,omitempty"`

	// Does the item have attachments?
	HasAttachments *bool `json:"hasAttachments,omitempty"`

	// Item importance.
	Importance *int32 `json:"importance,omitempty"`

	// Is this recurring calendar event or task.
	IsRecurring *bool `json:"isRecurring,omitempty"`

	// Unique key (within the mailbox) for the mailbox item provided by
	// magneto. This is neither indexed nor stored and is populated only while
	// returning mailbox item in search result.
	ItemKey *string `json:"itemKey,omitempty"`

	// The item was last modified by.
	LastModifiedName *string `json:"lastModifiedName,omitempty"`

	// Seconds from epoch at which the item was last modified.
	LastModifiedTimeSecs *int64 `json:"lastModifiedTimeSecs,omitempty"`

	// Last name of the Contact.
	LastName *string `json:"lastName,omitempty"`

	// Date/time for the last occurence of the recurring events.
	LastOccurrence *ItemMetaDataOccurrence `json:"lastOccurrence,omitempty"`

	// Middle name of the Contact.
	MiddleName *string `json:"middleName,omitempty"`

	// Vector of optional attendees for this event.
	OptionalAttendeesEmailVec []string `json:"optionalAttendeesEmailVec"`

	// Calendar item type specific fields
	// Appointment/meeting Organizer.
	OrganizerEmail *string `json:"organizerEmail,omitempty"`

	// Seconds from epoch at which the mail is received.
	ReceivedTime *int64 `json:"receivedTime,omitempty"`

	// Recurrence pattern information for the recurring calendar events and
	// tasks.
	RecurrencePattern *int32 `json:"recurrencePattern,omitempty"`

	// Vector of required attendees for this event.
	RequiredAttendeesEmailVec []string `json:"requiredAttendeesEmailVec"`

	// Item sensitivity.
	Sensitivity *int32 `json:"sensitivity,omitempty"`

	// Seconds from epoch at which the mail is sent.
	SentTime *int64 `json:"sentTime,omitempty"`

	// Seconds from epoch of the start date/time for the single occurence
	// events.
	StartTimeSecs *int64 `json:"startTimeSecs,omitempty"`

	// Subject of the item.
	Subject *string `json:"subject,omitempty"`

	// Task items specific fields.
	// Task owner.
	TaskOwner *string `json:"taskOwner,omitempty"`

	// Status of the task.
	TaskStatus *int32 `json:"taskStatus,omitempty"`

	// List of ToRecipient's email address.
	ToRecipientsEmail []string `json:"toRecipientsEmail"`
}

// Validate validates this cracked file document mailbox item metadata
func (m *CrackedFileDocumentMailboxItemMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrackedFileDocumentMailboxItemMetadata) validateFirstOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstOccurrence) { // not required
		return nil
	}

	if m.FirstOccurrence != nil {
		if err := m.FirstOccurrence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firstOccurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firstOccurrence")
			}
			return err
		}
	}

	return nil
}

func (m *CrackedFileDocumentMailboxItemMetadata) validateLastOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.LastOccurrence) { // not required
		return nil
	}

	if m.LastOccurrence != nil {
		if err := m.LastOccurrence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastOccurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastOccurrence")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cracked file document mailbox item metadata based on the context it is used
func (m *CrackedFileDocumentMailboxItemMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFirstOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrackedFileDocumentMailboxItemMetadata) contextValidateFirstOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if m.FirstOccurrence != nil {

		if swag.IsZero(m.FirstOccurrence) { // not required
			return nil
		}

		if err := m.FirstOccurrence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firstOccurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firstOccurrence")
			}
			return err
		}
	}

	return nil
}

func (m *CrackedFileDocumentMailboxItemMetadata) contextValidateLastOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if m.LastOccurrence != nil {

		if swag.IsZero(m.LastOccurrence) { // not required
			return nil
		}

		if err := m.LastOccurrence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastOccurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastOccurrence")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrackedFileDocumentMailboxItemMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrackedFileDocumentMailboxItemMetadata) UnmarshalBinary(b []byte) error {
	var res CrackedFileDocumentMailboxItemMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
