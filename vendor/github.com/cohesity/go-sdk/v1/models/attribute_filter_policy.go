// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AttributeFilterPolicy Attribute Filter Policy.
//
// Specifies the filter policy which can be applied on the entities being
// backed up within a job. The filter policy supports both inclusions &
// exclusions. In scenarios where, there is an overlap between inclusions
// and exclusions, it the adapter's responsibility to choose the precedence.
//
// Currently this is only used by O365 within Mailbox & OneDrive backup params.
// Precedence is given to inclusion.
//
// Eg: To create an inclusion filter within a job for autoprotection on
// department as 'Engineering' & display_name starting with [A, B, C], below
// is the param:
//
// inclusion_attr_params: {
// attr_key: kDepartment
// attr_value_vec: "Engineering"
// }
//
// inclusion_attr_params: {
// attr_key: kDisplayNamePrefixAlphabet
// attr_value_vec: "A"
// attr_value_vec: "B"
// attr_value_vec: "C"
// }
//
// swagger:model AttributeFilterPolicy
type AttributeFilterPolicy struct {

	// Specifies the exclusion attributes.
	ExclusionAttrParams []*AttributeFilterParams `json:"exclusionAttrParams"`

	// Specifies the inclusion attributes.
	InclusionAttrParams []*AttributeFilterParams `json:"inclusionAttrParams"`
}

// Validate validates this attribute filter policy
func (m *AttributeFilterPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExclusionAttrParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInclusionAttrParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttributeFilterPolicy) validateExclusionAttrParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ExclusionAttrParams) { // not required
		return nil
	}

	for i := 0; i < len(m.ExclusionAttrParams); i++ {
		if swag.IsZero(m.ExclusionAttrParams[i]) { // not required
			continue
		}

		if m.ExclusionAttrParams[i] != nil {
			if err := m.ExclusionAttrParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclusionAttrParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exclusionAttrParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AttributeFilterPolicy) validateInclusionAttrParams(formats strfmt.Registry) error {
	if swag.IsZero(m.InclusionAttrParams) { // not required
		return nil
	}

	for i := 0; i < len(m.InclusionAttrParams); i++ {
		if swag.IsZero(m.InclusionAttrParams[i]) { // not required
			continue
		}

		if m.InclusionAttrParams[i] != nil {
			if err := m.InclusionAttrParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inclusionAttrParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inclusionAttrParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this attribute filter policy based on the context it is used
func (m *AttributeFilterPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExclusionAttrParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInclusionAttrParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttributeFilterPolicy) contextValidateExclusionAttrParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExclusionAttrParams); i++ {

		if m.ExclusionAttrParams[i] != nil {

			if swag.IsZero(m.ExclusionAttrParams[i]) { // not required
				return nil
			}

			if err := m.ExclusionAttrParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclusionAttrParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exclusionAttrParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AttributeFilterPolicy) contextValidateInclusionAttrParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InclusionAttrParams); i++ {

		if m.InclusionAttrParams[i] != nil {

			if swag.IsZero(m.InclusionAttrParams[i]) { // not required
				return nil
			}

			if err := m.InclusionAttrParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inclusionAttrParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inclusionAttrParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttributeFilterPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttributeFilterPolicy) UnmarshalBinary(b []byte) error {
	var res AttributeFilterPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
