// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantDeletionInfo TenantDeletionInfo captures the individual deletion state of a category of
// objects marked tagged with a tenant_id (which has been marked for deletion).
//
// swagger:model TenantDeletionInfo
type TenantDeletionInfo struct {

	// Specifies the category of objects whose deletion state is being captured.
	// Specifies the Category of objects which are required to be deleted.
	// On the first pass (when Tenant is marked 'deleted' and
	// 'object_deletion_required' is set to true, for all the objects
	// recognized in the enum - default deletion_info_vec is created.
	// In order to skip the deletion of a few object categories, this object
	// should be created manually during the 'Delete API' and these categories
	// should be skipped.
	// Enum: ["ProtectionJobs","Views","ProtectionSources","Users","ProtectionPolicies","Groups","ActiveDirectories","Ldap","RecoveryTask","RemoteClusters","StorageDomains","Alerts","ReportingSchedules","Idps","Swift","ExternalTargets","HyxRealms","HyxConnectors"]
	Category *string `json:"category,omitempty"`

	// Specifies the time when the process finished.
	FinishedAtTimeMsecs *int64 `json:"finishedAtTimeMsecs,omitempty"`

	// Specifies the node ip where the process ran. Typically this would be
	// Primary Iris.
	ProcessedAtNode *string `json:"processedAtNode,omitempty"`

	// Specifies the number of times this task has been retried.
	RetryCount *int64 `json:"retryCount,omitempty"`

	// Specifies the time when the process started.
	StartedAtTimeMsecs *int64 `json:"startedAtTimeMsecs,omitempty"`

	// Specifies the deletion completion state of the object category.
	// Completion State is captured before any operations are started. Similar to
	// WAL (Write Ahead Logging).
	// Enum: ["NotStarted","InProgress","Finished","Skipped","Waiting"]
	State *string `json:"state,omitempty"`
}

// Validate validates this tenant deletion info
func (m *TenantDeletionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tenantDeletionInfoTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ProtectionJobs","Views","ProtectionSources","Users","ProtectionPolicies","Groups","ActiveDirectories","Ldap","RecoveryTask","RemoteClusters","StorageDomains","Alerts","ReportingSchedules","Idps","Swift","ExternalTargets","HyxRealms","HyxConnectors"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantDeletionInfoTypeCategoryPropEnum = append(tenantDeletionInfoTypeCategoryPropEnum, v)
	}
}

const (

	// TenantDeletionInfoCategoryProtectionJobs captures enum value "ProtectionJobs"
	TenantDeletionInfoCategoryProtectionJobs string = "ProtectionJobs"

	// TenantDeletionInfoCategoryViews captures enum value "Views"
	TenantDeletionInfoCategoryViews string = "Views"

	// TenantDeletionInfoCategoryProtectionSources captures enum value "ProtectionSources"
	TenantDeletionInfoCategoryProtectionSources string = "ProtectionSources"

	// TenantDeletionInfoCategoryUsers captures enum value "Users"
	TenantDeletionInfoCategoryUsers string = "Users"

	// TenantDeletionInfoCategoryProtectionPolicies captures enum value "ProtectionPolicies"
	TenantDeletionInfoCategoryProtectionPolicies string = "ProtectionPolicies"

	// TenantDeletionInfoCategoryGroups captures enum value "Groups"
	TenantDeletionInfoCategoryGroups string = "Groups"

	// TenantDeletionInfoCategoryActiveDirectories captures enum value "ActiveDirectories"
	TenantDeletionInfoCategoryActiveDirectories string = "ActiveDirectories"

	// TenantDeletionInfoCategoryLdap captures enum value "Ldap"
	TenantDeletionInfoCategoryLdap string = "Ldap"

	// TenantDeletionInfoCategoryRecoveryTask captures enum value "RecoveryTask"
	TenantDeletionInfoCategoryRecoveryTask string = "RecoveryTask"

	// TenantDeletionInfoCategoryRemoteClusters captures enum value "RemoteClusters"
	TenantDeletionInfoCategoryRemoteClusters string = "RemoteClusters"

	// TenantDeletionInfoCategoryStorageDomains captures enum value "StorageDomains"
	TenantDeletionInfoCategoryStorageDomains string = "StorageDomains"

	// TenantDeletionInfoCategoryAlerts captures enum value "Alerts"
	TenantDeletionInfoCategoryAlerts string = "Alerts"

	// TenantDeletionInfoCategoryReportingSchedules captures enum value "ReportingSchedules"
	TenantDeletionInfoCategoryReportingSchedules string = "ReportingSchedules"

	// TenantDeletionInfoCategoryIdps captures enum value "Idps"
	TenantDeletionInfoCategoryIdps string = "Idps"

	// TenantDeletionInfoCategorySwift captures enum value "Swift"
	TenantDeletionInfoCategorySwift string = "Swift"

	// TenantDeletionInfoCategoryExternalTargets captures enum value "ExternalTargets"
	TenantDeletionInfoCategoryExternalTargets string = "ExternalTargets"

	// TenantDeletionInfoCategoryHyxRealms captures enum value "HyxRealms"
	TenantDeletionInfoCategoryHyxRealms string = "HyxRealms"

	// TenantDeletionInfoCategoryHyxConnectors captures enum value "HyxConnectors"
	TenantDeletionInfoCategoryHyxConnectors string = "HyxConnectors"
)

// prop value enum
func (m *TenantDeletionInfo) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantDeletionInfoTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantDeletionInfo) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

var tenantDeletionInfoTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotStarted","InProgress","Finished","Skipped","Waiting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantDeletionInfoTypeStatePropEnum = append(tenantDeletionInfoTypeStatePropEnum, v)
	}
}

const (

	// TenantDeletionInfoStateNotStarted captures enum value "NotStarted"
	TenantDeletionInfoStateNotStarted string = "NotStarted"

	// TenantDeletionInfoStateInProgress captures enum value "InProgress"
	TenantDeletionInfoStateInProgress string = "InProgress"

	// TenantDeletionInfoStateFinished captures enum value "Finished"
	TenantDeletionInfoStateFinished string = "Finished"

	// TenantDeletionInfoStateSkipped captures enum value "Skipped"
	TenantDeletionInfoStateSkipped string = "Skipped"

	// TenantDeletionInfoStateWaiting captures enum value "Waiting"
	TenantDeletionInfoStateWaiting string = "Waiting"
)

// prop value enum
func (m *TenantDeletionInfo) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantDeletionInfoTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantDeletionInfo) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tenant deletion info based on context it is used
func (m *TenantDeletionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TenantDeletionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantDeletionInfo) UnmarshalBinary(b []byte) error {
	var res TenantDeletionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
