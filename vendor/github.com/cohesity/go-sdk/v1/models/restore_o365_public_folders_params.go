// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreO365PublicFoldersParams This message defines the O365 Public Folders specific restore params.
//
// swagger:model RestoreO365PublicFoldersParams
type RestoreO365PublicFoldersParams struct {

	// In a RestoreJob , user will provide the list of Root Public Folders to be
	// restored. Provision is there for restoring full and partial Public Folder
	// recovery.
	RootPublicFolderVec []*RestoreO365PublicFoldersParamsRootPublicFolder `json:"rootPublicFolderVec"`

	// target folder path
	TargetFolderPath *string `json:"targetFolderPath,omitempty"`

	// This is the target Public Folder.
	//
	// All RootPublicFolders listed in the root_public_folder_vec will be
	// restored to this traget RootPublicFolder with appropriate names.
	//
	// Let's say root_public_folder_vec is A and B; target_root_public_folder is
	// C. The final folder-hierarchy after restore job is finished will look
	// like this
	// C/{target_folder_path}/A/{whatever is there in Public Folder A}
	// B/{whatever is inside Public Folder B}
	TargetRootPublicFolder *EntityProto `json:"targetRootPublicFolder,omitempty"`
}

// Validate validates this restore o365 public folders params
func (m *RestoreO365PublicFoldersParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRootPublicFolderVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetRootPublicFolder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreO365PublicFoldersParams) validateRootPublicFolderVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RootPublicFolderVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RootPublicFolderVec); i++ {
		if swag.IsZero(m.RootPublicFolderVec[i]) { // not required
			continue
		}

		if m.RootPublicFolderVec[i] != nil {
			if err := m.RootPublicFolderVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootPublicFolderVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootPublicFolderVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreO365PublicFoldersParams) validateTargetRootPublicFolder(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetRootPublicFolder) { // not required
		return nil
	}

	if m.TargetRootPublicFolder != nil {
		if err := m.TargetRootPublicFolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetRootPublicFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetRootPublicFolder")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore o365 public folders params based on the context it is used
func (m *RestoreO365PublicFoldersParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRootPublicFolderVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetRootPublicFolder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreO365PublicFoldersParams) contextValidateRootPublicFolderVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RootPublicFolderVec); i++ {

		if m.RootPublicFolderVec[i] != nil {

			if swag.IsZero(m.RootPublicFolderVec[i]) { // not required
				return nil
			}

			if err := m.RootPublicFolderVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootPublicFolderVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootPublicFolderVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreO365PublicFoldersParams) contextValidateTargetRootPublicFolder(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetRootPublicFolder != nil {

		if swag.IsZero(m.TargetRootPublicFolder) { // not required
			return nil
		}

		if err := m.TargetRootPublicFolder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetRootPublicFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetRootPublicFolder")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreO365PublicFoldersParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreO365PublicFoldersParams) UnmarshalBinary(b []byte) error {
	var res RestoreO365PublicFoldersParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
