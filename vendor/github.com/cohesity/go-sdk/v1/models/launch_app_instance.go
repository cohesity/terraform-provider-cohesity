// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LaunchAppInstance Launch App Instance.
//
// Specifies app instance parameters.
//
// swagger:model LaunchAppInstance
type LaunchAppInstance struct {

	// Specifies the app Id.
	AppUID *int64 `json:"appUid,omitempty"`

	// Specifies the app version.
	AppVersion *int64 `json:"appVersion,omitempty"`

	// Specifies unique identifier generated by the client to let the backend distinguish
	// retries of the creation of the app instance.
	CreationUID *string `json:"creationUid,omitempty"`

	// Specifies deployment parameters for launch of the application
	DeploymentParameters *string `json:"deploymentParameters,omitempty"`

	// Specifies user configured description for the app instance.
	Description *string `json:"description,omitempty"`

	// Specifies launch settings.
	Settings *AppInstanceSettings `json:"settings,omitempty"`
}

// Validate validates this launch app instance
func (m *LaunchAppInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LaunchAppInstance) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this launch app instance based on the context it is used
func (m *LaunchAppInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LaunchAppInstance) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {

		if swag.IsZero(m.Settings) { // not required
			return nil
		}

		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LaunchAppInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LaunchAppInstance) UnmarshalBinary(b []byte) error {
	var res LaunchAppInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
