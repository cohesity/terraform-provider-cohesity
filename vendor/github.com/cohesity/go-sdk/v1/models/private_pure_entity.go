// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivatePureEntity private pure entity
//
// swagger:model PrivatePureEntity
type PrivatePureEntity struct {

	// The id of the array.
	ArrayID *string `json:"arrayId,omitempty"`

	// The SAN ports on the array.
	ArrayPortVec []*SanPort `json:"arrayPortVec"`

	// The revision of the array.
	ArrayRevision *string `json:"arrayRevision,omitempty"`

	// The version of the array.
	ArrayVersion *string `json:"arrayVersion,omitempty"`

	// The id of the availability group
	AvailabilityGroupID *string `json:"availabilityGroupId,omitempty"`

	// The base_volume id to be cloned for nimble adapter.
	BaseVolumeID *string `json:"baseVolumeId,omitempty"`

	// A version field representing the current entity property by which this
	// entity is tracked in this cluster.
	IDVersion *int32 `json:"idVersion,omitempty"`

	// The name of the entity.
	Name *string `json:"name,omitempty"`

	// The unique id of the storage pool.
	StoragePoolID *string `json:"storagePoolId,omitempty"`

	// Status of the storage pool
	StoragePoolStatus *int32 `json:"storagePoolStatus,omitempty"`

	// The type of the entity.
	Type *int32 `json:"type,omitempty"`

	// The creation time (e.g., "2015-07-21T17:59:41Z").
	VolumeCreationTime *string `json:"volumeCreationTime,omitempty"`

	// The id of the volume group
	VolumeGroupID *string `json:"volumeGroupId,omitempty"`

	// Unique id of the volume group. For IBM FlashSystem id / uid are different
	// Values.
	VolumeGroupUID *string `json:"volumeGroupUid,omitempty"`

	// The volume level iqn.
	VolumeIqn *string `json:"volumeIqn,omitempty"`

	// The serial number of the volume.
	VolumeSerial *string `json:"volumeSerial,omitempty"`

	// The provisioned size in bytes of the volume.
	VolumeSize *int64 `json:"volumeSize,omitempty"`

	// The name of the source volume (if any) this volume was copied/cloned from.
	VolumeSource *string `json:"volumeSource,omitempty"`

	// Total space actually used by the volume.
	VolumeTotalSpaceUsed *int64 `json:"volumeTotalSpaceUsed,omitempty"`
}

// Validate validates this private pure entity
func (m *PrivatePureEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrayPortVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivatePureEntity) validateArrayPortVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrayPortVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ArrayPortVec); i++ {
		if swag.IsZero(m.ArrayPortVec[i]) { // not required
			continue
		}

		if m.ArrayPortVec[i] != nil {
			if err := m.ArrayPortVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrayPortVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arrayPortVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this private pure entity based on the context it is used
func (m *PrivatePureEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArrayPortVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivatePureEntity) contextValidateArrayPortVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArrayPortVec); i++ {

		if m.ArrayPortVec[i] != nil {

			if swag.IsZero(m.ArrayPortVec[i]) { // not required
				return nil
			}

			if err := m.ArrayPortVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrayPortVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arrayPortVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivatePureEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivatePureEntity) UnmarshalBinary(b []byte) error {
	var res PrivatePureEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
