// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateCbtInfo CBT version and service state info
//
// swagger:model PrivateCbtInfo
type PrivateCbtInfo struct {

	// Cbt driver installed version information.
	FileVersion *AgentInfoProtoInstalledSubcomponentVersion `json:"fileVersion,omitempty"`

	// Indicates whether the cbt driver is installed.
	IsInstalled *bool `json:"isInstalled,omitempty"`

	// Indicates whether host is rebooted post VolCBT installation.
	RebootStatus *int32 `json:"rebootStatus,omitempty"`

	// Information regarding the service state of the cbt driver.
	ServiceState *ServiceState `json:"serviceState,omitempty"`
}

// Validate validates this private cbt info
func (m *PrivateCbtInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateCbtInfo) validateFileVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.FileVersion) { // not required
		return nil
	}

	if m.FileVersion != nil {
		if err := m.FileVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileVersion")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateCbtInfo) validateServiceState(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceState) { // not required
		return nil
	}

	if m.ServiceState != nil {
		if err := m.ServiceState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceState")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private cbt info based on the context it is used
func (m *PrivateCbtInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateCbtInfo) contextValidateFileVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.FileVersion != nil {

		if swag.IsZero(m.FileVersion) { // not required
			return nil
		}

		if err := m.FileVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileVersion")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateCbtInfo) contextValidateServiceState(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceState != nil {

		if swag.IsZero(m.ServiceState) { // not required
			return nil
		}

		if err := m.ServiceState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceState")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateCbtInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateCbtInfo) UnmarshalBinary(b []byte) error {
	var res PrivateCbtInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
