// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateSfdcEntity private sfdc entity
//
// swagger:model PrivateSfdcEntity
type PrivateSfdcEntity struct {

	// Information about an Sfdc object, only valid for an entity of type kField.
	// Remove this. Keeping because 'reserving' this is causing the
	// solaris build to break. ******
	FieldInfo *FieldInfo `json:"fieldInfo,omitempty"`

	// This field uniquely identifies the entity.
	// It is the 'API name' of the field in Salesforce terminology.
	// Note that it is different from the 'field label' that is used only for
	// display purpose on Salesforce UI.
	Name *string `json:"name,omitempty"`

	// Information about an Sfdc object, only valid for an entity of type kObject
	ObjectInfo *ObjectInfo `json:"objectInfo,omitempty"`

	// Information of an Sfdc org, only valid for an entity of type kOrg.
	OrgInfo *OrgInfo `json:"orgInfo,omitempty"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// Contains the user licenses information in the salesforce organization.
	UserLicenseInfo *UserLicenseInfo `json:"userLicenseInfo,omitempty"`
}

// Validate validates this private sfdc entity
func (m *PrivateSfdcEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserLicenseInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateSfdcEntity) validateFieldInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FieldInfo) { // not required
		return nil
	}

	if m.FieldInfo != nil {
		if err := m.FieldInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fieldInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fieldInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateSfdcEntity) validateObjectInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectInfo) { // not required
		return nil
	}

	if m.ObjectInfo != nil {
		if err := m.ObjectInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateSfdcEntity) validateOrgInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OrgInfo) { // not required
		return nil
	}

	if m.OrgInfo != nil {
		if err := m.OrgInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orgInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orgInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateSfdcEntity) validateUserLicenseInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.UserLicenseInfo) { // not required
		return nil
	}

	if m.UserLicenseInfo != nil {
		if err := m.UserLicenseInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userLicenseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userLicenseInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private sfdc entity based on the context it is used
func (m *PrivateSfdcEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFieldInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrgInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserLicenseInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateSfdcEntity) contextValidateFieldInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FieldInfo != nil {

		if swag.IsZero(m.FieldInfo) { // not required
			return nil
		}

		if err := m.FieldInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fieldInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fieldInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateSfdcEntity) contextValidateObjectInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectInfo != nil {

		if swag.IsZero(m.ObjectInfo) { // not required
			return nil
		}

		if err := m.ObjectInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateSfdcEntity) contextValidateOrgInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OrgInfo != nil {

		if swag.IsZero(m.OrgInfo) { // not required
			return nil
		}

		if err := m.OrgInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orgInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orgInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateSfdcEntity) contextValidateUserLicenseInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.UserLicenseInfo != nil {

		if swag.IsZero(m.UserLicenseInfo) { // not required
			return nil
		}

		if err := m.UserLicenseInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userLicenseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userLicenseInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateSfdcEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateSfdcEntity) UnmarshalBinary(b []byte) error {
	var res PrivateSfdcEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
