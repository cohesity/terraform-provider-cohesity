// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectedSourceSummary ProtectedSourceSummary is the summary of all the Protection Runs for the
// Protection Jobs using the Specified Protection Policy. This is only
// populated for a policy of type kRPO.
//
// swagger:model ProtectedSourceSummary
type ProtectedSourceSummary struct {

	// Specifies details about the last Backup task.
	// A Backup task captures the original backup snapshots.
	BackupRun *BackupRun `json:"backupRun,omitempty"`

	// Specifies details about the Copy tasks of the Job Run.
	// A Copy task copies the captured snapshots to an external target
	// or a Remote Cohesity Cluster.
	CopyRuns []*CopyRun `json:"copyRuns"`

	// Specifies the status of the backup job.
	IsPaused *bool `json:"isPaused,omitempty"`

	// Specifies the time at which the next Protection Run is scheduled for the
	// given Protection Source in Unix epoch Time (microseconds).
	NextProtectionRunTimeUsecs *int64 `json:"nextProtectionRunTimeUsecs,omitempty"`

	// Specifies the globally unique id of the Protected Source.
	ProtectedSourceUID *UniversalID `json:"protectedSourceUid,omitempty"`

	// Specifies the Protection Source summary information.
	ProtectionSource *ProtectionSource `json:"protectionSource,omitempty"`

	// Specifies additional special settings for a single Protected Source.
	SourceParameters []*SourceSpecialParameter `json:"sourceParameters"`
}

// Validate validates this protected source summary
func (m *ProtectedSourceSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopyRuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectedSourceUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectedSourceSummary) validateBackupRun(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRun) { // not required
		return nil
	}

	if m.BackupRun != nil {
		if err := m.BackupRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupRun")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectedSourceSummary) validateCopyRuns(formats strfmt.Registry) error {
	if swag.IsZero(m.CopyRuns) { // not required
		return nil
	}

	for i := 0; i < len(m.CopyRuns); i++ {
		if swag.IsZero(m.CopyRuns[i]) { // not required
			continue
		}

		if m.CopyRuns[i] != nil {
			if err := m.CopyRuns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("copyRuns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("copyRuns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedSourceSummary) validateProtectedSourceUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectedSourceUID) { // not required
		return nil
	}

	if m.ProtectedSourceUID != nil {
		if err := m.ProtectedSourceUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectedSourceUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectedSourceUid")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectedSourceSummary) validateProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionSource) { // not required
		return nil
	}

	if m.ProtectionSource != nil {
		if err := m.ProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectedSourceSummary) validateSourceParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceParameters); i++ {
		if swag.IsZero(m.SourceParameters[i]) { // not required
			continue
		}

		if m.SourceParameters[i] != nil {
			if err := m.SourceParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this protected source summary based on the context it is used
func (m *ProtectedSourceSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCopyRuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectedSourceUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectedSourceSummary) contextValidateBackupRun(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRun != nil {

		if swag.IsZero(m.BackupRun) { // not required
			return nil
		}

		if err := m.BackupRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupRun")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectedSourceSummary) contextValidateCopyRuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CopyRuns); i++ {

		if m.CopyRuns[i] != nil {

			if swag.IsZero(m.CopyRuns[i]) { // not required
				return nil
			}

			if err := m.CopyRuns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("copyRuns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("copyRuns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedSourceSummary) contextValidateProtectedSourceUID(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectedSourceUID != nil {

		if swag.IsZero(m.ProtectedSourceUID) { // not required
			return nil
		}

		if err := m.ProtectedSourceUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectedSourceUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectedSourceUid")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectedSourceSummary) contextValidateProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionSource != nil {

		if swag.IsZero(m.ProtectionSource) { // not required
			return nil
		}

		if err := m.ProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectedSourceSummary) contextValidateSourceParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SourceParameters); i++ {

		if m.SourceParameters[i] != nil {

			if swag.IsZero(m.SourceParameters[i]) { // not required
				return nil
			}

			if err := m.SourceParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectedSourceSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectedSourceSummary) UnmarshalBinary(b []byte) error {
	var res ProtectedSourceSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
