// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterStatusResult Cluster Status Result.
//
// Specifies the result of getting the status of a Cluster.
//
// swagger:model ClusterStatusResult
type ClusterStatusResult struct {

	// Specifies Airgap config
	AirgapConfig *AirgapConfig `json:"airgapConfig,omitempty"`

	// Specifies the ID of the Cluster.
	ClusterID *int64 `json:"clusterId,omitempty"`

	// Specifies the incarnation ID of the Cluster.
	ClusterIncarnationID *int64 `json:"clusterIncarnationId,omitempty"`

	// Specifies the current operation being run on the Cluster.
	// 'kNone' indicates that there is no current operation taking place.
	// 'kDestroy' indicates that the Cluster is currently being destroyed.
	// 'kUpgrade' indicates that the Cluster is currently being upgraded.
	// 'kClean' indicates that the Cluster is being cleaned.
	// 'kRemoveNode' indicates that a Node is being removed from the Cluster.
	// 'kRestartServices' indicates that the services on the Cluster are currently
	// being restarted.
	// Enum: ["kNone","kDestroy","kUpgrade","kClean","kRemoveNode","kRestartServices"]
	CurrentOperation *string `json:"currentOperation,omitempty"`

	// Specifies an optional message describing details of the Cluster status.
	Message *string `json:"message,omitempty"`

	// Specifies the name of the Cluster.
	Name *string `json:"name,omitempty"`

	// Specifies the status of each Node on the Cluster.
	NodeStatuses []*NodeStatusResult `json:"nodeStatuses"`

	// Specifies the current healing state of the Cluster.
	// 'kNoRemoval' indicates that there are no removal operations currently
	// happening on the Cluster.
	// 'kNodeRemoval' indicates that there is a Node being removed from the
	// Cluster.
	// 'kDiskRemoval' indicates that there is a Disk being removed from the
	// Cluster.
	// 'kNodeAndDiskRemoval' indicates that there is a Node and a Disk being
	// removed from the Cluster.
	// Enum: ["kNoRemoval","kNodeRemoval","kDiskRemoval","kNodeAndDiskRemoval"]
	RemovalState *string `json:"removalState,omitempty"`

	// Specifies whether or not the services are synced with the list of
	// stopped services.
	ServicesSynced *bool `json:"servicesSynced,omitempty"`

	// Specifies the software version of the Cluster.
	SoftwareVersion *string `json:"softwareVersion,omitempty"`

	// Specifies the list of stopped services on the Cluster.
	// 'kApollo' is a service for reclaiming freed disk sectors on Nodes in the
	// SnapFS distributed file system.
	// 'kBridge' is a service for managing the SnapFS distributed file system.
	// 'kGenie' is a service that is responsible for monitoring hardware health
	// on the Cluster.
	// 'kGenieGofer' is a service that links the Genie service to other services
	// on the Cluster.
	// 'kMagneto' is the data protection service of the Cohesity Data Platform.
	// 'kIris' is the service which serves REST API calls to the UI, CLI, and any
	// scripts written by customers.
	// 'kIrisProxy' is a service that links the Iris service to other services
	// on the Cluster.
	// 'kScribe' is the service responsible for storing filesystem metadata.
	// 'kStats' is the service that is responsible for retrieving and aggregating
	// disk metrics across the Cluster.
	// 'kYoda' is an elastic search indexing service.
	// 'kAlerts' is a publisher and subscribing service for alerts.
	// 'kKeychain' is a service for managing disk encryption keys.
	// 'kLogWatcher' is a service that scans the log directory and reduces
	// the number of logs if required.
	// 'kStatsCollector' is a service that periodically logs system stats.
	// 'kGandalf' is a distributed lock service and coordination manager.
	// 'kNexus' indicates the Nexus service. This is the service that is
	// responsible for creation of Clusters and configuration of Nodes and
	// networking.
	// 'kNexusProxy' is a service that links the Nexus service to other services
	// on the Cluster.
	// 'kStorageProxy' is a service for accessing data on external entities.
	// 'kRtClient' is a reverse tunneling client service.
	// 'kVaultProxy' is a service for managing external targets that Clusters
	// can be backed up to.
	// 'kSmbProxy' is an SMB protocol service.
	// 'kBridgeProxy' is the service that links the Bridge service to other
	// services on the Cluster.
	// 'kLibrarian' is an elastic search indexing service.
	// 'kGroot' is a service for managing replication of SQL databases across
	// multiple nodes in a Cluster.
	// 'kEagleAgent' is a service that is responsible for retrieving information
	// on Cluster health.
	// 'kAthena' is a service for running distributed containerized applications
	// on the Cohesity Data Platform.
	// 'kBifrostBroker' is a service for communicating with the Cohesity proxies
	// for multitenancy.
	// 'kSmb2Proxy' is a new SMB protocol service.
	// 'kOs' can be specified in order to do a full reboot.
	// 'kAtom' is a service for receiving data for the Continuous Data Protection.
	// 'kPatch' is a service for downloading and applying patches.
	// 'kCompass' is a service for serving dns request for external and internal
	// traffic.
	// 'kEtlServer' is a service responsible for ETling data for globalsearch.
	// 'kIcebox' is service that links Icebox service to other services on cluster.
	// kScribe, kStats, kYoda, kAlerts, kKeychain, kLogWatcher, kStatsCollecter,
	// kGandalf, kNexus, kNexusProxy, kStorageProxy, kRtClient, kVaultProxy,
	// kSmbProxy, kBridgeProxy, kLibrarian, kGroot, kEagleAgent, kAthena,
	// kBifrostBroker, kSmb2Proxy, kOs, kAtom, kIcebox
	StoppedServices []string `json:"stoppedServices"`

	// Specifies the status of each system app on the Cluster
	SystemAppStatus []*SystemAppStatusResult `json:"systemAppStatus"`
}

// Validate validates this cluster status result
func (m *ClusterStatusResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirgapConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovalState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoppedServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemAppStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStatusResult) validateAirgapConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AirgapConfig) { // not required
		return nil
	}

	if m.AirgapConfig != nil {
		if err := m.AirgapConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("airgapConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("airgapConfig")
			}
			return err
		}
	}

	return nil
}

var clusterStatusResultTypeCurrentOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNone","kDestroy","kUpgrade","kClean","kRemoveNode","kRestartServices"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterStatusResultTypeCurrentOperationPropEnum = append(clusterStatusResultTypeCurrentOperationPropEnum, v)
	}
}

const (

	// ClusterStatusResultCurrentOperationKNone captures enum value "kNone"
	ClusterStatusResultCurrentOperationKNone string = "kNone"

	// ClusterStatusResultCurrentOperationKDestroy captures enum value "kDestroy"
	ClusterStatusResultCurrentOperationKDestroy string = "kDestroy"

	// ClusterStatusResultCurrentOperationKUpgrade captures enum value "kUpgrade"
	ClusterStatusResultCurrentOperationKUpgrade string = "kUpgrade"

	// ClusterStatusResultCurrentOperationKClean captures enum value "kClean"
	ClusterStatusResultCurrentOperationKClean string = "kClean"

	// ClusterStatusResultCurrentOperationKRemoveNode captures enum value "kRemoveNode"
	ClusterStatusResultCurrentOperationKRemoveNode string = "kRemoveNode"

	// ClusterStatusResultCurrentOperationKRestartServices captures enum value "kRestartServices"
	ClusterStatusResultCurrentOperationKRestartServices string = "kRestartServices"
)

// prop value enum
func (m *ClusterStatusResult) validateCurrentOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterStatusResultTypeCurrentOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterStatusResult) validateCurrentOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentOperation) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentOperationEnum("currentOperation", "body", *m.CurrentOperation); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatusResult) validateNodeStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeStatuses); i++ {
		if swag.IsZero(m.NodeStatuses[i]) { // not required
			continue
		}

		if m.NodeStatuses[i] != nil {
			if err := m.NodeStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var clusterStatusResultTypeRemovalStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNoRemoval","kNodeRemoval","kDiskRemoval","kNodeAndDiskRemoval"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterStatusResultTypeRemovalStatePropEnum = append(clusterStatusResultTypeRemovalStatePropEnum, v)
	}
}

const (

	// ClusterStatusResultRemovalStateKNoRemoval captures enum value "kNoRemoval"
	ClusterStatusResultRemovalStateKNoRemoval string = "kNoRemoval"

	// ClusterStatusResultRemovalStateKNodeRemoval captures enum value "kNodeRemoval"
	ClusterStatusResultRemovalStateKNodeRemoval string = "kNodeRemoval"

	// ClusterStatusResultRemovalStateKDiskRemoval captures enum value "kDiskRemoval"
	ClusterStatusResultRemovalStateKDiskRemoval string = "kDiskRemoval"

	// ClusterStatusResultRemovalStateKNodeAndDiskRemoval captures enum value "kNodeAndDiskRemoval"
	ClusterStatusResultRemovalStateKNodeAndDiskRemoval string = "kNodeAndDiskRemoval"
)

// prop value enum
func (m *ClusterStatusResult) validateRemovalStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterStatusResultTypeRemovalStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterStatusResult) validateRemovalState(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovalState) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemovalStateEnum("removalState", "body", *m.RemovalState); err != nil {
		return err
	}

	return nil
}

var clusterStatusResultStoppedServicesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kApollo","kBridge","kGenie","kGenieGofer","kMagneto","kIris","kIrisProxy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterStatusResultStoppedServicesItemsEnum = append(clusterStatusResultStoppedServicesItemsEnum, v)
	}
}

func (m *ClusterStatusResult) validateStoppedServicesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterStatusResultStoppedServicesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterStatusResult) validateStoppedServices(formats strfmt.Registry) error {
	if swag.IsZero(m.StoppedServices) { // not required
		return nil
	}

	for i := 0; i < len(m.StoppedServices); i++ {

		// value enum
		if err := m.validateStoppedServicesItemsEnum("stoppedServices"+"."+strconv.Itoa(i), "body", m.StoppedServices[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ClusterStatusResult) validateSystemAppStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemAppStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.SystemAppStatus); i++ {
		if swag.IsZero(m.SystemAppStatus[i]) { // not required
			continue
		}

		if m.SystemAppStatus[i] != nil {
			if err := m.SystemAppStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemAppStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("systemAppStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster status result based on the context it is used
func (m *ClusterStatusResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAirgapConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemAppStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStatusResult) contextValidateAirgapConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AirgapConfig != nil {

		if swag.IsZero(m.AirgapConfig) { // not required
			return nil
		}

		if err := m.AirgapConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("airgapConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("airgapConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatusResult) contextValidateNodeStatuses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeStatuses); i++ {

		if m.NodeStatuses[i] != nil {

			if swag.IsZero(m.NodeStatuses[i]) { // not required
				return nil
			}

			if err := m.NodeStatuses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStatusResult) contextValidateSystemAppStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SystemAppStatus); i++ {

		if m.SystemAppStatus[i] != nil {

			if swag.IsZero(m.SystemAppStatus[i]) { // not required
				return nil
			}

			if err := m.SystemAppStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemAppStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("systemAppStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterStatusResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterStatusResult) UnmarshalBinary(b []byte) error {
	var res ClusterStatusResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
