// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeployCertParameters Deploy host global certificate Request.
//
// Specifies the parameters used to generate and deploy a certificate.
//
// swagger:model DeployCertParameters
type DeployCertParameters struct {

	// Specifies the filename of the certificate.
	CertFileName *string `json:"certFileName,omitempty"`

	// Specifies the list of all hosts on which the certificate is to
	// be deployed.
	HostsInfoList []*HostInfo `json:"hostsInfoList"`

	// Specifies the type of the host such as 'kSapHana', 'kSapOracle', etc.
	// Specifies the host type of host for generating and deploying a
	// Certificate.
	// 'kOther' indicates it is any of the other hosts.
	// 'kSapOracle' indicates it is a SAP Oracle host.
	// 'kSapHana' indicates it is a SAP HANA host.
	// Enum: ["kOther","kSapOracle","kSapHana"]
	Type *string `json:"type,omitempty"`

	// Specifies the number of days after which the certificate will expire. The
	// user has to input the number of days (from the current date) till when the
	// certificate is valid.
	ValidDays *int64 `json:"validDays,omitempty"`
}

// Validate validates this deploy cert parameters
func (m *DeployCertParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostsInfoList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployCertParameters) validateHostsInfoList(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsInfoList) { // not required
		return nil
	}

	for i := 0; i < len(m.HostsInfoList); i++ {
		if swag.IsZero(m.HostsInfoList[i]) { // not required
			continue
		}

		if m.HostsInfoList[i] != nil {
			if err := m.HostsInfoList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostsInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostsInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var deployCertParametersTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kOther","kSapOracle","kSapHana"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deployCertParametersTypeTypePropEnum = append(deployCertParametersTypeTypePropEnum, v)
	}
}

const (

	// DeployCertParametersTypeKOther captures enum value "kOther"
	DeployCertParametersTypeKOther string = "kOther"

	// DeployCertParametersTypeKSapOracle captures enum value "kSapOracle"
	DeployCertParametersTypeKSapOracle string = "kSapOracle"

	// DeployCertParametersTypeKSapHana captures enum value "kSapHana"
	DeployCertParametersTypeKSapHana string = "kSapHana"
)

// prop value enum
func (m *DeployCertParameters) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deployCertParametersTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeployCertParameters) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this deploy cert parameters based on the context it is used
func (m *DeployCertParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostsInfoList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployCertParameters) contextValidateHostsInfoList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostsInfoList); i++ {

		if m.HostsInfoList[i] != nil {

			if swag.IsZero(m.HostsInfoList[i]) { // not required
				return nil
			}

			if err := m.HostsInfoList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostsInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostsInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployCertParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployCertParameters) UnmarshalBinary(b []byte) error {
	var res DeployCertParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
