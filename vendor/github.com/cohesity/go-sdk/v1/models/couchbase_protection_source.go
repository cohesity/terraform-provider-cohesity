// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CouchbaseProtectionSource Couchbase Protection Source.
//
// Specifies an Object representing Couchbase.
//
// swagger:model CouchbaseProtectionSource
type CouchbaseProtectionSource struct {

	// Information of a Couchbase Bucket, only valid for an entity of type
	// kBucket.
	BucketInfo *CouchbaseBucket `json:"bucketInfo,omitempty"`

	// Information of a couchbase cluster, only valid for an entity of type
	// kCluster.
	ClusterInfo *CouchbaseCluster `json:"clusterInfo,omitempty"`

	// Specifies the instance name of the Couchbase entity.
	Name *string `json:"name,omitempty"`

	// Specifies the type of the managed Object in Couchbase Protection Source.
	// Specifies the type of an Couchbase source entity.
	// 'kCluster' indicates a Couchbase cluster distributed over several physical
	// nodes.
	// 'kBucket' indicates a bucket within the Couchbase environment.
	// Enum: ["kCluster","kBucket"]
	Type *string `json:"type,omitempty"`

	// Specifies the UUID for the Couchbase entity.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this couchbase protection source
func (m *CouchbaseProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucketInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CouchbaseProtectionSource) validateBucketInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.BucketInfo) { // not required
		return nil
	}

	if m.BucketInfo != nil {
		if err := m.BucketInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucketInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucketInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CouchbaseProtectionSource) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

var couchbaseProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kBucket"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		couchbaseProtectionSourceTypeTypePropEnum = append(couchbaseProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// CouchbaseProtectionSourceTypeKCluster captures enum value "kCluster"
	CouchbaseProtectionSourceTypeKCluster string = "kCluster"

	// CouchbaseProtectionSourceTypeKBucket captures enum value "kBucket"
	CouchbaseProtectionSourceTypeKBucket string = "kBucket"
)

// prop value enum
func (m *CouchbaseProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, couchbaseProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CouchbaseProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this couchbase protection source based on the context it is used
func (m *CouchbaseProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBucketInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CouchbaseProtectionSource) contextValidateBucketInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.BucketInfo != nil {

		if swag.IsZero(m.BucketInfo) { // not required
			return nil
		}

		if err := m.BucketInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucketInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucketInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CouchbaseProtectionSource) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {

		if swag.IsZero(m.ClusterInfo) { // not required
			return nil
		}

		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CouchbaseProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CouchbaseProtectionSource) UnmarshalBinary(b []byte) error {
	var res CouchbaseProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
