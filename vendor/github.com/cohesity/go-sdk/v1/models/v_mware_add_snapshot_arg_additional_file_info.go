// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMwareAddSnapshotArgAdditionalFileInfo This captures any additional files that were fetched from the backup
// source and are stored in Bridge and should be made available for restore.
//
// swagger:model VMwareAddSnapshotArg_AdditionalFileInfo
type VMwareAddSnapshotArgAdditionalFileInfo struct {

	// This is set if there were any errors. This can be used to determine if
	// the file is available for restore or not.
	ErrorMsg *string `json:"errorMsg,omitempty"`

	// Filename of the file available for restore. This is just the basename
	// of the file relative to the snapshot_dir.
	FileName *string `json:"fileName,omitempty"`

	// Type of the file backed up.
	FileType *int32 `json:"fileType,omitempty"`
}

// Validate validates this v mware add snapshot arg additional file info
func (m *VMwareAddSnapshotArgAdditionalFileInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v mware add snapshot arg additional file info based on context it is used
func (m *VMwareAddSnapshotArgAdditionalFileInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMwareAddSnapshotArgAdditionalFileInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMwareAddSnapshotArgAdditionalFileInfo) UnmarshalBinary(b []byte) error {
	var res VMwareAddSnapshotArgAdditionalFileInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
