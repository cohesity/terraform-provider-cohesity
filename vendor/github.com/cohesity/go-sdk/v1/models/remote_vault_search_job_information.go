// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoteVaultSearchJobInformation Remote Vault Search Information.
//
// Specifies information about a search of a remote Vault.
//
// swagger:model RemoteVaultSearchJobInformation
type RemoteVaultSearchJobInformation struct {

	// Specifies number of Clusters that have archived to the remote Vault
	// and match the search criteria for this job, up to this point
	// in the search.
	// If the search is complete, the total number of Clusters that have
	// archived to the remote Vault and that match the search criteria
	// for this search Job, are reported.
	// If the search is not complete, a partial number is reported.
	ClusterCount *int32 `json:"clusterCount,omitempty"`

	// Specifies the end time of the search as a Unix epoch
	// Timestamp (in microseconds) if the search Job has completed.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the error message reported when a search fails.
	Error *string `json:"error,omitempty"`

	// Specifies number of Protection Jobs that have archived to the remote Vault
	// and match the search criteria for this search Job, up to this point
	// in the search.
	// If the search is complete, the total number of Protection Jobs that have
	// archived to the remote Vault and that match the search criteria
	// for this search Job, are reported.
	// If the search is not complete, a partial number is reported.
	JobCount *int32 `json:"jobCount,omitempty"`

	// Specifies the name of the search Job.
	Name *string `json:"name,omitempty"`

	// Specifies the status of the search.
	// 'kJobRunning' indicates that the Job/task is currently running.
	// 'kJobFinished' indicates that the Job/task completed and finished.
	// 'kJobFailed' indicates that the Job/task failed and did not complete.
	// 'kJobCanceled' indicates that the Job/task was canceled.
	// 'kJobPaused' indicates the Job/task is paused.
	// Enum: ["kJobRunning","kJobFinished","kJobFailed","kJobCanceled","kJobPaused"]
	SearchJobStatus *string `json:"searchJobStatus,omitempty"`

	// Search Job Uid.
	//
	// Specifies the unique id assigned to the search Job by the Cluster.
	SearchJobUID struct {
		UniversalID
	} `json:"searchJobUid,omitempty"`

	// Specifies the start time of the search as a Unix epoch
	// Timestamp (in microseconds).
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the id of the remote Vault (External Target) that was searched.
	VaultID *int64 `json:"vaultId,omitempty"`

	// Specifies the name of the remote Vault (External Target) that was searched.
	VaultName *string `json:"vaultName,omitempty"`
}

// Validate validates this remote vault search job information
func (m *RemoteVaultSearchJobInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSearchJobStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchJobUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var remoteVaultSearchJobInformationTypeSearchJobStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kJobRunning","kJobFinished","kJobFailed","kJobCanceled","kJobPaused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remoteVaultSearchJobInformationTypeSearchJobStatusPropEnum = append(remoteVaultSearchJobInformationTypeSearchJobStatusPropEnum, v)
	}
}

const (

	// RemoteVaultSearchJobInformationSearchJobStatusKJobRunning captures enum value "kJobRunning"
	RemoteVaultSearchJobInformationSearchJobStatusKJobRunning string = "kJobRunning"

	// RemoteVaultSearchJobInformationSearchJobStatusKJobFinished captures enum value "kJobFinished"
	RemoteVaultSearchJobInformationSearchJobStatusKJobFinished string = "kJobFinished"

	// RemoteVaultSearchJobInformationSearchJobStatusKJobFailed captures enum value "kJobFailed"
	RemoteVaultSearchJobInformationSearchJobStatusKJobFailed string = "kJobFailed"

	// RemoteVaultSearchJobInformationSearchJobStatusKJobCanceled captures enum value "kJobCanceled"
	RemoteVaultSearchJobInformationSearchJobStatusKJobCanceled string = "kJobCanceled"

	// RemoteVaultSearchJobInformationSearchJobStatusKJobPaused captures enum value "kJobPaused"
	RemoteVaultSearchJobInformationSearchJobStatusKJobPaused string = "kJobPaused"
)

// prop value enum
func (m *RemoteVaultSearchJobInformation) validateSearchJobStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remoteVaultSearchJobInformationTypeSearchJobStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RemoteVaultSearchJobInformation) validateSearchJobStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SearchJobStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateSearchJobStatusEnum("searchJobStatus", "body", *m.SearchJobStatus); err != nil {
		return err
	}

	return nil
}

func (m *RemoteVaultSearchJobInformation) validateSearchJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.SearchJobUID) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this remote vault search job information based on the context it is used
func (m *RemoteVaultSearchJobInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSearchJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteVaultSearchJobInformation) contextValidateSearchJobUID(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteVaultSearchJobInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteVaultSearchJobInformation) UnmarshalBinary(b []byte) error {
	var res RemoteVaultSearchJobInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
