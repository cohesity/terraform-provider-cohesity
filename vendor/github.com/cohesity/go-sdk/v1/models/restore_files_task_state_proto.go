// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreFilesTaskStateProto Persistent state for a "restore files" task.
//
// swagger:model RestoreFilesTaskStateProto
type RestoreFilesTaskStateProto struct {

	// Contains information about this restore files task that is populated by
	// the slave.
	RestoreFilesInfo *RestoreFilesInfoProto `json:"restoreFilesInfo,omitempty"`

	// This captures all the necessary information required to perform restore
	// to source task.
	RestoreParams *RestoreFilesParams `json:"restoreParams,omitempty"`
}

// Validate validates this restore files task state proto
func (m *RestoreFilesTaskStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestoreFilesInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreFilesTaskStateProto) validateRestoreFilesInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreFilesInfo) { // not required
		return nil
	}

	if m.RestoreFilesInfo != nil {
		if err := m.RestoreFilesInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreFilesInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreFilesInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFilesTaskStateProto) validateRestoreParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreParams) { // not required
		return nil
	}

	if m.RestoreParams != nil {
		if err := m.RestoreParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore files task state proto based on the context it is used
func (m *RestoreFilesTaskStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRestoreFilesInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreFilesTaskStateProto) contextValidateRestoreFilesInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreFilesInfo != nil {

		if swag.IsZero(m.RestoreFilesInfo) { // not required
			return nil
		}

		if err := m.RestoreFilesInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreFilesInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreFilesInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreFilesTaskStateProto) contextValidateRestoreParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreParams != nil {

		if swag.IsZero(m.RestoreParams) { // not required
			return nil
		}

		if err := m.RestoreParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreFilesTaskStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreFilesTaskStateProto) UnmarshalBinary(b []byte) error {
	var res RestoreFilesTaskStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
