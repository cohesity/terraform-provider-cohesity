// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntityHierarchyWrapper EntityHierarchyWrapper is a wrapper over the Magneto protobuf for backup
// objects along with their children hierarchy.
//
// swagger:model EntityHierarchyWrapper
type EntityHierarchyWrapper struct {

	// EntityHierarchy is the protobuf for the registered entity along with its
	// children hierarchy.
	EntityHierarchy *EntityHierarchyProto `json:"entityHierarchy,omitempty"`

	// Specifies the cursor based pagination parameters for Protection Source to
	// fetch the next set of sources within a level.
	EntityPaginationParams *PaginationParameters `json:"entityPaginationParams,omitempty"`

	// Specifies permission information for the entities.
	EntityPermissionInfo []*EntityPermissionInfo `json:"entityPermissionInfo"`

	// Specifies the object protection info for entities (if any) in the source.
	ObjectProtectionInfo []*GetEntityHierarchyResultObjectBasedProtectionInfo `json:"objectProtectionInfo"`
}

// Validate validates this entity hierarchy wrapper
func (m *EntityHierarchyWrapper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityHierarchy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityPaginationParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityPermissionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectProtectionInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityHierarchyWrapper) validateEntityHierarchy(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityHierarchy) { // not required
		return nil
	}

	if m.EntityHierarchy != nil {
		if err := m.EntityHierarchy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityHierarchy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityHierarchy")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyWrapper) validateEntityPaginationParams(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityPaginationParams) { // not required
		return nil
	}

	if m.EntityPaginationParams != nil {
		if err := m.EntityPaginationParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityPaginationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityPaginationParams")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyWrapper) validateEntityPermissionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityPermissionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityPermissionInfo); i++ {
		if swag.IsZero(m.EntityPermissionInfo[i]) { // not required
			continue
		}

		if m.EntityPermissionInfo[i] != nil {
			if err := m.EntityPermissionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entityPermissionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entityPermissionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityHierarchyWrapper) validateObjectProtectionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectProtectionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ObjectProtectionInfo); i++ {
		if swag.IsZero(m.ObjectProtectionInfo[i]) { // not required
			continue
		}

		if m.ObjectProtectionInfo[i] != nil {
			if err := m.ObjectProtectionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectProtectionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectProtectionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this entity hierarchy wrapper based on the context it is used
func (m *EntityHierarchyWrapper) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntityHierarchy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityPaginationParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityPermissionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectProtectionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityHierarchyWrapper) contextValidateEntityHierarchy(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityHierarchy != nil {

		if swag.IsZero(m.EntityHierarchy) { // not required
			return nil
		}

		if err := m.EntityHierarchy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityHierarchy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityHierarchy")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyWrapper) contextValidateEntityPaginationParams(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityPaginationParams != nil {

		if swag.IsZero(m.EntityPaginationParams) { // not required
			return nil
		}

		if err := m.EntityPaginationParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityPaginationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityPaginationParams")
			}
			return err
		}
	}

	return nil
}

func (m *EntityHierarchyWrapper) contextValidateEntityPermissionInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityPermissionInfo); i++ {

		if m.EntityPermissionInfo[i] != nil {

			if swag.IsZero(m.EntityPermissionInfo[i]) { // not required
				return nil
			}

			if err := m.EntityPermissionInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entityPermissionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entityPermissionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityHierarchyWrapper) contextValidateObjectProtectionInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ObjectProtectionInfo); i++ {

		if m.ObjectProtectionInfo[i] != nil {

			if swag.IsZero(m.ObjectProtectionInfo[i]) { // not required
				return nil
			}

			if err := m.ObjectProtectionInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectProtectionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectProtectionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityHierarchyWrapper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityHierarchyWrapper) UnmarshalBinary(b []byte) error {
	var res EntityHierarchyWrapper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
