// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QuiesceRule Quiescing rule to define how to quiesce and unquiesce a workload.
//
// swagger:model QuiesceRule
type QuiesceRule struct {

	// List of labels to identify pods belonging to a given workload resource
	// (deployment, daemonset etc). Each label will be in format "key: value".
	PodSelectorLabels map[string]string `json:"podSelectorLabels,omitempty"`

	// Hooks to execute after snapshot complete for all volumes associated with
	// the pods.
	PostSnapshotHooks []*QuiesceRuleHook `json:"postSnapshotHooks"`

	// Hooks to execute before snapshotting PVCs associated with the pods.
	PreSnapshotHooks []*QuiesceRuleHook `json:"preSnapshotHooks"`

	// Unique identifier for every quiescing group. This must be unique within a
	// given entity in a protection group.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this quiesce rule
func (m *QuiesceRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostSnapshotHooks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreSnapshotHooks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuiesceRule) validatePostSnapshotHooks(formats strfmt.Registry) error {
	if swag.IsZero(m.PostSnapshotHooks) { // not required
		return nil
	}

	for i := 0; i < len(m.PostSnapshotHooks); i++ {
		if swag.IsZero(m.PostSnapshotHooks[i]) { // not required
			continue
		}

		if m.PostSnapshotHooks[i] != nil {
			if err := m.PostSnapshotHooks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postSnapshotHooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postSnapshotHooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuiesceRule) validatePreSnapshotHooks(formats strfmt.Registry) error {
	if swag.IsZero(m.PreSnapshotHooks) { // not required
		return nil
	}

	for i := 0; i < len(m.PreSnapshotHooks); i++ {
		if swag.IsZero(m.PreSnapshotHooks[i]) { // not required
			continue
		}

		if m.PreSnapshotHooks[i] != nil {
			if err := m.PreSnapshotHooks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preSnapshotHooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preSnapshotHooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this quiesce rule based on the context it is used
func (m *QuiesceRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostSnapshotHooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreSnapshotHooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuiesceRule) contextValidatePostSnapshotHooks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PostSnapshotHooks); i++ {

		if m.PostSnapshotHooks[i] != nil {

			if swag.IsZero(m.PostSnapshotHooks[i]) { // not required
				return nil
			}

			if err := m.PostSnapshotHooks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postSnapshotHooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postSnapshotHooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuiesceRule) contextValidatePreSnapshotHooks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreSnapshotHooks); i++ {

		if m.PreSnapshotHooks[i] != nil {

			if swag.IsZero(m.PreSnapshotHooks[i]) { // not required
				return nil
			}

			if err := m.PreSnapshotHooks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preSnapshotHooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preSnapshotHooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuiesceRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuiesceRule) UnmarshalBinary(b []byte) error {
	var res QuiesceRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
