// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleBackupJobParams Oracle Backup Enviroment Parameters.
//
// Message to capture any additional backup params specific to Oracle.
//
// swagger:model OracleBackupJobParams
type OracleBackupJobParams struct {

	// Time in seconds after which the full backup of the database in given
	// backup job should be auto-killed.
	// If set to -1, then the backup will run until completion.
	FullAutoKillTimeoutSecs *int64 `json:"fullAutoKillTimeoutSecs,omitempty"`

	// Time in seconds after which the incremental backup of the database in
	// given backup job should be auto-killed.
	// If set to -1, then the backup will run until completion.
	IncrAutoKillTimeoutSecs *int64 `json:"incrAutoKillTimeoutSecs,omitempty"`

	// Time in seconds after which the log backup of the database in given backup
	// job should be auto-killed.
	// If set to -1, then the backup will run until completion.
	LogAutoKillTimeoutSecs *int64 `json:"logAutoKillTimeoutSecs,omitempty"`

	// Indicates whether the mountpoints created while backing up Oracle DBs
	// should be persisted. If this is set to 'false' all Oracle views mounted to
	// the hosts will be unmounted at the end.
	// Note: This parameter is for the entire Job. For overriding persistence of
	// mountpoints for a subset of Oracle hosts within the job,
	// refer OracleSourceParams.
	PersistMountpoints *bool `json:"persistMountpoints,omitempty"`

	// Indicates the vlan preference that is selected by the user for doing
	// backup.
	VlanParams *VlanParams `json:"vlanParams,omitempty"`
}

// Validate validates this oracle backup job params
func (m *OracleBackupJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleBackupJobParams) validateVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParams) { // not required
		return nil
	}

	if m.VlanParams != nil {
		if err := m.VlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle backup job params based on the context it is used
func (m *OracleBackupJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleBackupJobParams) contextValidateVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParams != nil {

		if swag.IsZero(m.VlanParams) { // not required
			return nil
		}

		if err := m.VlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleBackupJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleBackupJobParams) UnmarshalBinary(b []byte) error {
	var res OracleBackupJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
