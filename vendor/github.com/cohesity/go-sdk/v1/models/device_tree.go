// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceTree A logical volume is built on a tree where leaves are the slices of
// partitions (PartitionSlice) defined below and intermediate nodes are
// assembled by combining nodes in some mode (linear layout, striped, mirrored,
// RAID etc).
// A DeviceTree is a block device formed by combining one or more Devices
// using a combining strategy.
//
// swagger:model DeviceTree
type DeviceTree struct {

	// child vec
	ChildVec []*DeviceTreeChildDevice `json:"childVec"`

	// Internal device identifier of the device to be activated as a thin volume.
	DeviceID *int64 `json:"deviceId,omitempty"`

	// The length of this device. This should match the length which is
	// computable based on children and combining strategy.
	//
	// e.g. if there is only one partition slice in an LVM volume, 'length' in
	// the partition slice is equal to 'device_length'.
	DeviceLength *int64 `json:"deviceLength,omitempty"`

	// In case data is striped, this represents the length of the stripe.
	// The number of stripes is defined by the size of child_vec above.
	StripeSize *int32 `json:"stripeSize,omitempty"`

	// Chunk size. Only populated if device type is thin pool.
	ThinPoolChunkSize *int64 `json:"thinPoolChunkSize,omitempty"`

	// How to combine the children.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this device tree
func (m *DeviceTree) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceTree) validateChildVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildVec); i++ {
		if swag.IsZero(m.ChildVec[i]) { // not required
			continue
		}

		if m.ChildVec[i] != nil {
			if err := m.ChildVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this device tree based on the context it is used
func (m *DeviceTree) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceTree) contextValidateChildVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChildVec); i++ {

		if m.ChildVec[i] != nil {

			if swag.IsZero(m.ChildVec[i]) { // not required
				return nil
			}

			if err := m.ChildVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceTree) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceTree) UnmarshalBinary(b []byte) error {
	var res DeviceTree
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
