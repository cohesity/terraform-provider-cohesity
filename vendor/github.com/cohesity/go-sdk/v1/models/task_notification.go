// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskNotification Task Notification.
//
// Structure that captures Task Notifications for a user.
//
// swagger:model TaskNotification
type TaskNotification struct {

	// The notification details of Agent upgrade Task.
	AgentUpgradeTask *AgentUpgradeTaskInfo `json:"agentUpgradeTask,omitempty"`

	// The notifications details of Analysis Task.
	AnalysisTask *AnalysisTaskInfo `json:"analysisTask,omitempty"`

	// The notifications details of Backup Task.
	BackupTask *BackupTaskInfo `json:"backupTask,omitempty"`

	// The notifications details of BulkInstall Task.
	BulkInstallAppTask *BulkInstallAppTaskInfo `json:"bulkInstallAppTask,omitempty"`

	// The notification details of Clone Task.
	CloneTask *CloneTaskInfo `json:"cloneTask,omitempty"`

	// Timestamp at which the notification was created.
	CreatedTimeSecs *int64 `json:"createdTimeSecs,omitempty"`

	// Description holds the actual notification text generated for
	// the event.
	Description *string `json:"description,omitempty"`

	// Dismissed keeps track of whether a notification has been seen
	// or not. User may choose to dismiss individual event or all
	// notifications at once. Nil or 0 value represents false.
	Dismissed *bool `json:"dismissed,omitempty"`

	// Timestamp at which user dismissed this notification event.
	DismissedTimeSecs *int64 `json:"dismissedTimeSecs,omitempty"`

	// The notification details of Field Message Task.
	FieldMessageTask *BasicTaskInfo `json:"fieldMessageTask,omitempty"`

	// id identifies a user notification event uniquely.
	// This can also be used to dismiss individual notifications.
	ID *string `json:"id,omitempty"`

	// The notification details of Recovery Task.
	RecoveryTask *RecoveryTaskInfo `json:"recoveryTask,omitempty"`

	// Status of the task.
	// Status of the task.
	// 'kSuccess' indicates that task completed successfully.
	// 'kError' indicates that task encountered errors.
	// Enum: ["kSuccess","kError"]
	Status *string `json:"status,omitempty"`

	// Task type denotes which type of task this notification is for.
	// This param is used to reflect the taskType.
	// 'Restore' notification type is generated upon completion of Restore tasks.
	// 'Clone' notification type is generated upon completion of Clone tasks.
	// 'BackupNow' notification type is generated upon completion of Backup tasks.
	// 'FieldMessage' notification type is generated when field message from
	// Cohesity support is created.
	// 'bulkInstallApp' notification type is generated from bulk install app
	// 'tiering' notification type is generated upon completion of tiering tasks.
	// 'analysis' notification type is generated upon completion of analysis tasks.
	// 'agentUpgradeTask' notification type is generated upon completion of upgrade
	// task.
	// Enum: ["restore","clone","backupNow","fieldMessage","bulkInstallApp","tiering","analysis","agentUpgradeTask"]
	TaskType *string `json:"taskType,omitempty"`

	// The notifications details of Tiering Task.
	TieringTask *TieringTaskInfo `json:"tieringTask,omitempty"`

	// Visited keeps track of whether a notification has been seen or not.
	Visited *bool `json:"visited,omitempty"`

	// Timestamp at which user visited this notification event.
	VisitedTimeSecs *int64 `json:"visitedTimeSecs,omitempty"`
}

// Validate validates this task notification
func (m *TaskNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentUpgradeTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnalysisTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBulkInstallAppTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloneTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldMessageTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTieringTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskNotification) validateAgentUpgradeTask(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentUpgradeTask) { // not required
		return nil
	}

	if m.AgentUpgradeTask != nil {
		if err := m.AgentUpgradeTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentUpgradeTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentUpgradeTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) validateAnalysisTask(formats strfmt.Registry) error {
	if swag.IsZero(m.AnalysisTask) { // not required
		return nil
	}

	if m.AnalysisTask != nil {
		if err := m.AnalysisTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analysisTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analysisTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) validateBackupTask(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupTask) { // not required
		return nil
	}

	if m.BackupTask != nil {
		if err := m.BackupTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) validateBulkInstallAppTask(formats strfmt.Registry) error {
	if swag.IsZero(m.BulkInstallAppTask) { // not required
		return nil
	}

	if m.BulkInstallAppTask != nil {
		if err := m.BulkInstallAppTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bulkInstallAppTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bulkInstallAppTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) validateCloneTask(formats strfmt.Registry) error {
	if swag.IsZero(m.CloneTask) { // not required
		return nil
	}

	if m.CloneTask != nil {
		if err := m.CloneTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloneTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) validateFieldMessageTask(formats strfmt.Registry) error {
	if swag.IsZero(m.FieldMessageTask) { // not required
		return nil
	}

	if m.FieldMessageTask != nil {
		if err := m.FieldMessageTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fieldMessageTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fieldMessageTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) validateRecoveryTask(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryTask) { // not required
		return nil
	}

	if m.RecoveryTask != nil {
		if err := m.RecoveryTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveryTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveryTask")
			}
			return err
		}
	}

	return nil
}

var taskNotificationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSuccess","kError"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskNotificationTypeStatusPropEnum = append(taskNotificationTypeStatusPropEnum, v)
	}
}

const (

	// TaskNotificationStatusKSuccess captures enum value "kSuccess"
	TaskNotificationStatusKSuccess string = "kSuccess"

	// TaskNotificationStatusKError captures enum value "kError"
	TaskNotificationStatusKError string = "kError"
)

// prop value enum
func (m *TaskNotification) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskNotificationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskNotification) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var taskNotificationTypeTaskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["restore","clone","backupNow","fieldMessage","bulkInstallApp","tiering","analysis","agentUpgradeTask"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskNotificationTypeTaskTypePropEnum = append(taskNotificationTypeTaskTypePropEnum, v)
	}
}

const (

	// TaskNotificationTaskTypeRestore captures enum value "restore"
	TaskNotificationTaskTypeRestore string = "restore"

	// TaskNotificationTaskTypeClone captures enum value "clone"
	TaskNotificationTaskTypeClone string = "clone"

	// TaskNotificationTaskTypeBackupNow captures enum value "backupNow"
	TaskNotificationTaskTypeBackupNow string = "backupNow"

	// TaskNotificationTaskTypeFieldMessage captures enum value "fieldMessage"
	TaskNotificationTaskTypeFieldMessage string = "fieldMessage"

	// TaskNotificationTaskTypeBulkInstallApp captures enum value "bulkInstallApp"
	TaskNotificationTaskTypeBulkInstallApp string = "bulkInstallApp"

	// TaskNotificationTaskTypeTiering captures enum value "tiering"
	TaskNotificationTaskTypeTiering string = "tiering"

	// TaskNotificationTaskTypeAnalysis captures enum value "analysis"
	TaskNotificationTaskTypeAnalysis string = "analysis"

	// TaskNotificationTaskTypeAgentUpgradeTask captures enum value "agentUpgradeTask"
	TaskNotificationTaskTypeAgentUpgradeTask string = "agentUpgradeTask"
)

// prop value enum
func (m *TaskNotification) validateTaskTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskNotificationTypeTaskTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskNotification) validateTaskType(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskTypeEnum("taskType", "body", *m.TaskType); err != nil {
		return err
	}

	return nil
}

func (m *TaskNotification) validateTieringTask(formats strfmt.Registry) error {
	if swag.IsZero(m.TieringTask) { // not required
		return nil
	}

	if m.TieringTask != nil {
		if err := m.TieringTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tieringTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tieringTask")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this task notification based on the context it is used
func (m *TaskNotification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentUpgradeTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnalysisTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBulkInstallAppTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloneTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFieldMessageTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveryTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTieringTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskNotification) contextValidateAgentUpgradeTask(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentUpgradeTask != nil {

		if swag.IsZero(m.AgentUpgradeTask) { // not required
			return nil
		}

		if err := m.AgentUpgradeTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentUpgradeTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentUpgradeTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) contextValidateAnalysisTask(ctx context.Context, formats strfmt.Registry) error {

	if m.AnalysisTask != nil {

		if swag.IsZero(m.AnalysisTask) { // not required
			return nil
		}

		if err := m.AnalysisTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analysisTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analysisTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) contextValidateBackupTask(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupTask != nil {

		if swag.IsZero(m.BackupTask) { // not required
			return nil
		}

		if err := m.BackupTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) contextValidateBulkInstallAppTask(ctx context.Context, formats strfmt.Registry) error {

	if m.BulkInstallAppTask != nil {

		if swag.IsZero(m.BulkInstallAppTask) { // not required
			return nil
		}

		if err := m.BulkInstallAppTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bulkInstallAppTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bulkInstallAppTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) contextValidateCloneTask(ctx context.Context, formats strfmt.Registry) error {

	if m.CloneTask != nil {

		if swag.IsZero(m.CloneTask) { // not required
			return nil
		}

		if err := m.CloneTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloneTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) contextValidateFieldMessageTask(ctx context.Context, formats strfmt.Registry) error {

	if m.FieldMessageTask != nil {

		if swag.IsZero(m.FieldMessageTask) { // not required
			return nil
		}

		if err := m.FieldMessageTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fieldMessageTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fieldMessageTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) contextValidateRecoveryTask(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoveryTask != nil {

		if swag.IsZero(m.RecoveryTask) { // not required
			return nil
		}

		if err := m.RecoveryTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveryTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveryTask")
			}
			return err
		}
	}

	return nil
}

func (m *TaskNotification) contextValidateTieringTask(ctx context.Context, formats strfmt.Registry) error {

	if m.TieringTask != nil {

		if swag.IsZero(m.TieringTask) { // not required
			return nil
		}

		if err := m.TieringTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tieringTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tieringTask")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskNotification) UnmarshalBinary(b []byte) error {
	var res TaskNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
