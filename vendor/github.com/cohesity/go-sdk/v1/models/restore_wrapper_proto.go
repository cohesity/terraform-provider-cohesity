// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreWrapperProto A wrapper proto to put together all the restore-related protos. This will be
// used for WAL-logging, and to send restore-related information back to the
// user.
//
// If this message is a checkpoint record in WAL-logging or if this message is
// used to send restore task info back to the user, it will contain the info of
// the restore job/task and the list of all destroy tasks (only when the record
// is for a restore task of type clone) associated with it. If this message is
// delta record, it will contain the state mutation for one of individual
// restore job, restore task and individual destroy task.
//
// swagger:model RestoreWrapperProto
type RestoreWrapperProto struct {

	// For a restore task of type 'Clone', this field contains the info of the
	// destroy task(s).
	DestroyClonedTaskStateVec []*DestroyClonedTaskStateProto `json:"destroyClonedTaskStateVec"`

	// For an application restore task, this field contains the info of the
	// application owner's restore task if any. For example, a SQL restore
	// operation may also restore its owner VM, and this field will contain
	// the VM's restore task.
	//
	// Note that this field is only populated for Iris in response to
	// 'GetRestoreTasksArg' RPC.
	OwnerRestoreWrapperProto *RestoreWrapperProto `json:"ownerRestoreWrapperProto,omitempty"`

	// Contains information of the refresh tasks for a clone
	PerformRefreshTaskStateVec []*PerformRestoreTaskStateProto `json:"performRefreshTaskStateVec"`

	// Contains the information about a restore job. When the info of the
	// restore job is send to the Iris, we will transform this proto to the
	// above 'perform_restore_task_state' so that Iris has to deal with only one
	// kind of restore proto.
	PerformRestoreJobState *PerformRestoreJobStateProto `json:"performRestoreJobState,omitempty"`

	// Contains information about a restore task.
	PerformRestoreTaskState *PerformRestoreTaskStateProto `json:"performRestoreTaskState,omitempty"`

	// If this restore has sub tasks, the following field will get populated
	// with the wrapper proto of all of its sub-tasks.
	//
	// Note that this field is only populated for Iris in response to
	// 'GetRestoreTasksArg' RPC. It is not persisted in Magneto's WAL.
	//
	// List of environments that use this field:
	// kSQL : Used for multi-stage SQL restore that supports a hot-standy.
	RestoreSubTaskWrapperProtoVec []interface{} `json:"restoreSubTaskWrapperProtoVec"`
}

// Validate validates this restore wrapper proto
func (m *RestoreWrapperProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestroyClonedTaskStateVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerRestoreWrapperProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformRefreshTaskStateVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformRestoreJobState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformRestoreTaskState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreWrapperProto) validateDestroyClonedTaskStateVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DestroyClonedTaskStateVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DestroyClonedTaskStateVec); i++ {
		if swag.IsZero(m.DestroyClonedTaskStateVec[i]) { // not required
			continue
		}

		if m.DestroyClonedTaskStateVec[i] != nil {
			if err := m.DestroyClonedTaskStateVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destroyClonedTaskStateVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("destroyClonedTaskStateVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreWrapperProto) validateOwnerRestoreWrapperProto(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerRestoreWrapperProto) { // not required
		return nil
	}

	if m.OwnerRestoreWrapperProto != nil {
		if err := m.OwnerRestoreWrapperProto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerRestoreWrapperProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerRestoreWrapperProto")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreWrapperProto) validatePerformRefreshTaskStateVec(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformRefreshTaskStateVec) { // not required
		return nil
	}

	for i := 0; i < len(m.PerformRefreshTaskStateVec); i++ {
		if swag.IsZero(m.PerformRefreshTaskStateVec[i]) { // not required
			continue
		}

		if m.PerformRefreshTaskStateVec[i] != nil {
			if err := m.PerformRefreshTaskStateVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("performRefreshTaskStateVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("performRefreshTaskStateVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreWrapperProto) validatePerformRestoreJobState(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformRestoreJobState) { // not required
		return nil
	}

	if m.PerformRestoreJobState != nil {
		if err := m.PerformRestoreJobState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performRestoreJobState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performRestoreJobState")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreWrapperProto) validatePerformRestoreTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformRestoreTaskState) { // not required
		return nil
	}

	if m.PerformRestoreTaskState != nil {
		if err := m.PerformRestoreTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performRestoreTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performRestoreTaskState")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore wrapper proto based on the context it is used
func (m *RestoreWrapperProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestroyClonedTaskStateVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerRestoreWrapperProto(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformRefreshTaskStateVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformRestoreJobState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformRestoreTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreWrapperProto) contextValidateDestroyClonedTaskStateVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DestroyClonedTaskStateVec); i++ {

		if m.DestroyClonedTaskStateVec[i] != nil {

			if swag.IsZero(m.DestroyClonedTaskStateVec[i]) { // not required
				return nil
			}

			if err := m.DestroyClonedTaskStateVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destroyClonedTaskStateVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("destroyClonedTaskStateVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreWrapperProto) contextValidateOwnerRestoreWrapperProto(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerRestoreWrapperProto != nil {

		if swag.IsZero(m.OwnerRestoreWrapperProto) { // not required
			return nil
		}

		if err := m.OwnerRestoreWrapperProto.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerRestoreWrapperProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerRestoreWrapperProto")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreWrapperProto) contextValidatePerformRefreshTaskStateVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PerformRefreshTaskStateVec); i++ {

		if m.PerformRefreshTaskStateVec[i] != nil {

			if swag.IsZero(m.PerformRefreshTaskStateVec[i]) { // not required
				return nil
			}

			if err := m.PerformRefreshTaskStateVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("performRefreshTaskStateVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("performRefreshTaskStateVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreWrapperProto) contextValidatePerformRestoreJobState(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformRestoreJobState != nil {

		if swag.IsZero(m.PerformRestoreJobState) { // not required
			return nil
		}

		if err := m.PerformRestoreJobState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performRestoreJobState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performRestoreJobState")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreWrapperProto) contextValidatePerformRestoreTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformRestoreTaskState != nil {

		if swag.IsZero(m.PerformRestoreTaskState) { // not required
			return nil
		}

		if err := m.PerformRestoreTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performRestoreTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performRestoreTaskState")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreWrapperProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreWrapperProto) UnmarshalBinary(b []byte) error {
	var res RestoreWrapperProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
