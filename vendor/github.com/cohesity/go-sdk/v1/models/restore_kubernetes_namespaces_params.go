// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestoreKubernetesNamespacesParams This message defines the Kubernetes specific namespace restore params.
//
// swagger:model RestoreKubernetesNamespacesParams
type RestoreKubernetesNamespacesParams struct {

	// Cluster id of the cluster which performed the backup.
	BackupClusterID *int64 `json:"backupClusterId,omitempty"`

	// Backup job that needs to be used for recovering the namespace.
	BackupJobName *string `json:"backupJobName,omitempty"`

	// This field is optional for a kRecoverNamespaces task if the namespace is
	// being restored to its original parent source. If not specified, restored
	// namespace will be attached to its original cluster. This field is
	// mandatory if the namespace is being restored to a different parent source.
	ClusterEntity *EntityProto `json:"clusterEntity,omitempty"`

	// Cluster software version.
	ClusterSoftwareVersion *string `json:"clusterSoftwareVersion,omitempty"`

	// Indicates the kubernetes service type to use.
	DatamoverServiceType *int32 `json:"datamoverServiceType,omitempty"`

	// List of PVCs that user requested to be excluded while doing restore.
	ExcludedPvcVec []string `json:"excludedPvcVec"`

	// Container image used to mounting PVCs in temp pods.
	InitContainerImage *string `json:"initContainerImage,omitempty"`

	// This indicates if magneto_kubernetes_enable_protection_using_datamover is
	// true and the flag is enabled in the feature enabler.
	IsProtectionUsingDatamoverEnabled *bool `json:"isProtectionUsingDatamoverEnabled,omitempty"`

	// Namespace in which restore job will be created in K8s cluster.
	ManagementNamespace *string `json:"managementNamespace,omitempty"`

	// Information about pods in the namespace which was backed up.
	PodMetadataVec []*PodMetadata `json:"podMetadataVec"`

	// List of PVCs (PVC names) that were successfully backed up.
	PvcBackupSuccessVec []string `json:"pvcBackupSuccessVec"`

	// Map of PVC (names) to PvcInfo discovered in the backed up
	// namespace.
	PvcInfoMap map[string]PvcInfo `json:"pvcInfoMap,omitempty"`

	// By default, namespaces are restored with their original name. This field
	// can be used to specify the transformation ( i.e prefix/suffix) to be
	// applied to the source namespace to derive the new name of the restored
	// namespace.
	RenameRestoredObjectParam *RenameObjectParamProto `json:"renameRestoredObjectParam,omitempty"`

	// S3 account ID that was used to register the source.
	S3AccountID *string `json:"s3AccountId,omitempty"`

	// Indicates the VLAN information to use for restore.
	VlanParams *VlanParams `json:"vlanParams,omitempty"`
}

// Validate validates this restore kubernetes namespaces params
func (m *RestoreKubernetesNamespacesParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodMetadataVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePvcInfoMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredObjectParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreKubernetesNamespacesParams) validateClusterEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterEntity) { // not required
		return nil
	}

	if m.ClusterEntity != nil {
		if err := m.ClusterEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreKubernetesNamespacesParams) validatePodMetadataVec(formats strfmt.Registry) error {
	if swag.IsZero(m.PodMetadataVec) { // not required
		return nil
	}

	for i := 0; i < len(m.PodMetadataVec); i++ {
		if swag.IsZero(m.PodMetadataVec[i]) { // not required
			continue
		}

		if m.PodMetadataVec[i] != nil {
			if err := m.PodMetadataVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("podMetadataVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("podMetadataVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreKubernetesNamespacesParams) validatePvcInfoMap(formats strfmt.Registry) error {
	if swag.IsZero(m.PvcInfoMap) { // not required
		return nil
	}

	for k := range m.PvcInfoMap {

		if err := validate.Required("pvcInfoMap"+"."+k, "body", m.PvcInfoMap[k]); err != nil {
			return err
		}
		if val, ok := m.PvcInfoMap[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pvcInfoMap" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pvcInfoMap" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreKubernetesNamespacesParams) validateRenameRestoredObjectParam(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredObjectParam) { // not required
		return nil
	}

	if m.RenameRestoredObjectParam != nil {
		if err := m.RenameRestoredObjectParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreKubernetesNamespacesParams) validateVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParams) { // not required
		return nil
	}

	if m.VlanParams != nil {
		if err := m.VlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore kubernetes namespaces params based on the context it is used
func (m *RestoreKubernetesNamespacesParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePodMetadataVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePvcInfoMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredObjectParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreKubernetesNamespacesParams) contextValidateClusterEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterEntity != nil {

		if swag.IsZero(m.ClusterEntity) { // not required
			return nil
		}

		if err := m.ClusterEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreKubernetesNamespacesParams) contextValidatePodMetadataVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PodMetadataVec); i++ {

		if m.PodMetadataVec[i] != nil {

			if swag.IsZero(m.PodMetadataVec[i]) { // not required
				return nil
			}

			if err := m.PodMetadataVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("podMetadataVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("podMetadataVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreKubernetesNamespacesParams) contextValidatePvcInfoMap(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.PvcInfoMap {

		if val, ok := m.PvcInfoMap[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *RestoreKubernetesNamespacesParams) contextValidateRenameRestoredObjectParam(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredObjectParam != nil {

		if swag.IsZero(m.RenameRestoredObjectParam) { // not required
			return nil
		}

		if err := m.RenameRestoredObjectParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreKubernetesNamespacesParams) contextValidateVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParams != nil {

		if swag.IsZero(m.VlanParams) { // not required
			return nil
		}

		if err := m.VlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreKubernetesNamespacesParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreKubernetesNamespacesParams) UnmarshalBinary(b []byte) error {
	var res RestoreKubernetesNamespacesParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
