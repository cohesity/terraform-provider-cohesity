// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourcePoolResult ResourcePoolResult is the struct for listing a resource pool and its
// parent Datacenter.
//
// swagger:model ResourcePoolResult
type ResourcePoolResult struct {

	// Cluster is the parent cluster compute resource for the resource pool.
	Cluster *PrivateEntityProto `json:"cluster,omitempty"`

	// Datacenter is the parent datacenter for the resource pool.
	DataCenter *PrivateEntityProto `json:"dataCenter,omitempty"`

	// ResourcePool is the entity for the resource pool.
	ResourcePool *PrivateEntityProto `json:"resourcePool,omitempty"`
}

// Validate validates this resource pool result
func (m *ResourcePoolResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcePoolResult) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePoolResult) validateDataCenter(formats strfmt.Registry) error {
	if swag.IsZero(m.DataCenter) { // not required
		return nil
	}

	if m.DataCenter != nil {
		if err := m.DataCenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataCenter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataCenter")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePoolResult) validateResourcePool(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePool) { // not required
		return nil
	}

	if m.ResourcePool != nil {
		if err := m.ResourcePool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePool")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resource pool result based on the context it is used
func (m *ResourcePoolResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataCenter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourcePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcePoolResult) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {

		if swag.IsZero(m.Cluster) { // not required
			return nil
		}

		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePoolResult) contextValidateDataCenter(ctx context.Context, formats strfmt.Registry) error {

	if m.DataCenter != nil {

		if swag.IsZero(m.DataCenter) { // not required
			return nil
		}

		if err := m.DataCenter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataCenter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataCenter")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcePoolResult) contextValidateResourcePool(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourcePool != nil {

		if swag.IsZero(m.ResourcePool) { // not required
			return nil
		}

		if err := m.ResourcePool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePool")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourcePoolResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcePoolResult) UnmarshalBinary(b []byte) error {
	var res ResourcePoolResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
