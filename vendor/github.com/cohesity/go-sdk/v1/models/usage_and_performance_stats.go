// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UsageAndPerformanceStats Usage and Performance Statistics
//
// Provides usage and performance statistics
// for entities such as a disks, Nodes or Clusters.
//
// swagger:model UsageAndPerformanceStats
type UsageAndPerformanceStats struct {

	// Specifies the data read from the protected objects by the Cohesity Cluster
	// before any data reduction using deduplication and compression.
	DataInBytes *int64 `json:"dataInBytes,omitempty"`

	// Morphed Usage before data is replicated to other nodes as per RF or
	// Erasure Coding policy.
	DataInBytesAfterReduction *int64 `json:"dataInBytesAfterReduction,omitempty"`

	// Specifies the minimum usable capacity available
	// after erasure coding or RF. This will only be populated for cluster.
	// If a cluster has multiple Domains (View Boxes) with different RF or
	// erasure coding, this metric will be computed using the scheme that will
	// provide least saving.
	MinUsablePhysicalCapacityBytes *int64 `json:"minUsablePhysicalCapacityBytes,omitempty"`

	// Provides the total number of bytes read in the last 30 seconds.
	NumBytesRead *int64 `json:"numBytesRead,omitempty"`

	// Provides the total number of bytes written in the last 30 second.
	NumBytesWritten *int64 `json:"numBytesWritten,omitempty"`

	// Provides the total physical capacity in bytes of all the storage devices,
	// after subtracting space reserved for cluster services
	PhysicalCapacityBytes *int64 `json:"physicalCapacityBytes,omitempty"`

	// Provides the number of Read IOs that occurred in the last 30 seconds.
	ReadIos *int64 `json:"readIos,omitempty"`

	// Provides the Read latency in milliseconds for the Read IOs that occurred
	// during the last 30 seconds.
	ReadLatencyMsecs *float64 `json:"readLatencyMsecs,omitempty"`

	// Provides the total available capacity as computed by
	// the Linux 'statfs' command.
	SystemCapacityBytes *int64 `json:"systemCapacityBytes,omitempty"`

	// Provides the usage of bytes, as computed by the Linux 'statfs' command,
	// after the size of the data is reduced by
	// change-block tracking, compression and deduplication.
	SystemUsageBytes *int64 `json:"systemUsageBytes,omitempty"`

	// Provides the usage of bytes, as computed by the Cohesity Cluster,
	// before the size of the data is reduced by
	// change-block tracking, compression and deduplication.
	TotalPhysicalRawUsageBytes *int64 `json:"totalPhysicalRawUsageBytes,omitempty"`

	// Provides the data stored locally, after the data has been reduced by
	// deduplication and compression, including the space required for honoring
	// the resiliency settings (EC/RF).
	TotalPhysicalUsageBytes *int64 `json:"totalPhysicalUsageBytes,omitempty"`

	// Provides the number of Write IOs that occurred in the last 30 seconds.
	WriteIos *int64 `json:"writeIos,omitempty"`

	// Provides the Write latency in milliseconds for the Write IOs that occurred
	// during the last 30 seconds.
	WriteLatencyMsecs *float64 `json:"writeLatencyMsecs,omitempty"`
}

// Validate validates this usage and performance stats
func (m *UsageAndPerformanceStats) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this usage and performance stats based on context it is used
func (m *UsageAndPerformanceStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UsageAndPerformanceStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UsageAndPerformanceStats) UnmarshalBinary(b []byte) error {
	var res UsageAndPerformanceStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
