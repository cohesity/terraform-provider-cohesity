// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataProtectAzureInfo DataProtectAzureInfo holds information about the Data Protect
// subscription in Azure data plane such as if it is active or not.
//
// swagger:model DataProtectAzureInfo
type DataProtectAzureInfo struct {

	// Specifies the information regarding banner to display.
	Banner *EntitlementBannerInfo `json:"banner,omitempty"`

	// Specifies the end date of the subscription.
	EndDate *string `json:"endDate,omitempty"`

	// Specifies whether the dmaas subscription is active.
	IsActive *bool `json:"isActive,omitempty"`

	// Specifies whether the subscription is free trial.
	IsFreeTrial *bool `json:"isFreeTrial,omitempty"`

	// Display name of the Product
	ProductDisplayName *string `json:"productDisplayName,omitempty"`

	// Specifies the quantity of the subscription.
	Quantity *int64 `json:"quantity,omitempty"`

	// Specifies the start date of the subscription.
	StartDate *string `json:"startDate,omitempty"`

	// Specifies the Tiering information for the Data Protect subscription
	Tiering *TieringInfo `json:"tiering,omitempty"`
}

// Validate validates this data protect azure info
func (m *DataProtectAzureInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBanner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTiering(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataProtectAzureInfo) validateBanner(formats strfmt.Registry) error {
	if swag.IsZero(m.Banner) { // not required
		return nil
	}

	if m.Banner != nil {
		if err := m.Banner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("banner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("banner")
			}
			return err
		}
	}

	return nil
}

func (m *DataProtectAzureInfo) validateTiering(formats strfmt.Registry) error {
	if swag.IsZero(m.Tiering) { // not required
		return nil
	}

	if m.Tiering != nil {
		if err := m.Tiering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tiering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tiering")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data protect azure info based on the context it is used
func (m *DataProtectAzureInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBanner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTiering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataProtectAzureInfo) contextValidateBanner(ctx context.Context, formats strfmt.Registry) error {

	if m.Banner != nil {

		if swag.IsZero(m.Banner) { // not required
			return nil
		}

		if err := m.Banner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("banner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("banner")
			}
			return err
		}
	}

	return nil
}

func (m *DataProtectAzureInfo) contextValidateTiering(ctx context.Context, formats strfmt.Registry) error {

	if m.Tiering != nil {

		if swag.IsZero(m.Tiering) { // not required
			return nil
		}

		if err := m.Tiering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tiering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tiering")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataProtectAzureInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataProtectAzureInfo) UnmarshalBinary(b []byte) error {
	var res DataProtectAzureInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
