// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterAuditLog Cluster Audit Log.
//
// Specifies information about a single Cluster audit log.
// When an action (such as pausing a Protection Job) occurs, an audit log is
// generated that provides details about the action.
//
// swagger:model ClusterAuditLog
type ClusterAuditLog struct {

	// Specifies the action that caused the log to be generated.
	Action *string `json:"action,omitempty"`

	// Specifies the information of the cluster.
	ClusterInfo *string `json:"clusterInfo,omitempty"`

	// Specifies more information about the action.
	Details *string `json:"details,omitempty"`

	// Specifies the domain of the user who caused the action
	// that generated the log.
	Domain *string `json:"domain,omitempty"`

	// Specifies the id of the entity (object) that the action is invoked on.
	EntityID *string `json:"entityId,omitempty"`

	// Specifies the entity (object) name that the action is invoked on.
	// For example, if a Job called BackupEng is paused, this field
	// returns BackupEng.
	EntityName *string `json:"entityName,omitempty"`

	// Specifies the type of the entity (object) that the action is invoked on.
	// For example, if a Job called BackupEng is paused, this field
	// returns 'Protection Job'.
	EntityType *string `json:"entityType,omitempty"`

	// Specifies the time when the log was generated.
	// The time is specified using a human readable timestamp.
	HumanTimestamp *string `json:"humanTimestamp,omitempty"`

	// Specifies if the log was generated during impersonation.
	Impersonation *bool `json:"impersonation,omitempty"`

	// Specifies the IP address of the user making this action.
	IP *string `json:"ip,omitempty"`

	// Specifies the record after the action is invoked.
	NewRecord *string `json:"newRecord,omitempty"`

	// Specifies the tenant information of the actual user whose action generated
	// the log in case of impersonation.
	OriginalTenant *Tenant `json:"originalTenant,omitempty"`

	// Specifies the record before the action is invoked.
	PreviousRecord *string `json:"previousRecord,omitempty"`

	// Specifies the tenant information of the user whose action generated the log.
	Tenant *Tenant `json:"tenant,omitempty"`

	// Specifies the time when the log was generated.
	// The time is specified using a Unix epoch Timestamp (in microseconds).
	TimestampUsecs *int64 `json:"timestampUsecs,omitempty"`

	// Specifies the user who caused the action that generated the log.
	UserName *string `json:"userName,omitempty"`
}

// Validate validates this cluster audit log
func (m *ClusterAuditLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginalTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterAuditLog) validateOriginalTenant(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalTenant) { // not required
		return nil
	}

	if m.OriginalTenant != nil {
		if err := m.OriginalTenant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalTenant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalTenant")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterAuditLog) validateTenant(formats strfmt.Registry) error {
	if swag.IsZero(m.Tenant) { // not required
		return nil
	}

	if m.Tenant != nil {
		if err := m.Tenant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenant")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster audit log based on the context it is used
func (m *ClusterAuditLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOriginalTenant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterAuditLog) contextValidateOriginalTenant(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalTenant != nil {

		if swag.IsZero(m.OriginalTenant) { // not required
			return nil
		}

		if err := m.OriginalTenant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalTenant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalTenant")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterAuditLog) contextValidateTenant(ctx context.Context, formats strfmt.Registry) error {

	if m.Tenant != nil {

		if swag.IsZero(m.Tenant) { // not required
			return nil
		}

		if err := m.Tenant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenant")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterAuditLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterAuditLog) UnmarshalBinary(b []byte) error {
	var res ClusterAuditLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
