// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisteredEntityParams Contains all params specified by the user while registering the entity.
//
// swagger:model RegisteredEntityParams
type RegisteredEntityParams struct {

	// These params may be specified for Azure entities.
	AzureParams *RegisteredEntityAzureParams `json:"azureParams,omitempty"`

	// Source level list of IP addresses that should not be used.
	//
	// NOTE: For Isilon and Netapp NAS sources it is passed from UI and used by
	// magneto/bridge/proxies to avoid any IO to blacklisted IPs.
	// It can be used by other sources as needed.
	BlacklistedIPAddrs []string `json:"blacklistedIpAddrs"`

	// These params may be specified for cassandra entities.
	CassandraParams *RegisteredEntityCassandraParams `json:"cassandraParams,omitempty"`

	// Source level configuration params.
	ConfigVec []*ConfigurationParams `json:"configVec"`

	// 'network_realm_id' maintains the collection of connector_group_id.
	// Connector group id for the environment. If it is set, Magneto will
	// fetch the bifrost server based on <network_realm_id, connector_group_id>.
	//
	// This field will be deprecated soon, please use connector_group_id
	// instead.
	ConnectorGroupID *int64 `json:"connectorGroupId,omitempty"`

	// These params may be specified for couchbase entities.
	CouchbaseParams *RegisteredEntityCouchbaseParams `json:"couchbaseParams,omitempty"`

	// An optional description of this entity.
	Description *string `json:"description,omitempty"`

	// These params may be specified for generic NAS entities.
	GenericNasParams *RegisteredEntityGenericNasParams `json:"genericNasParams,omitempty"`

	// These params may be specified for hbase entities.
	HbaseParams *RegisteredEntityHBaseParams `json:"hbaseParams,omitempty"`

	// These params may be specified for hdfs entities.
	HdfsParams *RegisteredEntityHdfsParams `json:"hdfsParams,omitempty"`

	// These params may be specified for hive entities.
	HiveParams *RegisteredEntityHiveParams `json:"hiveParams,omitempty"`

	// If this entity has storage array snapshot enabled or not.
	IsStorageArraySnapshotEnabled *bool `json:"isStorageArraySnapshotEnabled,omitempty"`

	// These params may be specified for Isilon entities.
	IsilonParams *RegisteredEntityIsilonParams `json:"isilonParams,omitempty"`

	// Extra parameters needed for K8s registration.
	KubernetesParams *RegisteredEntityKubernetesParams `json:"kubernetesParams,omitempty"`

	// These params may be specified for mongodb entities.
	MongodbParams *RegisteredEntityMongoDBParams `json:"mongodbParams,omitempty"`

	// This is set to the id of the network-realm from where this source is
	// reachable. This should only be set for a source being registered by a
	// tenant user.
	//
	// This field will be deprecated soon, please use network_realm_info_vec
	// instead.
	NetworkRealmID *int64 `json:"networkRealmId,omitempty"`

	// Details about the network realm from where this source is reachable. This
	// should only be set for a source being registered by a tenant user.
	// This can also have network realm for non root entities, in these cases we
	// should prefer using them instead of root's realm.
	NetworkRealmInfoVec []*NetworkRealmInfo `json:"networkRealmInfoVec"`

	// These params may be specified for O365 entities.
	O365Params *RegisteredEntityO365Params `json:"o365Params,omitempty"`

	// These params may be specified for physical entities.
	PhysicalParams *RegisteredEntityPhysicalParams `json:"physicalParams,omitempty"`

	// These params may be specified for Sfdc entities.
	SfdcParams *RegisteredEntitySfdcParams `json:"sfdcParams,omitempty"`

	// An optional space usage policy that can be applied to this entity.
	SpaceUsagePolicy *SpaceUsagePolicy `json:"spaceUsagePolicy,omitempty"`

	// An optional throttling policy that should be applied to this entity.
	ThrottlingPolicy *ThrottlingPolicy `json:"throttlingPolicy,omitempty"`

	// These params may be specified for uda entities.
	UdaParams *RegisteredEntityUdaParams `json:"udaParams,omitempty"`

	// Contains the VLAN parameters specified by the user which will be used for
	// taking the backup or restore.
	//
	// NOTE: This is only applicable for Physical hosts/cluster running Oracle
	// but can be utilized by other sources too.
	// During restore, user can override the same within 'restore_vlan_params'
	// in 'CreateRestoreTaskArg'.
	VlanParams *VlanParams `json:"vlanParams,omitempty"`

	// These params may be specified for VMware entities.
	VmwareParams *RegisteredEntityVMwareParams `json:"vmwareParams,omitempty"`

	// Source level list of IP addresses that should be used exclusively.
	WhitelistedIPAddrs []string `json:"whitelistedIpAddrs"`
}

// Validate validates this registered entity params
func (m *RegisteredEntityParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzureParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouchbaseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericNasParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkRealmInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO365Params(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpaceUsagePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityParams) validateAzureParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureParams) { // not required
		return nil
	}

	if m.AzureParams != nil {
		if err := m.AzureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateCassandraParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraParams) { // not required
		return nil
	}

	if m.CassandraParams != nil {
		if err := m.CassandraParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateConfigVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigVec); i++ {
		if swag.IsZero(m.ConfigVec[i]) { // not required
			continue
		}

		if m.ConfigVec[i] != nil {
			if err := m.ConfigVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityParams) validateCouchbaseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CouchbaseParams) { // not required
		return nil
	}

	if m.CouchbaseParams != nil {
		if err := m.CouchbaseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateGenericNasParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GenericNasParams) { // not required
		return nil
	}

	if m.GenericNasParams != nil {
		if err := m.GenericNasParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateHbaseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseParams) { // not required
		return nil
	}

	if m.HbaseParams != nil {
		if err := m.HbaseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateHdfsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsParams) { // not required
		return nil
	}

	if m.HdfsParams != nil {
		if err := m.HdfsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateHiveParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveParams) { // not required
		return nil
	}

	if m.HiveParams != nil {
		if err := m.HiveParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateIsilonParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateKubernetesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesParams) { // not required
		return nil
	}

	if m.KubernetesParams != nil {
		if err := m.KubernetesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateMongodbParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MongodbParams) { // not required
		return nil
	}

	if m.MongodbParams != nil {
		if err := m.MongodbParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateNetworkRealmInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkRealmInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkRealmInfoVec); i++ {
		if swag.IsZero(m.NetworkRealmInfoVec[i]) { // not required
			continue
		}

		if m.NetworkRealmInfoVec[i] != nil {
			if err := m.NetworkRealmInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkRealmInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkRealmInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityParams) validateO365Params(formats strfmt.Registry) error {
	if swag.IsZero(m.O365Params) { // not required
		return nil
	}

	if m.O365Params != nil {
		if err := m.O365Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Params")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validatePhysicalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateSfdcParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcParams) { // not required
		return nil
	}

	if m.SfdcParams != nil {
		if err := m.SfdcParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateSpaceUsagePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.SpaceUsagePolicy) { // not required
		return nil
	}

	if m.SpaceUsagePolicy != nil {
		if err := m.SpaceUsagePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spaceUsagePolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spaceUsagePolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateThrottlingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingPolicy) { // not required
		return nil
	}

	if m.ThrottlingPolicy != nil {
		if err := m.ThrottlingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateUdaParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaParams) { // not required
		return nil
	}

	if m.UdaParams != nil {
		if err := m.UdaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParams) { // not required
		return nil
	}

	if m.VlanParams != nil {
		if err := m.VlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this registered entity params based on the context it is used
func (m *RegisteredEntityParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAzureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCouchbaseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenericNasParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongodbParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkRealmInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateO365Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpaceUsagePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityParams) contextValidateAzureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureParams != nil {

		if swag.IsZero(m.AzureParams) { // not required
			return nil
		}

		if err := m.AzureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateCassandraParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraParams != nil {

		if swag.IsZero(m.CassandraParams) { // not required
			return nil
		}

		if err := m.CassandraParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateConfigVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConfigVec); i++ {

		if m.ConfigVec[i] != nil {

			if swag.IsZero(m.ConfigVec[i]) { // not required
				return nil
			}

			if err := m.ConfigVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateCouchbaseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CouchbaseParams != nil {

		if swag.IsZero(m.CouchbaseParams) { // not required
			return nil
		}

		if err := m.CouchbaseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateGenericNasParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericNasParams != nil {

		if swag.IsZero(m.GenericNasParams) { // not required
			return nil
		}

		if err := m.GenericNasParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateHbaseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseParams != nil {

		if swag.IsZero(m.HbaseParams) { // not required
			return nil
		}

		if err := m.HbaseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateHdfsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsParams != nil {

		if swag.IsZero(m.HdfsParams) { // not required
			return nil
		}

		if err := m.HdfsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateHiveParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveParams != nil {

		if swag.IsZero(m.HiveParams) { // not required
			return nil
		}

		if err := m.HiveParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateKubernetesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesParams != nil {

		if swag.IsZero(m.KubernetesParams) { // not required
			return nil
		}

		if err := m.KubernetesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateMongodbParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MongodbParams != nil {

		if swag.IsZero(m.MongodbParams) { // not required
			return nil
		}

		if err := m.MongodbParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateNetworkRealmInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkRealmInfoVec); i++ {

		if m.NetworkRealmInfoVec[i] != nil {

			if swag.IsZero(m.NetworkRealmInfoVec[i]) { // not required
				return nil
			}

			if err := m.NetworkRealmInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkRealmInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkRealmInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateO365Params(ctx context.Context, formats strfmt.Registry) error {

	if m.O365Params != nil {

		if swag.IsZero(m.O365Params) { // not required
			return nil
		}

		if err := m.O365Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Params")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateSfdcParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcParams != nil {

		if swag.IsZero(m.SfdcParams) { // not required
			return nil
		}

		if err := m.SfdcParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateSpaceUsagePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.SpaceUsagePolicy != nil {

		if swag.IsZero(m.SpaceUsagePolicy) { // not required
			return nil
		}

		if err := m.SpaceUsagePolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spaceUsagePolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spaceUsagePolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateThrottlingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ThrottlingPolicy != nil {

		if swag.IsZero(m.ThrottlingPolicy) { // not required
			return nil
		}

		if err := m.ThrottlingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateUdaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaParams != nil {

		if swag.IsZero(m.UdaParams) { // not required
			return nil
		}

		if err := m.UdaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParams != nil {

		if swag.IsZero(m.VlanParams) { // not required
			return nil
		}

		if err := m.VlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityParams) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredEntityParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredEntityParams) UnmarshalBinary(b []byte) error {
	var res RegisteredEntityParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
