// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FileStatResult Response for a FileStat call.
//
// swagger:model FileStatResult
type FileStatResult struct {

	// Cookie that need to be send while browsing the vm, this should be same as
	// what is passed in VMVolumeInfoResult.
	BrowsingCookie *VMBrowsingCookie `json:"browsingCookie,omitempty"`

	// Status code.
	Error *PrivateErrorProto `json:"error,omitempty"`

	// Stat information for the file.
	FstatInfo *FileStatInfo `json:"fstatInfo,omitempty"`
}

// Validate validates this file stat result
func (m *FileStatResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrowsingCookie(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFstatInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileStatResult) validateBrowsingCookie(formats strfmt.Registry) error {
	if swag.IsZero(m.BrowsingCookie) { // not required
		return nil
	}

	if m.BrowsingCookie != nil {
		if err := m.BrowsingCookie.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("browsingCookie")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("browsingCookie")
			}
			return err
		}
	}

	return nil
}

func (m *FileStatResult) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *FileStatResult) validateFstatInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FstatInfo) { // not required
		return nil
	}

	if m.FstatInfo != nil {
		if err := m.FstatInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fstatInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fstatInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this file stat result based on the context it is used
func (m *FileStatResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBrowsingCookie(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFstatInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileStatResult) contextValidateBrowsingCookie(ctx context.Context, formats strfmt.Registry) error {

	if m.BrowsingCookie != nil {

		if swag.IsZero(m.BrowsingCookie) { // not required
			return nil
		}

		if err := m.BrowsingCookie.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("browsingCookie")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("browsingCookie")
			}
			return err
		}
	}

	return nil
}

func (m *FileStatResult) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *FileStatResult) contextValidateFstatInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FstatInfo != nil {

		if swag.IsZero(m.FstatInfo) { // not required
			return nil
		}

		if err := m.FstatInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fstatInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fstatInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FileStatResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileStatResult) UnmarshalBinary(b []byte) error {
	var res FileStatResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
