// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetCrackedFileRestoreInfoResultFileInfo This message represents all the restore information on one
// file/directory.
//
// swagger:model GetCrackedFileRestoreInfoResult_FileInfo
type GetCrackedFileRestoreInfoResultFileInfo struct {

	// The status code for each file is returned here. If this error is set,
	// it means we fail to get information for this file or file is not present
	// in this instance id.
	FileError *PrivateErrorProto `json:"fileError,omitempty"`

	// The name of the file/directory.
	Filename *string `json:"filename,omitempty"`

	// Whether the file path is directory.
	IsDirectory *bool `json:"isDirectory,omitempty"`

	// Volume information.
	VolumeInfo *PrivateVolumeInfo `json:"volumeInfo,omitempty"`
}

// Validate validates this get cracked file restore info result file info
func (m *GetCrackedFileRestoreInfoResultFileInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCrackedFileRestoreInfoResultFileInfo) validateFileError(formats strfmt.Registry) error {
	if swag.IsZero(m.FileError) { // not required
		return nil
	}

	if m.FileError != nil {
		if err := m.FileError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileError")
			}
			return err
		}
	}

	return nil
}

func (m *GetCrackedFileRestoreInfoResultFileInfo) validateVolumeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeInfo) { // not required
		return nil
	}

	if m.VolumeInfo != nil {
		if err := m.VolumeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get cracked file restore info result file info based on the context it is used
func (m *GetCrackedFileRestoreInfoResultFileInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCrackedFileRestoreInfoResultFileInfo) contextValidateFileError(ctx context.Context, formats strfmt.Registry) error {

	if m.FileError != nil {

		if swag.IsZero(m.FileError) { // not required
			return nil
		}

		if err := m.FileError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileError")
			}
			return err
		}
	}

	return nil
}

func (m *GetCrackedFileRestoreInfoResultFileInfo) contextValidateVolumeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeInfo != nil {

		if swag.IsZero(m.VolumeInfo) { // not required
			return nil
		}

		if err := m.VolumeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCrackedFileRestoreInfoResultFileInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCrackedFileRestoreInfoResultFileInfo) UnmarshalBinary(b []byte) error {
	var res GetCrackedFileRestoreInfoResultFileInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
