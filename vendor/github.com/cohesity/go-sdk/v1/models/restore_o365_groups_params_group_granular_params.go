// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreO365GroupsParamsGroupGranularParams Proto to capture the restore details of a Group.
//
// swagger:model RestoreO365GroupsParams_GroupGranularParams
type RestoreO365GroupsParamsGroupGranularParams struct {

	// The Unique ID of the group.
	GroupID *string `json:"groupId,omitempty"`

	// The restore details of the group mailbox.
	GroupMbxParams *RestoreOutlookParams `json:"groupMbxParams,omitempty"`

	// The restore details of the group site.
	RestoreSiteParams *RestoreSiteParams `json:"restoreSiteParams,omitempty"`
}

// Validate validates this restore o365 groups params group granular params
func (m *RestoreO365GroupsParamsGroupGranularParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupMbxParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreSiteParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreO365GroupsParamsGroupGranularParams) validateGroupMbxParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupMbxParams) { // not required
		return nil
	}

	if m.GroupMbxParams != nil {
		if err := m.GroupMbxParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupMbxParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groupMbxParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreO365GroupsParamsGroupGranularParams) validateRestoreSiteParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreSiteParams) { // not required
		return nil
	}

	if m.RestoreSiteParams != nil {
		if err := m.RestoreSiteParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreSiteParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreSiteParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore o365 groups params group granular params based on the context it is used
func (m *RestoreO365GroupsParamsGroupGranularParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroupMbxParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreSiteParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreO365GroupsParamsGroupGranularParams) contextValidateGroupMbxParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GroupMbxParams != nil {

		if swag.IsZero(m.GroupMbxParams) { // not required
			return nil
		}

		if err := m.GroupMbxParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupMbxParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groupMbxParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreO365GroupsParamsGroupGranularParams) contextValidateRestoreSiteParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreSiteParams != nil {

		if swag.IsZero(m.RestoreSiteParams) { // not required
			return nil
		}

		if err := m.RestoreSiteParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreSiteParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreSiteParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreO365GroupsParamsGroupGranularParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreO365GroupsParamsGroupGranularParams) UnmarshalBinary(b []byte) error {
	var res RestoreO365GroupsParamsGroupGranularParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
