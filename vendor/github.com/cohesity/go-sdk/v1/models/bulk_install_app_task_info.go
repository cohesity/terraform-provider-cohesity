// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkInstallAppTaskInfo Bulk Install App Task Information.
//
// Parameters for a bulk install app task.
//
// swagger:model BulkInstallAppTaskInfo
type BulkInstallAppTaskInfo struct {

	// Job id of the task.
	JobID *string `json:"jobId,omitempty"`

	// Number of machines on which task is started.
	NumMachinesFailed *int32 `json:"numMachinesFailed,omitempty"`

	// Number of machines on which task is started.
	NumMachinesPassed *int32 `json:"numMachinesPassed,omitempty"`

	// Number of machines on which task is started.
	NumMachinesTotal *int32 `json:"numMachinesTotal,omitempty"`

	// Application being registered.
	// This param is used to indicate the app for which the job is created.
	// 'oracle' indicates that the job was created for oracle app.
	// 'msSql' indicates that the job was created for msSql app.
	// 'physical' indicates that the job was created for physical machine.
	// Enum: ["oracle","msSql","physical"]
	RegisteringApp *string `json:"registeringApp,omitempty"`

	// Current state of the task.
	// This param is used to indicate the state of the job created by the bulk
	// install app.
	// 'started' indicates that the job has been started by the user.
	// 'completed' indicates that the job has completed.
	// Enum: ["started","completed"]
	State *string `json:"state,omitempty"`
}

// Validate validates this bulk install app task info
func (m *BulkInstallAppTaskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegisteringApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bulkInstallAppTaskInfoTypeRegisteringAppPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oracle","msSql","physical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bulkInstallAppTaskInfoTypeRegisteringAppPropEnum = append(bulkInstallAppTaskInfoTypeRegisteringAppPropEnum, v)
	}
}

const (

	// BulkInstallAppTaskInfoRegisteringAppOracle captures enum value "oracle"
	BulkInstallAppTaskInfoRegisteringAppOracle string = "oracle"

	// BulkInstallAppTaskInfoRegisteringAppMsSQL captures enum value "msSql"
	BulkInstallAppTaskInfoRegisteringAppMsSQL string = "msSql"

	// BulkInstallAppTaskInfoRegisteringAppPhysical captures enum value "physical"
	BulkInstallAppTaskInfoRegisteringAppPhysical string = "physical"
)

// prop value enum
func (m *BulkInstallAppTaskInfo) validateRegisteringAppEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bulkInstallAppTaskInfoTypeRegisteringAppPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BulkInstallAppTaskInfo) validateRegisteringApp(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteringApp) { // not required
		return nil
	}

	// value enum
	if err := m.validateRegisteringAppEnum("registeringApp", "body", *m.RegisteringApp); err != nil {
		return err
	}

	return nil
}

var bulkInstallAppTaskInfoTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["started","completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bulkInstallAppTaskInfoTypeStatePropEnum = append(bulkInstallAppTaskInfoTypeStatePropEnum, v)
	}
}

const (

	// BulkInstallAppTaskInfoStateStarted captures enum value "started"
	BulkInstallAppTaskInfoStateStarted string = "started"

	// BulkInstallAppTaskInfoStateCompleted captures enum value "completed"
	BulkInstallAppTaskInfoStateCompleted string = "completed"
)

// prop value enum
func (m *BulkInstallAppTaskInfo) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bulkInstallAppTaskInfoTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BulkInstallAppTaskInfo) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bulk install app task info based on context it is used
func (m *BulkInstallAppTaskInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BulkInstallAppTaskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkInstallAppTaskInfo) UnmarshalBinary(b []byte) error {
	var res BulkInstallAppTaskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
