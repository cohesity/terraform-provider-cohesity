// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MountVolumesTaskStateProto Persistent state for a "mount volumes" restore task.
//
// swagger:model MountVolumesTaskStateProto
type MountVolumesTaskStateProto struct {

	// Contains the SMB/NFS path of the share we expose to clients. The share
	// contains the files pertinent to the original backup run type.
	FullNasPath *string `json:"fullNasPath,omitempty"`

	// The host on which the VM where the disks are attached to are running.
	// NOTE: This is only used in HyperV environment.
	HostEntity *EntityProto `json:"hostEntity,omitempty"`

	// Contains information about the mount virtual disks task that is populated
	// by the slave.
	MountInfo *MountVolumesInfoProto `json:"mountInfo,omitempty"`

	// This captures all the necessary information required to perform mount
	// virtual disks task.
	MountParams *MountVolumesParams `json:"mountParams,omitempty"`
}

// Validate validates this mount volumes task state proto
func (m *MountVolumesTaskStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountVolumesTaskStateProto) validateHostEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.HostEntity) { // not required
		return nil
	}

	if m.HostEntity != nil {
		if err := m.HostEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostEntity")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesTaskStateProto) validateMountInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.MountInfo) { // not required
		return nil
	}

	if m.MountInfo != nil {
		if err := m.MountInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesTaskStateProto) validateMountParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MountParams) { // not required
		return nil
	}

	if m.MountParams != nil {
		if err := m.MountParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mount volumes task state proto based on the context it is used
func (m *MountVolumesTaskStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountVolumesTaskStateProto) contextValidateHostEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.HostEntity != nil {

		if swag.IsZero(m.HostEntity) { // not required
			return nil
		}

		if err := m.HostEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostEntity")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesTaskStateProto) contextValidateMountInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.MountInfo != nil {

		if swag.IsZero(m.MountInfo) { // not required
			return nil
		}

		if err := m.MountInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MountVolumesTaskStateProto) contextValidateMountParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MountParams != nil {

		if swag.IsZero(m.MountParams) { // not required
			return nil
		}

		if err := m.MountParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountVolumesTaskStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountVolumesTaskStateProto) UnmarshalBinary(b []byte) error {
	var res MountVolumesTaskStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
