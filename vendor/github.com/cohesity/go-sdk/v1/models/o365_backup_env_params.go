// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// O365BackupEnvParams Office365 Backup Environment Parameters.
//
// Message to capture any additional backup params for Office365 environment.
// This encapsulates all M365 workload's backup parameters.
//
// swagger:model O365BackupEnvParams
type O365BackupEnvParams struct {

	// This field has been deprecated. Use 'filtering_policy' specified within
	// 'outlook_backup_params' for Outlook exclusions filter and
	// 'onedrive_backup_params' for OneDrive exclusions filter respectively.
	FilteringPolicy *FilteringPolicyProto `json:"filteringPolicy,omitempty"`

	// Group specific backup parameters.
	// Refer 'GroupBackupEnvParams' for details.
	GroupBackupParams GroupBackupEnvParams `json:"groupBackupParams,omitempty"`

	// OneDrive specific backup parameters. Refer 'OneDriveBackupEnvParams' for
	// details.
	OnedriveBackupParams *OneDriveBackupEnvParams `json:"onedriveBackupParams,omitempty"`

	// Outlook specific backup parameters. Refer 'OutlookBackupEnvParams' for
	// details.
	OutlookBackupParams *OutlookBackupEnvParams `json:"outlookBackupParams,omitempty"`

	// PublicFolders specific backup parameters.
	// Refer 'PublicFoldersEnvParams' for details.
	PublicFoldersBackupParams *PublicFoldersBackupEnvParams `json:"publicFoldersBackupParams,omitempty"`

	// SharePoint specific backup parameters.
	// Refer 'SharepPointSiteBackupEnvParams' for details.
	SiteBackupParams *SharepPointSiteBackupEnvParams `json:"siteBackupParams,omitempty"`

	// Teams specific backup parameters.
	// Refer 'TeamsBackupEnvParams' for details.
	TeamsBackupParams TeamsBackupEnvParams `json:"teamsBackupParams,omitempty"`
}

// Validate validates this o365 backup env params
func (m *O365BackupEnvParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilteringPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnedriveBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutlookBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicFoldersBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *O365BackupEnvParams) validateFilteringPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.FilteringPolicy) { // not required
		return nil
	}

	if m.FilteringPolicy != nil {
		if err := m.FilteringPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filteringPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filteringPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *O365BackupEnvParams) validateOnedriveBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OnedriveBackupParams) { // not required
		return nil
	}

	if m.OnedriveBackupParams != nil {
		if err := m.OnedriveBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onedriveBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onedriveBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *O365BackupEnvParams) validateOutlookBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OutlookBackupParams) { // not required
		return nil
	}

	if m.OutlookBackupParams != nil {
		if err := m.OutlookBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *O365BackupEnvParams) validatePublicFoldersBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicFoldersBackupParams) { // not required
		return nil
	}

	if m.PublicFoldersBackupParams != nil {
		if err := m.PublicFoldersBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicFoldersBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicFoldersBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *O365BackupEnvParams) validateSiteBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteBackupParams) { // not required
		return nil
	}

	if m.SiteBackupParams != nil {
		if err := m.SiteBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteBackupParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o365 backup env params based on the context it is used
func (m *O365BackupEnvParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilteringPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnedriveBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutlookBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicFoldersBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSiteBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *O365BackupEnvParams) contextValidateFilteringPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.FilteringPolicy != nil {

		if swag.IsZero(m.FilteringPolicy) { // not required
			return nil
		}

		if err := m.FilteringPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filteringPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filteringPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *O365BackupEnvParams) contextValidateOnedriveBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OnedriveBackupParams != nil {

		if swag.IsZero(m.OnedriveBackupParams) { // not required
			return nil
		}

		if err := m.OnedriveBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onedriveBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onedriveBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *O365BackupEnvParams) contextValidateOutlookBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OutlookBackupParams != nil {

		if swag.IsZero(m.OutlookBackupParams) { // not required
			return nil
		}

		if err := m.OutlookBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *O365BackupEnvParams) contextValidatePublicFoldersBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicFoldersBackupParams != nil {

		if swag.IsZero(m.PublicFoldersBackupParams) { // not required
			return nil
		}

		if err := m.PublicFoldersBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicFoldersBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicFoldersBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *O365BackupEnvParams) contextValidateSiteBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SiteBackupParams != nil {

		if swag.IsZero(m.SiteBackupParams) { // not required
			return nil
		}

		if err := m.SiteBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteBackupParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *O365BackupEnvParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *O365BackupEnvParams) UnmarshalBinary(b []byte) error {
	var res O365BackupEnvParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
