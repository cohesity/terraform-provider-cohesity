// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetTasksArg get tasks arg
//
// swagger:model GetTasksArg
type GetTasksArg struct {

	// If specified, tasks matching the current query are futher filtered by
	// these KeyValuePairs. This gives client an ability to search by custom
	// attributes that they specified during the task creation. Only the Tasks
	// having 'all' of the specified key=value pairs will be returned.
	AttributeVec []*KeyValuePair `json:"attributeVec"`

	// Tasks that ended before this time.
	EndTimeSecs *int64 `json:"endTimeSecs,omitempty"`

	// Skip information about the sub tasks of the matching root and sub tasks.
	// By default, the entire task tree will be returned for matching tasks.
	ExcludeSubTasks *bool `json:"excludeSubTasks,omitempty"`

	// Number of levels till which we need to fetch the event logs for a pulse
	// tree. Note that it is applicable only when include_event_logs is true.
	FetchLogsMaxLevel *int32 `json:"fetchLogsMaxLevel,omitempty"`

	// If set, the event logs will be included in the response message. Otherwise
	// they will be cleared out.
	IncludeEventLogs *bool `json:"includeEventLogs,omitempty"`

	// Returns finished tasks as well.
	// By default, Pulse only returns active tasks.
	IncludeFinishedTasks *bool `json:"includeFinishedTasks,omitempty"`

	// Only return at most these many matching tasks. This constraint is applied
	// with each query's result group.
	MaxTasks *int32 `json:"maxTasks,omitempty"`

	// Tasks that started after this time.
	StartTimeSecs *int64 `json:"startTimeSecs,omitempty"`

	// The hierarchical paths to the names of the tasks being queried.
	// The task path-name specified here can be a prefix.
	// Clients can specify multiple paths/prefixes. Pulse will return one
	// ResultGroup for each path query.
	//
	// Each path is treated separately by Pulse, so if there are duplicate paths,
	// Pulse will return duplicate results.
	//
	// Both root tasks and sub tasks can be specified in @task_path_vec.
	TaskPathVec []string `json:"taskPathVec"`
}

// Validate validates this get tasks arg
func (m *GetTasksArg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTasksArg) validateAttributeVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AttributeVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeVec); i++ {
		if swag.IsZero(m.AttributeVec[i]) { // not required
			continue
		}

		if m.AttributeVec[i] != nil {
			if err := m.AttributeVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get tasks arg based on the context it is used
func (m *GetTasksArg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributeVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTasksArg) contextValidateAttributeVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttributeVec); i++ {

		if m.AttributeVec[i] != nil {

			if swag.IsZero(m.AttributeVec[i]) { // not required
				return nil
			}

			if err := m.AttributeVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetTasksArg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetTasksArg) UnmarshalBinary(b []byte) error {
	var res GetTasksArg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
