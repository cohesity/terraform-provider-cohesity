// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FilesystemVolume Filesystem Volume.
//
// Specifies information about a filesystem volume.
//
// swagger:model FilesystemVolume
type FilesystemVolume struct {

	// Array of Disks and Partitions.
	//
	// Specifies information about all the disks and partitions needed to
	// mount this logical volume.
	Disks []*Disk `json:"disks"`

	// Specifies a description about the filesystem.
	DisplayName *string `json:"displayName,omitempty"`

	// Specifies type of the filesystem on this volume.
	FilesystemType *string `json:"filesystemType,omitempty"`

	// Specifies the uuid of the filesystem.
	FilesystemUUID *string `json:"filesystemUuid,omitempty"`

	// If true, this is a supported filesystem volume type.
	IsSupported *bool `json:"isSupported,omitempty"`

	// Logical Volume.
	//
	// Specify attributes for a kLMV (Linux) or kLDM (Windows) filesystem.
	// This field is set only for kLVM and kLDM volume types.
	LogicalVolume struct {
		LogicalVolume
	} `json:"logicalVolume,omitempty"`

	// Specifies the type of logical volume such as kSimpleVolume, kLVM or kLDM.
	// 'kSimpleVolume' indicates a simple volume. Data can be used by just
	// mounting the only one partition present on the disk.
	// 'kLVM' indicates a logical volume on Linux managed by a Logical Volume
	// Manager. In order to access the data, deviceTree must be created based
	// on the specification in logicalVolume.deviceTree.
	// 'kLDM' indicates a logical volume on Windows managed by Logical Disk
	// Manager.
	// Enum: ["kSimpleVolume","kLVM","kLDM"]
	LogicalVolumeType *string `json:"logicalVolumeType,omitempty"`

	// Specifies the name of the volume such as /C.
	Name *string `json:"name,omitempty"`

	// VolumeGuid is the Volume guid.
	// This is populated for kPhysical environments.
	VolumeGUID *string `json:"volumeGuid,omitempty"`
}

// Validate validates this filesystem volume
func (m *FilesystemVolume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalVolumeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilesystemVolume) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FilesystemVolume) validateLogicalVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.LogicalVolume) { // not required
		return nil
	}

	return nil
}

var filesystemVolumeTypeLogicalVolumeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSimpleVolume","kLVM","kLDM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filesystemVolumeTypeLogicalVolumeTypePropEnum = append(filesystemVolumeTypeLogicalVolumeTypePropEnum, v)
	}
}

const (

	// FilesystemVolumeLogicalVolumeTypeKSimpleVolume captures enum value "kSimpleVolume"
	FilesystemVolumeLogicalVolumeTypeKSimpleVolume string = "kSimpleVolume"

	// FilesystemVolumeLogicalVolumeTypeKLVM captures enum value "kLVM"
	FilesystemVolumeLogicalVolumeTypeKLVM string = "kLVM"

	// FilesystemVolumeLogicalVolumeTypeKLDM captures enum value "kLDM"
	FilesystemVolumeLogicalVolumeTypeKLDM string = "kLDM"
)

// prop value enum
func (m *FilesystemVolume) validateLogicalVolumeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, filesystemVolumeTypeLogicalVolumeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FilesystemVolume) validateLogicalVolumeType(formats strfmt.Registry) error {
	if swag.IsZero(m.LogicalVolumeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLogicalVolumeTypeEnum("logicalVolumeType", "body", *m.LogicalVolumeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this filesystem volume based on the context it is used
func (m *FilesystemVolume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogicalVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilesystemVolume) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disks); i++ {

		if m.Disks[i] != nil {

			if swag.IsZero(m.Disks[i]) { // not required
				return nil
			}

			if err := m.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FilesystemVolume) contextValidateLogicalVolume(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *FilesystemVolume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilesystemVolume) UnmarshalBinary(b []byte) error {
	var res FilesystemVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
