// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageEfficiencyTile Storage Efficiency Tile.
//
// StorageEfficiencyTile gives tile information for the storage saved
// because of compression and dedupe done on the cluster.
//
// swagger:model StorageEfficiencyTile
type StorageEfficiencyTile struct {

	// Specifies the size of data brought into the cluster. This is the usage
	// before data reduction if we ignore the zeroes and effects of cloning.
	DataInBytes *int64 `json:"dataInBytes,omitempty"`

	// Specifies the samples taken for Data brought into the cluster in bytes
	// in ascending order of time.
	DataInBytesSamples []*Sample `json:"dataInBytesSamples"`

	// Specifies the size of data after compression and or dedupe operations
	// just before the data is replicated to other nodes as per RF or
	// Erasure Coding policy.
	DataInDedupedBytes *int64 `json:"dataInDedupedBytes,omitempty"`

	// Specifies the samples taken for morphed data in bytes in ascending order
	// of time.
	DataInDedupedBytesSamples []*Sample `json:"dataInDedupedBytesSamples"`

	// Specifies the current dedupe ratio on the cluster. It is the ratio of
	// DataInBytes to DataInDedupedBytes.
	DedupeRatio *float64 `json:"dedupeRatio,omitempty"`

	// Specifies the samples for data reduction ratio in ascending order of time.
	DedupeRatioSamples []*Sample `json:"dedupeRatioSamples"`

	// Specifies the duration in days in which the samples were taken.
	// For this tile, it is 7 days.
	DurationDays *int32 `json:"durationDays,omitempty"`

	// Specifies the interval between the samples in seconds.
	// For this tile, it is 1 day which is 86400 seconds.
	IntervalSeconds *int32 `json:"intervalSeconds,omitempty"`

	// Specifies the size of logical data currently represented on the cluster.
	LogicalUsedBytes *int64 `json:"logicalUsedBytes,omitempty"`

	// Specifies the samples taken for logical data represented in bytes in
	// ascending order of time.
	LogicalUsedBytesSamples []*Sample `json:"logicalUsedBytesSamples"`

	// Specifies the size of physical data currently consumed on the cluster.
	PhysicalUsedBytes *int64 `json:"physicalUsedBytes,omitempty"`

	// Specifies the samples taken for physical data consumed in bytes in
	// ascending order of time.
	PhysicalUsedBytesSamples []*Sample `json:"physicalUsedBytesSamples"`

	// Specifies the current storage reduction ratio on the cluster.
	// It is the ratio of LogicalUsedBytes to PhysicalUsedBytes.
	StorageReductionRatio *float64 `json:"storageReductionRatio,omitempty"`

	// Specifies the samples for storage reduction ratio in ascending order of
	// time.
	StorageReductionSamples []*Sample `json:"storageReductionSamples"`
}

// Validate validates this storage efficiency tile
func (m *StorageEfficiencyTile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataInBytesSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataInDedupedBytesSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDedupeRatioSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalUsedBytesSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalUsedBytesSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageReductionSamples(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageEfficiencyTile) validateDataInBytesSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.DataInBytesSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.DataInBytesSamples); i++ {
		if swag.IsZero(m.DataInBytesSamples[i]) { // not required
			continue
		}

		if m.DataInBytesSamples[i] != nil {
			if err := m.DataInBytesSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataInBytesSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataInBytesSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageEfficiencyTile) validateDataInDedupedBytesSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.DataInDedupedBytesSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.DataInDedupedBytesSamples); i++ {
		if swag.IsZero(m.DataInDedupedBytesSamples[i]) { // not required
			continue
		}

		if m.DataInDedupedBytesSamples[i] != nil {
			if err := m.DataInDedupedBytesSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataInDedupedBytesSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataInDedupedBytesSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageEfficiencyTile) validateDedupeRatioSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.DedupeRatioSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.DedupeRatioSamples); i++ {
		if swag.IsZero(m.DedupeRatioSamples[i]) { // not required
			continue
		}

		if m.DedupeRatioSamples[i] != nil {
			if err := m.DedupeRatioSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dedupeRatioSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dedupeRatioSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageEfficiencyTile) validateLogicalUsedBytesSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.LogicalUsedBytesSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.LogicalUsedBytesSamples); i++ {
		if swag.IsZero(m.LogicalUsedBytesSamples[i]) { // not required
			continue
		}

		if m.LogicalUsedBytesSamples[i] != nil {
			if err := m.LogicalUsedBytesSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logicalUsedBytesSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logicalUsedBytesSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageEfficiencyTile) validatePhysicalUsedBytesSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalUsedBytesSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.PhysicalUsedBytesSamples); i++ {
		if swag.IsZero(m.PhysicalUsedBytesSamples[i]) { // not required
			continue
		}

		if m.PhysicalUsedBytesSamples[i] != nil {
			if err := m.PhysicalUsedBytesSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physicalUsedBytesSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("physicalUsedBytesSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageEfficiencyTile) validateStorageReductionSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageReductionSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageReductionSamples); i++ {
		if swag.IsZero(m.StorageReductionSamples[i]) { // not required
			continue
		}

		if m.StorageReductionSamples[i] != nil {
			if err := m.StorageReductionSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageReductionSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageReductionSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this storage efficiency tile based on the context it is used
func (m *StorageEfficiencyTile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataInBytesSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataInDedupedBytesSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDedupeRatioSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogicalUsedBytesSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalUsedBytesSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageReductionSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageEfficiencyTile) contextValidateDataInBytesSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataInBytesSamples); i++ {

		if m.DataInBytesSamples[i] != nil {

			if swag.IsZero(m.DataInBytesSamples[i]) { // not required
				return nil
			}

			if err := m.DataInBytesSamples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataInBytesSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataInBytesSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageEfficiencyTile) contextValidateDataInDedupedBytesSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataInDedupedBytesSamples); i++ {

		if m.DataInDedupedBytesSamples[i] != nil {

			if swag.IsZero(m.DataInDedupedBytesSamples[i]) { // not required
				return nil
			}

			if err := m.DataInDedupedBytesSamples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataInDedupedBytesSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataInDedupedBytesSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageEfficiencyTile) contextValidateDedupeRatioSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DedupeRatioSamples); i++ {

		if m.DedupeRatioSamples[i] != nil {

			if swag.IsZero(m.DedupeRatioSamples[i]) { // not required
				return nil
			}

			if err := m.DedupeRatioSamples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dedupeRatioSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dedupeRatioSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageEfficiencyTile) contextValidateLogicalUsedBytesSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LogicalUsedBytesSamples); i++ {

		if m.LogicalUsedBytesSamples[i] != nil {

			if swag.IsZero(m.LogicalUsedBytesSamples[i]) { // not required
				return nil
			}

			if err := m.LogicalUsedBytesSamples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logicalUsedBytesSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logicalUsedBytesSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageEfficiencyTile) contextValidatePhysicalUsedBytesSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhysicalUsedBytesSamples); i++ {

		if m.PhysicalUsedBytesSamples[i] != nil {

			if swag.IsZero(m.PhysicalUsedBytesSamples[i]) { // not required
				return nil
			}

			if err := m.PhysicalUsedBytesSamples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physicalUsedBytesSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("physicalUsedBytesSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageEfficiencyTile) contextValidateStorageReductionSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageReductionSamples); i++ {

		if m.StorageReductionSamples[i] != nil {

			if swag.IsZero(m.StorageReductionSamples[i]) { // not required
				return nil
			}

			if err := m.StorageReductionSamples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageReductionSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageReductionSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageEfficiencyTile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageEfficiencyTile) UnmarshalBinary(b []byte) error {
	var res StorageEfficiencyTile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
