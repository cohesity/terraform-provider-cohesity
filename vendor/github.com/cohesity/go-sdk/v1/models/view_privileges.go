// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewPrivileges View privileges.
//
// ViewPrivileges specifies which views are allowed to be accessed by an app
// instance.
//
// swagger:model ViewPrivileges
type ViewPrivileges struct {

	// Specifies if all, none or specific views are allowed to be accessed.
	// Specifies if all, none or specific views are allowed to be accessed.
	// kNone - None of the views have access.
	// kAll - All the views have access.
	// kSpecific - Only specific views have access.
	// Enum: ["kNone","kAll","kSpecific"]
	PrivilegesType *string `json:"privilegesType,omitempty"`

	// Specifies the ids of the views which are allowed to be accessed in case
	// the privilege type is kSpecific.
	ViewIds []int64 `json:"viewIds"`
}

// Validate validates this view privileges
func (m *ViewPrivileges) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivilegesType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var viewPrivilegesTypePrivilegesTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNone","kAll","kSpecific"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewPrivilegesTypePrivilegesTypePropEnum = append(viewPrivilegesTypePrivilegesTypePropEnum, v)
	}
}

const (

	// ViewPrivilegesPrivilegesTypeKNone captures enum value "kNone"
	ViewPrivilegesPrivilegesTypeKNone string = "kNone"

	// ViewPrivilegesPrivilegesTypeKAll captures enum value "kAll"
	ViewPrivilegesPrivilegesTypeKAll string = "kAll"

	// ViewPrivilegesPrivilegesTypeKSpecific captures enum value "kSpecific"
	ViewPrivilegesPrivilegesTypeKSpecific string = "kSpecific"
)

// prop value enum
func (m *ViewPrivileges) validatePrivilegesTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewPrivilegesTypePrivilegesTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewPrivileges) validatePrivilegesType(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivilegesType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivilegesTypeEnum("privilegesType", "body", *m.PrivilegesType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this view privileges based on context it is used
func (m *ViewPrivileges) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ViewPrivileges) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewPrivileges) UnmarshalBinary(b []byte) error {
	var res ViewPrivileges
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
