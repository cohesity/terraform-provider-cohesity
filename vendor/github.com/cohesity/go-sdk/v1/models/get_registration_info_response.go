// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetRegistrationInfoResponse Get Registration Information Response.
//
// Specifies the registration, protection and permission information of all or a
// subset of the registered Protection Source Trees or Views on the Cohesity
// Cluster.
//
// swagger:model GetRegistrationInfoResponse
type GetRegistrationInfoResponse struct {

	// Specifies the registration, protection and permission information of either
	// all or a subset of registered Protection Sources matching the filter
	// parameters.
	// overrideDescription: true
	RootNodes []*ProtectionSourceTreeInfo `json:"rootNodes"`

	// Specifies the sum of all the stats of protection of Protection Sources
	// and views selected by the query parameters.
	Stats struct {
		ProtectionSummary
	} `json:"stats,omitempty"`

	// Specifies the breakdown of the stats by environment
	// overrideDescription: true
	StatsByEnv []*ProtectionSummaryByEnv `json:"statsByEnv"`
}

// Validate validates this get registration info response
func (m *GetRegistrationInfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRootNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatsByEnv(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetRegistrationInfoResponse) validateRootNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.RootNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.RootNodes); i++ {
		if swag.IsZero(m.RootNodes[i]) { // not required
			continue
		}

		if m.RootNodes[i] != nil {
			if err := m.RootNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetRegistrationInfoResponse) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	return nil
}

func (m *GetRegistrationInfoResponse) validateStatsByEnv(formats strfmt.Registry) error {
	if swag.IsZero(m.StatsByEnv) { // not required
		return nil
	}

	for i := 0; i < len(m.StatsByEnv); i++ {
		if swag.IsZero(m.StatsByEnv[i]) { // not required
			continue
		}

		if m.StatsByEnv[i] != nil {
			if err := m.StatsByEnv[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statsByEnv" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("statsByEnv" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get registration info response based on the context it is used
func (m *GetRegistrationInfoResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRootNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatsByEnv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetRegistrationInfoResponse) contextValidateRootNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RootNodes); i++ {

		if m.RootNodes[i] != nil {

			if swag.IsZero(m.RootNodes[i]) { // not required
				return nil
			}

			if err := m.RootNodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetRegistrationInfoResponse) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GetRegistrationInfoResponse) contextValidateStatsByEnv(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatsByEnv); i++ {

		if m.StatsByEnv[i] != nil {

			if swag.IsZero(m.StatsByEnv[i]) { // not required
				return nil
			}

			if err := m.StatsByEnv[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statsByEnv" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("statsByEnv" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetRegistrationInfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetRegistrationInfoResponse) UnmarshalBinary(b []byte) error {
	var res GetRegistrationInfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
