// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StubbingPolicyProto Message to capture scheduling and retention policies for stubbing jobs.
//
// Stubbing jobs do not use protection policies. Instead, schedule and
// retention policy will be embedded in the BackupJobProto.
//
// swagger:model StubbingPolicyProto
type StubbingPolicyProto struct {

	// Retention policy for snapshots taken after each stubbing job run.
	RetentionPolicy *RetentionPolicyProto `json:"retentionPolicy,omitempty"`

	// Schedule for running stubbing job.
	SchedulingPolicy *SchedulingPolicyProto `json:"schedulingPolicy,omitempty"`
}

// Validate validates this stubbing policy proto
func (m *StubbingPolicyProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedulingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StubbingPolicyProto) validateRetentionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.RetentionPolicy) { // not required
		return nil
	}

	if m.RetentionPolicy != nil {
		if err := m.RetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *StubbingPolicyProto) validateSchedulingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.SchedulingPolicy) { // not required
		return nil
	}

	if m.SchedulingPolicy != nil {
		if err := m.SchedulingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedulingPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stubbing policy proto based on the context it is used
func (m *StubbingPolicyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRetentionPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedulingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StubbingPolicyProto) contextValidateRetentionPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.RetentionPolicy != nil {

		if swag.IsZero(m.RetentionPolicy) { // not required
			return nil
		}

		if err := m.RetentionPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *StubbingPolicyProto) contextValidateSchedulingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.SchedulingPolicy != nil {

		if swag.IsZero(m.SchedulingPolicy) { // not required
			return nil
		}

		if err := m.SchedulingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedulingPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StubbingPolicyProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StubbingPolicyProto) UnmarshalBinary(b []byte) error {
	var res StubbingPolicyProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
