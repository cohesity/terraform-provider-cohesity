// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NasThrottlingParams NAS Throttling Parameters.
//
// Message to capture throttling params for a NAS source.
//
// swagger:model NasThrottlingParams
type NasThrottlingParams struct {

	// This parameter indicates the maximum number of parallel read and write
	// operations per volume for full backup as a percentage of gflag
	// magneto_slave_nas_max_active_pack_tasks.
	MaxParallelIoFullPercentage *int32 `json:"maxParallelIoFullPercentage,omitempty"`

	// This parameter indicates the maximum number of parallel read and write
	// operations per volume for incremental backup as a percentage of gflag
	// magneto_slave_nas_max_active_pack_tasks.
	MaxParallelIoIncrementalPercentage *int32 `json:"maxParallelIoIncrementalPercentage,omitempty"`

	// This parameter indicates the maximum number of concurrent prefetch in diff
	// streamer per volume for full backup as a percentage of gflag
	// magneto_posix_diff_streamer_max_prefetch.
	MaxParallelMetadataFetchFullPercentage *int32 `json:"maxParallelMetadataFetchFullPercentage,omitempty"`

	// This parameter indicates the maximum number of concurrent prefetch in diff
	// streamer per volume for incremental backup as a percentage of gflag
	// magneto_posix_diff_streamer_max_prefetch.
	MaxParallelMetadataFetchIncrementalPercentage *int32 `json:"maxParallelMetadataFetchIncrementalPercentage,omitempty"`
}

// Validate validates this nas throttling params
func (m *NasThrottlingParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this nas throttling params based on context it is used
func (m *NasThrottlingParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NasThrottlingParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NasThrottlingParams) UnmarshalBinary(b []byte) error {
	var res NasThrottlingParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
