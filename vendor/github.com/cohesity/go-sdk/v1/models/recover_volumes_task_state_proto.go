// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverVolumesTaskStateProto Persistent state for a "recover volumes" restore task.
//
// swagger:model RecoverVolumesTaskStateProto
type RecoverVolumesTaskStateProto struct {

	// Captures the original parameters from Iris.
	Params *RecoverVolumesParams `json:"params,omitempty"`

	// Contains high-level per-volume information. This data is here because
	// Iris cannot see into protobuf extensions yet needs to display per-subtask
	// progress.
	TaskResultVec []*RecoverVolumesTaskStateProtoTaskResult `json:"taskResultVec"`
}

// Validate validates this recover volumes task state proto
func (m *RecoverVolumesTaskStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskResultVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVolumesTaskStateProto) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVolumesTaskStateProto) validateTaskResultVec(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskResultVec) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskResultVec); i++ {
		if swag.IsZero(m.TaskResultVec[i]) { // not required
			continue
		}

		if m.TaskResultVec[i] != nil {
			if err := m.TaskResultVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taskResultVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taskResultVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this recover volumes task state proto based on the context it is used
func (m *RecoverVolumesTaskStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskResultVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVolumesTaskStateProto) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if m.Params != nil {

		if swag.IsZero(m.Params) { // not required
			return nil
		}

		if err := m.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVolumesTaskStateProto) contextValidateTaskResultVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaskResultVec); i++ {

		if m.TaskResultVec[i] != nil {

			if swag.IsZero(m.TaskResultVec[i]) { // not required
				return nil
			}

			if err := m.TaskResultVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taskResultVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taskResultVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverVolumesTaskStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverVolumesTaskStateProto) UnmarshalBinary(b []byte) error {
	var res RecoverVolumesTaskStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
