// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// S3TaggingFilter s3 tagging filter
//
// swagger:model S3TaggingFilter
type S3TaggingFilter struct {

	// If set, it enables the S3 tagging filter
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// The mode applied to the list of S3 tags
	// 'kWhitelist' indicates a allowlist extension filter.
	// 'kBlacklist' indicates a denylist extension filter.
	// Enum: ["kWhitelist","kBlacklist"]
	Mode *string `json:"mode,omitempty"`

	// The list of S3 tags to apply
	TagSet map[string]string `json:"tagSet,omitempty"`
}

// Validate validates this s3 tagging filter
func (m *S3TaggingFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var s3TaggingFilterTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kWhitelist","kBlacklist"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		s3TaggingFilterTypeModePropEnum = append(s3TaggingFilterTypeModePropEnum, v)
	}
}

const (

	// S3TaggingFilterModeKWhitelist captures enum value "kWhitelist"
	S3TaggingFilterModeKWhitelist string = "kWhitelist"

	// S3TaggingFilterModeKBlacklist captures enum value "kBlacklist"
	S3TaggingFilterModeKBlacklist string = "kBlacklist"
)

// prop value enum
func (m *S3TaggingFilter) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, s3TaggingFilterTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *S3TaggingFilter) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this s3 tagging filter based on context it is used
func (m *S3TaggingFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *S3TaggingFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3TaggingFilter) UnmarshalBinary(b []byte) error {
	var res S3TaggingFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
