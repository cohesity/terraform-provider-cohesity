// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestoreObjectDetails Restore Object.
//
// Specifies an object to recover or clone or an object to restore files
// and folders from.
// A VM object can be recovered or cloned. A View object can be cloned.
// To specify a particular snapshot, you must specify a jobRunId and
// a startTimeUsecs.
// If jobRunId and startTimeUsecs are not specified, the last Job Run of the
// specified Job is used.
//
// swagger:model RestoreObjectDetails
type RestoreObjectDetails struct {

	// Archival Target.
	//
	// Specifies settings about the Archival Target (such as Tape or AWS).
	// This field must be set if the object
	// is being recovered or cloned from an archive or if files
	// or folders are being restored from an archive.
	ArchivalTarget struct {
		ArchivalExternalTarget
	} `json:"archivalTarget,omitempty"`

	// CloudDeploy Target.
	//
	// Specifies settings about the Cloud Deploy target.
	// This field must be set if the restore type is kDeployVMs and the object is
	// to be deployed to cloud using a previously converted image.
	CloudDeployTarget struct {
		CloudDeployTargetDetails
	} `json:"cloudDeployTarget,omitempty"`

	// Specifies the type of the Protection Source.
	// Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	// NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	// 'kVMware' indicates the VMware Protection Source environment.
	// 'kHyperV' indicates the HyperV Protection Source environment.
	// 'kSQL' indicates the SQL Protection Source environment.
	// 'kView' indicates the View Protection Source environment.
	// 'kPuppeteer' indicates the Cohesity's Remote Adapter.
	// 'kPhysical' indicates the physical Protection Source environment.
	// 'kPure' indicates the Pure Storage Protection Source environment.
	// 'kNimble' indicates the Nimble Storage Protection Source environment.
	// 'kAzure' indicates the Microsoft's Azure Protection Source environment.
	// 'kNetapp' indicates the Netapp Protection Source environment.
	// 'kAgent' indicates the Agent Protection Source environment.
	// 'kGenericNas' indicates the Generic Network Attached Storage Protection
	// Source environment.
	// 'kAcropolis' indicates the Acropolis Protection Source environment.
	// 'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	// 'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	// 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	// 'kGPFS' indicates IBM's GPFS Protection Source environment.
	// 'kKVM' indicates the KVM Protection Source environment.
	// 'kAWS' indicates the AWS Protection Source environment.
	// 'kExchange' indicates the Exchange Protection Source environment.
	// 'kHyperVVSS' indicates the HyperV VSS Protection Source
	// environment.
	// 'kOracle' indicates the Oracle Protection Source environment.
	// 'kGCP' indicates the Google Cloud Platform Protection Source environment.
	// 'kFlashBlade' indicates the Flash Blade Protection Source environment.
	// 'kAWSNative' indicates the AWS Native Protection Source environment.
	// 'kO365' indicates the Office 365 Protection Source environment.
	// 'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	// 'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	// 'kGCPNative' indicates the GCP Native Protection Source environment.
	// 'kAzureNative' indicates the Azure Native Protection Source environment.
	// 'kKubernetes' indicates a Kubernetes Protection Source environment.
	// 'kElastifile' indicates Elastifile Protection Source environment.
	// 'kAD' indicates Active Directory Protection Source environment.
	// 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	// 'kCassandra' indicates Cassandra Protection Source environment.
	// 'kMongoDB' indicates MongoDB Protection Source environment.
	// 'kCouchbase' indicates Couchbase Protection Source environment.
	// 'kHdfs' indicates Hdfs Protection Source environment.
	// 'kHive' indicates Hive Protection Source environment.
	// 'kHBase' indicates HBase Protection Source environment.
	// 'kUDA' indicates Universal Data Adapter Protection Source environment.
	// 'kSAPHANA' indicates SAP HANA protection source environment.
	// 'kO365Teams' indicates the Office365 Teams Protection Source environment.
	// 'kO365Group' indicates the Office365 Groups Protection Source environment.
	// 'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	// 'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	// 'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	// 'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	// kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	// kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	// kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	// kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	// kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	// kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	// kO365PublicFolders
	// Enum: ["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]
	Environment *string `json:"environment,omitempty"`

	// Protection Job Id.
	//
	// Specifies id of the Protection Job that backed up the objects
	// to be restored.
	JobID *int64 `json:"jobId,omitempty"`

	// Specifies the id of the Job Run that captured the snapshot.
	JobRunID *int64 `json:"jobRunId,omitempty"`

	// Universal Id.
	//
	// Specifies the universal id of the Protection Job that backed up
	// the objects to recover or clone or the objects that contain the
	// files or folders to recover.
	JobUID struct {
		UniversalID
	} `json:"jobUid,omitempty"`

	// Specifies the timestamp (in microseconds. from epoch) for recovering
	// to a point-in-time in the past.
	PointInTimeUsecs *int64 `json:"pointInTimeUsecs,omitempty"`

	// Specifies the id of the leaf object to recover, clone or recover
	// files/folders from.
	ProtectionSourceID *int64 `json:"protectionSourceId,omitempty"`

	// Specifies the name of the Protection Source.
	SourceName *string `json:"sourceName,omitempty"`

	// Specifies the time when the Job Run starts capturing a snapshot.
	// Specified as a Unix epoch Timestamp (in microseconds).
	StartedTimeUsecs *int64 `json:"startedTimeUsecs,omitempty"`
}

// Validate validates this restore object details
func (m *RestoreObjectDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchivalTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudDeployTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreObjectDetails) validateArchivalTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalTarget) { // not required
		return nil
	}

	return nil
}

func (m *RestoreObjectDetails) validateCloudDeployTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudDeployTarget) { // not required
		return nil
	}

	return nil
}

var restoreObjectDetailsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		restoreObjectDetailsTypeEnvironmentPropEnum = append(restoreObjectDetailsTypeEnvironmentPropEnum, v)
	}
}

const (

	// RestoreObjectDetailsEnvironmentKVMware captures enum value "kVMware"
	RestoreObjectDetailsEnvironmentKVMware string = "kVMware"

	// RestoreObjectDetailsEnvironmentKHyperV captures enum value "kHyperV"
	RestoreObjectDetailsEnvironmentKHyperV string = "kHyperV"

	// RestoreObjectDetailsEnvironmentKSQL captures enum value "kSQL"
	RestoreObjectDetailsEnvironmentKSQL string = "kSQL"

	// RestoreObjectDetailsEnvironmentKView captures enum value "kView"
	RestoreObjectDetailsEnvironmentKView string = "kView"

	// RestoreObjectDetailsEnvironmentKPuppeteer captures enum value "kPuppeteer"
	RestoreObjectDetailsEnvironmentKPuppeteer string = "kPuppeteer"

	// RestoreObjectDetailsEnvironmentKPhysical captures enum value "kPhysical"
	RestoreObjectDetailsEnvironmentKPhysical string = "kPhysical"

	// RestoreObjectDetailsEnvironmentKPure captures enum value "kPure"
	RestoreObjectDetailsEnvironmentKPure string = "kPure"

	// RestoreObjectDetailsEnvironmentKNimble captures enum value "kNimble"
	RestoreObjectDetailsEnvironmentKNimble string = "kNimble"
)

// prop value enum
func (m *RestoreObjectDetails) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, restoreObjectDetailsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RestoreObjectDetails) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *RestoreObjectDetails) validateJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.JobUID) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this restore object details based on the context it is used
func (m *RestoreObjectDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchivalTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudDeployTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreObjectDetails) contextValidateArchivalTarget(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RestoreObjectDetails) contextValidateCloudDeployTarget(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RestoreObjectDetails) contextValidateJobUID(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreObjectDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreObjectDetails) UnmarshalBinary(b []byte) error {
	var res RestoreObjectDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
