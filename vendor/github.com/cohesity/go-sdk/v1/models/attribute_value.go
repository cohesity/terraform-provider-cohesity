// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttributeValue AttributeValue
//
// Represents the information about the values of attribute of the ADObject.
//
// swagger:model AttributeValue
type AttributeValue struct {

	// Specifies the flags related to the attribute values of the AD object.
	// 'kError' indicates error in conversion of AD Object value to string.
	// The value in the AdAttributValue contains the error message.
	// 'kTruncated' indicates the multi valued attribute is truncated when value
	// exceeded 'truncate_multivalues' value specified in the request.
	// 'kCSV' indicates content in 'values' is a comma separated value (CSV) format
	// of a complex object.
	Flags []string `json:"flags"`

	// Specifies list of values for the attribute.
	Values []string `json:"values"`
}

// Validate validates this attribute value
func (m *AttributeValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var attributeValueFlagsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kError","kTruncated","kCSV"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attributeValueFlagsItemsEnum = append(attributeValueFlagsItemsEnum, v)
	}
}

func (m *AttributeValue) validateFlagsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attributeValueFlagsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AttributeValue) validateFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.Flags) { // not required
		return nil
	}

	for i := 0; i < len(m.Flags); i++ {

		// value enum
		if err := m.validateFlagsItemsEnum("flags"+"."+strconv.Itoa(i), "body", m.Flags[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this attribute value based on context it is used
func (m *AttributeValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AttributeValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttributeValue) UnmarshalBinary(b []byte) error {
	var res AttributeValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
