// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudDeployTargetDetails Message that specifies the details about CloudDeploy target where backup
// snapshots may be converted and stored.
//
// swagger:model CloudDeployTargetDetails
type CloudDeployTargetDetails struct {

	// Contains information needed to identify various resources when deploying
	// VMs to Cloud.
	//
	// Specifies various resources when converting and deploying a VM to AWS.
	AwsParams *AwsParams `json:"awsParams,omitempty"`

	// Specifies various resources when converting and deploying a VM to Azure.
	AzureParams *AzureParams `json:"azureParams,omitempty"`

	// Specifies various resources when converting and deploying a VM to Gcp.
	GcpParams *GcpParams `json:"gcpParams,omitempty"`

	// Entity corresponding to the cloud deploy target.
	//
	// Specifies the id field inside the EntityProto.
	ID *int64 `json:"id,omitempty"`

	// Specifies the inner object's name or a human-readable string made off the
	// salient attributes. This is only plumbed when Entity objects are exposed
	// to Iris BE or to Yoda.
	Name *string `json:"name,omitempty"`

	// Specifies the type of the CloudDeploy target.
	// 'kAzure' indicates that Azure as a cloud deploy target type.
	// 'kAWS' indicates that AWS as a cloud deploy target type.
	// 'kGCP' indicates that GCP as a cloud deploy target type.
	// Enum: ["kAzure","kAWS","kGCP"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this cloud deploy target details
func (m *CloudDeployTargetDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudDeployTargetDetails) validateAwsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsParams) { // not required
		return nil
	}

	if m.AwsParams != nil {
		if err := m.AwsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloudDeployTargetDetails) validateAzureParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureParams) { // not required
		return nil
	}

	if m.AzureParams != nil {
		if err := m.AzureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloudDeployTargetDetails) validateGcpParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpParams) { // not required
		return nil
	}

	if m.GcpParams != nil {
		if err := m.GcpParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpParams")
			}
			return err
		}
	}

	return nil
}

var cloudDeployTargetDetailsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAzure","kAWS","kGCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudDeployTargetDetailsTypeTypePropEnum = append(cloudDeployTargetDetailsTypeTypePropEnum, v)
	}
}

const (

	// CloudDeployTargetDetailsTypeKAzure captures enum value "kAzure"
	CloudDeployTargetDetailsTypeKAzure string = "kAzure"

	// CloudDeployTargetDetailsTypeKAWS captures enum value "kAWS"
	CloudDeployTargetDetailsTypeKAWS string = "kAWS"

	// CloudDeployTargetDetailsTypeKGCP captures enum value "kGCP"
	CloudDeployTargetDetailsTypeKGCP string = "kGCP"
)

// prop value enum
func (m *CloudDeployTargetDetails) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cloudDeployTargetDetailsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CloudDeployTargetDetails) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cloud deploy target details based on the context it is used
func (m *CloudDeployTargetDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudDeployTargetDetails) contextValidateAwsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsParams != nil {

		if swag.IsZero(m.AwsParams) { // not required
			return nil
		}

		if err := m.AwsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloudDeployTargetDetails) contextValidateAzureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureParams != nil {

		if swag.IsZero(m.AzureParams) { // not required
			return nil
		}

		if err := m.AzureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloudDeployTargetDetails) contextValidateGcpParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpParams != nil {

		if swag.IsZero(m.GcpParams) { // not required
			return nil
		}

		if err := m.GcpParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudDeployTargetDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudDeployTargetDetails) UnmarshalBinary(b []byte) error {
	var res CloudDeployTargetDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
