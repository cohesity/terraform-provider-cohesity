// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KmsUpdateRequestParameters Request to create a KMS with specified configuration.
//
// swagger:model KmsUpdateRequestParameters
type KmsUpdateRequestParameters struct {

	// AWS KMS conifg response.
	AwsKms *AwsKmsUpdateParams `json:"awsKms,omitempty"`

	// Specifies the config response for cryptsoftKMS.
	CryptsoftKms *CryptsoftKmsUpdateParams `json:"cryptsoftKms,omitempty"`

	// The Id of a KMS server.
	ID *int64 `json:"id,omitempty"`

	// Specifies name of the key.
	KeyName *string `json:"keyName,omitempty"`

	// Specifies the name given to the KMS Server.
	ServerName *string `json:"serverName,omitempty"`

	// Specifies the list of Vault Ids.
	VaultIDList []int64 `json:"vaultIdList"`

	// Specifies the list of View Box Ids.
	ViewBoxIDList []int64 `json:"viewBoxIdList"`
}

// Validate validates this kms update request parameters
func (m *KmsUpdateRequestParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsKms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCryptsoftKms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmsUpdateRequestParameters) validateAwsKms(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsKms) { // not required
		return nil
	}

	if m.AwsKms != nil {
		if err := m.AwsKms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsKms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsKms")
			}
			return err
		}
	}

	return nil
}

func (m *KmsUpdateRequestParameters) validateCryptsoftKms(formats strfmt.Registry) error {
	if swag.IsZero(m.CryptsoftKms) { // not required
		return nil
	}

	if m.CryptsoftKms != nil {
		if err := m.CryptsoftKms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cryptsoftKms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cryptsoftKms")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kms update request parameters based on the context it is used
func (m *KmsUpdateRequestParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsKms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCryptsoftKms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmsUpdateRequestParameters) contextValidateAwsKms(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsKms != nil {

		if swag.IsZero(m.AwsKms) { // not required
			return nil
		}

		if err := m.AwsKms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsKms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsKms")
			}
			return err
		}
	}

	return nil
}

func (m *KmsUpdateRequestParameters) contextValidateCryptsoftKms(ctx context.Context, formats strfmt.Registry) error {

	if m.CryptsoftKms != nil {

		if swag.IsZero(m.CryptsoftKms) { // not required
			return nil
		}

		if err := m.CryptsoftKms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cryptsoftKms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cryptsoftKms")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KmsUpdateRequestParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KmsUpdateRequestParameters) UnmarshalBinary(b []byte) error {
	var res KmsUpdateRequestParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
