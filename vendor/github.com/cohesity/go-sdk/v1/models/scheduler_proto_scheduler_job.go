// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SchedulerProtoSchedulerJob Scheduler Job.
//
// Specifies the structure of the scheduler job along with its attributes.
//
// swagger:model SchedulerProto_SchedulerJob
type SchedulerProtoSchedulerJob struct {

	// The boolean which specifies if this job is to be scheduled or not.
	EnableRecurringEmail *bool `json:"enableRecurringEmail,omitempty"`

	// The unique id for the scheduled job assigned by the cluster.
	ID *int64 `json:"id,omitempty"`

	// The name of the scheduled job given by the user.
	Name *string `json:"name,omitempty"`

	// schedule job parameters
	ScheduleJobParameters *SchedulerProtoSchedulerJobScheduleJobParameters `json:"scheduleJobParameters,omitempty"`

	// The frequency of schedule execution.
	Schedules []*SchedulerProtoSchedulerJobSchedule `json:"schedules"`

	// Specifies id of tenant who created the scheduler job.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies the type of the job.
	// The enum which defines the Job type of the job.
	// Enum: ["kSchedulerJobReport"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this scheduler proto scheduler job
func (m *SchedulerProtoSchedulerJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScheduleJobParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerProtoSchedulerJob) validateScheduleJobParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleJobParameters) { // not required
		return nil
	}

	if m.ScheduleJobParameters != nil {
		if err := m.ScheduleJobParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleJobParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduleJobParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerProtoSchedulerJob) validateSchedules(formats strfmt.Registry) error {
	if swag.IsZero(m.Schedules) { // not required
		return nil
	}

	for i := 0; i < len(m.Schedules); i++ {
		if swag.IsZero(m.Schedules[i]) { // not required
			continue
		}

		if m.Schedules[i] != nil {
			if err := m.Schedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var schedulerProtoSchedulerJobTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSchedulerJobReport"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		schedulerProtoSchedulerJobTypeTypePropEnum = append(schedulerProtoSchedulerJobTypeTypePropEnum, v)
	}
}

const (

	// SchedulerProtoSchedulerJobTypeKSchedulerJobReport captures enum value "kSchedulerJobReport"
	SchedulerProtoSchedulerJobTypeKSchedulerJobReport string = "kSchedulerJobReport"
)

// prop value enum
func (m *SchedulerProtoSchedulerJob) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, schedulerProtoSchedulerJobTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SchedulerProtoSchedulerJob) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this scheduler proto scheduler job based on the context it is used
func (m *SchedulerProtoSchedulerJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScheduleJobParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerProtoSchedulerJob) contextValidateScheduleJobParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduleJobParameters != nil {

		if swag.IsZero(m.ScheduleJobParameters) { // not required
			return nil
		}

		if err := m.ScheduleJobParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleJobParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduleJobParameters")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerProtoSchedulerJob) contextValidateSchedules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Schedules); i++ {

		if m.Schedules[i] != nil {

			if swag.IsZero(m.Schedules[i]) { // not required
				return nil
			}

			if err := m.Schedules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchedulerProtoSchedulerJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulerProtoSchedulerJob) UnmarshalBinary(b []byte) error {
	var res SchedulerProtoSchedulerJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
