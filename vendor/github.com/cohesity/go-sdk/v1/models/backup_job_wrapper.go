// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupJobWrapper BackupJobWrapper defines the struct for backup job.
//
// swagger:model BackupJobWrapper
type BackupJobWrapper struct {

	// BackupJob is the struct for BackupJobProto used by magneto.
	BackupJob *BackupJobProto `json:"backupJob,omitempty"`

	// A list of protected entities according to the request. This field will
	// only be populated if the request contains 'entities_to_protect' field.
	ProtectedEntities []*CreateBackupJobResultProtectedEntity `json:"protectedEntities"`

	// Tenant information of tenants having access to the backup job.
	Tenants []*TenantInfo `json:"tenants"`
}

// Validate validates this backup job wrapper
func (m *BackupJobWrapper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectedEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenants(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobWrapper) validateBackupJob(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupJob) { // not required
		return nil
	}

	if m.BackupJob != nil {
		if err := m.BackupJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupJob")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobWrapper) validateProtectedEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectedEntities) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectedEntities); i++ {
		if swag.IsZero(m.ProtectedEntities[i]) { // not required
			continue
		}

		if m.ProtectedEntities[i] != nil {
			if err := m.ProtectedEntities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectedEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectedEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupJobWrapper) validateTenants(formats strfmt.Registry) error {
	if swag.IsZero(m.Tenants) { // not required
		return nil
	}

	for i := 0; i < len(m.Tenants); i++ {
		if swag.IsZero(m.Tenants[i]) { // not required
			continue
		}

		if m.Tenants[i] != nil {
			if err := m.Tenants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenants" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tenants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this backup job wrapper based on the context it is used
func (m *BackupJobWrapper) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectedEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenants(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobWrapper) contextValidateBackupJob(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupJob != nil {

		if swag.IsZero(m.BackupJob) { // not required
			return nil
		}

		if err := m.BackupJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupJob")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobWrapper) contextValidateProtectedEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectedEntities); i++ {

		if m.ProtectedEntities[i] != nil {

			if swag.IsZero(m.ProtectedEntities[i]) { // not required
				return nil
			}

			if err := m.ProtectedEntities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectedEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectedEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupJobWrapper) contextValidateTenants(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tenants); i++ {

		if m.Tenants[i] != nil {

			if swag.IsZero(m.Tenants[i]) { // not required
				return nil
			}

			if err := m.Tenants[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenants" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tenants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupJobWrapper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupJobWrapper) UnmarshalBinary(b []byte) error {
	var res BackupJobWrapper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
