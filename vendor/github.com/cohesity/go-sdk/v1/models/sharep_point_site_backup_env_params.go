// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SharepPointSiteBackupEnvParams Message to capture any additional backup params for SharePoint within the
// Office365 environment.
//
// swagger:model SharepPointSiteBackupEnvParams
type SharepPointSiteBackupEnvParams struct {

	// supported exclusion:
	// doclib exclusion: whole doclib is excluded from backup.
	// sample: /Doclib1, /Doclib1/
	// directory exclusion: specified path in doclib will be excluded
	// from backup.
	// sample: /Doclib1/folderA/forderB
	// Doclibs can be specified by either
	// a) Doclib name - eg, Documents.
	// b) Drive id of doclib - b!ZMSl2JRm0UeXLHfHR1m-iuD10p0CIV9qSa6TtgM
	// Regular expressions are not supported. If not specified, all the
	// doclibs within sharepoint site will be protected.
	DocLibFilteringPolicy *FilteringPolicyProto `json:"docLibFilteringPolicy,omitempty"`

	// Specifies the parameters for backing up Preservation Hold Library.
	// Refer PreservationHoldLibraryProtectionParams for details.
	PhlParams *PreservationHoldLibraryProtectionParams `json:"phlParams,omitempty"`
}

// Validate validates this sharep point site backup env params
func (m *SharepPointSiteBackupEnvParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocLibFilteringPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhlParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SharepPointSiteBackupEnvParams) validateDocLibFilteringPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.DocLibFilteringPolicy) { // not required
		return nil
	}

	if m.DocLibFilteringPolicy != nil {
		if err := m.DocLibFilteringPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("docLibFilteringPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("docLibFilteringPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *SharepPointSiteBackupEnvParams) validatePhlParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhlParams) { // not required
		return nil
	}

	if m.PhlParams != nil {
		if err := m.PhlParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phlParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sharep point site backup env params based on the context it is used
func (m *SharepPointSiteBackupEnvParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDocLibFilteringPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhlParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SharepPointSiteBackupEnvParams) contextValidateDocLibFilteringPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.DocLibFilteringPolicy != nil {

		if swag.IsZero(m.DocLibFilteringPolicy) { // not required
			return nil
		}

		if err := m.DocLibFilteringPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("docLibFilteringPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("docLibFilteringPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *SharepPointSiteBackupEnvParams) contextValidatePhlParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhlParams != nil {

		if swag.IsZero(m.PhlParams) { // not required
			return nil
		}

		if err := m.PhlParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phlParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SharepPointSiteBackupEnvParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SharepPointSiteBackupEnvParams) UnmarshalBinary(b []byte) error {
	var res SharepPointSiteBackupEnvParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
