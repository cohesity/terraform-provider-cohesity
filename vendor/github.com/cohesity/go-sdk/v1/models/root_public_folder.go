// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RootPublicFolder O365 RootPublicFolder.
//
// Specifies the RootPublicFolder with restore details to support full or
// partial recovery.
//
// swagger:model RootPublicFolder
type RootPublicFolder struct {

	// Specifies the list of Public Folders to be restored incase user wishes not
	// to restore entire RootPublicFolder.
	PublicFolderList []*PublicFolder `json:"publicFolderList"`

	// Specifies whether the entire RootPublicFolder is to be restored.
	RestoreEntireRootPublicFolder *bool `json:"restoreEntireRootPublicFolder,omitempty"`

	// Specifies the details of the RootPublicFolder object.
	RootPublicFolderObject *RestoreObjectDetails `json:"rootPublicFolderObject,omitempty"`
}

// Validate validates this root public folder
func (m *RootPublicFolder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicFolderList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootPublicFolderObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RootPublicFolder) validatePublicFolderList(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicFolderList) { // not required
		return nil
	}

	for i := 0; i < len(m.PublicFolderList); i++ {
		if swag.IsZero(m.PublicFolderList[i]) { // not required
			continue
		}

		if m.PublicFolderList[i] != nil {
			if err := m.PublicFolderList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("publicFolderList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("publicFolderList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RootPublicFolder) validateRootPublicFolderObject(formats strfmt.Registry) error {
	if swag.IsZero(m.RootPublicFolderObject) { // not required
		return nil
	}

	if m.RootPublicFolderObject != nil {
		if err := m.RootPublicFolderObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootPublicFolderObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootPublicFolderObject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this root public folder based on the context it is used
func (m *RootPublicFolder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePublicFolderList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootPublicFolderObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RootPublicFolder) contextValidatePublicFolderList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PublicFolderList); i++ {

		if m.PublicFolderList[i] != nil {

			if swag.IsZero(m.PublicFolderList[i]) { // not required
				return nil
			}

			if err := m.PublicFolderList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("publicFolderList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("publicFolderList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RootPublicFolder) contextValidateRootPublicFolderObject(ctx context.Context, formats strfmt.Registry) error {

	if m.RootPublicFolderObject != nil {

		if swag.IsZero(m.RootPublicFolderObject) { // not required
			return nil
		}

		if err := m.RootPublicFolderObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootPublicFolderObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootPublicFolderObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RootPublicFolder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RootPublicFolder) UnmarshalBinary(b []byte) error {
	var res RootPublicFolder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
