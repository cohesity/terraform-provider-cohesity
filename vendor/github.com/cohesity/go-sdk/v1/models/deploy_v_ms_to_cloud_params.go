// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeployVMsToCloudParams Contains Cloud specific information needed to identify various resources
// when deploying a VM to Cloud.
//
// swagger:model DeployVMsToCloudParams
type DeployVMsToCloudParams struct {

	// deploy fleet params
	DeployFleetParams *DeployFleetParams `json:"deployFleetParams,omitempty"`

	// deploy vms to aws params
	DeployVmsToAwsParams *DeployVMsToAWSParams `json:"deployVmsToAwsParams,omitempty"`

	// deploy vms to azure params
	DeployVmsToAzureParams *DeployVMsToAzureParams `json:"deployVmsToAzureParams,omitempty"`

	// deploy vms to gcp params
	DeployVmsToGcpParams *DeployVMsToGCPParams `json:"deployVmsToGcpParams,omitempty"`

	// replicate snapshots to aws params
	ReplicateSnapshotsToAwsParams *ReplicateSnapshotsToAWSParams `json:"replicateSnapshotsToAwsParams,omitempty"`

	// replicate snapshots to azure params
	ReplicateSnapshotsToAzureParams *ReplicateSnapshotsToAzureParams `json:"replicateSnapshotsToAzureParams,omitempty"`
}

// Validate validates this deploy v ms to cloud params
func (m *DeployVMsToCloudParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployFleetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployVmsToAwsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployVmsToAzureParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployVmsToGcpParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicateSnapshotsToAwsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicateSnapshotsToAzureParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployVMsToCloudParams) validateDeployFleetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployFleetParams) { // not required
		return nil
	}

	if m.DeployFleetParams != nil {
		if err := m.DeployFleetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToCloudParams) validateDeployVmsToAwsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToAwsParams) { // not required
		return nil
	}

	if m.DeployVmsToAwsParams != nil {
		if err := m.DeployVmsToAwsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToAwsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToAwsParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToCloudParams) validateDeployVmsToAzureParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToAzureParams) { // not required
		return nil
	}

	if m.DeployVmsToAzureParams != nil {
		if err := m.DeployVmsToAzureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToAzureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToAzureParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToCloudParams) validateDeployVmsToGcpParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToGcpParams) { // not required
		return nil
	}

	if m.DeployVmsToGcpParams != nil {
		if err := m.DeployVmsToGcpParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToGcpParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToGcpParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToCloudParams) validateReplicateSnapshotsToAwsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicateSnapshotsToAwsParams) { // not required
		return nil
	}

	if m.ReplicateSnapshotsToAwsParams != nil {
		if err := m.ReplicateSnapshotsToAwsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicateSnapshotsToAwsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicateSnapshotsToAwsParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToCloudParams) validateReplicateSnapshotsToAzureParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicateSnapshotsToAzureParams) { // not required
		return nil
	}

	if m.ReplicateSnapshotsToAzureParams != nil {
		if err := m.ReplicateSnapshotsToAzureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicateSnapshotsToAzureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicateSnapshotsToAzureParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deploy v ms to cloud params based on the context it is used
func (m *DeployVMsToCloudParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeployFleetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployVmsToAwsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployVmsToAzureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployVmsToGcpParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicateSnapshotsToAwsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicateSnapshotsToAzureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployVMsToCloudParams) contextValidateDeployFleetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployFleetParams != nil {

		if swag.IsZero(m.DeployFleetParams) { // not required
			return nil
		}

		if err := m.DeployFleetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToCloudParams) contextValidateDeployVmsToAwsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToAwsParams != nil {

		if swag.IsZero(m.DeployVmsToAwsParams) { // not required
			return nil
		}

		if err := m.DeployVmsToAwsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToAwsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToAwsParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToCloudParams) contextValidateDeployVmsToAzureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToAzureParams != nil {

		if swag.IsZero(m.DeployVmsToAzureParams) { // not required
			return nil
		}

		if err := m.DeployVmsToAzureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToAzureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToAzureParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToCloudParams) contextValidateDeployVmsToGcpParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToGcpParams != nil {

		if swag.IsZero(m.DeployVmsToGcpParams) { // not required
			return nil
		}

		if err := m.DeployVmsToGcpParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToGcpParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToGcpParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToCloudParams) contextValidateReplicateSnapshotsToAwsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicateSnapshotsToAwsParams != nil {

		if swag.IsZero(m.ReplicateSnapshotsToAwsParams) { // not required
			return nil
		}

		if err := m.ReplicateSnapshotsToAwsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicateSnapshotsToAwsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicateSnapshotsToAwsParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToCloudParams) contextValidateReplicateSnapshotsToAzureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicateSnapshotsToAzureParams != nil {

		if swag.IsZero(m.ReplicateSnapshotsToAzureParams) { // not required
			return nil
		}

		if err := m.ReplicateSnapshotsToAzureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicateSnapshotsToAzureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicateSnapshotsToAzureParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployVMsToCloudParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployVMsToCloudParams) UnmarshalBinary(b []byte) error {
	var res DeployVMsToCloudParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
