// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CompareADObjectsResultADAttribute Represents an AD attribute(property).
//
// swagger:model CompareADObjectsResult_ADAttribute
type CompareADObjectsResultADAttribute struct {

	// Object result flags of type ADAttributeFlags.
	AttrFlags *uint32 `json:"attrFlags,omitempty"`

	// Destination attribute value if dest value exists
	// (!ADAttributeFlags.kNotFound) and is different from source.
	DestValue *CompareADObjectsResultADAttributeValue `json:"destValue,omitempty"`

	// LDAP attribute name.
	LdapName *string `json:"ldapName,omitempty"`

	// if the attribute values are same (ADAttributeFlags.kEqual), the value is
	// put here to avoid duplication in 'source_value' and 'dest_value'.
	SameValue *CompareADObjectsResultADAttributeValue `json:"sameValue,omitempty"`

	// Source attribute value if source value exists
	// (!ADAttributeFlags.kNotFound) and is different from destination.
	SourceValue *CompareADObjectsResultADAttributeValue `json:"sourceValue,omitempty"`

	// Error status for the attribute compare or value access.
	Status *ErrorProto `json:"status,omitempty"`
}

// Validate validates this compare a d objects result a d attribute
func (m *CompareADObjectsResultADAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSameValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareADObjectsResultADAttribute) validateDestValue(formats strfmt.Registry) error {
	if swag.IsZero(m.DestValue) { // not required
		return nil
	}

	if m.DestValue != nil {
		if err := m.DestValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destValue")
			}
			return err
		}
	}

	return nil
}

func (m *CompareADObjectsResultADAttribute) validateSameValue(formats strfmt.Registry) error {
	if swag.IsZero(m.SameValue) { // not required
		return nil
	}

	if m.SameValue != nil {
		if err := m.SameValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sameValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sameValue")
			}
			return err
		}
	}

	return nil
}

func (m *CompareADObjectsResultADAttribute) validateSourceValue(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceValue) { // not required
		return nil
	}

	if m.SourceValue != nil {
		if err := m.SourceValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceValue")
			}
			return err
		}
	}

	return nil
}

func (m *CompareADObjectsResultADAttribute) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this compare a d objects result a d attribute based on the context it is used
func (m *CompareADObjectsResultADAttribute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSameValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareADObjectsResultADAttribute) contextValidateDestValue(ctx context.Context, formats strfmt.Registry) error {

	if m.DestValue != nil {

		if swag.IsZero(m.DestValue) { // not required
			return nil
		}

		if err := m.DestValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destValue")
			}
			return err
		}
	}

	return nil
}

func (m *CompareADObjectsResultADAttribute) contextValidateSameValue(ctx context.Context, formats strfmt.Registry) error {

	if m.SameValue != nil {

		if swag.IsZero(m.SameValue) { // not required
			return nil
		}

		if err := m.SameValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sameValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sameValue")
			}
			return err
		}
	}

	return nil
}

func (m *CompareADObjectsResultADAttribute) contextValidateSourceValue(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceValue != nil {

		if swag.IsZero(m.SourceValue) { // not required
			return nil
		}

		if err := m.SourceValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceValue")
			}
			return err
		}
	}

	return nil
}

func (m *CompareADObjectsResultADAttribute) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompareADObjectsResultADAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompareADObjectsResultADAttribute) UnmarshalBinary(b []byte) error {
	var res CompareADObjectsResultADAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
