// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetViewsResult Get Views Result.
//
// Specifies the list of Views returned that matched the specified filter
// criteria.
//
// swagger:model GetViewsResult
type GetViewsResult struct {

	// If false, more Views are available to return. If the number of
	// Views to return exceeds the number of Views specified in maxCount
	// (default of 1000) of the original GET /public/views request,
	// the first set of Views are returned and this field returns false.
	// To get the next set of Views, in the next GET /public/views request
	// send the last id from the previous viewList.
	LastResult *bool `json:"lastResult,omitempty"`

	// Array of Views.
	//
	// Specifies the list of Views returned in this response.
	// The list is sorted by decreasing View ids.
	Views []*View `json:"views"`
}

// Validate validates this get views result
func (m *GetViewsResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateViews(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetViewsResult) validateViews(formats strfmt.Registry) error {
	if swag.IsZero(m.Views) { // not required
		return nil
	}

	for i := 0; i < len(m.Views); i++ {
		if swag.IsZero(m.Views[i]) { // not required
			continue
		}

		if m.Views[i] != nil {
			if err := m.Views[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("views" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("views" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get views result based on the context it is used
func (m *GetViewsResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateViews(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetViewsResult) contextValidateViews(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Views); i++ {

		if m.Views[i] != nil {

			if swag.IsZero(m.Views[i]) { // not required
				return nil
			}

			if err := m.Views[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("views" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("views" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetViewsResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetViewsResult) UnmarshalBinary(b []byte) error {
	var res GetViewsResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
