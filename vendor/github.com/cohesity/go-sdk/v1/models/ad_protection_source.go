// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdProtectionSource AD Protection Source.
//
// Specifies an object representing an AD entity.
//
// swagger:model AdProtectionSource
type AdProtectionSource struct {

	// Specifies the domain controller residing in this physical machine.
	DomainController *AdDomainController `json:"domainController,omitempty"`

	// Specifies the domain name corresponding to the domain controller.
	DomainName *string `json:"domainName,omitempty"`

	// Specifies the domain name of the AD entity.
	Name *string `json:"name,omitempty"`

	// Specifies the entity id of the owner entity.
	OwnerID *int64 `json:"ownerId,omitempty"`

	// Specifies the type of the managed object in AD Protection Source.
	// Specifies the kind of AD protection source.
	// 'kRootContainer' indicates the entity is a root container to an AD
	// domain controller.
	// 'kDomainController' indicates the domain controller hosted in this physical
	// server.
	// Enum: ["kRootContainer","kDomainController"]
	Type *string `json:"type,omitempty"`

	// Specifies the UUID for the AD entity.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this ad protection source
func (m *AdProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomainController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdProtectionSource) validateDomainController(formats strfmt.Registry) error {
	if swag.IsZero(m.DomainController) { // not required
		return nil
	}

	if m.DomainController != nil {
		if err := m.DomainController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domainController")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domainController")
			}
			return err
		}
	}

	return nil
}

var adProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRootContainer","kDomainController"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adProtectionSourceTypeTypePropEnum = append(adProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// AdProtectionSourceTypeKRootContainer captures enum value "kRootContainer"
	AdProtectionSourceTypeKRootContainer string = "kRootContainer"

	// AdProtectionSourceTypeKDomainController captures enum value "kDomainController"
	AdProtectionSourceTypeKDomainController string = "kDomainController"
)

// prop value enum
func (m *AdProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ad protection source based on the context it is used
func (m *AdProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDomainController(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdProtectionSource) contextValidateDomainController(ctx context.Context, formats strfmt.Registry) error {

	if m.DomainController != nil {

		if swag.IsZero(m.DomainController) { // not required
			return nil
		}

		if err := m.DomainController.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domainController")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domainController")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdProtectionSource) UnmarshalBinary(b []byte) error {
	var res AdProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
