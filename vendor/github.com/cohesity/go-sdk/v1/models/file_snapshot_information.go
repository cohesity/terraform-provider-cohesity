// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FileSnapshotInformation File/Folder Snapshot Information.
//
// Specifies the information about the snapshot that contains the file
// or folder. In addition, information about the file or folder is
// provided.
//
// swagger:model FileSnapshotInformation
type FileSnapshotInformation struct {

	// If true, this snapshot is located on an archival target
	// (such as a tape or AWS).
	HasArchivalCopy *bool `json:"hasArchivalCopy,omitempty"`

	// If true, this snapshot is located on a local Cohesity Cluster.
	HasLocalCopy *bool `json:"hasLocalCopy,omitempty"`

	// If true, this snapshot is located on a Remote Cohesity Cluster.
	HasRemoteCopy *bool `json:"hasRemoteCopy,omitempty"`

	// Specifies the time when the file or folder was last modified.
	// Specified as a Unix epoch Timestamp (in microseconds).
	ModifiedTimeUsecs *int64 `json:"modifiedTimeUsecs,omitempty"`

	// Specifies the list of replication information about the current snapshot.
	ReplicaInfoList []*ReplicaInfo `json:"replicaInfoList"`

	// Specifies the size of the file or folder in bytes.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`

	// Specifies the snapshot that contains the specified file or folder.
	Snapshot *SnapshotAttempt `json:"snapshot,omitempty"`
}

// Validate validates this file snapshot information
func (m *FileSnapshotInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplicaInfoList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileSnapshotInformation) validateReplicaInfoList(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaInfoList) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicaInfoList); i++ {
		if swag.IsZero(m.ReplicaInfoList[i]) { // not required
			continue
		}

		if m.ReplicaInfoList[i] != nil {
			if err := m.ReplicaInfoList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicaInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicaInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FileSnapshotInformation) validateSnapshot(formats strfmt.Registry) error {
	if swag.IsZero(m.Snapshot) { // not required
		return nil
	}

	if m.Snapshot != nil {
		if err := m.Snapshot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this file snapshot information based on the context it is used
func (m *FileSnapshotInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReplicaInfoList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileSnapshotInformation) contextValidateReplicaInfoList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicaInfoList); i++ {

		if m.ReplicaInfoList[i] != nil {

			if swag.IsZero(m.ReplicaInfoList[i]) { // not required
				return nil
			}

			if err := m.ReplicaInfoList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicaInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicaInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FileSnapshotInformation) contextValidateSnapshot(ctx context.Context, formats strfmt.Registry) error {

	if m.Snapshot != nil {

		if swag.IsZero(m.Snapshot) { // not required
			return nil
		}

		if err := m.Snapshot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FileSnapshotInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileSnapshotInformation) UnmarshalBinary(b []byte) error {
	var res FileSnapshotInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
