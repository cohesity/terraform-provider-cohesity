// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subnet Subnet
//
// Defines a Subnet (Subnetwork).
// The netmask can be specified by setting netmaskBits or netmaskIp4.
// The netmask can only be set using netmaskIp4 if the IP address
// is an IPv4 address.
//
// swagger:model Subnet
type Subnet struct {

	// Component that has reserved the subnet.
	Component *string `json:"component,omitempty"`

	// Description of the subnet.
	Description *string `json:"description,omitempty"`

	// ID of the subnet.
	ID *int32 `json:"id,omitempty"`

	// Specifies either an IPv6 address or an IPv4 address.
	IP *string `json:"ip,omitempty"`

	// Specifies the netmask using bits.
	NetmaskBits *int32 `json:"netmaskBits,omitempty"`

	// Specifies the netmask using an IP4 address.
	// The netmask can only be set using netmaskIp4 if the IP address
	// is an IPv4 address.
	NetmaskIp4 *string `json:"netmaskIp4,omitempty"`

	// Specifies whether clients from this subnet can mount using NFS protocol.
	// Protocol access level.
	// 'kDisabled' indicates Protocol access level 'Disabled'
	// 'kReadOnly' indicates Protocol access level 'ReadOnly'
	// 'kReadWrite' indicates Protocol access level 'ReadWrite'
	// Enum: ["kDisabled","kReadOnly","kReadWrite"]
	NfsAccess *string `json:"nfsAccess,omitempty"`

	// Specifies whether all clients from this subnet can map view with
	// view_all_squash_uid/view_all_squash_gid configured in the view.
	NfsAllSquash *bool `json:"nfsAllSquash,omitempty"`

	// Specifies whether clients from this subnet can mount as root on NFS.
	NfsRootSquash *bool `json:"nfsRootSquash,omitempty"`

	// Specifies whether clients from this subnet can access using S3 protocol.
	// Protocol access level.
	// 'kDisabled' indicates Protocol access level 'Disabled'
	// 'kReadOnly' indicates Protocol access level 'ReadOnly'
	// 'kReadWrite' indicates Protocol access level 'ReadWrite'
	// Enum: ["kDisabled","kReadOnly","kReadWrite"]
	S3Access *string `json:"s3Access,omitempty"`

	// Specifies whether clients from this subnet can mount using SMB protocol.
	// Protocol access level.
	// 'kDisabled' indicates Protocol access level 'Disabled'
	// 'kReadOnly' indicates Protocol access level 'ReadOnly'
	// 'kReadWrite' indicates Protocol access level 'ReadWrite'
	// Enum: ["kDisabled","kReadOnly","kReadWrite"]
	SmbAccess *string `json:"smbAccess,omitempty"`

	// Specifies the unique id of the tenant.
	TenantID *string `json:"tenantId,omitempty"`
}

// Validate validates this subnet
func (m *Subnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNfsAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3Access(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbAccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subnetTypeNfsAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDisabled","kReadOnly","kReadWrite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetTypeNfsAccessPropEnum = append(subnetTypeNfsAccessPropEnum, v)
	}
}

const (

	// SubnetNfsAccessKDisabled captures enum value "kDisabled"
	SubnetNfsAccessKDisabled string = "kDisabled"

	// SubnetNfsAccessKReadOnly captures enum value "kReadOnly"
	SubnetNfsAccessKReadOnly string = "kReadOnly"

	// SubnetNfsAccessKReadWrite captures enum value "kReadWrite"
	SubnetNfsAccessKReadWrite string = "kReadWrite"
)

// prop value enum
func (m *Subnet) validateNfsAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subnetTypeNfsAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subnet) validateNfsAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsAccess) { // not required
		return nil
	}

	// value enum
	if err := m.validateNfsAccessEnum("nfsAccess", "body", *m.NfsAccess); err != nil {
		return err
	}

	return nil
}

var subnetTypeS3AccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDisabled","kReadOnly","kReadWrite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetTypeS3AccessPropEnum = append(subnetTypeS3AccessPropEnum, v)
	}
}

const (

	// SubnetS3AccessKDisabled captures enum value "kDisabled"
	SubnetS3AccessKDisabled string = "kDisabled"

	// SubnetS3AccessKReadOnly captures enum value "kReadOnly"
	SubnetS3AccessKReadOnly string = "kReadOnly"

	// SubnetS3AccessKReadWrite captures enum value "kReadWrite"
	SubnetS3AccessKReadWrite string = "kReadWrite"
)

// prop value enum
func (m *Subnet) validateS3AccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subnetTypeS3AccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subnet) validateS3Access(formats strfmt.Registry) error {
	if swag.IsZero(m.S3Access) { // not required
		return nil
	}

	// value enum
	if err := m.validateS3AccessEnum("s3Access", "body", *m.S3Access); err != nil {
		return err
	}

	return nil
}

var subnetTypeSmbAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDisabled","kReadOnly","kReadWrite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetTypeSmbAccessPropEnum = append(subnetTypeSmbAccessPropEnum, v)
	}
}

const (

	// SubnetSmbAccessKDisabled captures enum value "kDisabled"
	SubnetSmbAccessKDisabled string = "kDisabled"

	// SubnetSmbAccessKReadOnly captures enum value "kReadOnly"
	SubnetSmbAccessKReadOnly string = "kReadOnly"

	// SubnetSmbAccessKReadWrite captures enum value "kReadWrite"
	SubnetSmbAccessKReadWrite string = "kReadWrite"
)

// prop value enum
func (m *Subnet) validateSmbAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subnetTypeSmbAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subnet) validateSmbAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.SmbAccess) { // not required
		return nil
	}

	// value enum
	if err := m.validateSmbAccessEnum("smbAccess", "body", *m.SmbAccess); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this subnet based on context it is used
func (m *Subnet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Subnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subnet) UnmarshalBinary(b []byte) error {
	var res Subnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
