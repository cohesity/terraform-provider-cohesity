// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SnapshotReplicasReplica snapshot replicas replica
//
// swagger:model SnapshotReplicas_Replica
type SnapshotReplicasReplica struct {

	// The UID of archive. This field will be populated only when
	// SnapshotTarget type is kArchival.
	ArchiveUID *UniversalIDProto `json:"archiveUid,omitempty"`

	// The time (in usecs) when the snapshot would expire at this location.
	ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

	// Whether this archive is in the cloud domain archive format.
	IsCloudDomainArchive *bool `json:"isCloudDomainArchive,omitempty"`

	// The target.
	Target *SnapshotTarget `json:"target,omitempty"`
}

// Validate validates this snapshot replicas replica
func (m *SnapshotReplicasReplica) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotReplicasReplica) validateArchiveUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchiveUID) { // not required
		return nil
	}

	if m.ArchiveUID != nil {
		if err := m.ArchiveUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archiveUid")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotReplicasReplica) validateTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapshot replicas replica based on the context it is used
func (m *SnapshotReplicasReplica) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchiveUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotReplicasReplica) contextValidateArchiveUID(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchiveUID != nil {

		if swag.IsZero(m.ArchiveUID) { // not required
			return nil
		}

		if err := m.ArchiveUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archiveUid")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotReplicasReplica) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {

		if swag.IsZero(m.Target) { // not required
			return nil
		}

		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotReplicasReplica) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotReplicasReplica) UnmarshalBinary(b []byte) error {
	var res SnapshotReplicasReplica
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
