// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeployVMsToGCPParams Contains GCP specific information needed to identify various resources
// when converting and deploying a VM to GCP.
//
// swagger:model DeployVMsToGCPParams
type DeployVMsToGCPParams struct {

	// Project id in which to deploy the VM.
	ProjectID *EntityProto `json:"projectId,omitempty"`

	// Region in which to deploy the VM.
	Region *EntityProto `json:"region,omitempty"`

	// Name of the subnet in which to deploy the VM. The name of the VPC netowrk
	// can be obtained from this subnet entity.
	Subnet *EntityProto `json:"subnet,omitempty"`

	// Zone in which to deploy the VM.
	Zone *EntityProto `json:"zone,omitempty"`
}

// Validate validates this deploy v ms to g c p params
func (m *DeployVMsToGCPParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployVMsToGCPParams) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if m.ProjectID != nil {
		if err := m.ProjectID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectId")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToGCPParams) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToGCPParams) validateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {
		if err := m.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToGCPParams) validateZone(formats strfmt.Registry) error {
	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if m.Zone != nil {
		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deploy v ms to g c p params based on the context it is used
func (m *DeployVMsToGCPParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjectID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployVMsToGCPParams) contextValidateProjectID(ctx context.Context, formats strfmt.Registry) error {

	if m.ProjectID != nil {

		if swag.IsZero(m.ProjectID) { // not required
			return nil
		}

		if err := m.ProjectID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectId")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToGCPParams) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToGCPParams) contextValidateSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.Subnet != nil {

		if swag.IsZero(m.Subnet) { // not required
			return nil
		}

		if err := m.Subnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToGCPParams) contextValidateZone(ctx context.Context, formats strfmt.Registry) error {

	if m.Zone != nil {

		if swag.IsZero(m.Zone) { // not required
			return nil
		}

		if err := m.Zone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployVMsToGCPParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployVMsToGCPParams) UnmarshalBinary(b []byte) error {
	var res DeployVMsToGCPParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
