// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupJobRunsProto A message to encapsulate a job description and runs associated with the job.
//
// It's possible for some of the runs to have used a previous version of the
// job description (as only the latest description is placed in this message).
//
// swagger:model BackupJobRunsProto
type BackupJobRunsProto struct {

	// The job for which jobs runs are being sent back.
	JobDescription *BackupJobProto `json:"jobDescription,omitempty"`

	// Runs satisfying the filter criteria. For each job, runs are guaranteed to
	// be sorted in descending order of the start time of the run. The first
	// entry in the list is the newest run, and the last entry is the oldest run.
	ProtectionRuns []*ProtectionRunStateProto `json:"protectionRuns"`
}

// Validate validates this backup job runs proto
func (m *BackupJobRunsProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionRuns(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobRunsProto) validateJobDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.JobDescription) { // not required
		return nil
	}

	if m.JobDescription != nil {
		if err := m.JobDescription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobDescription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobDescription")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobRunsProto) validateProtectionRuns(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionRuns) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionRuns); i++ {
		if swag.IsZero(m.ProtectionRuns[i]) { // not required
			continue
		}

		if m.ProtectionRuns[i] != nil {
			if err := m.ProtectionRuns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionRuns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionRuns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this backup job runs proto based on the context it is used
func (m *BackupJobRunsProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJobDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionRuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobRunsProto) contextValidateJobDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.JobDescription != nil {

		if swag.IsZero(m.JobDescription) { // not required
			return nil
		}

		if err := m.JobDescription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobDescription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobDescription")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobRunsProto) contextValidateProtectionRuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionRuns); i++ {

		if m.ProtectionRuns[i] != nil {

			if swag.IsZero(m.ProtectionRuns[i]) { // not required
				return nil
			}

			if err := m.ProtectionRuns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionRuns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionRuns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupJobRunsProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupJobRunsProto) UnmarshalBinary(b []byte) error {
	var res BackupJobRunsProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
