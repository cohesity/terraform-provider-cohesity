// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlackoutPeriod QuietTime Period.
//
// Specifies a time range in a single day when new Job Runs of
// Protection Jobs cannot be started. For example, a Protection Job
// with a daily schedule could define a QuietTime period for Sunday.
//
// swagger:model BlackoutPeriod
type BlackoutPeriod struct {

	// Specified the Id for a snapshot copy policy. This is generated when the
	// policy is created.
	ID *string `json:"Id,omitempty"`

	// QuietTime Day.
	//
	// Specifies a day in the week when no new Job Runs should be started
	// such as 'kSunday'.
	// If not set, the time range applies to all days.
	// Specifies a day in a week such as 'kSunday', 'kMonday', etc.
	// Enum: ["kSunday","kMonday","kTuesday","kWednesday","kThursday","kFriday","kSaturday"]
	Day *string `json:"day,omitempty"`

	// QuietTime End Time.
	//
	// Specifies the end time of the QuietTime time range.
	EndTime struct {
		TimeOfDay
	} `json:"endTime,omitempty"`

	// QuietTime Start Time.
	//
	// Specifies the start time of the QuietTime time range.
	StartTime struct {
		TimeOfDay
	} `json:"startTime,omitempty"`
}

// Validate validates this blackout period
func (m *BlackoutPeriod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var blackoutPeriodTypeDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSunday","kMonday","kTuesday","kWednesday","kThursday","kFriday","kSaturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blackoutPeriodTypeDayPropEnum = append(blackoutPeriodTypeDayPropEnum, v)
	}
}

const (

	// BlackoutPeriodDayKSunday captures enum value "kSunday"
	BlackoutPeriodDayKSunday string = "kSunday"

	// BlackoutPeriodDayKMonday captures enum value "kMonday"
	BlackoutPeriodDayKMonday string = "kMonday"

	// BlackoutPeriodDayKTuesday captures enum value "kTuesday"
	BlackoutPeriodDayKTuesday string = "kTuesday"

	// BlackoutPeriodDayKWednesday captures enum value "kWednesday"
	BlackoutPeriodDayKWednesday string = "kWednesday"

	// BlackoutPeriodDayKThursday captures enum value "kThursday"
	BlackoutPeriodDayKThursday string = "kThursday"

	// BlackoutPeriodDayKFriday captures enum value "kFriday"
	BlackoutPeriodDayKFriday string = "kFriday"

	// BlackoutPeriodDayKSaturday captures enum value "kSaturday"
	BlackoutPeriodDayKSaturday string = "kSaturday"
)

// prop value enum
func (m *BlackoutPeriod) validateDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, blackoutPeriodTypeDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BlackoutPeriod) validateDay(formats strfmt.Registry) error {
	if swag.IsZero(m.Day) { // not required
		return nil
	}

	// value enum
	if err := m.validateDayEnum("day", "body", *m.Day); err != nil {
		return err
	}

	return nil
}

func (m *BlackoutPeriod) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	return nil
}

func (m *BlackoutPeriod) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this blackout period based on the context it is used
func (m *BlackoutPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlackoutPeriod) contextValidateEndTime(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BlackoutPeriod) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *BlackoutPeriod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlackoutPeriod) UnmarshalBinary(b []byte) error {
	var res BlackoutPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
