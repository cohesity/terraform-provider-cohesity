// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRemoteVaultRestoreTaskParameters Create Remote Vault Restore Task Request.
//
// Specifies settings required to create a task that restores the
// index and/or the Snapshots of a Protection Job from a remote Vault
// to the current Cluster.
//
// swagger:model CreateRemoteVaultRestoreTaskParameters
type CreateRemoteVaultRestoreTaskParameters struct {

	// Specifies the way data needs to be retrieved from the external target.
	// This information will be filled in by Iris and Magneto will pass it along
	// to the Icebox as it is to support bulk retrieval from Glacier.
	// Specifies the type of Restore Task.
	//
	// 'kStandard' specifies retrievals that allow to access any of your archives
	// within several hours. Standard retrievals typically complete within 3–5
	// hours. This is the default option for retrieval requests that do not specify
	// the retrieval option.
	// 'kBulk' specifies retrievals that are Glacier’s lowest-cost retrieval
	// option, which can be used to retrieve large amounts, even petabytes, of data
	// inexpensively in a day. Bulk retrieval typically complete within 5–12 hours.
	// 'kExpedited' specifies retrievals that allows to quickly access your data
	// when occasional urgent requests for a subset of archives are required. For
	// all but the largest archives (250 MB+), data accessed using Expedited
	// retrievals are typically made available within 1–5 minutes.
	// Enum: ["kStandard","kBulk","kExpedited"]
	GlacierRetrievalType *string `json:"glacierRetrievalType,omitempty"`

	// Array of Restore Objects.
	//
	// Specifies the list of Snapshots and the index to be restored from the
	// remote Vault. The data on the remote Vault may have been
	// originally archived from multiple remote Clusters.
	RestoreObjects []*IndexAndSnapshots `json:"restoreObjects"`

	// Search Job Uid.
	//
	// Specifies the unique id of the remote Vault search Job.
	// Required: true
	SearchJobUID struct {
		UniversalID
	} `json:"searchJobUid"`

	// Specifies a name of the restore task.
	// Required: true
	TaskName *string `json:"taskName"`

	// Specifies the id of the Vault that contains the index and
	// Snapshots to restore to the current Cluster.
	// This is the id assigned by the Cohesity Cluster when Vault was
	// registered as an External Target.
	// Required: true
	VaultID *int64 `json:"vaultId"`
}

// Validate validates this create remote vault restore task parameters
func (m *CreateRemoteVaultRestoreTaskParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGlacierRetrievalType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchJobUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createRemoteVaultRestoreTaskParametersTypeGlacierRetrievalTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStandard","kBulk","kExpedited"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRemoteVaultRestoreTaskParametersTypeGlacierRetrievalTypePropEnum = append(createRemoteVaultRestoreTaskParametersTypeGlacierRetrievalTypePropEnum, v)
	}
}

const (

	// CreateRemoteVaultRestoreTaskParametersGlacierRetrievalTypeKStandard captures enum value "kStandard"
	CreateRemoteVaultRestoreTaskParametersGlacierRetrievalTypeKStandard string = "kStandard"

	// CreateRemoteVaultRestoreTaskParametersGlacierRetrievalTypeKBulk captures enum value "kBulk"
	CreateRemoteVaultRestoreTaskParametersGlacierRetrievalTypeKBulk string = "kBulk"

	// CreateRemoteVaultRestoreTaskParametersGlacierRetrievalTypeKExpedited captures enum value "kExpedited"
	CreateRemoteVaultRestoreTaskParametersGlacierRetrievalTypeKExpedited string = "kExpedited"
)

// prop value enum
func (m *CreateRemoteVaultRestoreTaskParameters) validateGlacierRetrievalTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createRemoteVaultRestoreTaskParametersTypeGlacierRetrievalTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateRemoteVaultRestoreTaskParameters) validateGlacierRetrievalType(formats strfmt.Registry) error {
	if swag.IsZero(m.GlacierRetrievalType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGlacierRetrievalTypeEnum("glacierRetrievalType", "body", *m.GlacierRetrievalType); err != nil {
		return err
	}

	return nil
}

func (m *CreateRemoteVaultRestoreTaskParameters) validateRestoreObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.RestoreObjects); i++ {
		if swag.IsZero(m.RestoreObjects[i]) { // not required
			continue
		}

		if m.RestoreObjects[i] != nil {
			if err := m.RestoreObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateRemoteVaultRestoreTaskParameters) validateSearchJobUID(formats strfmt.Registry) error {

	return nil
}

func (m *CreateRemoteVaultRestoreTaskParameters) validateTaskName(formats strfmt.Registry) error {

	if err := validate.Required("taskName", "body", m.TaskName); err != nil {
		return err
	}

	return nil
}

func (m *CreateRemoteVaultRestoreTaskParameters) validateVaultID(formats strfmt.Registry) error {

	if err := validate.Required("vaultId", "body", m.VaultID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create remote vault restore task parameters based on the context it is used
func (m *CreateRemoteVaultRestoreTaskParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRestoreObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSearchJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRemoteVaultRestoreTaskParameters) contextValidateRestoreObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestoreObjects); i++ {

		if m.RestoreObjects[i] != nil {

			if swag.IsZero(m.RestoreObjects[i]) { // not required
				return nil
			}

			if err := m.RestoreObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateRemoteVaultRestoreTaskParameters) contextValidateSearchJobUID(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *CreateRemoteVaultRestoreTaskParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRemoteVaultRestoreTaskParameters) UnmarshalBinary(b []byte) error {
	var res CreateRemoteVaultRestoreTaskParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
