// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateExchangeDatabaseCopyInfo Message represents one Exchange database copy. The copy can be of type
// DAG active copy or DAG passive copy or standalone database.
//
// swagger:model PrivateExchangeDatabaseCopyInfo
type PrivateExchangeDatabaseCopyInfo struct {

	// Activation preference number assigned for this database on 'owner_id'.
	// This is 1 based number assigned in Exchange Admin Console.
	ActivationPreferenceNumber *uint32 `json:"activationPreferenceNumber,omitempty"`

	// Free form text for the reasons why backup is not supported for this DB.
	// This is valid only if is_backup_supported = false.
	BackupUnsupportedReasonVec []string `json:"backupUnsupportedReasonVec"`

	// When this DB was created in local time.
	CreationDate *LocalTime `json:"creationDate,omitempty"`

	// Guid of the db copy. This represents copy database guid for a DAG
	// database and for standalone Exchange database this will not be set.
	// This database will be hosted on 'owner_id'.
	DbGUID *string `json:"dbGuid,omitempty"`

	// Id of the entity corresponding to this database copy.
	EntityID *int64 `json:"entityId,omitempty"`

	// The entity id of the Exchange source which hosts this database.
	ExchangeID *int64 `json:"exchangeId,omitempty"`

	// Identity of the database. This represents parent database id for
	// a DAG database copy and database id of itself for a standalone Exchange
	// database.
	ID *ExchangeDatabaseIdentity `json:"id,omitempty"`

	// Indicates whether this is the active database copy.
	IsActive *bool `json:"isActive,omitempty"`

	// Whether backing up this DB is supported or not due to system or
	// implementation limitations.
	IsBackupSupported *bool `json:"isBackupSupported,omitempty"`

	// Indicates whether this is copy of a DAG database or standalone database.
	IsDagDbCopy *bool `json:"isDagDbCopy,omitempty"`

	// The owner entity id on which this database is hosted.
	OwnerID *int64 `json:"ownerId,omitempty"`

	// Replay Lag Time in hours configured in Exchange Admin Console for the
	// database. This value is specific to an Exchange server node.
	ReplayLagHours *uint32 `json:"replayLagHours,omitempty"`

	// Exchange server identifier on which this database copy is hosted.
	ServerID *ExchangeServerIdentity `json:"serverId,omitempty"`

	// Exchange database information.
	Status *int32 `json:"status,omitempty"`

	// Total size of the Exchange database copy in bytes.
	TotalSizeInBytes *int64 `json:"totalSizeInBytes,omitempty"`
}

// Validate validates this private exchange database copy info
func (m *PrivateExchangeDatabaseCopyInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateExchangeDatabaseCopyInfo) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if m.CreationDate != nil {
		if err := m.CreationDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creationDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creationDate")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeDatabaseCopyInfo) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if m.ID != nil {
		if err := m.ID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeDatabaseCopyInfo) validateServerID(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerID) { // not required
		return nil
	}

	if m.ServerID != nil {
		if err := m.ServerID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serverId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serverId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private exchange database copy info based on the context it is used
func (m *PrivateExchangeDatabaseCopyInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreationDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateExchangeDatabaseCopyInfo) contextValidateCreationDate(ctx context.Context, formats strfmt.Registry) error {

	if m.CreationDate != nil {

		if swag.IsZero(m.CreationDate) { // not required
			return nil
		}

		if err := m.CreationDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creationDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creationDate")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeDatabaseCopyInfo) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if m.ID != nil {

		if swag.IsZero(m.ID) { // not required
			return nil
		}

		if err := m.ID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeDatabaseCopyInfo) contextValidateServerID(ctx context.Context, formats strfmt.Registry) error {

	if m.ServerID != nil {

		if swag.IsZero(m.ServerID) { // not required
			return nil
		}

		if err := m.ServerID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serverId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serverId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateExchangeDatabaseCopyInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateExchangeDatabaseCopyInfo) UnmarshalBinary(b []byte) error {
	var res PrivateExchangeDatabaseCopyInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
