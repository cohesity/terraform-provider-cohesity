// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetappVserverInfo NetApp Vserver Information.
//
// Specifies information about a NetApp Vserver in a NetApp Protection Source.
//
// swagger:model NetappVserverInfo
type NetappVserverInfo struct {

	// Array of Data Protocols.
	//
	// Specifies the set of data protocols supported by this Vserver.
	// The kManagement protocol is not supported for this case.
	// 'kNfs' indicates NFS connections.
	// 'kCifs' indicates SMB (CIFS) connections.
	// 'kIscsi' indicates iSCSI connections.
	// 'kFc' indicates Fiber Channel connections.
	// 'kFcache' indicates Flex Cache connections.
	// 'kHttp' indicates HTTP connections.
	// 'kNdmp' indicates NDMP connections.
	// 'kManagement' indicates non-data connections used for management purposes.
	// 'kNvme' indicates NVMe connections.
	DataProtocols []string `json:"dataProtocols"`

	// Array of Interfaces.
	//
	// Specifies information about all interfaces on this Vserver.
	Interfaces []*VserverNetworkInterface `json:"interfaces"`

	// Specifies the root 'c$' CIFS share of this Vserver.
	// If it exists, it can be used to mount all CIFS volumes that are
	// junctioned under '/' on this Vserver.
	RootCifsShare *CifsShareInfo `json:"rootCifsShare,omitempty"`

	// Specifies the type of this Vserver.
	// Specifies the type of the NetApp Vserver.
	// 'kData' indicates the Vserver is used for data backup and restore.
	// 'kAdmin' indicates the Vserver is used for cluster-wide management.
	// 'kSystem' indicates the Vserver is used for cluster-scoped communications
	// in an IPspace.
	// 'kNode' indicates the Vserver is used as the physical controller.
	// 'kUnknown' indicates the Vserver is used for an unknown purpose.
	// Enum: ["kData","kAdmin","kSystem","kNode","kUnknown"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this netapp vserver info
func (m *NetappVserverInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataProtocols(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCifsShare(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var netappVserverInfoDataProtocolsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kCifs","kIscsi","kFc","kFcache","kHttp","kNdmp","kManagement","kNvme"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netappVserverInfoDataProtocolsItemsEnum = append(netappVserverInfoDataProtocolsItemsEnum, v)
	}
}

func (m *NetappVserverInfo) validateDataProtocolsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, netappVserverInfoDataProtocolsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetappVserverInfo) validateDataProtocols(formats strfmt.Registry) error {
	if swag.IsZero(m.DataProtocols) { // not required
		return nil
	}

	for i := 0; i < len(m.DataProtocols); i++ {

		// value enum
		if err := m.validateDataProtocolsItemsEnum("dataProtocols"+"."+strconv.Itoa(i), "body", m.DataProtocols[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *NetappVserverInfo) validateInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Interfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.Interfaces); i++ {
		if swag.IsZero(m.Interfaces[i]) { // not required
			continue
		}

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetappVserverInfo) validateRootCifsShare(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCifsShare) { // not required
		return nil
	}

	if m.RootCifsShare != nil {
		if err := m.RootCifsShare.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootCifsShare")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootCifsShare")
			}
			return err
		}
	}

	return nil
}

var netappVserverInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kData","kAdmin","kSystem","kNode","kUnknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netappVserverInfoTypeTypePropEnum = append(netappVserverInfoTypeTypePropEnum, v)
	}
}

const (

	// NetappVserverInfoTypeKData captures enum value "kData"
	NetappVserverInfoTypeKData string = "kData"

	// NetappVserverInfoTypeKAdmin captures enum value "kAdmin"
	NetappVserverInfoTypeKAdmin string = "kAdmin"

	// NetappVserverInfoTypeKSystem captures enum value "kSystem"
	NetappVserverInfoTypeKSystem string = "kSystem"

	// NetappVserverInfoTypeKNode captures enum value "kNode"
	NetappVserverInfoTypeKNode string = "kNode"

	// NetappVserverInfoTypeKUnknown captures enum value "kUnknown"
	NetappVserverInfoTypeKUnknown string = "kUnknown"
)

// prop value enum
func (m *NetappVserverInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, netappVserverInfoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetappVserverInfo) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this netapp vserver info based on the context it is used
func (m *NetappVserverInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootCifsShare(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetappVserverInfo) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Interfaces); i++ {

		if m.Interfaces[i] != nil {

			if swag.IsZero(m.Interfaces[i]) { // not required
				return nil
			}

			if err := m.Interfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetappVserverInfo) contextValidateRootCifsShare(ctx context.Context, formats strfmt.Registry) error {

	if m.RootCifsShare != nil {

		if swag.IsZero(m.RootCifsShare) { // not required
			return nil
		}

		if err := m.RootCifsShare.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootCifsShare")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootCifsShare")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetappVserverInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetappVserverInfo) UnmarshalBinary(b []byte) error {
	var res NetappVserverInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
