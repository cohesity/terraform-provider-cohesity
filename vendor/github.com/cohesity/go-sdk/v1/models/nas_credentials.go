// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NasCredentials NAS Server Credentials.
//
// Specifies the server credentials to connect to a NetApp server.
//
// swagger:model NasCredentials
type NasCredentials struct {

	// Specifies the hostname or IP address of the NAS server.
	Host *string `json:"host,omitempty"`

	// If applicable and specified, the realm name of the Kerberos provider
	// security the NFS share.
	KerberosRealmName *string `json:"kerberosRealmName,omitempty"`

	// Specifies the mount path to the NAS server.
	MountPath *string `json:"mountPath,omitempty"`

	// If applicable and specified, the NFS security type of the NFS share.
	// Enum: ["see proto definition"]
	NfsSecurityType *string `json:"nfsSecurityType,omitempty"`

	// If applicable and specified, the NFS version number of the NFS share.
	// Enum: ["see protobuf definition"]
	NfsVersionNumber *string `json:"nfsVersionNumber,omitempty"`

	// If using the CIFS protocol and a Username was specified, specify
	// the password for the username.
	Password *string `json:"password,omitempty"`

	// Specifies the sharing protocol type used to mount the file system.
	// Currently, only NFS is supported.
	// 'kNFS' indicates use the NFS protocol to mount the file system.
	// 'kCIFS' indicates use the CIFS protocol to mount the file system.
	// Enum: ["kNFS","kCIFS"]
	ShareType *string `json:"shareType,omitempty"`

	// If using the CIFS protocol, you can optional specify a username
	// to use when mounting.
	Username *string `json:"username,omitempty"`
}

// Validate validates this nas credentials
func (m *NasCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNfsSecurityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShareType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nasCredentialsTypeNfsSecurityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["see proto definition"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nasCredentialsTypeNfsSecurityTypePropEnum = append(nasCredentialsTypeNfsSecurityTypePropEnum, v)
	}
}

const (

	// NasCredentialsNfsSecurityTypeSeeProtoDefinition captures enum value "see proto definition"
	NasCredentialsNfsSecurityTypeSeeProtoDefinition string = "see proto definition"
)

// prop value enum
func (m *NasCredentials) validateNfsSecurityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nasCredentialsTypeNfsSecurityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NasCredentials) validateNfsSecurityType(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsSecurityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNfsSecurityTypeEnum("nfsSecurityType", "body", *m.NfsSecurityType); err != nil {
		return err
	}

	return nil
}

var nasCredentialsTypeNfsVersionNumberPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["see protobuf definition"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nasCredentialsTypeNfsVersionNumberPropEnum = append(nasCredentialsTypeNfsVersionNumberPropEnum, v)
	}
}

const (

	// NasCredentialsNfsVersionNumberSeeProtobufDefinition captures enum value "see protobuf definition"
	NasCredentialsNfsVersionNumberSeeProtobufDefinition string = "see protobuf definition"
)

// prop value enum
func (m *NasCredentials) validateNfsVersionNumberEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nasCredentialsTypeNfsVersionNumberPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NasCredentials) validateNfsVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsVersionNumber) { // not required
		return nil
	}

	// value enum
	if err := m.validateNfsVersionNumberEnum("nfsVersionNumber", "body", *m.NfsVersionNumber); err != nil {
		return err
	}

	return nil
}

var nasCredentialsTypeShareTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNFS","kCIFS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nasCredentialsTypeShareTypePropEnum = append(nasCredentialsTypeShareTypePropEnum, v)
	}
}

const (

	// NasCredentialsShareTypeKNFS captures enum value "kNFS"
	NasCredentialsShareTypeKNFS string = "kNFS"

	// NasCredentialsShareTypeKCIFS captures enum value "kCIFS"
	NasCredentialsShareTypeKCIFS string = "kCIFS"
)

// prop value enum
func (m *NasCredentials) validateShareTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nasCredentialsTypeShareTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NasCredentials) validateShareType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShareType) { // not required
		return nil
	}

	// value enum
	if err := m.validateShareTypeEnum("shareType", "body", *m.ShareType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nas credentials based on context it is used
func (m *NasCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NasCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NasCredentials) UnmarshalBinary(b []byte) error {
	var res NasCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
