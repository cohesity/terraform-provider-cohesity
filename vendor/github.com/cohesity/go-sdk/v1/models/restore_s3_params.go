// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreS3Params Message containing params for restoring S3 buckets/objects.
//
// swagger:model RestoreS3Params
type RestoreS3Params struct {

	// Flag specifying if it is an original location recovery or a new location.
	IsOriginalLocation *bool `json:"isOriginalLocation,omitempty"`

	// Params specifying new location details.
	NewLocationParams *RestoreS3ParamsNewLocationParams `json:"newLocationParams,omitempty"`

	// Object prefix for the recovered objects. E.g. "/", "/a/b". All operations
	// at S3 Bucket (lookup, upload, etc.) will prepend this prefix to the Object
	// name.
	ObjectPrefix *string `json:"objectPrefix,omitempty"`

	// Flag specifying if we should overwrite if files are already present in the
	// target location.
	OverwriteObjectsInBucket *bool `json:"overwriteObjectsInBucket,omitempty"`

	// Specifies all the prefixes which we have to recover. If it is empty,
	// then magneto will recover the whole bucket.
	PrefixesToRecover []string `json:"prefixesToRecover"`

	// Flag specifying if we should preserve object attributes at the time of
	// restore.
	PreserveObjectAttributes *bool `json:"preserveObjectAttributes,omitempty"`
}

// Validate validates this restore s3 params
func (m *RestoreS3Params) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewLocationParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreS3Params) validateNewLocationParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NewLocationParams) { // not required
		return nil
	}

	if m.NewLocationParams != nil {
		if err := m.NewLocationParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newLocationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newLocationParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore s3 params based on the context it is used
func (m *RestoreS3Params) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewLocationParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreS3Params) contextValidateNewLocationParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NewLocationParams != nil {

		if swag.IsZero(m.NewLocationParams) { // not required
			return nil
		}

		if err := m.NewLocationParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newLocationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newLocationParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreS3Params) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreS3Params) UnmarshalBinary(b []byte) error {
	var res RestoreS3Params
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
