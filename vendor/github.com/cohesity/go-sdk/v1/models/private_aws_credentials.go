// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateAwsCredentials The credentials associated with an IAM user in the customer's AWS account.
//
// swagger:model PrivateAwsCredentials
type PrivateAwsCredentials struct {

	// Access key id.
	AccessKeyID *string `json:"accessKeyId,omitempty"`

	// Authentication method to be used for API calls.
	AuthMethod *int32 `json:"authMethod,omitempty"`

	// Information related to the AD account managed by AWS.
	AwsManagedAd *AWSManagedADInfo `json:"awsManagedAd,omitempty"`

	// C2S CAP server information.
	C2SServerCapInfo *C2SCAPServerInfo `json:"c2SServerCapInfo,omitempty"`

	// This is only applicable in case of DMaaS. Control plane IAM role ARN,
	// this is first assumed by the dataplane(cluster). Then we assume the
	// iam_role_arn which is tenant's IAM role with all required permissions.
	CpIamRoleArn *string `json:"cpIamRoleArn,omitempty"`

	// Encrypted secret access key.
	EncryptedSecretAccessKey []uint8 `json:"encryptedSecretAccessKey"`

	// Endpoint to be used while connecting with AWS. Currently this is being
	// used to communicate with Cohesity S3. Note: Vault type will be
	// S3-Compatible.
	Endpoint *string `json:"endpoint,omitempty"`

	// IAM role which will be used to access the security credentials required
	// for API calls. This should have all the permissions required for the
	// tenant's use case.
	//
	// In case of DMaaS this will be the Tenant's IAM role ARN. This is assumed
	// only after the cp_iam_role_arn(control plane role) is assumed.
	IamRoleArn *string `json:"iamRoleArn,omitempty"`

	// Secret access key.
	SecretAccessKey *string `json:"secretAccessKey,omitempty"`

	// Session token.
	SessionToken []uint8 `json:"sessionToken"`

	// Represents which type of subscription the credentials belong to. Depending
	// upon the type of subscription, whether AWS Commercial or AWS Gov cloud we
	// will need to use different ClientConfigurations when talking to various
	// Azure services.
	SubscriptionType *int32 `json:"subscriptionType,omitempty"`
}

// Validate validates this private aws credentials
func (m *PrivateAwsCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsManagedAd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateC2SServerCapInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAwsCredentials) validateAwsManagedAd(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsManagedAd) { // not required
		return nil
	}

	if m.AwsManagedAd != nil {
		if err := m.AwsManagedAd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsManagedAd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsManagedAd")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsCredentials) validateC2SServerCapInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.C2SServerCapInfo) { // not required
		return nil
	}

	if m.C2SServerCapInfo != nil {
		if err := m.C2SServerCapInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("c2SServerCapInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("c2SServerCapInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private aws credentials based on the context it is used
func (m *PrivateAwsCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsManagedAd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateC2SServerCapInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAwsCredentials) contextValidateAwsManagedAd(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsManagedAd != nil {

		if swag.IsZero(m.AwsManagedAd) { // not required
			return nil
		}

		if err := m.AwsManagedAd.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsManagedAd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsManagedAd")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAwsCredentials) contextValidateC2SServerCapInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.C2SServerCapInfo != nil {

		if swag.IsZero(m.C2SServerCapInfo) { // not required
			return nil
		}

		if err := m.C2SServerCapInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("c2SServerCapInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("c2SServerCapInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateAwsCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateAwsCredentials) UnmarshalBinary(b []byte) error {
	var res PrivateAwsCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
