// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CdpHydrationParamsLogData cdp hydration params log data
//
// swagger:model CdpHydrationParams_LogData
type CdpHydrationParamsLogData struct {

	// End sequence number in the log file till which the data needs to be
	// applied. If this not populated, hydration_time_usecs must be used for
	// determining the point till which the log needs to be applied for
	// hydration.
	EndSeqNumber *Sequencer `json:"endSeqNumber,omitempty"`

	// Whether the CDP journal is sharded. Due to the possibility of sharded
	// and non-sharded files in CDP sync replication, this flag is added to the
	// file level.
	IsJournalSharded *bool `json:"isJournalSharded,omitempty"`

	// Full path + name of the log file that needs to be processed.
	LogFileName *string `json:"logFileName,omitempty"`

	// Log files are cloned from Atom's view into Magneto's view. It may
	// happen that the log file contains sequence numbers that spans across
	// hydration events. In such cases, we will mark them for removal only
	// when the last sequence number in the log file has been processed in
	// the current hydration event.
	RemovalNeeded *bool `json:"removalNeeded,omitempty"`

	// Start sequence number in the log file from which the data needs to be
	// applied for hydration.
	StartSeqNumber *Sequencer `json:"startSeqNumber,omitempty"`
}

// Validate validates this cdp hydration params log data
func (m *CdpHydrationParamsLogData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndSeqNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartSeqNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpHydrationParamsLogData) validateEndSeqNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.EndSeqNumber) { // not required
		return nil
	}

	if m.EndSeqNumber != nil {
		if err := m.EndSeqNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endSeqNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endSeqNumber")
			}
			return err
		}
	}

	return nil
}

func (m *CdpHydrationParamsLogData) validateStartSeqNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.StartSeqNumber) { // not required
		return nil
	}

	if m.StartSeqNumber != nil {
		if err := m.StartSeqNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startSeqNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startSeqNumber")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cdp hydration params log data based on the context it is used
func (m *CdpHydrationParamsLogData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndSeqNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartSeqNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpHydrationParamsLogData) contextValidateEndSeqNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.EndSeqNumber != nil {

		if swag.IsZero(m.EndSeqNumber) { // not required
			return nil
		}

		if err := m.EndSeqNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endSeqNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endSeqNumber")
			}
			return err
		}
	}

	return nil
}

func (m *CdpHydrationParamsLogData) contextValidateStartSeqNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.StartSeqNumber != nil {

		if swag.IsZero(m.StartSeqNumber) { // not required
			return nil
		}

		if err := m.StartSeqNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startSeqNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startSeqNumber")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdpHydrationParamsLogData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdpHydrationParamsLogData) UnmarshalBinary(b []byte) error {
	var res CdpHydrationParamsLogData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
