// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MaintenanceModeConfigProto maintenance mode config proto
//
// swagger:model MaintenanceModeConfigProto
type MaintenanceModeConfigProto struct {

	// This specifies the absolute intervals where the maintenance schedule is
	// valid, i.e. maintenance_shedule is considered only for these time ranges.
	// (For example, if there is one time range with [now_usecs, now_usecs + 10
	// days], the action will be done during the maintenance_schedule for the
	// next 10 days.)
	// The start time must be specified. The end time can be -1 which would
	// denote an indefinite maintenance mode.
	ActivationTimeIntervals []*TimeRangeUsecs `json:"activationTimeIntervals"`

	// The schedule to be followed in the activation_time_intervals.
	MaintenanceSchedule *ScheduleProto `json:"maintenanceSchedule,omitempty"`

	// User provided message associated with this maintenance mode.
	UserMessage *string `json:"userMessage,omitempty"`

	// The type of intervention for different workflows when the source goes
	// into maintenance mode. By default, the workflows not in this vec have
	// kNoIntervention, i.e., the workflow will proceed to completion.
	WorkflowInterventionSpecVec []*MaintenanceModeConfigProtoWorkflowInterventionSpec `json:"workflowInterventionSpecVec"`
}

// Validate validates this maintenance mode config proto
func (m *MaintenanceModeConfigProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivationTimeIntervals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowInterventionSpecVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaintenanceModeConfigProto) validateActivationTimeIntervals(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivationTimeIntervals) { // not required
		return nil
	}

	for i := 0; i < len(m.ActivationTimeIntervals); i++ {
		if swag.IsZero(m.ActivationTimeIntervals[i]) { // not required
			continue
		}

		if m.ActivationTimeIntervals[i] != nil {
			if err := m.ActivationTimeIntervals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activationTimeIntervals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activationTimeIntervals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MaintenanceModeConfigProto) validateMaintenanceSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.MaintenanceSchedule) { // not required
		return nil
	}

	if m.MaintenanceSchedule != nil {
		if err := m.MaintenanceSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenanceSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenanceSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *MaintenanceModeConfigProto) validateWorkflowInterventionSpecVec(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkflowInterventionSpecVec) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkflowInterventionSpecVec); i++ {
		if swag.IsZero(m.WorkflowInterventionSpecVec[i]) { // not required
			continue
		}

		if m.WorkflowInterventionSpecVec[i] != nil {
			if err := m.WorkflowInterventionSpecVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflowInterventionSpecVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflowInterventionSpecVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this maintenance mode config proto based on the context it is used
func (m *MaintenanceModeConfigProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivationTimeIntervals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaintenanceSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflowInterventionSpecVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaintenanceModeConfigProto) contextValidateActivationTimeIntervals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActivationTimeIntervals); i++ {

		if m.ActivationTimeIntervals[i] != nil {

			if swag.IsZero(m.ActivationTimeIntervals[i]) { // not required
				return nil
			}

			if err := m.ActivationTimeIntervals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activationTimeIntervals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activationTimeIntervals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MaintenanceModeConfigProto) contextValidateMaintenanceSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.MaintenanceSchedule != nil {

		if swag.IsZero(m.MaintenanceSchedule) { // not required
			return nil
		}

		if err := m.MaintenanceSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenanceSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenanceSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *MaintenanceModeConfigProto) contextValidateWorkflowInterventionSpecVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WorkflowInterventionSpecVec); i++ {

		if m.WorkflowInterventionSpecVec[i] != nil {

			if swag.IsZero(m.WorkflowInterventionSpecVec[i]) { // not required
				return nil
			}

			if err := m.WorkflowInterventionSpecVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflowInterventionSpecVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflowInterventionSpecVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaintenanceModeConfigProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaintenanceModeConfigProto) UnmarshalBinary(b []byte) error {
	var res MaintenanceModeConfigProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
