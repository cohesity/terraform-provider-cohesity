// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SQLBackupParams This message contains additional params for a SQL job run.
//
// TODO(abhijit): Rename this to SqlBackupTaskParams.
//
// swagger:model SqlBackupParams
type SQLBackupParams struct {

	// The application entities, if any, that are associated with the job run.
	// For example, for a tail log backup triggered by a SQL restore operation,
	// this will contain the databases being restored.
	AppEntityVec []*PrivateEntityProto `json:"appEntityVec"`

	// Used to indicate if the salve can use the native backup flow to perfrom
	// the log backup.
	BackupLogUsingNativeOp *bool `json:"backupLogUsingNativeOp,omitempty"`

	// Set to true if this is a SQL tail log backup run.
	IsSQLTailLogBackup *bool `json:"isSqlTailLogBackup,omitempty"`

	// The path to the progress monitor root path prefix. If set, this prefix
	// will be used by the backup job runs in their progress monitors.
	ProgressMonitorRootPathPrefix *string `json:"progressMonitorRootPathPrefix,omitempty"`

	// The task id of a related restore task if any. For example, if this is
	// a tail log backup triggered by a SQL restore operation, this id is
	// set to the task id of the restore task.
	RelatedRestoreTaskID *int64 `json:"relatedRestoreTaskId,omitempty"`
}

// Validate validates this Sql backup params
func (m *SQLBackupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppEntityVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SQLBackupParams) validateAppEntityVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AppEntityVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AppEntityVec); i++ {
		if swag.IsZero(m.AppEntityVec[i]) { // not required
			continue
		}

		if m.AppEntityVec[i] != nil {
			if err := m.AppEntityVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appEntityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appEntityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this Sql backup params based on the context it is used
func (m *SQLBackupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppEntityVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SQLBackupParams) contextValidateAppEntityVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppEntityVec); i++ {

		if m.AppEntityVec[i] != nil {

			if swag.IsZero(m.AppEntityVec[i]) { // not required
				return nil
			}

			if err := m.AppEntityVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appEntityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appEntityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SQLBackupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SQLBackupParams) UnmarshalBinary(b []byte) error {
	var res SQLBackupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
