// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExchangeEDBInfo Information about an Exchange Database. Note that there may be tmp.edb file
// in the EDB folder that would be ignored by backup.
//
// swagger:model ExchangeEDBInfo
type ExchangeEDBInfo struct {

	// EDB database size reported by Exchange for mounted database. This is 0
	// bytes for dismounted databases. -1 if it could not be obtained.
	DbSizeBytes *int64 `json:"dbSizeBytes,omitempty"`

	// EDB file path. This file path will be common for all nodes within a DAG.
	// Examples: C:\DB\employee.edb, C:\MyMounts\exch\contractors.edb.
	// In a DAG under steady state, all copies of the database will point to same
	// mountpoint path on each DAG node. However when a database copy is moved,
	// 'file_path' may be different until replication brings it in sync. A full
	// backup must be taken when DB file path changes.
	FilePath *string `json:"filePath,omitempty"`

	// EDB database file size on disk reported by file system (NTFS/ReFS). -1 if
	// it could not be obtained.
	FileSizeBytes *int64 `json:"fileSizeBytes,omitempty"`

	// Windows file system type string such as 'NTFS,ReFS,CSVFS' of the 'volume'.
	// Exchange VSS has restriction that CSVFS and non-CSVFS volumes cannot be
	// mixed in same snapshot set.
	FileSystem *string `json:"fileSystem,omitempty"`

	// Current schema version of the database. Eg: 0.135. May be used for
	// compatibility checks during database restore.
	SchemaVersion *string `json:"schemaVersion,omitempty"`

	// Volume device id where the EDB file mount point lives. This is unique to
	// an Exchange server node in a DAG, so each DAG node will have different
	// volume id that should be included in VSS snapshot.
	// Example: \\?\Volume{63f6b242-8ec1-11e8-80e0-00505685e2a9}\
	Volume *string `json:"volume,omitempty"`
}

// Validate validates this exchange e d b info
func (m *ExchangeEDBInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this exchange e d b info based on context it is used
func (m *ExchangeEDBInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeEDBInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeEDBInfo) UnmarshalBinary(b []byte) error {
	var res ExchangeEDBInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
