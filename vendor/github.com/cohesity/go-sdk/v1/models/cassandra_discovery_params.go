// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CassandraDiscoveryParams Contains minimum parameters required to connect to the primary host of a
// cassandra cluster and discover the cluster.
//
// swagger:model CassandraDiscoveryParams
type CassandraDiscoveryParams struct {

	// Dir containing Config YAML for discovery.
	CassandraConfigDirectory *string `json:"cassandraConfigDirectory,omitempty"`

	// Directory from where DSE specific configuration can be read.
	DseConfigDirectory *string `json:"dseConfigDirectory,omitempty"`

	// If this is set to true, Cassandra discovery will attempt to connect to
	// Cassandra to fetch additional configuration information. When setting to
	// true, ensure that required connection details have been provided to the
	// discovery API request to faciliate this connection.
	IsCassandraConnectionAllowed *bool `json:"isCassandraConnectionAllowed,omitempty"`

	// If DSE Authenticator is enabled.
	IsDseAuthenticator *bool `json:"isDseAuthenticator,omitempty"`

	// If DSE Tiered storage is enabled.
	IsDseTieredStorage *bool `json:"isDseTieredStorage,omitempty"`

	// If this field is true, imanis will try to discover graph keyspaces on
	// the client cluster
	IsGraphDiscoveryEnabled *bool `json:"isGraphDiscoveryEnabled,omitempty"`

	// If this field is true, Imanis will try to discover the supported system
	// keyspaces on the client cluster
	IsSystemKsDiscoveryEnabled *bool `json:"isSystemKsDiscoveryEnabled,omitempty"`

	// Primary host for the Cassandra cluster.
	PrimaryHost *string `json:"primaryHost,omitempty"`

	// SSH credentials required for scp backup.
	SSHCredentials *PrivateCredentials `json:"sshCredentials,omitempty"`
}

// Validate validates this cassandra discovery params
func (m *CassandraDiscoveryParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSSHCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraDiscoveryParams) validateSSHCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHCredentials) { // not required
		return nil
	}

	if m.SSHCredentials != nil {
		if err := m.SSHCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cassandra discovery params based on the context it is used
func (m *CassandraDiscoveryParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSSHCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraDiscoveryParams) contextValidateSSHCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHCredentials != nil {

		if swag.IsZero(m.SSHCredentials) { // not required
			return nil
		}

		if err := m.SSHCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CassandraDiscoveryParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraDiscoveryParams) UnmarshalBinary(b []byte) error {
	var res CassandraDiscoveryParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
