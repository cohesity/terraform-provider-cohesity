// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateS3ProtoEntity private s3 proto entity
//
// swagger:model PrivateS3ProtoEntity
type PrivateS3ProtoEntity struct {

	// The date and time the entity was created.
	CreateTimeMsecs *int64 `json:"createTimeMsecs,omitempty"`

	// The id of the S3 entity.
	ID *string `json:"id,omitempty"`

	// The name of the S3 entity.
	Name *string `json:"name,omitempty"`

	// Object ACLs enabled or not.
	ObjectLevelAclsEnabled *bool `json:"objectLevelAclsEnabled,omitempty"`

	// The AWS region id where the S3 bucket is present;
	RegionID *string `json:"regionId,omitempty"`

	// Optional list of tag attributes associated with this entity.
	TagAttributesVec []*TagAttributes `json:"tagAttributesVec"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// Versioning state of S3 bucket.
	Versioning *int32 `json:"versioning,omitempty"`
}

// Validate validates this private s3 proto entity
func (m *PrivateS3ProtoEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTagAttributesVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateS3ProtoEntity) validateTagAttributesVec(formats strfmt.Registry) error {
	if swag.IsZero(m.TagAttributesVec) { // not required
		return nil
	}

	for i := 0; i < len(m.TagAttributesVec); i++ {
		if swag.IsZero(m.TagAttributesVec[i]) { // not required
			continue
		}

		if m.TagAttributesVec[i] != nil {
			if err := m.TagAttributesVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this private s3 proto entity based on the context it is used
func (m *PrivateS3ProtoEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTagAttributesVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateS3ProtoEntity) contextValidateTagAttributesVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagAttributesVec); i++ {

		if m.TagAttributesVec[i] != nil {

			if swag.IsZero(m.TagAttributesVec[i]) { // not required
				return nil
			}

			if err := m.TagAttributesVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateS3ProtoEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateS3ProtoEntity) UnmarshalBinary(b []byte) error {
	var res PrivateS3ProtoEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
