// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupSourceParams Backup Source Parameters.
//
// Message to capture any additional backup params at the source level.
//
// swagger:model BackupSourceParams
type BackupSourceParams struct {

	// This is applicable to sources of type kVirtualMachine (kAcropolis
	// environment).
	AcropolisParams *AcropolisBackupSourceParams `json:"acropolisParams,omitempty"`

	// If we are backing up an application (such as SQL), this contains
	// the entity ids of the app entities (such as SQL instances and databases)
	// that will be protected on the backup source.
	//
	// If this vector is empty, it implies that we are protecting all app
	// entities on the source.
	AppEntityIDVec []int64 `json:"appEntityIdVec"`

	// This is applicable to sources of type kAWS with native backup.
	AwsNativeParams *AWSNativeBackupSourceParams `json:"awsNativeParams,omitempty"`

	// This is applicable to sources of type kAWS with snapshot manager backup.
	AwsSnapshotManagerParams *AWSSnapshotManagerBackupSourceParams `json:"awsSnapshotManagerParams,omitempty"`

	// This is applicable to source of kAzure with native backup type.
	AzureBackupSourceParams *AzureNativeBackupSourceParams `json:"azureBackupSourceParams,omitempty"`

	// This is applicable to source type kGCP.
	GcpNativeParams *GCPNativeObjectParams `json:"gcpNativeParams,omitempty"`

	// This is applicable to sources of type kVirtualMachine (kHyperV
	// environment).
	HypervParams *HyperVBackupSourceParams `json:"hypervParams,omitempty"`

	// This is applicable to namepace sources for Kubernetes environment.
	KubernetesParams *KubernetesBackupSourceParams `json:"kubernetesParams,omitempty"`

	// This is applicable to sources of type kOracle databases. These are
	// additional backup parameters for kOracle.
	// NOTE: For logging this proto use GetProtoString(oracle_params); to remove
	// credentials from DB information.
	OracleParams *OracleSourceParams `json:"oracleParams,omitempty"`

	// This is applicable to sources of type kHost (kPhysical environment).
	PhysicalParams *PhysicalBackupSourceParams `json:"physicalParams,omitempty"`

	// This is applicable to kAwsS3 job type.
	S3BucketParamsProto *S3BucketParamsProto `json:"s3BucketParamsProto,omitempty"`

	// This is applicable to sources of type kSfdc.
	SfdcParams *SfdcBackupSourceParamsProto `json:"sfdcParams,omitempty"`

	// This is applicable to sources of type kSite in o365 domain.
	SharepointParams *SharepointBackupSourceParams `json:"sharepointParams,omitempty"`

	// Set to true, if indexing is not required for given source.
	SkipIndexing *bool `json:"skipIndexing,omitempty"`

	// Source entity id.
	// NOTE: This is expected to point to a leaf-level entity.
	SourceID *int64 `json:"sourceId,omitempty"`

	// Uda source params.
	UdaBackupSourceParams *UdaBackupSourceParams `json:"udaBackupSourceParams,omitempty"`

	// This is applicable to sources of type kVirtualMachine (kVMware
	// environment).
	VmwareParams *VMwareBackupSourceParams `json:"vmwareParams,omitempty"`
}

// Validate validates this backup source params
func (m *BackupSourceParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcropolisParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsNativeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsSnapshotManagerParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureBackupSourceParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpNativeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3BucketParamsProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharepointParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaBackupSourceParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupSourceParams) validateAcropolisParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisParams) { // not required
		return nil
	}

	if m.AcropolisParams != nil {
		if err := m.AcropolisParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateAwsNativeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsNativeParams) { // not required
		return nil
	}

	if m.AwsNativeParams != nil {
		if err := m.AwsNativeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsNativeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsNativeParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateAwsSnapshotManagerParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsSnapshotManagerParams) { // not required
		return nil
	}

	if m.AwsSnapshotManagerParams != nil {
		if err := m.AwsSnapshotManagerParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsSnapshotManagerParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsSnapshotManagerParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateAzureBackupSourceParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureBackupSourceParams) { // not required
		return nil
	}

	if m.AzureBackupSourceParams != nil {
		if err := m.AzureBackupSourceParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureBackupSourceParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureBackupSourceParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateGcpNativeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpNativeParams) { // not required
		return nil
	}

	if m.GcpNativeParams != nil {
		if err := m.GcpNativeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpNativeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpNativeParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateHypervParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParams) { // not required
		return nil
	}

	if m.HypervParams != nil {
		if err := m.HypervParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateKubernetesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesParams) { // not required
		return nil
	}

	if m.KubernetesParams != nil {
		if err := m.KubernetesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateOracleParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleParams) { // not required
		return nil
	}

	if m.OracleParams != nil {
		if err := m.OracleParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validatePhysicalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateS3BucketParamsProto(formats strfmt.Registry) error {
	if swag.IsZero(m.S3BucketParamsProto) { // not required
		return nil
	}

	if m.S3BucketParamsProto != nil {
		if err := m.S3BucketParamsProto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3BucketParamsProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3BucketParamsProto")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateSfdcParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcParams) { // not required
		return nil
	}

	if m.SfdcParams != nil {
		if err := m.SfdcParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateSharepointParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SharepointParams) { // not required
		return nil
	}

	if m.SharepointParams != nil {
		if err := m.SharepointParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharepointParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharepointParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateUdaBackupSourceParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaBackupSourceParams) { // not required
		return nil
	}

	if m.UdaBackupSourceParams != nil {
		if err := m.UdaBackupSourceParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaBackupSourceParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaBackupSourceParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup source params based on the context it is used
func (m *BackupSourceParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcropolisParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsNativeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsSnapshotManagerParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureBackupSourceParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpNativeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3BucketParamsProto(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharepointParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaBackupSourceParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupSourceParams) contextValidateAcropolisParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AcropolisParams != nil {

		if swag.IsZero(m.AcropolisParams) { // not required
			return nil
		}

		if err := m.AcropolisParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateAwsNativeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsNativeParams != nil {

		if swag.IsZero(m.AwsNativeParams) { // not required
			return nil
		}

		if err := m.AwsNativeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsNativeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsNativeParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateAwsSnapshotManagerParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsSnapshotManagerParams != nil {

		if swag.IsZero(m.AwsSnapshotManagerParams) { // not required
			return nil
		}

		if err := m.AwsSnapshotManagerParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsSnapshotManagerParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsSnapshotManagerParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateAzureBackupSourceParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureBackupSourceParams != nil {

		if swag.IsZero(m.AzureBackupSourceParams) { // not required
			return nil
		}

		if err := m.AzureBackupSourceParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureBackupSourceParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureBackupSourceParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateGcpNativeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpNativeParams != nil {

		if swag.IsZero(m.GcpNativeParams) { // not required
			return nil
		}

		if err := m.GcpNativeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpNativeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpNativeParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateHypervParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParams != nil {

		if swag.IsZero(m.HypervParams) { // not required
			return nil
		}

		if err := m.HypervParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateKubernetesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesParams != nil {

		if swag.IsZero(m.KubernetesParams) { // not required
			return nil
		}

		if err := m.KubernetesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateOracleParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleParams != nil {

		if swag.IsZero(m.OracleParams) { // not required
			return nil
		}

		if err := m.OracleParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateS3BucketParamsProto(ctx context.Context, formats strfmt.Registry) error {

	if m.S3BucketParamsProto != nil {

		if swag.IsZero(m.S3BucketParamsProto) { // not required
			return nil
		}

		if err := m.S3BucketParamsProto.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3BucketParamsProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3BucketParamsProto")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateSfdcParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcParams != nil {

		if swag.IsZero(m.SfdcParams) { // not required
			return nil
		}

		if err := m.SfdcParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateSharepointParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SharepointParams != nil {

		if swag.IsZero(m.SharepointParams) { // not required
			return nil
		}

		if err := m.SharepointParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharepointParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharepointParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateUdaBackupSourceParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaBackupSourceParams != nil {

		if swag.IsZero(m.UdaBackupSourceParams) { // not required
			return nil
		}

		if err := m.UdaBackupSourceParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaBackupSourceParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaBackupSourceParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSourceParams) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupSourceParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupSourceParams) UnmarshalBinary(b []byte) error {
	var res BackupSourceParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
