// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleDatabaseNodeChannel Oracle Database Node Channel.
//
// Specifies node and channel info required for the backup and restore of
// a database.
//
// swagger:model OracleDatabaseNodeChannel
type OracleDatabaseNodeChannel struct {

	// Specifies the number of days archive log should be stored.
	ArchiveLogKeepDays *int32 `json:"archiveLogKeepDays,omitempty"`

	// Array of nodes of a database.
	//
	// Specifies the Node info from where we are allowed to take the
	// backup/restore.
	DatabaseNodeList []*OracleDatabaseNode `json:"databaseNodeList"`

	// Specifies the unique Name of the database.
	DatabaseUniqueName *string `json:"databaseUniqueName,omitempty"`

	// Specifies the database unique id. This is an internal field and is filled
	// by primary magneto based on corresponding app entity id.
	DatabaseUUID *string `json:"databaseUuid,omitempty"`

	// Specifies the default number of channels to use per node per database.
	// The default number of channels to use per host per db.
	// This value is used on all OracleDatabaseNode's unless
	// databaseNodeList item's channelCount is specified for the node.
	DefaultChannelCount *int32 `json:"defaultChannelCount,omitempty"`

	// Specifies whether the database having the Primary role within Data Guard
	// configuration is to be backed up.
	EnableDgPrimaryBackup *bool `json:"enableDgPrimaryBackup,omitempty"`

	// Specifies the maximum number of nodes from which we are allowed to take
	// backup/restore.
	MaxNodeCount *int32 `json:"maxNodeCount,omitempty"`

	// Specifies the type of Oracle RMAN backup.
	RmanBackupType *int32 `json:"rmanBackupType,omitempty"`
}

// Validate validates this oracle database node channel
func (m *OracleDatabaseNodeChannel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatabaseNodeList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleDatabaseNodeChannel) validateDatabaseNodeList(formats strfmt.Registry) error {
	if swag.IsZero(m.DatabaseNodeList) { // not required
		return nil
	}

	for i := 0; i < len(m.DatabaseNodeList); i++ {
		if swag.IsZero(m.DatabaseNodeList[i]) { // not required
			continue
		}

		if m.DatabaseNodeList[i] != nil {
			if err := m.DatabaseNodeList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("databaseNodeList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("databaseNodeList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this oracle database node channel based on the context it is used
func (m *OracleDatabaseNodeChannel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatabaseNodeList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleDatabaseNodeChannel) contextValidateDatabaseNodeList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DatabaseNodeList); i++ {

		if m.DatabaseNodeList[i] != nil {

			if swag.IsZero(m.DatabaseNodeList[i]) { // not required
				return nil
			}

			if err := m.DatabaseNodeList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("databaseNodeList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("databaseNodeList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleDatabaseNodeChannel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleDatabaseNodeChannel) UnmarshalBinary(b []byte) error {
	var res OracleDatabaseNodeChannel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
