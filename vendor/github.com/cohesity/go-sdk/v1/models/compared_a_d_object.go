// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComparedADObject ComparedADObject
//
// Represents the details about an AD object and its properties.
// The attributes of the AD Object contain the information about whether
// they are equal on both Snapshot AD and Production AD as well as value of
// attribute on both Production and Snapshot AD.
//
// swagger:model ComparedADObject
type ComparedADObject struct {

	// Specifies the list of AD attributes for the AD object.
	AdAttributes []*AdAttribute `json:"adAttributes"`

	// Specifies the flags related to this AD Object.
	// 'kEqual' indicates all the attributes of the AD Object on the Snapshot
	// and Production are equal.
	// 'kNotEqual' indicates atleast one of the attribute of the AD Object on the
	// Snapshot and Production AD are not equal.
	// 'kRestorePasswordRequired' indicates the AD Object is of 'User' object class
	// type. when restoring this object from Snapshot AD to Priduction AD,
	// a password is required.
	// 'kMovedOnDestination' indicates the object has moved to another
	// container or OU in production AD compared to AD snapshot. In this case,
	// the distinguishedName will be different for these objects
	// 'kDestinationNotFound' indicates the object corresponding to dest_guid
	// specified is missing from Production AD. Caller should check this flag
	// and empty 'dest_guid' first to find out destination is missing.
	// 'kDisableSupported' indicates the enable and disable is supported on the AD
	// Object. AD Objects of type 'User' and 'Computers' support this operation.
	AdObjectFlags []string `json:"adObjectFlags"`

	// Specifies the guid of the object in the Production AD which is equivalent
	// to the one in the Snapshot AD.
	DestinationGUID *string `json:"destinationGuid,omitempty"`

	// Specifies the error message while fetching the AD object.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Specifies the number of attributes of AD Object mismatched on the
	// Snapshot and Production AD.
	MismatchAttrCount *uint32 `json:"mismatchAttrCount,omitempty"`

	// Specifies the guid of the AD object in the Snapshot AD.
	SourceGUID *string `json:"sourceGuid,omitempty"`
}

// Validate validates this compared a d object
func (m *ComparedADObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdObjectFlags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComparedADObject) validateAdAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.AdAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.AdAttributes); i++ {
		if swag.IsZero(m.AdAttributes[i]) { // not required
			continue
		}

		if m.AdAttributes[i] != nil {
			if err := m.AdAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var comparedADObjectAdObjectFlagsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kEqual","kNotEqual","kRestorePasswordRequired","kMovedOnDestination","kDestinationNotFound","kDisableSupported"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comparedADObjectAdObjectFlagsItemsEnum = append(comparedADObjectAdObjectFlagsItemsEnum, v)
	}
}

func (m *ComparedADObject) validateAdObjectFlagsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, comparedADObjectAdObjectFlagsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ComparedADObject) validateAdObjectFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.AdObjectFlags) { // not required
		return nil
	}

	for i := 0; i < len(m.AdObjectFlags); i++ {

		// value enum
		if err := m.validateAdObjectFlagsItemsEnum("adObjectFlags"+"."+strconv.Itoa(i), "body", m.AdObjectFlags[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this compared a d object based on the context it is used
func (m *ComparedADObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComparedADObject) contextValidateAdAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdAttributes); i++ {

		if m.AdAttributes[i] != nil {

			if swag.IsZero(m.AdAttributes[i]) { // not required
				return nil
			}

			if err := m.AdAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComparedADObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComparedADObject) UnmarshalBinary(b []byte) error {
	var res ComparedADObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
