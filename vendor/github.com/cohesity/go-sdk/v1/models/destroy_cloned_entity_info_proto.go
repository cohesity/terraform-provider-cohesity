// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DestroyClonedEntityInfoProto Message that encapsulates information about a cloned entity that needs to be
// destroyed. Environment specific information are defined as extensions to
// this proto.
//
// Each available extension is listed below along with the location of the
// proto file (relative to magneto/connectors) where it is defined.
//
// DestroyClonedEntityInfoProto.ClonedEntity extension    Location    Extension
// =============================================================================
// azure::ClonedEntityInfo::azure_cloned_entity_info   azure/azure.proto   100
// aws::ClonedEntityInfo::aws_cloned_entity_info       aws/aws.proto       101
// =============================================================================
//
// swagger:model DestroyClonedEntityInfoProto
type DestroyClonedEntityInfoProto struct {

	// The following field is set by the master in order for slave to identify
	// the entities that need to be destroyed.
	ClonedEntity *DestroyClonedEntityInfoProtoClonedEntity `json:"clonedEntity,omitempty"`

	// cloned entity status
	ClonedEntityStatus *int32 `json:"clonedEntityStatus,omitempty"`

	// The state of the destroy/teardown of a cloned entity (i.e, VM).
	//
	// The following two fields are set by the slave in order for the master to
	// find status of the destroy operation.
	DestroyClonedEntityState *int32 `json:"destroyClonedEntityState,omitempty"`

	// If the destruction of this entity failed, this field will contain the
	// cause of the failure.
	Error *ErrorProto `json:"error,omitempty"`

	// The full external view name where cloned objects are placed.
	FullViewName *string `json:"fullViewName,omitempty"`

	// The type of environment this destroy cloned entity info pertains to.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this destroy cloned entity info proto
func (m *DestroyClonedEntityInfoProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClonedEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestroyClonedEntityInfoProto) validateClonedEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ClonedEntity) { // not required
		return nil
	}

	if m.ClonedEntity != nil {
		if err := m.ClonedEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clonedEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clonedEntity")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedEntityInfoProto) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this destroy cloned entity info proto based on the context it is used
func (m *DestroyClonedEntityInfoProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClonedEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestroyClonedEntityInfoProto) contextValidateClonedEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ClonedEntity != nil {

		if swag.IsZero(m.ClonedEntity) { // not required
			return nil
		}

		if err := m.ClonedEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clonedEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clonedEntity")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedEntityInfoProto) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestroyClonedEntityInfoProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestroyClonedEntityInfoProto) UnmarshalBinary(b []byte) error {
	var res DestroyClonedEntityInfoProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
