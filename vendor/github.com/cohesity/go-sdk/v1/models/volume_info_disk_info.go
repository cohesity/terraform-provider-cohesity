// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VolumeInfoDiskInfo Information about each disk in volume.
//
// swagger:model VolumeInfo_DiskInfo
type VolumeInfoDiskInfo struct {

	// Disk name. This is the vmdk names, and not the flat file name.
	DiskFileName *string `json:"diskFileName,omitempty"`

	// Disk format type of this file.
	// See util/disklib/base/enums.proto for available types.
	DiskFormat *int32 `json:"diskFormat,omitempty"`

	// Disk uuid.
	DiskUUID *string `json:"diskUuid,omitempty"`

	// Disk partition type.
	PartitionType *int32 `json:"partitionType,omitempty"`

	// Information about all the partitions in this disk.
	PartitionVec []*VolumeInfoDiskInfoPartitionInfo `json:"partitionVec"`

	// This disk is formed by following physical ranges.
	// Ranges are arranged sequentially to form a disk.
	PhysicalRangeVec []*VolumeInfoDiskInfoPhysicalRange `json:"physicalRangeVec"`

	// Sector size of disk.
	// This is sector size of disk which is formed by mapping the physical
	// ranges of the disk into a linear device.
	SectorSize *int64 `json:"sectorSize,omitempty"`

	// Disk size in bytes.
	VmdkSize *int64 `json:"vmdkSize,omitempty"`
}

// Validate validates this volume info disk info
func (m *VolumeInfoDiskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartitionVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalRangeVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeInfoDiskInfo) validatePartitionVec(formats strfmt.Registry) error {
	if swag.IsZero(m.PartitionVec) { // not required
		return nil
	}

	for i := 0; i < len(m.PartitionVec); i++ {
		if swag.IsZero(m.PartitionVec[i]) { // not required
			continue
		}

		if m.PartitionVec[i] != nil {
			if err := m.PartitionVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("partitionVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("partitionVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VolumeInfoDiskInfo) validatePhysicalRangeVec(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalRangeVec) { // not required
		return nil
	}

	for i := 0; i < len(m.PhysicalRangeVec); i++ {
		if swag.IsZero(m.PhysicalRangeVec[i]) { // not required
			continue
		}

		if m.PhysicalRangeVec[i] != nil {
			if err := m.PhysicalRangeVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physicalRangeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("physicalRangeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this volume info disk info based on the context it is used
func (m *VolumeInfoDiskInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePartitionVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalRangeVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeInfoDiskInfo) contextValidatePartitionVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PartitionVec); i++ {

		if m.PartitionVec[i] != nil {

			if swag.IsZero(m.PartitionVec[i]) { // not required
				return nil
			}

			if err := m.PartitionVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("partitionVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("partitionVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VolumeInfoDiskInfo) contextValidatePhysicalRangeVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhysicalRangeVec); i++ {

		if m.PhysicalRangeVec[i] != nil {

			if swag.IsZero(m.PhysicalRangeVec[i]) { // not required
				return nil
			}

			if err := m.PhysicalRangeVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physicalRangeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("physicalRangeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeInfoDiskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeInfoDiskInfo) UnmarshalBinary(b []byte) error {
	var res VolumeInfoDiskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
