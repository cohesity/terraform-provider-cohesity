// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverTaskRequest Create Restore Task Request.
//
// Create a Restore Task Request for recovering VMs or mounting volumes to
// mount points.
//
// swagger:model RecoverTaskRequest
type RecoverTaskRequest struct {

	// Specifies additional parameters for 'kRecoverO365PublicFolders' restore
	// objects.
	PublicFoldersParameters *PublicFoldersRestoreParameters `json:"PublicFoldersParameters,omitempty"`

	// Specifies additional parameters for 'kAcropolis' restore objects.
	AcropolisParameters *AcropolisRestoreParameters `json:"acropolisParameters,omitempty"`

	// Specifies if the Restore Task should continue when some operations on some
	// objects fail. If true, the Cohesity Cluster ignores intermittent
	// errors and restores as many objects as possible.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies parameters to deploy VMs to cloud.
	DeployVmsToCloud *DeployVmsToCloud `json:"deployVmsToCloud,omitempty"`

	// Specifies the way data needs to be retrieved from the external target.
	// This information will be filled in by Iris and Magneto will pass it along
	// to the Icebox as it is to support bulk retrieval from Glacier.
	// Specifies the type of Restore Task.
	//
	// 'kStandard' specifies retrievals that allow to access any of your archives
	// within several hours. Standard retrievals typically complete within 3–5
	// hours. This is the default option for retrieval requests that do not specify
	// the retrieval option.
	// 'kBulk' specifies retrievals that are Glacier’s lowest-cost retrieval
	// option, which can be used to retrieve large amounts, even petabytes, of data
	// inexpensively in a day. Bulk retrieval typically complete within 5–12 hours.
	// 'kExpedited' specifies retrievals that allows to quickly access your data
	// when occasional urgent requests for a subset of archives are required. For
	// all but the largest archives (250 MB+), data accessed using Expedited
	// retrievals are typically made available within 1–5 minutes.
	// Enum: ["kStandard","kBulk","kExpedited"]
	GlacierRetrievalType *string `json:"glacierRetrievalType,omitempty"`

	// Specifies additional parameters for 'kHyperV' restore objects.
	HypervParameters *HypervRestoreParameters `json:"hypervParameters,omitempty"`

	// Specifies additional parameters for 'kKubernetes' restore objects.
	KubernetesParameters *KubernetesRestoreParameters `json:"kubernetesParameters,omitempty"`

	// Specifies parameters required for mounting volumes.
	MountParameters *MountVolumesParameters `json:"mountParameters,omitempty"`

	// Specifies the name of the Restore Task. This field must be set and
	// must be a unique name.
	// Required: true
	Name *string `json:"name"`

	// Specify a new registered parent Protection Source. If specified
	// the selected objects are cloned or recovered to this new Protection
	// Source. If not specified, objects are cloned or recovered
	// to the original Protection Source that was managing them.
	NewParentID *int64 `json:"newParentId,omitempty"`

	// Array of Objects.
	//
	// Specifies a list of Protection Source objects or Protection Job objects
	// (with specified Protection Source objects).
	Objects []*RestoreObjectDetails `json:"objects"`

	// Specifies additional parameters for 'kRecoverO365Drive' restore objects.
	OneDriveParameters *OneDriveRestoreParameters `json:"oneDriveParameters,omitempty"`

	// Specifies additional parameters for 'kRecoverEmails' restore objects.
	OutlookParameters *OutlookRestoreParameters `json:"outlookParameters,omitempty"`

	// Restore View.
	//
	// Specifies settings for restoring view.
	RestoreViewParameters *UpdateViewParam `json:"restoreViewParameters,omitempty"`

	// Specifies additional parameters for 'kRecoverSites' restore objects.
	SharePointParameters *SharePointRestoreParameters `json:"sharePointParameters,omitempty"`

	// Specifies the type of Restore Task such as 'kRecoverVMs' or
	// 'kMountVolumes'.
	// 'kRecoverVMs' specifies a Restore Task that recovers VMs.
	// 'kMountVolumes' specifies a Restore Task that mounts volumes to mount
	// points.
	// 'kRecoverNamespaces' specifies a Restore Task that recovers Kubernetes
	// namespaces.
	// 'kMountFileVolume' specifies a Restore Task that mounts a file volume.
	// Required: true
	// Enum: ["kRecoverVMs","kMountVolumes","kRecoverNamespaces","kMountFileVolume"]
	Type *string `json:"type"`

	// Specifie target view into which the objects are to be cloned when doing
	// recovery for NAS.
	ViewName *string `json:"viewName,omitempty"`

	// Specifies parameters for restoring virtual disks from VM.
	VirtualDiskRestoreParameters *VirtualDiskRestoreParameters `json:"virtualDiskRestoreParameters,omitempty"`

	// Specifies VLAN parameters for the restore operation.
	VlanParameters *VlanParameters `json:"vlanParameters,omitempty"`

	// Specifies additional parameters for 'kVmware' restore objects.
	VmwareParameters *VmwareRestoreParameters `json:"vmwareParameters,omitempty"`
}

// Validate validates this recover task request
func (m *RecoverTaskRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicFoldersParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcropolisParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployVmsToCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlacierRetrievalType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneDriveParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutlookParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreViewParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharePointParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDiskRestoreParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverTaskRequest) validatePublicFoldersParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicFoldersParameters) { // not required
		return nil
	}

	if m.PublicFoldersParameters != nil {
		if err := m.PublicFoldersParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PublicFoldersParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PublicFoldersParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) validateAcropolisParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisParameters) { // not required
		return nil
	}

	if m.AcropolisParameters != nil {
		if err := m.AcropolisParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) validateDeployVmsToCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToCloud) { // not required
		return nil
	}

	if m.DeployVmsToCloud != nil {
		if err := m.DeployVmsToCloud.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloud")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloud")
			}
			return err
		}
	}

	return nil
}

var recoverTaskRequestTypeGlacierRetrievalTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStandard","kBulk","kExpedited"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverTaskRequestTypeGlacierRetrievalTypePropEnum = append(recoverTaskRequestTypeGlacierRetrievalTypePropEnum, v)
	}
}

const (

	// RecoverTaskRequestGlacierRetrievalTypeKStandard captures enum value "kStandard"
	RecoverTaskRequestGlacierRetrievalTypeKStandard string = "kStandard"

	// RecoverTaskRequestGlacierRetrievalTypeKBulk captures enum value "kBulk"
	RecoverTaskRequestGlacierRetrievalTypeKBulk string = "kBulk"

	// RecoverTaskRequestGlacierRetrievalTypeKExpedited captures enum value "kExpedited"
	RecoverTaskRequestGlacierRetrievalTypeKExpedited string = "kExpedited"
)

// prop value enum
func (m *RecoverTaskRequest) validateGlacierRetrievalTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverTaskRequestTypeGlacierRetrievalTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverTaskRequest) validateGlacierRetrievalType(formats strfmt.Registry) error {
	if swag.IsZero(m.GlacierRetrievalType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGlacierRetrievalTypeEnum("glacierRetrievalType", "body", *m.GlacierRetrievalType); err != nil {
		return err
	}

	return nil
}

func (m *RecoverTaskRequest) validateHypervParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParameters) { // not required
		return nil
	}

	if m.HypervParameters != nil {
		if err := m.HypervParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) validateKubernetesParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesParameters) { // not required
		return nil
	}

	if m.KubernetesParameters != nil {
		if err := m.KubernetesParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) validateMountParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.MountParameters) { // not required
		return nil
	}

	if m.MountParameters != nil {
		if err := m.MountParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RecoverTaskRequest) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverTaskRequest) validateOneDriveParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.OneDriveParameters) { // not required
		return nil
	}

	if m.OneDriveParameters != nil {
		if err := m.OneDriveParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) validateOutlookParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.OutlookParameters) { // not required
		return nil
	}

	if m.OutlookParameters != nil {
		if err := m.OutlookParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) validateRestoreViewParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreViewParameters) { // not required
		return nil
	}

	if m.RestoreViewParameters != nil {
		if err := m.RestoreViewParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreViewParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreViewParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) validateSharePointParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.SharePointParameters) { // not required
		return nil
	}

	if m.SharePointParameters != nil {
		if err := m.SharePointParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharePointParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharePointParameters")
			}
			return err
		}
	}

	return nil
}

var recoverTaskRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRecoverVMs","kMountVolumes","kRecoverNamespaces","kMountFileVolume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverTaskRequestTypeTypePropEnum = append(recoverTaskRequestTypeTypePropEnum, v)
	}
}

const (

	// RecoverTaskRequestTypeKRecoverVMs captures enum value "kRecoverVMs"
	RecoverTaskRequestTypeKRecoverVMs string = "kRecoverVMs"

	// RecoverTaskRequestTypeKMountVolumes captures enum value "kMountVolumes"
	RecoverTaskRequestTypeKMountVolumes string = "kMountVolumes"

	// RecoverTaskRequestTypeKRecoverNamespaces captures enum value "kRecoverNamespaces"
	RecoverTaskRequestTypeKRecoverNamespaces string = "kRecoverNamespaces"

	// RecoverTaskRequestTypeKMountFileVolume captures enum value "kMountFileVolume"
	RecoverTaskRequestTypeKMountFileVolume string = "kMountFileVolume"
)

// prop value enum
func (m *RecoverTaskRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverTaskRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverTaskRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *RecoverTaskRequest) validateVirtualDiskRestoreParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualDiskRestoreParameters) { // not required
		return nil
	}

	if m.VirtualDiskRestoreParameters != nil {
		if err := m.VirtualDiskRestoreParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualDiskRestoreParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualDiskRestoreParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) validateVlanParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParameters) { // not required
		return nil
	}

	if m.VlanParameters != nil {
		if err := m.VlanParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) validateVmwareParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParameters) { // not required
		return nil
	}

	if m.VmwareParameters != nil {
		if err := m.VmwareParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover task request based on the context it is used
func (m *RecoverTaskRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePublicFoldersParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcropolisParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployVmsToCloud(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneDriveParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutlookParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreViewParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharePointParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualDiskRestoreParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverTaskRequest) contextValidatePublicFoldersParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicFoldersParameters != nil {

		if swag.IsZero(m.PublicFoldersParameters) { // not required
			return nil
		}

		if err := m.PublicFoldersParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PublicFoldersParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PublicFoldersParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateAcropolisParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.AcropolisParameters != nil {

		if swag.IsZero(m.AcropolisParameters) { // not required
			return nil
		}

		if err := m.AcropolisParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateDeployVmsToCloud(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToCloud != nil {

		if swag.IsZero(m.DeployVmsToCloud) { // not required
			return nil
		}

		if err := m.DeployVmsToCloud.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloud")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloud")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateHypervParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParameters != nil {

		if swag.IsZero(m.HypervParameters) { // not required
			return nil
		}

		if err := m.HypervParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateKubernetesParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesParameters != nil {

		if swag.IsZero(m.KubernetesParameters) { // not required
			return nil
		}

		if err := m.KubernetesParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateMountParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.MountParameters != nil {

		if swag.IsZero(m.MountParameters) { // not required
			return nil
		}

		if err := m.MountParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateOneDriveParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.OneDriveParameters != nil {

		if swag.IsZero(m.OneDriveParameters) { // not required
			return nil
		}

		if err := m.OneDriveParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateOutlookParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.OutlookParameters != nil {

		if swag.IsZero(m.OutlookParameters) { // not required
			return nil
		}

		if err := m.OutlookParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateRestoreViewParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreViewParameters != nil {

		if swag.IsZero(m.RestoreViewParameters) { // not required
			return nil
		}

		if err := m.RestoreViewParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreViewParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreViewParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateSharePointParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.SharePointParameters != nil {

		if swag.IsZero(m.SharePointParameters) { // not required
			return nil
		}

		if err := m.SharePointParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharePointParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharePointParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateVirtualDiskRestoreParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.VirtualDiskRestoreParameters != nil {

		if swag.IsZero(m.VirtualDiskRestoreParameters) { // not required
			return nil
		}

		if err := m.VirtualDiskRestoreParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualDiskRestoreParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualDiskRestoreParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateVlanParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParameters != nil {

		if swag.IsZero(m.VlanParameters) { // not required
			return nil
		}

		if err := m.VlanParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParameters")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverTaskRequest) contextValidateVmwareParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParameters != nil {

		if swag.IsZero(m.VmwareParameters) { // not required
			return nil
		}

		if err := m.VmwareParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverTaskRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverTaskRequest) UnmarshalBinary(b []byte) error {
	var res RecoverTaskRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
