// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AlertingConfig Alerting Config.
//
// Specifies optional settings for alerting.
//
// swagger:model AlertingConfig
type AlertingConfig struct {

	// Exists to maintain backwards compatibility with versions before eff8198.
	EmailAddresses []string `json:"emailAddresses"`

	// Specifies additional email addresses where alert notifications (configured
	// in the AlertingPolicy) must be sent.
	EmailDeliveryTargets []*EmailDeliveryTarget `json:"emailDeliveryTargets"`

	// Specifies the boolean to raise per object alert for failures.
	RaiseObjectLevelFailureAlert *bool `json:"raiseObjectLevelFailureAlert,omitempty"`

	// Specifies the boolean to raise per object alert for failures after each
	// attempt.
	RaiseObjectLevelFailureAlertAfterEachAttempt *bool `json:"raiseObjectLevelFailureAlertAfterEachAttempt,omitempty"`

	// Specifies the boolean to raise per object alert for failures after last
	// attempt.
	RaiseObjectLevelFailureAlertAfterLastAttempt *bool `json:"raiseObjectLevelFailureAlertAfterLastAttempt,omitempty"`
}

// Validate validates this alerting config
func (m *AlertingConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailDeliveryTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertingConfig) validateEmailDeliveryTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailDeliveryTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailDeliveryTargets); i++ {
		if swag.IsZero(m.EmailDeliveryTargets[i]) { // not required
			continue
		}

		if m.EmailDeliveryTargets[i] != nil {
			if err := m.EmailDeliveryTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this alerting config based on the context it is used
func (m *AlertingConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmailDeliveryTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertingConfig) contextValidateEmailDeliveryTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EmailDeliveryTargets); i++ {

		if m.EmailDeliveryTargets[i] != nil {

			if swag.IsZero(m.EmailDeliveryTargets[i]) { // not required
				return nil
			}

			if err := m.EmailDeliveryTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertingConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertingConfig) UnmarshalBinary(b []byte) error {
	var res AlertingConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
