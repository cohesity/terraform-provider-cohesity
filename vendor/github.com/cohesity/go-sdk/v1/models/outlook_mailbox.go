// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OutlookMailbox Outlook Mailbox.
//
// Specifies the Outlook mailbox with restore details to support full or
// partial recovery.
//
// swagger:model OutlookMailbox
type OutlookMailbox struct {

	// Specifies the details of the mailbox object.
	MailboxObject *RestoreObjectDetails `json:"mailboxObject,omitempty"`

	// Specifies the list of folders to be restored incase user wishes not to
	// restore entire mailbox.
	OutlookFolderList []*OutlookFolder `json:"outlookFolderList"`

	// Specifies whether the entire mailbox is to be restored.
	RestoreEntireMailbox *bool `json:"restoreEntireMailbox,omitempty"`
}

// Validate validates this outlook mailbox
func (m *OutlookMailbox) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMailboxObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutlookFolderList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutlookMailbox) validateMailboxObject(formats strfmt.Registry) error {
	if swag.IsZero(m.MailboxObject) { // not required
		return nil
	}

	if m.MailboxObject != nil {
		if err := m.MailboxObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailboxObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailboxObject")
			}
			return err
		}
	}

	return nil
}

func (m *OutlookMailbox) validateOutlookFolderList(formats strfmt.Registry) error {
	if swag.IsZero(m.OutlookFolderList) { // not required
		return nil
	}

	for i := 0; i < len(m.OutlookFolderList); i++ {
		if swag.IsZero(m.OutlookFolderList[i]) { // not required
			continue
		}

		if m.OutlookFolderList[i] != nil {
			if err := m.OutlookFolderList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outlookFolderList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outlookFolderList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this outlook mailbox based on the context it is used
func (m *OutlookMailbox) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMailboxObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutlookFolderList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutlookMailbox) contextValidateMailboxObject(ctx context.Context, formats strfmt.Registry) error {

	if m.MailboxObject != nil {

		if swag.IsZero(m.MailboxObject) { // not required
			return nil
		}

		if err := m.MailboxObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailboxObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailboxObject")
			}
			return err
		}
	}

	return nil
}

func (m *OutlookMailbox) contextValidateOutlookFolderList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutlookFolderList); i++ {

		if m.OutlookFolderList[i] != nil {

			if swag.IsZero(m.OutlookFolderList[i]) { // not required
				return nil
			}

			if err := m.OutlookFolderList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outlookFolderList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outlookFolderList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OutlookMailbox) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutlookMailbox) UnmarshalBinary(b []byte) error {
	var res OutlookMailbox
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
