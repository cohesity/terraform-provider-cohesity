// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VserverInfoNetworkInterfaceInfo Proto that contains information about a logical network interface on a
// Netapp vserver. The interface's IP address is the mount point for a
// specific data protocol, such as NFS or CIFS.
//
// swagger:model VserverInfo_NetworkInterfaceInfo
type VserverInfoNetworkInterfaceInfo struct {

	// The data protocols supported by this interface. This could be a subset
	// of all the data protocols supported by the vserver, plus kManagement.
	DataProtocolVec []int32 `json:"dataProtocolVec"`

	// The FQDN of this interface.
	Fqdn *string `json:"fqdn,omitempty"`

	// The IP address of this interface.
	IPAddress *string `json:"ipAddress,omitempty"`

	// Whether kerberos for nfs protocol is enabled for this interface or not.
	KerberosEnabled *bool `json:"kerberosEnabled,omitempty"`

	// The name of this interface.
	Name *string `json:"name,omitempty"`

	// The operational status of this interface.
	OperationalStatus *int32 `json:"operationalStatus,omitempty"`
}

// Validate validates this vserver info network interface info
func (m *VserverInfoNetworkInterfaceInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this vserver info network interface info based on context it is used
func (m *VserverInfoNetworkInterfaceInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VserverInfoNetworkInterfaceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VserverInfoNetworkInterfaceInfo) UnmarshalBinary(b []byte) error {
	var res VserverInfoNetworkInterfaceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
