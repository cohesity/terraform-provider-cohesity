// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupPolicyProtoDailySchedule The daily schedule encompasses weekly schedules as well. This has been
// done so there is only one way of specifying a schedule (backing up daily
// is the same as backing up weekly, but on all days of the week).
//
// swagger:model BackupPolicyProto_DailySchedule
type BackupPolicyProtoDailySchedule struct {

	// The days of the week backup must be performed. If no days are specified,
	// then the backup will be performed on all days.
	Days []int32 `json:"days"`

	// The time when daily backups should be performed.
	Time *Time `json:"time,omitempty"`
}

// Validate validates this backup policy proto daily schedule
func (m *BackupPolicyProtoDailySchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPolicyProtoDailySchedule) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if m.Time != nil {
		if err := m.Time.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("time")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup policy proto daily schedule based on the context it is used
func (m *BackupPolicyProtoDailySchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPolicyProtoDailySchedule) contextValidateTime(ctx context.Context, formats strfmt.Registry) error {

	if m.Time != nil {

		if swag.IsZero(m.Time) { // not required
			return nil
		}

		if err := m.Time.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("time")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupPolicyProtoDailySchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupPolicyProtoDailySchedule) UnmarshalBinary(b []byte) error {
	var res BackupPolicyProtoDailySchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
