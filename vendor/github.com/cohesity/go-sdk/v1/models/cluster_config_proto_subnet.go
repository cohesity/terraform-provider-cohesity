// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterConfigProtoSubnet The following message defines a subnet.
//
// swagger:model ClusterConfigProto_Subnet
type ClusterConfigProtoSubnet struct {

	// The component that has claimed this subnet.
	Component *int32 `json:"component,omitempty"`

	// Description of the subnet.
	Description *string `json:"description,omitempty"`

	// Gateway for the subnet.
	Gateway *string `json:"gateway,omitempty"`

	// ID for this subnet.
	ID *int32 `json:"id,omitempty"`

	// ip is subnet IP address given either in v4 or v6. Netmask is
	// specified by giving CIDR length in netmask_bits for ipv6.
	// For IPv4 addresses, netmask_ip4 field is set in dotted decimal.
	IP *string `json:"ip,omitempty"`

	// netmask bits
	NetmaskBits *int32 `json:"netmaskBits,omitempty"`

	// netmask ip4
	NetmaskIp4 *string `json:"netmaskIp4,omitempty"`

	// Whether clients from this subnet can mount using NFS protocol.
	NfsAccess *int32 `json:"nfsAccess,omitempty"`

	// Whether all clients from this subnet can map view with
	// view_all_squash_uid/view_all_squash_gid configured in the view.
	NfsAllSquash *bool `json:"nfsAllSquash,omitempty"`

	// Whether clients from this subnet can mount as root on NFS.
	NfsRootSquash *bool `json:"nfsRootSquash,omitempty"`

	// Whether clients from this subnet can accept requests using S3 protocol.
	S3Access *int32 `json:"s3Access,omitempty"`

	// Whether clients from this subnet can mount using SMB protocol.
	SmbAccess *int32 `json:"smbAccess,omitempty"`
}

// Validate validates this cluster config proto subnet
func (m *ClusterConfigProtoSubnet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster config proto subnet based on context it is used
func (m *ClusterConfigProtoSubnet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterConfigProtoSubnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterConfigProtoSubnet) UnmarshalBinary(b []byte) error {
	var res ClusterConfigProtoSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
