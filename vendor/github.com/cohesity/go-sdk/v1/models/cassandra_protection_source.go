// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CassandraProtectionSource Cassandra Protection Source.
//
// Specifies an Object representing Cassandra.
//
// swagger:model CassandraProtectionSource
type CassandraProtectionSource struct {

	// Information of a Cassandra cluster, only valid for an entity of type
	// kCluster.
	ClusterInfo *CassandraCluster `json:"clusterInfo,omitempty"`

	// Information of a cassandra keyspapce, only valid for an entity of type
	// kKeyspace.
	KeyspaceInfo *CassandraKeyspace `json:"keyspaceInfo,omitempty"`

	// Specifies the instance name of the Cassandra entity.
	Name *string `json:"name,omitempty"`

	// Information of a cassandra table, only valid for an entity of type
	// kTable.
	TableInfo *CassandraTable `json:"tableInfo,omitempty"`

	// Specifies the type of the managed Object in Cassandra Protection Source.
	// Replication strategy options for a keyspace.
	// 'kCluster' indicates a Cassandra cluster distributed over several physical
	// nodes.
	// 'kKeyspace' indicates a Keyspace enclosing one or more tables.
	// 'kTable' indicates a Table in the Cassandra environment.
	// Enum: ["kCluster","kKeyspace","kTable"]
	Type *string `json:"type,omitempty"`

	// Specifies the UUID for the Cassandra entity.
	// Note : For each entity an ID unique within top level entity should be
	// assigned by imanis backend. Example, UUID for a table can be the string
	// <keyspace_name>.<table_name>
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this cassandra protection source
func (m *CassandraProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyspaceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraProtectionSource) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraProtectionSource) validateKeyspaceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyspaceInfo) { // not required
		return nil
	}

	if m.KeyspaceInfo != nil {
		if err := m.KeyspaceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyspaceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keyspaceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraProtectionSource) validateTableInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TableInfo) { // not required
		return nil
	}

	if m.TableInfo != nil {
		if err := m.TableInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tableInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tableInfo")
			}
			return err
		}
	}

	return nil
}

var cassandraProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kKeyspace","kTable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cassandraProtectionSourceTypeTypePropEnum = append(cassandraProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// CassandraProtectionSourceTypeKCluster captures enum value "kCluster"
	CassandraProtectionSourceTypeKCluster string = "kCluster"

	// CassandraProtectionSourceTypeKKeyspace captures enum value "kKeyspace"
	CassandraProtectionSourceTypeKKeyspace string = "kKeyspace"

	// CassandraProtectionSourceTypeKTable captures enum value "kTable"
	CassandraProtectionSourceTypeKTable string = "kTable"
)

// prop value enum
func (m *CassandraProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cassandraProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CassandraProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cassandra protection source based on the context it is used
func (m *CassandraProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyspaceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTableInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraProtectionSource) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {

		if swag.IsZero(m.ClusterInfo) { // not required
			return nil
		}

		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraProtectionSource) contextValidateKeyspaceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.KeyspaceInfo != nil {

		if swag.IsZero(m.KeyspaceInfo) { // not required
			return nil
		}

		if err := m.KeyspaceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyspaceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keyspaceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraProtectionSource) contextValidateTableInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.TableInfo != nil {

		if swag.IsZero(m.TableInfo) { // not required
			return nil
		}

		if err := m.TableInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tableInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tableInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CassandraProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraProtectionSource) UnmarshalBinary(b []byte) error {
	var res CassandraProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
