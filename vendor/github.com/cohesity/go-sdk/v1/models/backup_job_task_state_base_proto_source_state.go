// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupJobTaskStateBaseProtoSourceState backup job task state base proto source state
//
// swagger:model BackupJobTaskStateBaseProto_SourceState
type BackupJobTaskStateBaseProtoSourceState struct {

	// This will be populated for attempts. These entities will be used to
	// form an intersection to obtain the sources.
	AttemptSourceVec []*PrivateEntityProto `json:"attemptSourceVec"`

	// Additional backup params for the source.
	BackupSourceParams *BackupSourceParams `json:"backupSourceParams,omitempty"`

	// The delay(w.r.t ideal schedule) with which this task/job was scheduled.
	// For a job with 3 hr backup interval with a previous run at 3:00pm and
	// if this run has scheduled_time_usecs of 6:15pm, the value will be
	// 15*60(15 min). This can be used to schedule next run at 9pm.
	NextRunAdvancementTimeSecs *int64 `json:"nextRunAdvancementTimeSecs,omitempty"`

	// Set of entities protected by this task in case the task is run for
	// a non leaf entity to protect multiple descendent leaf level objects.
	// This is used for nosql entity types like cassandra where the backup
	// task is run one per namespace to backup various tables within the
	// namespace.
	ProtectedEntities []*PrivateEntityProto `json:"protectedEntities"`

	// The time at which this task/job was supposed to be scheduled. This is
	// useful to track failures across multiple runs, as these failures have to
	// be counted against a particular scheduled time.
	ScheduledTimeUsecs *int64 `json:"scheduledTimeUsecs,omitempty"`

	// The source description.
	// TODO(Chinmaya): For now this will be populated for both tasks and
	// attempts so that Rx cluster can handle the proto. Change this to be
	// only populated for tasks after versions < 3.9 are deprecated.
	Source *PrivateEntityProto `json:"source,omitempty"`
}

// Validate validates this backup job task state base proto source state
func (m *BackupJobTaskStateBaseProtoSourceState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttemptSourceVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupSourceParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectedEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobTaskStateBaseProtoSourceState) validateAttemptSourceVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AttemptSourceVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AttemptSourceVec); i++ {
		if swag.IsZero(m.AttemptSourceVec[i]) { // not required
			continue
		}

		if m.AttemptSourceVec[i] != nil {
			if err := m.AttemptSourceVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attemptSourceVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attemptSourceVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupJobTaskStateBaseProtoSourceState) validateBackupSourceParams(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupSourceParams) { // not required
		return nil
	}

	if m.BackupSourceParams != nil {
		if err := m.BackupSourceParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupSourceParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupSourceParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobTaskStateBaseProtoSourceState) validateProtectedEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectedEntities) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectedEntities); i++ {
		if swag.IsZero(m.ProtectedEntities[i]) { // not required
			continue
		}

		if m.ProtectedEntities[i] != nil {
			if err := m.ProtectedEntities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectedEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectedEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupJobTaskStateBaseProtoSourceState) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup job task state base proto source state based on the context it is used
func (m *BackupJobTaskStateBaseProtoSourceState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttemptSourceVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupSourceParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectedEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobTaskStateBaseProtoSourceState) contextValidateAttemptSourceVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttemptSourceVec); i++ {

		if m.AttemptSourceVec[i] != nil {

			if swag.IsZero(m.AttemptSourceVec[i]) { // not required
				return nil
			}

			if err := m.AttemptSourceVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attemptSourceVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attemptSourceVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupJobTaskStateBaseProtoSourceState) contextValidateBackupSourceParams(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupSourceParams != nil {

		if swag.IsZero(m.BackupSourceParams) { // not required
			return nil
		}

		if err := m.BackupSourceParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupSourceParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupSourceParams")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobTaskStateBaseProtoSourceState) contextValidateProtectedEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectedEntities); i++ {

		if m.ProtectedEntities[i] != nil {

			if swag.IsZero(m.ProtectedEntities[i]) { // not required
				return nil
			}

			if err := m.ProtectedEntities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectedEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectedEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupJobTaskStateBaseProtoSourceState) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupJobTaskStateBaseProtoSourceState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupJobTaskStateBaseProtoSourceState) UnmarshalBinary(b []byte) error {
	var res BackupJobTaskStateBaseProtoSourceState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
