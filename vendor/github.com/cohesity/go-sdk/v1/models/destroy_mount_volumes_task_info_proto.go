// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DestroyMountVolumesTaskInfoProto Message that captures the destroy mount volumes task state.
//
// swagger:model DestroyMountVolumesTaskInfoProto
type DestroyMountVolumesTaskInfoProto struct {

	// If an error is encountered during destroy it is set here.
	Error *ErrorProto `json:"error,omitempty"`

	// This will be set to true if the task is complete on the slave.
	Finished *bool `json:"finished,omitempty"`

	// This is the host name of the ESXi host. It is used if
	// magneto_vmware_use_fqdn_for_guest_file_operations is set.
	HostName *string `json:"hostName,omitempty"`

	// This contains the mount volumes info proto and the associated setup
	// restore disks state. This starts out with contents from the original mount
	// volumes info task, but later gets mutated by slave to contain destroy
	// related information.
	MountVolumesInfoProto *MountVolumesInfoProto `json:"mountVolumesInfoProto,omitempty"`

	// This is the timestamp at which the slave task started.
	SlaveTaskStartTimeUsecs *int64 `json:"slaveTaskStartTimeUsecs,omitempty"`

	// The target entity on which the mount volumes operation was performed.
	TargetEntity *EntityProto `json:"targetEntity,omitempty"`

	// This will be set to true in two cases:
	// 1. If persistent agent was used for IVM.
	// 2. If user chose ephemeral agent during IVM but the host already had
	// persistent agent installed.
	UseExistingAgent *bool `json:"useExistingAgent,omitempty"`

	// Environment specific additional params if any.
	// This is populated for VMware environments and used to determine whether to
	// cleanup restore mountpoints within a VM.
	VmwareParams *MountVolumesVMwareParams `json:"vmwareParams,omitempty"`
}

// Validate validates this destroy mount volumes task info proto
func (m *DestroyMountVolumesTaskInfoProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountVolumesInfoProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestroyMountVolumesTaskInfoProto) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyMountVolumesTaskInfoProto) validateMountVolumesInfoProto(formats strfmt.Registry) error {
	if swag.IsZero(m.MountVolumesInfoProto) { // not required
		return nil
	}

	if m.MountVolumesInfoProto != nil {
		if err := m.MountVolumesInfoProto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountVolumesInfoProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountVolumesInfoProto")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyMountVolumesTaskInfoProto) validateTargetEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetEntity) { // not required
		return nil
	}

	if m.TargetEntity != nil {
		if err := m.TargetEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetEntity")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyMountVolumesTaskInfoProto) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this destroy mount volumes task info proto based on the context it is used
func (m *DestroyMountVolumesTaskInfoProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountVolumesInfoProto(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestroyMountVolumesTaskInfoProto) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyMountVolumesTaskInfoProto) contextValidateMountVolumesInfoProto(ctx context.Context, formats strfmt.Registry) error {

	if m.MountVolumesInfoProto != nil {

		if swag.IsZero(m.MountVolumesInfoProto) { // not required
			return nil
		}

		if err := m.MountVolumesInfoProto.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountVolumesInfoProto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountVolumesInfoProto")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyMountVolumesTaskInfoProto) contextValidateTargetEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetEntity != nil {

		if swag.IsZero(m.TargetEntity) { // not required
			return nil
		}

		if err := m.TargetEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetEntity")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyMountVolumesTaskInfoProto) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestroyMountVolumesTaskInfoProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestroyMountVolumesTaskInfoProto) UnmarshalBinary(b []byte) error {
	var res DestroyMountVolumesTaskInfoProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
