// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExchangeTopology Represents Exchange onprem host topology queried from a specific Cohesity
// source. This topology may be a DAG node or standalone Exchange server.
//
// swagger:model ExchangeTopology
type ExchangeTopology struct {

	// This Exchange organization represents DAG. If this is non-null,
	// 'standalone_server' must be null.
	Dag *ExchangeDAG `json:"dag,omitempty"`

	// DAG enabled database copies that are hosted on the 'dag_node'. A database
	// copy may be active or passive.
	DagDbCopyVec []*ExchangeDAGDatabaseCopy `json:"dagDbCopyVec"`

	// DAG Exchange server node details. If 'dag' is not-null this will be
	// populated. The DAG node contains identities of other DAG nodes of 'dag'.
	DagNode *ExchangeServerDAGNode `json:"dagNode,omitempty"`

	// Standalone databases. This can be populated for DAG or Standalone Exchange
	// server as DAG may host standalone DBs that are not yet part of
	// DAG (it has only one copy).
	StandaloneDbVec []*ExchangeDatabase `json:"standaloneDbVec"`

	// Exchange standalone (non-DAG) server. If this is non-null, 'dag' must be
	// null as an Exchange server cannot exist both as standalone and part of
	// DAG.
	StandaloneServer *ExchangeServerNode `json:"standaloneServer,omitempty"`
}

// Validate validates this exchange topology
func (m *ExchangeTopology) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDagDbCopyVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDagNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandaloneDbVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandaloneServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeTopology) validateDag(formats strfmt.Registry) error {
	if swag.IsZero(m.Dag) { // not required
		return nil
	}

	if m.Dag != nil {
		if err := m.Dag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dag")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeTopology) validateDagDbCopyVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DagDbCopyVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DagDbCopyVec); i++ {
		if swag.IsZero(m.DagDbCopyVec[i]) { // not required
			continue
		}

		if m.DagDbCopyVec[i] != nil {
			if err := m.DagDbCopyVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dagDbCopyVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dagDbCopyVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExchangeTopology) validateDagNode(formats strfmt.Registry) error {
	if swag.IsZero(m.DagNode) { // not required
		return nil
	}

	if m.DagNode != nil {
		if err := m.DagNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dagNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dagNode")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeTopology) validateStandaloneDbVec(formats strfmt.Registry) error {
	if swag.IsZero(m.StandaloneDbVec) { // not required
		return nil
	}

	for i := 0; i < len(m.StandaloneDbVec); i++ {
		if swag.IsZero(m.StandaloneDbVec[i]) { // not required
			continue
		}

		if m.StandaloneDbVec[i] != nil {
			if err := m.StandaloneDbVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standaloneDbVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standaloneDbVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExchangeTopology) validateStandaloneServer(formats strfmt.Registry) error {
	if swag.IsZero(m.StandaloneServer) { // not required
		return nil
	}

	if m.StandaloneServer != nil {
		if err := m.StandaloneServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneServer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exchange topology based on the context it is used
func (m *ExchangeTopology) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDagDbCopyVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDagNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandaloneDbVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandaloneServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeTopology) contextValidateDag(ctx context.Context, formats strfmt.Registry) error {

	if m.Dag != nil {

		if swag.IsZero(m.Dag) { // not required
			return nil
		}

		if err := m.Dag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dag")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeTopology) contextValidateDagDbCopyVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DagDbCopyVec); i++ {

		if m.DagDbCopyVec[i] != nil {

			if swag.IsZero(m.DagDbCopyVec[i]) { // not required
				return nil
			}

			if err := m.DagDbCopyVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dagDbCopyVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dagDbCopyVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExchangeTopology) contextValidateDagNode(ctx context.Context, formats strfmt.Registry) error {

	if m.DagNode != nil {

		if swag.IsZero(m.DagNode) { // not required
			return nil
		}

		if err := m.DagNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dagNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dagNode")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeTopology) contextValidateStandaloneDbVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StandaloneDbVec); i++ {

		if m.StandaloneDbVec[i] != nil {

			if swag.IsZero(m.StandaloneDbVec[i]) { // not required
				return nil
			}

			if err := m.StandaloneDbVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standaloneDbVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standaloneDbVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExchangeTopology) contextValidateStandaloneServer(ctx context.Context, formats strfmt.Registry) error {

	if m.StandaloneServer != nil {

		if swag.IsZero(m.StandaloneServer) { // not required
			return nil
		}

		if err := m.StandaloneServer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneServer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeTopology) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeTopology) UnmarshalBinary(b []byte) error {
	var res ExchangeTopology
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
