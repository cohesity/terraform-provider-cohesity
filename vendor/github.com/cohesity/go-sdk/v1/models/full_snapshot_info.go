// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FullSnapshotInfo Specifies the info regarding how to restore to a particular full or
// incremental snapshot.
//
// swagger:model FullSnapshotInfo
type FullSnapshotInfo struct {

	// Specifies the full or incremental snapshot.
	RestoreInfo *RestoreInfo `json:"restoreInfo,omitempty"`

	// Specifies the location holding snapshot copies that may be used for
	// restore.
	SnapshotTarget []*SnapshotTargetSettings `json:"snapshotTarget"`
}

// Validate validates this full snapshot info
func (m *FullSnapshotInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestoreInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FullSnapshotInfo) validateRestoreInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreInfo) { // not required
		return nil
	}

	if m.RestoreInfo != nil {
		if err := m.RestoreInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *FullSnapshotInfo) validateSnapshotTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotTarget) { // not required
		return nil
	}

	for i := 0; i < len(m.SnapshotTarget); i++ {
		if swag.IsZero(m.SnapshotTarget[i]) { // not required
			continue
		}

		if m.SnapshotTarget[i] != nil {
			if err := m.SnapshotTarget[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshotTarget" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshotTarget" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this full snapshot info based on the context it is used
func (m *FullSnapshotInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRestoreInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FullSnapshotInfo) contextValidateRestoreInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreInfo != nil {

		if swag.IsZero(m.RestoreInfo) { // not required
			return nil
		}

		if err := m.RestoreInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *FullSnapshotInfo) contextValidateSnapshotTarget(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SnapshotTarget); i++ {

		if m.SnapshotTarget[i] != nil {

			if swag.IsZero(m.SnapshotTarget[i]) { // not required
				return nil
			}

			if err := m.SnapshotTarget[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshotTarget" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshotTarget" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FullSnapshotInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FullSnapshotInfo) UnmarshalBinary(b []byte) error {
	var res FullSnapshotInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
