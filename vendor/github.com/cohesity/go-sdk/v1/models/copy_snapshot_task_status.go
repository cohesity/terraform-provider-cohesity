// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CopySnapshotTaskStatus Copy Snapshot Task Status.
//
// Specifies the status of the copy task that copies the snapshot of a
// Protection Source object to a target.
//
// swagger:model CopySnapshotTaskStatus
type CopySnapshotTaskStatus struct {

	// Specifies if an error occurred (if any) while running this task.
	// This field is populated when the status is equal to 'kFailure'.
	Error *string `json:"error,omitempty"`

	// Specifies the source object whose snapshot is replicated.
	// This is specified for replication targets.
	Source *ProtectionSource `json:"source,omitempty"`

	// Specifies the stats of the replication or the archival task.
	Stats *CopyRunStats `json:"stats,omitempty"`

	// Specifies the status of the source object being protected.
	// 'kAccepted' indicates the task is queued to run but not yet running.
	// 'kRunning' indicates the task is running.
	// 'kCanceling' indicates a request to cancel the task has occurred but
	//
	// the task is not yet canceled.
	//
	// 'kCanceled' indicates the task has been canceled.
	// 'kSuccess' indicates the task was successful.
	// 'kFailure' indicates the task failed.
	// 'kWarning' indicates the task has finished with warning.
	// 'kOnHold' indicates the task is kept onHold.
	// 'kMissed' indicates the task is missed.
	// 'Finalizing' indicates the task is finalizing.
	// Enum: ["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure","kWarning","kOnHold","kMissed","kFinalizing"]
	Status *string `json:"status,omitempty"`

	// Specifies the end time of the copy task. The end time
	// is specified as a Unix epoch Timestamp (in microseconds).
	TaskEndTimeUsecs *int64 `json:"taskEndTimeUsecs,omitempty"`

	// Specifies the start time of the copy task. The start time
	// is specified as a Unix epoch Timestamp (in microseconds).
	// Copy run task is started after completing backup tasks.
	// It may spawn sub-tasks to copy or replicate individual snapshots.
	TaskStartTimeUsecs *int64 `json:"taskStartTimeUsecs,omitempty"`
}

// Validate validates this copy snapshot task status
func (m *CopySnapshotTaskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CopySnapshotTaskStatus) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *CopySnapshotTaskStatus) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

var copySnapshotTaskStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure","kWarning","kOnHold","kMissed","kFinalizing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		copySnapshotTaskStatusTypeStatusPropEnum = append(copySnapshotTaskStatusTypeStatusPropEnum, v)
	}
}

const (

	// CopySnapshotTaskStatusStatusKAccepted captures enum value "kAccepted"
	CopySnapshotTaskStatusStatusKAccepted string = "kAccepted"

	// CopySnapshotTaskStatusStatusKRunning captures enum value "kRunning"
	CopySnapshotTaskStatusStatusKRunning string = "kRunning"

	// CopySnapshotTaskStatusStatusKCanceling captures enum value "kCanceling"
	CopySnapshotTaskStatusStatusKCanceling string = "kCanceling"

	// CopySnapshotTaskStatusStatusKCanceled captures enum value "kCanceled"
	CopySnapshotTaskStatusStatusKCanceled string = "kCanceled"

	// CopySnapshotTaskStatusStatusKSuccess captures enum value "kSuccess"
	CopySnapshotTaskStatusStatusKSuccess string = "kSuccess"

	// CopySnapshotTaskStatusStatusKFailure captures enum value "kFailure"
	CopySnapshotTaskStatusStatusKFailure string = "kFailure"

	// CopySnapshotTaskStatusStatusKWarning captures enum value "kWarning"
	CopySnapshotTaskStatusStatusKWarning string = "kWarning"

	// CopySnapshotTaskStatusStatusKOnHold captures enum value "kOnHold"
	CopySnapshotTaskStatusStatusKOnHold string = "kOnHold"

	// CopySnapshotTaskStatusStatusKMissed captures enum value "kMissed"
	CopySnapshotTaskStatusStatusKMissed string = "kMissed"

	// CopySnapshotTaskStatusStatusKFinalizing captures enum value "kFinalizing"
	CopySnapshotTaskStatusStatusKFinalizing string = "kFinalizing"
)

// prop value enum
func (m *CopySnapshotTaskStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, copySnapshotTaskStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CopySnapshotTaskStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this copy snapshot task status based on the context it is used
func (m *CopySnapshotTaskStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CopySnapshotTaskStatus) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *CopySnapshotTaskStatus) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CopySnapshotTaskStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CopySnapshotTaskStatus) UnmarshalBinary(b []byte) error {
	var res CopySnapshotTaskStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
