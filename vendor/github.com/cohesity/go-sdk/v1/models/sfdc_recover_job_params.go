// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SfdcRecoverJobParams Contains recovery params at the job level applicable for Sfdc environment.
//
// swagger:model SfdcRecoverJobParams
type SfdcRecoverJobParams struct {

	// Contains the information of the Aurora database cluster.
	AuroraClusterInfo *AuroraClusterInfo `json:"auroraClusterInfo,omitempty"`

	// IAM role used to get access to the Aurora cluster and S3 bucket.
	AwsIamRole *string `json:"awsIamRole,omitempty"`

	// Flag to specify if this is an alternate source restore.
	IsAlternateRestore *bool `json:"isAlternateRestore,omitempty"`

	// Whether to overwrite or keep the object if the object being recovered
	// already exists in the destination.
	Overwrite *bool `json:"overwrite,omitempty"`

	// A map containing prev_full_sfdc_server_timestamp_usecs for the dependent
	// objects.
	PrevFullSfdcServerTimestampUsecsMap map[string]int64 `json:"prevFullSfdcServerTimestampUsecsMap,omitempty"`

	// restore childs object vec
	RestoreChildsObjectVec []string `json:"restoreChildsObjectVec"`

	// List of parent/child objects that need to be restored.
	RestoreParentObjectVec []string `json:"restoreParentObjectVec"`

	// The time when the corresponding backup run was started.
	RunStartTimeUsecs *int64 `json:"runStartTimeUsecs,omitempty"`

	// Contains the information of the S3 bucket used for uploading data.
	S3BucketInfo *S3BucketInfo `json:"s3BucketInfo,omitempty"`
}

// Validate validates this sfdc recover job params
func (m *SfdcRecoverJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuroraClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3BucketInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcRecoverJobParams) validateAuroraClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AuroraClusterInfo) { // not required
		return nil
	}

	if m.AuroraClusterInfo != nil {
		if err := m.AuroraClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraClusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraClusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SfdcRecoverJobParams) validateS3BucketInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.S3BucketInfo) { // not required
		return nil
	}

	if m.S3BucketInfo != nil {
		if err := m.S3BucketInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3BucketInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3BucketInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sfdc recover job params based on the context it is used
func (m *SfdcRecoverJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuroraClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3BucketInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcRecoverJobParams) contextValidateAuroraClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AuroraClusterInfo != nil {

		if swag.IsZero(m.AuroraClusterInfo) { // not required
			return nil
		}

		if err := m.AuroraClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraClusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraClusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SfdcRecoverJobParams) contextValidateS3BucketInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.S3BucketInfo != nil {

		if swag.IsZero(m.S3BucketInfo) { // not required
			return nil
		}

		if err := m.S3BucketInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3BucketInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3BucketInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SfdcRecoverJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcRecoverJobParams) UnmarshalBinary(b []byte) error {
	var res SfdcRecoverJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
