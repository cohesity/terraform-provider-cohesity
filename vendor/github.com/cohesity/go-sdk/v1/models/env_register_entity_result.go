// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EnvRegisterEntityResult Environment specific register entity result.
//
// swagger:model EnvRegisterEntityResult
type EnvRegisterEntityResult struct {

	// This is returned when discovering cassandra cluster.
	CassandraRegisterEntityResult *CassandraRegisterEntityResult `json:"cassandraRegisterEntityResult,omitempty"`

	// This is returned when discovering hbase cluster.
	HbaseRegisterEntityResult *HBaseRegisterEntityResult `json:"hbaseRegisterEntityResult,omitempty"`

	// This is returned when discovering hdfs cluster.
	HdfsRegisterEntityResult *HdfsRegisterEntityResult `json:"hdfsRegisterEntityResult,omitempty"`

	// This is returned when discovering hive cluster.
	HiveRegisterEntityResult *HiveRegisterEntityResult `json:"hiveRegisterEntityResult,omitempty"`

	// This is returned when discovering o365 source.
	O365RegisterEntityResult *O365RegisterEntityResult `json:"o365RegisterEntityResult,omitempty"`

	// This is returned when registering vCloud director. This will contain
	// vCenter information for which credentials are required.
	VcdRegisterEntityResult *VCDRegisterEntityResult `json:"vcdRegisterEntityResult,omitempty"`
}

// Validate validates this env register entity result
func (m *EnvRegisterEntityResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCassandraRegisterEntityResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseRegisterEntityResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsRegisterEntityResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveRegisterEntityResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO365RegisterEntityResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdRegisterEntityResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvRegisterEntityResult) validateCassandraRegisterEntityResult(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraRegisterEntityResult) { // not required
		return nil
	}

	if m.CassandraRegisterEntityResult != nil {
		if err := m.CassandraRegisterEntityResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *EnvRegisterEntityResult) validateHbaseRegisterEntityResult(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseRegisterEntityResult) { // not required
		return nil
	}

	if m.HbaseRegisterEntityResult != nil {
		if err := m.HbaseRegisterEntityResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *EnvRegisterEntityResult) validateHdfsRegisterEntityResult(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsRegisterEntityResult) { // not required
		return nil
	}

	if m.HdfsRegisterEntityResult != nil {
		if err := m.HdfsRegisterEntityResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *EnvRegisterEntityResult) validateHiveRegisterEntityResult(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveRegisterEntityResult) { // not required
		return nil
	}

	if m.HiveRegisterEntityResult != nil {
		if err := m.HiveRegisterEntityResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *EnvRegisterEntityResult) validateO365RegisterEntityResult(formats strfmt.Registry) error {
	if swag.IsZero(m.O365RegisterEntityResult) { // not required
		return nil
	}

	if m.O365RegisterEntityResult != nil {
		if err := m.O365RegisterEntityResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365RegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365RegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *EnvRegisterEntityResult) validateVcdRegisterEntityResult(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdRegisterEntityResult) { // not required
		return nil
	}

	if m.VcdRegisterEntityResult != nil {
		if err := m.VcdRegisterEntityResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this env register entity result based on the context it is used
func (m *EnvRegisterEntityResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCassandraRegisterEntityResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseRegisterEntityResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsRegisterEntityResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveRegisterEntityResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateO365RegisterEntityResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdRegisterEntityResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvRegisterEntityResult) contextValidateCassandraRegisterEntityResult(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraRegisterEntityResult != nil {

		if swag.IsZero(m.CassandraRegisterEntityResult) { // not required
			return nil
		}

		if err := m.CassandraRegisterEntityResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *EnvRegisterEntityResult) contextValidateHbaseRegisterEntityResult(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseRegisterEntityResult != nil {

		if swag.IsZero(m.HbaseRegisterEntityResult) { // not required
			return nil
		}

		if err := m.HbaseRegisterEntityResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *EnvRegisterEntityResult) contextValidateHdfsRegisterEntityResult(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsRegisterEntityResult != nil {

		if swag.IsZero(m.HdfsRegisterEntityResult) { // not required
			return nil
		}

		if err := m.HdfsRegisterEntityResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *EnvRegisterEntityResult) contextValidateHiveRegisterEntityResult(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveRegisterEntityResult != nil {

		if swag.IsZero(m.HiveRegisterEntityResult) { // not required
			return nil
		}

		if err := m.HiveRegisterEntityResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *EnvRegisterEntityResult) contextValidateO365RegisterEntityResult(ctx context.Context, formats strfmt.Registry) error {

	if m.O365RegisterEntityResult != nil {

		if swag.IsZero(m.O365RegisterEntityResult) { // not required
			return nil
		}

		if err := m.O365RegisterEntityResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365RegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365RegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *EnvRegisterEntityResult) contextValidateVcdRegisterEntityResult(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdRegisterEntityResult != nil {

		if swag.IsZero(m.VcdRegisterEntityResult) { // not required
			return nil
		}

		if err := m.VcdRegisterEntityResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvRegisterEntityResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvRegisterEntityResult) UnmarshalBinary(b []byte) error {
	var res EnvRegisterEntityResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
