// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AwsParams AWS Parameters.
//
// Specifies various resources when converting and deploying a VM to AWS.
//
// swagger:model AwsParams
type AwsParams struct {

	// Specifies the list of Custom Tag Parameters to be applied to resources
	// created in AWS Cloudspin.
	CustomTagList []*CustomTagParams `json:"customTagList"`

	// Specifies id of the AWS instance type in which to deploy the VM.
	InstanceID *int64 `json:"instanceId,omitempty"`

	// Specifies ids of the network security groups within above VPC.
	NetworkSecurityGroupIds []int64 `json:"networkSecurityGroupIds"`

	// Specifies Amazon RDS parameters.
	RdsParams *RdsParams `json:"rdsParams,omitempty"`

	// Specifies id of the AWS region in which to deploy the VM.
	Region *int64 `json:"region,omitempty"`

	// Specifies id of the subnet within above VPC.
	SubnetID *int64 `json:"subnetId,omitempty"`

	// Specifies id of the Virtual Private Cloud to chose for the instance type.
	VirtualPrivateCloudID *int64 `json:"virtualPrivateCloudId,omitempty"`
}

// Validate validates this aws params
func (m *AwsParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomTagList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsParams) validateCustomTagList(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomTagList) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomTagList); i++ {
		if swag.IsZero(m.CustomTagList[i]) { // not required
			continue
		}

		if m.CustomTagList[i] != nil {
			if err := m.CustomTagList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTagList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customTagList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AwsParams) validateRdsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RdsParams) { // not required
		return nil
	}

	if m.RdsParams != nil {
		if err := m.RdsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws params based on the context it is used
func (m *AwsParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomTagList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRdsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsParams) contextValidateCustomTagList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomTagList); i++ {

		if m.CustomTagList[i] != nil {

			if swag.IsZero(m.CustomTagList[i]) { // not required
				return nil
			}

			if err := m.CustomTagList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTagList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customTagList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AwsParams) contextValidateRdsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RdsParams != nil {

		if swag.IsZero(m.RdsParams) { // not required
			return nil
		}

		if err := m.RdsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsParams) UnmarshalBinary(b []byte) error {
	var res AwsParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
