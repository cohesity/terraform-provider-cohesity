// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualDiskRecoverTaskState Virtual Disk Recover State.
//
// Specifies the complete information about a recover virtual disk task state.
//
// swagger:model VirtualDiskRecoverTaskState
type VirtualDiskRecoverTaskState struct {

	// The error encountered by task (if any). Only valid if the task has
	// finished.
	Error *RequestError `json:"error,omitempty"`

	// Specifies if instant recovery of the virtual disk is complete.
	IsInstantRecoveryFinished *bool `json:"isInstantRecoveryFinished,omitempty"`

	// Specifies the current state of the restore virtual disks task.
	// Specifies the current state of the restore virtual disks task.
	// 'kDetachDisksDone' indicates the detached state of disks.
	// 'kSetupDisksDone' indicates that disks setup is completed.
	// 'kMigrateDisksStarted' indicates that disks are being migrated.
	// 'kMigrateDisksDone' indicates that disk migration is completed.
	// 'kUnMountDatastoreDone' indicates that disk has unmounted the datastore.
	// Enum: ["kDetachDisksDone","kSetupDisksDone","kMigrateDisksStarted","kMigrateDisksDone","kUnMountDatastoreDone"]
	TaskState *string `json:"taskState,omitempty"`

	// Specifies the response for recovery of virtual disks of a vm.
	VirtualDiskRestoreResponse *VirtualDiskRestoreResponse `json:"virtualDiskRestoreResponse,omitempty"`
}

// Validate validates this virtual disk recover task state
func (m *VirtualDiskRecoverTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDiskRestoreResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualDiskRecoverTaskState) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

var virtualDiskRecoverTaskStateTypeTaskStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDetachDisksDone","kSetupDisksDone","kMigrateDisksStarted","kMigrateDisksDone","kUnMountDatastoreDone"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualDiskRecoverTaskStateTypeTaskStatePropEnum = append(virtualDiskRecoverTaskStateTypeTaskStatePropEnum, v)
	}
}

const (

	// VirtualDiskRecoverTaskStateTaskStateKDetachDisksDone captures enum value "kDetachDisksDone"
	VirtualDiskRecoverTaskStateTaskStateKDetachDisksDone string = "kDetachDisksDone"

	// VirtualDiskRecoverTaskStateTaskStateKSetupDisksDone captures enum value "kSetupDisksDone"
	VirtualDiskRecoverTaskStateTaskStateKSetupDisksDone string = "kSetupDisksDone"

	// VirtualDiskRecoverTaskStateTaskStateKMigrateDisksStarted captures enum value "kMigrateDisksStarted"
	VirtualDiskRecoverTaskStateTaskStateKMigrateDisksStarted string = "kMigrateDisksStarted"

	// VirtualDiskRecoverTaskStateTaskStateKMigrateDisksDone captures enum value "kMigrateDisksDone"
	VirtualDiskRecoverTaskStateTaskStateKMigrateDisksDone string = "kMigrateDisksDone"

	// VirtualDiskRecoverTaskStateTaskStateKUnMountDatastoreDone captures enum value "kUnMountDatastoreDone"
	VirtualDiskRecoverTaskStateTaskStateKUnMountDatastoreDone string = "kUnMountDatastoreDone"
)

// prop value enum
func (m *VirtualDiskRecoverTaskState) validateTaskStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualDiskRecoverTaskStateTypeTaskStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualDiskRecoverTaskState) validateTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskState) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskStateEnum("taskState", "body", *m.TaskState); err != nil {
		return err
	}

	return nil
}

func (m *VirtualDiskRecoverTaskState) validateVirtualDiskRestoreResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualDiskRestoreResponse) { // not required
		return nil
	}

	if m.VirtualDiskRestoreResponse != nil {
		if err := m.VirtualDiskRestoreResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualDiskRestoreResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualDiskRestoreResponse")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual disk recover task state based on the context it is used
func (m *VirtualDiskRecoverTaskState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualDiskRestoreResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualDiskRecoverTaskState) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualDiskRecoverTaskState) contextValidateVirtualDiskRestoreResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.VirtualDiskRestoreResponse != nil {

		if swag.IsZero(m.VirtualDiskRestoreResponse) { // not required
			return nil
		}

		if err := m.VirtualDiskRestoreResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualDiskRestoreResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualDiskRestoreResponse")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualDiskRecoverTaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualDiskRecoverTaskState) UnmarshalBinary(b []byte) error {
	var res VirtualDiskRecoverTaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
