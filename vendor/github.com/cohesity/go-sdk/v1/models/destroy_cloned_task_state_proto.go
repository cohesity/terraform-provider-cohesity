// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DestroyClonedTaskStateProto destroy cloned task state proto
//
// swagger:model DestroyClonedTaskStateProto
type DestroyClonedTaskStateProto struct {

	// Denotes the target for action executor(Bridge/Bridge_Proxy) on which task
	// on slave should execute actions.
	ActionExecutorTargetType *int32 `json:"actionExecutorTargetType,omitempty"`

	// The name of the clone task.
	CloneTaskName *string `json:"cloneTaskName,omitempty"`

	// The EntityProto of the datastore that corresponds to the above
	// 'view_name'. This field will be empty if no datastore is associated with
	// the clone view.
	DatastoreEntity *EntityProto `json:"datastoreEntity,omitempty"`

	// The following field is only relevant for a destroy for task of type
	// kConvertAndDeployVMs.
	//
	// Master populates information regarding deploy vm to cloud task state. This
	// is needed during restore task of type kConvertAndDeployVMs. We use it
	// during destroy clone to delete VMs, network entities and storage blobs.
	DeployVmsToCloudTaskState *DeployVMsToCloudTaskStateProto `json:"deployVmsToCloudTaskState,omitempty"`

	// Master populates the information about the destroy clone application task.
	// Slave populates the progress and status of the task.
	DestroyCloneAppTaskInfo *DestroyCloneAppTaskInfoProto `json:"destroyCloneAppTaskInfo,omitempty"`

	// Master populates the information about the destroy clone task. Slave
	// populates the progress and status of the task.
	DestroyCloneVMTaskInfo *DestroyClonedVMTaskInfoProto `json:"destroyCloneVmTaskInfo,omitempty"`

	// Master populates the information about the destroy mount volumes task,
	// Slave populate the progress and status of the task.
	DestroyMountVolumesTaskInfo *DestroyMountVolumesTaskInfoProto `json:"destroyMountVolumesTaskInfo,omitempty"`

	// If the destroy clone task has finished, this field contains the end time
	// of the task.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// The error encountered by task (if any). Only valid if the task has
	// finished.
	Error *ErrorProto `json:"error,omitempty"`

	// A folder entity where the cloned objects are placed. This folder will
	// be deleted after all cloned entity are destroyed.
	FolderEntity *EntityProto `json:"folderEntity,omitempty"`

	// flag used to perform force delete, ignore error on delete steps
	ForceDelete *bool `json:"forceDelete,omitempty"`

	// The full external view name where cloned objects are placed.
	FullViewName *string `json:"fullViewName,omitempty"`

	// A way to connect to the parent source. We do not use the connection param
	// info of the corresponding clone task as it might have changed.
	//
	// Note: In case of kConvertAndDeployVMs to Azure, we need the original
	// ConnectorParams of the corresponding deploy to Azure task (i.e. original
	// Azure subscription id).
	ParentSourceConnectionParams *ConnectorParams `json:"parentSourceConnectionParams,omitempty"`

	// The id of the task that triggered the destroy task.
	// This will be used by refresh task to mark the destroy task as internal
	// sub-task.
	ParentTaskID *int64 `json:"parentTaskId,omitempty"`

	// The unique id of the task that performed the clone operation.
	PerformCloneTaskID *int64 `json:"performCloneTaskId,omitempty"`

	// The type of the restore/clone operation that is being destroyed.
	RestoreType *int32 `json:"restoreType,omitempty"`

	// Constituent id (and the gandalf session id) where this task has been
	// scheduled. If -1, the task is not running at any slave. It's possible
	// that the task was previously scheduled, but is now being re-scheduled.
	ScheduledConstituentID *int64 `json:"scheduledConstituentId,omitempty"`

	// scheduled gandalf session Id
	ScheduledGandalfSessionID *int64 `json:"scheduledGandalfSessionId,omitempty"`

	// The start time of this destroy clone task.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Status of the destroy clone task.
	Status *int32 `json:"status,omitempty"`

	// A globally unique id of this destroy clone task.
	TaskID *int64 `json:"taskId,omitempty"`

	// The type of environment that is being operated on.
	Type *int32 `json:"type,omitempty"`

	// The user who requested this destroy clone task.
	User *string `json:"user,omitempty"`

	// Specifies information about the user who made the request.
	UserInfo *UserInformation `json:"userInfo,omitempty"`

	// VCD config for the restored object.
	VcdConfig *RestoredObjectVCDConfigProto `json:"vcdConfig,omitempty"`

	// The view box id to which 'view_name' belongs to.
	ViewBoxID *int64 `json:"viewBoxId,omitempty"`

	// The view name as provided by the user for the clone operation.
	ViewNameDEPRECATED *string `json:"viewName_DEPRECATED,omitempty"`
}

// Validate validates this destroy cloned task state proto
func (m *DestroyClonedTaskStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastoreEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployVmsToCloudTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestroyCloneAppTaskInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestroyCloneVMTaskInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestroyMountVolumesTaskInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolderEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentSourceConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestroyClonedTaskStateProto) validateDatastoreEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreEntity) { // not required
		return nil
	}

	if m.DatastoreEntity != nil {
		if err := m.DatastoreEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreEntity")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) validateDeployVmsToCloudTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToCloudTaskState) { // not required
		return nil
	}

	if m.DeployVmsToCloudTaskState != nil {
		if err := m.DeployVmsToCloudTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) validateDestroyCloneAppTaskInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DestroyCloneAppTaskInfo) { // not required
		return nil
	}

	if m.DestroyCloneAppTaskInfo != nil {
		if err := m.DestroyCloneAppTaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destroyCloneAppTaskInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destroyCloneAppTaskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) validateDestroyCloneVMTaskInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DestroyCloneVMTaskInfo) { // not required
		return nil
	}

	if m.DestroyCloneVMTaskInfo != nil {
		if err := m.DestroyCloneVMTaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destroyCloneVmTaskInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destroyCloneVmTaskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) validateDestroyMountVolumesTaskInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DestroyMountVolumesTaskInfo) { // not required
		return nil
	}

	if m.DestroyMountVolumesTaskInfo != nil {
		if err := m.DestroyMountVolumesTaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destroyMountVolumesTaskInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destroyMountVolumesTaskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) validateFolderEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.FolderEntity) { // not required
		return nil
	}

	if m.FolderEntity != nil {
		if err := m.FolderEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("folderEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("folderEntity")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) validateParentSourceConnectionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentSourceConnectionParams) { // not required
		return nil
	}

	if m.ParentSourceConnectionParams != nil {
		if err := m.ParentSourceConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSourceConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSourceConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) validateUserInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.UserInfo) { // not required
		return nil
	}

	if m.UserInfo != nil {
		if err := m.UserInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) validateVcdConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdConfig) { // not required
		return nil
	}

	if m.VcdConfig != nil {
		if err := m.VcdConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this destroy cloned task state proto based on the context it is used
func (m *DestroyClonedTaskStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatastoreEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployVmsToCloudTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestroyCloneAppTaskInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestroyCloneVMTaskInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestroyMountVolumesTaskInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFolderEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentSourceConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestroyClonedTaskStateProto) contextValidateDatastoreEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.DatastoreEntity != nil {

		if swag.IsZero(m.DatastoreEntity) { // not required
			return nil
		}

		if err := m.DatastoreEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreEntity")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) contextValidateDeployVmsToCloudTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToCloudTaskState != nil {

		if swag.IsZero(m.DeployVmsToCloudTaskState) { // not required
			return nil
		}

		if err := m.DeployVmsToCloudTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) contextValidateDestroyCloneAppTaskInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DestroyCloneAppTaskInfo != nil {

		if swag.IsZero(m.DestroyCloneAppTaskInfo) { // not required
			return nil
		}

		if err := m.DestroyCloneAppTaskInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destroyCloneAppTaskInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destroyCloneAppTaskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) contextValidateDestroyCloneVMTaskInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DestroyCloneVMTaskInfo != nil {

		if swag.IsZero(m.DestroyCloneVMTaskInfo) { // not required
			return nil
		}

		if err := m.DestroyCloneVMTaskInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destroyCloneVmTaskInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destroyCloneVmTaskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) contextValidateDestroyMountVolumesTaskInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DestroyMountVolumesTaskInfo != nil {

		if swag.IsZero(m.DestroyMountVolumesTaskInfo) { // not required
			return nil
		}

		if err := m.DestroyMountVolumesTaskInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destroyMountVolumesTaskInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destroyMountVolumesTaskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) contextValidateFolderEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.FolderEntity != nil {

		if swag.IsZero(m.FolderEntity) { // not required
			return nil
		}

		if err := m.FolderEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("folderEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("folderEntity")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) contextValidateParentSourceConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentSourceConnectionParams != nil {

		if swag.IsZero(m.ParentSourceConnectionParams) { // not required
			return nil
		}

		if err := m.ParentSourceConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSourceConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSourceConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) contextValidateUserInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.UserInfo != nil {

		if swag.IsZero(m.UserInfo) { // not required
			return nil
		}

		if err := m.UserInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DestroyClonedTaskStateProto) contextValidateVcdConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdConfig != nil {

		if swag.IsZero(m.VcdConfig) { // not required
			return nil
		}

		if err := m.VcdConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestroyClonedTaskStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestroyClonedTaskStateProto) UnmarshalBinary(b []byte) error {
	var res DestroyClonedTaskStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
