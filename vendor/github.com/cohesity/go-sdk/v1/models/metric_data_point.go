// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MetricDataPoint Metric Data Point.
//
// Specifies information about a single data point in a time series.
//
// swagger:model MetricDataPoint
type MetricDataPoint struct {

	// Corresponding value of a metric at the given timestamp. When client
	// adds or pushes the stats, this field must be specified. When Stats module,
	// returns the time series data, this field could be empty if data point is
	// not available for the given timestamp.
	Data *ValueData `json:"data,omitempty"`

	// If this is a rolled up data point, following enum denotes the rollup
	// function used for rolling up. For a raw point this enum is not set.
	RollupFunction *int32 `json:"rollupFunction,omitempty"`

	// Specifies a timestamp when the metric data point was captured.
	TimestampMsecs *int64 `json:"timestampMsecs,omitempty"`
}

// Validate validates this metric data point
func (m *MetricDataPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricDataPoint) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this metric data point based on the context it is used
func (m *MetricDataPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricDataPoint) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {

		if swag.IsZero(m.Data) { // not required
			return nil
		}

		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricDataPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricDataPoint) UnmarshalBinary(b []byte) error {
	var res MetricDataPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
