// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConsumerStats ConsumerStats is the stats of a single consumer. A consumer is a entity
// which consumes the storage space of a storage domain. A consumer can be a
// View, Protection Job or a Replication Job.
//
// swagger:model ConsumerStats
type ConsumerStats struct {

	// Specifies the type of the consumer.
	// Type of the consumer can be one of the following three,
	//
	// 'kViews', indicates the stats info of Views used per organization (tenant)
	// per view box (storage domain).
	// 'kProtectionRuns', indicates the stats info of Protection Runs used per
	// organization (tenant) per view box (storage domain).
	// 'kReplicationRuns', indicates the stats info of Replication In used per
	// organization (tenant) per view box (storage domain).
	// 'kViewProtectionRuns', indicates the stats info of View Protection Runs used
	// per organization (tenant) per view box (storage domain).
	// Enum: ["kViews","kProtectionRuns","kReplicationRuns","kViewProtectionRuns"]
	ConsumerType *string `json:"consumerType,omitempty"`

	// Specifies a list of groups associated to this consumer.
	GroupList []*StatsGroup `json:"groupList"`

	// Specifies the id of the consumer.
	ID *int64 `json:"id,omitempty"`

	// Specifies the name of the consumer.
	Name *string `json:"name,omitempty"`

	// Specifies the source environment of the protection job.
	// Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	// NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	// 'kVMware' indicates the VMware Protection Source environment.
	// 'kHyperV' indicates the HyperV Protection Source environment.
	// 'kSQL' indicates the SQL Protection Source environment.
	// 'kView' indicates the View Protection Source environment.
	// 'kPuppeteer' indicates the Cohesity's Remote Adapter.
	// 'kPhysical' indicates the physical Protection Source environment.
	// 'kPure' indicates the Pure Storage Protection Source environment.
	// 'kNimble' indicates the Nimble Storage Protection Source environment.
	// 'kAzure' indicates the Microsoft's Azure Protection Source environment.
	// 'kNetapp' indicates the Netapp Protection Source environment.
	// 'kAgent' indicates the Agent Protection Source environment.
	// 'kGenericNas' indicates the Generic Network Attached Storage Protection
	// Source environment.
	// 'kAcropolis' indicates the Acropolis Protection Source environment.
	// 'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	// 'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	// 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	// 'kGPFS' indicates IBM's GPFS Protection Source environment.
	// 'kKVM' indicates the KVM Protection Source environment.
	// 'kAWS' indicates the AWS Protection Source environment.
	// 'kExchange' indicates the Exchange Protection Source environment.
	// 'kHyperVVSS' indicates the HyperV VSS Protection Source
	// environment.
	// 'kOracle' indicates the Oracle Protection Source environment.
	// 'kGCP' indicates the Google Cloud Platform Protection Source environment.
	// 'kFlashBlade' indicates the Flash Blade Protection Source environment.
	// 'kAWSNative' indicates the AWS Native Protection Source environment.
	// 'kO365' indicates the Office 365 Protection Source environment.
	// 'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	// 'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	// 'kGCPNative' indicates the GCP Native Protection Source environment.
	// 'kAzureNative' indicates the Azure Native Protection Source environment.
	// 'kKubernetes' indicates a Kubernetes Protection Source environment.
	// 'kElastifile' indicates Elastifile Protection Source environment.
	// 'kAD' indicates Active Directory Protection Source environment.
	// 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	// 'kCassandra' indicates Cassandra Protection Source environment.
	// 'kMongoDB' indicates MongoDB Protection Source environment.
	// 'kCouchbase' indicates Couchbase Protection Source environment.
	// 'kHdfs' indicates Hdfs Protection Source environment.
	// 'kHive' indicates Hive Protection Source environment.
	// 'kHBase' indicates HBase Protection Source environment.
	// 'kUDA' indicates Universal Data Adapter Protection Source environment.
	// 'kSAPHANA' indicates SAP HANA protection source environment.
	// 'kO365Teams' indicates the Office365 Teams Protection Source environment.
	// 'kO365Group' indicates the Office365 Groups Protection Source environment.
	// 'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	// 'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	// 'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	// 'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	// kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	// kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	// kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	// kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	// kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	// kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	// kO365PublicFolders
	// Enum: ["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]
	ProtectionEnvironment *string `json:"protectionEnvironment,omitempty"`

	// Specifies the name of the protection policy for 'kProtectionRuns' and
	// 'kReplicationRuns' consumer.
	ProtectionPolicyName *string `json:"protectionPolicyName,omitempty"`

	// Specifies the hard limit of logical quota of the consumer. This field
	// will be returned only if consumer type is view.
	QuotaHardLimitBytes *int64 `json:"quotaHardLimitBytes,omitempty"`

	// Specifies a list of schemaInfos of the consumer.
	SchemaInfoList []*UsageSchemaInfo `json:"schemaInfoList"`

	// Specifies details of statistics of the consumer.
	Stats *DataUsageStats `json:"stats,omitempty"`
}

// Validate validates this consumer stats
func (m *ConsumerStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsumerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemaInfoList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var consumerStatsTypeConsumerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kViews","kProtectionRuns","kReplicationRuns","kViewProtectionRuns"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consumerStatsTypeConsumerTypePropEnum = append(consumerStatsTypeConsumerTypePropEnum, v)
	}
}

const (

	// ConsumerStatsConsumerTypeKViews captures enum value "kViews"
	ConsumerStatsConsumerTypeKViews string = "kViews"

	// ConsumerStatsConsumerTypeKProtectionRuns captures enum value "kProtectionRuns"
	ConsumerStatsConsumerTypeKProtectionRuns string = "kProtectionRuns"

	// ConsumerStatsConsumerTypeKReplicationRuns captures enum value "kReplicationRuns"
	ConsumerStatsConsumerTypeKReplicationRuns string = "kReplicationRuns"

	// ConsumerStatsConsumerTypeKViewProtectionRuns captures enum value "kViewProtectionRuns"
	ConsumerStatsConsumerTypeKViewProtectionRuns string = "kViewProtectionRuns"
)

// prop value enum
func (m *ConsumerStats) validateConsumerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, consumerStatsTypeConsumerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConsumerStats) validateConsumerType(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsumerType) { // not required
		return nil
	}

	// value enum
	if err := m.validateConsumerTypeEnum("consumerType", "body", *m.ConsumerType); err != nil {
		return err
	}

	return nil
}

func (m *ConsumerStats) validateGroupList(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupList) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupList); i++ {
		if swag.IsZero(m.GroupList[i]) { // not required
			continue
		}

		if m.GroupList[i] != nil {
			if err := m.GroupList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var consumerStatsTypeProtectionEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consumerStatsTypeProtectionEnvironmentPropEnum = append(consumerStatsTypeProtectionEnvironmentPropEnum, v)
	}
}

const (

	// ConsumerStatsProtectionEnvironmentKVMware captures enum value "kVMware"
	ConsumerStatsProtectionEnvironmentKVMware string = "kVMware"

	// ConsumerStatsProtectionEnvironmentKHyperV captures enum value "kHyperV"
	ConsumerStatsProtectionEnvironmentKHyperV string = "kHyperV"

	// ConsumerStatsProtectionEnvironmentKSQL captures enum value "kSQL"
	ConsumerStatsProtectionEnvironmentKSQL string = "kSQL"

	// ConsumerStatsProtectionEnvironmentKView captures enum value "kView"
	ConsumerStatsProtectionEnvironmentKView string = "kView"

	// ConsumerStatsProtectionEnvironmentKPuppeteer captures enum value "kPuppeteer"
	ConsumerStatsProtectionEnvironmentKPuppeteer string = "kPuppeteer"

	// ConsumerStatsProtectionEnvironmentKPhysical captures enum value "kPhysical"
	ConsumerStatsProtectionEnvironmentKPhysical string = "kPhysical"

	// ConsumerStatsProtectionEnvironmentKPure captures enum value "kPure"
	ConsumerStatsProtectionEnvironmentKPure string = "kPure"

	// ConsumerStatsProtectionEnvironmentKNimble captures enum value "kNimble"
	ConsumerStatsProtectionEnvironmentKNimble string = "kNimble"
)

// prop value enum
func (m *ConsumerStats) validateProtectionEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, consumerStatsTypeProtectionEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConsumerStats) validateProtectionEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionEnvironment) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtectionEnvironmentEnum("protectionEnvironment", "body", *m.ProtectionEnvironment); err != nil {
		return err
	}

	return nil
}

func (m *ConsumerStats) validateSchemaInfoList(formats strfmt.Registry) error {
	if swag.IsZero(m.SchemaInfoList) { // not required
		return nil
	}

	for i := 0; i < len(m.SchemaInfoList); i++ {
		if swag.IsZero(m.SchemaInfoList[i]) { // not required
			continue
		}

		if m.SchemaInfoList[i] != nil {
			if err := m.SchemaInfoList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schemaInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schemaInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConsumerStats) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this consumer stats based on the context it is used
func (m *ConsumerStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroupList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemaInfoList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsumerStats) contextValidateGroupList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GroupList); i++ {

		if m.GroupList[i] != nil {

			if swag.IsZero(m.GroupList[i]) { // not required
				return nil
			}

			if err := m.GroupList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConsumerStats) contextValidateSchemaInfoList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SchemaInfoList); i++ {

		if m.SchemaInfoList[i] != nil {

			if swag.IsZero(m.SchemaInfoList[i]) { // not required
				return nil
			}

			if err := m.SchemaInfoList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schemaInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schemaInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConsumerStats) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsumerStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsumerStats) UnmarshalBinary(b []byte) error {
	var res ConsumerStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
