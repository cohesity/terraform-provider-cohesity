// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisteredEntityPhysicalParams Contains all params specified by the user while registering a physical
// entity.
//
// swagger:model RegisteredEntityPhysicalParams
type RegisteredEntityPhysicalParams struct {

	// Application specific credentials vector. This may be needed in cases
	// where after authorizing with the environment, separate authorization
	// is needed to access an application in the environment (for example,
	// kOracle where after authorizing with the database host, to access a
	// database separate credentials are required).
	AppCredentialsVec []*PrivateAppCredentials `json:"appCredentialsVec"`

	// A list of applications to be registered following a successful physical
	// entity registration.
	AppEnvVec []int32 `json:"appEnvVec"`

	// Credentials that will be used to log into the application environment.
	Credentials *PrivateCredentials `json:"credentials,omitempty"`

	// Source side throttling configuration.
	SourceThrottlingConfig *PrivateSourceThrottlingConfiguration `json:"sourceThrottlingConfig,omitempty"`
}

// Validate validates this registered entity physical params
func (m *RegisteredEntityPhysicalParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppCredentialsVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceThrottlingConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityPhysicalParams) validateAppCredentialsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AppCredentialsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AppCredentialsVec); i++ {
		if swag.IsZero(m.AppCredentialsVec[i]) { // not required
			continue
		}

		if m.AppCredentialsVec[i] != nil {
			if err := m.AppCredentialsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appCredentialsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appCredentialsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityPhysicalParams) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityPhysicalParams) validateSourceThrottlingConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceThrottlingConfig) { // not required
		return nil
	}

	if m.SourceThrottlingConfig != nil {
		if err := m.SourceThrottlingConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceThrottlingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceThrottlingConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this registered entity physical params based on the context it is used
func (m *RegisteredEntityPhysicalParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppCredentialsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceThrottlingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityPhysicalParams) contextValidateAppCredentialsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppCredentialsVec); i++ {

		if m.AppCredentialsVec[i] != nil {

			if swag.IsZero(m.AppCredentialsVec[i]) { // not required
				return nil
			}

			if err := m.AppCredentialsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appCredentialsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appCredentialsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityPhysicalParams) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityPhysicalParams) contextValidateSourceThrottlingConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceThrottlingConfig != nil {

		if swag.IsZero(m.SourceThrottlingConfig) { // not required
			return nil
		}

		if err := m.SourceThrottlingConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceThrottlingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceThrottlingConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredEntityPhysicalParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredEntityPhysicalParams) UnmarshalBinary(b []byte) error {
	var res RegisteredEntityPhysicalParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
