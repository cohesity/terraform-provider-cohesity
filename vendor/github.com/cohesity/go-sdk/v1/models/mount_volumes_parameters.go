// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MountVolumesParameters Mounting Volumes.
//
// Specifies the information required for mounting volumes.
// Only required for Restore Tasks of type 'kMountVolumes'.
// At a minimum, the targetSourceId must be specified for 'kMountVolumes'
// Restore Tasks. If only targetSourceId is specified, all disks are
// attached but may not be mounted.
// The mount target must be registered on the Cohesity Cluster.
// If the mount target is a VM, VMware Tools must be installed.
// If the mount target is a physical server, a Cohesity Agent must be
// be installed. See the Cohesity Dashboard help documentation for details.
// In the username and password fields, specify the credentials to
// access the mount target.
//
// swagger:model MountVolumesParameters
type MountVolumesParameters struct {

	// Optional setting that determines if the volumes are brought
	// online on the mount target after attaching the disks.
	// This field is only set for VMs. The Cohesity Cluster always
	// attempts to mount Physical servers.
	// If true and the mount target is a VM, to mount the volumes
	// VMware Tools must be installed on the guest operating system of the VM
	// and login credentials to the mount target must be specified.
	// NOTE: If automount is configured for a Windows system, the
	// volumes may be automatically brought online.
	BringDisksOnline *bool `json:"bringDisksOnline,omitempty"`

	// Specifies the cloud credentials used to authenticate with cloud(Aws).
	CloudCredentials *CloudCredentials `json:"cloudCredentials,omitempty"`

	// Specifies password of the username to access the target source.
	Password *string `json:"password,omitempty"`

	// Specifies the target Protection Source id where the volumes will be
	// mounted.
	// NOTE: The source that was backed up and the mount target must be the
	// same type, for example if the source is a VMware VM, then the mount
	// target must also be a VMware VM.
	// The mount target must be registered on the Cohesity Cluster.
	TargetSourceID *int64 `json:"targetSourceId,omitempty"`

	// Optional setting that determines if this will use an existing agent
	// on the target vm to bring disks online.
	UseExistingAgent *bool `json:"useExistingAgent,omitempty"`

	// Specifies username to access the target source.
	Username *string `json:"username,omitempty"`

	// Array of Volume Names.
	//
	// Optionally specify the names of volumes to mount.
	// If none are specified, all volumes of the Server are mounted on the
	// target. To get the names of the volumes, call the
	// GET /public/restore/vms/volumesInformation operation.
	VolumeNames []string `json:"volumeNames"`
}

// Validate validates this mount volumes parameters
func (m *MountVolumesParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountVolumesParameters) validateCloudCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudCredentials) { // not required
		return nil
	}

	if m.CloudCredentials != nil {
		if err := m.CloudCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mount volumes parameters based on the context it is used
func (m *MountVolumesParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountVolumesParameters) contextValidateCloudCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudCredentials != nil {

		if swag.IsZero(m.CloudCredentials) { // not required
			return nil
		}

		if err := m.CloudCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountVolumesParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountVolumesParameters) UnmarshalBinary(b []byte) error {
	var res MountVolumesParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
