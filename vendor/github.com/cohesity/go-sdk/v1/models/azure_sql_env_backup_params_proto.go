// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AzureSQLEnvBackupParamsProto Azure SQL environent specific Backup Parameters.
//
// Message to capture additional backup params specific to Azure SQL.
//
// swagger:model AzureSqlEnvBackupParamsProto
type AzureSQLEnvBackupParamsProto struct {

	// If the flag is set to true, a copy of the database is created during
	// backup, and the backup is performed from the copied database. This backup
	// will be transactionally consistent.
	// If the flag is set to false, the backup is performed from the production
	// database while transactions are in progress. In this case, the backup will
	// be transactionally inconsistent, and recovery can fail or the recovered
	// database may be in an inconsistent state.
	CopyDatabase *bool `json:"copyDatabase,omitempty"`

	// SKU for the copy db.
	CopyDbSku *EntitySKU `json:"copyDbSku,omitempty"`

	// The type of temporary disk to be provisioned for database backup.
	DiskType *int32 `json:"diskType,omitempty"`

	// SQL package options to be used by backup.
	SQLPackageOptions *SQLPackage `json:"sqlPackageOptions,omitempty"`

	// Size of the disk we will attach to rigel to use for exporting this DB.
	TempDiskSizeGb *int32 `json:"tempDiskSizeGb,omitempty"`
}

// Validate validates this azure Sql env backup params proto
func (m *AzureSQLEnvBackupParamsProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCopyDbSku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLPackageOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureSQLEnvBackupParamsProto) validateCopyDbSku(formats strfmt.Registry) error {
	if swag.IsZero(m.CopyDbSku) { // not required
		return nil
	}

	if m.CopyDbSku != nil {
		if err := m.CopyDbSku.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyDbSku")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copyDbSku")
			}
			return err
		}
	}

	return nil
}

func (m *AzureSQLEnvBackupParamsProto) validateSQLPackageOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLPackageOptions) { // not required
		return nil
	}

	if m.SQLPackageOptions != nil {
		if err := m.SQLPackageOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlPackageOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlPackageOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure Sql env backup params proto based on the context it is used
func (m *AzureSQLEnvBackupParamsProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCopyDbSku(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLPackageOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureSQLEnvBackupParamsProto) contextValidateCopyDbSku(ctx context.Context, formats strfmt.Registry) error {

	if m.CopyDbSku != nil {

		if swag.IsZero(m.CopyDbSku) { // not required
			return nil
		}

		if err := m.CopyDbSku.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyDbSku")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copyDbSku")
			}
			return err
		}
	}

	return nil
}

func (m *AzureSQLEnvBackupParamsProto) contextValidateSQLPackageOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLPackageOptions != nil {

		if swag.IsZero(m.SQLPackageOptions) { // not required
			return nil
		}

		if err := m.SQLPackageOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlPackageOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlPackageOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureSQLEnvBackupParamsProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureSQLEnvBackupParamsProto) UnmarshalBinary(b []byte) error {
	var res AzureSQLEnvBackupParamsProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
