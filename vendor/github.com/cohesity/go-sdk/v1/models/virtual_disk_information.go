// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualDiskInformation Specifies information about the virtual disk.
//
// swagger:model VirtualDiskInformation
type VirtualDiskInformation struct {

	// Specifies the Id of the controller bus that controls the disk.
	BusNumber *int64 `json:"busNumber,omitempty"`

	// Specifies the controller type like SCSI, or IDE etc.
	ControllerType *string `json:"controllerType,omitempty"`

	// Specifies original disk id. This is sufficient to identify the disk
	// information, but in some scenarios, users may specify the controller
	// option instead.
	DiskID *string `json:"diskId,omitempty"`

	// Specifies location of the disk, e.g. this will contain the location of
	// datastore in VMware environment.
	DiskLocation *ProtectionSource `json:"diskLocation,omitempty"`

	// Specifies size of the virtual disk in bytes.
	DiskSizeInBytes *int64 `json:"diskSizeInBytes,omitempty"`

	// Specifies the original file path if applicable.
	FilePath *string `json:"filePath,omitempty"`

	// Specifies the list of mount points.
	MountPoints []string `json:"mountPoints"`

	// Specifies the disk file name. This is the VMDK name and not the
	// flat file name.
	UnitNumber *int64 `json:"unitNumber,omitempty"`
}

// Validate validates this virtual disk information
func (m *VirtualDiskInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualDiskInformation) validateDiskLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskLocation) { // not required
		return nil
	}

	if m.DiskLocation != nil {
		if err := m.DiskLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskLocation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual disk information based on the context it is used
func (m *VirtualDiskInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualDiskInformation) contextValidateDiskLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskLocation != nil {

		if swag.IsZero(m.DiskLocation) { // not required
			return nil
		}

		if err := m.DiskLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskLocation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualDiskInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualDiskInformation) UnmarshalBinary(b []byte) error {
	var res VirtualDiskInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
