// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntitySchemaProto Entity Schema.
//
// Specifies the meta-data associated with entity such as the list of
// attributes and time series data.
//
// swagger:model EntitySchemaProto
type EntitySchemaProto struct {

	// attributes descriptor
	AttributesDescriptor *EntitySchemaProtoAttributesDescriptor `json:"attributesDescriptor,omitempty"`

	// Timeseries for an entity schema is rolled up based on this setting.
	// Rollup is disabled by default.
	// Rollups cannot be done for metrics with value_type other than kInt64
	// or kDouble.
	EnableRollup *bool `json:"enableRollup,omitempty"`

	// Time to live for all entities for this schema. Entities will be deleted
	// if no stats has been published for this TTL time.
	EntitiesTimeToLiveSecs *int64 `json:"entitiesTimeToLiveSecs,omitempty"`

	// Defines the interval used to flush in memory stats to scribe table.
	// During this time if the stats server is down before flushing, it could
	// loose some of the stats. Modules can flush any critical stats
	// via AddEntitiesStats API. But this  should be used very judiciously as
	// it causes lot of overhead for stats.
	FlushIntervalSecs *int32 `json:"flushIntervalSecs,omitempty"`

	// Specifies if this schema should be displayed in Advanced Diagnostics
	// of the Cohesity Dashboard. If false, the schema is displayed.
	IsInternalSchema *bool `json:"isInternalSchema,omitempty"`

	// Use can change the flush interval secs via gflag and this store the
	// largest interval seconds set. This is used to round up the timestamp
	// to this flush interval secs during range scan.
	LargestFlushIntervalSecs *int32 `json:"largestFlushIntervalSecs,omitempty"`

	// Specifies a name that uniquely identifies an entity schema such as
	// 'kBridgeClusterStats'. Name cannot have ':' as character.
	Name *string `json:"name,omitempty"`

	// rollup granularity vec
	RollupGranularityVec []*EntitySchemaProtoGranularity `json:"rollupGranularityVec"`

	// Specifies the name of the Schema as displayed in Advanced Diagnostics
	// of the Cohesity Dashboard. For example for the 'kBridgeClusterStats'
	// Schema, the descriptive name is 'Cluster Physical Stats'.
	SchemaDescriptiveName *string `json:"schemaDescriptiveName,omitempty"`

	// Specifies an optional informational description about the schema.
	SchemaHelpText *string `json:"schemaHelpText,omitempty"`

	// Array of Time Series.
	//
	// List of time series of data (set of data points) for metrics.
	TimeSeriesDescriptorVec []*EntitySchemaProtoTimeSeriesDescriptor `json:"timeSeriesDescriptorVec"`

	// Specifies how long the timeseries data of this schema will be stored.
	// After expiry the entire data point(all metrics) is garbage collected.
	TimeToLiveSecs *int64 `json:"timeToLiveSecs,omitempty"`

	// Specifies the version of the entity schema.
	Version *int64 `json:"version,omitempty"`
}

// Validate validates this entity schema proto
func (m *EntitySchemaProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributesDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRollupGranularityVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSeriesDescriptorVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntitySchemaProto) validateAttributesDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(m.AttributesDescriptor) { // not required
		return nil
	}

	if m.AttributesDescriptor != nil {
		if err := m.AttributesDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributesDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributesDescriptor")
			}
			return err
		}
	}

	return nil
}

func (m *EntitySchemaProto) validateRollupGranularityVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RollupGranularityVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RollupGranularityVec); i++ {
		if swag.IsZero(m.RollupGranularityVec[i]) { // not required
			continue
		}

		if m.RollupGranularityVec[i] != nil {
			if err := m.RollupGranularityVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rollupGranularityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rollupGranularityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntitySchemaProto) validateTimeSeriesDescriptorVec(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeSeriesDescriptorVec) { // not required
		return nil
	}

	for i := 0; i < len(m.TimeSeriesDescriptorVec); i++ {
		if swag.IsZero(m.TimeSeriesDescriptorVec[i]) { // not required
			continue
		}

		if m.TimeSeriesDescriptorVec[i] != nil {
			if err := m.TimeSeriesDescriptorVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeSeriesDescriptorVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeSeriesDescriptorVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this entity schema proto based on the context it is used
func (m *EntitySchemaProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributesDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRollupGranularityVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeSeriesDescriptorVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntitySchemaProto) contextValidateAttributesDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if m.AttributesDescriptor != nil {

		if swag.IsZero(m.AttributesDescriptor) { // not required
			return nil
		}

		if err := m.AttributesDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributesDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributesDescriptor")
			}
			return err
		}
	}

	return nil
}

func (m *EntitySchemaProto) contextValidateRollupGranularityVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RollupGranularityVec); i++ {

		if m.RollupGranularityVec[i] != nil {

			if swag.IsZero(m.RollupGranularityVec[i]) { // not required
				return nil
			}

			if err := m.RollupGranularityVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rollupGranularityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rollupGranularityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntitySchemaProto) contextValidateTimeSeriesDescriptorVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TimeSeriesDescriptorVec); i++ {

		if m.TimeSeriesDescriptorVec[i] != nil {

			if swag.IsZero(m.TimeSeriesDescriptorVec[i]) { // not required
				return nil
			}

			if err := m.TimeSeriesDescriptorVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeSeriesDescriptorVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeSeriesDescriptorVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntitySchemaProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntitySchemaProto) UnmarshalBinary(b []byte) error {
	var res EntitySchemaProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
