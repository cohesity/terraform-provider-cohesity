// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivatePhysicalEntity private physical entity
//
// swagger:model PrivatePhysicalEntity
type PrivatePhysicalEntity struct {

	// Deprecated from 4.2 forth. Use 'agent_status_vec' above. This field is
	// here to allow replication to/from older releases.
	AgentEntityIDDEPRECATED *int64 `json:"agentEntityId_DEPRECATED,omitempty"`

	// Information about the Agents (see agent.proto for details). The kHost case
	// a single one while the kWindowsCluster has several.
	AgentStatusVec []*HostAgentStatus `json:"agentStatusVec"`

	// Cbmr(if installed) version for linux agent
	CbmrVersion *string `json:"cbmrVersion,omitempty"`

	// The type of cluster resource this entity represents.
	ClusterSourceType *int32 `json:"clusterSourceType,omitempty"`

	// Host environment type:
	// populated for kGroup and kHost entities.
	HostType *int32 `json:"hostType,omitempty"`

	// The hostname for physical server.
	Hostname *string `json:"hostname,omitempty"`

	// This indicates that the phsyical host is used as proxy machine.
	// proxy hosts are usually not protected. They are used by other environment
	// for the data protection and recovery corresponding to that environment.
	// Ex. Windows proxy host is used by o365 environment.
	IsProxyMachine *bool `json:"isProxyMachine,omitempty"`

	// A human-readable name of the object. Contains the hostname/ipaddr of the
	// physical host or the Windows Cluster VIP.
	Name *string `json:"name,omitempty"`

	// Cached networking info. This establishes physical-->agent linkage for
	// the Cluster case.
	NetworkingInfo *ClusterNetworkingInfo `json:"networkingInfo,omitempty"`

	// Contains the full descriptive name of the OS on which the Agent runs.
	OsName *string `json:"osName,omitempty"`

	// The number of sources that are using this physical host as proxy.
	ProxyRefCount *uint64 `json:"proxyRefCount,omitempty"`

	// System resource information about the host.
	SystemResourceInfo *SystemResourceInfo `json:"systemResourceInfo,omitempty"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// The universal identifier of the object. The field's semantics vary with
	// the object type.
	//
	// kGroup:
	// a hard-coded immutable value from a reserved ID range.
	//
	// kHost:
	// refers to the Agent's UID and the value is shared with
	// agent::Entity objects.
	//
	// kWindowsCluster:
	// a distinct value generated by Magneto
	// it is not known to the Windows Agent hosts as they are registered as
	// kAgent type.
	UID *PhysicalUID `json:"uid,omitempty"`

	// All the paths on this entity's file system that we do not support for
	// files backup.
	UnsupportedPathVec []string `json:"unsupportedPathVec"`

	// Veritas Cluster version for VCS host
	VcsVersion *string `json:"vcsVersion,omitempty"`

	// States whether the physical host supports the .vhdx format for recovery.
	// This is used to prevent large volume recovery on the old Win2008r2 Server
	// as it just does not work.
	VhdxRecoverySupported *bool `json:"vhdxRecoverySupported,omitempty"`

	// Contains the VLAN parameters specified by the user during registration.
	VlanParams *VlanParams `json:"vlanParams,omitempty"`

	// Volumes that are available on the physical host.
	VolumeInfoVec []*EntityVolumeInfo `json:"volumeInfoVec"`

	// Information list for all VSS Writers. Applicable only to Windows source.
	VssWriterInfoVec []*EntityVssWriterInfo `json:"vssWriterInfoVec"`
}

// Validate validates this private physical entity
func (m *PrivatePhysicalEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentStatusVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkingInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemResourceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVssWriterInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivatePhysicalEntity) validateAgentStatusVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentStatusVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentStatusVec); i++ {
		if swag.IsZero(m.AgentStatusVec[i]) { // not required
			continue
		}

		if m.AgentStatusVec[i] != nil {
			if err := m.AgentStatusVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentStatusVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentStatusVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivatePhysicalEntity) validateNetworkingInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkingInfo) { // not required
		return nil
	}

	if m.NetworkingInfo != nil {
		if err := m.NetworkingInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkingInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkingInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivatePhysicalEntity) validateSystemResourceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemResourceInfo) { // not required
		return nil
	}

	if m.SystemResourceInfo != nil {
		if err := m.SystemResourceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemResourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("systemResourceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivatePhysicalEntity) validateUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if m.UID != nil {
		if err := m.UID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uid")
			}
			return err
		}
	}

	return nil
}

func (m *PrivatePhysicalEntity) validateVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParams) { // not required
		return nil
	}

	if m.VlanParams != nil {
		if err := m.VlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivatePhysicalEntity) validateVolumeInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeInfoVec); i++ {
		if swag.IsZero(m.VolumeInfoVec[i]) { // not required
			continue
		}

		if m.VolumeInfoVec[i] != nil {
			if err := m.VolumeInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivatePhysicalEntity) validateVssWriterInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.VssWriterInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.VssWriterInfoVec); i++ {
		if swag.IsZero(m.VssWriterInfoVec[i]) { // not required
			continue
		}

		if m.VssWriterInfoVec[i] != nil {
			if err := m.VssWriterInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vssWriterInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vssWriterInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this private physical entity based on the context it is used
func (m *PrivatePhysicalEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentStatusVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkingInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemResourceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVssWriterInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivatePhysicalEntity) contextValidateAgentStatusVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AgentStatusVec); i++ {

		if m.AgentStatusVec[i] != nil {

			if swag.IsZero(m.AgentStatusVec[i]) { // not required
				return nil
			}

			if err := m.AgentStatusVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentStatusVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentStatusVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivatePhysicalEntity) contextValidateNetworkingInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkingInfo != nil {

		if swag.IsZero(m.NetworkingInfo) { // not required
			return nil
		}

		if err := m.NetworkingInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkingInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkingInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivatePhysicalEntity) contextValidateSystemResourceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SystemResourceInfo != nil {

		if swag.IsZero(m.SystemResourceInfo) { // not required
			return nil
		}

		if err := m.SystemResourceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemResourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("systemResourceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivatePhysicalEntity) contextValidateUID(ctx context.Context, formats strfmt.Registry) error {

	if m.UID != nil {

		if swag.IsZero(m.UID) { // not required
			return nil
		}

		if err := m.UID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uid")
			}
			return err
		}
	}

	return nil
}

func (m *PrivatePhysicalEntity) contextValidateVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParams != nil {

		if swag.IsZero(m.VlanParams) { // not required
			return nil
		}

		if err := m.VlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivatePhysicalEntity) contextValidateVolumeInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeInfoVec); i++ {

		if m.VolumeInfoVec[i] != nil {

			if swag.IsZero(m.VolumeInfoVec[i]) { // not required
				return nil
			}

			if err := m.VolumeInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivatePhysicalEntity) contextValidateVssWriterInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VssWriterInfoVec); i++ {

		if m.VssWriterInfoVec[i] != nil {

			if swag.IsZero(m.VssWriterInfoVec[i]) { // not required
				return nil
			}

			if err := m.VssWriterInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vssWriterInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vssWriterInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivatePhysicalEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivatePhysicalEntity) UnmarshalBinary(b []byte) error {
	var res PrivatePhysicalEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
