// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrivateIoPreferentialTier IoPreferentialTier is the struct representing the preferred storage tier
// for IO operations.
//
// swagger:model PrivateIoPreferentialTier
type PrivateIoPreferentialTier struct {

	// ApolloIOPreferentialTier specifies the storage tier for a disk that
	// Apollo will use as its working directory.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	ApolloIOPreferentialTier []string `json:"apolloIOPreferentialTier"`

	// ApolloWalActionsIOPreferentialTier specifies the storage tier for a
	// disk that Apollo will use for its actions WAL. It is an index into the
	// storage_tier_vec.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	ApolloWalIOPreferentialTier []string `json:"apolloWalIOPreferentialTier"`

	// AthenaIOPreferentialTier is an array specifying the list of preferred
	// storage tiers used by Athena. The values are indices into the
	// RandomIOPreferentialTier.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	AthenaIOPreferentialTier []string `json:"athenaIOPreferentialTier"`

	// AthenaSlowerIOPreferentialTier is an array specifying the list of preferred
	// storage tiers used by Athena for slower storage. The values are indices
	// into the RandomIOPreferentialTier.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	AthenaSlowerIOPreferentialTier []string `json:"athenaSlowerIOPreferentialTier"`

	// CloudChunkRepoIOPreferentialTier is an array specifying the list of
	// preferred storage tiers used by CCR. The values are indices into the
	// RandomIOPreferentialTier.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	CloudChunkRepoIOPreferentialTier []string `json:"cloudChunkRepoIOPreferentialTier"`

	// DownTierUsagePercentageThresholds is an array to specify the usage
	// percentage thresholds for the corresponding storage tier, e.g. first
	// element in this array will represent the downtiering disk usage percentage
	// for first storage tier in the random io storage tiers list and so on.
	// The length of this array will always be in sync with the length of the
	// random io storage ties list. Each value in this array indicates how full
	// should a disk at least be in this storage tier before we down
	// water-fall its data to another tier. If the disk usage is less than this
	// amount, we'll not use down water-falling on that disk.
	DownTierUsagePercentThresholdList []int32 `json:"downTierUsagePercentThresholdList"`

	// GrootIOPreferentialTier specifies the storage tier for a disk that
	// Groot will use as its working directory.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	GrootIOPreferentialTier []string `json:"grootIOPreferentialTier"`

	// HydraDowntierIOPreferentialTier is an array specifying the list of preferred
	// storage tiers used by Hydra for offloading. The values are indices
	// into the RandomIOPreferentialTier.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	HydraDowntierIOPreferentialTier []string `json:"hydraDowntierIOPreferentialTier"`

	// HydraIOPreferentialTier is an array specifying the list of preferred
	// storage tiers used by Hydra. The values are indices into the
	// RandomIOPreferentialTier.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	HydraIOPreferentialTier []string `json:"hydraIOPreferentialTier"`

	// LibrarianIOPreferentialTier is an array specifying the list of preferred
	// storage tiers used by Librarian. The values are indices into the
	// RandomIOPreferentialTier.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	LibrarianIOPreferentialTier []string `json:"librarianIOPreferentialTier"`

	// RandomIOPreferentialTier is an array specifying the order of preferred
	// storage tiers for random IO operations. Other components, e.g., Yoda,
	// Apollo, Scribe and Hydra maintain an index into this array to track
	// the storage tiers used by them.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	RandomIOPreferentialTier []string `json:"randomIOPreferentialTier"`

	// ScribeIOPreferentialTier is an array specifying the list of preferred
	// storage tiers used by Scribe. The values are indices into the
	// RandomIOPreferentialTier.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	ScribeIOPreferentialTier []string `json:"scribeIOPreferentialTier"`

	// SequentialIOPreferentialTier is the preferred storage tier for
	// sequential IO operations.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	SequentialIOPreferentialTier []string `json:"sequentialIOPreferentialTier"`

	// YodaIOPreferentialTier is an array specifying the list of preferred
	// storage tiers used by Yoda. The values are indices into the
	// RandomIOPreferentialTier.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	YodaIOPreferentialTier []string `json:"yodaIOPreferentialTier"`
}

// Validate validates this private io preferential tier
func (m *PrivateIoPreferentialTier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApolloIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApolloWalIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAthenaIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAthenaSlowerIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudChunkRepoIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrootIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHydraDowntierIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHydraIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibrarianIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRandomIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScribeIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequentialIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYodaIOPreferentialTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var privateIoPreferentialTierApolloIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierApolloIOPreferentialTierItemsEnum = append(privateIoPreferentialTierApolloIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateApolloIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierApolloIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateApolloIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.ApolloIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.ApolloIOPreferentialTier); i++ {

		// value enum
		if err := m.validateApolloIOPreferentialTierItemsEnum("apolloIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.ApolloIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierApolloWalIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierApolloWalIOPreferentialTierItemsEnum = append(privateIoPreferentialTierApolloWalIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateApolloWalIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierApolloWalIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateApolloWalIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.ApolloWalIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.ApolloWalIOPreferentialTier); i++ {

		// value enum
		if err := m.validateApolloWalIOPreferentialTierItemsEnum("apolloWalIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.ApolloWalIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierAthenaIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierAthenaIOPreferentialTierItemsEnum = append(privateIoPreferentialTierAthenaIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateAthenaIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierAthenaIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateAthenaIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.AthenaIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.AthenaIOPreferentialTier); i++ {

		// value enum
		if err := m.validateAthenaIOPreferentialTierItemsEnum("athenaIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.AthenaIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierAthenaSlowerIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierAthenaSlowerIOPreferentialTierItemsEnum = append(privateIoPreferentialTierAthenaSlowerIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateAthenaSlowerIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierAthenaSlowerIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateAthenaSlowerIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.AthenaSlowerIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.AthenaSlowerIOPreferentialTier); i++ {

		// value enum
		if err := m.validateAthenaSlowerIOPreferentialTierItemsEnum("athenaSlowerIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.AthenaSlowerIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierCloudChunkRepoIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierCloudChunkRepoIOPreferentialTierItemsEnum = append(privateIoPreferentialTierCloudChunkRepoIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateCloudChunkRepoIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierCloudChunkRepoIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateCloudChunkRepoIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudChunkRepoIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudChunkRepoIOPreferentialTier); i++ {

		// value enum
		if err := m.validateCloudChunkRepoIOPreferentialTierItemsEnum("cloudChunkRepoIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.CloudChunkRepoIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierGrootIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierGrootIOPreferentialTierItemsEnum = append(privateIoPreferentialTierGrootIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateGrootIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierGrootIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateGrootIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.GrootIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.GrootIOPreferentialTier); i++ {

		// value enum
		if err := m.validateGrootIOPreferentialTierItemsEnum("grootIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.GrootIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierHydraDowntierIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierHydraDowntierIOPreferentialTierItemsEnum = append(privateIoPreferentialTierHydraDowntierIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateHydraDowntierIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierHydraDowntierIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateHydraDowntierIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.HydraDowntierIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.HydraDowntierIOPreferentialTier); i++ {

		// value enum
		if err := m.validateHydraDowntierIOPreferentialTierItemsEnum("hydraDowntierIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.HydraDowntierIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierHydraIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierHydraIOPreferentialTierItemsEnum = append(privateIoPreferentialTierHydraIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateHydraIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierHydraIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateHydraIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.HydraIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.HydraIOPreferentialTier); i++ {

		// value enum
		if err := m.validateHydraIOPreferentialTierItemsEnum("hydraIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.HydraIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierLibrarianIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierLibrarianIOPreferentialTierItemsEnum = append(privateIoPreferentialTierLibrarianIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateLibrarianIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierLibrarianIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateLibrarianIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.LibrarianIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.LibrarianIOPreferentialTier); i++ {

		// value enum
		if err := m.validateLibrarianIOPreferentialTierItemsEnum("librarianIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.LibrarianIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierRandomIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierRandomIOPreferentialTierItemsEnum = append(privateIoPreferentialTierRandomIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateRandomIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierRandomIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateRandomIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.RandomIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.RandomIOPreferentialTier); i++ {

		// value enum
		if err := m.validateRandomIOPreferentialTierItemsEnum("randomIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.RandomIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierScribeIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierScribeIOPreferentialTierItemsEnum = append(privateIoPreferentialTierScribeIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateScribeIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierScribeIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateScribeIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.ScribeIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.ScribeIOPreferentialTier); i++ {

		// value enum
		if err := m.validateScribeIOPreferentialTierItemsEnum("scribeIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.ScribeIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierSequentialIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierSequentialIOPreferentialTierItemsEnum = append(privateIoPreferentialTierSequentialIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateSequentialIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierSequentialIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateSequentialIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.SequentialIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.SequentialIOPreferentialTier); i++ {

		// value enum
		if err := m.validateSequentialIOPreferentialTierItemsEnum("sequentialIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.SequentialIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

var privateIoPreferentialTierYodaIOPreferentialTierItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateIoPreferentialTierYodaIOPreferentialTierItemsEnum = append(privateIoPreferentialTierYodaIOPreferentialTierItemsEnum, v)
	}
}

func (m *PrivateIoPreferentialTier) validateYodaIOPreferentialTierItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateIoPreferentialTierYodaIOPreferentialTierItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateIoPreferentialTier) validateYodaIOPreferentialTier(formats strfmt.Registry) error {
	if swag.IsZero(m.YodaIOPreferentialTier) { // not required
		return nil
	}

	for i := 0; i < len(m.YodaIOPreferentialTier); i++ {

		// value enum
		if err := m.validateYodaIOPreferentialTierItemsEnum("yodaIOPreferentialTier"+"."+strconv.Itoa(i), "body", m.YodaIOPreferentialTier[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this private io preferential tier based on context it is used
func (m *PrivateIoPreferentialTier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrivateIoPreferentialTier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateIoPreferentialTier) UnmarshalBinary(b []byte) error {
	var res PrivateIoPreferentialTier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
