// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZoneConfig Specifies the access zone config of the Isilon Access Zone.
//
// swagger:model ZoneConfig
type ZoneConfig struct {

	// Specifies the Dynamic network pool configuration for the Access Zone.
	// Dynamic pool is used for stateless protocols, e.g. NFSv3.
	DynamicNetworkPoolConfig *NetworkPoolConfig `json:"dynamicNetworkPoolConfig,omitempty"`

	// Specifies the name of the Access Zone's groupnet.
	Groupnet *string `json:"groupnet,omitempty"`

	// Specifies the name of the Access Zone.
	Name *string `json:"name,omitempty"`

	// SMB credentials for the Access Zone.
	SmbCredentials *NasMountCredentialParams `json:"smbCredentials,omitempty"`

	// Specifies the Static network pool configuration for the Access Zone. Static
	// pool is used for stateful protocols: e.g. SMB, NFSv4, and for stateless
	// protocols e.g. NFSv3 if dynamic pool below is not set.
	StaticNetworkPoolConfig *NetworkPoolConfig `json:"staticNetworkPoolConfig,omitempty"`
}

// Validate validates this zone config
func (m *ZoneConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDynamicNetworkPoolConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticNetworkPoolConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneConfig) validateDynamicNetworkPoolConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.DynamicNetworkPoolConfig) { // not required
		return nil
	}

	if m.DynamicNetworkPoolConfig != nil {
		if err := m.DynamicNetworkPoolConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamicNetworkPoolConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dynamicNetworkPoolConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneConfig) validateSmbCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.SmbCredentials) { // not required
		return nil
	}

	if m.SmbCredentials != nil {
		if err := m.SmbCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smbCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smbCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneConfig) validateStaticNetworkPoolConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.StaticNetworkPoolConfig) { // not required
		return nil
	}

	if m.StaticNetworkPoolConfig != nil {
		if err := m.StaticNetworkPoolConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("staticNetworkPoolConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("staticNetworkPoolConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this zone config based on the context it is used
func (m *ZoneConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDynamicNetworkPoolConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStaticNetworkPoolConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneConfig) contextValidateDynamicNetworkPoolConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.DynamicNetworkPoolConfig != nil {

		if swag.IsZero(m.DynamicNetworkPoolConfig) { // not required
			return nil
		}

		if err := m.DynamicNetworkPoolConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamicNetworkPoolConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dynamicNetworkPoolConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneConfig) contextValidateSmbCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SmbCredentials != nil {

		if swag.IsZero(m.SmbCredentials) { // not required
			return nil
		}

		if err := m.SmbCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smbCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smbCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneConfig) contextValidateStaticNetworkPoolConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.StaticNetworkPoolConfig != nil {

		if swag.IsZero(m.StaticNetworkPoolConfig) { // not required
			return nil
		}

		if err := m.StaticNetworkPoolConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("staticNetworkPoolConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("staticNetworkPoolConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneConfig) UnmarshalBinary(b []byte) error {
	var res ZoneConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
