// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppEntityBackupStatusInfo App Entity Backup State Info
//
// Specifies the app level backup status and information.
//
// swagger:model AppEntityBackupStatusInfo
type AppEntityBackupStatusInfo struct {

	// Specifies the Id of the App entity. This is typically a database entity
	// in case of SQL, Oracle jobs etc.
	AppID *int64 `json:"appId,omitempty"`

	// Specifies if an error occurred (if any) while running this task.
	// This field is populated when the status is equal to 'kFailure'.
	Error *string `json:"error,omitempty"`

	// Specifies the name of the app entity.
	Name *string `json:"name,omitempty"`

	// Specifies the owner id of the the app. Owner is the host under which
	// the app is located. Example: SQL DB entities can be hosted by Physical
	// host or virtual machine.
	OwnerID *int64 `json:"ownerId,omitempty"`

	// Specifies the backup status for this app entity.
	// 'kAccepted' indicates the task is queued to run but not yet running.
	// 'kRunning' indicates the task is running.
	// 'kCanceling' indicates a request to cancel the task has occurred but
	//
	// the task is not yet canceled.
	//
	// 'kCanceled' indicates the task has been canceled.
	// 'kSuccess' indicates the task was successful.
	// 'kFailure' indicates the task failed.
	// 'kWarning' indicates the task has finished with warning.
	// 'kOnHold' indicates the task is kept onHold.
	// 'kMissed' indicates the task is missed.
	// 'Finalizing' indicates the task is finalizing.
	// Enum: ["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure","kWarning","kOnHold","kMissed","kFinalizing"]
	Status *string `json:"status,omitempty"`

	// Specifies the warnings that occurred (if any) while running this task.
	Warnings []string `json:"warnings"`
}

// Validate validates this app entity backup status info
func (m *AppEntityBackupStatusInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var appEntityBackupStatusInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAccepted","kRunning","kCanceling","kCanceled","kSuccess","kFailure","kWarning","kOnHold","kMissed","kFinalizing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appEntityBackupStatusInfoTypeStatusPropEnum = append(appEntityBackupStatusInfoTypeStatusPropEnum, v)
	}
}

const (

	// AppEntityBackupStatusInfoStatusKAccepted captures enum value "kAccepted"
	AppEntityBackupStatusInfoStatusKAccepted string = "kAccepted"

	// AppEntityBackupStatusInfoStatusKRunning captures enum value "kRunning"
	AppEntityBackupStatusInfoStatusKRunning string = "kRunning"

	// AppEntityBackupStatusInfoStatusKCanceling captures enum value "kCanceling"
	AppEntityBackupStatusInfoStatusKCanceling string = "kCanceling"

	// AppEntityBackupStatusInfoStatusKCanceled captures enum value "kCanceled"
	AppEntityBackupStatusInfoStatusKCanceled string = "kCanceled"

	// AppEntityBackupStatusInfoStatusKSuccess captures enum value "kSuccess"
	AppEntityBackupStatusInfoStatusKSuccess string = "kSuccess"

	// AppEntityBackupStatusInfoStatusKFailure captures enum value "kFailure"
	AppEntityBackupStatusInfoStatusKFailure string = "kFailure"

	// AppEntityBackupStatusInfoStatusKWarning captures enum value "kWarning"
	AppEntityBackupStatusInfoStatusKWarning string = "kWarning"

	// AppEntityBackupStatusInfoStatusKOnHold captures enum value "kOnHold"
	AppEntityBackupStatusInfoStatusKOnHold string = "kOnHold"

	// AppEntityBackupStatusInfoStatusKMissed captures enum value "kMissed"
	AppEntityBackupStatusInfoStatusKMissed string = "kMissed"

	// AppEntityBackupStatusInfoStatusKFinalizing captures enum value "kFinalizing"
	AppEntityBackupStatusInfoStatusKFinalizing string = "kFinalizing"
)

// prop value enum
func (m *AppEntityBackupStatusInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, appEntityBackupStatusInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AppEntityBackupStatusInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this app entity backup status info based on context it is used
func (m *AppEntityBackupStatusInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AppEntityBackupStatusInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppEntityBackupStatusInfo) UnmarshalBinary(b []byte) error {
	var res AppEntityBackupStatusInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
