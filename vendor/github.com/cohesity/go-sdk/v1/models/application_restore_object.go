// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationRestoreObject Application Server object to restore.
//
// Specifies the Application Server to restore and parameters specific to
// that application.
//
// swagger:model ApplicationRestoreObject
type ApplicationRestoreObject struct {

	// Specifies parameters specific to Active Directory Application Server.
	AdRestoreParameters *AdRestoreParameters `json:"adRestoreParameters,omitempty"`

	// Specifies the Application Server to restore (for example, kSQL).
	ApplicationServerID *int64 `json:"applicationServerId,omitempty"`

	// Specifies parameters speicific to Exchange Application Server.
	ExchangeRestoreParameters *ExchangeRestoreParameters `json:"exchangeRestoreParameters,omitempty"`

	// Specifies parameters specific to this Application Server.
	SQLRestoreParameters *SQLRestoreParameters `json:"sqlRestoreParameters,omitempty"`

	// Specifies the target host if the application is to be restored to a
	// different host. If this is empty, then the application is restored to
	// the original host, which is the hosting Protection Source.
	TargetHostID *int64 `json:"targetHostId,omitempty"`

	// Specifies the registered root node, like vCenter, of targetHost.
	// If this is empty, then it is assumed the root node of the target
	// host is the same as the host Protection Source of the application.
	TargetRootNodeID *int64 `json:"targetRootNodeId,omitempty"`
}

// Validate validates this application restore object
func (m *ApplicationRestoreObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdRestoreParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeRestoreParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLRestoreParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationRestoreObject) validateAdRestoreParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.AdRestoreParameters) { // not required
		return nil
	}

	if m.AdRestoreParameters != nil {
		if err := m.AdRestoreParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adRestoreParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adRestoreParameters")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationRestoreObject) validateExchangeRestoreParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeRestoreParameters) { // not required
		return nil
	}

	if m.ExchangeRestoreParameters != nil {
		if err := m.ExchangeRestoreParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeRestoreParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeRestoreParameters")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationRestoreObject) validateSQLRestoreParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLRestoreParameters) { // not required
		return nil
	}

	if m.SQLRestoreParameters != nil {
		if err := m.SQLRestoreParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlRestoreParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlRestoreParameters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this application restore object based on the context it is used
func (m *ApplicationRestoreObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdRestoreParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeRestoreParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLRestoreParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationRestoreObject) contextValidateAdRestoreParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.AdRestoreParameters != nil {

		if swag.IsZero(m.AdRestoreParameters) { // not required
			return nil
		}

		if err := m.AdRestoreParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adRestoreParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adRestoreParameters")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationRestoreObject) contextValidateExchangeRestoreParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeRestoreParameters != nil {

		if swag.IsZero(m.ExchangeRestoreParameters) { // not required
			return nil
		}

		if err := m.ExchangeRestoreParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeRestoreParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeRestoreParameters")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationRestoreObject) contextValidateSQLRestoreParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLRestoreParameters != nil {

		if swag.IsZero(m.SQLRestoreParameters) { // not required
			return nil
		}

		if err := m.SQLRestoreParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlRestoreParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlRestoreParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationRestoreObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationRestoreObject) UnmarshalBinary(b []byte) error {
	var res ApplicationRestoreObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
