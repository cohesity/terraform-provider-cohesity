// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FileSystemInfo Proto that contains specific information about a file system.
//
// swagger:model FileSystemInfo
type FileSystemInfo struct {

	// The creation time in msecs of the file system.
	CreationTimeMsecs *int64 `json:"creationTimeMsecs,omitempty"`

	// The total capacity in bytes of this file system.
	LogicalCapacityBytes *int64 `json:"logicalCapacityBytes,omitempty"`

	// The file system's logical space usage in bytes.
	LogicalUsageInBytes *int64 `json:"logicalUsageInBytes,omitempty"`

	// Information about a NFS export. Only valid if this file system is exposed
	// through NFS protocol.
	NfsInfo *NfsInfo `json:"nfsInfo,omitempty"`

	// Whether the .snapshot directory is enabled on the file system. Only if it
	// is enabled we can backup this file system.
	SnapshotDirEnabled *bool `json:"snapshotDirEnabled,omitempty"`

	// List of protocols enabled on this file system.
	SupportedProtocolVec []int32 `json:"supportedProtocolVec"`

	// The file system's total physical space usage (including snapshots) in
	// bytes.
	TotalPhysicalUsageInBytes *int64 `json:"totalPhysicalUsageInBytes,omitempty"`

	// The file system' physical space usage (excluding snapshots) in bytes.
	UniqueUsageInBytes *int64 `json:"uniqueUsageInBytes,omitempty"`
}

// Validate validates this file system info
func (m *FileSystemInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNfsInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileSystemInfo) validateNfsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsInfo) { // not required
		return nil
	}

	if m.NfsInfo != nil {
		if err := m.NfsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfsInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this file system info based on the context it is used
func (m *FileSystemInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNfsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileSystemInfo) contextValidateNfsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.NfsInfo != nil {

		if swag.IsZero(m.NfsInfo) { // not required
			return nil
		}

		if err := m.NfsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfsInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FileSystemInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileSystemInfo) UnmarshalBinary(b []byte) error {
	var res FileSystemInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
