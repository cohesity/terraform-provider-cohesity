// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BifrostSubnet BifrostSubnet.
//
// Specifies the settings of a Bifrost Subnet.
//
// swagger:model BifrostSubnet
type BifrostSubnet struct {

	// Specifies the Gateway of the VLAN. It can carry V4 or V6 in case of
	// requests, and carrises V4 in case of response.
	Gateway *string `json:"gateway,omitempty"`

	// Specifies either an IPv6 address or an IPv4 address.
	IPCidr *string `json:"ipCidr,omitempty"`

	// Array of IPs.
	//
	// Specifies a list of IPs in the VLAN.
	Ips []string `json:"ips"`

	// Specifies the netmask using bits.
	NetmaskBits *int32 `json:"netmaskBits,omitempty"`

	// Specifies the netmask using an IP4 address.
	// The netmask can only be set using netmaskIp4 if the IP address
	// is an IPv4 address.
	NetmaskIp4 *string `json:"netmaskIp4,omitempty"`
}

// Validate validates this bifrost subnet
func (m *BifrostSubnet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this bifrost subnet based on context it is used
func (m *BifrostSubnet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BifrostSubnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BifrostSubnet) UnmarshalBinary(b []byte) error {
	var res BifrostSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
