// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KmsConfigurationResponse Get KMS Configuration Response Parameters.
//
// Specifies response parameters to a KMS request.
//
// swagger:model KmsConfigurationResponse
type KmsConfigurationResponse struct {

	// AWS KMS conifg response.
	AwsKms *AwsKmsConfiguration `json:"awsKms,omitempty"`

	// Azure KMS conifg response.
	AzureKms *AzureKmsConfiguration `json:"azureKms,omitempty"`

	// Specifies if connection to this KMS exists.
	ConnectionStatus *bool `json:"connectionStatus,omitempty"`

	// Specifies the config response for cryptsoftKMS.
	CryptsoftKms *CryptsoftKmsConfigResponse `json:"cryptsoftKms,omitempty"`

	// The Id of a KMS server.
	ID *int64 `json:"id,omitempty"`

	// Specifies name of the key.
	KeyName *string `json:"keyName,omitempty"`

	// Specifies the consumption model for the KMS Key.
	OwnershipContext *string `json:"ownershipContext,omitempty"`

	// Specifies the state of the Kms Server.
	// 'kDontRemove' means the state of object is functional and
	// it is not being removed.
	// 'kMarkedForRemoval' means the object is being removed.
	// 'kOkToRemove' means the object has been removed on the Cohesity Cluster and
	// if the object is physical, it can be removed from the Cohesity Cluster.
	// Enum: ["kDontRemove","kMarkedForRemoval","kOkToRemove"]
	RemovalState *string `json:"removalState,omitempty"`

	// Specifies the name given to the KMS Server.
	ServerName *string `json:"serverName,omitempty"`

	// Specifies the type of key mangement system.
	// 'kInternalKms' indicates an internal KMS object.
	// 'kAwsKms' indicates an Aws KMS object.
	// 'kCryptsoftKms' indicates a Cryptsoft KMS object.
	// Enum: ["kInternalKms","kAwsKms","kCryptsoftKms"]
	ServerType *string `json:"serverType,omitempty"`

	// Specifies the usage type of the kms config. kArchival indicates
	// this is used for regular archival. kRpaasArchival indicates this
	// is used for RPaaS only.
	UsageType *int32 `json:"usageType,omitempty"`

	// Specifies the list of Vault Ids.
	VaultIDList []int64 `json:"vaultIdList"`

	// Specifies the list of View Box Ids.
	ViewBoxIDList []int64 `json:"viewBoxIdList"`
}

// Validate validates this kms configuration response
func (m *KmsConfigurationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsKms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureKms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCryptsoftKms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovalState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmsConfigurationResponse) validateAwsKms(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsKms) { // not required
		return nil
	}

	if m.AwsKms != nil {
		if err := m.AwsKms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsKms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsKms")
			}
			return err
		}
	}

	return nil
}

func (m *KmsConfigurationResponse) validateAzureKms(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureKms) { // not required
		return nil
	}

	if m.AzureKms != nil {
		if err := m.AzureKms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureKms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureKms")
			}
			return err
		}
	}

	return nil
}

func (m *KmsConfigurationResponse) validateCryptsoftKms(formats strfmt.Registry) error {
	if swag.IsZero(m.CryptsoftKms) { // not required
		return nil
	}

	if m.CryptsoftKms != nil {
		if err := m.CryptsoftKms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cryptsoftKms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cryptsoftKms")
			}
			return err
		}
	}

	return nil
}

var kmsConfigurationResponseTypeRemovalStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDontRemove","kMarkedForRemoval","kOkToRemove"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kmsConfigurationResponseTypeRemovalStatePropEnum = append(kmsConfigurationResponseTypeRemovalStatePropEnum, v)
	}
}

const (

	// KmsConfigurationResponseRemovalStateKDontRemove captures enum value "kDontRemove"
	KmsConfigurationResponseRemovalStateKDontRemove string = "kDontRemove"

	// KmsConfigurationResponseRemovalStateKMarkedForRemoval captures enum value "kMarkedForRemoval"
	KmsConfigurationResponseRemovalStateKMarkedForRemoval string = "kMarkedForRemoval"

	// KmsConfigurationResponseRemovalStateKOkToRemove captures enum value "kOkToRemove"
	KmsConfigurationResponseRemovalStateKOkToRemove string = "kOkToRemove"
)

// prop value enum
func (m *KmsConfigurationResponse) validateRemovalStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kmsConfigurationResponseTypeRemovalStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KmsConfigurationResponse) validateRemovalState(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovalState) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemovalStateEnum("removalState", "body", *m.RemovalState); err != nil {
		return err
	}

	return nil
}

var kmsConfigurationResponseTypeServerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kInternalKms","kAwsKms","kCryptsoftKms"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kmsConfigurationResponseTypeServerTypePropEnum = append(kmsConfigurationResponseTypeServerTypePropEnum, v)
	}
}

const (

	// KmsConfigurationResponseServerTypeKInternalKms captures enum value "kInternalKms"
	KmsConfigurationResponseServerTypeKInternalKms string = "kInternalKms"

	// KmsConfigurationResponseServerTypeKAwsKms captures enum value "kAwsKms"
	KmsConfigurationResponseServerTypeKAwsKms string = "kAwsKms"

	// KmsConfigurationResponseServerTypeKCryptsoftKms captures enum value "kCryptsoftKms"
	KmsConfigurationResponseServerTypeKCryptsoftKms string = "kCryptsoftKms"
)

// prop value enum
func (m *KmsConfigurationResponse) validateServerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kmsConfigurationResponseTypeServerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KmsConfigurationResponse) validateServerType(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerType) { // not required
		return nil
	}

	// value enum
	if err := m.validateServerTypeEnum("serverType", "body", *m.ServerType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this kms configuration response based on the context it is used
func (m *KmsConfigurationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsKms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureKms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCryptsoftKms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmsConfigurationResponse) contextValidateAwsKms(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsKms != nil {

		if swag.IsZero(m.AwsKms) { // not required
			return nil
		}

		if err := m.AwsKms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsKms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsKms")
			}
			return err
		}
	}

	return nil
}

func (m *KmsConfigurationResponse) contextValidateAzureKms(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureKms != nil {

		if swag.IsZero(m.AzureKms) { // not required
			return nil
		}

		if err := m.AzureKms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureKms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureKms")
			}
			return err
		}
	}

	return nil
}

func (m *KmsConfigurationResponse) contextValidateCryptsoftKms(ctx context.Context, formats strfmt.Registry) error {

	if m.CryptsoftKms != nil {

		if swag.IsZero(m.CryptsoftKms) { // not required
			return nil
		}

		if err := m.CryptsoftKms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cryptsoftKms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cryptsoftKms")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KmsConfigurationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KmsConfigurationResponse) UnmarshalBinary(b []byte) error {
	var res KmsConfigurationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
