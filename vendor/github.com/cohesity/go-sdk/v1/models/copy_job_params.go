// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CopyJobParams copy job params
//
// swagger:model CopyJobParams
type CopyJobParams struct {

	// Run start time of the base backup that can be used for incrementals.
	BaseBackupRunStartTimeUsecs *int64 `json:"baseBackupRunStartTimeUsecs,omitempty"`

	// Storage handle to use as the base for the backup for incrementals.
	BaseStorageHandle *BackupStorageHandle `json:"baseStorageHandle,omitempty"`

	// Storage handle to copy the backup to.
	StorageHandle *BackupStorageHandle `json:"storageHandle,omitempty"`
}

// Validate validates this copy job params
func (m *CopyJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseStorageHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageHandle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CopyJobParams) validateBaseStorageHandle(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseStorageHandle) { // not required
		return nil
	}

	if m.BaseStorageHandle != nil {
		if err := m.BaseStorageHandle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseStorageHandle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseStorageHandle")
			}
			return err
		}
	}

	return nil
}

func (m *CopyJobParams) validateStorageHandle(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageHandle) { // not required
		return nil
	}

	if m.StorageHandle != nil {
		if err := m.StorageHandle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageHandle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageHandle")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this copy job params based on the context it is used
func (m *CopyJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseStorageHandle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageHandle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CopyJobParams) contextValidateBaseStorageHandle(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseStorageHandle != nil {

		if swag.IsZero(m.BaseStorageHandle) { // not required
			return nil
		}

		if err := m.BaseStorageHandle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseStorageHandle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseStorageHandle")
			}
			return err
		}
	}

	return nil
}

func (m *CopyJobParams) contextValidateStorageHandle(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageHandle != nil {

		if swag.IsZero(m.StorageHandle) { // not required
			return nil
		}

		if err := m.StorageHandle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageHandle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageHandle")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CopyJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CopyJobParams) UnmarshalBinary(b []byte) error {
	var res CopyJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
