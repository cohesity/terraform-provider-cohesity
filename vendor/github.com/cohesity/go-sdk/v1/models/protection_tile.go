// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectionTile Protection Tile.
//
// Protection information and statistics.
//
// swagger:model ProtectionTile
type ProtectionTile struct {

	// Statistics related to archival for last 24 hours.
	LastDayArchival *ProtectionStats `json:"lastDayArchival,omitempty"`

	// Statistics related to Back for last 24 hours.
	LastDayBackup *ProtectionStats `json:"lastDayBackup,omitempty"`

	// Statistics related to incoming replication for last 24 hours.
	LastDayReplicationIn *ProtectionStats `json:"lastDayReplicationIn,omitempty"`

	// Statistics related to outgoing replication for last 24 hours.
	LastDayReplicationOut *ProtectionStats `json:"lastDayReplicationOut,omitempty"`
}

// Validate validates this protection tile
func (m *ProtectionTile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastDayArchival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDayBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDayReplicationIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDayReplicationOut(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionTile) validateLastDayArchival(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDayArchival) { // not required
		return nil
	}

	if m.LastDayArchival != nil {
		if err := m.LastDayArchival.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastDayArchival")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastDayArchival")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionTile) validateLastDayBackup(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDayBackup) { // not required
		return nil
	}

	if m.LastDayBackup != nil {
		if err := m.LastDayBackup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastDayBackup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastDayBackup")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionTile) validateLastDayReplicationIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDayReplicationIn) { // not required
		return nil
	}

	if m.LastDayReplicationIn != nil {
		if err := m.LastDayReplicationIn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastDayReplicationIn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastDayReplicationIn")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionTile) validateLastDayReplicationOut(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDayReplicationOut) { // not required
		return nil
	}

	if m.LastDayReplicationOut != nil {
		if err := m.LastDayReplicationOut.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastDayReplicationOut")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastDayReplicationOut")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this protection tile based on the context it is used
func (m *ProtectionTile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastDayArchival(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastDayBackup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastDayReplicationIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastDayReplicationOut(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionTile) contextValidateLastDayArchival(ctx context.Context, formats strfmt.Registry) error {

	if m.LastDayArchival != nil {

		if swag.IsZero(m.LastDayArchival) { // not required
			return nil
		}

		if err := m.LastDayArchival.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastDayArchival")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastDayArchival")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionTile) contextValidateLastDayBackup(ctx context.Context, formats strfmt.Registry) error {

	if m.LastDayBackup != nil {

		if swag.IsZero(m.LastDayBackup) { // not required
			return nil
		}

		if err := m.LastDayBackup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastDayBackup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastDayBackup")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionTile) contextValidateLastDayReplicationIn(ctx context.Context, formats strfmt.Registry) error {

	if m.LastDayReplicationIn != nil {

		if swag.IsZero(m.LastDayReplicationIn) { // not required
			return nil
		}

		if err := m.LastDayReplicationIn.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastDayReplicationIn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastDayReplicationIn")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionTile) contextValidateLastDayReplicationOut(ctx context.Context, formats strfmt.Registry) error {

	if m.LastDayReplicationOut != nil {

		if swag.IsZero(m.LastDayReplicationOut) { // not required
			return nil
		}

		if err := m.LastDayReplicationOut.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastDayReplicationOut")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastDayReplicationOut")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionTile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionTile) UnmarshalBinary(b []byte) error {
	var res ProtectionTile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
