// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CheckRestoreAppTaskArg API to check the feasibility of an application restore task and, if exactly
// one entity is being restored, return the display info for all the snapshots
// in the restore path. For example, during SQL/Oracle DB restore this RPC is
// invoked at the point when Iris accepts user input for the recovery point,
// and is used to perform recovery path analysis and either return the snapshot
// sizes if recovery is possible to the given point in time or return an error
// otherwise.
//
// swagger:model CheckRestoreAppTaskArg
type CheckRestoreAppTaskArg struct {

	// Specifies the request attributes.
	APIRequestAttr *APIRequestAttr `json:"apiRequestAttr,omitempty"`

	// Specifies the API version used by this arg.
	APIVersion *APIVersion `json:"apiVersion,omitempty"`

	// Information about the application restore task.
	RestoreAppParams *RestoreAppParams `json:"restoreAppParams,omitempty"`
}

// Validate validates this check restore app task arg
func (m *CheckRestoreAppTaskArg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIRequestAttr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreAppParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckRestoreAppTaskArg) validateAPIRequestAttr(formats strfmt.Registry) error {
	if swag.IsZero(m.APIRequestAttr) { // not required
		return nil
	}

	if m.APIRequestAttr != nil {
		if err := m.APIRequestAttr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiRequestAttr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiRequestAttr")
			}
			return err
		}
	}

	return nil
}

func (m *CheckRestoreAppTaskArg) validateAPIVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.APIVersion) { // not required
		return nil
	}

	if m.APIVersion != nil {
		if err := m.APIVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiVersion")
			}
			return err
		}
	}

	return nil
}

func (m *CheckRestoreAppTaskArg) validateRestoreAppParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreAppParams) { // not required
		return nil
	}

	if m.RestoreAppParams != nil {
		if err := m.RestoreAppParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAppParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this check restore app task arg based on the context it is used
func (m *CheckRestoreAppTaskArg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIRequestAttr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPIVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreAppParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckRestoreAppTaskArg) contextValidateAPIRequestAttr(ctx context.Context, formats strfmt.Registry) error {

	if m.APIRequestAttr != nil {

		if swag.IsZero(m.APIRequestAttr) { // not required
			return nil
		}

		if err := m.APIRequestAttr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiRequestAttr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiRequestAttr")
			}
			return err
		}
	}

	return nil
}

func (m *CheckRestoreAppTaskArg) contextValidateAPIVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.APIVersion != nil {

		if swag.IsZero(m.APIVersion) { // not required
			return nil
		}

		if err := m.APIVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiVersion")
			}
			return err
		}
	}

	return nil
}

func (m *CheckRestoreAppTaskArg) contextValidateRestoreAppParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreAppParams != nil {

		if swag.IsZero(m.RestoreAppParams) { // not required
			return nil
		}

		if err := m.RestoreAppParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAppParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CheckRestoreAppTaskArg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckRestoreAppTaskArg) UnmarshalBinary(b []byte) error {
	var res CheckRestoreAppTaskArg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
