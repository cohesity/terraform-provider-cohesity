// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HealthTile Health Tile.
//
// Health for Dashboard.
//
// swagger:model HealthTile
type HealthTile struct {

	// Raw Cluster Capacity in Bytes. This is not usable capacity and does not
	// take replication factor into account.
	CapacityBytes *int64 `json:"capacityBytes,omitempty"`

	// Usage in Bytes on the cloud.
	ClusterCloudUsageBytes *int64 `json:"clusterCloudUsageBytes,omitempty"`

	// Alerts in last 24 hours.
	LastDayAlerts []*Alert `json:"lastDayAlerts"`

	// Number of Critical Alerts.
	LastDayNumCriticals *int64 `json:"lastDayNumCriticals,omitempty"`

	// Number of Warning Alerts.
	LastDayNumWarnings *int64 `json:"lastDayNumWarnings,omitempty"`

	// Number of nodes in the cluster.
	NumNodes *int32 `json:"numNodes,omitempty"`

	// Number of nodes in the cluster that are unhealthy.
	NumNodesWithIssues *int32 `json:"numNodesWithIssues,omitempty"`

	// Percent the cluster is full.
	PercentFull *float32 `json:"percentFull,omitempty"`

	// Raw Bytes used in the cluster.
	RawUsedBytes *int64 `json:"rawUsedBytes,omitempty"`
}

// Validate validates this health tile
func (m *HealthTile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastDayAlerts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthTile) validateLastDayAlerts(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDayAlerts) { // not required
		return nil
	}

	for i := 0; i < len(m.LastDayAlerts); i++ {
		if swag.IsZero(m.LastDayAlerts[i]) { // not required
			continue
		}

		if m.LastDayAlerts[i] != nil {
			if err := m.LastDayAlerts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lastDayAlerts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lastDayAlerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this health tile based on the context it is used
func (m *HealthTile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastDayAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthTile) contextValidateLastDayAlerts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastDayAlerts); i++ {

		if m.LastDayAlerts[i] != nil {

			if swag.IsZero(m.LastDayAlerts[i]) { // not required
				return nil
			}

			if err := m.LastDayAlerts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lastDayAlerts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lastDayAlerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HealthTile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthTile) UnmarshalBinary(b []byte) error {
	var res HealthTile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
