// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtectionSourcesSummaryStats Protection Sources Summary Statistics.
//
// Specifies Job Run (Snapshot) summary statistics about the specified
// leaf Protection Source Object (such as a VM).
//
// swagger:model ProtectionSourcesSummaryStats
type ProtectionSourcesSummaryStats struct {

	// Specifies the start time of the first failed Job Run protecting this
	// Protection Source Object.
	// The time is specified as a Unix epoch Timestamp (in microseconds).
	FirstFailedRunTimeUsecs *int64 `json:"firstFailedRunTimeUsecs,omitempty"`

	// Specifies the start time of the first successful Job Run protecting this
	// Protection Source Object.
	// The time is specified as a Unix epoch Timestamp (in microseconds).
	FirstSuccessfulRunTimeUsecs *int64 `json:"firstSuccessfulRunTimeUsecs,omitempty"`

	// Specifies the start time of the last failed Job Run protecting this
	// Protection Source Object.
	// The time is specified as a Unix epoch Timestamp (in microseconds).
	LastFailedRunTimeUsecs *int64 `json:"lastFailedRunTimeUsecs,omitempty"`

	// Specifies the end time of the last Job Run protecting this
	// Protection Source Object.
	// The time is specified as a Unix epoch Timestamp (in microseconds).
	LastRunEndTimeUsecs *int64 `json:"lastRunEndTimeUsecs,omitempty"`

	// Specifies the error message associated with last run, if the last run
	// has failed.
	LastRunErrorMsg *string `json:"lastRunErrorMsg,omitempty"`

	// Specifies the start time of the last Job Run protecting this
	// Protection Source Object.
	// The time is specified as a Unix epoch Timestamp (in microseconds).
	LastRunStartTimeUsecs *int64 `json:"lastRunStartTimeUsecs,omitempty"`

	// Specifies the Job Run status of the last Job Run protecting
	// this Protection Source Object.
	// 'kSuccess' indicates that the Job Run was successful.
	// 'kRunning' indicates that the Job Run is currently running.
	// 'kWarning' indicates that the Job Run was successful but warnings were
	// issued.
	// 'kCancelled' indicates that the Job Run was canceled.
	// 'kError' indicates the Job Run encountered an error and did not run to
	// completion.
	// Enum: ["kSuccess","kRunning","kWarning","kCancelled","kError"]
	LastRunStatus *string `json:"lastRunStatus,omitempty"`

	// Specifies the Job Run type of the last Job Run protecting
	// this Protection Source Object.
	// 'kRegular' indicates an incremental (CBT) backup. Incremental backups
	// utilizing CBT (if supported) are captured of the target protection
	// objects.
	// The first run of a kRegular schedule captures all the blocks.
	// 'kFull' indicates a full (no CBT) backup. A complete backup
	// (all blocks) of the target protection objects are always captured and
	// Change Block Tracking (CBT) is not utilized.
	// 'kLog' indicates a Database Log backup. Capture the database
	// transaction logs to allow rolling back to a specific point in time.
	// 'kSystem' indicates system volume backup. It produces an image
	// for bare metal recovery.
	// Enum: ["kRegular","kFull","kLog","kSystem"]
	LastRunType *string `json:"lastRunType,omitempty"`

	// Specifies the start time of the last successful Job Run protecting this
	// Protection Source Object.
	// The time is specified as a Unix epoch Timestamp (in microseconds).
	LastSuccessfulRunTimeUsecs *int64 `json:"lastSuccessfulRunTimeUsecs,omitempty"`

	// Specifies the total number of bytes read while protecting this
	// Protection Source Object.
	NumDataReadBytes *int64 `json:"numDataReadBytes,omitempty"`

	// Specifies the total number of errors reported during Job Runs
	// of this Protection Source Object.
	NumErrors *int32 `json:"numErrors,omitempty"`

	// Specifies the total logical bytes protected for this
	// Protection Source Object.
	// The logical size is when the data is fully hydrated or expanded.
	NumLogicalBytesProtected *int64 `json:"numLogicalBytesProtected,omitempty"`

	// Specifies the total number of Snapshots that are backing up this
	// Protection Source Object.
	NumSnapshots *int32 `json:"numSnapshots,omitempty"`

	// Specifies the total number of successful Job Runs protecting this
	// Protection Source Object.
	NumSuccessRuns *int32 `json:"numSuccessRuns,omitempty"`

	// Specifies the total number of warnings reported during Job Runs
	// of this Protection Source Object.
	NumWarnings *int32 `json:"numWarnings,omitempty"`

	// Specifies the leaf Protection Source Object (such as VM).
	// Snapshot summary statistics are reported for this Protection Source
	// Object.
	ProtectionSource struct {
		ProtectionSource
	} `json:"protectionSource,omitempty"`

	// Specifies the name of the Registered Source that is the top level
	// parent of the specified Protection Source Object.
	RegisteredSource *string `json:"registeredSource,omitempty"`

	// Specifies basic information about tenants having access to the protection
	// job.
	Tenants []*TenantInfo `json:"tenants"`
}

// Validate validates this protection sources summary stats
func (m *ProtectionSourcesSummaryStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastRunStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenants(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var protectionSourcesSummaryStatsTypeLastRunStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSuccess","kRunning","kWarning","kCancelled","kError"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protectionSourcesSummaryStatsTypeLastRunStatusPropEnum = append(protectionSourcesSummaryStatsTypeLastRunStatusPropEnum, v)
	}
}

const (

	// ProtectionSourcesSummaryStatsLastRunStatusKSuccess captures enum value "kSuccess"
	ProtectionSourcesSummaryStatsLastRunStatusKSuccess string = "kSuccess"

	// ProtectionSourcesSummaryStatsLastRunStatusKRunning captures enum value "kRunning"
	ProtectionSourcesSummaryStatsLastRunStatusKRunning string = "kRunning"

	// ProtectionSourcesSummaryStatsLastRunStatusKWarning captures enum value "kWarning"
	ProtectionSourcesSummaryStatsLastRunStatusKWarning string = "kWarning"

	// ProtectionSourcesSummaryStatsLastRunStatusKCancelled captures enum value "kCancelled"
	ProtectionSourcesSummaryStatsLastRunStatusKCancelled string = "kCancelled"

	// ProtectionSourcesSummaryStatsLastRunStatusKError captures enum value "kError"
	ProtectionSourcesSummaryStatsLastRunStatusKError string = "kError"
)

// prop value enum
func (m *ProtectionSourcesSummaryStats) validateLastRunStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, protectionSourcesSummaryStatsTypeLastRunStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProtectionSourcesSummaryStats) validateLastRunStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRunStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateLastRunStatusEnum("lastRunStatus", "body", *m.LastRunStatus); err != nil {
		return err
	}

	return nil
}

var protectionSourcesSummaryStatsTypeLastRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kFull","kLog","kSystem"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protectionSourcesSummaryStatsTypeLastRunTypePropEnum = append(protectionSourcesSummaryStatsTypeLastRunTypePropEnum, v)
	}
}

const (

	// ProtectionSourcesSummaryStatsLastRunTypeKRegular captures enum value "kRegular"
	ProtectionSourcesSummaryStatsLastRunTypeKRegular string = "kRegular"

	// ProtectionSourcesSummaryStatsLastRunTypeKFull captures enum value "kFull"
	ProtectionSourcesSummaryStatsLastRunTypeKFull string = "kFull"

	// ProtectionSourcesSummaryStatsLastRunTypeKLog captures enum value "kLog"
	ProtectionSourcesSummaryStatsLastRunTypeKLog string = "kLog"

	// ProtectionSourcesSummaryStatsLastRunTypeKSystem captures enum value "kSystem"
	ProtectionSourcesSummaryStatsLastRunTypeKSystem string = "kSystem"
)

// prop value enum
func (m *ProtectionSourcesSummaryStats) validateLastRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, protectionSourcesSummaryStatsTypeLastRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProtectionSourcesSummaryStats) validateLastRunType(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRunType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLastRunTypeEnum("lastRunType", "body", *m.LastRunType); err != nil {
		return err
	}

	return nil
}

func (m *ProtectionSourcesSummaryStats) validateProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSourcesSummaryStats) validateTenants(formats strfmt.Registry) error {
	if swag.IsZero(m.Tenants) { // not required
		return nil
	}

	for i := 0; i < len(m.Tenants); i++ {
		if swag.IsZero(m.Tenants[i]) { // not required
			continue
		}

		if m.Tenants[i] != nil {
			if err := m.Tenants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenants" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tenants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this protection sources summary stats based on the context it is used
func (m *ProtectionSourcesSummaryStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenants(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSourcesSummaryStats) contextValidateProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSourcesSummaryStats) contextValidateTenants(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tenants); i++ {

		if m.Tenants[i] != nil {

			if swag.IsZero(m.Tenants[i]) { // not required
				return nil
			}

			if err := m.Tenants[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenants" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tenants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionSourcesSummaryStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionSourcesSummaryStats) UnmarshalBinary(b []byte) error {
	var res ProtectionSourcesSummaryStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
