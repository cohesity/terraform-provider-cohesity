// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// S3KeyMappingConfigProto Proto to define key mapping configuration for a S3 bucket.
//
// When key mapping is configured, S3 protocol layer will convert S3 object
// keys into multi-component snap_fs paths by segmenting the key into
// components. Each component will be of size segment_length. If max_segments
// is specified, the number of segments will be limited to that value. If the
// length of the object key is >= segment_length * max_segments, only the
// first segment_length * max_segments will be segmented and rest of the key
// will be left untouched.
// E.g.: If segment_length is set to 2 and max_segments is set to 2, following
// will be the mapping.
// 1. abcdefg -> ab/cd/efg
// 2. abc -> ab/c
//
// swagger:model S3KeyMappingConfigProto
type S3KeyMappingConfigProto struct {

	// Maximum number of components in the segmented object name.
	MaxSegments *int32 `json:"maxSegments,omitempty"`

	// This is true if S3 view is created using s3_object_snap_tree.
	ObjectSnapTreeEnabled *bool `json:"objectSnapTreeEnabled,omitempty"`

	// Length of the each path component when the object name is segmented.
	SegmentLength *int32 `json:"segmentLength,omitempty"`
}

// Validate validates this s3 key mapping config proto
func (m *S3KeyMappingConfigProto) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this s3 key mapping config proto based on context it is used
func (m *S3KeyMappingConfigProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *S3KeyMappingConfigProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3KeyMappingConfigProto) UnmarshalBinary(b []byte) error {
	var res S3KeyMappingConfigProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
