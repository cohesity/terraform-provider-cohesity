// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsKmsConfiguration AwsKmsConfiguration to define AWS KMS config.
//
// swagger:model AwsKmsConfiguration
type AwsKmsConfiguration struct {

	// Access key id needed to access the cloud account.
	// When update cluster config, should encrypte accessKeyId with cluster ID.
	AccessKeyID *string `json:"accessKeyId,omitempty"`

	// Specifies the authentication method to be used for API calls.
	// Specifies the authentication method to be used for API calls.
	// 'kUseIAMUser' indicates a user based authentication.
	// 'kUseIAMRole' indicates a role based authentication, used only for AWS CE.
	// 'kUseHelios' indicates a Helios based authentication.
	// Enum: ["kUseIAMUser","kUseIAMRole","kUseHelios"]
	AuthMethod *string `json:"authMethod,omitempty"`

	// Specify the ca certificate path.
	CaCertificate *string `json:"caCertificate,omitempty"`

	// The string alias of the CMK.
	CmkAlias *string `json:"cmkAlias,omitempty"`

	// The Amazon Resource Number of AWS Customer Managed Key.
	CmkArn *string `json:"cmkArn,omitempty"`

	// AWS keyId, and alias.
	// Only need one of them to connect AWS.
	// Alias is better, because keyId maybe rotated by AWS.
	// The unique key id of the CMK.
	CmkKeyID *string `json:"cmkKeyId,omitempty"`

	// Specifies the IAM role which will be used to access the security
	// credentials required for API calls.
	IamRoleArn *string `json:"iamRoleArn,omitempty"`

	// AWS region, e.g. us-east-1, us-west-2, for the AWS Glacier service to
	// be used to authenticate resources within this region by the configured
	// AWS account.
	Region *string `json:"region,omitempty"`

	// Secret access key needed to access the cloud account. This is
	// encrypted with the cluster id.
	SecretAccessKey *string `json:"secretAccessKey,omitempty"`

	// Specify whether to verify SSL when connect with AWS KMS.
	// Default is true.
	VerifySSL *bool `json:"verifySSL,omitempty"`
}

// Validate validates this aws kms configuration
func (m *AwsKmsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var awsKmsConfigurationTypeAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUseIAMUser","kUseIAMRole","kUseHelios"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsKmsConfigurationTypeAuthMethodPropEnum = append(awsKmsConfigurationTypeAuthMethodPropEnum, v)
	}
}

const (

	// AwsKmsConfigurationAuthMethodKUseIAMUser captures enum value "kUseIAMUser"
	AwsKmsConfigurationAuthMethodKUseIAMUser string = "kUseIAMUser"

	// AwsKmsConfigurationAuthMethodKUseIAMRole captures enum value "kUseIAMRole"
	AwsKmsConfigurationAuthMethodKUseIAMRole string = "kUseIAMRole"

	// AwsKmsConfigurationAuthMethodKUseHelios captures enum value "kUseHelios"
	AwsKmsConfigurationAuthMethodKUseHelios string = "kUseHelios"
)

// prop value enum
func (m *AwsKmsConfiguration) validateAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, awsKmsConfigurationTypeAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AwsKmsConfiguration) validateAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthMethodEnum("authMethod", "body", *m.AuthMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aws kms configuration based on context it is used
func (m *AwsKmsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AwsKmsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsKmsConfiguration) UnmarshalBinary(b []byte) error {
	var res AwsKmsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
