// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LdapProvider LDAP.
//
// Specifies the configuration settings for an LDAP provider.
//
// swagger:model LdapProvider
type LdapProvider struct {

	// Specifies the domain name of an Active Directory which is mapped to this
	// LDAP provider
	AdDomainName *string `json:"adDomainName,omitempty"`

	// Name of the LDAP attribute used for common name of an object.
	AttributeCommonName *string `json:"attributeCommonName,omitempty"`

	// Name of the attribute used to lookup unix GID of an LDAP user.
	AttributeGid *string `json:"attributeGid,omitempty"`

	// Name of the LDAP attribute used to lookup members of a group.
	AttributeMemberOf *string `json:"attributeMemberOf,omitempty"`

	// Name of the attribute used to lookup unix UID of an LDAP user.
	AttributeUID *string `json:"attributeUid,omitempty"`

	// Name of the LDAP attribute used to lookup a user by user ID.
	AttributeUserName *string `json:"attributeUserName,omitempty"`

	// Specifies the authentication type used while connecting to LDAP servers.
	// Authentication level.
	// 'kAnonymous' indicates LDAP authentication type 'Anonymous'
	// 'kSimple' indicates LDAP authentication type 'Simple'
	// Enum: ["kAnonymous","kSimple"]
	AuthType *string `json:"authType,omitempty"`

	// Specifies the base distinguished name used as the base for LDAP
	// search requests.
	BaseDistinguishedName *string `json:"baseDistinguishedName,omitempty"`

	// Specifies the name of the domain name to be used for querying LDAP servers
	// from DNS. If PreferredLdapServerList is set, then DomainName field is
	// ignored.
	DomainName *string `json:"domainName,omitempty"`

	// Specifies the name of the LDAP provider.
	Name *string `json:"name,omitempty"`

	// Name of the LDAP group object class for user accounts.
	ObjectClassGroup *string `json:"objectClassGroup,omitempty"`

	// Name of the LDAP user object class for user accounts.
	ObjectClassUser *string `json:"objectClassUser,omitempty"`

	// Specifies LDAP server port.
	Port *int32 `json:"port,omitempty"`

	// Specifies the preferred LDAP servers. Server names should be either in
	// fully qualified domain name (FQDN) format or IP addresses.
	PreferredLdapServerList []string `json:"preferredLdapServerList"`

	// Specifies the unique id of the tenant.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies whether to use SSL for LDAP connections.
	UseSsl *bool `json:"useSsl,omitempty"`

	// Specifies the user distinguished name that is used for LDAP authentication.
	// It should be provided if the AuthType is set to either kSimple or kSasl.
	UserDistinguishedName *string `json:"userDistinguishedName,omitempty"`

	// Specifies the user password that is used for LDAP authentication.
	UserPassword *string `json:"userPassword,omitempty"`
}

// Validate validates this ldap provider
func (m *LdapProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ldapProviderTypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAnonymous","kSimple"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ldapProviderTypeAuthTypePropEnum = append(ldapProviderTypeAuthTypePropEnum, v)
	}
}

const (

	// LdapProviderAuthTypeKAnonymous captures enum value "kAnonymous"
	LdapProviderAuthTypeKAnonymous string = "kAnonymous"

	// LdapProviderAuthTypeKSimple captures enum value "kSimple"
	LdapProviderAuthTypeKSimple string = "kSimple"
)

// prop value enum
func (m *LdapProvider) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ldapProviderTypeAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LdapProvider) validateAuthType(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ldap provider based on context it is used
func (m *LdapProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LdapProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LdapProvider) UnmarshalBinary(b []byte) error {
	var res LdapProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
