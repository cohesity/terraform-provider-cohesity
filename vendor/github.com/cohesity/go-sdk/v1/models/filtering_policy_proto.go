// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FilteringPolicyProto Filtering Policy Proto.
//
// Proto to encapsulate the filtering policy for backup objects like files or
// directories. If an object is not matched by any of the 'allow_filters', it
// will be excluded in the backup. If an object is matched by one of the
// 'deny_filters', it will always be excluded in the backup. Basically
// 'deny_filters' overwrite 'allow_filters' if they both match the same object.
// Currently we only support two kinds of filter: prefix which always starts
// with '/', or postfix which always starts with '*' (cannot be "*" only). We
// don't support regular expression right now.
// A concrete example is:
// Allow filters: "/"
// Deny filters: "/tmp", "*.mp4"
// Using such a policy will include everything under the root directory except
// the /tmp directory and all the mp4 files.
//
// swagger:model FilteringPolicyProto
type FilteringPolicyProto struct {

	// List of filters to allow matched objects for backup.
	AllowFilters []string `json:"allowFilters"`

	// List of filters to deny matched objects for backup.
	DenyFilters []string `json:"denyFilters"`
}

// Validate validates this filtering policy proto
func (m *FilteringPolicyProto) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this filtering policy proto based on context it is used
func (m *FilteringPolicyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FilteringPolicyProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilteringPolicyProto) UnmarshalBinary(b []byte) error {
	var res FilteringPolicyProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
