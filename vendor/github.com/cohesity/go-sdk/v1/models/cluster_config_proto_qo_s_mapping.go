// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterConfigProtoQoSMapping Mapping from a QoSContext to a QoSPrincipal.
// NOTE: 'type' and 'priority' fields have been converted from required to
// optional in v2.5. Adding a new value to an enumeration for which there is
// a required field in any message breaks the software upgrade process.
// During an upgrade, it is common for different cluster nodes to run
// different versions of the code for a short period of time. So if a node
// running a newer version of the code goes ahead and sets the required field
// to the newly added enum value, the old code running on other nodes may go
// into crash loops due to protobuf parse failures.
//
// If a new enum value is added to either QoSMapping.Type or
// QoSPrincipal.Priority in a future version, direct upgrades must be
// disallowed from a pre-2.5 version to that version (without upgrading to
// 2.5 first). Contact nexus team for getting an appropriate restriction into
// the upgrade compatibility list.
//
// swagger:model ClusterConfigProto_QoSMapping
type ClusterConfigProtoQoSMapping struct {

	// Principal id of the QoS principal to which qos_context maps to.
	PrincipalID *int64 `json:"principalId,omitempty"`

	// qos context
	QosContext *ClusterConfigProtoQoSMappingQoSContext `json:"qosContext,omitempty"`
}

// Validate validates this cluster config proto qo s mapping
func (m *ClusterConfigProtoQoSMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQosContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigProtoQoSMapping) validateQosContext(formats strfmt.Registry) error {
	if swag.IsZero(m.QosContext) { // not required
		return nil
	}

	if m.QosContext != nil {
		if err := m.QosContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qosContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qosContext")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster config proto qo s mapping based on the context it is used
func (m *ClusterConfigProtoQoSMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQosContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigProtoQoSMapping) contextValidateQosContext(ctx context.Context, formats strfmt.Registry) error {

	if m.QosContext != nil {

		if swag.IsZero(m.QosContext) { // not required
			return nil
		}

		if err := m.QosContext.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qosContext")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qosContext")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterConfigProtoQoSMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterConfigProtoQoSMapping) UnmarshalBinary(b []byte) error {
	var res ClusterConfigProtoQoSMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
