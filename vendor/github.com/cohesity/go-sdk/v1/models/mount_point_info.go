// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MountPointInfo Proto that contains information about a mount point.
//
// swagger:model MountPointInfo
type MountPointInfo struct {

	// The groupnet of the zone this mount point belongs to.
	Groupnet *string `json:"groupnet,omitempty"`

	// Information about NFS export. Only valid if this mount point is exposed
	// through NFS protocol.
	NfsInfo *MountPointInfoNfsInfo `json:"nfsInfo,omitempty"`

	// The path of this mount point in ifs. This should include the leading
	// "/ifs/".
	Path *string `json:"path,omitempty"`

	// Information about SMB shares. Only valid if this mount point is exposed
	// through SMB protocol.
	SmbInfoVec []*MountPointInfoSmbInfo `json:"smbInfoVec"`

	// List of protocols that expose this mount point.
	SupportedProtocolVec []int32 `json:"supportedProtocolVec"`

	// The string zone ID to which this mount point belongs.
	ZoneID *string `json:"zoneId,omitempty"`
}

// Validate validates this mount point info
func (m *MountPointInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNfsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountPointInfo) validateNfsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsInfo) { // not required
		return nil
	}

	if m.NfsInfo != nil {
		if err := m.NfsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MountPointInfo) validateSmbInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.SmbInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.SmbInfoVec); i++ {
		if swag.IsZero(m.SmbInfoVec[i]) { // not required
			continue
		}

		if m.SmbInfoVec[i] != nil {
			if err := m.SmbInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("smbInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("smbInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mount point info based on the context it is used
func (m *MountPointInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNfsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountPointInfo) contextValidateNfsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.NfsInfo != nil {

		if swag.IsZero(m.NfsInfo) { // not required
			return nil
		}

		if err := m.NfsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MountPointInfo) contextValidateSmbInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SmbInfoVec); i++ {

		if m.SmbInfoVec[i] != nil {

			if swag.IsZero(m.SmbInfoVec[i]) { // not required
				return nil
			}

			if err := m.SmbInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("smbInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("smbInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountPointInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountPointInfo) UnmarshalBinary(b []byte) error {
	var res MountPointInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
