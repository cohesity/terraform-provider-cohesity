// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateAAGReplicaInfo Represents one replica in an AAG (see http://goo.gl/3NvMMW).
// The design doc for AAG: https://goo.gl/EkJ8p9
//
// A replica contains the set of databases in the AAG on a given host.
// A given host may have multiple AAG replicas running on it.
//
// When populated as the result from the agent on a local replica, this proto
// may be incomplete, since an agent on a secondary replica may only be able
// to get complete information about its own replica.
//
// See field comments about which fields are avilable when queried from
// a given replica.
//
// NOTE: The replica information in an AAG gets updated differently from local
//
// and non local replica snapshots. So any changes to this proto also
// need to be reconciled with the corresponding changes in SQL entity
// hierarchy and entity hashing utilities.
//
// swagger:model PrivateAAGReplicaInfo
type PrivateAAGReplicaInfo struct {

	// The mode of this replica.
	AvailabilityMode *int32 `json:"availabilityMode,omitempty"`

	// User-specified priority of for performing backups relative to other
	// replicas. 1 is the lowest priority and 100 is the highest. A priority of
	// 0 means this replica should never be used for backups.
	// See "BACKUP_PRIORITY" here: https://goo.gl/h69y1b
	BackupPriority *int32 `json:"backupPriority,omitempty"`

	// The local time in msecs of the time the replica was created. The value
	// is not set if the replica is not local (it is on a different server than
	// the one the agent is on).
	//
	// When part of an agent response, this field is only available for the
	// local replica.
	CreateDateMsecs *int64 `json:"createDateMsecs,omitempty"`

	// All the databases hosted on this replica that are part of the same AAG.
	// Note that a given host may have multiple replicas assigned to it.
	DbInfoVec []*AAGReplicaInfoDbInfo `json:"dbInfoVec"`

	// The unique identifier of the availability group the replica is part of.
	GroupID *string `json:"groupId,omitempty"`

	// The entity id of the replica's host. Only set if its host is registered
	// with Cohesity.
	HostEntityID *int64 `json:"hostEntityId,omitempty"`

	// Whether the replica is local to the agent that is querying for this
	// information.
	IsLocal *bool `json:"isLocal,omitempty"`

	// The local time in msecs of the time the replica was last modified. The
	// value is not set if the replica is not local (it is on a different server
	// than the one the agent is on).
	//
	// When part of an agent response, this field is only available for the
	// local replica.
	ModifyDateMsecs *int64 `json:"modifyDateMsecs,omitempty"`

	// The current operational state of the availability replica.
	// See https://goo.gl/cz2YLI
	OperationalState *int32 `json:"operationalState,omitempty"`

	// The types of connections allowed when this replica is a primary.
	PrimaryRoleAllowConnections *int32 `json:"primaryRoleAllowConnections,omitempty"`

	// The unique identifier of the replica.
	ReplicaID *string `json:"replicaId,omitempty"`

	// The name of the server hosting the replica, and if the SQL instance is not
	// default, the instance name. For example, for the default instance, this
	// would contain "<hostname>", and for a named instance "TEST_INSTANCE", this
	// would contain "<hostname>\TEST_INSTANCE".
	ReplicaServerName *string `json:"replicaServerName,omitempty"`

	// The role of this replica.
	Role *int32 `json:"role,omitempty"`

	// The types of connections allowed when this replica is a secondary.
	SecondaryRoleAllowConnections *int32 `json:"secondaryRoleAllowConnections,omitempty"`

	// A rollup of the synchronization state of all joined databases in this AAG.
	// This reflects the least healthy database on the replica.
	SynchronizationHealth *int32 `json:"synchronizationHealth,omitempty"`

	// The windows name of the replica's windows host.
	WindowsHostName *string `json:"windowsHostName,omitempty"`

	// The Windows Cluster node ID of this AAG replica. This field is set by
	// joining the replica's windows_hostname on the windows cluster nodes in
	// the HKLM > Cluster registry hive.
	WsfcNodeID *string `json:"wsfcNodeId,omitempty"`
}

// Validate validates this private a a g replica info
func (m *PrivateAAGReplicaInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAAGReplicaInfo) validateDbInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DbInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DbInfoVec); i++ {
		if swag.IsZero(m.DbInfoVec[i]) { // not required
			continue
		}

		if m.DbInfoVec[i] != nil {
			if err := m.DbInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dbInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dbInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this private a a g replica info based on the context it is used
func (m *PrivateAAGReplicaInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDbInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAAGReplicaInfo) contextValidateDbInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DbInfoVec); i++ {

		if m.DbInfoVec[i] != nil {

			if swag.IsZero(m.DbInfoVec[i]) { // not required
				return nil
			}

			if err := m.DbInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dbInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dbInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateAAGReplicaInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateAAGReplicaInfo) UnmarshalBinary(b []byte) error {
	var res PrivateAAGReplicaInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
