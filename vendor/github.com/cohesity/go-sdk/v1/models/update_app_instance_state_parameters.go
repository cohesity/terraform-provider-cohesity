// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAppInstanceStateParameters Update App Instance State Parameters.
//
// Specifies update app instance state parameters.
//
// swagger:model UpdateAppInstanceStateParameters
type UpdateAppInstanceStateParameters struct {

	// Specifies the desired app instance state type.
	// Specifies operational status of an app instance.
	// kInitializing - The app instance has been launched or resumed, but is not fully running yet.
	// kRunning - The app instance is running. Check health_status for the actual health.
	// kPausing - The app instance is being paused.
	// kPaused - The app instance has been paused.
	// kTerminating - The app instance is being terminated.
	// kTerminated -  The app instance has been terminated.
	// kFailed - The app instance has failed due to an unrecoverable error.
	// Enum: ["kInitializing","kRunning","kPausing","kPaused","kTerminating","kTerminated","kFailed"]
	State *string `json:"state,omitempty"`
}

// Validate validates this update app instance state parameters
func (m *UpdateAppInstanceStateParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateAppInstanceStateParametersTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kInitializing","kRunning","kPausing","kPaused","kTerminating","kTerminated","kFailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateAppInstanceStateParametersTypeStatePropEnum = append(updateAppInstanceStateParametersTypeStatePropEnum, v)
	}
}

const (

	// UpdateAppInstanceStateParametersStateKInitializing captures enum value "kInitializing"
	UpdateAppInstanceStateParametersStateKInitializing string = "kInitializing"

	// UpdateAppInstanceStateParametersStateKRunning captures enum value "kRunning"
	UpdateAppInstanceStateParametersStateKRunning string = "kRunning"

	// UpdateAppInstanceStateParametersStateKPausing captures enum value "kPausing"
	UpdateAppInstanceStateParametersStateKPausing string = "kPausing"

	// UpdateAppInstanceStateParametersStateKPaused captures enum value "kPaused"
	UpdateAppInstanceStateParametersStateKPaused string = "kPaused"

	// UpdateAppInstanceStateParametersStateKTerminating captures enum value "kTerminating"
	UpdateAppInstanceStateParametersStateKTerminating string = "kTerminating"

	// UpdateAppInstanceStateParametersStateKTerminated captures enum value "kTerminated"
	UpdateAppInstanceStateParametersStateKTerminated string = "kTerminated"

	// UpdateAppInstanceStateParametersStateKFailed captures enum value "kFailed"
	UpdateAppInstanceStateParametersStateKFailed string = "kFailed"
)

// prop value enum
func (m *UpdateAppInstanceStateParameters) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateAppInstanceStateParametersTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateAppInstanceStateParameters) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update app instance state parameters based on context it is used
func (m *UpdateAppInstanceStateParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAppInstanceStateParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAppInstanceStateParameters) UnmarshalBinary(b []byte) error {
	var res UpdateAppInstanceStateParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
