// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DagInfo Exchange DAG Information
//
// Specifies the information about the DAG(Database availability group).
//
// swagger:model DagInfo
type DagInfo struct {

	// Specifies the status of all the Exchange Application Servers that are part
	// of this DAG.
	DagApplicationServerInfoList []*DagApplicationServerInfo `json:"dagApplicationServerInfoList"`

	// Specifies information about the preference order while choosing
	// between which database copy of the database which is part of DAG should
	// be protected.
	ExchangeDagProtectionPreference *ExchangeDAGProtectionPreference `json:"exchangeDagProtectionPreference,omitempty"`

	// Specifies Unique GUID for the DAG.
	GUID *string `json:"guid,omitempty"`

	// Specifies display name of the DAG.
	Name *string `json:"name,omitempty"`
}

// Validate validates this dag info
func (m *DagInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDagApplicationServerInfoList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeDagProtectionPreference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DagInfo) validateDagApplicationServerInfoList(formats strfmt.Registry) error {
	if swag.IsZero(m.DagApplicationServerInfoList) { // not required
		return nil
	}

	for i := 0; i < len(m.DagApplicationServerInfoList); i++ {
		if swag.IsZero(m.DagApplicationServerInfoList[i]) { // not required
			continue
		}

		if m.DagApplicationServerInfoList[i] != nil {
			if err := m.DagApplicationServerInfoList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dagApplicationServerInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dagApplicationServerInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DagInfo) validateExchangeDagProtectionPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeDagProtectionPreference) { // not required
		return nil
	}

	if m.ExchangeDagProtectionPreference != nil {
		if err := m.ExchangeDagProtectionPreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeDagProtectionPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeDagProtectionPreference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dag info based on the context it is used
func (m *DagInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDagApplicationServerInfoList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeDagProtectionPreference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DagInfo) contextValidateDagApplicationServerInfoList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DagApplicationServerInfoList); i++ {

		if m.DagApplicationServerInfoList[i] != nil {

			if swag.IsZero(m.DagApplicationServerInfoList[i]) { // not required
				return nil
			}

			if err := m.DagApplicationServerInfoList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dagApplicationServerInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dagApplicationServerInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DagInfo) contextValidateExchangeDagProtectionPreference(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeDagProtectionPreference != nil {

		if swag.IsZero(m.ExchangeDagProtectionPreference) { // not required
			return nil
		}

		if err := m.ExchangeDagProtectionPreference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeDagProtectionPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeDagProtectionPreference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DagInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DagInfo) UnmarshalBinary(b []byte) error {
	var res DagInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
