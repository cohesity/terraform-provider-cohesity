// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// C2SCAPServerInfo In amazon C2S, we can not provide aws credentials directly. We need to
// contact C2S Access Portal (CAP) to get the aws credentials. The following
// contains information required to contact the C2S CAP server to get the aws
// credentials.
// Client needs to provide client certficate and CA certificate to check chain
// of trust. If the file is encrypted with password, client needs to provide
// password which will be used to parse cerficate to get client certificate and
// client private key.
//
// swagger:model C2SCAPServerInfo
type C2SCAPServerInfo struct {

	// Name of the agency. For example "FBI".
	Agency *string `json:"agency,omitempty"`

	// The base url of C2S CAP server.
	BaseURL *string `json:"baseUrl,omitempty"`

	// Client Certificate.
	ClientCertificate *string `json:"clientCertificate,omitempty"`

	// Client private key.
	ClientPrivateKey *string `json:"clientPrivateKey,omitempty"`

	// Decrypted or plain text password.
	DecryptedPassword *string `json:"decryptedPassword,omitempty"`

	// Name of the mission. For example "Backup".
	Mission *string `json:"mission,omitempty"`

	// Password for decrypting the client private key, if encrypted. We encrypt
	// this password, we should always decrypt this whenever we need to use this.
	Password []uint8 `json:"password"`

	// Role type. For example "RWDEVELOPER".
	Role *string `json:"role,omitempty"`

	// Server CA certificate.
	ServerCaCertificate *string `json:"serverCaCertificate,omitempty"`
}

// Validate validates this c2 s c a p server info
func (m *C2SCAPServerInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this c2 s c a p server info based on context it is used
func (m *C2SCAPServerInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *C2SCAPServerInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *C2SCAPServerInfo) UnmarshalBinary(b []byte) error {
	var res C2SCAPServerInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
