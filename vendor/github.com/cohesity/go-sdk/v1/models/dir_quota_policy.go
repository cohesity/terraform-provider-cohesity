// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DirQuotaPolicy Directory Quota Policy.
//
// Specifies a policy configuration for the directory quota. A policy is the
// sole entity which describes the usage limits of a directory in a view.
//
// `DirPath` is the identifier of a policy. It must be specified for adding,
// updating or removing a policy. If `Policy` is not set, then it is considered
// to be removed.
//
// swagger:model DirQuotaPolicy
type DirQuotaPolicy struct {

	// Specifies the path of the directory in the view.
	DirPath *string `json:"dirPath,omitempty"`

	// Denotes directory quota walk is pending or not.
	DirWalkPending *bool `json:"dirWalkPending,omitempty"`

	// Specifies the quota policy to be applied to the directory.
	Policy *QuotaPolicy `json:"policy,omitempty"`

	// Specifies the current usage (in bytes) by the directory in the view.
	// This is set by the response received from bridge when querying directory
	// quota usage.
	UsageBytes *int64 `json:"usageBytes,omitempty"`
}

// Validate validates this dir quota policy
func (m *DirQuotaPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirQuotaPolicy) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dir quota policy based on the context it is used
func (m *DirQuotaPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirQuotaPolicy) contextValidatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.Policy != nil {

		if swag.IsZero(m.Policy) { // not required
			return nil
		}

		if err := m.Policy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirQuotaPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirQuotaPolicy) UnmarshalBinary(b []byte) error {
	var res DirQuotaPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
