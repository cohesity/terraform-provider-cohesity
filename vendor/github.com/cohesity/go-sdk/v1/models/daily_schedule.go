// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DailySchedule Daily & Weekly Schedule.
//
// Specifies a daily or weekly backup schedule.
//
// swagger:model DailySchedule
type DailySchedule struct {

	// Array of Days.
	//
	// Specifies a list of days of the week when to start Job Runs.
	// If no days are specified, the Jobs Runs will run every day of the week.
	// Specifies a day in a week such as 'kSunday', 'kMonday', etc.
	Days []string `json:"days"`

	// Specifies a factor to multiply the unit by, to
	// determine the copy schedule. For example if set to 2 and the
	// unit is hourly, then Snapshots from the first eligible Job
	// Run for every 2 hour period is copied. Only applies to Minutes, Hours and
	// Days
	Frequency *int64 `json:"frequency,omitempty"`
}

// Validate validates this daily schedule
func (m *DailySchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dailyScheduleDaysItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSunday","kMonday","kTuesday","kWednesday","kThursday","kFriday","kSaturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dailyScheduleDaysItemsEnum = append(dailyScheduleDaysItemsEnum, v)
	}
}

func (m *DailySchedule) validateDaysItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dailyScheduleDaysItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DailySchedule) validateDays(formats strfmt.Registry) error {
	if swag.IsZero(m.Days) { // not required
		return nil
	}

	for i := 0; i < len(m.Days); i++ {

		// value enum
		if err := m.validateDaysItemsEnum("days"+"."+strconv.Itoa(i), "body", m.Days[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this daily schedule based on context it is used
func (m *DailySchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DailySchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DailySchedule) UnmarshalBinary(b []byte) error {
	var res DailySchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
