// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeStatusResult Node Status Result.
//
// Specifies the current status of a Node in the cluster.
//
// swagger:model NodeStatusResult
type NodeStatusResult struct {

	// Specifies the active operation on the Node if there is one.
	// 'kNone' specifies that there is no active operation on the Node.
	// 'kDestroyCluster' specifies that the Cluster which the Node is a part of
	// is currently being destroyed.
	// 'kUpgradeCluster' specifies that the Cluster which the Node is a part of
	// is currently being upgraded to a new software package.
	// 'kRestartCluster' specifies that the Cluster which the Node is a part of
	// is currently being restarted.
	// 'kCreateCluster' specifies that the Node is currently being used to create
	// a new Cluster.
	// 'kExpandCluster' specifies that the Node is currently being added to a
	// Cluster or being used to assist in adding another Node to a Cluster.
	// 'kUpgradeNode' specifies that the Node is currently being upgraded to a new
	// software package.
	// 'kRemoveNode' specifies that the Node is currently being removed from a
	// Cluster or that it is assisting in removing another Node from a Cluster.
	// 'kAddDisks' specifies that the Node is being used to assist in adding disks
	// to the Cluster.
	// 'kMarkDiskOffline' specifies that the Node is being use to assist in
	// marking a disk in the Cluster as offline.
	// Enum: ["kNone","kDestroyCluster","kUpgradeCluster","kRestartCluster","kCreateCluster","kExpandCluster","kUpgradeNode","kRemoveNode","kAddDisks","kMarkDiskOffline"]
	ActiveOperation *string `json:"activeOperation,omitempty"`

	// Specifies the Cluster ID if the Node is part of a Cluster.
	ClusterID *int64 `json:"clusterId,omitempty"`

	// Specifies the ID of the Node.
	ID *int64 `json:"id,omitempty"`

	// Specifies whether or not the Node is part of a Cluster.
	InCluster *bool `json:"inCluster,omitempty"`

	// InMaintnenanceMode is used to mark a node in maintenance mode.
	InMaintenanceMode *bool `json:"inMaintenanceMode,omitempty"`

	// Specifies the Incarnation ID if the Node is part of a Cluster.
	IncarnationID *int64 `json:"incarnationId,omitempty"`

	// Specifies the IP address of the Node.
	IP *string `json:"ip,omitempty"`

	// Whether the node is an app node.
	IsAppNode *bool `json:"isAppNode,omitempty"`

	// Specifies the time of the last upgrade in seconds since the epoch.
	LastUpgradeTimeSecs *int64 `json:"lastUpgradeTimeSecs,omitempty"`

	// Specifies whether or not this node is marked for removal.
	MarkedForRemoval *bool `json:"markedForRemoval,omitempty"`

	// Specifies an optional message describing the current state of the Node.
	Message *string `json:"message,omitempty"`

	// Removal progress for various components which are not acked yet.
	RemovalProgressList []*ComponentRemovalProgress `json:"removalProgressList"`

	// Specifies the reason for the removal operation if there is a removal
	// operation going on.
	// 'kUnknown' specifies that the removal reason is not known.
	// 'kAutoHealthCheck' specifies that an internal health check found problems
	// with the Node.
	// 'kUserGracefulRemoval' specifies that the user requested a graceful
	// removal.
	// 'kUserAvoidAccess' specifies that the user requested to avoid access to
	// this Node.
	// 'kUserGracefulNodeRemoval' specifies that the user requested a graceful
	// removal for all of the disks in this Node.
	// 'kUserRemoveDownNode' specifies that the user requested a graceful removal
	// of the Node while it is down.
	// Enum: ["kUnknown","kAutoHealthCheck","kUserGracefulRemoval","kUserAvoidAccess","kUserGracefulNodeRemoval","kUserRemoveDownNode"]
	RemovalReason *string `json:"removalReason,omitempty"`

	// Specifies the list of services running on the cluster and their process
	// Ids.
	Services []*ServiceProcessEntry `json:"services"`

	// [For UI: Displays list of Acked/NotAcked services separately.]
	// Services already acked for removal of this entity.
	ServicesAckedList []string `json:"servicesAckedList"`

	// [For CLI displays the string with ServicesNotAcked]
	// ServicesNotAcked specifies services that have not ACKed yet in string
	// format after node is marked for removal.
	ServicesNotAcked *string `json:"servicesNotAcked,omitempty"`

	// Services not acked yet for removal of this entity.
	ServicesNotAckedList []string `json:"servicesNotAckedList"`

	// Specifies the version of the software running on the Node.
	SoftwareVersion *string `json:"softwareVersion,omitempty"`

	// Uptime of node.
	Uptime *string `json:"uptime,omitempty"`
}

// Validate validates this node status result
func (m *NodeStatusResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovalProgressList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovalReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nodeStatusResultTypeActiveOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNone","kDestroyCluster","kUpgradeCluster","kRestartCluster","kCreateCluster","kExpandCluster","kUpgradeNode","kRemoveNode","kAddDisks","kMarkDiskOffline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeStatusResultTypeActiveOperationPropEnum = append(nodeStatusResultTypeActiveOperationPropEnum, v)
	}
}

const (

	// NodeStatusResultActiveOperationKNone captures enum value "kNone"
	NodeStatusResultActiveOperationKNone string = "kNone"

	// NodeStatusResultActiveOperationKDestroyCluster captures enum value "kDestroyCluster"
	NodeStatusResultActiveOperationKDestroyCluster string = "kDestroyCluster"

	// NodeStatusResultActiveOperationKUpgradeCluster captures enum value "kUpgradeCluster"
	NodeStatusResultActiveOperationKUpgradeCluster string = "kUpgradeCluster"

	// NodeStatusResultActiveOperationKRestartCluster captures enum value "kRestartCluster"
	NodeStatusResultActiveOperationKRestartCluster string = "kRestartCluster"

	// NodeStatusResultActiveOperationKCreateCluster captures enum value "kCreateCluster"
	NodeStatusResultActiveOperationKCreateCluster string = "kCreateCluster"

	// NodeStatusResultActiveOperationKExpandCluster captures enum value "kExpandCluster"
	NodeStatusResultActiveOperationKExpandCluster string = "kExpandCluster"

	// NodeStatusResultActiveOperationKUpgradeNode captures enum value "kUpgradeNode"
	NodeStatusResultActiveOperationKUpgradeNode string = "kUpgradeNode"

	// NodeStatusResultActiveOperationKRemoveNode captures enum value "kRemoveNode"
	NodeStatusResultActiveOperationKRemoveNode string = "kRemoveNode"

	// NodeStatusResultActiveOperationKAddDisks captures enum value "kAddDisks"
	NodeStatusResultActiveOperationKAddDisks string = "kAddDisks"

	// NodeStatusResultActiveOperationKMarkDiskOffline captures enum value "kMarkDiskOffline"
	NodeStatusResultActiveOperationKMarkDiskOffline string = "kMarkDiskOffline"
)

// prop value enum
func (m *NodeStatusResult) validateActiveOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodeStatusResultTypeActiveOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NodeStatusResult) validateActiveOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveOperation) { // not required
		return nil
	}

	// value enum
	if err := m.validateActiveOperationEnum("activeOperation", "body", *m.ActiveOperation); err != nil {
		return err
	}

	return nil
}

func (m *NodeStatusResult) validateRemovalProgressList(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovalProgressList) { // not required
		return nil
	}

	for i := 0; i < len(m.RemovalProgressList); i++ {
		if swag.IsZero(m.RemovalProgressList[i]) { // not required
			continue
		}

		if m.RemovalProgressList[i] != nil {
			if err := m.RemovalProgressList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("removalProgressList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("removalProgressList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var nodeStatusResultTypeRemovalReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUnknown","kAutoHealthCheck","kUserGracefulRemoval","kUserAvoidAccess","kUserGracefulNodeRemoval","kUserRemoveDownNode"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeStatusResultTypeRemovalReasonPropEnum = append(nodeStatusResultTypeRemovalReasonPropEnum, v)
	}
}

const (

	// NodeStatusResultRemovalReasonKUnknown captures enum value "kUnknown"
	NodeStatusResultRemovalReasonKUnknown string = "kUnknown"

	// NodeStatusResultRemovalReasonKAutoHealthCheck captures enum value "kAutoHealthCheck"
	NodeStatusResultRemovalReasonKAutoHealthCheck string = "kAutoHealthCheck"

	// NodeStatusResultRemovalReasonKUserGracefulRemoval captures enum value "kUserGracefulRemoval"
	NodeStatusResultRemovalReasonKUserGracefulRemoval string = "kUserGracefulRemoval"

	// NodeStatusResultRemovalReasonKUserAvoidAccess captures enum value "kUserAvoidAccess"
	NodeStatusResultRemovalReasonKUserAvoidAccess string = "kUserAvoidAccess"

	// NodeStatusResultRemovalReasonKUserGracefulNodeRemoval captures enum value "kUserGracefulNodeRemoval"
	NodeStatusResultRemovalReasonKUserGracefulNodeRemoval string = "kUserGracefulNodeRemoval"

	// NodeStatusResultRemovalReasonKUserRemoveDownNode captures enum value "kUserRemoveDownNode"
	NodeStatusResultRemovalReasonKUserRemoveDownNode string = "kUserRemoveDownNode"
)

// prop value enum
func (m *NodeStatusResult) validateRemovalReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodeStatusResultTypeRemovalReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NodeStatusResult) validateRemovalReason(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovalReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemovalReasonEnum("removalReason", "body", *m.RemovalReason); err != nil {
		return err
	}

	return nil
}

func (m *NodeStatusResult) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this node status result based on the context it is used
func (m *NodeStatusResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRemovalProgressList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeStatusResult) contextValidateRemovalProgressList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemovalProgressList); i++ {

		if m.RemovalProgressList[i] != nil {

			if swag.IsZero(m.RemovalProgressList[i]) { // not required
				return nil
			}

			if err := m.RemovalProgressList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("removalProgressList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("removalProgressList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeStatusResult) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {

			if swag.IsZero(m.Services[i]) { // not required
				return nil
			}

			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeStatusResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeStatusResult) UnmarshalBinary(b []byte) error {
	var res NodeStatusResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
