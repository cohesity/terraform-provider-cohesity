// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataUptierJobParameters Data Uptier Job Parameters.
//
// swagger:model DataUptierJobParameters
type DataUptierJobParameters struct {

	// Specifies policy to select a file to uptier based on file access or
	// modification time.
	// eg. A file can be selected to uptier if it has been accessed in the
	// HotFileWindow or it is modified.
	// enum: kLastAccessed, kLastModified.
	// Specifies policy for file selection in data uptier jobs.
	// 'kLastAccessed': Uptier the files which are accessed for at least num_file_access in
	// hot_file_window.
	// 'kLastModified': Uptier the files which are modified.
	// Enum: ["kLastAccessed","kLastModified"]
	FileSelectionPolicy *string `json:"fileSelectionPolicy,omitempty"`

	// Gives the size criteria to be used for selecting the files to be uptiered
	// in bytes. The hot files that are smaller or greater than this size are
	// uptiered.
	FileSizeBytes *int64 `json:"fileSizeBytes,omitempty"`

	// Specifies policy to select a file to uptier based on its size.
	// eg. A file can be selected to uptier if its size is greater than or
	// smaller than the FileSizeBytes.
	// enum: kGreaterThan, kSmallerThan.
	// Specifies policy for file selection in data uptier jobs based on file size.
	// 'kGreaterThan': Uptier the files having size greater than file_size.
	// 'kSmallerThan': Uptier the files having size smaller than file_size.
	// Enum: ["kGreaterThan","kSmallerThan"]
	FileSizePolicy *string `json:"fileSizePolicy,omitempty"`

	// Identifies the hot files in the NAS source. Files that have been
	// modified in the last hot_file_window are uptiered. Applicable only when
	// file_select_policy is kLastAccessed.
	HotFileWindow *int64 `json:"hotFileWindow,omitempty"`

	// Specifies whether uptier all files found in the view by overriding
	// the FileUptierSelectionPolicy & FileUptierSizePolicy constraints.
	// Default value false.
	IncludeAllFiles *bool `json:"includeAllFiles,omitempty"`

	// Mount path where the Cohesity target view is mounted on NFS clients while
	// migrating the data.
	NfsMountPath *string `json:"nfsMountPath,omitempty"`

	// Number of times file must be accessed within hot_file_window in order to
	// qualify for uptiering. Applicable only when file_select_policy is
	// kLastAccessed.
	NumFileAccess *uint32 `json:"numFileAccess,omitempty"`

	// The source view name from which the data will be uptiered.
	SourceViewName *string `json:"sourceViewName,omitempty"`
}

// Validate validates this data uptier job parameters
func (m *DataUptierJobParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileSelectionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSizePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataUptierJobParametersTypeFileSelectionPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLastAccessed","kLastModified"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataUptierJobParametersTypeFileSelectionPolicyPropEnum = append(dataUptierJobParametersTypeFileSelectionPolicyPropEnum, v)
	}
}

const (

	// DataUptierJobParametersFileSelectionPolicyKLastAccessed captures enum value "kLastAccessed"
	DataUptierJobParametersFileSelectionPolicyKLastAccessed string = "kLastAccessed"

	// DataUptierJobParametersFileSelectionPolicyKLastModified captures enum value "kLastModified"
	DataUptierJobParametersFileSelectionPolicyKLastModified string = "kLastModified"
)

// prop value enum
func (m *DataUptierJobParameters) validateFileSelectionPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataUptierJobParametersTypeFileSelectionPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataUptierJobParameters) validateFileSelectionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.FileSelectionPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileSelectionPolicyEnum("fileSelectionPolicy", "body", *m.FileSelectionPolicy); err != nil {
		return err
	}

	return nil
}

var dataUptierJobParametersTypeFileSizePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kGreaterThan","kSmallerThan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataUptierJobParametersTypeFileSizePolicyPropEnum = append(dataUptierJobParametersTypeFileSizePolicyPropEnum, v)
	}
}

const (

	// DataUptierJobParametersFileSizePolicyKGreaterThan captures enum value "kGreaterThan"
	DataUptierJobParametersFileSizePolicyKGreaterThan string = "kGreaterThan"

	// DataUptierJobParametersFileSizePolicyKSmallerThan captures enum value "kSmallerThan"
	DataUptierJobParametersFileSizePolicyKSmallerThan string = "kSmallerThan"
)

// prop value enum
func (m *DataUptierJobParameters) validateFileSizePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataUptierJobParametersTypeFileSizePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataUptierJobParameters) validateFileSizePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.FileSizePolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileSizePolicyEnum("fileSizePolicy", "body", *m.FileSizePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data uptier job parameters based on context it is used
func (m *DataUptierJobParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataUptierJobParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataUptierJobParameters) UnmarshalBinary(b []byte) error {
	var res DataUptierJobParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
