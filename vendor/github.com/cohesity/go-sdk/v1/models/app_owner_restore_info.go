// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppOwnerRestoreInfo Message that captures information about an application's owner.
//
// swagger:model AppOwnerRestoreInfo
type AppOwnerRestoreInfo struct {

	// The information about the owner object and its job details.
	// This should be set to an object such as a VM.
	//
	// In the SQL and Oracle applications, this also specifies the
	// full/incremental snapshot to use for non-PIT restore operations, and
	// optionally PIT restore operations as well.
	OwnerObject *RestoreObject `json:"ownerObject,omitempty"`

	// The params to restore the owner object.
	OwnerRestoreParams *RestoreObjectParams `json:"ownerRestoreParams,omitempty"`

	// If this is set to true, then the owner object needs to be restored. The
	// restore options that follow only apply if this field is set to true. If
	// this field is not set, then the application objects will be restored to
	// the original owner from where they were backed up.
	PerformRestore *bool `json:"performRestore,omitempty"`
}

// Validate validates this app owner restore info
func (m *AppOwnerRestoreInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwnerObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerRestoreParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppOwnerRestoreInfo) validateOwnerObject(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerObject) { // not required
		return nil
	}

	if m.OwnerObject != nil {
		if err := m.OwnerObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerObject")
			}
			return err
		}
	}

	return nil
}

func (m *AppOwnerRestoreInfo) validateOwnerRestoreParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerRestoreParams) { // not required
		return nil
	}

	if m.OwnerRestoreParams != nil {
		if err := m.OwnerRestoreParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerRestoreParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app owner restore info based on the context it is used
func (m *AppOwnerRestoreInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOwnerObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerRestoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppOwnerRestoreInfo) contextValidateOwnerObject(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerObject != nil {

		if swag.IsZero(m.OwnerObject) { // not required
			return nil
		}

		if err := m.OwnerObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerObject")
			}
			return err
		}
	}

	return nil
}

func (m *AppOwnerRestoreInfo) contextValidateOwnerRestoreParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerRestoreParams != nil {

		if swag.IsZero(m.OwnerRestoreParams) { // not required
			return nil
		}

		if err := m.OwnerRestoreParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerRestoreParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppOwnerRestoreInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppOwnerRestoreInfo) UnmarshalBinary(b []byte) error {
	var res AppOwnerRestoreInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
