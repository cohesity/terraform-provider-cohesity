// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IOFilterState This represents the IOFilter state on cluster compute resource on VMWare.
//
// swagger:model IOFilterState
type IOFilterState struct {

	// filter status
	FilterStatus *IOFilterStateFilterStatus `json:"filterStatus,omitempty"`

	// Properties to be displayed on UI for manually creating storage policy.
	IoFilterProperties *IoFilterStoragePolicyProperties `json:"ioFilterProperties,omitempty"`

	// Set to kUpgradable when the IOFilter running on the cluster compute
	// resource can be upgraded.
	Upgradability *int32 `json:"upgradability,omitempty"`

	// Current filter version installed.
	Version *string `json:"version,omitempty"`
}

// Validate validates this i o filter state
func (m *IOFilterState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoFilterProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IOFilterState) validateFilterStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterStatus) { // not required
		return nil
	}

	if m.FilterStatus != nil {
		if err := m.FilterStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filterStatus")
			}
			return err
		}
	}

	return nil
}

func (m *IOFilterState) validateIoFilterProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.IoFilterProperties) { // not required
		return nil
	}

	if m.IoFilterProperties != nil {
		if err := m.IoFilterProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ioFilterProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ioFilterProperties")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this i o filter state based on the context it is used
func (m *IOFilterState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilterStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIoFilterProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IOFilterState) contextValidateFilterStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.FilterStatus != nil {

		if swag.IsZero(m.FilterStatus) { // not required
			return nil
		}

		if err := m.FilterStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filterStatus")
			}
			return err
		}
	}

	return nil
}

func (m *IOFilterState) contextValidateIoFilterProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.IoFilterProperties != nil {

		if swag.IsZero(m.IoFilterProperties) { // not required
			return nil
		}

		if err := m.IoFilterProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ioFilterProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ioFilterProperties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IOFilterState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IOFilterState) UnmarshalBinary(b []byte) error {
	var res IOFilterState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
