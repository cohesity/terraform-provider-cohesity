// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IopsTile IOPS Tile.
//
// IOPs information for dashboard.
//
// swagger:model IopsTile
type IopsTile struct {

	// Maximum Read IOs per second in last 24 hours.
	MaxReadIops *int64 `json:"maxReadIops,omitempty"`

	// Maximum number of Write IOs per second in last 24 hours.
	MaxWriteIops *int64 `json:"maxWriteIops,omitempty"`

	// Read IOs per second samples taken for the past 24 hours at 10 minutes
	// interval given in descending order of time.
	ReadIopsSamples []*Sample `json:"readIopsSamples"`

	// Write IOs per second samples taken for the past 24 hours at 10 minutes
	// interval given in descending order of time.
	WriteIopsSamples []*Sample `json:"writeIopsSamples"`
}

// Validate validates this iops tile
func (m *IopsTile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReadIopsSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWriteIopsSamples(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IopsTile) validateReadIopsSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.ReadIopsSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.ReadIopsSamples); i++ {
		if swag.IsZero(m.ReadIopsSamples[i]) { // not required
			continue
		}

		if m.ReadIopsSamples[i] != nil {
			if err := m.ReadIopsSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readIopsSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readIopsSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IopsTile) validateWriteIopsSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.WriteIopsSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.WriteIopsSamples); i++ {
		if swag.IsZero(m.WriteIopsSamples[i]) { // not required
			continue
		}

		if m.WriteIopsSamples[i] != nil {
			if err := m.WriteIopsSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("writeIopsSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("writeIopsSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this iops tile based on the context it is used
func (m *IopsTile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReadIopsSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWriteIopsSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IopsTile) contextValidateReadIopsSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReadIopsSamples); i++ {

		if m.ReadIopsSamples[i] != nil {

			if swag.IsZero(m.ReadIopsSamples[i]) { // not required
				return nil
			}

			if err := m.ReadIopsSamples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readIopsSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readIopsSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IopsTile) contextValidateWriteIopsSamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WriteIopsSamples); i++ {

		if m.WriteIopsSamples[i] != nil {

			if swag.IsZero(m.WriteIopsSamples[i]) { // not required
				return nil
			}

			if err := m.WriteIopsSamples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("writeIopsSamples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("writeIopsSamples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IopsTile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IopsTile) UnmarshalBinary(b []byte) error {
	var res IopsTile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
