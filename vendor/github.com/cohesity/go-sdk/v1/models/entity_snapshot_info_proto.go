// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntitySnapshotInfoProto Message that encapsulates information about the entity snapshot for any of
// the environments we support. Environment specific infos are defined as
// extensions to this proto.
//
// Each available extension is listed below along with the location of the
// proto file (relative to magneto/connectors) where it is defined.
//
// EntitySnapshotInfoProto       extension        Location                 Extn
// =============================================================================
// vmware::EntitySnapshotInfo::vmware_entity_snapshot_info
//
// vmware/vmware.proto       100
//
// hyperv::EntitySnapshotInfo::hyperv_vss_entity_snapshot_info
//
// hyperv/hyperv.proto       101
//
// =============================================================================
//
// swagger:model EntitySnapshotInfoProto
type EntitySnapshotInfoProto struct {

	// The id of the source entity.
	EntityID *int64 `json:"entityId,omitempty"`

	// Error (if any) encountered while taking the entity snapshot.
	Error *PrivateErrorProto `json:"error,omitempty"`

	// Id of the group snapshot task that took this storage snapshot.
	GroupSnapshotTaskID *int64 `json:"groupSnapshotTaskId,omitempty"`

	// Time (in usecs) at which snapshot of the entity was taken.
	SnapshotTimeUsecs *int64 `json:"snapshotTimeUsecs,omitempty"`

	// Captures the snapshot type for some objects such as VM.
	SnapshotType *ObjectSnapshotType `json:"snapshotType,omitempty"`
}

// Validate validates this entity snapshot info proto
func (m *EntitySnapshotInfoProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntitySnapshotInfoProto) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *EntitySnapshotInfoProto) validateSnapshotType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotType) { // not required
		return nil
	}

	if m.SnapshotType != nil {
		if err := m.SnapshotType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this entity snapshot info proto based on the context it is used
func (m *EntitySnapshotInfoProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntitySnapshotInfoProto) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *EntitySnapshotInfoProto) contextValidateSnapshotType(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotType != nil {

		if swag.IsZero(m.SnapshotType) { // not required
			return nil
		}

		if err := m.SnapshotType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntitySnapshotInfoProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntitySnapshotInfoProto) UnmarshalBinary(b []byte) error {
	var res EntitySnapshotInfoProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
