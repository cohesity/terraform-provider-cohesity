// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectedVMInfo Protected VM Information.
//
// Specifies the Protection Jobs information of a VM.
//
// swagger:model ProtectedVmInfo
type ProtectedVMInfo struct {

	// Specifies the list of Protection Jobs that protect the VM.
	ProtectionJobs []*ProtectionJob `json:"protectionJobs"`

	// Specifies the list of Policies that are used by the Protection Jobs.
	ProtectionPolicies []*ProtectionPolicy `json:"protectionPolicies"`

	// Specifies a VM that is being protected on the Cohesity Cluster.
	ProtectionSource *ProtectionSource `json:"protectionSource,omitempty"`

	// Specifies the protection stats of VM.
	Stats struct {
		ProtectionSummary
	} `json:"stats,omitempty"`
}

// Validate validates this protected Vm info
func (m *ProtectedVMInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectedVMInfo) validateProtectionJobs(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionJobs) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionJobs); i++ {
		if swag.IsZero(m.ProtectionJobs[i]) { // not required
			continue
		}

		if m.ProtectionJobs[i] != nil {
			if err := m.ProtectionJobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedVMInfo) validateProtectionPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionPolicies); i++ {
		if swag.IsZero(m.ProtectionPolicies[i]) { // not required
			continue
		}

		if m.ProtectionPolicies[i] != nil {
			if err := m.ProtectionPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedVMInfo) validateProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionSource) { // not required
		return nil
	}

	if m.ProtectionSource != nil {
		if err := m.ProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectedVMInfo) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this protected Vm info based on the context it is used
func (m *ProtectedVMInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtectionJobs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectedVMInfo) contextValidateProtectionJobs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionJobs); i++ {

		if m.ProtectionJobs[i] != nil {

			if swag.IsZero(m.ProtectionJobs[i]) { // not required
				return nil
			}

			if err := m.ProtectionJobs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedVMInfo) contextValidateProtectionPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionPolicies); i++ {

		if m.ProtectionPolicies[i] != nil {

			if swag.IsZero(m.ProtectionPolicies[i]) { // not required
				return nil
			}

			if err := m.ProtectionPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedVMInfo) contextValidateProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionSource != nil {

		if swag.IsZero(m.ProtectionSource) { // not required
			return nil
		}

		if err := m.ProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectedVMInfo) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectedVMInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectedVMInfo) UnmarshalBinary(b []byte) error {
	var res ProtectedVMInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
