// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CompareADObjectsResultADObject Represents an AD object record returned from object compare.
//
// swagger:model CompareADObjectsResult_ADObject
type CompareADObjectsResultADObject struct {

	// Array of AD attributes of AD object. This will contain distinct
	// attributes from source and destination objects.
	AttributeVec []*CompareADObjectsResultADAttribute `json:"attributeVec"`

	// Object guid from dest_server. If empty, compare could not find an AD
	// object corresponding to 'source_guid' even after looking up based
	// on source_guid, source DN or source SAM account name. The SAM is
	// applicable only for account type objects.
	DestGUID *string `json:"destGuid,omitempty"`

	// Number of attributes in destination object including system properties
	// compared. This count is useful for debugging.
	DestPropCount *uint32 `json:"destPropCount,omitempty"`

	// Number of attributes not compared due to
	// ADCompareOptionFlags.kExcludeSysProps. This count is useful for
	// debugging.
	ExcludedPropCount *uint32 `json:"excludedPropCount,omitempty"`

	// Number of AD attributes compared based on 'ADCompareOptionFlagsType'
	// flags and found to be mismatched. If this is non-zero, compared objects
	// are different. If this is 0 ann'dest_guid' is empty, then object is
	// missing.
	MismatchPropCount *uint32 `json:"mismatchPropCount,omitempty"`

	// Object result flags of type ADObjectFlags.
	ObjectFlags *uint32 `json:"objectFlags,omitempty"`

	// Object guid from $SourceServer. Guid string with or without '{}' braces.
	SourceGUID *string `json:"sourceGuid,omitempty"`

	// Number of attributes in source object including system properties
	// compared. This count is useful for debugging.
	SourcePropCount *uint32 `json:"sourcePropCount,omitempty"`

	// Error status for object. This status will be set to 'kNotFound' when
	// source_guid or dest_guid could not be resolved. To find out whether
	// destination object is missing, use flag
	// 'ADObjectFlags.kDestinationNotFound'.
	Status *ErrorProto `json:"status,omitempty"`
}

// Validate validates this compare a d objects result a d object
func (m *CompareADObjectsResultADObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareADObjectsResultADObject) validateAttributeVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AttributeVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeVec); i++ {
		if swag.IsZero(m.AttributeVec[i]) { // not required
			continue
		}

		if m.AttributeVec[i] != nil {
			if err := m.AttributeVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CompareADObjectsResultADObject) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this compare a d objects result a d object based on the context it is used
func (m *CompareADObjectsResultADObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributeVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareADObjectsResultADObject) contextValidateAttributeVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttributeVec); i++ {

		if m.AttributeVec[i] != nil {

			if swag.IsZero(m.AttributeVec[i]) { // not required
				return nil
			}

			if err := m.AttributeVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CompareADObjectsResultADObject) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompareADObjectsResultADObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompareADObjectsResultADObject) UnmarshalBinary(b []byte) error {
	var res CompareADObjectsResultADObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
