// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateClusterResult Create Cluster Result.
//
// Specifies the immediate result of a Cluster creation request. Contains
// validation results for each node. If the request is valid, it also
// indicates that the individual node bringup operation is started in
// the background.
//
// swagger:model CreateClusterResult
type CreateClusterResult struct {

	// Specifies the ID of the new Cluster.
	ClusterID *int64 `json:"clusterId,omitempty"`

	// Specifies the name of the new Cluster.
	ClusterName *string `json:"clusterName,omitempty"`

	// Specifies the software version of the new Cluster.
	ClusterSwVersion *string `json:"clusterSwVersion,omitempty"`

	// Specifies the status of the Nodes in the Cluster. All Nodes that
	// are accepted to the Cluster are appended to this list.
	HealthyNodes []*NodeStatus `json:"healthyNodes"`

	// Specifies the Incarnation ID of the new Cluster.
	IncarnationID *int64 `json:"incarnationId,omitempty"`

	// Specifies an optional message field.
	Message *string `json:"message,omitempty"`

	// Specifies the status of the Nodes in the Cluster. All Nodes that are
	// not accepted to the Cluster are appended to this list.
	UnhealthyNodes []*NodeStatus `json:"unhealthyNodes"`
}

// Validate validates this create cluster result
func (m *CreateClusterResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealthyNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnhealthyNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateClusterResult) validateHealthyNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthyNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.HealthyNodes); i++ {
		if swag.IsZero(m.HealthyNodes[i]) { // not required
			continue
		}

		if m.HealthyNodes[i] != nil {
			if err := m.HealthyNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("healthyNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("healthyNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateClusterResult) validateUnhealthyNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.UnhealthyNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.UnhealthyNodes); i++ {
		if swag.IsZero(m.UnhealthyNodes[i]) { // not required
			continue
		}

		if m.UnhealthyNodes[i] != nil {
			if err := m.UnhealthyNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unhealthyNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unhealthyNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create cluster result based on the context it is used
func (m *CreateClusterResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHealthyNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnhealthyNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateClusterResult) contextValidateHealthyNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HealthyNodes); i++ {

		if m.HealthyNodes[i] != nil {

			if swag.IsZero(m.HealthyNodes[i]) { // not required
				return nil
			}

			if err := m.HealthyNodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("healthyNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("healthyNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateClusterResult) contextValidateUnhealthyNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UnhealthyNodes); i++ {

		if m.UnhealthyNodes[i] != nil {

			if swag.IsZero(m.UnhealthyNodes[i]) { // not required
				return nil
			}

			if err := m.UnhealthyNodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unhealthyNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unhealthyNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateClusterResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateClusterResult) UnmarshalBinary(b []byte) error {
	var res CreateClusterResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
