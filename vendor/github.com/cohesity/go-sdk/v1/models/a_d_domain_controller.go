// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ADDomainController Represents an AD domain controller. All fields are case insensitive. If you
// change this message, update $ADDomainController in
// magneto/agents/windows/ad/scripts/ad_entityhierarchy.psm1 to maintain JSON
// compatibility.
//
// swagger:model ADDomainController
type ADDomainController struct {

	// ADAM database(s) present on this domain controller.
	AdamDbVec []*ADDatabaseInfo `json:"adamDbVec"`

	// Whether backing up this DC is supported or not due to system or
	// implementation limitations. If the value is false, reason
	// string below can be used to specify why its not supported. At least one
	// reason should be present when this value is false.
	BackupSupported *bool `json:"backupSupported,omitempty"`

	// Free form text for the reasons why backup is not supported for this AD DC.
	// This is valid only if backup_supported = false. The first element in
	// this vector should show the important reason why its not supported.
	// For example, if the db is dismounted for error cases, subsequent elements
	// may show missing NTDS.DIT file.
	BackupUnsupportedReasonVec []string `json:"backupUnsupportedReasonVec"`

	// Domain hosted on this DC.
	Domain *ADDomain `json:"domain,omitempty"`

	// List of FSMO roles assigned to this DC.
	FsmoRoleVec []string `json:"fsmoRoleVec"`

	// FQDN host name of the DC. Eg: TME-AD.tme.local
	HostName *string `json:"hostName,omitempty"`

	// Is this DC a Global Catalog Server? From powershell:
	// (Get-ADDomainController).IsGlobalCatalog.
	IsGlobalCatalog *bool `json:"isGlobalCatalog,omitempty"`

	// Is this DC hosting a ReadOnly copy of AD?
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// AD database (NTDS.DIT) properties.
	NtdsDb *ADDatabaseInfo `json:"ntdsDb,omitempty"`

	// AD Sysvol folder properties.
	SysvolFolder *ADSysvolInfo `json:"sysvolFolder,omitempty"`

	// UTC time offset of this DC in minutes. It can be + or -. Eg: -480 is
	// Pacific.
	Utcoffsetmin *int32 `json:"utcoffsetmin,omitempty"`

	// VSS writers that should be included by Magneto during backup of this AD DC
	// to get system state backup. This would include multiple writers such as
	// System Writers, NTDS, ADAM (if installed). The writers in this list should
	// be included with explicit components selection in
	// PrepareVSSSnapshotArg.VSSWriterAdditionalOption proto.
	// Note: AD does not support VSS writer involved restore. Its a copy of NTDS
	// directory in DSRM mode and then a reboot. So there is no VSS writers for
	// restore.
	VssBackupWritersVec []string `json:"vssBackupWritersVec"`
}

// Validate validates this a d domain controller
func (m *ADDomainController) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdamDbVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtdsDb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSysvolFolder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ADDomainController) validateAdamDbVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AdamDbVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AdamDbVec); i++ {
		if swag.IsZero(m.AdamDbVec[i]) { // not required
			continue
		}

		if m.AdamDbVec[i] != nil {
			if err := m.AdamDbVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adamDbVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adamDbVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ADDomainController) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if m.Domain != nil {
		if err := m.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *ADDomainController) validateNtdsDb(formats strfmt.Registry) error {
	if swag.IsZero(m.NtdsDb) { // not required
		return nil
	}

	if m.NtdsDb != nil {
		if err := m.NtdsDb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntdsDb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ntdsDb")
			}
			return err
		}
	}

	return nil
}

func (m *ADDomainController) validateSysvolFolder(formats strfmt.Registry) error {
	if swag.IsZero(m.SysvolFolder) { // not required
		return nil
	}

	if m.SysvolFolder != nil {
		if err := m.SysvolFolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sysvolFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sysvolFolder")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this a d domain controller based on the context it is used
func (m *ADDomainController) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdamDbVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtdsDb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSysvolFolder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ADDomainController) contextValidateAdamDbVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdamDbVec); i++ {

		if m.AdamDbVec[i] != nil {

			if swag.IsZero(m.AdamDbVec[i]) { // not required
				return nil
			}

			if err := m.AdamDbVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adamDbVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adamDbVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ADDomainController) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.Domain != nil {

		if swag.IsZero(m.Domain) { // not required
			return nil
		}

		if err := m.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *ADDomainController) contextValidateNtdsDb(ctx context.Context, formats strfmt.Registry) error {

	if m.NtdsDb != nil {

		if swag.IsZero(m.NtdsDb) { // not required
			return nil
		}

		if err := m.NtdsDb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntdsDb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ntdsDb")
			}
			return err
		}
	}

	return nil
}

func (m *ADDomainController) contextValidateSysvolFolder(ctx context.Context, formats strfmt.Registry) error {

	if m.SysvolFolder != nil {

		if swag.IsZero(m.SysvolFolder) { // not required
			return nil
		}

		if err := m.SysvolFolder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sysvolFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sysvolFolder")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ADDomainController) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ADDomainController) UnmarshalBinary(b []byte) error {
	var res ADDomainController
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
