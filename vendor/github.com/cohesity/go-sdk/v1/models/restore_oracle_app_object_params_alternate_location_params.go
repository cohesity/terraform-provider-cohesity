// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreOracleAppObjectParamsAlternateLocationParams For restoring to alternate location this message can not be empty and all
// the fields inside the message also can not be empty.
//
// swagger:model RestoreOracleAppObjectParams_AlternateLocationParams
type RestoreOracleAppObjectParamsAlternateLocationParams struct {

	// Base directory of Oracle at destination.
	// Example : /u01/app/oracle
	BaseDir *string `json:"baseDir,omitempty"`

	// Location to put the database files(datafiles, logfiles etc.).
	DatabaseFileDestination *string `json:"databaseFileDestination,omitempty"`

	// Home directory of Oracle at destination.
	// Example : /u01/app/oracle/product/11.2.0.3/db_1
	HomeDir *string `json:"homeDir,omitempty"`

	// The name of the Oracle database that we restore to.
	NewDatabaseName *string `json:"newDatabaseName,omitempty"`

	// Deprecated field
	// SID of new Oracle database.
	NewSidDeprecated *string `json:"newSidDeprecated,omitempty"`

	// SET NEWNAME clause user can specified. This allows user to have full
	// control on how their database files can be renamed during the alternate
	// restore workflow.
	NewnameClause *string `json:"newnameClause,omitempty"`

	// NOFILENAMECHECK option for RMAN Duplicate Database command
	Nofilenamecheck *bool `json:"nofilenamecheck,omitempty"`

	// Alternate DB config override.
	OracleDbConfig *OracleDBConfig `json:"oracleDbConfig,omitempty"`
}

// Validate validates this restore oracle app object params alternate location params
func (m *RestoreOracleAppObjectParamsAlternateLocationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOracleDbConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreOracleAppObjectParamsAlternateLocationParams) validateOracleDbConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleDbConfig) { // not required
		return nil
	}

	if m.OracleDbConfig != nil {
		if err := m.OracleDbConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleDbConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleDbConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore oracle app object params alternate location params based on the context it is used
func (m *RestoreOracleAppObjectParamsAlternateLocationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOracleDbConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreOracleAppObjectParamsAlternateLocationParams) contextValidateOracleDbConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleDbConfig != nil {

		if swag.IsZero(m.OracleDbConfig) { // not required
			return nil
		}

		if err := m.OracleDbConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleDbConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleDbConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreOracleAppObjectParamsAlternateLocationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreOracleAppObjectParamsAlternateLocationParams) UnmarshalBinary(b []byte) error {
	var res RestoreOracleAppObjectParamsAlternateLocationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
