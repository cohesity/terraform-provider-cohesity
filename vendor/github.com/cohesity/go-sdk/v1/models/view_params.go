// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ViewParams Contains information needed when creating or cloning a view.
//
// swagger:model ViewParams
type ViewParams struct {

	// List of external client subnets from where requests will be received for
	// the new view.
	ClientSubnetWhitelistVec []*ClusterConfigProtoSubnet `json:"clientSubnetWhitelistVec"`

	// Whether to disable NFS access in the new view.
	DisableNfsAccess *bool `json:"disableNfsAccess,omitempty"`

	// The protocol access override (if any) of the view.
	ProtocolAccessInfo *ViewIDMappingProtoProtocolAccessInfo `json:"protocolAccessInfo,omitempty"`

	// The qos mappings (if any) for the new view.
	QosMappingVec []*ClusterConfigProtoQoSMapping `json:"qosMappingVec"`

	// The storage policy override (if any) for the new view.
	StoragePolicyOverride *ClusterConfigProtoStoragePolicyOverride `json:"storagePolicyOverride,omitempty"`

	// The description to be applied to the new view.
	ViewDescription *string `json:"viewDescription,omitempty"`

	// This value 'worm_lock_expiry_usecs' if specified will be set on the cloned
	// view. This guarantees that the cloned view cannot be removed till the
	// specified timestamp has reached.
	// NOTE: If this is specified the clone view will be marked as immutable.
	WormLockExpiryUsecs *int64 `json:"wormLockExpiryUsecs,omitempty"`
}

// Validate validates this view params
func (m *ViewParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientSubnetWhitelistVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolAccessInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosMappingVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicyOverride(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewParams) validateClientSubnetWhitelistVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientSubnetWhitelistVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ClientSubnetWhitelistVec); i++ {
		if swag.IsZero(m.ClientSubnetWhitelistVec[i]) { // not required
			continue
		}

		if m.ClientSubnetWhitelistVec[i] != nil {
			if err := m.ClientSubnetWhitelistVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clientSubnetWhitelistVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clientSubnetWhitelistVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewParams) validateProtocolAccessInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtocolAccessInfo) { // not required
		return nil
	}

	if m.ProtocolAccessInfo != nil {
		if err := m.ProtocolAccessInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocolAccessInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protocolAccessInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ViewParams) validateQosMappingVec(formats strfmt.Registry) error {
	if swag.IsZero(m.QosMappingVec) { // not required
		return nil
	}

	for i := 0; i < len(m.QosMappingVec); i++ {
		if swag.IsZero(m.QosMappingVec[i]) { // not required
			continue
		}

		if m.QosMappingVec[i] != nil {
			if err := m.QosMappingVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("qosMappingVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("qosMappingVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewParams) validateStoragePolicyOverride(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePolicyOverride) { // not required
		return nil
	}

	if m.StoragePolicyOverride != nil {
		if err := m.StoragePolicyOverride.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storagePolicyOverride")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storagePolicyOverride")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this view params based on the context it is used
func (m *ViewParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientSubnetWhitelistVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtocolAccessInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQosMappingVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePolicyOverride(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewParams) contextValidateClientSubnetWhitelistVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClientSubnetWhitelistVec); i++ {

		if m.ClientSubnetWhitelistVec[i] != nil {

			if swag.IsZero(m.ClientSubnetWhitelistVec[i]) { // not required
				return nil
			}

			if err := m.ClientSubnetWhitelistVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clientSubnetWhitelistVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clientSubnetWhitelistVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewParams) contextValidateProtocolAccessInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtocolAccessInfo != nil {

		if swag.IsZero(m.ProtocolAccessInfo) { // not required
			return nil
		}

		if err := m.ProtocolAccessInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocolAccessInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protocolAccessInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ViewParams) contextValidateQosMappingVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QosMappingVec); i++ {

		if m.QosMappingVec[i] != nil {

			if swag.IsZero(m.QosMappingVec[i]) { // not required
				return nil
			}

			if err := m.QosMappingVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("qosMappingVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("qosMappingVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewParams) contextValidateStoragePolicyOverride(ctx context.Context, formats strfmt.Registry) error {

	if m.StoragePolicyOverride != nil {

		if swag.IsZero(m.StoragePolicyOverride) { // not required
			return nil
		}

		if err := m.StoragePolicyOverride.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storagePolicyOverride")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storagePolicyOverride")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewParams) UnmarshalBinary(b []byte) error {
	var res ViewParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
