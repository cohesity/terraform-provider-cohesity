// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoteHost Remote Host.
//
// Specifies the settings required to connect to a remote host.
//
// swagger:model RemoteHost
type RemoteHost struct {

	// Specifies the address (IP, hostname or FQDN) of the remote host
	// that will run the script.
	Address *string `json:"address,omitempty"`

	// Specifies the OS type of the remote host that will run the script.
	// Currently only 'kLinux' is supported.
	// 'kLinux' indicates the Linux operating system.
	// 'kWindows' indicates the Microsoft Windows operating system.
	// 'kAix' indicates the IBM AIX operating system.
	// 'kSolaris' indicates the Oracle Solaris operating system.
	// 'kSapHana' indicates the Sap Hana database system developed by SAP SE.
	// 'kSapOracle' indicates the Sap Oracle database system developed by SAP SE.
	// 'kCockroachDB' indicates the CockroachDB database system.
	// 'kMySQL' indicates the MySQL database system.
	// 'kSapSybase' indicates the SapSybase database system.
	// 'kSapMaxDB' indicates the SapMaxDB database system.
	// 'kSapSybaseIQ' indicates the SapSybaseIQ database system.
	// 'kDB2' indicates the DB2 database system.
	// 'kSapASE' indicates the SapASE database system.
	// 'kMariaDB' indicates the MariaDB database system.
	// 'kPostgreSQL' indicates the PostgreSQL database system.
	// 'kHPUX' indicates the HPUX database system.
	// 'kVOS' indicates the VOS database system.
	// 'kOther' indicates the other types of operating system.
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this remote host
func (m *RemoteHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var remoteHostTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remoteHostTypeTypePropEnum = append(remoteHostTypeTypePropEnum, v)
	}
}

const (

	// RemoteHostTypeKLinux captures enum value "kLinux"
	RemoteHostTypeKLinux string = "kLinux"

	// RemoteHostTypeKWindows captures enum value "kWindows"
	RemoteHostTypeKWindows string = "kWindows"

	// RemoteHostTypeKAix captures enum value "kAix"
	RemoteHostTypeKAix string = "kAix"

	// RemoteHostTypeKSolaris captures enum value "kSolaris"
	RemoteHostTypeKSolaris string = "kSolaris"

	// RemoteHostTypeKSapHana captures enum value "kSapHana"
	RemoteHostTypeKSapHana string = "kSapHana"

	// RemoteHostTypeKSapOracle captures enum value "kSapOracle"
	RemoteHostTypeKSapOracle string = "kSapOracle"

	// RemoteHostTypeKCockroachDB captures enum value "kCockroachDB"
	RemoteHostTypeKCockroachDB string = "kCockroachDB"

	// RemoteHostTypeKMySQL captures enum value "kMySQL"
	RemoteHostTypeKMySQL string = "kMySQL"

	// RemoteHostTypeKOther captures enum value "kOther"
	RemoteHostTypeKOther string = "kOther"

	// RemoteHostTypeKSapSybase captures enum value "kSapSybase"
	RemoteHostTypeKSapSybase string = "kSapSybase"

	// RemoteHostTypeKSapMaxDB captures enum value "kSapMaxDB"
	RemoteHostTypeKSapMaxDB string = "kSapMaxDB"

	// RemoteHostTypeKSapSybaseIQ captures enum value "kSapSybaseIQ"
	RemoteHostTypeKSapSybaseIQ string = "kSapSybaseIQ"

	// RemoteHostTypeKDB2 captures enum value "kDB2"
	RemoteHostTypeKDB2 string = "kDB2"

	// RemoteHostTypeKSapASE captures enum value "kSapASE"
	RemoteHostTypeKSapASE string = "kSapASE"

	// RemoteHostTypeKMariaDB captures enum value "kMariaDB"
	RemoteHostTypeKMariaDB string = "kMariaDB"

	// RemoteHostTypeKPostgreSQL captures enum value "kPostgreSQL"
	RemoteHostTypeKPostgreSQL string = "kPostgreSQL"

	// RemoteHostTypeKVOS captures enum value "kVOS"
	RemoteHostTypeKVOS string = "kVOS"

	// RemoteHostTypeKHPUX captures enum value "kHPUX"
	RemoteHostTypeKHPUX string = "kHPUX"
)

// prop value enum
func (m *RemoteHost) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remoteHostTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RemoteHost) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this remote host based on context it is used
func (m *RemoteHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RemoteHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteHost) UnmarshalBinary(b []byte) error {
	var res RemoteHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
