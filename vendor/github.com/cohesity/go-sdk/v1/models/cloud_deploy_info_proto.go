// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudDeployInfoProto Message that encapsulates information about cloud deploy tasks for any of
// the cloud environments we support. Environment specific infos are defined as
// extensions to this proto.
//
// Each available extension is listed below along with the location of the
// proto file (relative to magneto/connectors) where it is defined. The
// extension applies to both CloudDeployInfoProto as well as CloudDeployEntity.
//
// CloudDeployInfoProto extension                  Location           Extension
// =============================================================================
// aws::CloudDeployInfo::aws_cloud_deploy_info     aws/aws.proto            100
// azure::CloudDeployInfo::azure_cloud_deploy_info azure/azure.proto        101
// gcp::CloudDeployInfo::gcp_cloud_deploy_info     gcp/gcp.proto            102
// aws::ReplicationInfo::aws_replication_info      aws/aws.proto            103
// azure::ReplicationInfo::azure_replication_info  azure/azure.proto        104
// =============================================================================
//
// CloudDeployInfoProto.CloudDeployEntity extension  Location         Extension
// =============================================================================
// aws::CloudDeployEntityInfo::aws_cloud_deploy_entity_info
//
// aws/aws.proto          100
//
// vmware::RestoreEntityInfo::vmware_cloud_deploy_entity_info
//
// vmware/vmware.proto    101
//
// azure::CloudDeployEntityInfo::azure_cloud_deploy_entity_info
//
// azure/azure.proto      102
//
// gcp::CloudDeployEntityInfo::gcp_cloud_deploy_entity_info
//
// gcp/gcp.proto          103
//
// hyperv::RestoreEntityInfo::hyperv_cloud_deploy_entity_info
//
// hyperv/hyperv.proto    104
//
// aws::ReplicationEntityInfo::aws_replication_entity_info
//
// aws/aws.proto          105
//
// aws::ReplicationEntityInfo::azure_replication_entity_info
//
// azure/azure.proto      106
//
// =============================================================================
//
// swagger:model CloudDeployInfoProto
type CloudDeployInfoProto struct {

	// Contains the file paths and the information of the entities deployed to
	// cloud.
	CloudDeployEntityVec []*CloudDeployInfoProtoCloudDeployEntity `json:"cloudDeployEntityVec"`

	// Whether this Cloud deploy info is for incremental cloudspin.
	IsIncremental *bool `json:"isIncremental,omitempty"`

	// This will be filled by some restore ops to checkpoint their restore state.
	RestoreInfo *RestoreInfoProto `json:"restoreInfo,omitempty"`

	// Specifies the target type for the task. The field is only valid if the
	// task has got a permit.
	TargetType *int32 `json:"targetType,omitempty"`

	// Total bytes transferred to source.
	TotalBytesTransferredToSource *int64 `json:"totalBytesTransferredToSource,omitempty"`

	// The type of environment this cloud deploy info pertains to.
	Type *int32 `json:"type,omitempty"`

	// Warnings if any. These warnings will be propogated to the UI by master.
	Warnings []*ErrorProto `json:"warnings"`
}

// Validate validates this cloud deploy info proto
func (m *CloudDeployInfoProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudDeployEntityVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudDeployInfoProto) validateCloudDeployEntityVec(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudDeployEntityVec) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudDeployEntityVec); i++ {
		if swag.IsZero(m.CloudDeployEntityVec[i]) { // not required
			continue
		}

		if m.CloudDeployEntityVec[i] != nil {
			if err := m.CloudDeployEntityVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudDeployEntityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudDeployEntityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudDeployInfoProto) validateRestoreInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreInfo) { // not required
		return nil
	}

	if m.RestoreInfo != nil {
		if err := m.RestoreInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CloudDeployInfoProto) validateWarnings(formats strfmt.Registry) error {
	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	for i := 0; i < len(m.Warnings); i++ {
		if swag.IsZero(m.Warnings[i]) { // not required
			continue
		}

		if m.Warnings[i] != nil {
			if err := m.Warnings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cloud deploy info proto based on the context it is used
func (m *CloudDeployInfoProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudDeployEntityVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudDeployInfoProto) contextValidateCloudDeployEntityVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudDeployEntityVec); i++ {

		if m.CloudDeployEntityVec[i] != nil {

			if swag.IsZero(m.CloudDeployEntityVec[i]) { // not required
				return nil
			}

			if err := m.CloudDeployEntityVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudDeployEntityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudDeployEntityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudDeployInfoProto) contextValidateRestoreInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreInfo != nil {

		if swag.IsZero(m.RestoreInfo) { // not required
			return nil
		}

		if err := m.RestoreInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CloudDeployInfoProto) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Warnings); i++ {

		if m.Warnings[i] != nil {

			if swag.IsZero(m.Warnings[i]) { // not required
				return nil
			}

			if err := m.Warnings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudDeployInfoProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudDeployInfoProto) UnmarshalBinary(b []byte) error {
	var res CloudDeployInfoProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
