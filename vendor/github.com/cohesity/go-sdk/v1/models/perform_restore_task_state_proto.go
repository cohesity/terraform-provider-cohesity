// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PerformRestoreTaskStateProto perform restore task state proto
//
// swagger:model PerformRestoreTaskStateProto
type PerformRestoreTaskStateProto struct {

	// Denotes the target for action executor(Bridge / BridgeProxy) on which task
	// on slave should execute actions.
	ActionExecutorTargetType *int32 `json:"actionExecutorTargetType,omitempty"`

	// Information about the backup runs to lock during this restore.
	BackupRunLockVec []*BackupRunID `json:"backupRunLockVec"`

	// Contains basic information about the restore task.
	Base *RestoreTaskStateBaseProto `json:"base,omitempty"`

	// This is set if the clone operation has created any objects on the primary
	// environment and teardown operation is possible. UI will disable the
	// teardown button only if this is not set or set to false.
	// NOTE: This won't be reset if the teardown operation subsequently
	// completes as teardown state is managed separately.
	CanTeardown *bool `json:"canTeardown,omitempty"`

	// The path of the progress monitor for the task that is responsible for
	// creating the CDP hydrated view.
	CdpRestoreProgressMonitorTaskPath *string `json:"cdpRestoreProgressMonitorTaskPath,omitempty"`

	// The CDP restore helper task which creates the hydrated views for the
	// other restores.
	CdpRestoreTask *PerformRestoreTaskStateProto `json:"cdpRestoreTask,omitempty"`

	// The id of the task that will create the CDP hydrated view.
	CdpRestoreTaskID *int64 `json:"cdpRestoreTaskId,omitempty"`

	// The temporary view where the hydrated disks of the CDP restores are kept.
	CdpRestoreViewName *string `json:"cdpRestoreViewName,omitempty"`

	// The id of the child clone task triggered by refresh op.
	ChildCloneTaskID *int64 `json:"childCloneTaskId,omitempty"`

	// The following fields are used by clone refresh op. These will be present
	// only in case of refresh task op.
	//
	// The id of the child destroy clone task triggered by refresh op.
	ChildDestroyTaskID *int64 `json:"childDestroyTaskId,omitempty"`

	// The information about cloned backup view of an App [ ex. Oracle,SQL].
	// Currently this only contains the clone view information for Oracle,
	// which contains the vector of mount-paths where the cloned view got mounted
	// on the Oracle Host.
	CloneAppViewInfo *CloneAppViewInfoProto `json:"cloneAppViewInfo,omitempty"`

	// This is set only when the restore task is of type kDeployVMs. It contains
	// information about the kDeployVMs restore task that is populated by the
	// slave.
	CloudDeployInfo *CloudDeployInfoProto `json:"cloudDeployInfo,omitempty"`

	// If this is a CAv2 restore job, the path of the cloud domain the snapshot
	// belongs to.
	CloudDomainPrefix *string `json:"cloudDomainPrefix,omitempty"`

	// Whether to continue with the restore operation if restore of any object
	// fails.
	ContinueRestoreOnError *bool `json:"continueRestoreOnError,omitempty"`

	// True iff the target view needs to be created.
	CreateView *bool `json:"createView,omitempty"`

	// Custom Tags will be attached to each temporary and permanant entity
	// that will be created during this restore. Currently only being used
	// for AWS and restore task type - kRecoverVMs.
	CustomTagVec []*CustomTag `json:"customTagVec"`

	// Will contain the details of network used in transferring the data from
	// source account to Cohesity cluster.
	DataTransferInfo *DataTransferInfo `json:"dataTransferInfo,omitempty"`

	// Please refer to comments for the field
	// CreateRestoreTaskArg.datastore_entity_vec for more details.
	DatastoreEntityVec []*EntityProto `json:"datastoreEntityVec"`

	// This contains information regarding deploy vm to cloud task state. This is
	// set for restore type kConvertAndDeployVMs.
	DeployVmsToCloudTaskState *DeployVMsToCloudTaskStateProto `json:"deployVmsToCloudTaskState,omitempty"`

	// This field defines the download chat specific params for downloading
	// chat/post messages for a user/team/channel.
	DownloadChatsParams *DownloadChatsParams `json:"downloadChatsParams,omitempty"`

	// This field defines the encryption params for restore task of type
	// kRecoverVMs. For recovery to original location, this will not be set.
	EncryptionParams *EncryptionParams `json:"encryptionParams,omitempty"`

	// An optional folder entity where the restored objects are placed.
	//
	// Semantics for a restore task of type kCloneVMs: For a successful restore
	// task, it will be always set. For a failed task, it may or may not be set.
	//
	// Semantics for a restore task of type kRecoverVMs: Folder entity will be
	// set only if objects were restored to a different source.
	FolderEntity *EntityProto `json:"folderEntity,omitempty"`

	// The full view name (internal or external). This is composed of an optional
	// Cohesity specific prefix and the user provided view name.
	FullViewName *string `json:"fullViewName,omitempty"`

	// This is set to true if the vm-config.xml need to be copied in the target
	// view/folder.
	IncludeVMConfig *bool `json:"includeVmConfig,omitempty"`

	// Whether this task is a multi-stage restore task.
	IsMultiStageRestore *bool `json:"isMultiStageRestore,omitempty"`

	// This is set to true by the user in order to restore the objects via SAN
	// transport, as opposed to NBDSSL transport.
	// NOTE: Not all adapters support this method. Currently only VMware.
	LeverageSanTransport *bool `json:"leverageSanTransport,omitempty"`

	// Parameters needed for incremental restore.
	MirrorParams *MirrorParams `json:"mirrorParams,omitempty"`

	// This contains information regarding mount volumes task state. This is set
	// for restore type kMountVolumes.
	MountVolumesTaskState *MountVolumesTaskStateProto `json:"mountVolumesTaskState,omitempty"`

	// The id of the task that is created to restore multiple apps. For e.g.,
	// user requested to restore multiple databases or multiple AD objects.
	// When the user requests to restore 'n' objects, we will create 'n+1'
	// restore tasks with 'n' child tasks and one multi restore task. The
	// relationship is maintained by stamping the id of the multi restore task
	// on all the child tasks using this parameter.
	MultiRestoreTaskID *int64 `json:"multiRestoreTaskId,omitempty"`

	// This contains information regarding multi-stage restore task/options.
	//
	// Note that this information can be used inside a subtask created by a
	// multi-stage restore task, where the subtask itself is not a multi-stage
	// restore task.
	MultiStageRestoreTaskState *MultiStageRestoreTaskStateProto `json:"multiStageRestoreTaskState,omitempty"`

	// Parameters to connect to destination nosql parent entity.
	NosqlConnectParams *NoSQLConnectParams `json:"nosqlConnectParams,omitempty"`

	// Additional parameters for the recovery job to send to imanis server.
	NosqlRecoverJobParams *NoSQLRecoverJobParams `json:"nosqlRecoverJobParams,omitempty"`

	// An optional name to give to the restored object.
	ObjectNameDEPRECATED *string `json:"objectName_DEPRECATED,omitempty"`

	// Information on the exact set of objects being restored (along with
	// snapshots they are being recovered from). Even if the user wanted to
	// restore an entire job from the latest snapshot, this will have
	// individual objects and the exact snapshot they are being restored from.
	// If specified, this can only have leaf-level entities.
	Objects []*RestoreObject `json:"objects"`

	// Vector containing the relative task path of progress monitors of the
	// objects in the above field 'objects' to be restored. There is one to one
	// correspondence between elements in 'objects' and
	// 'objects_progress_monitor_task_paths'.
	//
	// Please note that this field will be set only after progress monitor is
	// created for this restore task.
	ObjectsProgressMonitorTaskPaths []string `json:"objectsProgressMonitorTaskPaths"`

	// If this a child restore task, this field will contain the id of the parent
	// restore job that spawned this task.
	//
	// List of env and action type for which this field is applicable are:
	// Acropolis: kRecoverVMs.
	ParentRestoreJobID *int64 `json:"parentRestoreJobId,omitempty"`

	// The id of the parent restore task if this is a restore sub-task.
	//
	// List of environments that use this field:
	// kSQL : Used for multi-stage SQL restore that supports a hot-standby.
	// kVMware: Used for multi-stage restore that supports a hot-standby.
	// kCassandra : Used for incremental restore.
	// kMongoDB : Used for incremental restore.
	//
	// This will also be used by refresh op to mark the new clone as internal
	// sub-task.
	ParentRestoreTaskID *int64 `json:"parentRestoreTaskId,omitempty"`

	// path prefix d e p r e c a t e d
	PathPrefixDEPRECATED *string `json:"pathPrefix_DEPRECATED,omitempty"`

	// If enabled, magneto physical file restore will be enabled via job
	// framework
	PhysicalFlrParallelRestore *bool `json:"physicalFlrParallelRestore,omitempty"`

	// If enabled, magneto physical file restore will be enabled via job
	// framework
	PhysicalFlrUseNewLockingMethod *bool `json:"physicalFlrUseNewLockingMethod,omitempty"`

	// The power state configuration to be applied to the restored object.
	// Please refer to comments for the field
	// CreateRestoreTaskArg.power_state_config for more details.
	PowerStateConfig *PowerStateConfigProto `json:"powerStateConfig,omitempty"`

	// This field is currently used by HyperV and VMWare.
	PreserveTags *bool `json:"preserveTags,omitempty"`

	// Root path of a Pulse task tracking the progress of the restore task.
	ProgressMonitorTaskPath *string `json:"progressMonitorTaskPath,omitempty"`

	// Contains information pertinent to a virtual disk recovery task. This is
	// set for restore type kRecoverDisks.
	RecoverDisksTaskState *RecoverDisksTaskStateProto `json:"recoverDisksTaskState,omitempty"`

	// Contains information pertinent to a volume recovery task. This is set
	// for restore type kRecoverVolumes.
	RecoverVolumesTaskState *RecoverVolumesTaskStateProto `json:"recoverVolumesTaskState,omitempty"`

	// The task id of a related restore task. For example, a SQL restore
	// operation may involve restoring a VM first and then restoring SQL
	// databases after that. So the corresponding VM restore and SQL database
	// restore tasks will be related, and they will each have their
	// 'related_restore_task_id' set to the id of the other task.
	RelatedRestoreTaskID *int64 `json:"relatedRestoreTaskId,omitempty"`

	// An optional parameter to specify how restored objects are renamed.
	// Please refer to comments for the field
	// CreateRestoreTaskArg.rename_restored_object_param for more details.
	RenameRestoredObjectParam *RenameObjectParamProto `json:"renameRestoredObjectParam,omitempty"`

	// An optional parameter to specify how restored vApps(kVirtualApp) are
	// renamed. Please refer to comments for the field
	// CreateRestoreTaskArg.rename_restored_vapp_param for more details.
	RenameRestoredVappParam *RenameObjectParamProto `json:"renameRestoredVappParam,omitempty"`

	// Sha1 checksum of the restore request. This is used to identify the
	// duplicate restore requests.
	RequestSha1Checksum []uint8 `json:"requestSha1Checksum"`

	// The resource pool entity where the restored objects will be attached.
	// Please refer to comments for the field
	// CreateRestoreTaskArg.resource_pool_entity for more details.
	ResourcePoolEntity *EntityProto `json:"resourcePoolEntity,omitempty"`

	// This field defines the Acropolis specific params for restore task of type
	// kRecoverVMs.
	RestoreAcropolisVmsParams *RestoreAcropolisVMsParams `json:"restoreAcropolisVmsParams,omitempty"`

	// This contains information about application restore task state. This is
	// set for restore types kRecoverApp/kCloneApp/kCloneRefreshApp.
	RestoreAppTaskState *RestoreAppTaskStateProto `json:"restoreAppTaskState,omitempty"`

	// This contains information regarding restore files task state. This is
	// set for restore type kRestoreFiles and kDownloadFiles.
	// Restore type kConvertToPst also sets this for download zip file path.
	RestoreFilesTaskState *RestoreFilesTaskStateProto `json:"restoreFilesTaskState,omitempty"`

	// This field defines the O365 groups specific params for restore task of
	// type kRecoverO365Groups.
	RestoreGroupsParams *RestoreO365GroupsParams `json:"restoreGroupsParams,omitempty"`

	// This field defines the HyperV specific params for restore tasks of type
	// kCloneVMs and kRecoverVMs.
	RestoreHypervVMParams *RestoreHyperVVMParams `json:"restoreHypervVmParams,omitempty"`

	// Contains information about this restore task that is populated by the
	// slave.
	RestoreInfo *RestoreInfoProto `json:"restoreInfo,omitempty"`

	// This field defines the Kubernetes specific params for restore task of
	// type kRecoverNamespaces.
	RestoreKubernetesNamespacesParams *RestoreKubernetesNamespacesParams `json:"restoreKubernetesNamespacesParams,omitempty"`

	// This field defines the KVM specific params for restore task of type
	// kRecoverVMs.
	RestoreKvmVmsParams *RestoreKVMVMsParams `json:"restoreKvmVmsParams,omitempty"`

	// This field defines the params for triggering M365 Backup Storage API
	// based recoveries. This is valid for kRecoverM365ExchangeCSM,
	// kRecoverM365OneDriveCSM & kRecoverM365SharepointCSM.
	RestoreM365CsmParams *RestoreM365CSMParams `json:"restoreM365CsmParams,omitempty"`

	// Indicates the customization options for the restore objects.
	RestoreObjectCustomizations []*RestoreObjectCustomization `json:"restoreObjectCustomizations"`

	// This field defines the one drive specific params for restore task of type
	// kRecoverO365Drive.
	RestoreOneDriveParams *RestoreOneDriveParams `json:"restoreOneDriveParams,omitempty"`

	// This field defines the O365 specific params for restore task of type
	// kRecoverEmails.
	RestoreOutlookParams *RestoreOutlookParams `json:"restoreOutlookParams,omitempty"`

	// An optional registered parent source to which objects are to be restored.
	// If not specified, objects are restored back to the original source that
	// was managing the objects.
	// If 'restored_to_different_source' is set to true, then this field must be
	// specified.
	RestoreParentSource *EntityProto `json:"restoreParentSource,omitempty"`

	// This field defines the O365 Public Folders specific params for restore
	// task of type kRecoverO365PublicFolders.
	RestorePublicFoldersParams *RestoreO365PublicFoldersParams `json:"restorePublicFoldersParams,omitempty"`

	// This field defines the S3 specific params for restore task of type
	// kRecoverS3Buckets & kRecoverS3Objects.
	RestoreS3Params *RestoreS3Params `json:"restoreS3Params,omitempty"`

	// This field defines the SAN specific params for restore task. For example
	// storage pool for Ibm FlashSystem environment.
	RestoreSanParams *RestoreSanParams `json:"restoreSanParams,omitempty"`

	// This field defines the O365 site specific params for restore task of type
	// kRecoverSites.
	RestoreSiteParams *RestoreSiteParams `json:"restoreSiteParams,omitempty"`

	// This contains information regarding standby restore task state. This is
	// currently only set for kRecoverVMs restore type for kVMware environment.
	RestoreStandbyTaskState *RestoreStandbyTaskStateProto `json:"restoreStandbyTaskState,omitempty"`

	// Inside Magneto, these are represented as regular restore tasks with their
	// own PerformRestoreTaskStateProto. Each restore sub-task will have its
	// parent_restore_task_id field set.
	//
	// List of environments that use this field:
	// kSQL : Used for multi-stage SQL restore that supports a hot-standby.
	// kVMware : User for standby restore to store CDPLogApplyRestoreOp id.
	// kOracle : Used for Instant restore for clone.
	// kCassandra : Used for incremental restore.
	// kMongoDB : Used for incremental restore.
	RestoreSubTaskVec []int64 `json:"restoreSubTaskVec"`

	// Entity Id of object inside which restored entities will be created.
	RestoreTargetEntityID *int64 `json:"restoreTargetEntityId,omitempty"`

	// Whether the restore task is purged. During WAL recovery, purged restore
	// tasks are ignored.
	RestoreTaskPurged *bool `json:"restoreTaskPurged,omitempty"`

	// This field defines team specific params for restore task of type
	// kRecoverO365Teams.
	RestoreTeamsParams *RestoreO365TeamsParams `json:"restoreTeamsParams,omitempty"`

	// The datastore entity where the object's files are restored to. This entity
	// corresponds to the datastore created for the Cohesity view on the primary
	// source by the restore task.
	//
	// Please note that this field will be set only for the restore task of type
	// kCloneVMs.
	RestoreViewDatastoreEntity *EntityProto `json:"restoreViewDatastoreEntity,omitempty"`

	// This field defines the VMware specific params for restore tasks of type
	// kCloneVMs and kRecoverVMs.
	RestoreVmwareVMParams *RestoreVMwareVMParams `json:"restoreVmwareVmParams,omitempty"`

	// The storage domain id to which the data is restored.
	//
	// E.g.: For folder download tasks, this denotes the storage domain (view
	// box) id in which the zip file created by yoda is stored - in case of CAD
	// jobs this could be the auxiliary view box corresponding to the CAD view
	// box, and for regular jobs, this is most likely same as the view box used
	// by that job.
	RestoredDataStorageDomainID *int64 `json:"restoredDataStorageDomainId,omitempty"`

	// The network configuration to be applied to the restored object.
	// Please refer to comments for the field
	// CreateRestoreTaskArg.restored_objects_network_config for more details.
	RestoredObjectsNetworkConfig *RestoredObjectNetworkConfigProto `json:"restoredObjectsNetworkConfig,omitempty"`

	// Whether restore is being performed to a different parent source.
	RestoredToDifferentSource *bool `json:"restoredToDifferentSource,omitempty"`

	// The path of the progress monitor for the task that is responsible for
	// retrieving the objects from the archive.
	RetrieveArchiveProgressMonitorTaskPath *string `json:"retrieveArchiveProgressMonitorTaskPath,omitempty"`

	// The stub view created by Icebox corresponding to the archive. The stub
	// view is used to selectively retrieve files and folders.
	RetrieveArchiveStubViewName *string `json:"retrieveArchiveStubViewName,omitempty"`

	// The uid of the tasks that will retrieve the objects from the archive.
	// Typically we only retrieve one snapshot for an enity but for point in time
	// restores for SQL/Oracle database, we may need to retrieve multiple
	// snapshots typically one full, and few logs. Hence we may need multiple
	// uids to start retrieval task.
	RetrieveArchiveTaskUIDVec []*UniversalIDProto `json:"retrieveArchiveTaskUidVec"`

	// Proto that contains all the information about the retrieve archive task.
	// Typically we only retrieve one snapshot for an enity but for point in time
	// restores for SQL/Oracle database, we may need to retrieve multiple
	// snapshots typically one full, and few logs. As we may start the multiple
	// retrieval tasks, we need vector of RetrieveArchiveTaskStateProto for
	// storing information of retrieved archive tasks.
	RetrieveArchiveTaskVec []*RetrieveArchiveTaskStateProto `json:"retrieveArchiveTaskVec"`

	// The temporary view where the entities that have been retrieved from an
	// archive have been placed in by Icebox.
	RetrieveArchiveViewName *string `json:"retrieveArchiveViewName,omitempty"`

	// In case of restore job with multi-vm multi-datastore this field denotes
	// the specific datastore index in datastore_entity_vec to be selected for
	// the task.
	// Not going for specific datastore allocation in datastore_entity_vec so
	// that we have required information in case of extensibility for task level
	// retries with different datastore
	SelectedDatastoreIdx *int64 `json:"selectedDatastoreIdx,omitempty"`

	// Parameters to connect to destination sfdc parent entity.
	SfdcConnectParams *RegisteredEntitySfdcParams `json:"sfdcConnectParams,omitempty"`

	// This field defines the sfdc specific params for restore task of type
	// kRecoverSfdc.
	SfdcRecoverJobParams *SfdcRecoverJobParams `json:"sfdcRecoverJobParams,omitempty"`

	// The id of restore task which has to completed prior to this restore
	// task.
	ShouldFinishFirstTaskID *int64 `json:"shouldFinishFirstTaskId,omitempty"`

	// Whether Magneto should use the 'retrieve_archive_stub_view' above for
	// restore without cloning it. We are currently setting it for Direct archive
	// restores using stub views.
	SkipCloningRetrieveArchiveView *bool `json:"skipCloningRetrieveArchiveView,omitempty"`

	// This flag can be set to true to just create the image and not deploy the
	// VM. This flag is set to true during the DR operation that is invoked via
	// runbooks, the creation of image(AMI in case of AWS) and snapshots of the
	// data disk is achieved by invoking a restore of type kConvertAndDeployVMs
	// and orchestration of the VMs is achieved by runbooks.
	SkipImageDeploy *bool `json:"skipImageDeploy,omitempty"`

	// Whether to skip Rigel for restore or not. This field is applicable only
	// for DMaaS. This field is currently being used in DRaaS workflows only.
	SkipRigelForRestore *bool `json:"skipRigelForRestore,omitempty"`

	// Relative directory inside the stub view that corresponds with the archive.
	StubViewRelativeDirName *string `json:"stubViewRelativeDirName,omitempty"`

	// This field defines the uda specific params for restore task of type
	// kRecoverUda.
	UdaRecoverJobParams *UdaRecoverJobParams `json:"udaRecoverJobParams,omitempty"`

	// Params to be passed to Icebox while restoring data from an archive.
	VaultRestoreParams *VaultParamsRestoreParams `json:"vaultRestoreParams,omitempty"`

	// VApp config for the restored object.
	VcdConfig *RestoredObjectVCDConfigProto `json:"vcdConfig,omitempty"`

	// This field is applicable for VCD type recovery. It defines the compatible
	// datastores for recovery to alternate location.
	// This field is inferred using the storage profile in
	// restore_vmware_vm_params below.
	VcdStorageProfileDatastoreMorefVec []string `json:"vcdStorageProfileDatastoreMorefVec"`

	// The view box id to which 'view_name' belongs to. In case the restore task
	// corresponds to a backup job, this view box corresponds to the view box of
	// the backup job.
	//
	// Reason for ignoring tenant migration check is that the view box is
	// expected to change from source to destination cluster.
	ViewBoxID *int64 `json:"viewBoxId,omitempty"`

	// The view name as provided by the user for this restore operation.
	ViewNameDEPRECATED *string `json:"viewName_DEPRECATED,omitempty"`

	// The params to use when cloning the view.
	ViewParams *ViewParams `json:"viewParams,omitempty"`

	// Whether VM restore should reuse the cdp restore view while VM recovery.
	VMRestoreReuseCdpView *bool `json:"vmRestoreReuseCdpView,omitempty"`

	// Information regarding volumes that are required for the restore task. This
	// is populated for restore files and mount virtual disk ops.
	VolumeInfoVec []*VolumeInfo `json:"volumeInfoVec"`
}

// Validate validates this perform restore task state proto
func (m *PerformRestoreTaskStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupRunLockVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdpRestoreTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloneAppViewInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudDeployInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomTagVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataTransferInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatastoreEntityVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployVmsToCloudTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadChatsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolderEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMirrorParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountVolumesTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultiStageRestoreTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNosqlConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNosqlRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerStateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverDisksTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverVolumesTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredObjectParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredVappParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePoolEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreAcropolisVmsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreAppTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreFilesTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreGroupsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreHypervVMParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreKubernetesNamespacesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreKvmVmsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreM365CsmParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreObjectCustomizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreOneDriveParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreOutlookParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreParentSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestorePublicFoldersParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreS3Params(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreSanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreSiteParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreStandbyTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreTeamsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreViewDatastoreEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreVmwareVMParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredObjectsNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetrieveArchiveTaskUIDVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetrieveArchiveTaskVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultRestoreParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformRestoreTaskStateProto) validateBackupRunLockVec(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRunLockVec) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupRunLockVec); i++ {
		if swag.IsZero(m.BackupRunLockVec[i]) { // not required
			continue
		}

		if m.BackupRunLockVec[i] != nil {
			if err := m.BackupRunLockVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupRunLockVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupRunLockVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateBase(formats strfmt.Registry) error {
	if swag.IsZero(m.Base) { // not required
		return nil
	}

	if m.Base != nil {
		if err := m.Base.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateCdpRestoreTask(formats strfmt.Registry) error {
	if swag.IsZero(m.CdpRestoreTask) { // not required
		return nil
	}

	if m.CdpRestoreTask != nil {
		if err := m.CdpRestoreTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpRestoreTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpRestoreTask")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateCloneAppViewInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CloneAppViewInfo) { // not required
		return nil
	}

	if m.CloneAppViewInfo != nil {
		if err := m.CloneAppViewInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneAppViewInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloneAppViewInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateCloudDeployInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudDeployInfo) { // not required
		return nil
	}

	if m.CloudDeployInfo != nil {
		if err := m.CloudDeployInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDeployInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudDeployInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateCustomTagVec(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomTagVec) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomTagVec); i++ {
		if swag.IsZero(m.CustomTagVec[i]) { // not required
			continue
		}

		if m.CustomTagVec[i] != nil {
			if err := m.CustomTagVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateDataTransferInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DataTransferInfo) { // not required
		return nil
	}

	if m.DataTransferInfo != nil {
		if err := m.DataTransferInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataTransferInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataTransferInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateDatastoreEntityVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreEntityVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DatastoreEntityVec); i++ {
		if swag.IsZero(m.DatastoreEntityVec[i]) { // not required
			continue
		}

		if m.DatastoreEntityVec[i] != nil {
			if err := m.DatastoreEntityVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datastoreEntityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datastoreEntityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateDeployVmsToCloudTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToCloudTaskState) { // not required
		return nil
	}

	if m.DeployVmsToCloudTaskState != nil {
		if err := m.DeployVmsToCloudTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateDownloadChatsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DownloadChatsParams) { // not required
		return nil
	}

	if m.DownloadChatsParams != nil {
		if err := m.DownloadChatsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadChatsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadChatsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateEncryptionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionParams) { // not required
		return nil
	}

	if m.EncryptionParams != nil {
		if err := m.EncryptionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateFolderEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.FolderEntity) { // not required
		return nil
	}

	if m.FolderEntity != nil {
		if err := m.FolderEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("folderEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("folderEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateMirrorParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MirrorParams) { // not required
		return nil
	}

	if m.MirrorParams != nil {
		if err := m.MirrorParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mirrorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mirrorParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateMountVolumesTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.MountVolumesTaskState) { // not required
		return nil
	}

	if m.MountVolumesTaskState != nil {
		if err := m.MountVolumesTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountVolumesTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountVolumesTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateMultiStageRestoreTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.MultiStageRestoreTaskState) { // not required
		return nil
	}

	if m.MultiStageRestoreTaskState != nil {
		if err := m.MultiStageRestoreTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiStageRestoreTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multiStageRestoreTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateNosqlConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NosqlConnectParams) { // not required
		return nil
	}

	if m.NosqlConnectParams != nil {
		if err := m.NosqlConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateNosqlRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NosqlRecoverJobParams) { // not required
		return nil
	}

	if m.NosqlRecoverJobParams != nil {
		if err := m.NosqlRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validatePowerStateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerStateConfig) { // not required
		return nil
	}

	if m.PowerStateConfig != nil {
		if err := m.PowerStateConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerStateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerStateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRecoverDisksTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverDisksTaskState) { // not required
		return nil
	}

	if m.RecoverDisksTaskState != nil {
		if err := m.RecoverDisksTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverDisksTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverDisksTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRecoverVolumesTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverVolumesTaskState) { // not required
		return nil
	}

	if m.RecoverVolumesTaskState != nil {
		if err := m.RecoverVolumesTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVolumesTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVolumesTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRenameRestoredObjectParam(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredObjectParam) { // not required
		return nil
	}

	if m.RenameRestoredObjectParam != nil {
		if err := m.RenameRestoredObjectParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRenameRestoredVappParam(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredVappParam) { // not required
		return nil
	}

	if m.RenameRestoredVappParam != nil {
		if err := m.RenameRestoredVappParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredVappParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredVappParam")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateResourcePoolEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePoolEntity) { // not required
		return nil
	}

	if m.ResourcePoolEntity != nil {
		if err := m.ResourcePoolEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreAcropolisVmsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreAcropolisVmsParams) { // not required
		return nil
	}

	if m.RestoreAcropolisVmsParams != nil {
		if err := m.RestoreAcropolisVmsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAcropolisVmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAcropolisVmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreAppTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreAppTaskState) { // not required
		return nil
	}

	if m.RestoreAppTaskState != nil {
		if err := m.RestoreAppTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAppTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAppTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreFilesTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreFilesTaskState) { // not required
		return nil
	}

	if m.RestoreFilesTaskState != nil {
		if err := m.RestoreFilesTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreFilesTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreFilesTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreGroupsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreGroupsParams) { // not required
		return nil
	}

	if m.RestoreGroupsParams != nil {
		if err := m.RestoreGroupsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreGroupsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreGroupsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreHypervVMParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreHypervVMParams) { // not required
		return nil
	}

	if m.RestoreHypervVMParams != nil {
		if err := m.RestoreHypervVMParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreHypervVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreHypervVmParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreInfo) { // not required
		return nil
	}

	if m.RestoreInfo != nil {
		if err := m.RestoreInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreKubernetesNamespacesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreKubernetesNamespacesParams) { // not required
		return nil
	}

	if m.RestoreKubernetesNamespacesParams != nil {
		if err := m.RestoreKubernetesNamespacesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreKubernetesNamespacesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreKubernetesNamespacesParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreKvmVmsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreKvmVmsParams) { // not required
		return nil
	}

	if m.RestoreKvmVmsParams != nil {
		if err := m.RestoreKvmVmsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreKvmVmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreKvmVmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreM365CsmParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreM365CsmParams) { // not required
		return nil
	}

	if m.RestoreM365CsmParams != nil {
		if err := m.RestoreM365CsmParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreM365CsmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreM365CsmParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreObjectCustomizations(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreObjectCustomizations) { // not required
		return nil
	}

	for i := 0; i < len(m.RestoreObjectCustomizations); i++ {
		if swag.IsZero(m.RestoreObjectCustomizations[i]) { // not required
			continue
		}

		if m.RestoreObjectCustomizations[i] != nil {
			if err := m.RestoreObjectCustomizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjectCustomizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjectCustomizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreOneDriveParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreOneDriveParams) { // not required
		return nil
	}

	if m.RestoreOneDriveParams != nil {
		if err := m.RestoreOneDriveParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreOneDriveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreOneDriveParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreOutlookParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreOutlookParams) { // not required
		return nil
	}

	if m.RestoreOutlookParams != nil {
		if err := m.RestoreOutlookParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreOutlookParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreOutlookParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreParentSource(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreParentSource) { // not required
		return nil
	}

	if m.RestoreParentSource != nil {
		if err := m.RestoreParentSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParentSource")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestorePublicFoldersParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestorePublicFoldersParams) { // not required
		return nil
	}

	if m.RestorePublicFoldersParams != nil {
		if err := m.RestorePublicFoldersParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restorePublicFoldersParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restorePublicFoldersParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreS3Params(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreS3Params) { // not required
		return nil
	}

	if m.RestoreS3Params != nil {
		if err := m.RestoreS3Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreS3Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreS3Params")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreSanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreSanParams) { // not required
		return nil
	}

	if m.RestoreSanParams != nil {
		if err := m.RestoreSanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreSanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreSanParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreSiteParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreSiteParams) { // not required
		return nil
	}

	if m.RestoreSiteParams != nil {
		if err := m.RestoreSiteParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreSiteParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreSiteParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreStandbyTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreStandbyTaskState) { // not required
		return nil
	}

	if m.RestoreStandbyTaskState != nil {
		if err := m.RestoreStandbyTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreStandbyTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreStandbyTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreTeamsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreTeamsParams) { // not required
		return nil
	}

	if m.RestoreTeamsParams != nil {
		if err := m.RestoreTeamsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreTeamsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreTeamsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreViewDatastoreEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreViewDatastoreEntity) { // not required
		return nil
	}

	if m.RestoreViewDatastoreEntity != nil {
		if err := m.RestoreViewDatastoreEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreViewDatastoreEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreViewDatastoreEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoreVmwareVMParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreVmwareVMParams) { // not required
		return nil
	}

	if m.RestoreVmwareVMParams != nil {
		if err := m.RestoreVmwareVMParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVmwareVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVmwareVmParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRestoredObjectsNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredObjectsNetworkConfig) { // not required
		return nil
	}

	if m.RestoredObjectsNetworkConfig != nil {
		if err := m.RestoredObjectsNetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredObjectsNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredObjectsNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRetrieveArchiveTaskUIDVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RetrieveArchiveTaskUIDVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RetrieveArchiveTaskUIDVec); i++ {
		if swag.IsZero(m.RetrieveArchiveTaskUIDVec[i]) { // not required
			continue
		}

		if m.RetrieveArchiveTaskUIDVec[i] != nil {
			if err := m.RetrieveArchiveTaskUIDVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retrieveArchiveTaskUidVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("retrieveArchiveTaskUidVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateRetrieveArchiveTaskVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RetrieveArchiveTaskVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RetrieveArchiveTaskVec); i++ {
		if swag.IsZero(m.RetrieveArchiveTaskVec[i]) { // not required
			continue
		}

		if m.RetrieveArchiveTaskVec[i] != nil {
			if err := m.RetrieveArchiveTaskVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retrieveArchiveTaskVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("retrieveArchiveTaskVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateSfdcConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcConnectParams) { // not required
		return nil
	}

	if m.SfdcConnectParams != nil {
		if err := m.SfdcConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateSfdcRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcRecoverJobParams) { // not required
		return nil
	}

	if m.SfdcRecoverJobParams != nil {
		if err := m.SfdcRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateUdaRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaRecoverJobParams) { // not required
		return nil
	}

	if m.UdaRecoverJobParams != nil {
		if err := m.UdaRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateVaultRestoreParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultRestoreParams) { // not required
		return nil
	}

	if m.VaultRestoreParams != nil {
		if err := m.VaultRestoreParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vaultRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vaultRestoreParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateVcdConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdConfig) { // not required
		return nil
	}

	if m.VcdConfig != nil {
		if err := m.VcdConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateViewParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewParams) { // not required
		return nil
	}

	if m.ViewParams != nil {
		if err := m.ViewParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) validateVolumeInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeInfoVec); i++ {
		if swag.IsZero(m.VolumeInfoVec[i]) { // not required
			continue
		}

		if m.VolumeInfoVec[i] != nil {
			if err := m.VolumeInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this perform restore task state proto based on the context it is used
func (m *PerformRestoreTaskStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupRunLockVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCdpRestoreTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloneAppViewInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudDeployInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomTagVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataTransferInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatastoreEntityVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployVmsToCloudTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDownloadChatsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFolderEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMirrorParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountVolumesTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMultiStageRestoreTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNosqlConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNosqlRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerStateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverDisksTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverVolumesTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredObjectParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredVappParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourcePoolEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreAcropolisVmsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreAppTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreFilesTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreGroupsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreHypervVMParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreKubernetesNamespacesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreKvmVmsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreM365CsmParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreObjectCustomizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreOneDriveParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreOutlookParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreParentSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestorePublicFoldersParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreS3Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreSanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreSiteParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreStandbyTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreTeamsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreViewDatastoreEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreVmwareVMParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredObjectsNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetrieveArchiveTaskUIDVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetrieveArchiveTaskVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVaultRestoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateBackupRunLockVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupRunLockVec); i++ {

		if m.BackupRunLockVec[i] != nil {

			if swag.IsZero(m.BackupRunLockVec[i]) { // not required
				return nil
			}

			if err := m.BackupRunLockVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupRunLockVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupRunLockVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateBase(ctx context.Context, formats strfmt.Registry) error {

	if m.Base != nil {

		if swag.IsZero(m.Base) { // not required
			return nil
		}

		if err := m.Base.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateCdpRestoreTask(ctx context.Context, formats strfmt.Registry) error {

	if m.CdpRestoreTask != nil {

		if swag.IsZero(m.CdpRestoreTask) { // not required
			return nil
		}

		if err := m.CdpRestoreTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpRestoreTask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpRestoreTask")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateCloneAppViewInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CloneAppViewInfo != nil {

		if swag.IsZero(m.CloneAppViewInfo) { // not required
			return nil
		}

		if err := m.CloneAppViewInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneAppViewInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloneAppViewInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateCloudDeployInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudDeployInfo != nil {

		if swag.IsZero(m.CloudDeployInfo) { // not required
			return nil
		}

		if err := m.CloudDeployInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDeployInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudDeployInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateCustomTagVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomTagVec); i++ {

		if m.CustomTagVec[i] != nil {

			if swag.IsZero(m.CustomTagVec[i]) { // not required
				return nil
			}

			if err := m.CustomTagVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateDataTransferInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DataTransferInfo != nil {

		if swag.IsZero(m.DataTransferInfo) { // not required
			return nil
		}

		if err := m.DataTransferInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataTransferInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataTransferInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateDatastoreEntityVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DatastoreEntityVec); i++ {

		if m.DatastoreEntityVec[i] != nil {

			if swag.IsZero(m.DatastoreEntityVec[i]) { // not required
				return nil
			}

			if err := m.DatastoreEntityVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datastoreEntityVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datastoreEntityVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateDeployVmsToCloudTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToCloudTaskState != nil {

		if swag.IsZero(m.DeployVmsToCloudTaskState) { // not required
			return nil
		}

		if err := m.DeployVmsToCloudTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateDownloadChatsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DownloadChatsParams != nil {

		if swag.IsZero(m.DownloadChatsParams) { // not required
			return nil
		}

		if err := m.DownloadChatsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadChatsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadChatsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateEncryptionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionParams != nil {

		if swag.IsZero(m.EncryptionParams) { // not required
			return nil
		}

		if err := m.EncryptionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateFolderEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.FolderEntity != nil {

		if swag.IsZero(m.FolderEntity) { // not required
			return nil
		}

		if err := m.FolderEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("folderEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("folderEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateMirrorParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MirrorParams != nil {

		if swag.IsZero(m.MirrorParams) { // not required
			return nil
		}

		if err := m.MirrorParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mirrorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mirrorParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateMountVolumesTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.MountVolumesTaskState != nil {

		if swag.IsZero(m.MountVolumesTaskState) { // not required
			return nil
		}

		if err := m.MountVolumesTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountVolumesTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountVolumesTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateMultiStageRestoreTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.MultiStageRestoreTaskState != nil {

		if swag.IsZero(m.MultiStageRestoreTaskState) { // not required
			return nil
		}

		if err := m.MultiStageRestoreTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiStageRestoreTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multiStageRestoreTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateNosqlConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NosqlConnectParams != nil {

		if swag.IsZero(m.NosqlConnectParams) { // not required
			return nil
		}

		if err := m.NosqlConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateNosqlRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NosqlRecoverJobParams != nil {

		if swag.IsZero(m.NosqlRecoverJobParams) { // not required
			return nil
		}

		if err := m.NosqlRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidatePowerStateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerStateConfig != nil {

		if swag.IsZero(m.PowerStateConfig) { // not required
			return nil
		}

		if err := m.PowerStateConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerStateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerStateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRecoverDisksTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverDisksTaskState != nil {

		if swag.IsZero(m.RecoverDisksTaskState) { // not required
			return nil
		}

		if err := m.RecoverDisksTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverDisksTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverDisksTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRecoverVolumesTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverVolumesTaskState != nil {

		if swag.IsZero(m.RecoverVolumesTaskState) { // not required
			return nil
		}

		if err := m.RecoverVolumesTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVolumesTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVolumesTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRenameRestoredObjectParam(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredObjectParam != nil {

		if swag.IsZero(m.RenameRestoredObjectParam) { // not required
			return nil
		}

		if err := m.RenameRestoredObjectParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRenameRestoredVappParam(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredVappParam != nil {

		if swag.IsZero(m.RenameRestoredVappParam) { // not required
			return nil
		}

		if err := m.RenameRestoredVappParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredVappParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredVappParam")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateResourcePoolEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourcePoolEntity != nil {

		if swag.IsZero(m.ResourcePoolEntity) { // not required
			return nil
		}

		if err := m.ResourcePoolEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePoolEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePoolEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreAcropolisVmsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreAcropolisVmsParams != nil {

		if swag.IsZero(m.RestoreAcropolisVmsParams) { // not required
			return nil
		}

		if err := m.RestoreAcropolisVmsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAcropolisVmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAcropolisVmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreAppTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreAppTaskState != nil {

		if swag.IsZero(m.RestoreAppTaskState) { // not required
			return nil
		}

		if err := m.RestoreAppTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAppTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAppTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreFilesTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreFilesTaskState != nil {

		if swag.IsZero(m.RestoreFilesTaskState) { // not required
			return nil
		}

		if err := m.RestoreFilesTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreFilesTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreFilesTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreGroupsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreGroupsParams != nil {

		if swag.IsZero(m.RestoreGroupsParams) { // not required
			return nil
		}

		if err := m.RestoreGroupsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreGroupsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreGroupsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreHypervVMParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreHypervVMParams != nil {

		if swag.IsZero(m.RestoreHypervVMParams) { // not required
			return nil
		}

		if err := m.RestoreHypervVMParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreHypervVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreHypervVmParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreInfo != nil {

		if swag.IsZero(m.RestoreInfo) { // not required
			return nil
		}

		if err := m.RestoreInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreKubernetesNamespacesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreKubernetesNamespacesParams != nil {

		if swag.IsZero(m.RestoreKubernetesNamespacesParams) { // not required
			return nil
		}

		if err := m.RestoreKubernetesNamespacesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreKubernetesNamespacesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreKubernetesNamespacesParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreKvmVmsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreKvmVmsParams != nil {

		if swag.IsZero(m.RestoreKvmVmsParams) { // not required
			return nil
		}

		if err := m.RestoreKvmVmsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreKvmVmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreKvmVmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreM365CsmParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreM365CsmParams != nil {

		if swag.IsZero(m.RestoreM365CsmParams) { // not required
			return nil
		}

		if err := m.RestoreM365CsmParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreM365CsmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreM365CsmParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreObjectCustomizations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestoreObjectCustomizations); i++ {

		if m.RestoreObjectCustomizations[i] != nil {

			if swag.IsZero(m.RestoreObjectCustomizations[i]) { // not required
				return nil
			}

			if err := m.RestoreObjectCustomizations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjectCustomizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjectCustomizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreOneDriveParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreOneDriveParams != nil {

		if swag.IsZero(m.RestoreOneDriveParams) { // not required
			return nil
		}

		if err := m.RestoreOneDriveParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreOneDriveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreOneDriveParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreOutlookParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreOutlookParams != nil {

		if swag.IsZero(m.RestoreOutlookParams) { // not required
			return nil
		}

		if err := m.RestoreOutlookParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreOutlookParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreOutlookParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreParentSource(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreParentSource != nil {

		if swag.IsZero(m.RestoreParentSource) { // not required
			return nil
		}

		if err := m.RestoreParentSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParentSource")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestorePublicFoldersParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestorePublicFoldersParams != nil {

		if swag.IsZero(m.RestorePublicFoldersParams) { // not required
			return nil
		}

		if err := m.RestorePublicFoldersParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restorePublicFoldersParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restorePublicFoldersParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreS3Params(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreS3Params != nil {

		if swag.IsZero(m.RestoreS3Params) { // not required
			return nil
		}

		if err := m.RestoreS3Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreS3Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreS3Params")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreSanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreSanParams != nil {

		if swag.IsZero(m.RestoreSanParams) { // not required
			return nil
		}

		if err := m.RestoreSanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreSanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreSanParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreSiteParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreSiteParams != nil {

		if swag.IsZero(m.RestoreSiteParams) { // not required
			return nil
		}

		if err := m.RestoreSiteParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreSiteParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreSiteParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreStandbyTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreStandbyTaskState != nil {

		if swag.IsZero(m.RestoreStandbyTaskState) { // not required
			return nil
		}

		if err := m.RestoreStandbyTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreStandbyTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreStandbyTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreTeamsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreTeamsParams != nil {

		if swag.IsZero(m.RestoreTeamsParams) { // not required
			return nil
		}

		if err := m.RestoreTeamsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreTeamsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreTeamsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreViewDatastoreEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreViewDatastoreEntity != nil {

		if swag.IsZero(m.RestoreViewDatastoreEntity) { // not required
			return nil
		}

		if err := m.RestoreViewDatastoreEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreViewDatastoreEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreViewDatastoreEntity")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoreVmwareVMParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreVmwareVMParams != nil {

		if swag.IsZero(m.RestoreVmwareVMParams) { // not required
			return nil
		}

		if err := m.RestoreVmwareVMParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVmwareVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVmwareVmParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRestoredObjectsNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredObjectsNetworkConfig != nil {

		if swag.IsZero(m.RestoredObjectsNetworkConfig) { // not required
			return nil
		}

		if err := m.RestoredObjectsNetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredObjectsNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredObjectsNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRetrieveArchiveTaskUIDVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RetrieveArchiveTaskUIDVec); i++ {

		if m.RetrieveArchiveTaskUIDVec[i] != nil {

			if swag.IsZero(m.RetrieveArchiveTaskUIDVec[i]) { // not required
				return nil
			}

			if err := m.RetrieveArchiveTaskUIDVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retrieveArchiveTaskUidVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("retrieveArchiveTaskUidVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateRetrieveArchiveTaskVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RetrieveArchiveTaskVec); i++ {

		if m.RetrieveArchiveTaskVec[i] != nil {

			if swag.IsZero(m.RetrieveArchiveTaskVec[i]) { // not required
				return nil
			}

			if err := m.RetrieveArchiveTaskVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retrieveArchiveTaskVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("retrieveArchiveTaskVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateSfdcConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcConnectParams != nil {

		if swag.IsZero(m.SfdcConnectParams) { // not required
			return nil
		}

		if err := m.SfdcConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateSfdcRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcRecoverJobParams != nil {

		if swag.IsZero(m.SfdcRecoverJobParams) { // not required
			return nil
		}

		if err := m.SfdcRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateUdaRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaRecoverJobParams != nil {

		if swag.IsZero(m.UdaRecoverJobParams) { // not required
			return nil
		}

		if err := m.UdaRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateVaultRestoreParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VaultRestoreParams != nil {

		if swag.IsZero(m.VaultRestoreParams) { // not required
			return nil
		}

		if err := m.VaultRestoreParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vaultRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vaultRestoreParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateVcdConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdConfig != nil {

		if swag.IsZero(m.VcdConfig) { // not required
			return nil
		}

		if err := m.VcdConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateViewParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewParams != nil {

		if swag.IsZero(m.ViewParams) { // not required
			return nil
		}

		if err := m.ViewParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreTaskStateProto) contextValidateVolumeInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeInfoVec); i++ {

		if m.VolumeInfoVec[i] != nil {

			if swag.IsZero(m.VolumeInfoVec[i]) { // not required
				return nil
			}

			if err := m.VolumeInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformRestoreTaskStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformRestoreTaskStateProto) UnmarshalBinary(b []byte) error {
	var res PerformRestoreTaskStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
