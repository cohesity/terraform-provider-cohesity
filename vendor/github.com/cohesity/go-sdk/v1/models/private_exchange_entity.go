// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateExchangeEntity private exchange entity
//
// swagger:model PrivateExchangeEntity
type PrivateExchangeEntity struct {

	// This is only set if type is kExchangeDAGDatabase.
	DagDatabase *PrivateExchangeDAGDatabase `json:"dagDatabase,omitempty"`

	// This is only set if type is kExchangeDAGDatabaseCopy.
	DagDatabaseCopy *ExchangeDAGDatabaseCopy `json:"dagDatabaseCopy,omitempty"`

	// This is only set if type is kExchangeDAG.
	DagInfo *ExchangeDAGInfo `json:"dagInfo,omitempty"`

	// Represents topology of an Exchange onprem queried from a source.
	// This is only set if type is kExchangeNode.
	Exchange *ExchangeTopology `json:"exchange,omitempty"`

	// A human readable name for the object.
	Name *string `json:"name,omitempty"`

	// The entity id of the owner entity.
	OwnerID *int64 `json:"ownerId,omitempty"`

	// This is only set if type is kExchangeStandaloneDatabase.
	StandaloneDatabase *ExchangeDatabase `json:"standaloneDatabase,omitempty"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// The UUID of the object.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this private exchange entity
func (m *PrivateExchangeEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDagDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDagDatabaseCopy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDagInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandaloneDatabase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateExchangeEntity) validateDagDatabase(formats strfmt.Registry) error {
	if swag.IsZero(m.DagDatabase) { // not required
		return nil
	}

	if m.DagDatabase != nil {
		if err := m.DagDatabase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dagDatabase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dagDatabase")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeEntity) validateDagDatabaseCopy(formats strfmt.Registry) error {
	if swag.IsZero(m.DagDatabaseCopy) { // not required
		return nil
	}

	if m.DagDatabaseCopy != nil {
		if err := m.DagDatabaseCopy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dagDatabaseCopy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dagDatabaseCopy")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeEntity) validateDagInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DagInfo) { // not required
		return nil
	}

	if m.DagInfo != nil {
		if err := m.DagInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dagInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dagInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeEntity) validateExchange(formats strfmt.Registry) error {
	if swag.IsZero(m.Exchange) { // not required
		return nil
	}

	if m.Exchange != nil {
		if err := m.Exchange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchange")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeEntity) validateStandaloneDatabase(formats strfmt.Registry) error {
	if swag.IsZero(m.StandaloneDatabase) { // not required
		return nil
	}

	if m.StandaloneDatabase != nil {
		if err := m.StandaloneDatabase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneDatabase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneDatabase")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private exchange entity based on the context it is used
func (m *PrivateExchangeEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDagDatabase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDagDatabaseCopy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDagInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandaloneDatabase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateExchangeEntity) contextValidateDagDatabase(ctx context.Context, formats strfmt.Registry) error {

	if m.DagDatabase != nil {

		if swag.IsZero(m.DagDatabase) { // not required
			return nil
		}

		if err := m.DagDatabase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dagDatabase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dagDatabase")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeEntity) contextValidateDagDatabaseCopy(ctx context.Context, formats strfmt.Registry) error {

	if m.DagDatabaseCopy != nil {

		if swag.IsZero(m.DagDatabaseCopy) { // not required
			return nil
		}

		if err := m.DagDatabaseCopy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dagDatabaseCopy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dagDatabaseCopy")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeEntity) contextValidateDagInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DagInfo != nil {

		if swag.IsZero(m.DagInfo) { // not required
			return nil
		}

		if err := m.DagInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dagInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dagInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeEntity) contextValidateExchange(ctx context.Context, formats strfmt.Registry) error {

	if m.Exchange != nil {

		if swag.IsZero(m.Exchange) { // not required
			return nil
		}

		if err := m.Exchange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchange")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateExchangeEntity) contextValidateStandaloneDatabase(ctx context.Context, formats strfmt.Registry) error {

	if m.StandaloneDatabase != nil {

		if swag.IsZero(m.StandaloneDatabase) { // not required
			return nil
		}

		if err := m.StandaloneDatabase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneDatabase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneDatabase")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateExchangeEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateExchangeEntity) UnmarshalBinary(b []byte) error {
	var res PrivateExchangeEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
