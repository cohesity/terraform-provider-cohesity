// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtectionSource Protection Source.
//
// Specifies a generic structure that represents a node
// in the Protection Source tree. Node details will depend on the
// environment of the Protection Source.
//
// swagger:model ProtectionSource
type ProtectionSource struct {

	// Specifies details about an Acropolis Protection Source
	// when the environment is set to 'kAcropolis'.
	AcropolisProtectionSource struct {
		AcropolisProtectionSource
	} `json:"acropolisProtectionSource,omitempty"`

	// Specifies details about an AD Protection Source
	// when the environment is set to 'kAD'.
	AdProtectionSource struct {
		AdProtectionSource
	} `json:"adProtectionSource,omitempty"`

	// Specifies details about an AWS Protection Source
	// when the environment is set to 'kAWS'.
	AwsProtectionSource struct {
		AwsProtectionSource
	} `json:"awsProtectionSource,omitempty"`

	// Specifies details about an Azure Protection Source
	// when the environment is set to 'kAzure'.
	AzureProtectionSource struct {
		AzureProtectionSource
	} `json:"azureProtectionSource,omitempty"`

	// Specifies details about a Cassandra Protection Source
	// when the environment is set to 'kCassandra'.
	CassandraProtectionSource struct {
		CassandraProtectionSource
	} `json:"cassandraProtectionSource,omitempty"`

	// Specifies the connection id of the tenant.
	ConnectionID *int64 `json:"connectionId,omitempty"`

	// Specifies the connector group id of the connector groups.
	ConnectorGroupID *int64 `json:"connectorGroupId,omitempty"`

	// Specifies details about a Couchbase Protection Source
	// when the environment is set to 'kCouchbase'.
	CouchbaseProtectionSource struct {
		CouchbaseProtectionSource
	} `json:"couchbaseProtectionSource,omitempty"`

	// Specifies the user provided custom name of the Protection Source.
	CustomName *string `json:"customName,omitempty"`

	// Specifies details about a Elastifile Protection Source
	// when the environment is set to 'kElastifile'.
	ElastifileProtectionSource struct {
		ElastifileProtectionSource
	} `json:"elastifileProtectionSource,omitempty"`

	// Specifies the environment (such as 'kVMware' or 'kSQL') where the
	// Protection Source exists. Depending on the environment, one of the
	// following Protection Sources are initialized.
	//
	// NOTE: kPuppeteer refers to Cohesity's Remote Adapter.
	// Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	// NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	// 'kVMware' indicates the VMware Protection Source environment.
	// 'kHyperV' indicates the HyperV Protection Source environment.
	// 'kSQL' indicates the SQL Protection Source environment.
	// 'kView' indicates the View Protection Source environment.
	// 'kPuppeteer' indicates the Cohesity's Remote Adapter.
	// 'kPhysical' indicates the physical Protection Source environment.
	// 'kPure' indicates the Pure Storage Protection Source environment.
	// 'kNimble' indicates the Nimble Storage Protection Source environment.
	// 'kAzure' indicates the Microsoft's Azure Protection Source environment.
	// 'kNetapp' indicates the Netapp Protection Source environment.
	// 'kAgent' indicates the Agent Protection Source environment.
	// 'kGenericNas' indicates the Generic Network Attached Storage Protection
	// Source environment.
	// 'kAcropolis' indicates the Acropolis Protection Source environment.
	// 'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	// 'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	// 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	// 'kGPFS' indicates IBM's GPFS Protection Source environment.
	// 'kKVM' indicates the KVM Protection Source environment.
	// 'kAWS' indicates the AWS Protection Source environment.
	// 'kExchange' indicates the Exchange Protection Source environment.
	// 'kHyperVVSS' indicates the HyperV VSS Protection Source
	// environment.
	// 'kOracle' indicates the Oracle Protection Source environment.
	// 'kGCP' indicates the Google Cloud Platform Protection Source environment.
	// 'kFlashBlade' indicates the Flash Blade Protection Source environment.
	// 'kAWSNative' indicates the AWS Native Protection Source environment.
	// 'kO365' indicates the Office 365 Protection Source environment.
	// 'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	// 'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	// 'kGCPNative' indicates the GCP Native Protection Source environment.
	// 'kAzureNative' indicates the Azure Native Protection Source environment.
	// 'kKubernetes' indicates a Kubernetes Protection Source environment.
	// 'kElastifile' indicates Elastifile Protection Source environment.
	// 'kAD' indicates Active Directory Protection Source environment.
	// 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	// 'kCassandra' indicates Cassandra Protection Source environment.
	// 'kMongoDB' indicates MongoDB Protection Source environment.
	// 'kCouchbase' indicates Couchbase Protection Source environment.
	// 'kHdfs' indicates Hdfs Protection Source environment.
	// 'kHive' indicates Hive Protection Source environment.
	// 'kHBase' indicates HBase Protection Source environment.
	// 'kUDA' indicates Universal Data Adapter Protection Source environment.
	// 'kSAPHANA' indicates SAP HANA protection source environment.
	// 'kO365Teams' indicates the Office365 Teams Protection Source environment.
	// 'kO365Group' indicates the Office365 Groups Protection Source environment.
	// 'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	// 'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	// 'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	// 'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	// kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	// kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	// kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	// kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	// kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	// kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	// kO365PublicFolders
	// Enum: ["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]
	Environment *string `json:"environment,omitempty"`

	// Specifies details about an Exchange Protection Source
	// when the environment is set to 'kExchange'.
	ExchangeProtectionSource struct {
		ExchangeProtectionSource
	} `json:"exchangeProtectionSource,omitempty"`

	// Specifies details about a Pure Storage FlashBlade Protection Source
	// when the environment is set to 'kFlashBlade'.
	FlashBladeProtectionSource struct {
		FlashBladeProtectionSource
	} `json:"flashBladeProtectionSource,omitempty"`

	// Specifies details about an GCP Protection Source
	// when the environment is set to 'kGCP'.
	GcpProtectionSource struct {
		GcpProtectionSource
	} `json:"gcpProtectionSource,omitempty"`

	// Specifies details about an GPFS Protection Source
	// when the environment is set to 'kGPFS'.
	GpfsProtectionSource struct {
		GpfsProtectionSource
	} `json:"gpfsProtectionSource,omitempty"`

	// Specifies details about a HBase Protection Source
	// when the environment is set to 'kHBase'.
	HbaseProtectionSource struct {
		HBaseProtectionSource
	} `json:"hbaseProtectionSource,omitempty"`

	// Specifies details about a Hdfs Protection Source
	// when the environment is set to 'kHdfs'.
	HdfsProtectionSource struct {
		HdfsProtectionSource
	} `json:"hdfsProtectionSource,omitempty"`

	// Specifies details about a Hive Protection Source
	// when the environment is set to 'kHive'.
	HiveProtectionSource struct {
		HiveProtectionSource
	} `json:"hiveProtectionSource,omitempty"`

	// Specifies details about a HyperFlex Storage Snapshot source
	// when the environment is set to 'kHyperFlex'
	HyperFlexProtectionSource struct {
		HyperFlexProtectionSource
	} `json:"hyperFlexProtectionSource,omitempty"`

	// Specifies details about a HyperV Protection Source
	// when the environment is set to 'kHyperV'.
	HypervProtectionSource struct {
		HypervProtectionSource
	} `json:"hypervProtectionSource,omitempty"`

	// Specifies details about an Ibm Flash System Protection Source
	// when the environment is set to 'kIbmFlashSystem'.
	IbmFlashSystemProtectionSource struct {
		IbmFlashSystemProtectionSource
	} `json:"ibmFlashSystemProtectionSource,omitempty"`

	// Specifies an id of the Protection Source.
	ID *int64 `json:"id,omitempty"`

	// Specifies details about an Isilon OneFs Protection Source
	// when the environment is set to 'kIsilon'.
	IsilonProtectionSource struct {
		IsilonProtectionSource
	} `json:"isilonProtectionSource,omitempty"`

	// Specifies details about a Kubernetes Protection Source
	// when the environment is set to 'kKubernetes'.
	KubernetesProtectionSource struct {
		KubernetesProtectionSource
	} `json:"kubernetesProtectionSource,omitempty"`

	// Specifies details about a KVM Protection Source
	// when the environment is set to 'kKVM'.
	KvmProtectionSource struct {
		KvmProtectionSource
	} `json:"kvmProtectionSource,omitempty"`

	// Specifies details about a MongoDB Protection Source
	// when the environment is set to 'kMongoDB'.
	MongodbProtectionSource struct {
		MongoDBProtectionSource
	} `json:"mongodbProtectionSource,omitempty"`

	// Specifies a name of the Protection Source.
	Name *string `json:"name,omitempty"`

	// Specifies details about a Generic NAS Protection Source
	// when the environment is set to 'kGenericNas'.
	NasProtectionSource struct {
		NasProtectionSource
	} `json:"nasProtectionSource,omitempty"`

	// Specifies details about a NetApp Protection Source
	// when the environment is set to 'kNetapp'.
	NetappProtectionSource struct {
		NetappProtectionSource
	} `json:"netappProtectionSource,omitempty"`

	// Specifies details about a SAN Protection Source
	// when the environment is set to 'kNimble'.
	NimbleProtectionSource struct {
		NimbleProtectionSource
	} `json:"nimbleProtectionSource,omitempty"`

	// Specifies details about an Office 365 Protection Source
	// when the environment is set to 'kO365'.
	Office365ProtectionSource struct {
		Office365ProtectionSource
	} `json:"office365ProtectionSource,omitempty"`

	// Specifies details about an Oracle Protection Source
	// when the environment is set to 'kOracle'.
	OracleProtectionSource struct {
		OracleProtectionSource
	} `json:"oracleProtectionSource,omitempty"`

	// Specifies an id of the parent of the Protection Source.
	ParentID *int64 `json:"parentId,omitempty"`

	// Specifies details about a Physical Protection Source
	// when the environment is set to 'kPhysical'.
	PhysicalProtectionSource struct {
		PhysicalProtectionSource
	} `json:"physicalProtectionSource,omitempty"`

	// Specifies details about a Pure Protection Source
	// when the environment is set to 'kPure'.
	PureProtectionSource struct {
		PureProtectionSource
	} `json:"pureProtectionSource,omitempty"`

	// Specifies details about a SAP Hana Protection Source
	// when the environment is set to 'kSAPHANA'.
	SapHanaProtectionSource struct {
		SapHanaProtectionSource
	} `json:"sapHanaProtectionSource,omitempty"`

	// Specifies details about a Salesforce Protection Source
	// when the environment is set to 'kSfdc'.
	SfdcProtectionSource struct {
		SfdcProtectionSource
	} `json:"sfdcProtectionSource,omitempty"`

	// Specifies details about a SQL Protection Source
	// when the environment is set to 'kSQL'.
	SQLProtectionSource struct {
		SQLProtectionSource
	} `json:"sqlProtectionSource,omitempty"`

	// Specifies details about a Universal Data Adapter Protection Source
	// when the environment is set to 'kUDA'.
	UdaProtectionSource struct {
		UdaProtectionSource
	} `json:"udaProtectionSource,omitempty"`

	// Specifies details about a View Protection Source
	// when the environment is set to 'kView'.
	ViewProtectionSource struct {
		ViewProtectionSource
	} `json:"viewProtectionSource,omitempty"`

	// Specifies details about a VMware Protection Source
	// when the environment is set to 'kVMware'.
	VMWareProtectionSource struct {
		VMwareProtectionSource
	} `json:"vmWareProtectionSource,omitempty"`
}

// Validate validates this protection source
func (m *ProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcropolisProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouchbaseProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElastifileProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlashBladeProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpfsProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHyperFlexProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmFlashSystemProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKvmProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNasProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNimbleProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365ProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePureProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSapHanaProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMWareProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSource) validateAcropolisProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateAdProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AdProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateAwsProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateAzureProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateCassandraProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateCouchbaseProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.CouchbaseProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateElastifileProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ElastifileProtectionSource) { // not required
		return nil
	}

	return nil
}

var protectionSourceTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protectionSourceTypeEnvironmentPropEnum = append(protectionSourceTypeEnvironmentPropEnum, v)
	}
}

const (

	// ProtectionSourceEnvironmentKVMware captures enum value "kVMware"
	ProtectionSourceEnvironmentKVMware string = "kVMware"

	// ProtectionSourceEnvironmentKHyperV captures enum value "kHyperV"
	ProtectionSourceEnvironmentKHyperV string = "kHyperV"

	// ProtectionSourceEnvironmentKSQL captures enum value "kSQL"
	ProtectionSourceEnvironmentKSQL string = "kSQL"

	// ProtectionSourceEnvironmentKView captures enum value "kView"
	ProtectionSourceEnvironmentKView string = "kView"

	// ProtectionSourceEnvironmentKPuppeteer captures enum value "kPuppeteer"
	ProtectionSourceEnvironmentKPuppeteer string = "kPuppeteer"

	// ProtectionSourceEnvironmentKPhysical captures enum value "kPhysical"
	ProtectionSourceEnvironmentKPhysical string = "kPhysical"

	// ProtectionSourceEnvironmentKPure captures enum value "kPure"
	ProtectionSourceEnvironmentKPure string = "kPure"

	// ProtectionSourceEnvironmentKNimble captures enum value "kNimble"
	ProtectionSourceEnvironmentKNimble string = "kNimble"
)

// prop value enum
func (m *ProtectionSource) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, protectionSourceTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProtectionSource) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *ProtectionSource) validateExchangeProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateFlashBladeProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.FlashBladeProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateGcpProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateGpfsProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.GpfsProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateHbaseProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateHdfsProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateHiveProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateHyperFlexProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.HyperFlexProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateHypervProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateIbmFlashSystemProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.IbmFlashSystemProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateIsilonProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateKubernetesProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateKvmProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.KvmProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateMongodbProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.MongodbProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateNasProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.NasProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateNetappProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.NetappProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateNimbleProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.NimbleProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateOffice365ProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365ProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateOracleProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validatePhysicalProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validatePureProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.PureProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateSapHanaProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.SapHanaProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateSfdcProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateSQLProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateUdaProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateViewProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewProtectionSource) { // not required
		return nil
	}

	return nil
}

func (m *ProtectionSource) validateVMWareProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.VMWareProtectionSource) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this protection source based on the context it is used
func (m *ProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcropolisProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCouchbaseProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElastifileProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlashBladeProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpfsProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHyperFlexProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIbmFlashSystemProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKvmProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongodbProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNasProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNimbleProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365ProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePureProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSapHanaProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMWareProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSource) contextValidateAcropolisProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateAdProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateAwsProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateAzureProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateCassandraProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateCouchbaseProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateElastifileProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateExchangeProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateFlashBladeProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateGcpProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateGpfsProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateHbaseProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateHdfsProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateHiveProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateHyperFlexProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateHypervProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateIbmFlashSystemProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateIsilonProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateKubernetesProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateKvmProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateMongodbProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateNasProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateNetappProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateNimbleProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateOffice365ProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateOracleProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidatePhysicalProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidatePureProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateSapHanaProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateSfdcProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateSQLProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateUdaProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateViewProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProtectionSource) contextValidateVMWareProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionSource) UnmarshalBinary(b []byte) error {
	var res ProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
