// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateRegisteredAppInfo private registered app info
//
// swagger:model PrivateRegisteredAppInfo
type PrivateRegisteredAppInfo struct {

	// Application environment type.
	Env *int32 `json:"env,omitempty"`

	// This is result of host settings checks performed during registration.
	HostSettingsCheckResultVec []*PrivateHostSettingsCheckResult `json:"hostSettingsCheckResultVec"`

	// Refresh error related to application.
	RefreshError *PrivateErrorProto `json:"refreshError,omitempty"`

	// Verification error related to application registration.
	VerificationError *PrivateErrorProto `json:"verificationError,omitempty"`

	// Verification status of app, when the credential registration needs to be
	// verified. Otherwise if no credential registration or verification is
	// required, this field is set to a default value of kFinished.
	VerificationStatus *int32 `json:"verificationStatus,omitempty"`
}

// Validate validates this private registered app info
func (m *PrivateRegisteredAppInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostSettingsCheckResultVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateRegisteredAppInfo) validateHostSettingsCheckResultVec(formats strfmt.Registry) error {
	if swag.IsZero(m.HostSettingsCheckResultVec) { // not required
		return nil
	}

	for i := 0; i < len(m.HostSettingsCheckResultVec); i++ {
		if swag.IsZero(m.HostSettingsCheckResultVec[i]) { // not required
			continue
		}

		if m.HostSettingsCheckResultVec[i] != nil {
			if err := m.HostSettingsCheckResultVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSettingsCheckResultVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSettingsCheckResultVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateRegisteredAppInfo) validateRefreshError(formats strfmt.Registry) error {
	if swag.IsZero(m.RefreshError) { // not required
		return nil
	}

	if m.RefreshError != nil {
		if err := m.RefreshError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshError")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateRegisteredAppInfo) validateVerificationError(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationError) { // not required
		return nil
	}

	if m.VerificationError != nil {
		if err := m.VerificationError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verificationError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verificationError")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private registered app info based on the context it is used
func (m *PrivateRegisteredAppInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostSettingsCheckResultVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefreshError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateRegisteredAppInfo) contextValidateHostSettingsCheckResultVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostSettingsCheckResultVec); i++ {

		if m.HostSettingsCheckResultVec[i] != nil {

			if swag.IsZero(m.HostSettingsCheckResultVec[i]) { // not required
				return nil
			}

			if err := m.HostSettingsCheckResultVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSettingsCheckResultVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSettingsCheckResultVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateRegisteredAppInfo) contextValidateRefreshError(ctx context.Context, formats strfmt.Registry) error {

	if m.RefreshError != nil {

		if swag.IsZero(m.RefreshError) { // not required
			return nil
		}

		if err := m.RefreshError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshError")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateRegisteredAppInfo) contextValidateVerificationError(ctx context.Context, formats strfmt.Registry) error {

	if m.VerificationError != nil {

		if swag.IsZero(m.VerificationError) { // not required
			return nil
		}

		if err := m.VerificationError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verificationError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verificationError")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateRegisteredAppInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateRegisteredAppInfo) UnmarshalBinary(b []byte) error {
	var res PrivateRegisteredAppInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
