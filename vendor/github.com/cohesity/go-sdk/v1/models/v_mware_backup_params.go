// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMwareBackupParams This message contains additional params for a VMware job run.
//
// swagger:model VMwareBackupParams
type VMwareBackupParams struct {

	// This is set to an appropriate size at which disk areas should be aligned.
	// NOTE: If the value is -1, disk areas will not be aligned.
	DiskAreaAlignmentSizeKb *int32 `json:"diskAreaAlignmentSizeKb,omitempty"`

	// This field stores the intent to persist CBT info in the backup task.
	PreserveCbtInfoEnabled *bool `json:"preserveCbtInfoEnabled,omitempty"`

	// Storage snapshot provider params if any.
	StorageSnapshotProviderParams []*StorageSnapshotProviderParams `json:"storageSnapshotProviderParams"`

	// Use SAN transport for backup.
	UseSanTransport *bool `json:"useSanTransport,omitempty"`

	// VCD backup params (if any).
	VcdBackupParams *VCDBackupParams `json:"vcdBackupParams,omitempty"`

	// This field stores a map of the VMware VM entity id to its progress monitor
	// path.
	VMEntityIDToProgressMonitorPath interface{} `json:"vmEntityIdToProgressMonitorPath,omitempty"`
}

// Validate validates this v mware backup params
func (m *VMwareBackupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageSnapshotProviderParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareBackupParams) validateStorageSnapshotProviderParams(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageSnapshotProviderParams) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageSnapshotProviderParams); i++ {
		if swag.IsZero(m.StorageSnapshotProviderParams[i]) { // not required
			continue
		}

		if m.StorageSnapshotProviderParams[i] != nil {
			if err := m.StorageSnapshotProviderParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageSnapshotProviderParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageSnapshotProviderParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMwareBackupParams) validateVcdBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdBackupParams) { // not required
		return nil
	}

	if m.VcdBackupParams != nil {
		if err := m.VcdBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdBackupParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v mware backup params based on the context it is used
func (m *VMwareBackupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageSnapshotProviderParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareBackupParams) contextValidateStorageSnapshotProviderParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageSnapshotProviderParams); i++ {

		if m.StorageSnapshotProviderParams[i] != nil {

			if swag.IsZero(m.StorageSnapshotProviderParams[i]) { // not required
				return nil
			}

			if err := m.StorageSnapshotProviderParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageSnapshotProviderParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageSnapshotProviderParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMwareBackupParams) contextValidateVcdBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdBackupParams != nil {

		if swag.IsZero(m.VcdBackupParams) { // not required
			return nil
		}

		if err := m.VcdBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdBackupParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMwareBackupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMwareBackupParams) UnmarshalBinary(b []byte) error {
	var res VMwareBackupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
