// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PasswordStrength Specifies the result of the estimation of the password's strength.
//
// swagger:model PasswordStrength
type PasswordStrength struct {

	// Specifies the strength of the password, in one of four categories: kPoor,
	// kWeak, kStrong, kExcellent.
	// 'kPoor' specifies a poor choice of password.
	// 'kWeak' specifies a better than poor, but still a weak password choice.
	// 'kStrong' specifies a better than weak, but a strong password choice.
	// 'kExcellent' specifies a password choice impossible to guess.
	// Enum: ["kPoor","kWeak","kStrong","kExcellent"]
	Strength *string `json:"strength,omitempty"`
}

// Validate validates this password strength
func (m *PasswordStrength) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStrength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var passwordStrengthTypeStrengthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPoor","kWeak","kStrong","kExcellent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		passwordStrengthTypeStrengthPropEnum = append(passwordStrengthTypeStrengthPropEnum, v)
	}
}

const (

	// PasswordStrengthStrengthKPoor captures enum value "kPoor"
	PasswordStrengthStrengthKPoor string = "kPoor"

	// PasswordStrengthStrengthKWeak captures enum value "kWeak"
	PasswordStrengthStrengthKWeak string = "kWeak"

	// PasswordStrengthStrengthKStrong captures enum value "kStrong"
	PasswordStrengthStrengthKStrong string = "kStrong"

	// PasswordStrengthStrengthKExcellent captures enum value "kExcellent"
	PasswordStrengthStrengthKExcellent string = "kExcellent"
)

// prop value enum
func (m *PasswordStrength) validateStrengthEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, passwordStrengthTypeStrengthPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PasswordStrength) validateStrength(formats strfmt.Registry) error {
	if swag.IsZero(m.Strength) { // not required
		return nil
	}

	// value enum
	if err := m.validateStrengthEnum("strength", "body", *m.Strength); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this password strength based on context it is used
func (m *PasswordStrength) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PasswordStrength) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PasswordStrength) UnmarshalBinary(b []byte) error {
	var res PasswordStrength
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
