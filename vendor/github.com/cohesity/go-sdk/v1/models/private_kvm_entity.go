// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateKvmEntity private kvm entity
//
// swagger:model PrivateKvmEntity
type PrivateKvmEntity struct {

	// Identifies the Agent entity with which this KVM entity is associated
	// when the Entity object represents a Delegate host or KVM host. The
	// field is not populated otherwise.
	AgentEntityID *int64 `json:"agentEntityId,omitempty"`

	// This will be set for KVM host entities whose agent cannot be reached,
	// either because it is not installed or due some error.
	AgentError *PrivateErrorProto `json:"agentError,omitempty"`

	// Information about the Agent (see agent.proto for details).
	AgentStatus *HostAgentStatus `json:"agentStatus,omitempty"`

	// The ID of the cluster.
	ClusterID *string `json:"clusterId,omitempty"`

	// The ID of the data center.
	DcID *string `json:"dcId,omitempty"`

	// This is a general description that could be set for some entities.
	Description *string `json:"description,omitempty"`

	// This field is populated only for the host entities(kHost). This denotes
	// the endpoint address to be used to connect to the host.
	HostAddress *string `json:"hostAddress,omitempty"`

	// A human readable name for the object.
	Name *string `json:"name,omitempty"`

	// This field is populated for kVNicProfiles. This denotes the
	// network to which it is attached.
	NetworkID *string `json:"networkId,omitempty"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// The UUID of the object.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this private kvm entity
func (m *PrivateKvmEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateKvmEntity) validateAgentError(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentError) { // not required
		return nil
	}

	if m.AgentError != nil {
		if err := m.AgentError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentError")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateKvmEntity) validateAgentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentStatus) { // not required
		return nil
	}

	if m.AgentStatus != nil {
		if err := m.AgentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private kvm entity based on the context it is used
func (m *PrivateKvmEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateKvmEntity) contextValidateAgentError(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentError != nil {

		if swag.IsZero(m.AgentError) { // not required
			return nil
		}

		if err := m.AgentError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentError")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateKvmEntity) contextValidateAgentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentStatus != nil {

		if swag.IsZero(m.AgentStatus) { // not required
			return nil
		}

		if err := m.AgentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateKvmEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateKvmEntity) UnmarshalBinary(b []byte) error {
	var res PrivateKvmEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
