// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CrackedFileDocumentSharepointMetadata Message used to store the metadata for SharePoint Document Library.
//
// swagger:model CrackedFileDocument_SharepointMetadata
type CrackedFileDocumentSharepointMetadata struct {

	// Seconds from epoch at which the file/folder is created.
	CreationTimeSecs *int64 `json:"creationTimeSecs,omitempty"`

	// doc type
	DocType *int32 `json:"docType,omitempty"`

	// Type of the drive for this file/folder/doclib.
	DriveType *int32 `json:"driveType,omitempty"`

	// Metadata related to the sharepoint list. This is populated iff the Type
	// is kSiteList.
	ListMetadata *CrackedFileDocumentSharepointListsMetadata `json:"listMetadata,omitempty"`

	// The email of the owner of the file.
	// TODO(tauseef): Mark this as reserved once Op cleanup is done.
	OwnerEmail *string `json:"ownerEmail,omitempty"`

	// Specifies the collection of identity resources that represent creators'
	// or owners' details for this Site Item. This can hold user, application,
	// device or group identities. Both name & email address within each
	// identity are indexed.
	OwnerIDSet *IdentitySet `json:"ownerIdSet,omitempty"`

	// The owner's name of the file.
	// TODO(tauseef): Mark this as reserved once Op cleanup is done.
	OwnerName *string `json:"ownerName,omitempty"`

	// Size of the file/folder in bytes.
	SizeInBytes *int64 `json:"sizeInBytes,omitempty"`
}

// Validate validates this cracked file document sharepoint metadata
func (m *CrackedFileDocumentSharepointMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateListMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerIDSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrackedFileDocumentSharepointMetadata) validateListMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ListMetadata) { // not required
		return nil
	}

	if m.ListMetadata != nil {
		if err := m.ListMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *CrackedFileDocumentSharepointMetadata) validateOwnerIDSet(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerIDSet) { // not required
		return nil
	}

	if m.OwnerIDSet != nil {
		if err := m.OwnerIDSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerIdSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerIdSet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cracked file document sharepoint metadata based on the context it is used
func (m *CrackedFileDocumentSharepointMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateListMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerIDSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrackedFileDocumentSharepointMetadata) contextValidateListMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ListMetadata != nil {

		if swag.IsZero(m.ListMetadata) { // not required
			return nil
		}

		if err := m.ListMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *CrackedFileDocumentSharepointMetadata) contextValidateOwnerIDSet(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerIDSet != nil {

		if swag.IsZero(m.OwnerIDSet) { // not required
			return nil
		}

		if err := m.OwnerIDSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerIdSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerIdSet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrackedFileDocumentSharepointMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrackedFileDocumentSharepointMetadata) UnmarshalBinary(b []byte) error {
	var res CrackedFileDocumentSharepointMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
