// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompareAdObjectsRequest Compare AD Objects Request.
//
// Specifies the request to compare AD objects from Snapshot and Production AD.
//
// swagger:model CompareAdObjectsRequest
type CompareAdObjectsRequest struct {

	// Specifies the Restore Task Id corresponding to which we need to compare
	// the AD objects.
	// Required: true
	RestoreTaskID *int64 `json:"RestoreTaskId"`

	// Specifies the option to get object attributes from Snapshot AD when
	// destination guid is missing in GuidPair. This helps to show attributes of
	// AD object from Snapshot AD when the object is missing in Production AD.
	AllowEmptyDestGuids *bool `json:"allowEmptyDestGuids,omitempty"`

	// Specifies the option to exclude AD system attributes when comparing two AD
	// object attributes. If the objects have same guid, most of the system
	// attributes would match.If the AD object was recovered through a restore,
	// then many system attributes will be different. Default compares all
	// attributes.
	ExcludeSysAttributes *bool `json:"excludeSysAttributes,omitempty"`

	// Specifies the option to not return attributes where source and destination
	// values are null values. This reduces noise of the properties in the
	// objects returned.
	FilterNullValueAttributes *bool `json:"filterNullValueAttributes,omitempty"`

	// Specifies the option to not return attributes where source and
	// destination values are same. Use this flag to return only values
	// that are different.
	FilterSameValueAttributes *bool `json:"filterSameValueAttributes,omitempty"`

	// Specifies the GuidPair of the AD Objects which we want to compare
	// from both Snapshot and Production AD.
	// Required: true
	GUIDPairs []*GUIDPair `json:"guidPairs"`

	// Specifies the option to do quick compare of specified guid between Snapshot
	// AD and Production AD. If at least one attribute mismatch is found, comparison
	// stops and returns with AdObjectFlag kNotEqual.
	QuickCompare *bool `json:"quickCompare,omitempty"`
}

// Validate validates this compare ad objects request
func (m *CompareAdObjectsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestoreTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGUIDPairs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareAdObjectsRequest) validateRestoreTaskID(formats strfmt.Registry) error {

	if err := validate.Required("RestoreTaskId", "body", m.RestoreTaskID); err != nil {
		return err
	}

	return nil
}

func (m *CompareAdObjectsRequest) validateGUIDPairs(formats strfmt.Registry) error {

	if err := validate.Required("guidPairs", "body", m.GUIDPairs); err != nil {
		return err
	}

	for i := 0; i < len(m.GUIDPairs); i++ {
		if swag.IsZero(m.GUIDPairs[i]) { // not required
			continue
		}

		if m.GUIDPairs[i] != nil {
			if err := m.GUIDPairs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("guidPairs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("guidPairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this compare ad objects request based on the context it is used
func (m *CompareAdObjectsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGUIDPairs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareAdObjectsRequest) contextValidateGUIDPairs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GUIDPairs); i++ {

		if m.GUIDPairs[i] != nil {

			if swag.IsZero(m.GUIDPairs[i]) { // not required
				return nil
			}

			if err := m.GUIDPairs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("guidPairs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("guidPairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompareAdObjectsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompareAdObjectsRequest) UnmarshalBinary(b []byte) error {
	var res CompareAdObjectsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
