// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExchangeHostInfo Exchange Host Info
//
// Specifies the Information about the Exchange host.
//
// swagger:model ExchangeHostInfo
type ExchangeHostInfo struct {

	// Specifies the status of the agent on the Exchange host.
	// Specifies the status of agent on Exchange Application Server.
	// 'kSupported' indicates the agent is supported for Exchange data protection.
	// 'kUnSupported' indicates the agent is not supported for Exchange data
	// protection.
	// 'kUpgrade' indicates the agent of server need to be upgraded.
	// Enum: ["kSupported","kUpgrade","kUnsupported"]
	AgentStatus *string `json:"agentStatus,omitempty"`

	// Specifies the endpoint of the Exchange host.
	Endpoint *string `json:"endpoint,omitempty"`

	// Specifies the guid of the Exchange host.
	GUID *string `json:"guid,omitempty"`

	// Specifies the display name of the Exchange host.
	Name *string `json:"name,omitempty"`

	// Specifies the Protection source id of the Physical Host if the
	// Exchange application is already registered on the physical host
	// with the above endpoint.
	ProtectionSourceID *int64 `json:"protectionSourceId,omitempty"`

	// Specifies the status of the registration of the Exchange Host.
	// Specifies the status of registration of Exchange Application Server.
	// 'kUnknown' indicates the status is not known.
	// 'kHealthy' indicates the status is healty and is registered as
	// Exchange Server.
	// 'kUnHealthy' indicates the exchange application is registered on the
	// physical server but it is unreachable now.
	// 'kUnregistered' indicates the server is not registered as physical source.
	// 'kUnreachable' indicates the server is not reachable from the cohesity
	// cluster or the cohesity protection server is not installed on the exchange
	// server.
	// 'kDetached' indicates the server is removed from the ExchangeDAG.
	// Enum: ["kUnknown","kHealthy","kUnHealthy","kUnregistered","kUreachable","kDetached"]
	Status *string `json:"status,omitempty"`
}

// Validate validates this exchange host info
func (m *ExchangeHostInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var exchangeHostInfoTypeAgentStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSupported","kUpgrade","kUnsupported"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exchangeHostInfoTypeAgentStatusPropEnum = append(exchangeHostInfoTypeAgentStatusPropEnum, v)
	}
}

const (

	// ExchangeHostInfoAgentStatusKSupported captures enum value "kSupported"
	ExchangeHostInfoAgentStatusKSupported string = "kSupported"

	// ExchangeHostInfoAgentStatusKUpgrade captures enum value "kUpgrade"
	ExchangeHostInfoAgentStatusKUpgrade string = "kUpgrade"

	// ExchangeHostInfoAgentStatusKUnsupported captures enum value "kUnsupported"
	ExchangeHostInfoAgentStatusKUnsupported string = "kUnsupported"
)

// prop value enum
func (m *ExchangeHostInfo) validateAgentStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exchangeHostInfoTypeAgentStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExchangeHostInfo) validateAgentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAgentStatusEnum("agentStatus", "body", *m.AgentStatus); err != nil {
		return err
	}

	return nil
}

var exchangeHostInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUnknown","kHealthy","kUnHealthy","kUnregistered","kUreachable","kDetached"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exchangeHostInfoTypeStatusPropEnum = append(exchangeHostInfoTypeStatusPropEnum, v)
	}
}

const (

	// ExchangeHostInfoStatusKUnknown captures enum value "kUnknown"
	ExchangeHostInfoStatusKUnknown string = "kUnknown"

	// ExchangeHostInfoStatusKHealthy captures enum value "kHealthy"
	ExchangeHostInfoStatusKHealthy string = "kHealthy"

	// ExchangeHostInfoStatusKUnHealthy captures enum value "kUnHealthy"
	ExchangeHostInfoStatusKUnHealthy string = "kUnHealthy"

	// ExchangeHostInfoStatusKUnregistered captures enum value "kUnregistered"
	ExchangeHostInfoStatusKUnregistered string = "kUnregistered"

	// ExchangeHostInfoStatusKUreachable captures enum value "kUreachable"
	ExchangeHostInfoStatusKUreachable string = "kUreachable"

	// ExchangeHostInfoStatusKDetached captures enum value "kDetached"
	ExchangeHostInfoStatusKDetached string = "kDetached"
)

// prop value enum
func (m *ExchangeHostInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exchangeHostInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExchangeHostInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this exchange host info based on context it is used
func (m *ExchangeHostInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeHostInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeHostInfo) UnmarshalBinary(b []byte) error {
	var res ExchangeHostInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
