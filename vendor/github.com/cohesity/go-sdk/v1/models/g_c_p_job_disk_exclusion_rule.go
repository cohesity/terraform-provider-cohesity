// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GCPJobDiskExclusionRule Message defining the different criteria to exclude GCP disks from
// job-level backup. The values set will be used for AND operation.
// For E.g:(Balanced-Persistant && instance1-disk)
//
// swagger:model GCPJobDiskExclusionRule
type GCPJobDiskExclusionRule struct {

	// Disk name to exclude. Eg - instance1-disk
	DiskName *string `json:"diskName,omitempty"`

	// Disk types to exclude. Eg - Balanced-Persistant etc.
	DiskType *string `json:"diskType,omitempty"`

	// Specifies the label vectors used to exclude GCP disks attached to GCP
	// instances at global and object level.
	// E.g., {label_vec: [(K1, V1),  (K2, V2)],
	// => This will exclude a particular disk if it has all
	// the tags in label_vec((K1, V1),  (K2, V2))
	LabelVec []*GCPJobDiskExclusionRuleLabel `json:"labelVec"`
}

// Validate validates this g c p job disk exclusion rule
func (m *GCPJobDiskExclusionRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GCPJobDiskExclusionRule) validateLabelVec(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelVec) { // not required
		return nil
	}

	for i := 0; i < len(m.LabelVec); i++ {
		if swag.IsZero(m.LabelVec[i]) { // not required
			continue
		}

		if m.LabelVec[i] != nil {
			if err := m.LabelVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this g c p job disk exclusion rule based on the context it is used
func (m *GCPJobDiskExclusionRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GCPJobDiskExclusionRule) contextValidateLabelVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelVec); i++ {

		if m.LabelVec[i] != nil {

			if swag.IsZero(m.LabelVec[i]) { // not required
				return nil
			}

			if err := m.LabelVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GCPJobDiskExclusionRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GCPJobDiskExclusionRule) UnmarshalBinary(b []byte) error {
	var res GCPJobDiskExclusionRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
