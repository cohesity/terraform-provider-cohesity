// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QoSPolicy QoSPolicy.
//
// Specifies the Quality of Service (QoS) Policy details.
//
// swagger:model QoSPolicy
type QoSPolicy struct {

	// Specifies whether to always write to SSD even if SeqWriteSsdPct is 0.
	AlwaysUseSsd *bool `json:"alwaysUseSsd,omitempty"`

	// Specifies Id of the QoS Policy.
	ID *int64 `json:"id,omitempty"`

	// Specifies minimum number of requests,  corresponding to this Policy,
	// executed in the QoS queue.
	MinRequests *int32 `json:"minRequests,omitempty"`

	// Specifies Name of the Qos Policy.
	Name *string `json:"name,omitempty"`

	// Specifies Priority of the Qos Policy.
	// Priority of QoS Policy as defined in cluster config proto.
	// Enum: ["kLow","kHigh"]
	Priority *string `json:"priority,omitempty"`

	// Specifies percentage of a random write request belonging to this Policy
	// that hits hydra.
	RandomWriteHydraPct *int32 `json:"randomWriteHydraPct,omitempty"`

	// Specifies percentage of a random write request belonging to this Policy
	// that hits SSD.
	RandomWriteSsdPct *int32 `json:"randomWriteSsdPct,omitempty"`

	// Specifies percentage of a sequential write request belonging to this
	// Policy that hits hydra.
	SeqWriteHydraPct *int32 `json:"seqWriteHydraPct,omitempty"`

	// Specifies percentage of a sequential write request belonging to this
	// Policy that hits SSD.
	SeqWriteSsdPct *int32 `json:"seqWriteSsdPct,omitempty"`

	// Specifies Weight of the QoS Policy used in QoS queue.
	Weight *int32 `json:"weight,omitempty"`

	// Specifies Workload type attribute associated with this Policy.
	WorkLoadType *string `json:"workLoadType,omitempty"`
}

// Validate validates this qo s policy
func (m *QoSPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var qoSPolicyTypePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLow","kHigh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		qoSPolicyTypePriorityPropEnum = append(qoSPolicyTypePriorityPropEnum, v)
	}
}

const (

	// QoSPolicyPriorityKLow captures enum value "kLow"
	QoSPolicyPriorityKLow string = "kLow"

	// QoSPolicyPriorityKHigh captures enum value "kHigh"
	QoSPolicyPriorityKHigh string = "kHigh"
)

// prop value enum
func (m *QoSPolicy) validatePriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, qoSPolicyTypePriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QoSPolicy) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriorityEnum("priority", "body", *m.Priority); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this qo s policy based on context it is used
func (m *QoSPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QoSPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QoSPolicy) UnmarshalBinary(b []byte) error {
	var res QoSPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
