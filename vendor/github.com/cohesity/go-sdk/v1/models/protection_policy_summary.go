// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectionPolicySummary ProtectionPolicySummary specifies protection summary of a given
// Protection Policy.
//
// swagger:model ProtectionPolicySummary
type ProtectionPolicySummary struct {

	// Specifies the summary of the last Protection Runs of all the related
	// Protection Sources and Protection Jobs.
	LastProtectionRunSummary *LastProtectionRunSummary `json:"lastProtectionRunSummary,omitempty"`

	// If there are more results to display, use this value to get
	// the next set of results, by using this value in paginationCookie param
	// for the next request to GetProtectionPolicySummary.
	PaginationCookie *string `json:"paginationCookie,omitempty"`

	// Specifies the list of Protection Sources which are protected under the
	// given policy. This is only populated if the policy is of type kRPO.
	ProtectedSourcesSummary []*ProtectedSourceSummary `json:"protectedSourcesSummary"`

	// Specifies the list of Protection Jobs associated with the given
	// Protection Policy. This is only populated if the type of the
	// Protection Policy is kRegular.
	ProtectionJobsSummary []*ProtectionJobSummaryForPolicies `json:"protectionJobsSummary"`

	// Specifies the Protection Policy for which the summary is requested.
	ProtectionPolicy *ProtectionPolicy `json:"protectionPolicy,omitempty"`

	// Specifies the aggregated summary of the Protection Runs.
	ProtectionRunsSummary *ProtectionRunsSummary `json:"protectionRunsSummary,omitempty"`
}

// Validate validates this protection policy summary
func (m *ProtectionPolicySummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastProtectionRunSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectedSourcesSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionJobsSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionRunsSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionPolicySummary) validateLastProtectionRunSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.LastProtectionRunSummary) { // not required
		return nil
	}

	if m.LastProtectionRunSummary != nil {
		if err := m.LastProtectionRunSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastProtectionRunSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastProtectionRunSummary")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionPolicySummary) validateProtectedSourcesSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectedSourcesSummary) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectedSourcesSummary); i++ {
		if swag.IsZero(m.ProtectedSourcesSummary[i]) { // not required
			continue
		}

		if m.ProtectedSourcesSummary[i] != nil {
			if err := m.ProtectedSourcesSummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectedSourcesSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectedSourcesSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionPolicySummary) validateProtectionJobsSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionJobsSummary) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionJobsSummary); i++ {
		if swag.IsZero(m.ProtectionJobsSummary[i]) { // not required
			continue
		}

		if m.ProtectionJobsSummary[i] != nil {
			if err := m.ProtectionJobsSummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionJobsSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionJobsSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionPolicySummary) validateProtectionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionPolicy) { // not required
		return nil
	}

	if m.ProtectionPolicy != nil {
		if err := m.ProtectionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionPolicySummary) validateProtectionRunsSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionRunsSummary) { // not required
		return nil
	}

	if m.ProtectionRunsSummary != nil {
		if err := m.ProtectionRunsSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionRunsSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionRunsSummary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this protection policy summary based on the context it is used
func (m *ProtectionPolicySummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastProtectionRunSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectedSourcesSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionJobsSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionRunsSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionPolicySummary) contextValidateLastProtectionRunSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.LastProtectionRunSummary != nil {

		if swag.IsZero(m.LastProtectionRunSummary) { // not required
			return nil
		}

		if err := m.LastProtectionRunSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastProtectionRunSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastProtectionRunSummary")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionPolicySummary) contextValidateProtectedSourcesSummary(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectedSourcesSummary); i++ {

		if m.ProtectedSourcesSummary[i] != nil {

			if swag.IsZero(m.ProtectedSourcesSummary[i]) { // not required
				return nil
			}

			if err := m.ProtectedSourcesSummary[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectedSourcesSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectedSourcesSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionPolicySummary) contextValidateProtectionJobsSummary(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionJobsSummary); i++ {

		if m.ProtectionJobsSummary[i] != nil {

			if swag.IsZero(m.ProtectionJobsSummary[i]) { // not required
				return nil
			}

			if err := m.ProtectionJobsSummary[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionJobsSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionJobsSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectionPolicySummary) contextValidateProtectionPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionPolicy != nil {

		if swag.IsZero(m.ProtectionPolicy) { // not required
			return nil
		}

		if err := m.ProtectionPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionPolicySummary) contextValidateProtectionRunsSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionRunsSummary != nil {

		if swag.IsZero(m.ProtectionRunsSummary) { // not required
			return nil
		}

		if err := m.ProtectionRunsSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionRunsSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionRunsSummary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionPolicySummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionPolicySummary) UnmarshalBinary(b []byte) error {
	var res ProtectionPolicySummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
