// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntitySchemaProtoTimeSeriesDescriptor Time Series.
//
// Specifies the meta-data required to define a time series of data
// (set of data points) for a metric.
//
// swagger:model EntitySchemaProto_TimeSeriesDescriptor
type EntitySchemaProtoTimeSeriesDescriptor struct {

	// Specifies a descriptive name for the metric that is displayed in the
	// Advanced Diagnostics of the Cohesity Dashboard.
	// For example for the 'kUnmorphedUsageBytes' metric, the descriptive
	// name is "Total Logical Space Used".
	MetricDescriptiveName *string `json:"metricDescriptiveName,omitempty"`

	// Specifies the name of the metric such as 'kUnmorphedUsageBytes'.
	// It should be unique in an entity schema.
	MetricName *string `json:"metricName,omitempty"`

	// metric unit
	MetricUnit *EntitySchemaProtoTimeSeriesDescriptorMetricUnit `json:"metricUnit,omitempty"`

	// Specifies a suggestion for the interval to collect raw data points.
	RawMetricPublishIntervalHintSecs *int32 `json:"rawMetricPublishIntervalHintSecs,omitempty"`

	// Specifies how long the data point will be stored.
	// Note: In statsv2, as timeseries data of an entity is stored per
	// scribe row with metrics as columns, it is good to have
	// time_to_live_secs per schema(defined below)
	// For existing schemas, we will consider highest time_to_live_secs
	// of all metrics as expiration time for all metrics defined in schema.
	TimeToLiveSecs *int64 `json:"timeToLiveSecs,omitempty"`

	// Specifies the value type for this metric.
	// A metric of type 'string" is not supported, instead use 'bytes'.
	// Note that an aggregate metric of type 'bytes' is not supported.
	// 0 specifies a value type of Int64.
	// 1 specifies a value type of Double.
	// 2 specifies a value type of String.
	// 3 specifies a value type of Bytes.
	ValueType *int32 `json:"valueType,omitempty"`
}

// Validate validates this entity schema proto time series descriptor
func (m *EntitySchemaProtoTimeSeriesDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetricUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntitySchemaProtoTimeSeriesDescriptor) validateMetricUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricUnit) { // not required
		return nil
	}

	if m.MetricUnit != nil {
		if err := m.MetricUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metricUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metricUnit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this entity schema proto time series descriptor based on the context it is used
func (m *EntitySchemaProtoTimeSeriesDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetricUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntitySchemaProtoTimeSeriesDescriptor) contextValidateMetricUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricUnit != nil {

		if swag.IsZero(m.MetricUnit) { // not required
			return nil
		}

		if err := m.MetricUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metricUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metricUnit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntitySchemaProtoTimeSeriesDescriptor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntitySchemaProtoTimeSeriesDescriptor) UnmarshalBinary(b []byte) error {
	var res EntitySchemaProtoTimeSeriesDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
