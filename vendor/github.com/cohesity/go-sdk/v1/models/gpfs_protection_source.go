// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GpfsProtectionSource GPFS Protection Source.
//
// Specifies a Protection Source in GPFS environment.
//
// swagger:model GpfsProtectionSource
type GpfsProtectionSource struct {

	// Specifies information of an GPFS Cluster. This is set only
	// when the entity type is 'kCluster'.
	Cluster *GpfsCluster `json:"cluster,omitempty"`

	// Specifies information about a mount point in an GPFS file system.
	// This is set only when the entity type is 'kFileset'.
	Fileset *GpfsFileset `json:"fileset,omitempty"`

	// Specifies an access zone in an GPFS file system. This is set only
	// when the entity type is 'kFilesystem'.
	Filesystem *GpfsFilesystem `json:"filesystem,omitempty"`

	// Specifies a unique name of the Protection Source.
	Name *string `json:"name,omitempty"`

	// Specifies the type of the entity in an GPFS file system
	// like 'kCluster', 'kFilesystem', or, 'kFileset'.
	// 'kCluster' indicates an GPFS Cluster.
	// 'kFilesystem' indicates a top level filesystem on GPFS cluster.
	// 'kFileset' indicates a fileset within a filesystem.
	// Enum: ["kCluster","kFilesystem","kFileset"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this gpfs protection source
func (m *GpfsProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilesystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GpfsProtectionSource) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *GpfsProtectionSource) validateFileset(formats strfmt.Registry) error {
	if swag.IsZero(m.Fileset) { // not required
		return nil
	}

	if m.Fileset != nil {
		if err := m.Fileset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileset")
			}
			return err
		}
	}

	return nil
}

func (m *GpfsProtectionSource) validateFilesystem(formats strfmt.Registry) error {
	if swag.IsZero(m.Filesystem) { // not required
		return nil
	}

	if m.Filesystem != nil {
		if err := m.Filesystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filesystem")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filesystem")
			}
			return err
		}
	}

	return nil
}

var gpfsProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kFilesystem","kFileset"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gpfsProtectionSourceTypeTypePropEnum = append(gpfsProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// GpfsProtectionSourceTypeKCluster captures enum value "kCluster"
	GpfsProtectionSourceTypeKCluster string = "kCluster"

	// GpfsProtectionSourceTypeKFilesystem captures enum value "kFilesystem"
	GpfsProtectionSourceTypeKFilesystem string = "kFilesystem"

	// GpfsProtectionSourceTypeKFileset captures enum value "kFileset"
	GpfsProtectionSourceTypeKFileset string = "kFileset"
)

// prop value enum
func (m *GpfsProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gpfsProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GpfsProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this gpfs protection source based on the context it is used
func (m *GpfsProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilesystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GpfsProtectionSource) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {

		if swag.IsZero(m.Cluster) { // not required
			return nil
		}

		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *GpfsProtectionSource) contextValidateFileset(ctx context.Context, formats strfmt.Registry) error {

	if m.Fileset != nil {

		if swag.IsZero(m.Fileset) { // not required
			return nil
		}

		if err := m.Fileset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileset")
			}
			return err
		}
	}

	return nil
}

func (m *GpfsProtectionSource) contextValidateFilesystem(ctx context.Context, formats strfmt.Registry) error {

	if m.Filesystem != nil {

		if swag.IsZero(m.Filesystem) { // not required
			return nil
		}

		if err := m.Filesystem.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filesystem")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filesystem")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GpfsProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GpfsProtectionSource) UnmarshalBinary(b []byte) error {
	var res GpfsProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
