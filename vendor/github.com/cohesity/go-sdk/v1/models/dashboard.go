// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Dashboard Dashboard.
//
// Data shown on Dashboard.
//
// swagger:model Dashboard
type Dashboard struct {

	// Audit Logs.
	AuditLogs *AuditLogsTile `json:"auditLogs,omitempty"`

	// Id of the cluster for which dashboard is given.
	ClusterID *int64 `json:"clusterId,omitempty"`

	// Cluster Health and alerts.
	Health *HealthTile `json:"health,omitempty"`

	// IOPs.
	Iops *IopsTile `json:"iops,omitempty"`

	// Protection Job Runs.
	JobRuns *JobRunsTile `json:"jobRuns,omitempty"`

	// ProtectedObjects related stats.
	ProtectedObjects *ProtectedObjectsTile `json:"protectedObjects,omitempty"`

	// Protection related stats.
	Protection *ProtectionTile `json:"protection,omitempty"`

	// Recoveries related stats.
	Recoveries *RecoveriesTile `json:"recoveries,omitempty"`

	// Storage efficiency stats.
	StorageEfficiency *StorageEfficiencyTile `json:"storageEfficiency,omitempty"`

	// Throughput.
	Throughput *ThroughputTile `json:"throughput,omitempty"`
}

// Validate validates this dashboard
func (m *Dashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobRuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectedObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageEfficiency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dashboard) validateAuditLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	if m.AuditLogs != nil {
		if err := m.AuditLogs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditLogs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auditLogs")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateIops(formats strfmt.Registry) error {
	if swag.IsZero(m.Iops) { // not required
		return nil
	}

	if m.Iops != nil {
		if err := m.Iops.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iops")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iops")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateJobRuns(formats strfmt.Registry) error {
	if swag.IsZero(m.JobRuns) { // not required
		return nil
	}

	if m.JobRuns != nil {
		if err := m.JobRuns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobRuns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobRuns")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateProtectedObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectedObjects) { // not required
		return nil
	}

	if m.ProtectedObjects != nil {
		if err := m.ProtectedObjects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectedObjects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectedObjects")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateProtection(formats strfmt.Registry) error {
	if swag.IsZero(m.Protection) { // not required
		return nil
	}

	if m.Protection != nil {
		if err := m.Protection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateRecoveries(formats strfmt.Registry) error {
	if swag.IsZero(m.Recoveries) { // not required
		return nil
	}

	if m.Recoveries != nil {
		if err := m.Recoveries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveries")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateStorageEfficiency(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageEfficiency) { // not required
		return nil
	}

	if m.StorageEfficiency != nil {
		if err := m.StorageEfficiency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageEfficiency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageEfficiency")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateThroughput(formats strfmt.Registry) error {
	if swag.IsZero(m.Throughput) { // not required
		return nil
	}

	if m.Throughput != nil {
		if err := m.Throughput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dashboard based on the context it is used
func (m *Dashboard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobRuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectedObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageEfficiency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dashboard) contextValidateAuditLogs(ctx context.Context, formats strfmt.Registry) error {

	if m.AuditLogs != nil {

		if swag.IsZero(m.AuditLogs) { // not required
			return nil
		}

		if err := m.AuditLogs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auditLogs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auditLogs")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) contextValidateHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.Health != nil {

		if swag.IsZero(m.Health) { // not required
			return nil
		}

		if err := m.Health.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) contextValidateIops(ctx context.Context, formats strfmt.Registry) error {

	if m.Iops != nil {

		if swag.IsZero(m.Iops) { // not required
			return nil
		}

		if err := m.Iops.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iops")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iops")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) contextValidateJobRuns(ctx context.Context, formats strfmt.Registry) error {

	if m.JobRuns != nil {

		if swag.IsZero(m.JobRuns) { // not required
			return nil
		}

		if err := m.JobRuns.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobRuns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobRuns")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) contextValidateProtectedObjects(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectedObjects != nil {

		if swag.IsZero(m.ProtectedObjects) { // not required
			return nil
		}

		if err := m.ProtectedObjects.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectedObjects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectedObjects")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) contextValidateProtection(ctx context.Context, formats strfmt.Registry) error {

	if m.Protection != nil {

		if swag.IsZero(m.Protection) { // not required
			return nil
		}

		if err := m.Protection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) contextValidateRecoveries(ctx context.Context, formats strfmt.Registry) error {

	if m.Recoveries != nil {

		if swag.IsZero(m.Recoveries) { // not required
			return nil
		}

		if err := m.Recoveries.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveries")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) contextValidateStorageEfficiency(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageEfficiency != nil {

		if swag.IsZero(m.StorageEfficiency) { // not required
			return nil
		}

		if err := m.StorageEfficiency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageEfficiency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageEfficiency")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) contextValidateThroughput(ctx context.Context, formats strfmt.Registry) error {

	if m.Throughput != nil {

		if swag.IsZero(m.Throughput) { // not required
			return nil
		}

		if err := m.Throughput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Dashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dashboard) UnmarshalBinary(b []byte) error {
	var res Dashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
