// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureKmsConfiguration AzureKmsConfiguration to define Azure KMS config.
//
// swagger:model AzureKmsConfiguration
type AzureKmsConfiguration struct {

	// Specifies the cohesity managed key vault details.
	CohesityKeyVault *KeyVaultParams `json:"cohesityKeyVault,omitempty"`

	// Specifies the customer managed key vault details.
	CustomerKeyVault *KeyVaultParams `json:"customerKeyVault,omitempty"`

	// Specifies if its a cohesity managed or customer managed key vault.
	// 'kCohesityManaged' indicates an internal KMS object.
	// 'kCustomerManaged' indicates an Aws KMS object.
	// Enum: ["kCohesityManaged","kCustomerManaged"]
	VaultOwner *string `json:"vaultOwner,omitempty"`
}

// Validate validates this azure kms configuration
func (m *AzureKmsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCohesityKeyVault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerKeyVault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultOwner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKmsConfiguration) validateCohesityKeyVault(formats strfmt.Registry) error {
	if swag.IsZero(m.CohesityKeyVault) { // not required
		return nil
	}

	if m.CohesityKeyVault != nil {
		if err := m.CohesityKeyVault.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cohesityKeyVault")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cohesityKeyVault")
			}
			return err
		}
	}

	return nil
}

func (m *AzureKmsConfiguration) validateCustomerKeyVault(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerKeyVault) { // not required
		return nil
	}

	if m.CustomerKeyVault != nil {
		if err := m.CustomerKeyVault.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerKeyVault")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerKeyVault")
			}
			return err
		}
	}

	return nil
}

var azureKmsConfigurationTypeVaultOwnerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCohesityManaged","kCustomerManaged"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureKmsConfigurationTypeVaultOwnerPropEnum = append(azureKmsConfigurationTypeVaultOwnerPropEnum, v)
	}
}

const (

	// AzureKmsConfigurationVaultOwnerKCohesityManaged captures enum value "kCohesityManaged"
	AzureKmsConfigurationVaultOwnerKCohesityManaged string = "kCohesityManaged"

	// AzureKmsConfigurationVaultOwnerKCustomerManaged captures enum value "kCustomerManaged"
	AzureKmsConfigurationVaultOwnerKCustomerManaged string = "kCustomerManaged"
)

// prop value enum
func (m *AzureKmsConfiguration) validateVaultOwnerEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureKmsConfigurationTypeVaultOwnerPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureKmsConfiguration) validateVaultOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultOwner) { // not required
		return nil
	}

	// value enum
	if err := m.validateVaultOwnerEnum("vaultOwner", "body", *m.VaultOwner); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this azure kms configuration based on the context it is used
func (m *AzureKmsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCohesityKeyVault(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerKeyVault(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKmsConfiguration) contextValidateCohesityKeyVault(ctx context.Context, formats strfmt.Registry) error {

	if m.CohesityKeyVault != nil {

		if swag.IsZero(m.CohesityKeyVault) { // not required
			return nil
		}

		if err := m.CohesityKeyVault.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cohesityKeyVault")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cohesityKeyVault")
			}
			return err
		}
	}

	return nil
}

func (m *AzureKmsConfiguration) contextValidateCustomerKeyVault(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomerKeyVault != nil {

		if swag.IsZero(m.CustomerKeyVault) { // not required
			return nil
		}

		if err := m.CustomerKeyVault.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerKeyVault")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerKeyVault")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureKmsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKmsConfiguration) UnmarshalBinary(b []byte) error {
	var res AzureKmsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
