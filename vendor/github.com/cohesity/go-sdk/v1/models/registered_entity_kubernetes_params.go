// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisteredEntityKubernetesParams Contains extra parameters needed for K8s registration.
//
// swagger:model RegisteredEntityKubernetesParams
type RegisteredEntityKubernetesParams struct {

	// Datamover image location that will be used to pull the image.
	DatamoverImageLocation *string `json:"datamoverImageLocation,omitempty"`

	// Service type. This will only be applicable to kCluster entities.
	DatamoverServiceType *int32 `json:"datamoverServiceType,omitempty"`

	// VLAN information of the default VLAN.
	DefaultVlanParams *VlanParams `json:"defaultVlanParams,omitempty"`

	// K8s distribution. This will only be applicable to kCluster entities.
	Distribution *int32 `json:"distribution,omitempty"`

	// Init container image used for mounting PVCs
	InitContainerImageLocation *string `json:"initContainerImageLocation,omitempty"`

	// S3 account ID that is used to register the source.
	S3AccountID *string `json:"s3AccountId,omitempty"`

	// Contains generic annotations to be put on services.
	ServiceAnnotations map[string]string `json:"serviceAnnotations,omitempty"`

	// Custom tolerations for Datamover pods.
	TolerationsVec []*PodInfoPodSpecToleration `json:"tolerationsVec"`

	// Velero AWS plugin location from a private registry.
	VeleroAwsPluginImageLocation *string `json:"veleroAwsPluginImageLocation,omitempty"`

	// Velero image location if coming from a private registry.
	VeleroImageLocation *string `json:"veleroImageLocation,omitempty"`

	// Velero Openshift plugin location from a private registry.
	VeleroOpenshiftPluginImageLocation *string `json:"veleroOpenshiftPluginImageLocation,omitempty"`

	// VLAN information provided during registration.
	VlanInfoVec []*VlanInfo `json:"vlanInfoVec"`
}

// Validate validates this registered entity kubernetes params
func (m *RegisteredEntityKubernetesParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTolerationsVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityKubernetesParams) validateDefaultVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultVlanParams) { // not required
		return nil
	}

	if m.DefaultVlanParams != nil {
		if err := m.DefaultVlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityKubernetesParams) validateTolerationsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.TolerationsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.TolerationsVec); i++ {
		if swag.IsZero(m.TolerationsVec[i]) { // not required
			continue
		}

		if m.TolerationsVec[i] != nil {
			if err := m.TolerationsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tolerationsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tolerationsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityKubernetesParams) validateVlanInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.VlanInfoVec); i++ {
		if swag.IsZero(m.VlanInfoVec[i]) { // not required
			continue
		}

		if m.VlanInfoVec[i] != nil {
			if err := m.VlanInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlanInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlanInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this registered entity kubernetes params based on the context it is used
func (m *RegisteredEntityKubernetesParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTolerationsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityKubernetesParams) contextValidateDefaultVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultVlanParams != nil {

		if swag.IsZero(m.DefaultVlanParams) { // not required
			return nil
		}

		if err := m.DefaultVlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityKubernetesParams) contextValidateTolerationsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TolerationsVec); i++ {

		if m.TolerationsVec[i] != nil {

			if swag.IsZero(m.TolerationsVec[i]) { // not required
				return nil
			}

			if err := m.TolerationsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tolerationsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tolerationsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityKubernetesParams) contextValidateVlanInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VlanInfoVec); i++ {

		if m.VlanInfoVec[i] != nil {

			if swag.IsZero(m.VlanInfoVec[i]) { // not required
				return nil
			}

			if err := m.VlanInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlanInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlanInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredEntityKubernetesParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredEntityKubernetesParams) UnmarshalBinary(b []byte) error {
	var res RegisteredEntityKubernetesParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
