// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExchangeDatabaseInfo Exchange Database Information
//
// Specifies the information about the Exchange Database.
//
// swagger:model ExchangeDatabaseInfo
type ExchangeDatabaseInfo struct {

	// Specifies the entity id of the Exchange Application Server which has
	// this database copy.
	AppServerID *int64 `json:"appServerId,omitempty"`

	// Specifies if backup is supported for the Exchange database copy.
	BackupSupported *bool `json:"backupSupported,omitempty"`

	// Specifies any reason(s) for Exchange database backup not supported.
	BackupUnsupportedReasons []string `json:"backupUnsupportedReasons"`

	// Specifies the time when the database is created in Unix epoch time
	// in milliseconds.
	CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

	// Specifies the state of the Exchange database copy.
	// Specifies the state of Exchange Database Copy.
	//
	//
	// 'kUnknown' indicates the status is not known.
	// 'kMounted' indicates the exchange database copy is mounted and healthy.
	// 'kError' indicates  the  exchange  database  copy  is unmounted or
	// partially mounted or is in error state.
	// Enum: ["kUnknown","kMounted","kError"]
	DatabaseState *string `json:"databaseState,omitempty"`

	// Specifies the size of the Exchange database copy in bytes.
	DbSizeBytes *int64 `json:"dbSizeBytes,omitempty"`

	// Specifies the guid of the Exchange Database.
	Dbguid *string `json:"dbguid,omitempty"`

	// Specifes the name of the Exchange Database.
	Name *string `json:"name,omitempty"`

	// Specifies the owner entity id of the Exchange Application Server which
	// has this database copy.
	OwnerID *int64 `json:"ownerId,omitempty"`

	// Specifies UTC time offset of database creation time.
	UtcOffsetMin *int64 `json:"utcOffsetMin,omitempty"`
}

// Validate validates this exchange database info
func (m *ExchangeDatabaseInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatabaseState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var exchangeDatabaseInfoTypeDatabaseStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUnknown","kMounted","kError"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exchangeDatabaseInfoTypeDatabaseStatePropEnum = append(exchangeDatabaseInfoTypeDatabaseStatePropEnum, v)
	}
}

const (

	// ExchangeDatabaseInfoDatabaseStateKUnknown captures enum value "kUnknown"
	ExchangeDatabaseInfoDatabaseStateKUnknown string = "kUnknown"

	// ExchangeDatabaseInfoDatabaseStateKMounted captures enum value "kMounted"
	ExchangeDatabaseInfoDatabaseStateKMounted string = "kMounted"

	// ExchangeDatabaseInfoDatabaseStateKError captures enum value "kError"
	ExchangeDatabaseInfoDatabaseStateKError string = "kError"
)

// prop value enum
func (m *ExchangeDatabaseInfo) validateDatabaseStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exchangeDatabaseInfoTypeDatabaseStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExchangeDatabaseInfo) validateDatabaseState(formats strfmt.Registry) error {
	if swag.IsZero(m.DatabaseState) { // not required
		return nil
	}

	// value enum
	if err := m.validateDatabaseStateEnum("databaseState", "body", *m.DatabaseState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this exchange database info based on context it is used
func (m *ExchangeDatabaseInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeDatabaseInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeDatabaseInfo) UnmarshalBinary(b []byte) error {
	var res ExchangeDatabaseInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
