// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateOracleEntity private oracle entity
//
// swagger:model PrivateOracleEntity
type PrivateOracleEntity struct {

	// Database Entity Information.
	DbEntityInfo *DBEntityInfo `json:"dbEntityInfo,omitempty"`

	// This is a general description that could be set for some entities.
	Description *string `json:"description,omitempty"`

	// Front end size information. An example use case is for billing purposes
	// in "[Backup | Data Management] as a Service" offering.
	// The total size of this entity. Currently this is only set for databases
	// and has the same value as 'total_size_bytes'.
	FrontEndSizeInfo *SizeInfo `json:"frontEndSizeInfo,omitempty"`

	// A human readable name for the object.
	Name *string `json:"name,omitempty"`

	// The entity id of the owner entity (such as a VM). This is only set if
	// type is kDatabase.
	OwnerID *int64 `json:"ownerId,omitempty"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// The UUID of the object.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this private oracle entity
func (m *PrivateOracleEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbEntityInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrontEndSizeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateOracleEntity) validateDbEntityInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DbEntityInfo) { // not required
		return nil
	}

	if m.DbEntityInfo != nil {
		if err := m.DbEntityInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbEntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateOracleEntity) validateFrontEndSizeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FrontEndSizeInfo) { // not required
		return nil
	}

	if m.FrontEndSizeInfo != nil {
		if err := m.FrontEndSizeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frontEndSizeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("frontEndSizeInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private oracle entity based on the context it is used
func (m *PrivateOracleEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDbEntityInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrontEndSizeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateOracleEntity) contextValidateDbEntityInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DbEntityInfo != nil {

		if swag.IsZero(m.DbEntityInfo) { // not required
			return nil
		}

		if err := m.DbEntityInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbEntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateOracleEntity) contextValidateFrontEndSizeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FrontEndSizeInfo != nil {

		if swag.IsZero(m.FrontEndSizeInfo) { // not required
			return nil
		}

		if err := m.FrontEndSizeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frontEndSizeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("frontEndSizeInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateOracleEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateOracleEntity) UnmarshalBinary(b []byte) error {
	var res PrivateOracleEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
