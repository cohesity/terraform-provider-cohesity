// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantAccess Specfies the Tenant Access for MCM user.
//
// swagger:model TenantAccess
type TenantAccess struct {

	// Specifies the list of clusters.
	// Min Items: 1
	// Unique: true
	ClusterIdentifiers []*ClusterIdentifier `json:"clusterIdentifiers"`

	// Specifies the epoch time in milliseconds when the tenant access was
	// created.
	CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

	// Specifies the epoch time in milliseconds when the tenant access becomes
	// effective. Until that time, the user cannot log in.
	EffectiveTimeMsecs *int64 `json:"effectiveTimeMsecs,omitempty"`

	// Specifies the epoch time in milliseconds when the tenant access becomes
	// expired. After that, the user cannot log in.
	ExpiredTimeMsecs *int64 `json:"expiredTimeMsecs,omitempty"`

	// IsAccessActive specifies whether or not a tenant access is active, or
	// has been deactivated by the customer. The default behavior is 'true'.
	IsAccessActive *bool `json:"isAccessActive,omitempty"`

	// Specifies whether or not the tenant is active.
	IsActive *bool `json:"isActive,omitempty"`

	// Specifies whether or not the tenant is deleted.
	IsDeleted *bool `json:"isDeleted,omitempty"`

	// Specifies the epoch time in milliseconds when the tenant access was last
	// modified.
	LastUpdatedTimeMsecs *int64 `json:"lastUpdatedTimeMsecs,omitempty"`

	// Specifies the Cohesity roles to associate with the user such as
	// such as 'Admin', 'Ops' or 'View'.
	// Min Items: 1
	// Unique: true
	Roles []string `json:"roles"`

	// Specifies the tenant id.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies the tenant name.
	TenantName *string `json:"tenantName,omitempty"`

	// Specifies the MCM tenant type.
	// 'Dmaas' implies tenant type is DMaaS.
	// 'Mcm' implies tenant is Mcm Cluster tenant.
	// Enum: ["Dmaas","Mcm"]
	TenantType *string `json:"tenantType,omitempty"`
}

// Validate validates this tenant access
func (m *TenantAccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantAccess) validateClusterIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterIdentifiers) { // not required
		return nil
	}

	iClusterIdentifiersSize := int64(len(m.ClusterIdentifiers))

	if err := validate.MinItems("clusterIdentifiers", "body", iClusterIdentifiersSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("clusterIdentifiers", "body", m.ClusterIdentifiers); err != nil {
		return err
	}

	for i := 0; i < len(m.ClusterIdentifiers); i++ {
		if swag.IsZero(m.ClusterIdentifiers[i]) { // not required
			continue
		}

		if m.ClusterIdentifiers[i] != nil {
			if err := m.ClusterIdentifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterIdentifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterIdentifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TenantAccess) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	iRolesSize := int64(len(m.Roles))

	if err := validate.MinItems("roles", "body", iRolesSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("roles", "body", m.Roles); err != nil {
		return err
	}

	return nil
}

var tenantAccessTypeTenantTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Dmaas","Mcm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantAccessTypeTenantTypePropEnum = append(tenantAccessTypeTenantTypePropEnum, v)
	}
}

const (

	// TenantAccessTenantTypeDmaas captures enum value "Dmaas"
	TenantAccessTenantTypeDmaas string = "Dmaas"

	// TenantAccessTenantTypeMcm captures enum value "Mcm"
	TenantAccessTenantTypeMcm string = "Mcm"
)

// prop value enum
func (m *TenantAccess) validateTenantTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantAccessTypeTenantTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantAccess) validateTenantType(formats strfmt.Registry) error {
	if swag.IsZero(m.TenantType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTenantTypeEnum("tenantType", "body", *m.TenantType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tenant access based on the context it is used
func (m *TenantAccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantAccess) contextValidateClusterIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterIdentifiers); i++ {

		if m.ClusterIdentifiers[i] != nil {

			if swag.IsZero(m.ClusterIdentifiers[i]) { // not required
				return nil
			}

			if err := m.ClusterIdentifiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterIdentifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterIdentifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenantAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantAccess) UnmarshalBinary(b []byte) error {
	var res TenantAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
