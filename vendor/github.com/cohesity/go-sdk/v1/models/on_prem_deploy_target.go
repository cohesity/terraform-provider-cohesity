// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OnPremDeployTarget Message that specifies the details about OnPremDeploy target where backup
// snapshots may be converted and deployed.
//
// swagger:model OnPremDeployTarget
type OnPremDeployTarget struct {

	// Contains information needed to identify various resources when deploying
	// VMs to OnPrem sources like VMware.
	DeployVmsToOnpremParams *DeployVMsToOnPremParams `json:"deployVmsToOnpremParams,omitempty"`

	// Entity corresponding to the onprem deploy target.
	TargetEntity *EntityProto `json:"targetEntity,omitempty"`

	// The type of the OnPremDeploy target. Only VMware is supported for now.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this on prem deploy target
func (m *OnPremDeployTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployVmsToOnpremParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnPremDeployTarget) validateDeployVmsToOnpremParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToOnpremParams) { // not required
		return nil
	}

	if m.DeployVmsToOnpremParams != nil {
		if err := m.DeployVmsToOnpremParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToOnpremParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToOnpremParams")
			}
			return err
		}
	}

	return nil
}

func (m *OnPremDeployTarget) validateTargetEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetEntity) { // not required
		return nil
	}

	if m.TargetEntity != nil {
		if err := m.TargetEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this on prem deploy target based on the context it is used
func (m *OnPremDeployTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeployVmsToOnpremParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnPremDeployTarget) contextValidateDeployVmsToOnpremParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToOnpremParams != nil {

		if swag.IsZero(m.DeployVmsToOnpremParams) { // not required
			return nil
		}

		if err := m.DeployVmsToOnpremParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToOnpremParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToOnpremParams")
			}
			return err
		}
	}

	return nil
}

func (m *OnPremDeployTarget) contextValidateTargetEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetEntity != nil {

		if swag.IsZero(m.TargetEntity) { // not required
			return nil
		}

		if err := m.TargetEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OnPremDeployTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnPremDeployTarget) UnmarshalBinary(b []byte) error {
	var res OnPremDeployTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
