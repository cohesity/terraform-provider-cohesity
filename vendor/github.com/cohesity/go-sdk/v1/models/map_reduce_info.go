// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MapReduceInfo Map Reduce Information.
//
// This will be used to encapsulate information about mapper and reducer only.
// On UI this will be used to show the list of available apps to the user.
//
// swagger:model MapReduceInfo
type MapReduceInfo struct {

	// app property
	AppProperty *MapReduceInfoAppProperty `json:"appProperty,omitempty"`

	// Auxiliary data for map reduce.
	AuxData *MapReduceAuxData `json:"auxData,omitempty"`

	// Map reduce job description.
	Description *string `json:"description,omitempty"`

	// List of all excluded data sources for this app.
	ExcludedDataSourceVec []int32 `json:"excludedDataSourceVec"`

	// ID of map reduce job.
	ID *int64 `json:"id,omitempty"`

	// Flag to denote if this is system pre-defined app or user has written this
	// app.
	IsSystemDefined *bool `json:"isSystemDefined,omitempty"`

	// ID of the mapper to process the input.
	MapperID *int64 `json:"mapperId,omitempty"`

	// Map reduce job name.
	Name *string `json:"name,omitempty"`

	// ID of the reducer.
	ReducerID *int64 `json:"reducerId,omitempty"`

	// required property vec
	RequiredPropertyVec []*MapReduceInfoRequiredProperty `json:"requiredPropertyVec"`
}

// Validate validates this map reduce info
func (m *MapReduceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppProperty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuxData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredPropertyVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MapReduceInfo) validateAppProperty(formats strfmt.Registry) error {
	if swag.IsZero(m.AppProperty) { // not required
		return nil
	}

	if m.AppProperty != nil {
		if err := m.AppProperty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appProperty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appProperty")
			}
			return err
		}
	}

	return nil
}

func (m *MapReduceInfo) validateAuxData(formats strfmt.Registry) error {
	if swag.IsZero(m.AuxData) { // not required
		return nil
	}

	if m.AuxData != nil {
		if err := m.AuxData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auxData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auxData")
			}
			return err
		}
	}

	return nil
}

func (m *MapReduceInfo) validateRequiredPropertyVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredPropertyVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RequiredPropertyVec); i++ {
		if swag.IsZero(m.RequiredPropertyVec[i]) { // not required
			continue
		}

		if m.RequiredPropertyVec[i] != nil {
			if err := m.RequiredPropertyVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requiredPropertyVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requiredPropertyVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this map reduce info based on the context it is used
func (m *MapReduceInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppProperty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuxData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequiredPropertyVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MapReduceInfo) contextValidateAppProperty(ctx context.Context, formats strfmt.Registry) error {

	if m.AppProperty != nil {

		if swag.IsZero(m.AppProperty) { // not required
			return nil
		}

		if err := m.AppProperty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appProperty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appProperty")
			}
			return err
		}
	}

	return nil
}

func (m *MapReduceInfo) contextValidateAuxData(ctx context.Context, formats strfmt.Registry) error {

	if m.AuxData != nil {

		if swag.IsZero(m.AuxData) { // not required
			return nil
		}

		if err := m.AuxData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auxData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auxData")
			}
			return err
		}
	}

	return nil
}

func (m *MapReduceInfo) contextValidateRequiredPropertyVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RequiredPropertyVec); i++ {

		if m.RequiredPropertyVec[i] != nil {

			if swag.IsZero(m.RequiredPropertyVec[i]) { // not required
				return nil
			}

			if err := m.RequiredPropertyVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requiredPropertyVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requiredPropertyVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MapReduceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MapReduceInfo) UnmarshalBinary(b []byte) error {
	var res MapReduceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
