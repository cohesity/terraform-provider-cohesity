// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VmwareSpecialParameters Vmware Source Special Job Parameters.
//
// Specifies additional special settings applicable for a Protection Source
// of 'kVMware' type in a Protection Job.
//
// swagger:model VmwareSpecialParameters
type VmwareSpecialParameters struct {

	// Specifies parameters that are related to applications running on the
	// Protection Source.
	ApplicationParameters *ApplicationParameters `json:"applicationParameters,omitempty"`

	// Specifies the list of Disks to be excluded from backing up. These disks
	// are excluded from all Protection Sources in the Protection Job.
	ExcludedDisks []*DiskUnit `json:"excludedDisks"`

	// VM Credentials.
	//
	// Specifies the administrator credentials to log in to the
	// guest Windows system of a VM that hosts the Microsoft Exchange Server.
	// If truncateExchangeLog is set to true and the specified source
	// is a VM, administrator credentials to log in to the guest Windows system
	// of the VM must be provided to truncate the logs.
	// This field is only applicable to Sources in the kVMware environment.
	VMCredentials struct {
		Credentials
	} `json:"vmCredentials,omitempty"`
}

// Validate validates this vmware special parameters
func (m *VmwareSpecialParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludedDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareSpecialParameters) validateApplicationParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationParameters) { // not required
		return nil
	}

	if m.ApplicationParameters != nil {
		if err := m.ApplicationParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationParameters")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareSpecialParameters) validateExcludedDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludedDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.ExcludedDisks); i++ {
		if swag.IsZero(m.ExcludedDisks[i]) { // not required
			continue
		}

		if m.ExcludedDisks[i] != nil {
			if err := m.ExcludedDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excludedDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("excludedDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VmwareSpecialParameters) validateVMCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.VMCredentials) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this vmware special parameters based on the context it is used
func (m *VmwareSpecialParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExcludedDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareSpecialParameters) contextValidateApplicationParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationParameters != nil {

		if swag.IsZero(m.ApplicationParameters) { // not required
			return nil
		}

		if err := m.ApplicationParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationParameters")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareSpecialParameters) contextValidateExcludedDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExcludedDisks); i++ {

		if m.ExcludedDisks[i] != nil {

			if swag.IsZero(m.ExcludedDisks[i]) { // not required
				return nil
			}

			if err := m.ExcludedDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excludedDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("excludedDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VmwareSpecialParameters) contextValidateVMCredentials(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareSpecialParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareSpecialParameters) UnmarshalBinary(b []byte) error {
	var res VmwareSpecialParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
