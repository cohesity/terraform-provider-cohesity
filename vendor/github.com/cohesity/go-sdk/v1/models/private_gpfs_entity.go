// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateGpfsEntity private gpfs entity
//
// swagger:model PrivateGpfsEntity
type PrivateGpfsEntity struct {

	// Specific information of a cluster (only valid for cluster).
	ClusterInfo *PrivateClusterInfo `json:"clusterInfo,omitempty"`

	// Specific information of a fileset (only valid for fileset).
	FilesetInfo *FilesetInfo `json:"filesetInfo,omitempty"`

	// Specific information of a filesystem (only valid for filesystem).
	FilesystemInfo *FilesystemInfo `json:"filesystemInfo,omitempty"`

	// The name of the entity.
	Name *string `json:"name,omitempty"`

	// The type of the entity.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this private gpfs entity
func (m *PrivateGpfsEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilesetInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilesystemInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateGpfsEntity) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGpfsEntity) validateFilesetInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FilesetInfo) { // not required
		return nil
	}

	if m.FilesetInfo != nil {
		if err := m.FilesetInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filesetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filesetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGpfsEntity) validateFilesystemInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FilesystemInfo) { // not required
		return nil
	}

	if m.FilesystemInfo != nil {
		if err := m.FilesystemInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filesystemInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filesystemInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private gpfs entity based on the context it is used
func (m *PrivateGpfsEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilesetInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilesystemInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateGpfsEntity) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {

		if swag.IsZero(m.ClusterInfo) { // not required
			return nil
		}

		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGpfsEntity) contextValidateFilesetInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FilesetInfo != nil {

		if swag.IsZero(m.FilesetInfo) { // not required
			return nil
		}

		if err := m.FilesetInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filesetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filesetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGpfsEntity) contextValidateFilesystemInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FilesystemInfo != nil {

		if swag.IsZero(m.FilesystemInfo) { // not required
			return nil
		}

		if err := m.FilesystemInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filesystemInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filesystemInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateGpfsEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateGpfsEntity) UnmarshalBinary(b []byte) error {
	var res PrivateGpfsEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
