// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CrackedFileDocumentFileVersion Since a file rarely changes, we keep the size,mtime info factored out for
// a continuous run of jobs. If you were to take the instance_ids arrays in
// order and juxtapose them, they'll be sorted. This representation allows us
// to perform deletes efficiently as well, though in some cases can take as
// much space as the scheme above. We only store job id for each file
// versions, the snapshot_timestamp per instance_id is stored in a separate
// key.
//
// swagger:model CrackedFileDocument_FileVersion
type CrackedFileDocumentFileVersion struct {

	// Source inode id metadata for certain adapters e.g. Netapp.
	BackupSourceInodeID *int64 `json:"backupSourceInodeId,omitempty"`

	// We don't use this field anymore in storage. But it is more convenient to
	// give out versions in this format.
	InstanceIds []*MagnetoInstanceID `json:"instanceIds"`

	// Ranges of instance ids which contain this particular file version.
	// These ranges are sorted i.e. upper_limit of ith range is less than
	// lower_limit of (i+1)th range. Only last range in this vector can be an
	// open range.
	JobInstanceIDRangeVec []*CrackedFileDocumentInstanceIDRange `json:"jobInstanceIdRangeVec"`

	// TODO(anshu): Remove this once we migrate to using
	// job_instance_id_range_vec.
	JobInstanceIds []int64 `json:"jobInstanceIds"`

	// mtime usecs
	MtimeUsecs *uint64 `json:"mtimeUsecs,omitempty"`

	// size bytes
	SizeBytes *int64 `json:"sizeBytes,omitempty"`

	// Metadata associated with this doc version. Version equality is most
	// likely affected by this. This proto is checked as a whole for equality
	// after the equality check on "size_bytes" and "mtime_usecs".
	VersionMetadata *CrackedFileDocumentFileVersionVersionMetadata `json:"versionMetadata,omitempty"`
}

// Validate validates this cracked file document file version
func (m *CrackedFileDocumentFileVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobInstanceIDRangeVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrackedFileDocumentFileVersion) validateInstanceIds(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceIds) { // not required
		return nil
	}

	for i := 0; i < len(m.InstanceIds); i++ {
		if swag.IsZero(m.InstanceIds[i]) { // not required
			continue
		}

		if m.InstanceIds[i] != nil {
			if err := m.InstanceIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instanceIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrackedFileDocumentFileVersion) validateJobInstanceIDRangeVec(formats strfmt.Registry) error {
	if swag.IsZero(m.JobInstanceIDRangeVec) { // not required
		return nil
	}

	for i := 0; i < len(m.JobInstanceIDRangeVec); i++ {
		if swag.IsZero(m.JobInstanceIDRangeVec[i]) { // not required
			continue
		}

		if m.JobInstanceIDRangeVec[i] != nil {
			if err := m.JobInstanceIDRangeVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("jobInstanceIdRangeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("jobInstanceIdRangeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrackedFileDocumentFileVersion) validateVersionMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionMetadata) { // not required
		return nil
	}

	if m.VersionMetadata != nil {
		if err := m.VersionMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionMetadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cracked file document file version based on the context it is used
func (m *CrackedFileDocumentFileVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobInstanceIDRangeVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrackedFileDocumentFileVersion) contextValidateInstanceIds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstanceIds); i++ {

		if m.InstanceIds[i] != nil {

			if swag.IsZero(m.InstanceIds[i]) { // not required
				return nil
			}

			if err := m.InstanceIds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instanceIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrackedFileDocumentFileVersion) contextValidateJobInstanceIDRangeVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JobInstanceIDRangeVec); i++ {

		if m.JobInstanceIDRangeVec[i] != nil {

			if swag.IsZero(m.JobInstanceIDRangeVec[i]) { // not required
				return nil
			}

			if err := m.JobInstanceIDRangeVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("jobInstanceIdRangeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("jobInstanceIdRangeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrackedFileDocumentFileVersion) contextValidateVersionMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.VersionMetadata != nil {

		if swag.IsZero(m.VersionMetadata) { // not required
			return nil
		}

		if err := m.VersionMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrackedFileDocumentFileVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrackedFileDocumentFileVersion) UnmarshalBinary(b []byte) error {
	var res CrackedFileDocumentFileVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
