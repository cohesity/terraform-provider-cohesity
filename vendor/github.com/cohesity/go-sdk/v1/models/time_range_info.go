// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TimeRangeInfo Information about a set of disjoint, possibly annotated time ranges.
//
// swagger:model TimeRangeInfo
type TimeRangeInfo struct {

	// Error (if any) associated with the time range.
	Error *PrivateErrorProto `json:"error,omitempty"`

	// The set of time ranges, each of which may be tagged with its job. These
	// ranges will be non-overlapping and sorted by increasing start time.
	//
	// An example vector is: ({(1, 20), job1}, {(22, 35)}, {(36, 40), job2}).
	//
	// For any pair of ranges from differing jobs that would have otherwise
	// overlapped, their intersection is removed from the range with the older
	// job or with job field empty. While prioritizing newer jobs is not needed
	// for correctness it results in a more preferable user experience.
	//
	// If there are no ranges, this vector is empty.
	TimeRangeVec []*TimeRange `json:"timeRangeVec"`

	// User message (if any) associated with the time range.
	UserMessage *string `json:"userMessage,omitempty"`
}

// Validate validates this time range info
func (m *TimeRangeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeRangeVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeRangeInfo) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *TimeRangeInfo) validateTimeRangeVec(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRangeVec) { // not required
		return nil
	}

	for i := 0; i < len(m.TimeRangeVec); i++ {
		if swag.IsZero(m.TimeRangeVec[i]) { // not required
			continue
		}

		if m.TimeRangeVec[i] != nil {
			if err := m.TimeRangeVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeRangeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeRangeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this time range info based on the context it is used
func (m *TimeRangeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeRangeVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeRangeInfo) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *TimeRangeInfo) contextValidateTimeRangeVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TimeRangeVec); i++ {

		if m.TimeRangeVec[i] != nil {

			if swag.IsZero(m.TimeRangeVec[i]) { // not required
				return nil
			}

			if err := m.TimeRangeVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeRangeVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeRangeVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeRangeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeRangeInfo) UnmarshalBinary(b []byte) error {
	var res TimeRangeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
