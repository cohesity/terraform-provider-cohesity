// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateDetails Certificate Details.
//
// Specifies details about a certificate.
//
// swagger:model CertificateDetails
type CertificateDetails struct {

	// Specifies the filename of the certificate. This is unique to each
	// certificate generated.
	CertFileName *string `json:"certFileName,omitempty"`

	// Specifies the date in epoch till when the certificate is valid.
	ExpiryDate *string `json:"expiryDate,omitempty"`

	// Each certificate can be deployed to multiple hosts. List of all hosts
	// is returned after deployment.
	HostIps []string `json:"hostIps"`

	// Specifies the type of the host such as 'kSapHana', 'kSapOracle', etc.
	// Specifies the host type of host for generating and deploying a
	// Certificate.
	// 'kOther' indicates it is any of the other hosts.
	// 'kSapOracle' indicates it is a SAP Oracle host.
	// 'kSapHana' indicates it is a SAP HANA host.
	// Enum: ["kOther","kSapOracle","kSapHana"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this certificate details
func (m *CertificateDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var certificateDetailsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kOther","kSapOracle","kSapHana"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certificateDetailsTypeTypePropEnum = append(certificateDetailsTypeTypePropEnum, v)
	}
}

const (

	// CertificateDetailsTypeKOther captures enum value "kOther"
	CertificateDetailsTypeKOther string = "kOther"

	// CertificateDetailsTypeKSapOracle captures enum value "kSapOracle"
	CertificateDetailsTypeKSapOracle string = "kSapOracle"

	// CertificateDetailsTypeKSapHana captures enum value "kSapHana"
	CertificateDetailsTypeKSapHana string = "kSapHana"
)

// prop value enum
func (m *CertificateDetails) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, certificateDetailsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CertificateDetails) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this certificate details based on context it is used
func (m *CertificateDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateDetails) UnmarshalBinary(b []byte) error {
	var res CertificateDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
