// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccessibleEntityInfo Specifies the information about accessible sources for a MSFT user account.
//
// swagger:model AccessibleEntityInfo
type AccessibleEntityInfo struct {

	// Specifies the information about accessible Mailbox source. This contains
	// the associated Source ID & Cluster ID.
	MailboxEntityInfo *ProtectionSourceUID `json:"mailboxEntityInfo,omitempty"`

	// Specifies the information about accessible OneDrive source. This contains
	// the associated Source ID & Cluster ID.
	OneDriveEntityInfo *ProtectionSourceUID `json:"oneDriveEntityInfo,omitempty"`
}

// Validate validates this accessible entity info
func (m *AccessibleEntityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMailboxEntityInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneDriveEntityInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessibleEntityInfo) validateMailboxEntityInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.MailboxEntityInfo) { // not required
		return nil
	}

	if m.MailboxEntityInfo != nil {
		if err := m.MailboxEntityInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailboxEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailboxEntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AccessibleEntityInfo) validateOneDriveEntityInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OneDriveEntityInfo) { // not required
		return nil
	}

	if m.OneDriveEntityInfo != nil {
		if err := m.OneDriveEntityInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveEntityInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this accessible entity info based on the context it is used
func (m *AccessibleEntityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMailboxEntityInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneDriveEntityInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessibleEntityInfo) contextValidateMailboxEntityInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.MailboxEntityInfo != nil {

		if swag.IsZero(m.MailboxEntityInfo) { // not required
			return nil
		}

		if err := m.MailboxEntityInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailboxEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailboxEntityInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AccessibleEntityInfo) contextValidateOneDriveEntityInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OneDriveEntityInfo != nil {

		if swag.IsZero(m.OneDriveEntityInfo) { // not required
			return nil
		}

		if err := m.OneDriveEntityInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveEntityInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveEntityInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessibleEntityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessibleEntityInfo) UnmarshalBinary(b []byte) error {
	var res AccessibleEntityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
