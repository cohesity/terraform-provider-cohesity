// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TenantStats TenantStats is the stats of a single tenant.
//
// swagger:model TenantStats
type TenantStats struct {

	// Specifies a list of groups associated to this tenant (organization).
	GroupList []*StatsGroup `json:"groupList"`

	// Specifies the id of the tenant (organization).
	ID *string `json:"id,omitempty"`

	// Specifies the name of the tenant (organization).
	Name *string `json:"name,omitempty"`

	// Specifies a list of schemaInfos of the tenant (organization).
	SchemaInfoList []*UsageSchemaInfo `json:"schemaInfoList"`

	// Specifies details of statistics of the tenant (organization).
	Stats *DataUsageStats `json:"stats,omitempty"`
}

// Validate validates this tenant stats
func (m *TenantStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemaInfoList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantStats) validateGroupList(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupList) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupList); i++ {
		if swag.IsZero(m.GroupList[i]) { // not required
			continue
		}

		if m.GroupList[i] != nil {
			if err := m.GroupList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TenantStats) validateSchemaInfoList(formats strfmt.Registry) error {
	if swag.IsZero(m.SchemaInfoList) { // not required
		return nil
	}

	for i := 0; i < len(m.SchemaInfoList); i++ {
		if swag.IsZero(m.SchemaInfoList[i]) { // not required
			continue
		}

		if m.SchemaInfoList[i] != nil {
			if err := m.SchemaInfoList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schemaInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schemaInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TenantStats) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tenant stats based on the context it is used
func (m *TenantStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroupList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemaInfoList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantStats) contextValidateGroupList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GroupList); i++ {

		if m.GroupList[i] != nil {

			if swag.IsZero(m.GroupList[i]) { // not required
				return nil
			}

			if err := m.GroupList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TenantStats) contextValidateSchemaInfoList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SchemaInfoList); i++ {

		if m.SchemaInfoList[i] != nil {

			if swag.IsZero(m.SchemaInfoList[i]) { // not required
				return nil
			}

			if err := m.SchemaInfoList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schemaInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schemaInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TenantStats) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenantStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantStats) UnmarshalBinary(b []byte) error {
	var res TenantStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
