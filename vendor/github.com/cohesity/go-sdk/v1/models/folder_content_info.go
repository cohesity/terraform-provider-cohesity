// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FolderContentInfo Creates the info about the content in the folder.
//
// swagger:model FolderContentInfo
type FolderContentInfo struct {

	// Total number of child folders in the public folder.
	ChildFolderCount *int32 `json:"childFolderCount,omitempty"`

	// The display name of the public folder.
	DisplayName *string `json:"displayName,omitempty"`

	// List of extended properties of this folder.
	ExtendedPropertyVec []*FolderContentInfoExtendedProperty `json:"extendedPropertyVec"`

	// Represents the folder class for a given folder.
	FolderClass *string `json:"folderClass,omitempty"`

	// The id of the given folder.
	FolderID *FolderID `json:"folderId,omitempty"`

	// The id of the parent folder of given folder.
	ParentFolderID *FolderID `json:"parentFolderId,omitempty"`

	// Permissions for this folder.
	PermissionSet *PermissionSet `json:"permissionSet,omitempty"`

	// Token identifying the current synchronized state of the folder.
	SyncState *string `json:"syncState,omitempty"`

	// Total number of entities (mails, posts) in the public folder.
	TotalCount *int32 `json:"totalCount,omitempty"`

	// The EWS Folder type.
	Type *int32 `json:"type,omitempty"`

	// Total number of unread entities in the public folder.
	UnreadCount *int32 `json:"unreadCount,omitempty"`
}

// Validate validates this folder content info
func (m *FolderContentInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtendedPropertyVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentFolderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FolderContentInfo) validateExtendedPropertyVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtendedPropertyVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtendedPropertyVec); i++ {
		if swag.IsZero(m.ExtendedPropertyVec[i]) { // not required
			continue
		}

		if m.ExtendedPropertyVec[i] != nil {
			if err := m.ExtendedPropertyVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extendedPropertyVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extendedPropertyVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FolderContentInfo) validateFolderID(formats strfmt.Registry) error {
	if swag.IsZero(m.FolderID) { // not required
		return nil
	}

	if m.FolderID != nil {
		if err := m.FolderID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("folderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("folderId")
			}
			return err
		}
	}

	return nil
}

func (m *FolderContentInfo) validateParentFolderID(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentFolderID) { // not required
		return nil
	}

	if m.ParentFolderID != nil {
		if err := m.ParentFolderID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentFolderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentFolderId")
			}
			return err
		}
	}

	return nil
}

func (m *FolderContentInfo) validatePermissionSet(formats strfmt.Registry) error {
	if swag.IsZero(m.PermissionSet) { // not required
		return nil
	}

	if m.PermissionSet != nil {
		if err := m.PermissionSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissionSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissionSet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this folder content info based on the context it is used
func (m *FolderContentInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtendedPropertyVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFolderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentFolderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissionSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FolderContentInfo) contextValidateExtendedPropertyVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtendedPropertyVec); i++ {

		if m.ExtendedPropertyVec[i] != nil {

			if swag.IsZero(m.ExtendedPropertyVec[i]) { // not required
				return nil
			}

			if err := m.ExtendedPropertyVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extendedPropertyVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extendedPropertyVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FolderContentInfo) contextValidateFolderID(ctx context.Context, formats strfmt.Registry) error {

	if m.FolderID != nil {

		if swag.IsZero(m.FolderID) { // not required
			return nil
		}

		if err := m.FolderID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("folderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("folderId")
			}
			return err
		}
	}

	return nil
}

func (m *FolderContentInfo) contextValidateParentFolderID(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentFolderID != nil {

		if swag.IsZero(m.ParentFolderID) { // not required
			return nil
		}

		if err := m.ParentFolderID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentFolderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentFolderId")
			}
			return err
		}
	}

	return nil
}

func (m *FolderContentInfo) contextValidatePermissionSet(ctx context.Context, formats strfmt.Registry) error {

	if m.PermissionSet != nil {

		if swag.IsZero(m.PermissionSet) { // not required
			return nil
		}

		if err := m.PermissionSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissionSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissionSet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FolderContentInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FolderContentInfo) UnmarshalBinary(b []byte) error {
	var res FolderContentInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
