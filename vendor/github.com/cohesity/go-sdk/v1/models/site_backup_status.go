// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SiteBackupStatus One site backup status.
//
// swagger:model SiteBackupStatus
type SiteBackupStatus struct {

	// List of backuped files. Its PnP package and any other files required to
	// recover the site.
	BackupFileVec []*SiteBackupFile `json:"backupFileVec"`

	// Actual options with which this site was backed up
	// (BackupSiteArg.BackupSiteOptionFlags).
	OptionFlags *uint32 `json:"optionFlags,omitempty"`

	// This site info is used during recovery to recover a full site.
	SiteInfo *SiteInfo `json:"siteInfo,omitempty"`

	// Backup succeeded, but there were some warnings for user. For example we
	// could not backup term store due to lack of permissions.
	WarningVec []string `json:"warningVec"`
}

// Validate validates this site backup status
func (m *SiteBackupStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupFileVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteBackupStatus) validateBackupFileVec(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupFileVec) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupFileVec); i++ {
		if swag.IsZero(m.BackupFileVec[i]) { // not required
			continue
		}

		if m.BackupFileVec[i] != nil {
			if err := m.BackupFileVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupFileVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupFileVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SiteBackupStatus) validateSiteInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteInfo) { // not required
		return nil
	}

	if m.SiteInfo != nil {
		if err := m.SiteInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this site backup status based on the context it is used
func (m *SiteBackupStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupFileVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSiteInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteBackupStatus) contextValidateBackupFileVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupFileVec); i++ {

		if m.BackupFileVec[i] != nil {

			if swag.IsZero(m.BackupFileVec[i]) { // not required
				return nil
			}

			if err := m.BackupFileVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupFileVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupFileVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SiteBackupStatus) contextValidateSiteInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SiteInfo != nil {

		if swag.IsZero(m.SiteInfo) { // not required
			return nil
		}

		if err := m.SiteInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteBackupStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteBackupStatus) UnmarshalBinary(b []byte) error {
	var res SiteBackupStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
