// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LatestProtectionRun Latest Protection Run.
//
// Specifies the information about the latest Protection Run.
//
// swagger:model LatestProtectionRun
type LatestProtectionRun struct {

	// Specifies information about the latest successful Protection Job Run for
	// local and replication snapshots.
	BackupRun *SourceBackupStatus `json:"backupRun,omitempty"`

	// Specifies the event id which caused last update on this object.
	ChangeEventID *int64 `json:"changeEventId,omitempty"`

	// Specifies information about the latest successful Protection Job Run for
	// an archival snapshot.
	CopyRun *CopyRun `json:"copyRun,omitempty"`

	// Specifies job run id of the latest successful Protection Job Run.
	JobRunID *int64 `json:"jobRunId,omitempty"`

	// Specifies the universal id of the latest successful Protection Job Run.
	ProtectionJobRunUID *RunUID `json:"protectionJobRunUid,omitempty"`

	// Specifies the cluster id in case of local or replication snapshots and
	// name of location in case of archival snapshots.
	SnapshotTarget *string `json:"snapshotTarget,omitempty"`

	// Specifies the snapshot target type of the latest snapshot.
	SnapshotTargetType *int32 `json:"snapshotTargetType,omitempty"`

	// Specifies the task status of the Protection Job Run in the final attempt.
	TaskStatus *int32 `json:"taskStatus,omitempty"`

	// Specifies the unique id of the Protection Source for which a snapshot is
	// taken.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this latest protection run
func (m *LatestProtectionRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopyRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionJobRunUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LatestProtectionRun) validateBackupRun(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRun) { // not required
		return nil
	}

	if m.BackupRun != nil {
		if err := m.BackupRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupRun")
			}
			return err
		}
	}

	return nil
}

func (m *LatestProtectionRun) validateCopyRun(formats strfmt.Registry) error {
	if swag.IsZero(m.CopyRun) { // not required
		return nil
	}

	if m.CopyRun != nil {
		if err := m.CopyRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copyRun")
			}
			return err
		}
	}

	return nil
}

func (m *LatestProtectionRun) validateProtectionJobRunUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionJobRunUID) { // not required
		return nil
	}

	if m.ProtectionJobRunUID != nil {
		if err := m.ProtectionJobRunUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionJobRunUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionJobRunUid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this latest protection run based on the context it is used
func (m *LatestProtectionRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCopyRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionJobRunUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LatestProtectionRun) contextValidateBackupRun(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRun != nil {

		if swag.IsZero(m.BackupRun) { // not required
			return nil
		}

		if err := m.BackupRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupRun")
			}
			return err
		}
	}

	return nil
}

func (m *LatestProtectionRun) contextValidateCopyRun(ctx context.Context, formats strfmt.Registry) error {

	if m.CopyRun != nil {

		if swag.IsZero(m.CopyRun) { // not required
			return nil
		}

		if err := m.CopyRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copyRun")
			}
			return err
		}
	}

	return nil
}

func (m *LatestProtectionRun) contextValidateProtectionJobRunUID(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionJobRunUID != nil {

		if swag.IsZero(m.ProtectionJobRunUID) { // not required
			return nil
		}

		if err := m.ProtectionJobRunUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionJobRunUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionJobRunUid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LatestProtectionRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LatestProtectionRun) UnmarshalBinary(b []byte) error {
	var res LatestProtectionRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
