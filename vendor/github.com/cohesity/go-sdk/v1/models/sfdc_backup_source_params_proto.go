// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SfdcBackupSourceParamsProto Sfdc Backup Source Parameters.
//
// Message to capture additional backup params for an Sfdc source.
//
// This proto is used in object based protection of Sfdc source.
//
// swagger:model SfdcBackupSourceParamsProto
type SfdcBackupSourceParamsProto struct {

	// Details about the AuroraCluster to be used for this object protection.
	AuroraClusterInfo *AuroraClusterInfo `json:"auroraClusterInfo,omitempty"`

	// IAM role used to get access to the Aurora cluster and S3 bucket.
	AwsIamRole *string `json:"awsIamRole,omitempty"`

	// List of entity ids of the Sfdc objects that are excluded by
	// the user in object protection.
	ExcludedObjectIdsVec []int64 `json:"excludedObjectIdsVec"`

	// This list is a mapping between an Sfdc object's entity Id and the list of
	// field names that user has specified to exclude from this object's backup.
	ObjectLevelParamsVec []*ObjectLevelParams `json:"objectLevelParamsVec"`
}

// Validate validates this sfdc backup source params proto
func (m *SfdcBackupSourceParamsProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuroraClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectLevelParamsVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcBackupSourceParamsProto) validateAuroraClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AuroraClusterInfo) { // not required
		return nil
	}

	if m.AuroraClusterInfo != nil {
		if err := m.AuroraClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraClusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraClusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SfdcBackupSourceParamsProto) validateObjectLevelParamsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectLevelParamsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ObjectLevelParamsVec); i++ {
		if swag.IsZero(m.ObjectLevelParamsVec[i]) { // not required
			continue
		}

		if m.ObjectLevelParamsVec[i] != nil {
			if err := m.ObjectLevelParamsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectLevelParamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectLevelParamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sfdc backup source params proto based on the context it is used
func (m *SfdcBackupSourceParamsProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuroraClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectLevelParamsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcBackupSourceParamsProto) contextValidateAuroraClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AuroraClusterInfo != nil {

		if swag.IsZero(m.AuroraClusterInfo) { // not required
			return nil
		}

		if err := m.AuroraClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraClusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraClusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SfdcBackupSourceParamsProto) contextValidateObjectLevelParamsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ObjectLevelParamsVec); i++ {

		if m.ObjectLevelParamsVec[i] != nil {

			if swag.IsZero(m.ObjectLevelParamsVec[i]) { // not required
				return nil
			}

			if err := m.ObjectLevelParamsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectLevelParamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectLevelParamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SfdcBackupSourceParamsProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcBackupSourceParamsProto) UnmarshalBinary(b []byte) error {
	var res SfdcBackupSourceParamsProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
