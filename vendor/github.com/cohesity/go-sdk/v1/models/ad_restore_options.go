// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdRestoreOptions AD Restore Options
//
// AdRestoreOptions are the AD specific options for the restore task being
// updated
//
// swagger:model AdRestoreOptions
type AdRestoreOptions struct {

	// Specifies the object attributes restore parameters with the list of
	// attributes to be restored. This is set only when type is
	// kObjectAttributes.
	ObjectAttributeParameters *AdObjectAttributeParameters `json:"objectAttributeParameters,omitempty"`

	// Specifies the object restore params with info about objects to be
	// restored. This is set only when type is kObjects.
	ObjectParameters *AdObjectRestoreParameters `json:"objectParameters,omitempty"`

	// Specifies the AD restore request type.
	// Specifies the action type of AD restore.
	//
	// 'kNone' specifies no special behaviour.
	// 'kObjects' specifies the user action to restore AD objects from a mounted
	// AD snapshot database.
	// 'kObjectAttributes' specifies the user action to restore attributes of an
	// AD object from a mounted AD snapshot database.
	// Enum: ["kNone","kObjects","kObjectAttributes"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this ad restore options
func (m *AdRestoreOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectAttributeParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdRestoreOptions) validateObjectAttributeParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectAttributeParameters) { // not required
		return nil
	}

	if m.ObjectAttributeParameters != nil {
		if err := m.ObjectAttributeParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectAttributeParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectAttributeParameters")
			}
			return err
		}
	}

	return nil
}

func (m *AdRestoreOptions) validateObjectParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectParameters) { // not required
		return nil
	}

	if m.ObjectParameters != nil {
		if err := m.ObjectParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectParameters")
			}
			return err
		}
	}

	return nil
}

var adRestoreOptionsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNone","kObjects","kObjectAttributes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adRestoreOptionsTypeTypePropEnum = append(adRestoreOptionsTypeTypePropEnum, v)
	}
}

const (

	// AdRestoreOptionsTypeKNone captures enum value "kNone"
	AdRestoreOptionsTypeKNone string = "kNone"

	// AdRestoreOptionsTypeKObjects captures enum value "kObjects"
	AdRestoreOptionsTypeKObjects string = "kObjects"

	// AdRestoreOptionsTypeKObjectAttributes captures enum value "kObjectAttributes"
	AdRestoreOptionsTypeKObjectAttributes string = "kObjectAttributes"
)

// prop value enum
func (m *AdRestoreOptions) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, adRestoreOptionsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdRestoreOptions) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ad restore options based on the context it is used
func (m *AdRestoreOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjectAttributeParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdRestoreOptions) contextValidateObjectAttributeParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectAttributeParameters != nil {

		if swag.IsZero(m.ObjectAttributeParameters) { // not required
			return nil
		}

		if err := m.ObjectAttributeParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectAttributeParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectAttributeParameters")
			}
			return err
		}
	}

	return nil
}

func (m *AdRestoreOptions) contextValidateObjectParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectParameters != nil {

		if swag.IsZero(m.ObjectParameters) { // not required
			return nil
		}

		if err := m.ObjectParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdRestoreOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdRestoreOptions) UnmarshalBinary(b []byte) error {
	var res AdRestoreOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
