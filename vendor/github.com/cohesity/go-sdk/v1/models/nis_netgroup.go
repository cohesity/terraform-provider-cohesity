// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NisNetgroup Netgroup
//
// Defines an NIS Netgroup.
//
// swagger:model NisNetgroup
type NisNetgroup struct {

	// Description of the netgroup.
	Description *string `json:"description,omitempty"`

	// Specifies the domain of the netgroup.
	Domain *string `json:"domain,omitempty"`

	// Specifies the name of the netgroup.
	Name *string `json:"name,omitempty"`

	// Specifies whether clients from this netgroup can mount using NFS protocol.
	// Protocol access level.
	// 'kDisabled' indicates Protocol access level 'Disabled'
	// 'kReadOnly' indicates Protocol access level 'ReadOnly'
	// 'kReadWrite' indicates Protocol access level 'ReadWrite'
	// Enum: ["kDisabled","kReadOnly","kReadWrite"]
	NfsAccess *string `json:"nfsAccess,omitempty"`

	// Specifies the NFS squash type.
	NfsSquash *int32 `json:"nfsSquash,omitempty"`
}

// Validate validates this nis netgroup
func (m *NisNetgroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNfsAccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nisNetgroupTypeNfsAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDisabled","kReadOnly","kReadWrite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nisNetgroupTypeNfsAccessPropEnum = append(nisNetgroupTypeNfsAccessPropEnum, v)
	}
}

const (

	// NisNetgroupNfsAccessKDisabled captures enum value "kDisabled"
	NisNetgroupNfsAccessKDisabled string = "kDisabled"

	// NisNetgroupNfsAccessKReadOnly captures enum value "kReadOnly"
	NisNetgroupNfsAccessKReadOnly string = "kReadOnly"

	// NisNetgroupNfsAccessKReadWrite captures enum value "kReadWrite"
	NisNetgroupNfsAccessKReadWrite string = "kReadWrite"
)

// prop value enum
func (m *NisNetgroup) validateNfsAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nisNetgroupTypeNfsAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NisNetgroup) validateNfsAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsAccess) { // not required
		return nil
	}

	// value enum
	if err := m.validateNfsAccessEnum("nfsAccess", "body", *m.NfsAccess); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nis netgroup based on context it is used
func (m *NisNetgroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NisNetgroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NisNetgroup) UnmarshalBinary(b []byte) error {
	var res NisNetgroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
