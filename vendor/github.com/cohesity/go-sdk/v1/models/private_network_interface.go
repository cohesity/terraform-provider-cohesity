// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateNetworkInterface Structure to contain the properties of an network interface.
//
// swagger:model PrivateNetworkInterface
type PrivateNetworkInterface struct {

	// Current active slave. This is only valid in active-backup mode.
	ActiveBondSlave *string `json:"activeBondSlave,omitempty"`

	// Params specfic to bond interface.
	// Bond slaves name.
	BondSlave []string `json:"bondSlave"`

	// Bond slaves slot info.
	BondSlaveSlot []string `json:"bondSlaveSlot"`

	// Bond slave detailed info.
	BondSlavesDetails []*PrivateBondSlaveInfo `json:"bondSlavesDetails"`

	// Bonding mode of the interface.
	BondingMode *int32 `json:"bondingMode,omitempty"`

	// gateway
	Gateway *string `json:"gateway,omitempty"`

	// gateway6
	Gateway6 *string `json:"gateway6,omitempty"`

	// TOBE REMOVED(Wenbo): interface id can not differentiate vlan interfaces.
	// Will use other key later.
	ID *int64 `json:"id,omitempty"`

	// Interface group this interface belonged to.
	IfaceGroup *string `json:"ifaceGroup,omitempty"`

	// Name of the interface port.
	IfaceName *string `json:"ifaceName,omitempty"`

	// Interface role. It can be primary or secondary.
	IfaceRole *string `json:"ifaceRole,omitempty"`

	// iface type
	IfaceType *int64 `json:"ifaceType,omitempty"`

	// Whether the link is physically connected or not.
	// This field is only accurate when the interface is up.
	IsConnected *bool `json:"isConnected,omitempty"`

	// Whether to use this interface as the default route.
	IsDefaultRoute *bool `json:"isDefaultRoute,omitempty"`

	// Whether the interface is up or not.
	IsUp *bool `json:"isUp,omitempty"`

	// Mac address of the interface.
	MacAddr *string `json:"macAddr,omitempty"`

	// mtu
	Mtu *int32 `json:"mtu,omitempty"`

	// Services which use this interface.
	Services []string `json:"services"`

	// Speed.
	Speed *string `json:"speed,omitempty"`

	// static Ip
	StaticIP *string `json:"staticIp,omitempty"`

	// Ipv6
	StaticIp6 *string `json:"staticIp6,omitempty"`

	// Interface Stats.
	Stats *PrivateInterfaceStats `json:"stats,omitempty"`

	// Subnet info.
	Subnet *string `json:"subnet,omitempty"`

	// subnet6
	Subnet6 *string `json:"subnet6,omitempty"`

	// virtual Ip
	VirtualIP *string `json:"virtualIp,omitempty"`
}

// Validate validates this private network interface
func (m *PrivateNetworkInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBondSlavesDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateNetworkInterface) validateBondSlavesDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.BondSlavesDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.BondSlavesDetails); i++ {
		if swag.IsZero(m.BondSlavesDetails[i]) { // not required
			continue
		}

		if m.BondSlavesDetails[i] != nil {
			if err := m.BondSlavesDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bondSlavesDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bondSlavesDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateNetworkInterface) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private network interface based on the context it is used
func (m *PrivateNetworkInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBondSlavesDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateNetworkInterface) contextValidateBondSlavesDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BondSlavesDetails); i++ {

		if m.BondSlavesDetails[i] != nil {

			if swag.IsZero(m.BondSlavesDetails[i]) { // not required
				return nil
			}

			if err := m.BondSlavesDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bondSlavesDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bondSlavesDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateNetworkInterface) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateNetworkInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateNetworkInterface) UnmarshalBinary(b []byte) error {
	var res PrivateNetworkInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
