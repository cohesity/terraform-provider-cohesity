// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceTreeChildDevice The list of devices that need to be combined.
//
// swagger:model DeviceTree_ChildDevice
type DeviceTreeChildDevice struct {

	// Recursion: This device is defined recursively.
	Device *DeviceTree `json:"device,omitempty"`

	// This specifies how the parent device is using this child device.
	DeviceType *int32 `json:"deviceType,omitempty"`

	// Base case: this is a partition slice.
	PartitionSlice *DeviceTreePartitionSlice `json:"partitionSlice,omitempty"`
}

// Validate validates this device tree child device
func (m *DeviceTreeChildDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionSlice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceTreeChildDevice) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceTreeChildDevice) validatePartitionSlice(formats strfmt.Registry) error {
	if swag.IsZero(m.PartitionSlice) { // not required
		return nil
	}

	if m.PartitionSlice != nil {
		if err := m.PartitionSlice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitionSlice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitionSlice")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this device tree child device based on the context it is used
func (m *DeviceTreeChildDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartitionSlice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceTreeChildDevice) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.Device != nil {

		if swag.IsZero(m.Device) { // not required
			return nil
		}

		if err := m.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceTreeChildDevice) contextValidatePartitionSlice(ctx context.Context, formats strfmt.Registry) error {

	if m.PartitionSlice != nil {

		if swag.IsZero(m.PartitionSlice) { // not required
			return nil
		}

		if err := m.PartitionSlice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitionSlice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitionSlice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceTreeChildDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceTreeChildDevice) UnmarshalBinary(b []byte) error {
	var res DeviceTreeChildDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
