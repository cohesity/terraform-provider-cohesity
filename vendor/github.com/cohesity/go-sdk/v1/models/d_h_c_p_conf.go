// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DHCPConf DHCPConf DHCP Server Configuration
//
// swagger:model DHCPConf
type DHCPConf struct {

	// domain of the hosts allocated by this server
	DNSDomain *string `json:"dnsDomain,omitempty"`

	// DNS name servers sent by DHCP server
	DNSNameservers []string `json:"dnsNameservers"`

	// DNS search domains sent by DHCP server
	DNSSearchDomains []string `json:"dnsSearchDomains"`

	// Extra DHCP options to be sent
	ExtraOptions map[string]string `json:"extraOptions,omitempty"`

	// IP address of the DHCP server
	// Required: true
	IPAddress *string `json:"ipAddress"`

	// MAC address of the DHCP server
	// Required: true
	MacAddress *string `json:"macAddress"`

	// Metadata about this dhcp server
	Metadata map[string]string `json:"metadata,omitempty"`

	// MTU sent by DHCP server
	// Maximum: 8942
	// Minimum: 1442
	Mtu *int32 `json:"mtu,omitempty"`
}

// Validate validates this d h c p conf
func (m *DHCPConf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtu(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DHCPConf) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipAddress", "body", m.IPAddress); err != nil {
		return err
	}

	return nil
}

func (m *DHCPConf) validateMacAddress(formats strfmt.Registry) error {

	if err := validate.Required("macAddress", "body", m.MacAddress); err != nil {
		return err
	}

	return nil
}

func (m *DHCPConf) validateMtu(formats strfmt.Registry) error {
	if swag.IsZero(m.Mtu) { // not required
		return nil
	}

	if err := validate.MinimumInt("mtu", "body", int64(*m.Mtu), 1442, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("mtu", "body", int64(*m.Mtu), 8942, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this d h c p conf based on context it is used
func (m *DHCPConf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DHCPConf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DHCPConf) UnmarshalBinary(b []byte) error {
	var res DHCPConf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
