// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisterEntityResult register entity result
//
// swagger:model RegisterEntityResult
type RegisterEntityResult struct {

	// If the entity was successfully registered, it's EntityProto is returned to
	// the user.
	// Note: This might not be required for magneto v2, but will be populated
	// none-the-less for backwards compatibility reasons.
	Entity *PrivateEntityProto `json:"entity,omitempty"`

	// This returns any environment specific result.
	EnvRegisterEntityResult *EnvRegisterEntityResult `json:"envRegisterEntityResult,omitempty"`

	// Error encountered by the RPC.
	Error *PrivateErrorProto `json:"error,omitempty"`

	// This is returned when registering vCloud director. This will contain
	// vCenter information for which credentials are required.
	// TODO(Chinmaya): Remove this.
	VcdRegisterEntityResult *VCDRegisterEntityResult `json:"vcdRegisterEntityResult,omitempty"`
}

// Validate validates this register entity result
func (m *RegisterEntityResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvRegisterEntityResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdRegisterEntityResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterEntityResult) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterEntityResult) validateEnvRegisterEntityResult(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvRegisterEntityResult) { // not required
		return nil
	}

	if m.EnvRegisterEntityResult != nil {
		if err := m.EnvRegisterEntityResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("envRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("envRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterEntityResult) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterEntityResult) validateVcdRegisterEntityResult(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdRegisterEntityResult) { // not required
		return nil
	}

	if m.VcdRegisterEntityResult != nil {
		if err := m.VcdRegisterEntityResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this register entity result based on the context it is used
func (m *RegisterEntityResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvRegisterEntityResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdRegisterEntityResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterEntityResult) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterEntityResult) contextValidateEnvRegisterEntityResult(ctx context.Context, formats strfmt.Registry) error {

	if m.EnvRegisterEntityResult != nil {

		if swag.IsZero(m.EnvRegisterEntityResult) { // not required
			return nil
		}

		if err := m.EnvRegisterEntityResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("envRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("envRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterEntityResult) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterEntityResult) contextValidateVcdRegisterEntityResult(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdRegisterEntityResult != nil {

		if swag.IsZero(m.VcdRegisterEntityResult) { // not required
			return nil
		}

		if err := m.VcdRegisterEntityResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdRegisterEntityResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdRegisterEntityResult")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisterEntityResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterEntityResult) UnmarshalBinary(b []byte) error {
	var res RegisterEntityResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
