// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UdaSourceCapabilities uda source capabilities
//
// swagger:model UdaSourceCapabilities
type UdaSourceCapabilities struct {

	// auto log backup
	AutoLogBackup *bool `json:"autoLogBackup,omitempty"`

	// Specifies whether the source supports the 'Dynamic Configuration'
	// capability.
	DynamicConfig *bool `json:"dynamicConfig,omitempty"`

	// Indicates if source has entity capability.
	EntitySupport *bool `json:"entitySupport,omitempty"`

	// Specifies whether the source supports externally triggered log backups.
	EtLogBackup *bool `json:"etLogBackup,omitempty"`

	// Only for sources in the cloud. A temporary external disk is provisoned in
	// the cloud and mounted on the control node selected during
	// backup / recovery for dump-sweep workflows that need a local disk to dump
	// data. Prereq - non-mount, AGENT_ON_RIGEL.
	ExternalDisks *bool `json:"externalDisks,omitempty"`

	// full backup
	FullBackup *bool `json:"fullBackup,omitempty"`

	// incr backup
	IncrBackup *bool `json:"incrBackup,omitempty"`

	// log backup
	LogBackup *bool `json:"logBackup,omitempty"`

	// Whether the source supports restore of multiple objects.
	MultiObjectRestore *bool `json:"multiObjectRestore,omitempty"`

	// pause resume backup
	PauseResumeBackup *bool `json:"pauseResumeBackup,omitempty"`

	// Make a source call before actual start backup call.
	PreBackupJobScript *bool `json:"preBackupJobScript,omitempty"`

	// resource throttling
	ResourceThrottling *bool `json:"resourceThrottling,omitempty"`

	// snapfs cert
	SnapfsCert *bool `json:"snapfsCert,omitempty"`
}

// Validate validates this uda source capabilities
func (m *UdaSourceCapabilities) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this uda source capabilities based on context it is used
func (m *UdaSourceCapabilities) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UdaSourceCapabilities) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaSourceCapabilities) UnmarshalBinary(b []byte) error {
	var res UdaSourceCapabilities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
