// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GcpCredentials GCP source Credentials.
//
// Specifies the credentials to authenticate with Google Cloud Platform.
//
// swagger:model GcpCredentials
type GcpCredentials struct {

	// Specifies Client email address associated with the service account.
	ClientEmailAddress *string `json:"clientEmailAddress,omitempty"`

	// Specifies Client private associated with the service account.
	ClientPrivateKey *string `json:"clientPrivateKey,omitempty"`

	// Specifies the entity type such as 'kIAMUser' if the environment is kGCP.
	// Specifies the type of a GCP source entity.
	// 'kIAMUser' indicates a unique user within a GCP account.
	// 'kProject' represents compute resources and storage.
	// 'kRegion' indicates a geographical region in the global infrastructure.
	// 'kAvailabilityZone' indicates an availability zone within a region.
	// 'kVirtualMachine' indicates a Virtual Machine running in GCP environment.
	// 'kVPC' indicates a virtual private cloud (VPC) network within GCP.
	// 'kSubnet' indicates a subnet inside the VPC.
	// 'kNetworkSecurityGroup' represents a network security group.
	// 'kInstanceType' represents various machine types.
	// 'kLabel' represents a label present on the instances.
	// 'kMetaData' represents a custom metadata present on instances.
	// 'kTag' represents a network tag on instances.
	// 'kVPCConnector' represents a VPC connector used for serverless VPC access.
	// Enum: ["kIAMUser","kProject","kRegion","kAvailabilityZone","kVirtualMachine","kVPC","kSubnet","kNetworkSecurityGroup","kInstanceType","kLabel","kMetadata","kTag","kVPCConnector"]
	GcpType *string `json:"gcpType,omitempty"`

	// Specifies Id of the project associated with Google cloud account.
	ProjectID *string `json:"projectId,omitempty"`

	// Specifies the VPC Network to deploy proxy VMs.
	VpcNetwork *string `json:"vpcNetwork,omitempty"`

	// Specifies the subnetwork to deploy proxy VMs.
	VpcSubnetwork *string `json:"vpcSubnetwork,omitempty"`
}

// Validate validates this gcp credentials
func (m *GcpCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGcpType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gcpCredentialsTypeGcpTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kIAMUser","kProject","kRegion","kAvailabilityZone","kVirtualMachine","kVPC","kSubnet","kNetworkSecurityGroup","kInstanceType","kLabel","kMetadata","kTag","kVPCConnector"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gcpCredentialsTypeGcpTypePropEnum = append(gcpCredentialsTypeGcpTypePropEnum, v)
	}
}

const (

	// GcpCredentialsGcpTypeKIAMUser captures enum value "kIAMUser"
	GcpCredentialsGcpTypeKIAMUser string = "kIAMUser"

	// GcpCredentialsGcpTypeKProject captures enum value "kProject"
	GcpCredentialsGcpTypeKProject string = "kProject"

	// GcpCredentialsGcpTypeKRegion captures enum value "kRegion"
	GcpCredentialsGcpTypeKRegion string = "kRegion"

	// GcpCredentialsGcpTypeKAvailabilityZone captures enum value "kAvailabilityZone"
	GcpCredentialsGcpTypeKAvailabilityZone string = "kAvailabilityZone"

	// GcpCredentialsGcpTypeKVirtualMachine captures enum value "kVirtualMachine"
	GcpCredentialsGcpTypeKVirtualMachine string = "kVirtualMachine"

	// GcpCredentialsGcpTypeKVPC captures enum value "kVPC"
	GcpCredentialsGcpTypeKVPC string = "kVPC"

	// GcpCredentialsGcpTypeKSubnet captures enum value "kSubnet"
	GcpCredentialsGcpTypeKSubnet string = "kSubnet"

	// GcpCredentialsGcpTypeKNetworkSecurityGroup captures enum value "kNetworkSecurityGroup"
	GcpCredentialsGcpTypeKNetworkSecurityGroup string = "kNetworkSecurityGroup"

	// GcpCredentialsGcpTypeKInstanceType captures enum value "kInstanceType"
	GcpCredentialsGcpTypeKInstanceType string = "kInstanceType"

	// GcpCredentialsGcpTypeKLabel captures enum value "kLabel"
	GcpCredentialsGcpTypeKLabel string = "kLabel"

	// GcpCredentialsGcpTypeKMetadata captures enum value "kMetadata"
	GcpCredentialsGcpTypeKMetadata string = "kMetadata"

	// GcpCredentialsGcpTypeKTag captures enum value "kTag"
	GcpCredentialsGcpTypeKTag string = "kTag"

	// GcpCredentialsGcpTypeKVPCConnector captures enum value "kVPCConnector"
	GcpCredentialsGcpTypeKVPCConnector string = "kVPCConnector"
)

// prop value enum
func (m *GcpCredentials) validateGcpTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gcpCredentialsTypeGcpTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GcpCredentials) validateGcpType(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGcpTypeEnum("gcpType", "body", *m.GcpType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gcp credentials based on context it is used
func (m *GcpCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GcpCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpCredentials) UnmarshalBinary(b []byte) error {
	var res GcpCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
