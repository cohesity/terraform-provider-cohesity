// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GcpFleetNetworkParams gcp fleet network params
//
// swagger:model GcpFleetNetworkParams
type GcpFleetNetworkParams struct {

	// Specifies the priority of the subnet type.
	// Specifies the priority of the fleet subnet type for GCP.
	// 'kPrimary' implies first priority to subnet type.
	// 'kSecondary' implies second priority to subnet type.
	// 'kTertiary' implies third priority to subnet type.
	// Enum: ["kCluster","kSourceVM","kCustom"]
	FleetSubnetPriority *string `json:"fleetSubnetPriority,omitempty"`

	// Specifies the subnet type of the fleet.
	// Specifies the type of the fleet subnet for GCP.
	// 'kCluster' implies same subnet as of Cluster (for CE and NGCE cluster).
	// 'kSourceVM' implies same subnet as of source vm.
	// 'kCustom' implies the custome subnet.
	// Enum: ["kCluster","kSourceVM","kCustom"]
	FleetSubnetType *string `json:"fleetSubnetType,omitempty"`

	// Specifies the list of network params for the fleet.
	NetworkParamsList []*FleetNetworkParams `json:"networkParamsList"`
}

// Validate validates this gcp fleet network params
func (m *GcpFleetNetworkParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFleetSubnetPriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFleetSubnetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkParamsList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gcpFleetNetworkParamsTypeFleetSubnetPriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kSourceVM","kCustom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gcpFleetNetworkParamsTypeFleetSubnetPriorityPropEnum = append(gcpFleetNetworkParamsTypeFleetSubnetPriorityPropEnum, v)
	}
}

const (

	// GcpFleetNetworkParamsFleetSubnetPriorityKCluster captures enum value "kCluster"
	GcpFleetNetworkParamsFleetSubnetPriorityKCluster string = "kCluster"

	// GcpFleetNetworkParamsFleetSubnetPriorityKSourceVM captures enum value "kSourceVM"
	GcpFleetNetworkParamsFleetSubnetPriorityKSourceVM string = "kSourceVM"

	// GcpFleetNetworkParamsFleetSubnetPriorityKCustom captures enum value "kCustom"
	GcpFleetNetworkParamsFleetSubnetPriorityKCustom string = "kCustom"
)

// prop value enum
func (m *GcpFleetNetworkParams) validateFleetSubnetPriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gcpFleetNetworkParamsTypeFleetSubnetPriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GcpFleetNetworkParams) validateFleetSubnetPriority(formats strfmt.Registry) error {
	if swag.IsZero(m.FleetSubnetPriority) { // not required
		return nil
	}

	// value enum
	if err := m.validateFleetSubnetPriorityEnum("fleetSubnetPriority", "body", *m.FleetSubnetPriority); err != nil {
		return err
	}

	return nil
}

var gcpFleetNetworkParamsTypeFleetSubnetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kSourceVM","kCustom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gcpFleetNetworkParamsTypeFleetSubnetTypePropEnum = append(gcpFleetNetworkParamsTypeFleetSubnetTypePropEnum, v)
	}
}

const (

	// GcpFleetNetworkParamsFleetSubnetTypeKCluster captures enum value "kCluster"
	GcpFleetNetworkParamsFleetSubnetTypeKCluster string = "kCluster"

	// GcpFleetNetworkParamsFleetSubnetTypeKSourceVM captures enum value "kSourceVM"
	GcpFleetNetworkParamsFleetSubnetTypeKSourceVM string = "kSourceVM"

	// GcpFleetNetworkParamsFleetSubnetTypeKCustom captures enum value "kCustom"
	GcpFleetNetworkParamsFleetSubnetTypeKCustom string = "kCustom"
)

// prop value enum
func (m *GcpFleetNetworkParams) validateFleetSubnetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gcpFleetNetworkParamsTypeFleetSubnetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GcpFleetNetworkParams) validateFleetSubnetType(formats strfmt.Registry) error {
	if swag.IsZero(m.FleetSubnetType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFleetSubnetTypeEnum("fleetSubnetType", "body", *m.FleetSubnetType); err != nil {
		return err
	}

	return nil
}

func (m *GcpFleetNetworkParams) validateNetworkParamsList(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkParamsList) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkParamsList); i++ {
		if swag.IsZero(m.NetworkParamsList[i]) { // not required
			continue
		}

		if m.NetworkParamsList[i] != nil {
			if err := m.NetworkParamsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkParamsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkParamsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this gcp fleet network params based on the context it is used
func (m *GcpFleetNetworkParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkParamsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpFleetNetworkParams) contextValidateNetworkParamsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkParamsList); i++ {

		if m.NetworkParamsList[i] != nil {

			if swag.IsZero(m.NetworkParamsList[i]) { // not required
				return nil
			}

			if err := m.NetworkParamsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkParamsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkParamsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GcpFleetNetworkParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpFleetNetworkParams) UnmarshalBinary(b []byte) error {
	var res GcpFleetNetworkParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
