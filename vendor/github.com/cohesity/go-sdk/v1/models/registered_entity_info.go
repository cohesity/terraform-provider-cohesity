// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisteredEntityInfo registered entity info
//
// swagger:model RegisteredEntityInfo
type RegisteredEntityInfo struct {

	// Application specific credentials vector. This may be needed in cases where
	// after authorizing with the environment, separate authorization is needed
	// to access an application in the environment (for example, kOracle where
	// after authorizing with the database host, to access a database separate
	// credentials are required).
	// TODO(Vivek) : Move this to RegisteredEntityParams
	AppCredentialsVec []*PrivateAppCredentials `json:"appCredentialsVec"`

	// The applications environments that have been registered with this entity.
	AppEnvVec []int32 `json:"appEnvVec"`

	// The software version of the cluster when the hierarchy was most recently
	// fetched and built. The intention of storing this is to support refreshing
	// the entity hierarchy as soon as cluster upgrade finishes, by comparing
	// with the cluster_target_software_version present in the cluster config
	// bulletin. This field must be populated by all adaptors which refresh their
	// entity hierarchy (along with the last_refresh_time_usecs field), if they
	// wish to auto-refresh their entity hierarchy immediately after cluster
	// upgrade finishes.
	//
	// In case of physical entities, refresh is needed after upgrade in order
	// to support the agent upgrade option in the UI appropriately.
	ClusterSoftwareVersionDuringLastRefresh *string `json:"clusterSoftwareVersionDuringLastRefresh,omitempty"`

	// Information to access the entity.
	ConnectorParams *ConnectorParams `json:"connectorParams,omitempty"`

	// This is set to false only for top level entities which are created
	// internally. Currently this is set to false only for Exchange DAG entity.
	IsRegisteredByUser *bool `json:"isRegisteredByUser,omitempty"`

	// If this entity is registered as a storage snapshot provider.
	IsStorageSnapshotProvider *bool `json:"isStorageSnapshotProvider,omitempty"`

	// Time (in usecs) when the hierarchy was most recently fetched and built.
	LastRefreshTimeUsecs *int64 `json:"lastRefreshTimeUsecs,omitempty"`

	// This will be optionally set and captures the current progress and pulse
	// details w.r.t to either the registration or refresh.
	ProgressMonitorPath *string `json:"progressMonitorPath,omitempty"`

	// Will contain any error encountered during the last refresh of the entity.
	RefreshError *PrivateErrorProto `json:"refreshError,omitempty"`

	// registered app info vec
	RegisteredAppInfoVec []*PrivateRegisteredAppInfo `json:"registeredAppInfoVec"`

	// Any additional params specified by the user.
	RegisteredEntityParams *RegisteredEntityParams `json:"registeredEntityParams,omitempty"`

	// The time when this entity was registered with the Magneto master.
	RegistrationTimeUsecs *int64 `json:"registrationTimeUsecs,omitempty"`

	// Map from child entity id to dummy value. If this map is non-empty then
	// magneto will work on only the entities specified in this map.
	RestrictedObjectIDMap map[string]bool `json:"restrictedObjectIdMap,omitempty"`

	// This controls whether to use source side dedup on the source or not.
	// NOTE: This is only applicable to sources which support source side dedup
	// (e.g., Linux physical servers).
	SourceSideDedupEnabled *bool `json:"sourceSideDedupEnabled,omitempty"`

	// TODO(aubin): Append "_DEPRECATED" to this field name once iris has
	// stopped referring to it.
	ThrottlingPolicy *ThrottlingPolicy `json:"throttlingPolicy,omitempty"`

	// This will be populated with messages that should be shown to the user
	// associated with the source entity.
	UserMessages []string `json:"userMessages"`

	// If not empty, this is the error returned from the verification task, and
	// it indicates that this registration is not successful.
	VerificationError *PrivateErrorProto `json:"verificationError,omitempty"`

	// Verification status of this registered entity, when the credential
	// registration needs to be verified. Otherwise if no credential registration
	// or verification is required, this field is set to a default value of
	// kFinished.
	VerificationStatus *int32 `json:"verificationStatus,omitempty"`

	// The set of warnings returned by the verification task. These warnings
	// indicate that although the registration was successful, the host
	// environment likely needs some cleanup/fixing.
	VerificationWarningVec []*PrivateErrorProto `json:"verificationWarningVec"`
}

// Validate validates this registered entity info
func (m *RegisteredEntityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppCredentialsVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredAppInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredEntityParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationWarningVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityInfo) validateAppCredentialsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AppCredentialsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AppCredentialsVec); i++ {
		if swag.IsZero(m.AppCredentialsVec[i]) { // not required
			continue
		}

		if m.AppCredentialsVec[i] != nil {
			if err := m.AppCredentialsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appCredentialsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appCredentialsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityInfo) validateConnectorParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectorParams) { // not required
		return nil
	}

	if m.ConnectorParams != nil {
		if err := m.ConnectorParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectorParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityInfo) validateRefreshError(formats strfmt.Registry) error {
	if swag.IsZero(m.RefreshError) { // not required
		return nil
	}

	if m.RefreshError != nil {
		if err := m.RefreshError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshError")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityInfo) validateRegisteredAppInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredAppInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RegisteredAppInfoVec); i++ {
		if swag.IsZero(m.RegisteredAppInfoVec[i]) { // not required
			continue
		}

		if m.RegisteredAppInfoVec[i] != nil {
			if err := m.RegisteredAppInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registeredAppInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registeredAppInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityInfo) validateRegisteredEntityParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredEntityParams) { // not required
		return nil
	}

	if m.RegisteredEntityParams != nil {
		if err := m.RegisteredEntityParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredEntityParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredEntityParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityInfo) validateThrottlingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingPolicy) { // not required
		return nil
	}

	if m.ThrottlingPolicy != nil {
		if err := m.ThrottlingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityInfo) validateVerificationError(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationError) { // not required
		return nil
	}

	if m.VerificationError != nil {
		if err := m.VerificationError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verificationError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verificationError")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityInfo) validateVerificationWarningVec(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationWarningVec) { // not required
		return nil
	}

	for i := 0; i < len(m.VerificationWarningVec); i++ {
		if swag.IsZero(m.VerificationWarningVec[i]) { // not required
			continue
		}

		if m.VerificationWarningVec[i] != nil {
			if err := m.VerificationWarningVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verificationWarningVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verificationWarningVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this registered entity info based on the context it is used
func (m *RegisteredEntityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppCredentialsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectorParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefreshError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredAppInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredEntityParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationWarningVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredEntityInfo) contextValidateAppCredentialsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppCredentialsVec); i++ {

		if m.AppCredentialsVec[i] != nil {

			if swag.IsZero(m.AppCredentialsVec[i]) { // not required
				return nil
			}

			if err := m.AppCredentialsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appCredentialsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appCredentialsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityInfo) contextValidateConnectorParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectorParams != nil {

		if swag.IsZero(m.ConnectorParams) { // not required
			return nil
		}

		if err := m.ConnectorParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectorParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityInfo) contextValidateRefreshError(ctx context.Context, formats strfmt.Registry) error {

	if m.RefreshError != nil {

		if swag.IsZero(m.RefreshError) { // not required
			return nil
		}

		if err := m.RefreshError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshError")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityInfo) contextValidateRegisteredAppInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegisteredAppInfoVec); i++ {

		if m.RegisteredAppInfoVec[i] != nil {

			if swag.IsZero(m.RegisteredAppInfoVec[i]) { // not required
				return nil
			}

			if err := m.RegisteredAppInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registeredAppInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registeredAppInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisteredEntityInfo) contextValidateRegisteredEntityParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RegisteredEntityParams != nil {

		if swag.IsZero(m.RegisteredEntityParams) { // not required
			return nil
		}

		if err := m.RegisteredEntityParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredEntityParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredEntityParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityInfo) contextValidateThrottlingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ThrottlingPolicy != nil {

		if swag.IsZero(m.ThrottlingPolicy) { // not required
			return nil
		}

		if err := m.ThrottlingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityInfo) contextValidateVerificationError(ctx context.Context, formats strfmt.Registry) error {

	if m.VerificationError != nil {

		if swag.IsZero(m.VerificationError) { // not required
			return nil
		}

		if err := m.VerificationError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verificationError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verificationError")
			}
			return err
		}
	}

	return nil
}

func (m *RegisteredEntityInfo) contextValidateVerificationWarningVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VerificationWarningVec); i++ {

		if m.VerificationWarningVec[i] != nil {

			if swag.IsZero(m.VerificationWarningVec[i]) { // not required
				return nil
			}

			if err := m.VerificationWarningVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verificationWarningVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verificationWarningVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredEntityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredEntityInfo) UnmarshalBinary(b []byte) error {
	var res RegisteredEntityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
