// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SharePointRestoreParameters SharePoint Restore Parameters.
//
// Specifies information needed for recovering SharePoint Site and items.
//
// swagger:model SharePointRestoreParameters
type SharePointRestoreParameters struct {

	// Specifies whether the objects are to be restored to the original drive.
	RestoreToOriginalSite *bool `json:"restoreToOriginalSite,omitempty"`

	// Specifies the list of SharePoint Sites whose Document Repositories are
	// being restored.
	SiteOwnerList []*SiteOwner `json:"siteOwnerList"`

	// Specifies the target document library name within the alternate site.
	TargetDocumentLibraryName *string `json:"targetDocumentLibraryName,omitempty"`

	// Specifies a custom prefix for the document libraries when being restored
	// to the original or an alternate site.
	TargetDocumentLibraryPrefix *string `json:"targetDocumentLibraryPrefix,omitempty"`

	// Specifies the target site where the recovery of the entire Site or the
	// Site items is to be done.
	TargetSite *ProtectionSource `json:"targetSite,omitempty"`
}

// Validate validates this share point restore parameters
func (m *SharePointRestoreParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSiteOwnerList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SharePointRestoreParameters) validateSiteOwnerList(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteOwnerList) { // not required
		return nil
	}

	for i := 0; i < len(m.SiteOwnerList); i++ {
		if swag.IsZero(m.SiteOwnerList[i]) { // not required
			continue
		}

		if m.SiteOwnerList[i] != nil {
			if err := m.SiteOwnerList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("siteOwnerList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("siteOwnerList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SharePointRestoreParameters) validateTargetSite(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetSite) { // not required
		return nil
	}

	if m.TargetSite != nil {
		if err := m.TargetSite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetSite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetSite")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this share point restore parameters based on the context it is used
func (m *SharePointRestoreParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSiteOwnerList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SharePointRestoreParameters) contextValidateSiteOwnerList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SiteOwnerList); i++ {

		if m.SiteOwnerList[i] != nil {

			if swag.IsZero(m.SiteOwnerList[i]) { // not required
				return nil
			}

			if err := m.SiteOwnerList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("siteOwnerList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("siteOwnerList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SharePointRestoreParameters) contextValidateTargetSite(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetSite != nil {

		if swag.IsZero(m.TargetSite) { // not required
			return nil
		}

		if err := m.TargetSite.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetSite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetSite")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SharePointRestoreParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SharePointRestoreParameters) UnmarshalBinary(b []byte) error {
	var res SharePointRestoreParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
