// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeactivateJobStateProto Message to define all the information associated with the deactivate backup
// job task.
//
// swagger:model DeactivateJobStateProto
type DeactivateJobStateProto struct {

	// Whether to deactivate (i.e., Power off VMs in VMware env) leaf level
	// entities protected by the backup job.
	DeactivateEntities *bool `json:"deactivateEntities,omitempty"`

	// Master populates the information about the entities to be deactivated.
	// Slave populates the progress and status of the task.
	// Please note that this field will be set only if the above field
	// 'deactivate_entities' is set to true.
	DeactivateInfo *DeactivateJobEntitiesInfoProto `json:"deactivateInfo,omitempty"`

	// If the deactivate task has finished, this field contains the end time for
	// the task.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// The error encountered by task (if any). Only valid if the task has
	// finished.
	Error *PrivateErrorProto `json:"error,omitempty"`

	// The globally unique id of the backup job to deactivate.
	JobUID *UniversalIDProto `json:"jobUid,omitempty"`

	// A way to connect to the parent source of this backup job.
	ParentSourceConnectionParams *ConnectorParams `json:"parentSourceConnectionParams,omitempty"`

	// Constituent id (and the gandalf session id) where this task has been
	// scheduled. If -1, the task is not running at any slave. It's possible
	// that the task was previously scheduled, but is now being re-scheduled.
	ScheduledConstituentID *int64 `json:"scheduledConstituentId,omitempty"`

	// scheduled gandalf session Id
	ScheduledGandalfSessionID *int64 `json:"scheduledGandalfSessionId,omitempty"`

	// The start time for this deactivate task.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Status of the deactivate backup job task.
	Status *int32 `json:"status,omitempty"`

	// A unique id of the deactivate backup job task.
	TaskID *int64 `json:"taskId,omitempty"`

	// The user who requested this deactivate operation.
	User *string `json:"user,omitempty"`
}

// Validate validates this deactivate job state proto
func (m *DeactivateJobStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeactivateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentSourceConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeactivateJobStateProto) validateDeactivateInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeactivateInfo) { // not required
		return nil
	}

	if m.DeactivateInfo != nil {
		if err := m.DeactivateInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deactivateInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deactivateInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DeactivateJobStateProto) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *DeactivateJobStateProto) validateJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.JobUID) { // not required
		return nil
	}

	if m.JobUID != nil {
		if err := m.JobUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobUid")
			}
			return err
		}
	}

	return nil
}

func (m *DeactivateJobStateProto) validateParentSourceConnectionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentSourceConnectionParams) { // not required
		return nil
	}

	if m.ParentSourceConnectionParams != nil {
		if err := m.ParentSourceConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSourceConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSourceConnectionParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deactivate job state proto based on the context it is used
func (m *DeactivateJobStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeactivateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentSourceConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeactivateJobStateProto) contextValidateDeactivateInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeactivateInfo != nil {

		if swag.IsZero(m.DeactivateInfo) { // not required
			return nil
		}

		if err := m.DeactivateInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deactivateInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deactivateInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DeactivateJobStateProto) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *DeactivateJobStateProto) contextValidateJobUID(ctx context.Context, formats strfmt.Registry) error {

	if m.JobUID != nil {

		if swag.IsZero(m.JobUID) { // not required
			return nil
		}

		if err := m.JobUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobUid")
			}
			return err
		}
	}

	return nil
}

func (m *DeactivateJobStateProto) contextValidateParentSourceConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentSourceConnectionParams != nil {

		if swag.IsZero(m.ParentSourceConnectionParams) { // not required
			return nil
		}

		if err := m.ParentSourceConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSourceConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSourceConnectionParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeactivateJobStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeactivateJobStateProto) UnmarshalBinary(b []byte) error {
	var res DeactivateJobStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
