// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SourceThrottlingConfiguration Throttling for source side configuartion.
//
// Specifies the source side throttling configuration.
//
// swagger:model SourceThrottlingConfiguration
type SourceThrottlingConfiguration struct {

	// CPU throttling configuration.
	CPUThrottlingConfig *ThrottlingConfiguration `json:"cpuThrottlingConfig,omitempty"`

	// Network throttling configuration.
	NetworkThrottlingConfig *ThrottlingConfiguration `json:"networkThrottlingConfig,omitempty"`
}

// Validate validates this source throttling configuration
func (m *SourceThrottlingConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUThrottlingConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkThrottlingConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceThrottlingConfiguration) validateCPUThrottlingConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUThrottlingConfig) { // not required
		return nil
	}

	if m.CPUThrottlingConfig != nil {
		if err := m.CPUThrottlingConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpuThrottlingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpuThrottlingConfig")
			}
			return err
		}
	}

	return nil
}

func (m *SourceThrottlingConfiguration) validateNetworkThrottlingConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkThrottlingConfig) { // not required
		return nil
	}

	if m.NetworkThrottlingConfig != nil {
		if err := m.NetworkThrottlingConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkThrottlingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkThrottlingConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this source throttling configuration based on the context it is used
func (m *SourceThrottlingConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCPUThrottlingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkThrottlingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceThrottlingConfiguration) contextValidateCPUThrottlingConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.CPUThrottlingConfig != nil {

		if swag.IsZero(m.CPUThrottlingConfig) { // not required
			return nil
		}

		if err := m.CPUThrottlingConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpuThrottlingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpuThrottlingConfig")
			}
			return err
		}
	}

	return nil
}

func (m *SourceThrottlingConfiguration) contextValidateNetworkThrottlingConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkThrottlingConfig != nil {

		if swag.IsZero(m.NetworkThrottlingConfig) { // not required
			return nil
		}

		if err := m.NetworkThrottlingConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkThrottlingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkThrottlingConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SourceThrottlingConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceThrottlingConfiguration) UnmarshalBinary(b []byte) error {
	var res SourceThrottlingConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
