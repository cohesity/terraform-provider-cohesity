// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Consumer Consumer.
//
// Consumer is the storage consumer of a group.
//
// swagger:model Consumer
type Consumer struct {

	// Specifies the id of the consumer.
	ID *int64 `json:"id,omitempty"`

	// Specifies the name of the consumer.
	Name *string `json:"name,omitempty"`

	// Specifies the type of the consumer.
	// Type of the consumer can be one of the following three,
	//
	// 'kViews', indicates the stats info of Views used per organization (tenant)
	// per view box (storage domain).
	// 'kProtectionRuns', indicates the stats info of Protection Runs used per
	// organization (tenant) per view box (storage domain).
	// 'kReplicationRuns', indicates the stats info of Replication In used per
	// organization (tenant) per view box (storage domain).
	// 'kViewProtectionRuns', indicates the stats info of View Protection Runs used
	// per organization (tenant) per view box (storage domain).
	// Enum: ["kViews","kProtectionRuns","kReplicationRuns","kViewProtectionRuns"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this consumer
func (m *Consumer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var consumerTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kViews","kProtectionRuns","kReplicationRuns","kViewProtectionRuns"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consumerTypeTypePropEnum = append(consumerTypeTypePropEnum, v)
	}
}

const (

	// ConsumerTypeKViews captures enum value "kViews"
	ConsumerTypeKViews string = "kViews"

	// ConsumerTypeKProtectionRuns captures enum value "kProtectionRuns"
	ConsumerTypeKProtectionRuns string = "kProtectionRuns"

	// ConsumerTypeKReplicationRuns captures enum value "kReplicationRuns"
	ConsumerTypeKReplicationRuns string = "kReplicationRuns"

	// ConsumerTypeKViewProtectionRuns captures enum value "kViewProtectionRuns"
	ConsumerTypeKViewProtectionRuns string = "kViewProtectionRuns"
)

// prop value enum
func (m *Consumer) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, consumerTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Consumer) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this consumer based on context it is used
func (m *Consumer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Consumer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Consumer) UnmarshalBinary(b []byte) error {
	var res Consumer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
