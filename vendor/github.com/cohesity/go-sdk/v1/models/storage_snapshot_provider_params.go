// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageSnapshotProviderParams storage snapshot provider params
//
// swagger:model StorageSnapshotProviderParams
type StorageSnapshotProviderParams struct {

	// Connector params to access the storage snapshot provider.
	ConnectorParams *ConnectorParams `json:"connectorParams,omitempty"`

	// The entity representing the storage snapshot provider.
	Entity *EntityProto `json:"entity,omitempty"`

	// The root entity that the entity was running under.
	RootEntity *EntityProto `json:"rootEntity,omitempty"`
}

// Validate validates this storage snapshot provider params
func (m *StorageSnapshotProviderParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectorParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSnapshotProviderParams) validateConnectorParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectorParams) { // not required
		return nil
	}

	if m.ConnectorParams != nil {
		if err := m.ConnectorParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectorParams")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSnapshotProviderParams) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSnapshotProviderParams) validateRootEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.RootEntity) { // not required
		return nil
	}

	if m.RootEntity != nil {
		if err := m.RootEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage snapshot provider params based on the context it is used
func (m *StorageSnapshotProviderParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectorParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSnapshotProviderParams) contextValidateConnectorParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectorParams != nil {

		if swag.IsZero(m.ConnectorParams) { // not required
			return nil
		}

		if err := m.ConnectorParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectorParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectorParams")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSnapshotProviderParams) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSnapshotProviderParams) contextValidateRootEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.RootEntity != nil {

		if swag.IsZero(m.RootEntity) { // not required
			return nil
		}

		if err := m.RootEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageSnapshotProviderParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSnapshotProviderParams) UnmarshalBinary(b []byte) error {
	var res StorageSnapshotProviderParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
