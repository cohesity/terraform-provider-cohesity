// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceTreeDetails Device Tree.
//
// Specifies a logical volume stored as a tree where the leaves are
// the blocks of partitions and intermediate nodes are assembled by combining
// nodes using one of the following modes: linear layout, striped,
// mirrored, RAID etc.
// A deviceTree is a block device formed by combining one or more Devices
// using a combining strategy.
//
// swagger:model DeviceTreeDetails
type DeviceTreeDetails struct {

	// Specifies how to combine the children of this node.
	// The combining strategy for child devices. Some of these strategies imply
	// constraint on the number of child devices. e.g. RAID5 will have 5
	// children.
	// 'LINEAR' indicates children are juxtaposed to form this device.
	// 'STRIPE' indicates children are striped.
	// 'MIRROR' indicates children are mirrored.
	// 'RAID5'
	// 'RAID6'
	// 'ZERO'
	// 'THIN'
	// 'THINPOOL'
	// 'SNAPSHOT'
	// 'CACHE'
	// 'CACHEPOOL'
	// Enum: ["LINEAR","STRIPE","MIRROR","RAID5","RAID6","ZERO","THIN","THINPOOL","SNAPSHOT","CACHE","CACHEPOOL"]
	CombineMethod *string `json:"combineMethod,omitempty"`

	// Specifies the length of this device. This number should match the
	// length that is calculated from the children and combining method.
	DeviceLength *int64 `json:"deviceLength,omitempty"`

	// Specifies the children of this node in the device tree.
	DeviceNodes []*DeviceNode `json:"deviceNodes"`

	// Specifies the size of the striped data if the data is striped.
	StripeSize *int32 `json:"stripeSize,omitempty"`
}

// Validate validates this device tree details
func (m *DeviceTreeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCombineMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceTreeDetailsTypeCombineMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LINEAR","STRIPE","MIRROR","RAID5","RAID6","ZERO","THIN","THINPOOL","SNAPSHOT","CACHE","CACHEPOOL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceTreeDetailsTypeCombineMethodPropEnum = append(deviceTreeDetailsTypeCombineMethodPropEnum, v)
	}
}

const (

	// DeviceTreeDetailsCombineMethodLINEAR captures enum value "LINEAR"
	DeviceTreeDetailsCombineMethodLINEAR string = "LINEAR"

	// DeviceTreeDetailsCombineMethodSTRIPE captures enum value "STRIPE"
	DeviceTreeDetailsCombineMethodSTRIPE string = "STRIPE"

	// DeviceTreeDetailsCombineMethodMIRROR captures enum value "MIRROR"
	DeviceTreeDetailsCombineMethodMIRROR string = "MIRROR"

	// DeviceTreeDetailsCombineMethodRAID5 captures enum value "RAID5"
	DeviceTreeDetailsCombineMethodRAID5 string = "RAID5"

	// DeviceTreeDetailsCombineMethodRAID6 captures enum value "RAID6"
	DeviceTreeDetailsCombineMethodRAID6 string = "RAID6"

	// DeviceTreeDetailsCombineMethodZERO captures enum value "ZERO"
	DeviceTreeDetailsCombineMethodZERO string = "ZERO"

	// DeviceTreeDetailsCombineMethodTHIN captures enum value "THIN"
	DeviceTreeDetailsCombineMethodTHIN string = "THIN"

	// DeviceTreeDetailsCombineMethodTHINPOOL captures enum value "THINPOOL"
	DeviceTreeDetailsCombineMethodTHINPOOL string = "THINPOOL"

	// DeviceTreeDetailsCombineMethodSNAPSHOT captures enum value "SNAPSHOT"
	DeviceTreeDetailsCombineMethodSNAPSHOT string = "SNAPSHOT"

	// DeviceTreeDetailsCombineMethodCACHE captures enum value "CACHE"
	DeviceTreeDetailsCombineMethodCACHE string = "CACHE"

	// DeviceTreeDetailsCombineMethodCACHEPOOL captures enum value "CACHEPOOL"
	DeviceTreeDetailsCombineMethodCACHEPOOL string = "CACHEPOOL"
)

// prop value enum
func (m *DeviceTreeDetails) validateCombineMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceTreeDetailsTypeCombineMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceTreeDetails) validateCombineMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.CombineMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCombineMethodEnum("combineMethod", "body", *m.CombineMethod); err != nil {
		return err
	}

	return nil
}

func (m *DeviceTreeDetails) validateDeviceNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.DeviceNodes); i++ {
		if swag.IsZero(m.DeviceNodes[i]) { // not required
			continue
		}

		if m.DeviceNodes[i] != nil {
			if err := m.DeviceNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deviceNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this device tree details based on the context it is used
func (m *DeviceTreeDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceTreeDetails) contextValidateDeviceNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeviceNodes); i++ {

		if m.DeviceNodes[i] != nil {

			if swag.IsZero(m.DeviceNodes[i]) { // not required
				return nil
			}

			if err := m.DeviceNodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deviceNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceTreeDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceTreeDetails) UnmarshalBinary(b []byte) error {
	var res DeviceTreeDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
