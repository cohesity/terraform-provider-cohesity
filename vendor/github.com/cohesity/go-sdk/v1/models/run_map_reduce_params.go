// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RunMapReduceParams Get Run Map Reduce App Parameters.
//
// RunMapReduceParams specifies the input params to run a map reduce instance.
//
// swagger:model RunMapReduceParams
type RunMapReduceParams struct {

	// ApplicationId is the Id of the map reduce application to run.
	AppID *int64 `json:"appId,omitempty"`

	// InputParams specifies optional list of key=value input params specified
	// for running the map reduce instance.
	InputParams []*MapReduceInstanceInputParam `json:"inputParams"`

	// InputSpecification specifies the input information to run the specific map
	// reduce instance.
	MrInput *InputSpec `json:"mrInput,omitempty"`

	// OutputSpecification specifies the output information to run the specific
	// map reduce instance.
	MrOutput *OutputSpec `json:"mrOutput,omitempty"`
}

// Validate validates this run map reduce params
func (m *RunMapReduceParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMrInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMrOutput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunMapReduceParams) validateInputParams(formats strfmt.Registry) error {
	if swag.IsZero(m.InputParams) { // not required
		return nil
	}

	for i := 0; i < len(m.InputParams); i++ {
		if swag.IsZero(m.InputParams[i]) { // not required
			continue
		}

		if m.InputParams[i] != nil {
			if err := m.InputParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunMapReduceParams) validateMrInput(formats strfmt.Registry) error {
	if swag.IsZero(m.MrInput) { // not required
		return nil
	}

	if m.MrInput != nil {
		if err := m.MrInput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mrInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mrInput")
			}
			return err
		}
	}

	return nil
}

func (m *RunMapReduceParams) validateMrOutput(formats strfmt.Registry) error {
	if swag.IsZero(m.MrOutput) { // not required
		return nil
	}

	if m.MrOutput != nil {
		if err := m.MrOutput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mrOutput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mrOutput")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this run map reduce params based on the context it is used
func (m *RunMapReduceParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMrInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMrOutput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunMapReduceParams) contextValidateInputParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InputParams); i++ {

		if m.InputParams[i] != nil {

			if swag.IsZero(m.InputParams[i]) { // not required
				return nil
			}

			if err := m.InputParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunMapReduceParams) contextValidateMrInput(ctx context.Context, formats strfmt.Registry) error {

	if m.MrInput != nil {

		if swag.IsZero(m.MrInput) { // not required
			return nil
		}

		if err := m.MrInput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mrInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mrInput")
			}
			return err
		}
	}

	return nil
}

func (m *RunMapReduceParams) contextValidateMrOutput(ctx context.Context, formats strfmt.Registry) error {

	if m.MrOutput != nil {

		if swag.IsZero(m.MrOutput) { // not required
			return nil
		}

		if err := m.MrOutput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mrOutput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mrOutput")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunMapReduceParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunMapReduceParams) UnmarshalBinary(b []byte) error {
	var res RunMapReduceParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
