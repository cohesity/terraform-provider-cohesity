// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ViewStatsSnapshot View Statistics
//
// Specifies the list statistics for each View for a given timestamp.
//
// swagger:model ViewStatsSnapshot
type ViewStatsSnapshot struct {

	// Specifies the unix time in milliseconds when these values were generated
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Specifies the list of Views and their statistics at the given timestamp.
	ViewStatsList []*ViewStatInfo `json:"viewStatsList"`
}

// Validate validates this view stats snapshot
func (m *ViewStatsSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateViewStatsList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewStatsSnapshot) validateViewStatsList(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewStatsList) { // not required
		return nil
	}

	for i := 0; i < len(m.ViewStatsList); i++ {
		if swag.IsZero(m.ViewStatsList[i]) { // not required
			continue
		}

		if m.ViewStatsList[i] != nil {
			if err := m.ViewStatsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("viewStatsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("viewStatsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this view stats snapshot based on the context it is used
func (m *ViewStatsSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateViewStatsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewStatsSnapshot) contextValidateViewStatsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ViewStatsList); i++ {

		if m.ViewStatsList[i] != nil {

			if swag.IsZero(m.ViewStatsList[i]) { // not required
				return nil
			}

			if err := m.ViewStatsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("viewStatsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("viewStatsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewStatsSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewStatsSnapshot) UnmarshalBinary(b []byte) error {
	var res ViewStatsSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
