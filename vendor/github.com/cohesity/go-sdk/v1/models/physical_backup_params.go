// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PhysicalBackupParams This message contains additional params for a Physical job run.
//
// swagger:model PhysicalBackupParams
type PhysicalBackupParams struct {

	// This is set to true if alignment of end offset in disk areas is enabled.
	// TODO(Chinmaya): This is present for handling upgrades while backup run is
	// active. This can be removed in 4.5.
	DiskAreaAlignEndOffsetEnabled *bool `json:"diskAreaAlignEndOffsetEnabled,omitempty"`

	// This is set to true if the disk areas have to be aligned on an incremental
	// backup.
	// TODO(Chinmaya): This is present for handling upgrades while backup run is
	// active. This can be removed in 4.5
	DiskAreaAlignmentForIncBackupEnabled *bool `json:"diskAreaAlignmentForIncBackupEnabled,omitempty"`

	// Allows Magneto Slave to drive an additional "system backup" via a
	// 3rd-party application.
	IncludeSystemBackup *bool `json:"includeSystemBackup,omitempty"`

	// This field can be populated during run-now requests for physical file
	// based backups for some specific host entity. If specified, it will
	// override any default metadata/directive file path set at the job level
	// for the host. Also note that if the job default does not specify a
	// metadata/directive file path for the host, then specifying this field
	// for that host during run-now request will be rejected.
	MetadataFilePath *string `json:"metadataFilePath,omitempty"`

	// This contains the map of volume guid to device key as present in master.
	// This will be referred to while generating the device key for newly
	// discovered volumes.
	VolumeGUIDDeviceKeyMap map[string]int64 `json:"volumeGuidDeviceKeyMap,omitempty"`
}

// Validate validates this physical backup params
func (m *PhysicalBackupParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this physical backup params based on context it is used
func (m *PhysicalBackupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalBackupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalBackupParams) UnmarshalBinary(b []byte) error {
	var res PhysicalBackupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
