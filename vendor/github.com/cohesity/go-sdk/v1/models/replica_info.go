// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReplicaInfo Replica Info.
//
// Specifies the Replication information about a snapshot.
//
// swagger:model ReplicaInfo
type ReplicaInfo struct {

	// Specifies the expiration time of the snapshot within the target location.
	ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

	// Specifies the snapshot target settings for the given snapshot.
	SnapshotTargetSettings *SnapshotTargetSettings `json:"snapshotTargetSettings,omitempty"`

	// Specifies a global Protection Job id that is unique across Cohesity
	// Clusters.
	UID *UniversalID `json:"uid,omitempty"`
}

// Validate validates this replica info
func (m *ReplicaInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnapshotTargetSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicaInfo) validateSnapshotTargetSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotTargetSettings) { // not required
		return nil
	}

	if m.SnapshotTargetSettings != nil {
		if err := m.SnapshotTargetSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotTargetSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotTargetSettings")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaInfo) validateUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if m.UID != nil {
		if err := m.UID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replica info based on the context it is used
func (m *ReplicaInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSnapshotTargetSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicaInfo) contextValidateSnapshotTargetSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotTargetSettings != nil {

		if swag.IsZero(m.SnapshotTargetSettings) { // not required
			return nil
		}

		if err := m.SnapshotTargetSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotTargetSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotTargetSettings")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaInfo) contextValidateUID(ctx context.Context, formats strfmt.Registry) error {

	if m.UID != nil {

		if swag.IsZero(m.UID) { // not required
			return nil
		}

		if err := m.UID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicaInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicaInfo) UnmarshalBinary(b []byte) error {
	var res ReplicaInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
