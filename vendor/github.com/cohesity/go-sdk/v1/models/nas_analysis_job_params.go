// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NasAnalysisJobParams NAS Analysis Job Parameters.
//
// Message to capture additional NAS analysis job params.
//
// swagger:model NasAnalysisJobParams
type NasAnalysisJobParams struct {

	// File access time buckets.
	AccessTimeBuckets []*NasAnalysisJobParamsAccessTimeBucket `json:"accessTimeBuckets"`

	// File size buckets.
	FileSizeBuckets []*NasAnalysisJobParamsFileSizeBucket `json:"fileSizeBuckets"`

	// File type buckets.
	FileTypeBuckets []*NasAnalysisJobParamsFileTypeBucket `json:"fileTypeBuckets"`

	// File modification time buckets.
	ModTimeBuckets []*NasAnalysisJobParamsModTimeBucket `json:"modTimeBuckets"`
}

// Validate validates this nas analysis job params
func (m *NasAnalysisJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTimeBuckets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSizeBuckets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileTypeBuckets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModTimeBuckets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NasAnalysisJobParams) validateAccessTimeBuckets(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessTimeBuckets) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessTimeBuckets); i++ {
		if swag.IsZero(m.AccessTimeBuckets[i]) { // not required
			continue
		}

		if m.AccessTimeBuckets[i] != nil {
			if err := m.AccessTimeBuckets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessTimeBuckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessTimeBuckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NasAnalysisJobParams) validateFileSizeBuckets(formats strfmt.Registry) error {
	if swag.IsZero(m.FileSizeBuckets) { // not required
		return nil
	}

	for i := 0; i < len(m.FileSizeBuckets); i++ {
		if swag.IsZero(m.FileSizeBuckets[i]) { // not required
			continue
		}

		if m.FileSizeBuckets[i] != nil {
			if err := m.FileSizeBuckets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fileSizeBuckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fileSizeBuckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NasAnalysisJobParams) validateFileTypeBuckets(formats strfmt.Registry) error {
	if swag.IsZero(m.FileTypeBuckets) { // not required
		return nil
	}

	for i := 0; i < len(m.FileTypeBuckets); i++ {
		if swag.IsZero(m.FileTypeBuckets[i]) { // not required
			continue
		}

		if m.FileTypeBuckets[i] != nil {
			if err := m.FileTypeBuckets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fileTypeBuckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fileTypeBuckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NasAnalysisJobParams) validateModTimeBuckets(formats strfmt.Registry) error {
	if swag.IsZero(m.ModTimeBuckets) { // not required
		return nil
	}

	for i := 0; i < len(m.ModTimeBuckets); i++ {
		if swag.IsZero(m.ModTimeBuckets[i]) { // not required
			continue
		}

		if m.ModTimeBuckets[i] != nil {
			if err := m.ModTimeBuckets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modTimeBuckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modTimeBuckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this nas analysis job params based on the context it is used
func (m *NasAnalysisJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessTimeBuckets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileSizeBuckets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileTypeBuckets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModTimeBuckets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NasAnalysisJobParams) contextValidateAccessTimeBuckets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AccessTimeBuckets); i++ {

		if m.AccessTimeBuckets[i] != nil {

			if swag.IsZero(m.AccessTimeBuckets[i]) { // not required
				return nil
			}

			if err := m.AccessTimeBuckets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessTimeBuckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessTimeBuckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NasAnalysisJobParams) contextValidateFileSizeBuckets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FileSizeBuckets); i++ {

		if m.FileSizeBuckets[i] != nil {

			if swag.IsZero(m.FileSizeBuckets[i]) { // not required
				return nil
			}

			if err := m.FileSizeBuckets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fileSizeBuckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fileSizeBuckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NasAnalysisJobParams) contextValidateFileTypeBuckets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FileTypeBuckets); i++ {

		if m.FileTypeBuckets[i] != nil {

			if swag.IsZero(m.FileTypeBuckets[i]) { // not required
				return nil
			}

			if err := m.FileTypeBuckets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fileTypeBuckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fileTypeBuckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NasAnalysisJobParams) contextValidateModTimeBuckets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ModTimeBuckets); i++ {

		if m.ModTimeBuckets[i] != nil {

			if swag.IsZero(m.ModTimeBuckets[i]) { // not required
				return nil
			}

			if err := m.ModTimeBuckets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modTimeBuckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modTimeBuckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NasAnalysisJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NasAnalysisJobParams) UnmarshalBinary(b []byte) error {
	var res NasAnalysisJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
