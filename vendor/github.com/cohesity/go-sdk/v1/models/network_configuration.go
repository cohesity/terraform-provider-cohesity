// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkConfiguration Network Configuration.
//
// Specifies all of the parameters needed for network configuration of
// the new Cluster.
//
// swagger:model NetworkConfiguration
type NetworkConfiguration struct {

	// Specifies the default gateway IP address (or addresses) for the Cluster
	// network.
	ClusterGateway *string `json:"clusterGateway,omitempty"`

	// Specifies the subnet mask (or masks) of the Cluster network.
	ClusterSubnetMask *string `json:"clusterSubnetMask,omitempty"`

	// Specifies the list of DNS Servers this cluster should be configured with.
	DNSServers []string `json:"dnsServers"`

	// Specifies the list of domain names this cluster should be configured
	// with.
	DomainNames []string `json:"domainNames"`

	// Specifies the list of NTP Servers this cluster should be configured with.
	NtpServers []string `json:"ntpServers"`

	// Specifies the virtual IP hostname.
	VipHostname *string `json:"vipHostname,omitempty"`

	// Specifies the list of virtual IPs for the new cluster.
	Vips []string `json:"vips"`
}

// Validate validates this network configuration
func (m *NetworkConfiguration) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this network configuration based on context it is used
func (m *NetworkConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkConfiguration) UnmarshalBinary(b []byte) error {
	var res NetworkConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
