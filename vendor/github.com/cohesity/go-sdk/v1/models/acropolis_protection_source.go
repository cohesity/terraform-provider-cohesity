// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AcropolisProtectionSource Acropolis Protection Source.
//
// Specifies a Protection Source in Acropolis environment.
//
// swagger:model AcropolisProtectionSource
type AcropolisProtectionSource struct {

	// Specifies the UUID of the Acropolis cluster instance to which this
	// entity belongs to.
	ClusterUUID *string `json:"clusterUuid,omitempty"`

	// Specifies a description about the Protection Source.
	Description *string `json:"description,omitempty"`

	// Specifies whether the VM is an agent VM. This is applicable to
	// acropolis entity of type kVirtualMachine.
	MountPath *bool `json:"mountPath,omitempty"`

	// Specifies the name of the Acropolis Object.
	Name *string `json:"name,omitempty"`

	// Specifies enabled capabilities for NGT on the VM. This is applicable to
	// acropolis entity of type kVirtualMachine.
	NgtCapabilities []int32 `json:"ngtCapabilities"`

	// Specifies if NGT is enabled on the VM. This is applicable to acropolis
	// entity of type kVirtualMachine.
	NgtEnableStatus *int32 `json:"ngtEnableStatus,omitempty"`

	// Specified if NGT is installed on the VM. This is applicable to acropolis
	// entity of type kVirtualMachine.
	NgtInstallStatus *int32 `json:"ngtInstallStatus,omitempty"`

	// Specifies if NGT on the VM is reachable from Controller VM.
	// This is applicable to acropolis entity of type kVirtualMachine.
	NgtReachable *bool `json:"ngtReachable,omitempty"`

	// Specifies version of NGT installed on the VM. This is applicable to
	// acropolis entity of type kVirtualMachine.
	NgtVersion *string `json:"ngtVersion,omitempty"`

	// Specifies the type of an Acropolis Protection Source Object such as
	// 'kPrismCentral', 'kHost', 'kNetwork', etc.
	// Enum: ["kPrismCentral","kStandaloneCluster","kOtherHypervisorCluster","kCluster","kHost","kVirtualMachine","kNetwork","kStorageContainer"]
	Type *string `json:"type,omitempty"`

	// Specifies the UUID of the Acropolis Object. This is unique within the
	// cluster instance. Together with clusterUuid, this entity is unique
	// within the Acropolis environment.
	UUID *string `json:"uuid,omitempty"`

	// Specifies the version of an Acropolis cluster or standalone cluster.
	Version *string `json:"version,omitempty"`

	// Specifies an array of virtual disks that are part of the Virtual Machine.
	// This is populated for entities of type 'kVirtualMachine'.
	VirtualDisks []*VirtualDiskConfig `json:"virtualDisks"`
}

// Validate validates this acropolis protection source
func (m *AcropolisProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDisks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var acropolisProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPrismCentral","kStandaloneCluster","kOtherHypervisorCluster","kCluster","kHost","kVirtualMachine","kNetwork","kStorageContainer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		acropolisProtectionSourceTypeTypePropEnum = append(acropolisProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// AcropolisProtectionSourceTypeKPrismCentral captures enum value "kPrismCentral"
	AcropolisProtectionSourceTypeKPrismCentral string = "kPrismCentral"

	// AcropolisProtectionSourceTypeKStandaloneCluster captures enum value "kStandaloneCluster"
	AcropolisProtectionSourceTypeKStandaloneCluster string = "kStandaloneCluster"

	// AcropolisProtectionSourceTypeKOtherHypervisorCluster captures enum value "kOtherHypervisorCluster"
	AcropolisProtectionSourceTypeKOtherHypervisorCluster string = "kOtherHypervisorCluster"

	// AcropolisProtectionSourceTypeKCluster captures enum value "kCluster"
	AcropolisProtectionSourceTypeKCluster string = "kCluster"

	// AcropolisProtectionSourceTypeKHost captures enum value "kHost"
	AcropolisProtectionSourceTypeKHost string = "kHost"

	// AcropolisProtectionSourceTypeKVirtualMachine captures enum value "kVirtualMachine"
	AcropolisProtectionSourceTypeKVirtualMachine string = "kVirtualMachine"

	// AcropolisProtectionSourceTypeKNetwork captures enum value "kNetwork"
	AcropolisProtectionSourceTypeKNetwork string = "kNetwork"

	// AcropolisProtectionSourceTypeKStorageContainer captures enum value "kStorageContainer"
	AcropolisProtectionSourceTypeKStorageContainer string = "kStorageContainer"
)

// prop value enum
func (m *AcropolisProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, acropolisProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AcropolisProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *AcropolisProtectionSource) validateVirtualDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualDisks); i++ {
		if swag.IsZero(m.VirtualDisks[i]) { // not required
			continue
		}

		if m.VirtualDisks[i] != nil {
			if err := m.VirtualDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this acropolis protection source based on the context it is used
func (m *AcropolisProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVirtualDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AcropolisProtectionSource) contextValidateVirtualDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualDisks); i++ {

		if m.VirtualDisks[i] != nil {

			if swag.IsZero(m.VirtualDisks[i]) { // not required
				return nil
			}

			if err := m.VirtualDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AcropolisProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AcropolisProtectionSource) UnmarshalBinary(b []byte) error {
	var res AcropolisProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
