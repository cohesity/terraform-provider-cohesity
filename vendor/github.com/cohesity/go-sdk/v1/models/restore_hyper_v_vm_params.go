// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreHyperVVMParams This message defines the HyperV specific VMs restore params.
//
// swagger:model RestoreHyperVVMParams
type RestoreHyperVVMParams struct {

	// Whether to perform copy recovery.
	CopyRecovery *bool `json:"copyRecovery,omitempty"`

	// A datastore entity where the object's files should be restored to. This
	// field is optional if object is being restored to its original parent
	// source. If not specified, the object's files will be restored to their
	// original datastore locations. This field is mandatory if object is being
	// restored to a different resource entity or to a different parent source.
	DatastoreEntity *EntityProto `json:"datastoreEntity,omitempty"`

	// The power state configuration to be applied to the restored VM.
	//
	// Semantics for kRecoverVMs task: By default, VMs are restored in their
	// original power state.
	//
	// This proto can be used to override the default behavior for the restore
	// task.
	PowerStateConfig *PowerStateConfigProto `json:"powerStateConfig,omitempty"`

	// Whether disks that were excluded during backup should be recovered as
	// blank disks.
	RecoverExcludedDisksAsBlankDisks *bool `json:"recoverExcludedDisksAsBlankDisks,omitempty"`

	// By default, VMs are restored with their original name. This field can
	// be used to specify the transformation ( i.e prefix/suffix) to be applied
	// to the source VM name to derive the new name of the restored VM.
	RenameRestoredObjectParam *RenameObjectParamProto `json:"renameRestoredObjectParam,omitempty"`

	// The resource (HyperV host) to which the restored VM will be attached.
	//
	// This field is optional for a kRecoverVMs task if the VMs are being
	// restored to its original parent source. If not specified, restored VMs
	// will be attached to its original host. This field is mandatory if the
	// VMs are being restored to a different parent source.
	ResourceEntity *EntityProto `json:"resourceEntity,omitempty"`

	// The network configuration to be applied to the restored VMs.
	//
	// Semantics for kRecoverVMs task: By default, if the VMs are being restored
	// to their original location, then original network configuration will be
	// preserved. If objects are being restored to different location (i.e.,
	// different parent source), then network will be detached.
	//
	// Below field can be used to override the default network configuration of
	// the restored VMs.
	//
	// If user want to keep the original network setting for kRecoverVMs task,
	// then this proto should not be set.
	RestoredObjectsNetworkConfig *RestoredObjectNetworkConfigProto `json:"restoredObjectsNetworkConfig,omitempty"`

	// Whether to recover via Cohesity SMB service.
	UseSmbService *bool `json:"useSmbService,omitempty"`

	// UUID config to use for restored VM.
	//
	// Semantics for kRecoverVMs task: By default, recovered VMs have new UUIDs
	// for them.
	//
	// This proto can be used to override the default behavior for the restore
	// task.
	UUIDConfig *UUIDConfigProto `json:"uuidConfig,omitempty"`
}

// Validate validates this restore hyper v VM params
func (m *RestoreHyperVVMParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastoreEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerStateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredObjectParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredObjectsNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUIDConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreHyperVVMParams) validateDatastoreEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.DatastoreEntity) { // not required
		return nil
	}

	if m.DatastoreEntity != nil {
		if err := m.DatastoreEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreHyperVVMParams) validatePowerStateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerStateConfig) { // not required
		return nil
	}

	if m.PowerStateConfig != nil {
		if err := m.PowerStateConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerStateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerStateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreHyperVVMParams) validateRenameRestoredObjectParam(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredObjectParam) { // not required
		return nil
	}

	if m.RenameRestoredObjectParam != nil {
		if err := m.RenameRestoredObjectParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreHyperVVMParams) validateResourceEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceEntity) { // not required
		return nil
	}

	if m.ResourceEntity != nil {
		if err := m.ResourceEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreHyperVVMParams) validateRestoredObjectsNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredObjectsNetworkConfig) { // not required
		return nil
	}

	if m.RestoredObjectsNetworkConfig != nil {
		if err := m.RestoredObjectsNetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredObjectsNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredObjectsNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreHyperVVMParams) validateUUIDConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.UUIDConfig) { // not required
		return nil
	}

	if m.UUIDConfig != nil {
		if err := m.UUIDConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uuidConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uuidConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore hyper v VM params based on the context it is used
func (m *RestoreHyperVVMParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatastoreEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerStateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredObjectParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredObjectsNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUIDConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreHyperVVMParams) contextValidateDatastoreEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.DatastoreEntity != nil {

		if swag.IsZero(m.DatastoreEntity) { // not required
			return nil
		}

		if err := m.DatastoreEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastoreEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastoreEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreHyperVVMParams) contextValidatePowerStateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerStateConfig != nil {

		if swag.IsZero(m.PowerStateConfig) { // not required
			return nil
		}

		if err := m.PowerStateConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerStateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerStateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreHyperVVMParams) contextValidateRenameRestoredObjectParam(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredObjectParam != nil {

		if swag.IsZero(m.RenameRestoredObjectParam) { // not required
			return nil
		}

		if err := m.RenameRestoredObjectParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreHyperVVMParams) contextValidateResourceEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceEntity != nil {

		if swag.IsZero(m.ResourceEntity) { // not required
			return nil
		}

		if err := m.ResourceEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreHyperVVMParams) contextValidateRestoredObjectsNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredObjectsNetworkConfig != nil {

		if swag.IsZero(m.RestoredObjectsNetworkConfig) { // not required
			return nil
		}

		if err := m.RestoredObjectsNetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredObjectsNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredObjectsNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreHyperVVMParams) contextValidateUUIDConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.UUIDConfig != nil {

		if swag.IsZero(m.UUIDConfig) { // not required
			return nil
		}

		if err := m.UUIDConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uuidConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uuidConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreHyperVVMParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreHyperVVMParams) UnmarshalBinary(b []byte) error {
	var res RestoreHyperVVMParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
