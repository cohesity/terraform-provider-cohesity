// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreExchangeParamsDatabaseOptions restore exchange params database options
//
// swagger:model RestoreExchangeParams_DatabaseOptions
type RestoreExchangeParamsDatabaseOptions struct {

	// Destination Database Name
	DestDbName *string `json:"destDbName,omitempty"`

	// Target EDB dir path. Example: e:\myexchange\hrdb\hr_db.edb.
	DestEdbFilepath *string `json:"destEdbFilepath,omitempty"`

	// Target LOG dir path. Example: e:\myexchange\hrdb.
	DestLogDirpath *string `json:"destLogDirpath,omitempty"`

	// The windows machine to which the database will be restored.
	// This field is deprecated.
	EntityID *int64 `json:"entityId,omitempty"`

	// Mount the Database after successful recovery. For alternate location
	// recovery this will result in Information Store Service restart on the
	// target Exchange Node.
	MountDb *bool `json:"mountDb,omitempty"`

	// Progress monitor task path for this entity.
	ProgressMonitorPath *string `json:"progressMonitorPath,omitempty"`

	// Restore this DB as a Recovery Database on the target Exchange Node.
	RestoreAsRecoveryDb *bool `json:"restoreAsRecoveryDb,omitempty"`

	// The entity proto for Exchange host to which the database will be
	// restored.
	TargetHostEntity *EntityProto `json:"targetHostEntity,omitempty"`

	// When replaying the logs, use the latest logs on Exchange for this DB.
	// Applicable for restoring to original location only.
	UseLatestLogs *bool `json:"useLatestLogs,omitempty"`
}

// Validate validates this restore exchange params database options
func (m *RestoreExchangeParamsDatabaseOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetHostEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreExchangeParamsDatabaseOptions) validateTargetHostEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetHostEntity) { // not required
		return nil
	}

	if m.TargetHostEntity != nil {
		if err := m.TargetHostEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetHostEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetHostEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore exchange params database options based on the context it is used
func (m *RestoreExchangeParamsDatabaseOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetHostEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreExchangeParamsDatabaseOptions) contextValidateTargetHostEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetHostEntity != nil {

		if swag.IsZero(m.TargetHostEntity) { // not required
			return nil
		}

		if err := m.TargetHostEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetHostEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetHostEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreExchangeParamsDatabaseOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreExchangeParamsDatabaseOptions) UnmarshalBinary(b []byte) error {
	var res RestoreExchangeParamsDatabaseOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
