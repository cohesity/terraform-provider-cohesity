// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreTaskStateBaseProto restore task state base proto
//
// swagger:model RestoreTaskStateBaseProto
type RestoreTaskStateBaseProto struct {

	// Whether this task has a pending cancellation request.
	CancellationRequested *bool `json:"cancellationRequested,omitempty"`

	// If the restore task has finished, this field contains the end time for the
	// task.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// The error encountered by task (if any). Only valid if the task has
	// finished.
	Error *ErrorProto `json:"error,omitempty"`

	// Whether the restore task is internal. This is currently used by standby
	// restore tasks.
	IsInternal *bool `json:"isInternal,omitempty"`

	// The name of the restore task.
	Name *string `json:"name,omitempty"`

	// A way to connect to the parent source.
	ParentSourceConnectionParams *ConnectorParams `json:"parentSourceConnectionParams,omitempty"`

	// If the restore task has encountered an error during the master side
	// preprocessing, this field will be set.
	PreprocessingError *ErrorProto `json:"preprocessingError,omitempty"`

	// Iris-facing task state. This field is stamped during the export.
	PublicStatus *int32 `json:"publicStatus,omitempty"`

	// Status of the refresh task.
	RefreshStatus *int32 `json:"refreshStatus,omitempty"`

	// This contains restore vlan params if it was specified as part of the
	// restore task.
	RestoreVlanParams *VlanParams `json:"restoreVlanParams,omitempty"`

	// Constituent id (and the gandalf session id) where this task has been
	// scheduled. If -1, the task is not running at any slave. It's possible
	// that the task was previously scheduled, but is now being re-scheduled.
	ScheduledConstituentID *int64 `json:"scheduledConstituentId,omitempty"`

	// scheduled gandalf session Id
	ScheduledGandalfSessionID *int64 `json:"scheduledGandalfSessionId,omitempty"`

	// The start time for this restore task.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Status of the restore task.
	Status *int32 `json:"status,omitempty"`

	// A unique id for this task within the cluster.
	//
	// Reason for ignoring in tenant migration checks is that on the destination
	// cluster the restore task id will be regenerated. So, the task id of a
	// restore task on the source and destination cluster will not remain the
	// same.
	TaskID *int64 `json:"taskId,omitempty"`

	// A global unique id for this task. Note that currently it is used to
	// perform tenant migration.
	TaskUID *UniversalIDProto `json:"taskUid,omitempty"`

	// Logical size of this restore task. This is the amount of data that needs
	// to be transferred to restore the entity.
	TotalLogicalSizeBytes *int64 `json:"totalLogicalSizeBytes,omitempty"`

	// Physical size of this restore task. This is the amount of data that was
	// actually transferred to restore the entity.
	TotalPhysicalSizeBytes *int64 `json:"totalPhysicalSizeBytes,omitempty"`

	// The type of restore being performed.
	Type *int32 `json:"type,omitempty"`

	// The user who requested this restore task.
	User *string `json:"user,omitempty"`

	// Specifies information about the user who made the request.
	UserInfo *UserInformation `json:"userInfo,omitempty"`

	// Messages displayed to the user for this task (if any).
	// Only valid if the status of the task is kFinished. This is used for
	// informing the user with additional details when there is not an error.
	UserMessages []string `json:"userMessages"`

	// The warnings encountered by this task (if any) during its execution.
	Warnings []*ErrorProto `json:"warnings"`
}

// Validate validates this restore task state base proto
func (m *RestoreTaskStateBaseProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentSourceConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreprocessingError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreTaskStateBaseProto) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) validateParentSourceConnectionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentSourceConnectionParams) { // not required
		return nil
	}

	if m.ParentSourceConnectionParams != nil {
		if err := m.ParentSourceConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSourceConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSourceConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) validatePreprocessingError(formats strfmt.Registry) error {
	if swag.IsZero(m.PreprocessingError) { // not required
		return nil
	}

	if m.PreprocessingError != nil {
		if err := m.PreprocessingError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preprocessingError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preprocessingError")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) validateRestoreVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreVlanParams) { // not required
		return nil
	}

	if m.RestoreVlanParams != nil {
		if err := m.RestoreVlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) validateTaskUID(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskUID) { // not required
		return nil
	}

	if m.TaskUID != nil {
		if err := m.TaskUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taskUid")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) validateUserInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.UserInfo) { // not required
		return nil
	}

	if m.UserInfo != nil {
		if err := m.UserInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) validateWarnings(formats strfmt.Registry) error {
	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	for i := 0; i < len(m.Warnings); i++ {
		if swag.IsZero(m.Warnings[i]) { // not required
			continue
		}

		if m.Warnings[i] != nil {
			if err := m.Warnings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this restore task state base proto based on the context it is used
func (m *RestoreTaskStateBaseProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentSourceConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreprocessingError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreTaskStateBaseProto) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) contextValidateParentSourceConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentSourceConnectionParams != nil {

		if swag.IsZero(m.ParentSourceConnectionParams) { // not required
			return nil
		}

		if err := m.ParentSourceConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSourceConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSourceConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) contextValidatePreprocessingError(ctx context.Context, formats strfmt.Registry) error {

	if m.PreprocessingError != nil {

		if swag.IsZero(m.PreprocessingError) { // not required
			return nil
		}

		if err := m.PreprocessingError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preprocessingError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preprocessingError")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) contextValidateRestoreVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreVlanParams != nil {

		if swag.IsZero(m.RestoreVlanParams) { // not required
			return nil
		}

		if err := m.RestoreVlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) contextValidateTaskUID(ctx context.Context, formats strfmt.Registry) error {

	if m.TaskUID != nil {

		if swag.IsZero(m.TaskUID) { // not required
			return nil
		}

		if err := m.TaskUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taskUid")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) contextValidateUserInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.UserInfo != nil {

		if swag.IsZero(m.UserInfo) { // not required
			return nil
		}

		if err := m.UserInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreTaskStateBaseProto) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Warnings); i++ {

		if m.Warnings[i] != nil {

			if swag.IsZero(m.Warnings[i]) { // not required
				return nil
			}

			if err := m.Warnings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreTaskStateBaseProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreTaskStateBaseProto) UnmarshalBinary(b []byte) error {
	var res RestoreTaskStateBaseProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
