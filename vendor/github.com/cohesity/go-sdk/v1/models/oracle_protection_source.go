// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OracleProtectionSource Oracle Protection Source.
//
// Specifies an Object representing one Oracle database.
//
// swagger:model OracleProtectionSource
type OracleProtectionSource struct {

	// Specifies whether the database is running in ARCHIVELOG mode. It enables
	// the redo of log files into archived redo log files.
	ArchiveLogEnabled *bool `json:"archiveLogEnabled,omitempty"`

	// Specifies whether the Block Change Tracking is enabled. BCT improves the
	// performance of incremental backups by recording changed blocks into the
	// block change tracking file. RMAN then uses this file to identify changed
	// blocks to be backed up.
	BctEnabled *bool `json:"bctEnabled,omitempty"`

	// Specifies the Container Database Information including the Pluggable
	// databases within the container.
	ContainerDatabaseInfo *OracleContainerDatabaseInfo `json:"containerDatabaseInfo,omitempty"`

	// Specifies the Data Gurad configuration information for the current DB
	// entity.
	DataGuardInfo *OracleDataGuardInfo `json:"dataGuardInfo,omitempty"`

	// Specifies the unique name of the Oracle entity.
	DatabaseUniqueName *string `json:"databaseUniqueName,omitempty"`

	// Specifies the type of the database in Oracle Protection Source.
	// 'kRACDatabase' indicates the database is a RAC DB.
	// 'kSingleInstance' indicates that the database is single instance.
	// Enum: ["kSingleInstance","kRACDatabase"]
	DbType *string `json:"dbType,omitempty"`

	// Specifies the Oracle DB Domain.
	Domain *string `json:"domain,omitempty"`

	// Specifies Flash/Fast Recovery area size for the current DB entity.
	FraSize *int64 `json:"fraSize,omitempty"`

	// Specifies the list of hosts for the current DB entity.
	Hosts []*OracleHost `json:"hosts"`

	// Specifies the instance name of the Oracle entity.
	Name *string `json:"name,omitempty"`

	// Specifies the entity id of the owner entity (such as a VM). This is only
	// set if type is kDatabase.
	OwnerID *int64 `json:"ownerId,omitempty"`

	// Specifies System Global Area size for the current DB entity.
	// A system global area (SGA) is a group of shared memory structures that
	// contain data and control information for one Oracle database.
	SgaTargetSize *string `json:"sgaTargetSize,omitempty"`

	// Specifies Shared Pool Size for the current DB entity.
	SharedPoolSize *string `json:"sharedPoolSize,omitempty"`

	// Specifies database size.
	Size *int64 `json:"size,omitempty"`

	// Specifies the number of TDE encrypted tablespaces found in the database.
	TdeEncryptedTsCount *int64 `json:"tdeEncryptedTsCount,omitempty"`

	// Specifies number of temporary files for the current DB entity.
	TempFilesCount *int64 `json:"tempFilesCount,omitempty"`

	// Specifies the type of the managed Object in Oracle Protection Source.
	// 'kRACRootContainer' indicates the entity is a root container to an Oracle
	// Real Application clusters(Oracle RAC).
	// 'kRootContainer' indicates the entity is a root container to an Oracle
	// standalone server.
	// 'kHost' indicates the entity is an Oracle host.
	// 'kDatabase' indicates the entity is an Oracle Database.
	// 'kTableSpace' indicates the entity is an Oracle table space.
	// 'kTable' indicates the entity is an Oracle table.
	// Enum: ["kRACRootContainer","kRootContainer","kHost","kDatabase","kTableSpace","kTable"]
	Type *string `json:"type,omitempty"`

	// Specifies the UUID for the Oracle entity.
	UUID *string `json:"uuid,omitempty"`

	// Specifies the Oracle database instance version.
	Version *string `json:"version,omitempty"`
}

// Validate validates this oracle protection source
func (m *OracleProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerDatabaseInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataGuardInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleProtectionSource) validateContainerDatabaseInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ContainerDatabaseInfo) { // not required
		return nil
	}

	if m.ContainerDatabaseInfo != nil {
		if err := m.ContainerDatabaseInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerDatabaseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("containerDatabaseInfo")
			}
			return err
		}
	}

	return nil
}

func (m *OracleProtectionSource) validateDataGuardInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DataGuardInfo) { // not required
		return nil
	}

	if m.DataGuardInfo != nil {
		if err := m.DataGuardInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataGuardInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataGuardInfo")
			}
			return err
		}
	}

	return nil
}

var oracleProtectionSourceTypeDbTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSingleInstance","kRACDatabase"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleProtectionSourceTypeDbTypePropEnum = append(oracleProtectionSourceTypeDbTypePropEnum, v)
	}
}

const (

	// OracleProtectionSourceDbTypeKSingleInstance captures enum value "kSingleInstance"
	OracleProtectionSourceDbTypeKSingleInstance string = "kSingleInstance"

	// OracleProtectionSourceDbTypeKRACDatabase captures enum value "kRACDatabase"
	OracleProtectionSourceDbTypeKRACDatabase string = "kRACDatabase"
)

// prop value enum
func (m *OracleProtectionSource) validateDbTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleProtectionSourceTypeDbTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleProtectionSource) validateDbType(formats strfmt.Registry) error {
	if swag.IsZero(m.DbType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDbTypeEnum("dbType", "body", *m.DbType); err != nil {
		return err
	}

	return nil
}

func (m *OracleProtectionSource) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oracleProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRACRootContainer","kRootContainer","kHost","kDatabase","kTableSpace","kTable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleProtectionSourceTypeTypePropEnum = append(oracleProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// OracleProtectionSourceTypeKRACRootContainer captures enum value "kRACRootContainer"
	OracleProtectionSourceTypeKRACRootContainer string = "kRACRootContainer"

	// OracleProtectionSourceTypeKRootContainer captures enum value "kRootContainer"
	OracleProtectionSourceTypeKRootContainer string = "kRootContainer"

	// OracleProtectionSourceTypeKHost captures enum value "kHost"
	OracleProtectionSourceTypeKHost string = "kHost"

	// OracleProtectionSourceTypeKDatabase captures enum value "kDatabase"
	OracleProtectionSourceTypeKDatabase string = "kDatabase"

	// OracleProtectionSourceTypeKTableSpace captures enum value "kTableSpace"
	OracleProtectionSourceTypeKTableSpace string = "kTableSpace"

	// OracleProtectionSourceTypeKTable captures enum value "kTable"
	OracleProtectionSourceTypeKTable string = "kTable"
)

// prop value enum
func (m *OracleProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this oracle protection source based on the context it is used
func (m *OracleProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContainerDatabaseInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataGuardInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleProtectionSource) contextValidateContainerDatabaseInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ContainerDatabaseInfo != nil {

		if swag.IsZero(m.ContainerDatabaseInfo) { // not required
			return nil
		}

		if err := m.ContainerDatabaseInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerDatabaseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("containerDatabaseInfo")
			}
			return err
		}
	}

	return nil
}

func (m *OracleProtectionSource) contextValidateDataGuardInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DataGuardInfo != nil {

		if swag.IsZero(m.DataGuardInfo) { // not required
			return nil
		}

		if err := m.DataGuardInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataGuardInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataGuardInfo")
			}
			return err
		}
	}

	return nil
}

func (m *OracleProtectionSource) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hosts); i++ {

		if m.Hosts[i] != nil {

			if swag.IsZero(m.Hosts[i]) { // not required
				return nil
			}

			if err := m.Hosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleProtectionSource) UnmarshalBinary(b []byte) error {
	var res OracleProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
