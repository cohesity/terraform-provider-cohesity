// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UdaRecoverParams uda recover params
//
// swagger:model UdaRecoverParams
type UdaRecoverParams struct {

	// If the restore has logs to be replayed, 'log_view_name' contains the name
	// of log backup view to be mounted on the host.
	LogViewName *string `json:"logViewName,omitempty"`

	// restore objects
	RestoreObjects []*UdaRestoreObject `json:"restoreObjects"`

	// Pass throttling policy being used to throttle restore.
	ThrottlingPolicy *ThrottlingPolicy `json:"throttlingPolicy,omitempty"`

	// The view box where log backed up data has been saved.
	ViewBoxID *int64 `json:"viewBoxId,omitempty"`
}

// Validate validates this uda recover params
func (m *UdaRecoverParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestoreObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaRecoverParams) validateRestoreObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.RestoreObjects); i++ {
		if swag.IsZero(m.RestoreObjects[i]) { // not required
			continue
		}

		if m.RestoreObjects[i] != nil {
			if err := m.RestoreObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaRecoverParams) validateThrottlingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingPolicy) { // not required
		return nil
	}

	if m.ThrottlingPolicy != nil {
		if err := m.ThrottlingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this uda recover params based on the context it is used
func (m *UdaRecoverParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRestoreObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaRecoverParams) contextValidateRestoreObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestoreObjects); i++ {

		if m.RestoreObjects[i] != nil {

			if swag.IsZero(m.RestoreObjects[i]) { // not required
				return nil
			}

			if err := m.RestoreObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaRecoverParams) contextValidateThrottlingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ThrottlingPolicy != nil {

		if swag.IsZero(m.ThrottlingPolicy) { // not required
			return nil
		}

		if err := m.ThrottlingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UdaRecoverParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaRecoverParams) UnmarshalBinary(b []byte) error {
	var res UdaRecoverParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
