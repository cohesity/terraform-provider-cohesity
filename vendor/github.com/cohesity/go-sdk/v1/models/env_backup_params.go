// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EnvBackupParams Message to capture any additional environment specific backup params at the
// job level.
//
// swagger:model EnvBackupParams
type EnvBackupParams struct {

	// This is applicable to Acropolis environment.
	AcropolisBackupJobParams *AcropolisBackupJobParams `json:"acropolisBackupJobParams,omitempty"`

	// This is applicable to AWS native backups.
	AwsNativeEnvParams *AWSNativeEnvParams `json:"awsNativeEnvParams,omitempty"`

	// This is applicable to Aws RDS/Aurora Postgres environments.
	AwsRdsPostgresEnvParams AwsRDSPostgresEnvBackupParams `json:"awsRdsPostgresEnvParams,omitempty"`

	// This is applicable to kAzureNative job type.
	AzureNativeEnvParams *AzureNativeEnvParams `json:"azureNativeEnvParams,omitempty"`

	// This is applicable to Azure Sql environments.
	AzureSQLEnvParams *AzureSQLEnvBackupParamsProto `json:"azureSqlEnvParams,omitempty"`

	// This is applicable to Exchange environments.
	ExchangeBackupJobParams *ExchangeBackupJobParams `json:"exchangeBackupJobParams,omitempty"`

	// This is applicable to externally triggered backups.
	ExternallyTriggeredJobParams *ExternallyTriggeredJobParams `json:"externallyTriggeredJobParams,omitempty"`

	// This is applicable to stubbing in NAS environments.
	FileStubbingParams *FileStubbingParams `json:"fileStubbingParams,omitempty"`

	// This is applicable to uptiering in NAS environments.
	FileUptieringParams *FileUptieringParams `json:"fileUptieringParams,omitempty"`

	// This is applicable to GCP native backups.
	GcpNativeJobParams *GCPNativeJobParams `json:"gcpNativeJobParams,omitempty"`

	// This is applicable to HyperV type of environments.
	HypervBackupParams *HyperVBackupEnvParams `json:"hypervBackupParams,omitempty"`

	// This is applicable to Isilon type of environments.
	IsilonEnvParams *IsilonEnvParams `json:"isilonEnvParams,omitempty"`

	// This is applicable to Kubernetes type of environments.
	KubernetesEnvParams *KubernetesEnvParams `json:"kubernetesEnvParams,omitempty"`

	// This is applicable to analysis of NAS environments.
	NasAnalysisJobParams *NasAnalysisJobParams `json:"nasAnalysisJobParams,omitempty"`

	// This is applicable to NAS type of environments.
	NasBackupParams *NasBackupParams `json:"nasBackupParams,omitempty"`

	// This is applicable to NoSql DB environments.
	NosqlBackupJobParams *NoSQLBackupJobParams `json:"nosqlBackupJobParams,omitempty"`

	// This is applicable to stubbing in o365 environments.
	O365BackupParams *O365BackupEnvParams `json:"o365BackupParams,omitempty"`

	// This is applicable to Oracle environments.
	OracleBackupJobParams *OracleBackupJobParams `json:"oracleBackupJobParams,omitempty"`

	// This is applicable to Outlook type of environments.
	OutlookBackupParams *OutlookBackupEnvParams `json:"outlookBackupParams,omitempty"`

	// This is applicable to Physical type of environments.
	PhysicalBackupParams *PhysicalBackupEnvParams `json:"physicalBackupParams,omitempty"`

	// This is applicable to kAwsS3 job type.
	S3BackupJobParams *S3BackupJobParams `json:"s3BackupJobParams,omitempty"`

	// This is applicable to SAN environments.
	SanBackupJobParams *SanBackupJobParams `json:"sanBackupJobParams,omitempty"`

	// This is applicable to SFDC type of environments.
	SfdcBackupJobParams *SfdcBackupJobParams `json:"sfdcBackupJobParams,omitempty"`

	// This is applicable to snapshot manager jobs.
	SnapshotManagerParams *SnapshotManagerParams `json:"snapshotManagerParams,omitempty"`

	// This is applicable to SQL environments.
	SQLBackupJobParams *SQLBackupJobParams `json:"sqlBackupJobParams,omitempty"`

	// This is applicable to UDA environments.
	UdaBackupJobParams *UdaBackupJobParams `json:"udaBackupJobParams,omitempty"`

	// This is applicable to VMware type of environments.
	VmwareBackupParams *VMwareBackupEnvParams `json:"vmwareBackupParams,omitempty"`
}

// Validate validates this env backup params
func (m *EnvBackupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcropolisBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsNativeEnvParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureNativeEnvParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureSQLEnvParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternallyTriggeredJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileStubbingParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileUptieringParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpNativeJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonEnvParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesEnvParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNasAnalysisJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNasBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNosqlBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO365BackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutlookBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3BackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSanBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotManagerParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaBackupJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvBackupParams) validateAcropolisBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisBackupJobParams) { // not required
		return nil
	}

	if m.AcropolisBackupJobParams != nil {
		if err := m.AcropolisBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateAwsNativeEnvParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsNativeEnvParams) { // not required
		return nil
	}

	if m.AwsNativeEnvParams != nil {
		if err := m.AwsNativeEnvParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsNativeEnvParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsNativeEnvParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateAzureNativeEnvParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureNativeEnvParams) { // not required
		return nil
	}

	if m.AzureNativeEnvParams != nil {
		if err := m.AzureNativeEnvParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureNativeEnvParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureNativeEnvParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateAzureSQLEnvParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureSQLEnvParams) { // not required
		return nil
	}

	if m.AzureSQLEnvParams != nil {
		if err := m.AzureSQLEnvParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureSqlEnvParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureSqlEnvParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateExchangeBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeBackupJobParams) { // not required
		return nil
	}

	if m.ExchangeBackupJobParams != nil {
		if err := m.ExchangeBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateExternallyTriggeredJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternallyTriggeredJobParams) { // not required
		return nil
	}

	if m.ExternallyTriggeredJobParams != nil {
		if err := m.ExternallyTriggeredJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externallyTriggeredJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externallyTriggeredJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateFileStubbingParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FileStubbingParams) { // not required
		return nil
	}

	if m.FileStubbingParams != nil {
		if err := m.FileStubbingParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileStubbingParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileStubbingParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateFileUptieringParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FileUptieringParams) { // not required
		return nil
	}

	if m.FileUptieringParams != nil {
		if err := m.FileUptieringParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileUptieringParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileUptieringParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateGcpNativeJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpNativeJobParams) { // not required
		return nil
	}

	if m.GcpNativeJobParams != nil {
		if err := m.GcpNativeJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpNativeJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpNativeJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateHypervBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervBackupParams) { // not required
		return nil
	}

	if m.HypervBackupParams != nil {
		if err := m.HypervBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateIsilonEnvParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonEnvParams) { // not required
		return nil
	}

	if m.IsilonEnvParams != nil {
		if err := m.IsilonEnvParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonEnvParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonEnvParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateKubernetesEnvParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesEnvParams) { // not required
		return nil
	}

	if m.KubernetesEnvParams != nil {
		if err := m.KubernetesEnvParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesEnvParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesEnvParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateNasAnalysisJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NasAnalysisJobParams) { // not required
		return nil
	}

	if m.NasAnalysisJobParams != nil {
		if err := m.NasAnalysisJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasAnalysisJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasAnalysisJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateNasBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NasBackupParams) { // not required
		return nil
	}

	if m.NasBackupParams != nil {
		if err := m.NasBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateNosqlBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NosqlBackupJobParams) { // not required
		return nil
	}

	if m.NosqlBackupJobParams != nil {
		if err := m.NosqlBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateO365BackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.O365BackupParams) { // not required
		return nil
	}

	if m.O365BackupParams != nil {
		if err := m.O365BackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365BackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365BackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateOracleBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleBackupJobParams) { // not required
		return nil
	}

	if m.OracleBackupJobParams != nil {
		if err := m.OracleBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateOutlookBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OutlookBackupParams) { // not required
		return nil
	}

	if m.OutlookBackupParams != nil {
		if err := m.OutlookBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validatePhysicalBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalBackupParams) { // not required
		return nil
	}

	if m.PhysicalBackupParams != nil {
		if err := m.PhysicalBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateS3BackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.S3BackupJobParams) { // not required
		return nil
	}

	if m.S3BackupJobParams != nil {
		if err := m.S3BackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3BackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3BackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateSanBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SanBackupJobParams) { // not required
		return nil
	}

	if m.SanBackupJobParams != nil {
		if err := m.SanBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sanBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sanBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateSfdcBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcBackupJobParams) { // not required
		return nil
	}

	if m.SfdcBackupJobParams != nil {
		if err := m.SfdcBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateSnapshotManagerParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotManagerParams) { // not required
		return nil
	}

	if m.SnapshotManagerParams != nil {
		if err := m.SnapshotManagerParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotManagerParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotManagerParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateSQLBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLBackupJobParams) { // not required
		return nil
	}

	if m.SQLBackupJobParams != nil {
		if err := m.SQLBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateUdaBackupJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaBackupJobParams) { // not required
		return nil
	}

	if m.UdaBackupJobParams != nil {
		if err := m.UdaBackupJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) validateVmwareBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareBackupParams) { // not required
		return nil
	}

	if m.VmwareBackupParams != nil {
		if err := m.VmwareBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareBackupParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this env backup params based on the context it is used
func (m *EnvBackupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcropolisBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsNativeEnvParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureNativeEnvParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureSQLEnvParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternallyTriggeredJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileStubbingParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileUptieringParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpNativeJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonEnvParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesEnvParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNasAnalysisJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNasBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNosqlBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateO365BackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutlookBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3BackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSanBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotManagerParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaBackupJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvBackupParams) contextValidateAcropolisBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AcropolisBackupJobParams != nil {

		if swag.IsZero(m.AcropolisBackupJobParams) { // not required
			return nil
		}

		if err := m.AcropolisBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateAwsNativeEnvParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsNativeEnvParams != nil {

		if swag.IsZero(m.AwsNativeEnvParams) { // not required
			return nil
		}

		if err := m.AwsNativeEnvParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsNativeEnvParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsNativeEnvParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateAzureNativeEnvParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureNativeEnvParams != nil {

		if swag.IsZero(m.AzureNativeEnvParams) { // not required
			return nil
		}

		if err := m.AzureNativeEnvParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureNativeEnvParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureNativeEnvParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateAzureSQLEnvParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureSQLEnvParams != nil {

		if swag.IsZero(m.AzureSQLEnvParams) { // not required
			return nil
		}

		if err := m.AzureSQLEnvParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureSqlEnvParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureSqlEnvParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateExchangeBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeBackupJobParams != nil {

		if swag.IsZero(m.ExchangeBackupJobParams) { // not required
			return nil
		}

		if err := m.ExchangeBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateExternallyTriggeredJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternallyTriggeredJobParams != nil {

		if swag.IsZero(m.ExternallyTriggeredJobParams) { // not required
			return nil
		}

		if err := m.ExternallyTriggeredJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externallyTriggeredJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externallyTriggeredJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateFileStubbingParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FileStubbingParams != nil {

		if swag.IsZero(m.FileStubbingParams) { // not required
			return nil
		}

		if err := m.FileStubbingParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileStubbingParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileStubbingParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateFileUptieringParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FileUptieringParams != nil {

		if swag.IsZero(m.FileUptieringParams) { // not required
			return nil
		}

		if err := m.FileUptieringParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileUptieringParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileUptieringParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateGcpNativeJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpNativeJobParams != nil {

		if swag.IsZero(m.GcpNativeJobParams) { // not required
			return nil
		}

		if err := m.GcpNativeJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpNativeJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpNativeJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateHypervBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervBackupParams != nil {

		if swag.IsZero(m.HypervBackupParams) { // not required
			return nil
		}

		if err := m.HypervBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateIsilonEnvParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonEnvParams != nil {

		if swag.IsZero(m.IsilonEnvParams) { // not required
			return nil
		}

		if err := m.IsilonEnvParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonEnvParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonEnvParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateKubernetesEnvParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesEnvParams != nil {

		if swag.IsZero(m.KubernetesEnvParams) { // not required
			return nil
		}

		if err := m.KubernetesEnvParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesEnvParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesEnvParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateNasAnalysisJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NasAnalysisJobParams != nil {

		if swag.IsZero(m.NasAnalysisJobParams) { // not required
			return nil
		}

		if err := m.NasAnalysisJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasAnalysisJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasAnalysisJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateNasBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NasBackupParams != nil {

		if swag.IsZero(m.NasBackupParams) { // not required
			return nil
		}

		if err := m.NasBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateNosqlBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NosqlBackupJobParams != nil {

		if swag.IsZero(m.NosqlBackupJobParams) { // not required
			return nil
		}

		if err := m.NosqlBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateO365BackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.O365BackupParams != nil {

		if swag.IsZero(m.O365BackupParams) { // not required
			return nil
		}

		if err := m.O365BackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365BackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365BackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateOracleBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleBackupJobParams != nil {

		if swag.IsZero(m.OracleBackupJobParams) { // not required
			return nil
		}

		if err := m.OracleBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateOutlookBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OutlookBackupParams != nil {

		if swag.IsZero(m.OutlookBackupParams) { // not required
			return nil
		}

		if err := m.OutlookBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidatePhysicalBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalBackupParams != nil {

		if swag.IsZero(m.PhysicalBackupParams) { // not required
			return nil
		}

		if err := m.PhysicalBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateS3BackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.S3BackupJobParams != nil {

		if swag.IsZero(m.S3BackupJobParams) { // not required
			return nil
		}

		if err := m.S3BackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3BackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3BackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateSanBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SanBackupJobParams != nil {

		if swag.IsZero(m.SanBackupJobParams) { // not required
			return nil
		}

		if err := m.SanBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sanBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sanBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateSfdcBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcBackupJobParams != nil {

		if swag.IsZero(m.SfdcBackupJobParams) { // not required
			return nil
		}

		if err := m.SfdcBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateSnapshotManagerParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotManagerParams != nil {

		if swag.IsZero(m.SnapshotManagerParams) { // not required
			return nil
		}

		if err := m.SnapshotManagerParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotManagerParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotManagerParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateSQLBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLBackupJobParams != nil {

		if swag.IsZero(m.SQLBackupJobParams) { // not required
			return nil
		}

		if err := m.SQLBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateUdaBackupJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaBackupJobParams != nil {

		if swag.IsZero(m.UdaBackupJobParams) { // not required
			return nil
		}

		if err := m.UdaBackupJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaBackupJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaBackupJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvBackupParams) contextValidateVmwareBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareBackupParams != nil {

		if swag.IsZero(m.VmwareBackupParams) { // not required
			return nil
		}

		if err := m.VmwareBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareBackupParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvBackupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvBackupParams) UnmarshalBinary(b []byte) error {
	var res EnvBackupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
