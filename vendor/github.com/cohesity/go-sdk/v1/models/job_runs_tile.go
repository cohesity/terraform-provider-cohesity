// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JobRunsTile Job Runs Tile.
//
// Jon Runs information.
//
// swagger:model JobRunsTile
type JobRunsTile struct {

	// Number of Error runs in the last 24 hours.
	LastDayNumJobErrors *int32 `json:"lastDayNumJobErrors,omitempty"`

	// Number of Job Runs in the last 24 hours.
	LastDayNumJobRuns *int32 `json:"lastDayNumJobRuns,omitempty"`

	// Number of SLA Violations in the last 24 hours.
	LastDayNumJobSLAViolations *int32 `json:"lastDayNumJobSlaViolations,omitempty"`

	// Number of Jobs currently running.
	NumJobRunning *int32 `json:"numJobRunning,omitempty"`

	// Objects Protected By Policy.
	ObjectsProtectedByPolicy []*ObjectsProtectedByPolicy `json:"objectsProtectedByPolicy"`
}

// Validate validates this job runs tile
func (m *JobRunsTile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectsProtectedByPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobRunsTile) validateObjectsProtectedByPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectsProtectedByPolicy) { // not required
		return nil
	}

	for i := 0; i < len(m.ObjectsProtectedByPolicy); i++ {
		if swag.IsZero(m.ObjectsProtectedByPolicy[i]) { // not required
			continue
		}

		if m.ObjectsProtectedByPolicy[i] != nil {
			if err := m.ObjectsProtectedByPolicy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectsProtectedByPolicy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectsProtectedByPolicy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this job runs tile based on the context it is used
func (m *JobRunsTile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjectsProtectedByPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobRunsTile) contextValidateObjectsProtectedByPolicy(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ObjectsProtectedByPolicy); i++ {

		if m.ObjectsProtectedByPolicy[i] != nil {

			if swag.IsZero(m.ObjectsProtectedByPolicy[i]) { // not required
				return nil
			}

			if err := m.ObjectsProtectedByPolicy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectsProtectedByPolicy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectsProtectedByPolicy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobRunsTile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobRunsTile) UnmarshalBinary(b []byte) error {
	var res JobRunsTile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
