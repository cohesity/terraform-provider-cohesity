// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataTransferToVaultSummary Data Transfer to Vault Summary.
//
// Specifies statistics about the transfer of data from this Cohesity
// Cluster to a Vault.
//
// swagger:model DataTransferToVaultSummary
type DataTransferToVaultSummary struct {

	// Array of Data Transfer Statistics Per Protection Jobs.
	//
	// Specifies the data transfer summary statistics for each Protection Job
	// that is transferring data from this Cohesity Cluster to this
	// Vault (External Target).
	DataTransferPerProtectionJob []*DataTransferToVaultPerProtectionJob `json:"dataTransferPerProtectionJob"`

	// Array of Logical Data Transferred Per Day.
	//
	// Specifies the logical data transferred from this Cohesity Cluster
	// to this Vault during the time period specified using the
	// startTimeMsecs and endTimeMsecs parameters.
	// For each day in the time period, an array element is returned,
	// for example if 7 days are specified, 7 array elements are returned.
	// The logical size is when the data is fully hydrated or expanded.
	LogicalDataTransferredBytesDuringTimeRange []int64 `json:"logicalDataTransferredBytesDuringTimeRange"`

	// Specifies the total number of logical bytes that are transferred
	// from this Cohesity Cluster to this Vault.
	// The logical size is when the data is fully hydrated or expanded.
	NumLogicalBytesTransferred *int64 `json:"numLogicalBytesTransferred,omitempty"`

	// Specifies the total number of physical bytes that are transferred
	// from this Cohesity Cluster to this Vault.
	NumPhysicalBytesTransferred *int64 `json:"numPhysicalBytesTransferred,omitempty"`

	// Specifies the number of Protection Jobs that transfer data to
	// this Vault.
	NumProtectionJobs *int64 `json:"numProtectionJobs,omitempty"`

	// Array of Physical Data Transferred Per Day.
	//
	// Specifies the physical data transferred from this Cohesity Cluster
	// to this Vault during the time period specified using the
	// startTimeMsecs and endTimeMsecs parameters.
	// For each day in the time period, an array element is returned,
	// for example if 7 days are specified, 7 array elements are returned.
	PhysicalDataTransferredBytesDuringTimeRange []int64 `json:"physicalDataTransferredBytesDuringTimeRange"`

	// Specifies the storage consumed on the Vault as of last day in the
	// specified time range.
	StorageConsumedBytes *int64 `json:"storageConsumedBytes,omitempty"`

	// The vault Id associated with the vault.
	VaultID *int64 `json:"vaultId,omitempty"`

	// Specifies the name of the Vault (External Target).
	VaultName *string `json:"vaultName,omitempty"`

	// Specifies the type of Vault.
	// 'kNearline' indicates a Google Nearline Vault.
	// 'kGlacier' indicates an AWS Glacier Vault.
	// 'kS3' indicates an AWS S3 Vault.
	// 'kAzureStandard' indicates a Microsoft Azure Standard Vault.
	// 'kS3Compatible' indicates an S3 Compatible Vault.
	// (See the online help for supported types.)
	// 'kQStarTape' indicates a QStar Tape Vault.
	// 'kGoogleStandard' indicates a Google Standard Vault.
	// 'kGoogleDRA' indicates a Google DRA Vault.
	// 'kAmazonS3StandardIA' indicates an Amazon S3 Standard-IA Vault.
	// 'kAWSGovCloud' indicates an AWS Gov Cloud Vault.
	// 'kNAS' indicates a NAS Vault.
	// 'kColdline' indicates a Google Coldline Vault.
	// 'kAzureGovCloud' indicates a Microsoft Azure Gov Cloud Vault.
	// 'kAzureArchive' indicates an Azure Archive Vault.
	// 'kAzure' indicates an Azure Vault.
	// 'kGoogle' indicates a Google Vault.
	// 'kAmazon' indicates an Amazon Vault.
	// 'kOracle' indicates an Oracle Vault.
	// 'kOracleTierStandard' indicates an Oracle Tier Standard Vault.
	// 'kOracleTierArchive' indicates an Oracle Tier Archive Vault.
	// 'kAmazonC2S' indicates an Amazon Commercial Cloud Services Vault.
	// Enum: ["kNearline","kGlacier","kS3","kAzureStandard","kS3Compatible","kQStarTape","kGoogleStandard","kGoogleDRA","kAmazonS3StandardIA","kAWSGovCloud","kNAS","kColdline","kAzureGovCloud","kAzureArchive","kAzure","kGoogle","kAmazon","kOracle","kOracleTierStandard","kOracleTierArchive","kAmazonC2S"]
	VaultType *string `json:"vaultType,omitempty"`
}

// Validate validates this data transfer to vault summary
func (m *DataTransferToVaultSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataTransferPerProtectionJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTransferToVaultSummary) validateDataTransferPerProtectionJob(formats strfmt.Registry) error {
	if swag.IsZero(m.DataTransferPerProtectionJob) { // not required
		return nil
	}

	for i := 0; i < len(m.DataTransferPerProtectionJob); i++ {
		if swag.IsZero(m.DataTransferPerProtectionJob[i]) { // not required
			continue
		}

		if m.DataTransferPerProtectionJob[i] != nil {
			if err := m.DataTransferPerProtectionJob[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataTransferPerProtectionJob" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataTransferPerProtectionJob" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var dataTransferToVaultSummaryTypeVaultTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNearline","kGlacier","kS3","kAzureStandard","kS3Compatible","kQStarTape","kGoogleStandard","kGoogleDRA","kAmazonS3StandardIA","kAWSGovCloud","kNAS","kColdline","kAzureGovCloud","kAzureArchive","kAzure","kGoogle","kAmazon","kOracle","kOracleTierStandard","kOracleTierArchive","kAmazonC2S"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataTransferToVaultSummaryTypeVaultTypePropEnum = append(dataTransferToVaultSummaryTypeVaultTypePropEnum, v)
	}
}

const (

	// DataTransferToVaultSummaryVaultTypeKNearline captures enum value "kNearline"
	DataTransferToVaultSummaryVaultTypeKNearline string = "kNearline"

	// DataTransferToVaultSummaryVaultTypeKGlacier captures enum value "kGlacier"
	DataTransferToVaultSummaryVaultTypeKGlacier string = "kGlacier"

	// DataTransferToVaultSummaryVaultTypeKS3 captures enum value "kS3"
	DataTransferToVaultSummaryVaultTypeKS3 string = "kS3"

	// DataTransferToVaultSummaryVaultTypeKAzureStandard captures enum value "kAzureStandard"
	DataTransferToVaultSummaryVaultTypeKAzureStandard string = "kAzureStandard"

	// DataTransferToVaultSummaryVaultTypeKS3Compatible captures enum value "kS3Compatible"
	DataTransferToVaultSummaryVaultTypeKS3Compatible string = "kS3Compatible"

	// DataTransferToVaultSummaryVaultTypeKQStarTape captures enum value "kQStarTape"
	DataTransferToVaultSummaryVaultTypeKQStarTape string = "kQStarTape"

	// DataTransferToVaultSummaryVaultTypeKGoogleStandard captures enum value "kGoogleStandard"
	DataTransferToVaultSummaryVaultTypeKGoogleStandard string = "kGoogleStandard"

	// DataTransferToVaultSummaryVaultTypeKGoogleDRA captures enum value "kGoogleDRA"
	DataTransferToVaultSummaryVaultTypeKGoogleDRA string = "kGoogleDRA"

	// DataTransferToVaultSummaryVaultTypeKAmazonS3StandardIA captures enum value "kAmazonS3StandardIA"
	DataTransferToVaultSummaryVaultTypeKAmazonS3StandardIA string = "kAmazonS3StandardIA"

	// DataTransferToVaultSummaryVaultTypeKAWSGovCloud captures enum value "kAWSGovCloud"
	DataTransferToVaultSummaryVaultTypeKAWSGovCloud string = "kAWSGovCloud"

	// DataTransferToVaultSummaryVaultTypeKNAS captures enum value "kNAS"
	DataTransferToVaultSummaryVaultTypeKNAS string = "kNAS"

	// DataTransferToVaultSummaryVaultTypeKColdline captures enum value "kColdline"
	DataTransferToVaultSummaryVaultTypeKColdline string = "kColdline"

	// DataTransferToVaultSummaryVaultTypeKAzureGovCloud captures enum value "kAzureGovCloud"
	DataTransferToVaultSummaryVaultTypeKAzureGovCloud string = "kAzureGovCloud"

	// DataTransferToVaultSummaryVaultTypeKAzureArchive captures enum value "kAzureArchive"
	DataTransferToVaultSummaryVaultTypeKAzureArchive string = "kAzureArchive"

	// DataTransferToVaultSummaryVaultTypeKAzure captures enum value "kAzure"
	DataTransferToVaultSummaryVaultTypeKAzure string = "kAzure"

	// DataTransferToVaultSummaryVaultTypeKGoogle captures enum value "kGoogle"
	DataTransferToVaultSummaryVaultTypeKGoogle string = "kGoogle"

	// DataTransferToVaultSummaryVaultTypeKAmazon captures enum value "kAmazon"
	DataTransferToVaultSummaryVaultTypeKAmazon string = "kAmazon"

	// DataTransferToVaultSummaryVaultTypeKOracle captures enum value "kOracle"
	DataTransferToVaultSummaryVaultTypeKOracle string = "kOracle"

	// DataTransferToVaultSummaryVaultTypeKOracleTierStandard captures enum value "kOracleTierStandard"
	DataTransferToVaultSummaryVaultTypeKOracleTierStandard string = "kOracleTierStandard"

	// DataTransferToVaultSummaryVaultTypeKOracleTierArchive captures enum value "kOracleTierArchive"
	DataTransferToVaultSummaryVaultTypeKOracleTierArchive string = "kOracleTierArchive"

	// DataTransferToVaultSummaryVaultTypeKAmazonC2S captures enum value "kAmazonC2S"
	DataTransferToVaultSummaryVaultTypeKAmazonC2S string = "kAmazonC2S"
)

// prop value enum
func (m *DataTransferToVaultSummary) validateVaultTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataTransferToVaultSummaryTypeVaultTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataTransferToVaultSummary) validateVaultType(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVaultTypeEnum("vaultType", "body", *m.VaultType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data transfer to vault summary based on the context it is used
func (m *DataTransferToVaultSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataTransferPerProtectionJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTransferToVaultSummary) contextValidateDataTransferPerProtectionJob(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataTransferPerProtectionJob); i++ {

		if m.DataTransferPerProtectionJob[i] != nil {

			if swag.IsZero(m.DataTransferPerProtectionJob[i]) { // not required
				return nil
			}

			if err := m.DataTransferPerProtectionJob[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataTransferPerProtectionJob" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataTransferPerProtectionJob" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTransferToVaultSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTransferToVaultSummary) UnmarshalBinary(b []byte) error {
	var res DataTransferToVaultSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
