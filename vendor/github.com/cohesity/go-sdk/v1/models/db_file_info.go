// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DbFileInfo Database File Information.
//
// Specifies information about a database file.
//
// swagger:model DbFileInfo
type DbFileInfo struct {

	// Specifies the format type of the file that SQL database stores the data.
	// Specifies the format type of the file that SQL database stores the data.
	// 'kRows' refers to a data file
	// 'kLog' refers to a log file
	// 'kFileStream' refers to a directory containing FILESTREAM data
	// 'kNotSupportedType' is for information purposes only. Not supported.
	// 'kFullText' refers to a full-text catalog.
	// Enum: ["kRows","kLog","kFileStream","kNotSupportedType","kFullText"]
	FileType *string `json:"fileType,omitempty"`

	// Specifies the full path of the database file on the SQL host machine.
	FullPath *string `json:"fullPath,omitempty"`

	// Specifies the last known size of the database file.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`
}

// Validate validates this db file info
func (m *DbFileInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dbFileInfoTypeFileTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRows","kLog","kFileStream","kNotSupportedType","kFullText"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dbFileInfoTypeFileTypePropEnum = append(dbFileInfoTypeFileTypePropEnum, v)
	}
}

const (

	// DbFileInfoFileTypeKRows captures enum value "kRows"
	DbFileInfoFileTypeKRows string = "kRows"

	// DbFileInfoFileTypeKLog captures enum value "kLog"
	DbFileInfoFileTypeKLog string = "kLog"

	// DbFileInfoFileTypeKFileStream captures enum value "kFileStream"
	DbFileInfoFileTypeKFileStream string = "kFileStream"

	// DbFileInfoFileTypeKNotSupportedType captures enum value "kNotSupportedType"
	DbFileInfoFileTypeKNotSupportedType string = "kNotSupportedType"

	// DbFileInfoFileTypeKFullText captures enum value "kFullText"
	DbFileInfoFileTypeKFullText string = "kFullText"
)

// prop value enum
func (m *DbFileInfo) validateFileTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dbFileInfoTypeFileTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DbFileInfo) validateFileType(formats strfmt.Registry) error {
	if swag.IsZero(m.FileType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileTypeEnum("fileType", "body", *m.FileType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this db file info based on context it is used
func (m *DbFileInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DbFileInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DbFileInfo) UnmarshalBinary(b []byte) error {
	var res DbFileInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
