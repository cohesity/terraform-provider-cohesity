// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SmbConnection smb connection
//
// swagger:model SmbConnection
type SmbConnection struct {

	// Specifies the Client IP address of the connection.
	ClientIP *string `json:"clientIp,omitempty"`

	// Domain name of the corresponding user.
	DomainName *string `json:"domainName,omitempty"`

	// Specifies a Node IP address where the connection request is received.
	NodeIP *string `json:"nodeIp,omitempty"`

	// Mount path.
	Path *string `json:"path,omitempty"`

	// Specifies the Server IP address of the connection.
	// This could be a VIP, VLAN IP, or node IP on the Cluster.
	ServerIP *string `json:"serverIp,omitempty"`

	// Session id.
	SessionID *int64 `json:"sessionId,omitempty"`

	// List of SIDs in the SMB session token.
	Sids []string `json:"sids"`

	// User name used to login for this session.
	UserName *string `json:"userName,omitempty"`

	// Specifies the id of the view.
	ViewID *int64 `json:"viewId,omitempty"`

	// Specifies the name of the view.
	ViewName *string `json:"viewName,omitempty"`
}

// Validate validates this smb connection
func (m *SmbConnection) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this smb connection based on context it is used
func (m *SmbConnection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SmbConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbConnection) UnmarshalBinary(b []byte) error {
	var res SmbConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
