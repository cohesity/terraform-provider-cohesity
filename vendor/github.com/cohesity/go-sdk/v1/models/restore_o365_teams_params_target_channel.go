// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreO365TeamsParamsTargetChannel Target channel for teams granular restore to alternate loc. At least one
// of id or name must be specified. name must be specified if
// create_new_channel is true.
//
// swagger:model RestoreO365TeamsParams_TargetChannel
type RestoreO365TeamsParamsTargetChannel struct {

	// Owners for the private channel. This is needed only if we are creating
	// private channel.
	ChannelOwnerVec []*EntityProto `json:"channelOwnerVec"`

	// channel type
	ChannelType *int32 `json:"channelType,omitempty"`

	// Whether to create a new channel. Name must be provided for this case.
	CreateNewChannel *bool `json:"createNewChannel,omitempty"`

	// Id of the target channel.
	ID *string `json:"id,omitempty"`

	// Name of the target channel.
	Name *string `json:"name,omitempty"`
}

// Validate validates this restore o365 teams params target channel
func (m *RestoreO365TeamsParamsTargetChannel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelOwnerVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreO365TeamsParamsTargetChannel) validateChannelOwnerVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelOwnerVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ChannelOwnerVec); i++ {
		if swag.IsZero(m.ChannelOwnerVec[i]) { // not required
			continue
		}

		if m.ChannelOwnerVec[i] != nil {
			if err := m.ChannelOwnerVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channelOwnerVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("channelOwnerVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this restore o365 teams params target channel based on the context it is used
func (m *RestoreO365TeamsParamsTargetChannel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChannelOwnerVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreO365TeamsParamsTargetChannel) contextValidateChannelOwnerVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChannelOwnerVec); i++ {

		if m.ChannelOwnerVec[i] != nil {

			if swag.IsZero(m.ChannelOwnerVec[i]) { // not required
				return nil
			}

			if err := m.ChannelOwnerVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channelOwnerVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("channelOwnerVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreO365TeamsParamsTargetChannel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreO365TeamsParamsTargetChannel) UnmarshalBinary(b []byte) error {
	var res RestoreO365TeamsParamsTargetChannel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
