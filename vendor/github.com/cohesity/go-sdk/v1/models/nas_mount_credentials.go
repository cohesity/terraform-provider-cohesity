// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NasMountCredentials Message that encapsulates the credentials for mounting a specific NAS type.
//
// swagger:model NasMountCredentials
type NasMountCredentials struct {

	// The name of the domain which the NAS mount credentials belong to.
	DomainName *string `json:"domainName,omitempty"`

	// AES256 encrypted password. The key for encryption should be obtained from
	// KMS.
	EncryptedPassword []uint8 `json:"encryptedPassword"`

	// KDC hostname or IP for krb5 authentication. KDC stores secret keys for
	// a smb user and provides the krb5 tickets for authentication.
	Kdc *string `json:"kdc,omitempty"`

	// The password field is only populated in RPCs. On disk, instances of this
	// proto should not have this field set, except for legacy records.
	//
	// TODO(oleg): Change this field type to bytes.j
	Password *string `json:"password,omitempty"`

	// The protocol of the NAS mount.
	Protocol *int32 `json:"protocol,omitempty"`

	// The username and password to use for mounting the NAS.
	Username *string `json:"username,omitempty"`
}

// Validate validates this nas mount credentials
func (m *NasMountCredentials) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this nas mount credentials based on context it is used
func (m *NasMountCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NasMountCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NasMountCredentials) UnmarshalBinary(b []byte) error {
	var res NasMountCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
