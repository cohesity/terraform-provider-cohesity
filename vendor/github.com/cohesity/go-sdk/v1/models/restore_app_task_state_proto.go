// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreAppTaskStateProto restore app task state proto
//
// swagger:model RestoreAppTaskStateProto
type RestoreAppTaskStateProto struct {

	// The Pulse task path to the application restore task sub tree. If the
	// application restore has to wait on other tasks (for example, a SQL db
	// restore may wait for a tail log backup or a VM restore), then this
	// would represent a sub-tree of 'progress_monitor_task_path' in
	// PerformRestoreTaskStateProto.
	AppRestoreProgressMonitorSubtaskPath *string `json:"appRestoreProgressMonitorSubtaskPath,omitempty"`

	// This has list of the restore app params for all the child restore tasks.
	// This is populated iff the 'is_parent_task' is set to true.
	ChildRestoreAppParamsVec []*RestoreAppParams `json:"childRestoreAppParamsVec"`

	// The start time of the last finished log backup run. For SQL application,
	// this is set iff we need to take a tail log backup.
	LastFinishedLogBackupStartTimeUsecs *int64 `json:"lastFinishedLogBackupStartTimeUsecs,omitempty"`

	// Information about the application restore task.
	RestoreAppParams *RestoreAppParams `json:"restoreAppParams,omitempty"`
}

// Validate validates this restore app task state proto
func (m *RestoreAppTaskStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildRestoreAppParamsVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreAppParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAppTaskStateProto) validateChildRestoreAppParamsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildRestoreAppParamsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildRestoreAppParamsVec); i++ {
		if swag.IsZero(m.ChildRestoreAppParamsVec[i]) { // not required
			continue
		}

		if m.ChildRestoreAppParamsVec[i] != nil {
			if err := m.ChildRestoreAppParamsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childRestoreAppParamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childRestoreAppParamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreAppTaskStateProto) validateRestoreAppParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreAppParams) { // not required
		return nil
	}

	if m.RestoreAppParams != nil {
		if err := m.RestoreAppParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAppParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore app task state proto based on the context it is used
func (m *RestoreAppTaskStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildRestoreAppParamsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreAppParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAppTaskStateProto) contextValidateChildRestoreAppParamsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChildRestoreAppParamsVec); i++ {

		if m.ChildRestoreAppParamsVec[i] != nil {

			if swag.IsZero(m.ChildRestoreAppParamsVec[i]) { // not required
				return nil
			}

			if err := m.ChildRestoreAppParamsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childRestoreAppParamsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childRestoreAppParamsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreAppTaskStateProto) contextValidateRestoreAppParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreAppParams != nil {

		if swag.IsZero(m.RestoreAppParams) { // not required
			return nil
		}

		if err := m.RestoreAppParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAppParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreAppTaskStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreAppTaskStateProto) UnmarshalBinary(b []byte) error {
	var res RestoreAppTaskStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
