// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateRestoreTaskOptions Refer UpdateRestoreTaskOptions message in /magneto/base/magneto.proto
//
// UpdateRestoreTaskOptions holds the common information needed for updating
// a restore task.
//
// swagger:model UpdateRestoreTaskOptions
type UpdateRestoreTaskOptions struct {

	// Specifies generic options to update the restore task.
	MultiStageFinalizeParams *MultiStageRestoreFinalizeActionParams `json:"multiStageFinalizeParams,omitempty"`

	// Specifies the multi-stage options to update the Restore Task with.
	// Specifies the action type of multi stage restore.
	//
	// 'kCreate' specifies the create action for a restore.
	// 'kUpdate' specifies the user action to update an ongoing restore.
	// 'kFinalize' specifies the user action to finalize a restore.
	// Enum: ["kCreate","kUpdate","kFinalize"]
	MultiStageRestoreAction *string `json:"multiStageRestoreAction,omitempty"`
}

// Validate validates this update restore task options
func (m *UpdateRestoreTaskOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMultiStageFinalizeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultiStageRestoreAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRestoreTaskOptions) validateMultiStageFinalizeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MultiStageFinalizeParams) { // not required
		return nil
	}

	if m.MultiStageFinalizeParams != nil {
		if err := m.MultiStageFinalizeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiStageFinalizeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multiStageFinalizeParams")
			}
			return err
		}
	}

	return nil
}

var updateRestoreTaskOptionsTypeMultiStageRestoreActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCreate","kUpdate","kFinalize"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateRestoreTaskOptionsTypeMultiStageRestoreActionPropEnum = append(updateRestoreTaskOptionsTypeMultiStageRestoreActionPropEnum, v)
	}
}

const (

	// UpdateRestoreTaskOptionsMultiStageRestoreActionKCreate captures enum value "kCreate"
	UpdateRestoreTaskOptionsMultiStageRestoreActionKCreate string = "kCreate"

	// UpdateRestoreTaskOptionsMultiStageRestoreActionKUpdate captures enum value "kUpdate"
	UpdateRestoreTaskOptionsMultiStageRestoreActionKUpdate string = "kUpdate"

	// UpdateRestoreTaskOptionsMultiStageRestoreActionKFinalize captures enum value "kFinalize"
	UpdateRestoreTaskOptionsMultiStageRestoreActionKFinalize string = "kFinalize"
)

// prop value enum
func (m *UpdateRestoreTaskOptions) validateMultiStageRestoreActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateRestoreTaskOptionsTypeMultiStageRestoreActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateRestoreTaskOptions) validateMultiStageRestoreAction(formats strfmt.Registry) error {
	if swag.IsZero(m.MultiStageRestoreAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateMultiStageRestoreActionEnum("multiStageRestoreAction", "body", *m.MultiStageRestoreAction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update restore task options based on the context it is used
func (m *UpdateRestoreTaskOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMultiStageFinalizeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRestoreTaskOptions) contextValidateMultiStageFinalizeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MultiStageFinalizeParams != nil {

		if swag.IsZero(m.MultiStageFinalizeParams) { // not required
			return nil
		}

		if err := m.MultiStageFinalizeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiStageFinalizeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multiStageFinalizeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRestoreTaskOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRestoreTaskOptions) UnmarshalBinary(b []byte) error {
	var res UpdateRestoreTaskOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
