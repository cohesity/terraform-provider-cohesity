// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserID User ID.
//
// Specifies the mapping between an Unix and an SMB SID.
//
// swagger:model UserId
type UserID struct {

	// If interested in a user via smb_client, include SID.
	// Otherwise, If a valid unix-id to SID mappings are available (i.e., when
	// mixed mode is enabled) the server will perform the necessary id mapping
	// and return the correct usage irrespective of whether the unix id / SID is
	// provided.
	// The string is of following format -
	// S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn.
	Sid *string `json:"sid,omitempty"`

	// If interested in a user via unix-identifier, include UnixUid.
	// Otherwise, If a valid unix-id to SID mappings are available (i.e., when
	// mixed mode is enabled) the server will perform the necessary id mapping
	// and return the correct usage irrespective of whether the unix id / SID is
	// provided.
	UnixUID *uint32 `json:"unixUid,omitempty"`
}

// Validate validates this user Id
func (m *UserID) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user Id based on context it is used
func (m *UserID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserID) UnmarshalBinary(b []byte) error {
	var res UserID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
