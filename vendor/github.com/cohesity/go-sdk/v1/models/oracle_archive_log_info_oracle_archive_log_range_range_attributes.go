// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleArchiveLogInfoOracleArchiveLogRangeRangeAttributes Attributes related to each range. This is only used when we sending
// valid ranges to iris to fill the slider. While triggering restore
// this field can be skipped.
//
// swagger:model OracleArchiveLogInfo_OracleArchiveLogRange_RangeAttributes
type OracleArchiveLogInfoOracleArchiveLogRangeRangeAttributes struct {

	// Incarnation id associated with the range
	// Only applicable for SCN and sequence type.
	IncarnationID *int64 `json:"incarnationId,omitempty"`

	// jobs ID from which the snapshots were taken.
	JobUID *UniversalIDProto `json:"jobUid,omitempty"`

	// Resetlogs identifier associated with the range.
	// Only applicable for SCN and sequence type.
	ResetLogsID *int64 `json:"resetLogsId,omitempty"`

	// Thread id associated with the range.
	// Only applicable for sequence type.
	ThreadID *int64 `json:"threadId,omitempty"`
}

// Validate validates this oracle archive log info oracle archive log range range attributes
func (m *OracleArchiveLogInfoOracleArchiveLogRangeRangeAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleArchiveLogInfoOracleArchiveLogRangeRangeAttributes) validateJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.JobUID) { // not required
		return nil
	}

	if m.JobUID != nil {
		if err := m.JobUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobUid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle archive log info oracle archive log range range attributes based on the context it is used
func (m *OracleArchiveLogInfoOracleArchiveLogRangeRangeAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleArchiveLogInfoOracleArchiveLogRangeRangeAttributes) contextValidateJobUID(ctx context.Context, formats strfmt.Registry) error {

	if m.JobUID != nil {

		if swag.IsZero(m.JobUID) { // not required
			return nil
		}

		if err := m.JobUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobUid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleArchiveLogInfoOracleArchiveLogRangeRangeAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleArchiveLogInfoOracleArchiveLogRangeRangeAttributes) UnmarshalBinary(b []byte) error {
	var res OracleArchiveLogInfoOracleArchiveLogRangeRangeAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
