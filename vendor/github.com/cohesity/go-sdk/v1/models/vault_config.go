// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VaultConfig Vault Configuration.
//
// Specifies the settings required to connect to a specific Vault type.
// For some Vaults, you must also specify a storage location (bucketName).
//
// swagger:model VaultConfig
type VaultConfig struct {

	// Amazon Cloud Credentials.
	//
	// Specifies the cloud credentials to connect to a Amazon
	// service account. Glacier, S3, and S3-compatible clouds use this
	// credential.
	Amazon *AmazonCloudCredentials `json:"amazon,omitempty"`

	// Azure Cloud Credentials.
	//
	// Specifies the cloud credentials to connect to a Microsoft
	// Azure service account.
	Azure *AzureCloudCredentials `json:"azure,omitempty"`

	// Specifies the name of a storage location of the Vault,
	// where objects are stored. For Google and AMS, this
	// storage location is called a bucket. For Microsoft Azure, this
	// storage location is called a container. For QStar and NAS, you
	// do not specify a storage location.
	BucketName *string `json:"bucketName,omitempty"`

	// Google Cloud Credentials.
	//
	// Specifies the cloud credentials to connect to a Google
	// service account.
	Google *GoogleCloudCredentials `json:"google,omitempty"`

	// NAS Server Credentials.
	//
	// Specifies the server credentials to connect to a NetApp server.
	Nas *NasCredentials `json:"nas,omitempty"`

	// Oracle Cloud Credentials.
	//
	// Specifies the Oracle cloud credentials to connect to a Amazon
	// service account.
	Oracle *OracleCloudCredentials `json:"oracle,omitempty"`

	// QStar Media Credentials.
	//
	// Specifies the server credentials to connect to a QStar service
	// to manage the media Vault.
	Qstar *QStarServerCredentials `json:"qstar,omitempty"`
}

// Validate validates this vault config
func (m *VaultConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGoogle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQstar(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultConfig) validateAmazon(formats strfmt.Registry) error {
	if swag.IsZero(m.Amazon) { // not required
		return nil
	}

	if m.Amazon != nil {
		if err := m.Amazon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazon")
			}
			return err
		}
	}

	return nil
}

func (m *VaultConfig) validateAzure(formats strfmt.Registry) error {
	if swag.IsZero(m.Azure) { // not required
		return nil
	}

	if m.Azure != nil {
		if err := m.Azure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

func (m *VaultConfig) validateGoogle(formats strfmt.Registry) error {
	if swag.IsZero(m.Google) { // not required
		return nil
	}

	if m.Google != nil {
		if err := m.Google.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("google")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("google")
			}
			return err
		}
	}

	return nil
}

func (m *VaultConfig) validateNas(formats strfmt.Registry) error {
	if swag.IsZero(m.Nas) { // not required
		return nil
	}

	if m.Nas != nil {
		if err := m.Nas.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nas")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nas")
			}
			return err
		}
	}

	return nil
}

func (m *VaultConfig) validateOracle(formats strfmt.Registry) error {
	if swag.IsZero(m.Oracle) { // not required
		return nil
	}

	if m.Oracle != nil {
		if err := m.Oracle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracle")
			}
			return err
		}
	}

	return nil
}

func (m *VaultConfig) validateQstar(formats strfmt.Registry) error {
	if swag.IsZero(m.Qstar) { // not required
		return nil
	}

	if m.Qstar != nil {
		if err := m.Qstar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qstar")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qstar")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vault config based on the context it is used
func (m *VaultConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmazon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGoogle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQstar(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultConfig) contextValidateAmazon(ctx context.Context, formats strfmt.Registry) error {

	if m.Amazon != nil {

		if swag.IsZero(m.Amazon) { // not required
			return nil
		}

		if err := m.Amazon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazon")
			}
			return err
		}
	}

	return nil
}

func (m *VaultConfig) contextValidateAzure(ctx context.Context, formats strfmt.Registry) error {

	if m.Azure != nil {

		if swag.IsZero(m.Azure) { // not required
			return nil
		}

		if err := m.Azure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

func (m *VaultConfig) contextValidateGoogle(ctx context.Context, formats strfmt.Registry) error {

	if m.Google != nil {

		if swag.IsZero(m.Google) { // not required
			return nil
		}

		if err := m.Google.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("google")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("google")
			}
			return err
		}
	}

	return nil
}

func (m *VaultConfig) contextValidateNas(ctx context.Context, formats strfmt.Registry) error {

	if m.Nas != nil {

		if swag.IsZero(m.Nas) { // not required
			return nil
		}

		if err := m.Nas.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nas")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nas")
			}
			return err
		}
	}

	return nil
}

func (m *VaultConfig) contextValidateOracle(ctx context.Context, formats strfmt.Registry) error {

	if m.Oracle != nil {

		if swag.IsZero(m.Oracle) { // not required
			return nil
		}

		if err := m.Oracle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracle")
			}
			return err
		}
	}

	return nil
}

func (m *VaultConfig) contextValidateQstar(ctx context.Context, formats strfmt.Registry) error {

	if m.Qstar != nil {

		if swag.IsZero(m.Qstar) { // not required
			return nil
		}

		if err := m.Qstar.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qstar")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qstar")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VaultConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VaultConfig) UnmarshalBinary(b []byte) error {
	var res VaultConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
