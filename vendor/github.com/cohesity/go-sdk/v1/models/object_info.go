// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectInfo Proto that contains specific information about an Object.
//
// swagger:model ObjectInfo
type ObjectInfo struct {

	// Information about Sfdc fields associated with an object.
	FieldInfo []*FieldInfo `json:"fieldInfo"`

	// Key prefix of the id field of the records of the object.
	// All the record id's of this object would start with this key prefix and
	// hence can be used to identify to which object a record belongs to.
	KeyPrefix *string `json:"keyPrefix,omitempty"`

	// Object type ie db, table etc.
	ObjectType *int32 `json:"objectType,omitempty"`

	// Number of records in this object.
	RecordCount *uint64 `json:"recordCount,omitempty"`
}

// Validate validates this object info
func (m *ObjectInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectInfo) validateFieldInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FieldInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.FieldInfo); i++ {
		if swag.IsZero(m.FieldInfo[i]) { // not required
			continue
		}

		if m.FieldInfo[i] != nil {
			if err := m.FieldInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fieldInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fieldInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this object info based on the context it is used
func (m *ObjectInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFieldInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectInfo) contextValidateFieldInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FieldInfo); i++ {

		if m.FieldInfo[i] != nil {

			if swag.IsZero(m.FieldInfo[i]) { // not required
				return nil
			}

			if err := m.FieldInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fieldInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fieldInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectInfo) UnmarshalBinary(b []byte) error {
	var res ObjectInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
