// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterConfigProtoVaultCloudTierType Proto representing a cloud tier type.
//
// swagger:model ClusterConfigProto_Vault_CloudTierType
type ClusterConfigProtoVaultCloudTierType struct {

	// Field represeting cloud properties, which contains different
	// properties (tiers/classes) supported by different cloud providers. In
	// case of Oracle cloud, the 'tenant' property of OracleProperties
	// message would not be populated for this use case.
	CloudProperties *ClusterConfigProtoVaultCloudProperties `json:"cloudProperties,omitempty"`

	// Field representing the cloud type.
	// Currently tiers are supported for kAzure, kGoogle, kAmazon, kOracle.
	CloudType *int32 `json:"cloudType,omitempty"`
}

// Validate validates this cluster config proto vault cloud tier type
func (m *ClusterConfigProtoVaultCloudTierType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigProtoVaultCloudTierType) validateCloudProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudProperties) { // not required
		return nil
	}

	if m.CloudProperties != nil {
		if err := m.CloudProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudProperties")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster config proto vault cloud tier type based on the context it is used
func (m *ClusterConfigProtoVaultCloudTierType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigProtoVaultCloudTierType) contextValidateCloudProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudProperties != nil {

		if swag.IsZero(m.CloudProperties) { // not required
			return nil
		}

		if err := m.CloudProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudProperties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterConfigProtoVaultCloudTierType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterConfigProtoVaultCloudTierType) UnmarshalBinary(b []byte) error {
	var res ClusterConfigProtoVaultCloudTierType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
