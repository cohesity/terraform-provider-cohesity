// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceTreePartitionSlice This defines the leaf of the device tree mentioned above.
//
// swagger:model DeviceTree_PartitionSlice
type DeviceTreePartitionSlice struct {

	// The disk to use.
	DiskFileName *string `json:"diskFileName,omitempty"`

	// The length of data for the LVM volume (for which this device tree is
	// being built) in bytes. It does not include size of the LVM meta data.
	Length *int64 `json:"length,omitempty"`

	// Each LVM partition starts with LVM meta data. After the meta data there
	// can be data for one or more LVM volumes.
	//
	// This field indicates the offset in bytes (relative to partition) where
	// data for various LVM volumes starts on the partition.
	// NOTE: If this device tree represents first LVM volume on the  partition,
	// 'lvm_data_offset' is equal to 'offset'.
	LvmDataOffset *int64 `json:"lvmDataOffset,omitempty"`

	// This is the offset (in bytes) where data for the LVM volume (for which
	// this device tree is being build) starts relative to the start of the
	// partition above.
	Offset *int64 `json:"offset,omitempty"`

	// The partition to use in the disk above.
	PartitionNumber *int32 `json:"partitionNumber,omitempty"`
}

// Validate validates this device tree partition slice
func (m *DeviceTreePartitionSlice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this device tree partition slice based on context it is used
func (m *DeviceTreePartitionSlice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceTreePartitionSlice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceTreePartitionSlice) UnmarshalBinary(b []byte) error {
	var res DeviceTreePartitionSlice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
