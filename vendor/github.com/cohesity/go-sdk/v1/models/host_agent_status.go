// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HostAgentStatus Contains information about one Agent that is associated with a Host such
// as a Physical entity or a VM entity.
//
// swagger:model HostAgentStatus
type HostAgentStatus struct {

	// The hostname/ipaddr that comes from the ClusterNetworkingInfo::Endpoint
	// object. Note, this is plumbed on the fly and is not persisted.
	DisplayName *string `json:"displayName,omitempty"`

	// ID of the respective kAgent object.
	ID *int64 `json:"id,omitempty"`

	// Whether Agent supports multi node multi channel feature for Oracle.
	OracleMultiNodeMultiChannelSupported *bool `json:"oracleMultiNodeMultiChannelSupported,omitempty"`

	// The common "Agent properties" block. Note, this is plumbed on the fly and
	// is not persisted.
	Properties *Properties `json:"properties,omitempty"`

	// The Agent's refresh error (if any) from its RegisteredEntityInfo
	// block.
	RefreshError *PrivateErrorProto `json:"refreshError,omitempty"`

	// The Agent's "source_side_dedup_enabled" (if specified) from its
	// RegisteredEntityInfo block.
	SourceSideDedupEnabled *bool `json:"sourceSideDedupEnabled,omitempty"`

	// The Agent's verification error (if any) from its RegisteredEntityInfo
	// block.
	VerificationError *PrivateErrorProto `json:"verificationError,omitempty"`

	// The Agent's verification status from its RegisteredEntityInfo block.
	VerificationStatus *int32 `json:"verificationStatus,omitempty"`
}

// Validate validates this host agent status
func (m *HostAgentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostAgentStatus) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *HostAgentStatus) validateRefreshError(formats strfmt.Registry) error {
	if swag.IsZero(m.RefreshError) { // not required
		return nil
	}

	if m.RefreshError != nil {
		if err := m.RefreshError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshError")
			}
			return err
		}
	}

	return nil
}

func (m *HostAgentStatus) validateVerificationError(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationError) { // not required
		return nil
	}

	if m.VerificationError != nil {
		if err := m.VerificationError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verificationError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verificationError")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this host agent status based on the context it is used
func (m *HostAgentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefreshError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostAgentStatus) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.Properties != nil {

		if swag.IsZero(m.Properties) { // not required
			return nil
		}

		if err := m.Properties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *HostAgentStatus) contextValidateRefreshError(ctx context.Context, formats strfmt.Registry) error {

	if m.RefreshError != nil {

		if swag.IsZero(m.RefreshError) { // not required
			return nil
		}

		if err := m.RefreshError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshError")
			}
			return err
		}
	}

	return nil
}

func (m *HostAgentStatus) contextValidateVerificationError(ctx context.Context, formats strfmt.Registry) error {

	if m.VerificationError != nil {

		if swag.IsZero(m.VerificationError) { // not required
			return nil
		}

		if err := m.VerificationError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verificationError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verificationError")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostAgentStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostAgentStatus) UnmarshalBinary(b []byte) error {
	var res HostAgentStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
