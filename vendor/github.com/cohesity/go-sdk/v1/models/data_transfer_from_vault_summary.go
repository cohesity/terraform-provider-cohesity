// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataTransferFromVaultSummary Data Transfer From Vault Summary.
//
// Specifies summary statistics about the transfer of data from a Vault
// to this Cohesity Cluster.
//
// swagger:model DataTransferFromVaultSummary
type DataTransferFromVaultSummary struct {

	// Array of Data Transferred Per Task.
	//
	// Specifies the transfer of data from this Vault to this Cohesity Cluster
	// for each clone or recover task.
	DataTransferPerTask []*DataTransferFromVaultPerTask `json:"dataTransferPerTask"`

	// Specifies the total number of logical bytes that have been transferred
	// from this Vault (External Target) to this Cohesity Cluster.
	// The logical size is when the data is fully hydrated or expanded.
	NumLogicalBytesTransferred *int64 `json:"numLogicalBytesTransferred,omitempty"`

	// Specifies the total number of physical bytes that have been transferred
	// from this Vault (External Target) to the Cohesity Cluster.
	NumPhysicalBytesTransferred *int64 `json:"numPhysicalBytesTransferred,omitempty"`

	// Specifies the number of recover or clone tasks that have transferred data
	// from this Vault (External Target) to this Cohesity Cluster.
	NumTasks *int64 `json:"numTasks,omitempty"`

	// Array of Physical Data Transferred Per Day.
	//
	// Specifies the physical data transferred from this Vault
	// to the Cohesity Cluster during the time period specified using the
	// startTimeMsecs and endTimeMsecs parameters.
	// For each day in the time period, an array element is returned,
	// for example if 7 days are specified, 7 array elements are returned.
	PhysicalDataTransferredBytesDuringTimeRange []int64 `json:"physicalDataTransferredBytesDuringTimeRange"`

	// Specifies the name of the Vault (External Target).
	VaultName *string `json:"vaultName,omitempty"`
}

// Validate validates this data transfer from vault summary
func (m *DataTransferFromVaultSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataTransferPerTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTransferFromVaultSummary) validateDataTransferPerTask(formats strfmt.Registry) error {
	if swag.IsZero(m.DataTransferPerTask) { // not required
		return nil
	}

	for i := 0; i < len(m.DataTransferPerTask); i++ {
		if swag.IsZero(m.DataTransferPerTask[i]) { // not required
			continue
		}

		if m.DataTransferPerTask[i] != nil {
			if err := m.DataTransferPerTask[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataTransferPerTask" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataTransferPerTask" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this data transfer from vault summary based on the context it is used
func (m *DataTransferFromVaultSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataTransferPerTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTransferFromVaultSummary) contextValidateDataTransferPerTask(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataTransferPerTask); i++ {

		if m.DataTransferPerTask[i] != nil {

			if swag.IsZero(m.DataTransferPerTask[i]) { // not required
				return nil
			}

			if err := m.DataTransferPerTask[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataTransferPerTask" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataTransferPerTask" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTransferFromVaultSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTransferFromVaultSummary) UnmarshalBinary(b []byte) error {
	var res DataTransferFromVaultSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
