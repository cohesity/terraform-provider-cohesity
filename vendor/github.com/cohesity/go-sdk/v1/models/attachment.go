// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Attachment Message encapsulating the details of an attachment.
//
// swagger:model Attachment
type Attachment struct {

	// Content type of the attachment.
	ContentType *string `json:"contentType,omitempty"`

	// Id of the attachment.
	ID *string `json:"id,omitempty"`

	// Is the attachment inline?
	Inline *bool `json:"inline,omitempty"`

	// The date and time the attachment was last changed.
	LastModifiedDateTime *string `json:"lastModifiedDateTime,omitempty"`

	// Media content type of attachment.
	MediaContentType *string `json:"mediaContentType,omitempty"`

	// Name of the attachment.
	Name *string `json:"name,omitempty"`

	// Size of the attachment in bytes.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`

	// Type of attachment.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this attachment
func (m *Attachment) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this attachment based on context it is used
func (m *Attachment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Attachment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Attachment) UnmarshalBinary(b []byte) error {
	var res Attachment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
