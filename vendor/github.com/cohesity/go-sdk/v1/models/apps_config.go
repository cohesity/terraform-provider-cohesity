// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppsConfig Athena Apps Configuration.
//
// swagger:model AppsConfig
type AppsConfig struct {

	// Whether to allow pod external traffic.
	AllowExternalTraffic *bool `json:"allowExternalTraffic,omitempty"`

	// Whether to allow apps unrestricted view access.
	AllowUnrestictedViewAccess *bool `json:"allowUnrestictedViewAccess,omitempty"`

	// Specifies the various modes for running apps.
	// 'kDisabled' specifies that apps are disabled.
	// 'kBareMetal' specifies that apps could only run in containers
	// on the node (no VM).
	// 'kVmOnly' specifies that apps could only run in containers on a VM
	// hosted by the node.
	// Enum: ["kDisabled","kBareMetal","kVmOnly"]
	AppsMode *string `json:"appsMode,omitempty"`

	// The subnet for Athena apps.
	AppsSubnet *Subnet `json:"appsSubnet,omitempty"`

	// Specifies the various modes for running marketplace apps.
	// 'kDisabled' specifies that marketplace apps are disabled.
	// 'kBareMetal' specifies that marketplace apps could only run in containers
	// on the node (no VM).
	// 'kVmOnly' specifies that marketplace apps could only run in containers
	// on a VM hosted by the node.
	// Enum: ["kDisabled","kBareMetal","kVmOnly"]
	MarketplaceAppsMode *string `json:"marketplaceAppsMode,omitempty"`

	// The system memory to overcommit for apps.
	OvercommitMemoryPct *int32 `json:"overcommitMemoryPct,omitempty"`

	// The CPU millicores to reserve for apps.
	ReservedCPUMillicores *int32 `json:"reservedCpuMillicores,omitempty"`

	// The system memory to reserve for apps.
	ReservedMemoryPct *int32 `json:"reservedMemoryPct,omitempty"`
}

// Validate validates this apps config
func (m *AppsConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppsMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppsSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceAppsMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var appsConfigTypeAppsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDisabled","kBareMetal","kVmOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appsConfigTypeAppsModePropEnum = append(appsConfigTypeAppsModePropEnum, v)
	}
}

const (

	// AppsConfigAppsModeKDisabled captures enum value "kDisabled"
	AppsConfigAppsModeKDisabled string = "kDisabled"

	// AppsConfigAppsModeKBareMetal captures enum value "kBareMetal"
	AppsConfigAppsModeKBareMetal string = "kBareMetal"

	// AppsConfigAppsModeKVMOnly captures enum value "kVmOnly"
	AppsConfigAppsModeKVMOnly string = "kVmOnly"
)

// prop value enum
func (m *AppsConfig) validateAppsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, appsConfigTypeAppsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AppsConfig) validateAppsMode(formats strfmt.Registry) error {
	if swag.IsZero(m.AppsMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateAppsModeEnum("appsMode", "body", *m.AppsMode); err != nil {
		return err
	}

	return nil
}

func (m *AppsConfig) validateAppsSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.AppsSubnet) { // not required
		return nil
	}

	if m.AppsSubnet != nil {
		if err := m.AppsSubnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appsSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appsSubnet")
			}
			return err
		}
	}

	return nil
}

var appsConfigTypeMarketplaceAppsModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDisabled","kBareMetal","kVmOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appsConfigTypeMarketplaceAppsModePropEnum = append(appsConfigTypeMarketplaceAppsModePropEnum, v)
	}
}

const (

	// AppsConfigMarketplaceAppsModeKDisabled captures enum value "kDisabled"
	AppsConfigMarketplaceAppsModeKDisabled string = "kDisabled"

	// AppsConfigMarketplaceAppsModeKBareMetal captures enum value "kBareMetal"
	AppsConfigMarketplaceAppsModeKBareMetal string = "kBareMetal"

	// AppsConfigMarketplaceAppsModeKVMOnly captures enum value "kVmOnly"
	AppsConfigMarketplaceAppsModeKVMOnly string = "kVmOnly"
)

// prop value enum
func (m *AppsConfig) validateMarketplaceAppsModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, appsConfigTypeMarketplaceAppsModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AppsConfig) validateMarketplaceAppsMode(formats strfmt.Registry) error {
	if swag.IsZero(m.MarketplaceAppsMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateMarketplaceAppsModeEnum("marketplaceAppsMode", "body", *m.MarketplaceAppsMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this apps config based on the context it is used
func (m *AppsConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppsSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppsConfig) contextValidateAppsSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.AppsSubnet != nil {

		if swag.IsZero(m.AppsSubnet) { // not required
			return nil
		}

		if err := m.AppsSubnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appsSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appsSubnet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppsConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppsConfig) UnmarshalBinary(b []byte) error {
	var res AppsConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
