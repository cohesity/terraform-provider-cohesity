// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SnapshotTarget Message that specifies details about a target (such as a replication or
// archival target) where a backup snapshot may be copied to.
//
// swagger:model SnapshotTarget
type SnapshotTarget struct {

	// The archival target for the backup snapshot.
	ArchivalTarget *ArchivalTarget `json:"archivalTarget,omitempty"`

	// The cloud deploy target for the backup snapshot. This will be populated
	// for both kCloudDeploy and kCloudReplication tasks.
	CloudDeployTarget *CloudDeployTarget `json:"cloudDeployTarget,omitempty"`

	// The on-prem deploy target for the snapshots. This will be populated for
	// kOnPremDeploy.
	OnpremDeployTarget *OnPremDeployTarget `json:"onpremDeployTarget,omitempty"`

	// The remote replication target for the backup snapshot.
	ReplicationTarget *ReplicationTarget `json:"replicationTarget,omitempty"`

	// The type of snapshot target this proto represents.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this snapshot target
func (m *SnapshotTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchivalTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudDeployTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnpremDeployTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotTarget) validateArchivalTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalTarget) { // not required
		return nil
	}

	if m.ArchivalTarget != nil {
		if err := m.ArchivalTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTarget")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTarget) validateCloudDeployTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudDeployTarget) { // not required
		return nil
	}

	if m.CloudDeployTarget != nil {
		if err := m.CloudDeployTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDeployTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudDeployTarget")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTarget) validateOnpremDeployTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.OnpremDeployTarget) { // not required
		return nil
	}

	if m.OnpremDeployTarget != nil {
		if err := m.OnpremDeployTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onpremDeployTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onpremDeployTarget")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTarget) validateReplicationTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTarget) { // not required
		return nil
	}

	if m.ReplicationTarget != nil {
		if err := m.ReplicationTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationTarget")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapshot target based on the context it is used
func (m *SnapshotTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchivalTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudDeployTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnpremDeployTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotTarget) contextValidateArchivalTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchivalTarget != nil {

		if swag.IsZero(m.ArchivalTarget) { // not required
			return nil
		}

		if err := m.ArchivalTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTarget")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTarget) contextValidateCloudDeployTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudDeployTarget != nil {

		if swag.IsZero(m.CloudDeployTarget) { // not required
			return nil
		}

		if err := m.CloudDeployTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDeployTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudDeployTarget")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTarget) contextValidateOnpremDeployTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.OnpremDeployTarget != nil {

		if swag.IsZero(m.OnpremDeployTarget) { // not required
			return nil
		}

		if err := m.OnpremDeployTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onpremDeployTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onpremDeployTarget")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotTarget) contextValidateReplicationTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationTarget != nil {

		if swag.IsZero(m.ReplicationTarget) { // not required
			return nil
		}

		if err := m.ReplicationTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationTarget")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotTarget) UnmarshalBinary(b []byte) error {
	var res SnapshotTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
