// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterProtectionSourceParameters Register Protection Source Parameters.
//
// Specifies the parameters required to register a Protection Source.
//
// swagger:model RegisterProtectionSourceParameters
type RegisterProtectionSourceParameters struct {

	// Specifies if this source entity has enabled storage array snapshot or not.
	IsStorageArraySnapshotEnabled *bool `json:"IsStorageArraySnapshotEnabled,omitempty"`

	// Specifies the entity type if the environment is kAcropolis.
	// overrideDescription: true
	// Enum: ["kStandaloneCluster"]
	AcropolisType *string `json:"acropolisType,omitempty"`

	// Specifies the agent endpoint if it is different from the source endpoint.
	AgentEndpoint *string `json:"agentEndpoint,omitempty"`

	// Specifies the list of IP Addresses on the registered source to be
	// exclusively allowed for doing any type of IO operations.
	AllowedIPAddresses []string `json:"allowedIpAddresses"`

	// AWS Source Credentials.
	//
	// Specifies credentials needed to authenticate with AWS Cloud Platform.
	AwsCredentials *AwsCredentials `json:"awsCredentials,omitempty"`

	// Specifies information related to AWS fleets launched for various purposes.
	// This will only be set for kIAMUser entity.
	AwsFleetParams *AwsFleetPublicParams `json:"awsFleetParams,omitempty"`

	// Azure Source Credentials.
	//
	// Specifies credentials needed to authenticate with Azure Cloud Platform.
	AzureCredentials *AzureCredentials `json:"azureCredentials,omitempty"`

	// This field is deprecated. Use DeniedIpAddresses instead.
	// deprecated: true
	BlacklistedIPAddresses []string `json:"blacklistedIpAddresses"`

	// Specifies the cloud credentials used to authenticate with cloud(Aws).
	CloudCredentials *CloudCredentials `json:"cloudCredentials,omitempty"`

	// Specifies information related to cluster. This is only valid for CE
	// clusters. This is only populated for kIAMUser entity.
	ClusterNetworkInfo *FleetNetworkParams `json:"clusterNetworkInfo,omitempty"`

	// Specifies the Bifrost realm to be associated with the source root.
	// Whenever needed, the workflows related to this source would then
	// only use Bifrosts from the specified realm.
	ConnectionID *int64 `json:"connectionId,omitempty"`

	// Specifies the list of IP Addresses on the registered source to be denied
	// for doing any type of IO operations.
	DeniedIPAddresses []string `json:"deniedIpAddresses"`

	// Specifies whether to enable M365 Storage Service API based(CSM) Backup
	// for the M365 source.
	EnableM365CSMBackup *bool `json:"enableM365CSMBackup,omitempty"`

	// If set, user has encrypted the credential with 'user_ecryption_key'.
	// It is assumed that credentials are first encrypted using
	// internal magento key and then encrypted using user encryption key.
	EncryptionKey *string `json:"encryptionKey,omitempty"`

	// Specifies the network endpoint of the Protection Source where it is
	// reachable. It could be an URL or hostname or an IP address of the
	// Protection Source.
	Endpoint *string `json:"endpoint,omitempty"`

	// Specifies the environment such as 'kPhysical' or 'kVMware' of the
	// Protection Source.
	// overrideDescription: true
	// Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	// NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	// 'kVMware' indicates the VMware Protection Source environment.
	// 'kHyperV' indicates the HyperV Protection Source environment.
	// 'kSQL' indicates the SQL Protection Source environment.
	// 'kView' indicates the View Protection Source environment.
	// 'kPuppeteer' indicates the Cohesity's Remote Adapter.
	// 'kPhysical' indicates the physical Protection Source environment.
	// 'kPure' indicates the Pure Storage Protection Source environment.
	// 'kNimble' indicates the Nimble Storage Protection Source environment.
	// 'kAzure' indicates the Microsoft's Azure Protection Source environment.
	// 'kNetapp' indicates the Netapp Protection Source environment.
	// 'kAgent' indicates the Agent Protection Source environment.
	// 'kGenericNas' indicates the Generic Network Attached Storage Protection
	// Source environment.
	// 'kAcropolis' indicates the Acropolis Protection Source environment.
	// 'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	// 'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	// 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	// 'kGPFS' indicates IBM's GPFS Protection Source environment.
	// 'kKVM' indicates the KVM Protection Source environment.
	// 'kAWS' indicates the AWS Protection Source environment.
	// 'kExchange' indicates the Exchange Protection Source environment.
	// 'kHyperVVSS' indicates the HyperV VSS Protection Source
	// environment.
	// 'kOracle' indicates the Oracle Protection Source environment.
	// 'kGCP' indicates the Google Cloud Platform Protection Source environment.
	// 'kFlashBlade' indicates the Flash Blade Protection Source environment.
	// 'kAWSNative' indicates the AWS Native Protection Source environment.
	// 'kO365' indicates the Office 365 Protection Source environment.
	// 'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	// 'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	// 'kGCPNative' indicates the GCP Native Protection Source environment.
	// 'kAzureNative' indicates the Azure Native Protection Source environment.
	// 'kKubernetes' indicates a Kubernetes Protection Source environment.
	// 'kElastifile' indicates Elastifile Protection Source environment.
	// 'kAD' indicates Active Directory Protection Source environment.
	// 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	// 'kCassandra' indicates Cassandra Protection Source environment.
	// 'kMongoDB' indicates MongoDB Protection Source environment.
	// 'kCouchbase' indicates Couchbase Protection Source environment.
	// 'kHdfs' indicates Hdfs Protection Source environment.
	// 'kHive' indicates Hive Protection Source environment.
	// 'kHBase' indicates HBase Protection Source environment.
	// 'kUDA' indicates Universal Data Adapter Protection Source environment.
	// 'kSAPHANA' indicates SAP HANA protection source environment.
	// 'kO365Teams' indicates the Office365 Teams Protection Source environment.
	// 'kO365Group' indicates the Office365 Groups Protection Source environment.
	// 'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	// 'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	// 'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	// 'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	// kIbmFlashSystem, kAzure, kNetapp, kAgent, kGenericNas, kAcropolis,
	// kPhysicalFiles, kIsilon, kGPFS, kKVM, kAWS, kExchange, kHyperVVSS, kOracle,
	// kGCP, kFlashBlade, kAWSNative, kO365, kO365Outlook, kHyperFlex, kGCPNative,
	// kAzureNative, kKubernetes, kElastifile, kAD, kRDSSnapshotManager,
	// kCassandra, kMongoDB, kCouchbase, kHdfs, kHive, kHBase, kUDA, kSAPHANA,
	// kO365Teams, kO365Group, kO365Exchange, kO365OneDrive, kO365Sharepoint,
	// kO365PublicFolders
	// Enum: ["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]
	Environment *string `json:"environment,omitempty"`

	// Specifies information about the preference order while choosing
	// between which database copy of the exchange database which is part of
	// DAG should be protected.
	ExchangeDagProtectionPreference *ExchangeDAGProtectionPreference `json:"exchangeDagProtectionPreference,omitempty"`

	// ForceRegister is applicable to Physical Environment. By default, the agent
	// running on a physical host will fail the registration, if it is already
	// registered as part of another cluster. By setting this option to true,
	// agent can be forced to register with the current cluster. This is a hidden
	// parameter and should not be documented externally.
	ForceRegister *bool `json:"forceRegister,omitempty"`

	// GCP Source Credentials.
	//
	// Specifies credentials needed to authenticate with Google Cloud Platform.
	GcpCredentials *GcpCredentials `json:"gcpCredentials,omitempty"`

	// Specifies information related to GCP fleets launched for various purposes.
	// This will only be set for kIAMUser entity.
	GcpFleetParams *GcpFleetParams `json:"gcpFleetParams,omitempty"`

	// Specifies the optional OS type of the Protection Source (such as kWindows
	// or kLinux).
	// overrideDescription: true
	// 'kLinux' indicates the Linux operating system.
	// 'kWindows' indicates the Microsoft Windows operating system.
	// 'kAix' indicates the IBM AIX operating system.
	// 'kSolaris' indicates the Oracle Solaris operating system.
	// 'kSapHana' indicates the Sap Hana database system developed by SAP SE.
	// 'kSapOracle' indicates the Sap Oracle database system developed by SAP SE.
	// 'kCockroachDB' indicates the CockroachDB database system.
	// 'kMySQL' indicates the MySQL database system.
	// 'kSapSybase' indicates the SapSybase database system.
	// 'kSapMaxDB' indicates the SapMaxDB database system.
	// 'kSapSybaseIQ' indicates the SapSybaseIQ database system.
	// 'kDB2' indicates the DB2 database system.
	// 'kSapASE' indicates the SapASE database system.
	// 'kMariaDB' indicates the MariaDB database system.
	// 'kPostgreSQL' indicates the PostgreSQL database system.
	// 'kHPUX' indicates the HPUX database system.
	// 'kVOS' indicates the VOS database system.
	// 'kOther' indicates the other types of operating system.
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]
	HostType *string `json:"hostType,omitempty"`

	// Specifies the entity type if the environment is kHyperV.
	// overrideDescription: true
	// Enum: ["kSCVMMServer","kStandaloneHost","kStandaloneCluster"]
	HyperVType *string `json:"hyperVType,omitempty"`

	// Specifies the entity type such as 'kStorageArray' if the environment is
	// kIbmFlashSystem.
	// overrideDescription: true
	// Enum: ["kStorageArray"]
	IbmFlashSystemType *string `json:"ibmFlashSystemType,omitempty"`

	// Set to true if credentials are encrypted by internal magneto key.
	IsInternalEncrypted *bool `json:"isInternalEncrypted,omitempty"`

	// Specifies if the physical host has to be registered as a proxy host.
	IsProxyHost *bool `json:"isProxyHost,omitempty"`

	// Isilon Source params
	//
	// Specifies the registered protection source params for Isilon Source
	IsilonParams *RegisteredProtectionSourceIsilonParams `json:"isilonParams,omitempty"`

	// Kubernetes Source Credentials.
	//
	// Specifies the credentials needed to authenticate a Kubernetes cluster.
	KubernetesCredentials *KubernetesCredentials `json:"kubernetesCredentials,omitempty"`

	// Extra parameters needed for registering a K8s resource.
	KubernetesParams *KubernetesParams `json:"kubernetesParams,omitempty"`

	// Specifies the entity type if the environment is kKubernetes.
	// overrideDescription: true
	// Enum: ["kCluster"]
	KubernetesType *string `json:"kubernetesType,omitempty"`

	// Specifies the entity type if the environment is kKVM.
	// overrideDescription: true
	// Enum: ["kOVirtManager"]
	KvmType *string `json:"kvmType,omitempty"`

	// NAS Server Credentials.
	//
	// Specifies the server credentials to connect to a NetApp server.
	// This field is required for mounting SMB volumes on NetApp servers.
	NasMountCredentials struct {
		NasMountCredentialParams
	} `json:"nasMountCredentials,omitempty"`

	// Specifies the entity type such as 'kCluster,' if the environment is
	// kNetapp.
	// Enum: ["kCluster","kVserver"]
	NetappType *string `json:"netappType,omitempty"`

	// Specifies the entity type such as 'kStorageArray' if the environment is
	// kNimble.
	// overrideDescription: true
	// Enum: ["kStorageArray"]
	NimbleType *string `json:"nimbleType,omitempty"`

	// Office365 Source Credentials.
	//
	// Specifies credentials needed to authenticate & authorize user for
	// Office365 using MS Graph APIs.
	Office365CredentialsList []*Office365Credentials `json:"office365CredentialsList"`

	// Specifies the region for Office365.
	Office365Region *string `json:"office365Region,omitempty"`

	// Office365 Service Account Credentials.
	//
	// Specifies credentials for improving mailbox backup performance for O365.
	Office365ServiceAccountCredentialsList []*Credentials `json:"office365ServiceAccountCredentialsList"`

	// Specifies the entity type such as 'kDomain', 'kOutlook', 'kMailbox', if the
	// environment is kO365.
	// Enum: ["kDomain"]
	Office365Type *string `json:"office365Type,omitempty"`

	// Specifies password of the username to access the target source.
	Password *string `json:"password,omitempty"`

	// Contains all params specified by the user while registering a physical
	// entity.
	PhysicalParams *PhysicalParams `json:"physicalParams,omitempty"`

	// Specifies the entity type such as 'kPhysicalHost' if the environment is
	// kPhysical.
	// overrideDescription: true
	// Enum: ["kHost"]
	PhysicalType *string `json:"physicalType,omitempty"`

	// Specifies the list of the protection source id of the windows physical
	// host which will be used during the protection and recovery of the sites
	// that belong to a office365 domain.
	ProxyHostSourceIDList []int64 `json:"proxyHostSourceIdList"`

	// Specifies the entity type such as 'kStorageArray' if the environment is
	// kPure.
	// overrideDescription: true
	// Enum: ["kStorageArray"]
	PureType *string `json:"pureType,omitempty"`

	// ReRegister is applicable to Physical Environment. By default, the
	// agent running on a physical host will fail the registration, if it is
	// already registered with the cluster. By setting this option to true, agent
	// can be re-registered with the current cluster.
	ReRegister *bool `json:"reRegister,omitempty"`

	// RestoreConfig is applicable to Physical Environment. The ReRegister option
	// needs to be true if RestoreConfig is true. By setting this option to true,
	// the agent configuration can be restored.
	RestoreConfig *bool `json:"restoreConfig,omitempty"`

	// This controls whether to use source side dedup on the source or not.
	// This is only applicable to sources which support source side dedup
	// (e.g., Linux physical servers).
	SourceSideDedupEnabled *bool `json:"sourceSideDedupEnabled,omitempty"`

	// SSL verification parameter is applicable to VMware environment. It can be
	// populated with the server's CA certificate or certificate chain and
	// vCenter's certificate will be validated against this.
	SslVerification *SslVerification `json:"sslVerification,omitempty"`

	// Specifies the list of subnet IP addresses and CIDR prefix for enabeling
	// network data transfer. Currently, only Subnet IP and NetbaskBits are valid
	// input fields. All other fields provided as input will be ignored.
	Subnets []*Subnet `json:"subnets"`

	// Specifies the throttling policy that should be applied to this Source.
	ThrottlingPolicy struct {
		ThrottlingPolicyParameters
	} `json:"throttlingPolicy,omitempty"`

	// Array of Throttling Policy Overrides for Datastores.
	//
	// Specifies a list of Throttling Policy for datastores that override the
	// common throttling policy specified for the registered Protection Source.
	// For datastores not in this list, common policy will still apply.
	ThrottlingPolicyOverrides []*ThrottlingPolicyOverride `json:"throttlingPolicyOverrides"`

	// Specifies whether to use existing Office365 credentials like password and
	// client secret for app id's.
	UseExistingCredentials *bool `json:"useExistingCredentials,omitempty"`

	// Specifies whether OAuth should be used for authentication in case of
	// Exchange Online.
	UseOAuthForExchangeOnline *bool `json:"useOAuthForExchangeOnline,omitempty"`

	// Specifies username to access the target source.
	Username *string `json:"username,omitempty"`

	// Specifies the VLAN parameters to be used while taking the backup of this
	// entity and is the preferred selection for restoring the same.
	// For restores, the VLAN parameters specifed here can be overridden.
	// Currently, this is only applicable for Physical hosts running Oracle.
	VlanParams *VlanParameters `json:"vlanParams,omitempty"`

	// Contains all params specified by the user while registering a Vmware
	// entity.
	VmwareParams *VmwareParams `json:"vmwareParams,omitempty"`

	// Specifies the entity type such as 'kVCenter' if the environment is
	// kKMware.
	// overrideDescription: true
	// Enum: ["kVCenter","kStandaloneHost","kvCloudDirector"]
	VmwareType *string `json:"vmwareType,omitempty"`
}

// Validate validates this register protection source parameters
func (m *RegisterProtectionSourceParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcropolisType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsFleetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterNetworkInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeDagProtectionPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpFleetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHyperVType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmFlashSystemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKvmType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNasMountCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNimbleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365CredentialsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365ServiceAccountCredentialsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365Type(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePureType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingPolicyOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var registerProtectionSourceParametersTypeAcropolisTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStandaloneCluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeAcropolisTypePropEnum = append(registerProtectionSourceParametersTypeAcropolisTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersAcropolisTypeKStandaloneCluster captures enum value "kStandaloneCluster"
	RegisterProtectionSourceParametersAcropolisTypeKStandaloneCluster string = "kStandaloneCluster"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateAcropolisTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeAcropolisTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateAcropolisType(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAcropolisTypeEnum("acropolisType", "body", *m.AcropolisType); err != nil {
		return err
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateAwsCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsCredentials) { // not required
		return nil
	}

	if m.AwsCredentials != nil {
		if err := m.AwsCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateAwsFleetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsFleetParams) { // not required
		return nil
	}

	if m.AwsFleetParams != nil {
		if err := m.AwsFleetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateAzureCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureCredentials) { // not required
		return nil
	}

	if m.AzureCredentials != nil {
		if err := m.AzureCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateCloudCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudCredentials) { // not required
		return nil
	}

	if m.CloudCredentials != nil {
		if err := m.CloudCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateClusterNetworkInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterNetworkInfo) { // not required
		return nil
	}

	if m.ClusterNetworkInfo != nil {
		if err := m.ClusterNetworkInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterNetworkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterNetworkInfo")
			}
			return err
		}
	}

	return nil
}

var registerProtectionSourceParametersTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeEnvironmentPropEnum = append(registerProtectionSourceParametersTypeEnvironmentPropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersEnvironmentKVMware captures enum value "kVMware"
	RegisterProtectionSourceParametersEnvironmentKVMware string = "kVMware"

	// RegisterProtectionSourceParametersEnvironmentKHyperV captures enum value "kHyperV"
	RegisterProtectionSourceParametersEnvironmentKHyperV string = "kHyperV"

	// RegisterProtectionSourceParametersEnvironmentKSQL captures enum value "kSQL"
	RegisterProtectionSourceParametersEnvironmentKSQL string = "kSQL"

	// RegisterProtectionSourceParametersEnvironmentKView captures enum value "kView"
	RegisterProtectionSourceParametersEnvironmentKView string = "kView"

	// RegisterProtectionSourceParametersEnvironmentKPuppeteer captures enum value "kPuppeteer"
	RegisterProtectionSourceParametersEnvironmentKPuppeteer string = "kPuppeteer"

	// RegisterProtectionSourceParametersEnvironmentKPhysical captures enum value "kPhysical"
	RegisterProtectionSourceParametersEnvironmentKPhysical string = "kPhysical"

	// RegisterProtectionSourceParametersEnvironmentKPure captures enum value "kPure"
	RegisterProtectionSourceParametersEnvironmentKPure string = "kPure"

	// RegisterProtectionSourceParametersEnvironmentKNimble captures enum value "kNimble"
	RegisterProtectionSourceParametersEnvironmentKNimble string = "kNimble"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateExchangeDagProtectionPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeDagProtectionPreference) { // not required
		return nil
	}

	if m.ExchangeDagProtectionPreference != nil {
		if err := m.ExchangeDagProtectionPreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeDagProtectionPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeDagProtectionPreference")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateGcpCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpCredentials) { // not required
		return nil
	}

	if m.GcpCredentials != nil {
		if err := m.GcpCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateGcpFleetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpFleetParams) { // not required
		return nil
	}

	if m.GcpFleetParams != nil {
		if err := m.GcpFleetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpFleetParams")
			}
			return err
		}
	}

	return nil
}

var registerProtectionSourceParametersTypeHostTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeHostTypePropEnum = append(registerProtectionSourceParametersTypeHostTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersHostTypeKLinux captures enum value "kLinux"
	RegisterProtectionSourceParametersHostTypeKLinux string = "kLinux"

	// RegisterProtectionSourceParametersHostTypeKWindows captures enum value "kWindows"
	RegisterProtectionSourceParametersHostTypeKWindows string = "kWindows"

	// RegisterProtectionSourceParametersHostTypeKAix captures enum value "kAix"
	RegisterProtectionSourceParametersHostTypeKAix string = "kAix"

	// RegisterProtectionSourceParametersHostTypeKSolaris captures enum value "kSolaris"
	RegisterProtectionSourceParametersHostTypeKSolaris string = "kSolaris"

	// RegisterProtectionSourceParametersHostTypeKSapHana captures enum value "kSapHana"
	RegisterProtectionSourceParametersHostTypeKSapHana string = "kSapHana"

	// RegisterProtectionSourceParametersHostTypeKSapOracle captures enum value "kSapOracle"
	RegisterProtectionSourceParametersHostTypeKSapOracle string = "kSapOracle"

	// RegisterProtectionSourceParametersHostTypeKCockroachDB captures enum value "kCockroachDB"
	RegisterProtectionSourceParametersHostTypeKCockroachDB string = "kCockroachDB"

	// RegisterProtectionSourceParametersHostTypeKMySQL captures enum value "kMySQL"
	RegisterProtectionSourceParametersHostTypeKMySQL string = "kMySQL"

	// RegisterProtectionSourceParametersHostTypeKOther captures enum value "kOther"
	RegisterProtectionSourceParametersHostTypeKOther string = "kOther"

	// RegisterProtectionSourceParametersHostTypeKSapSybase captures enum value "kSapSybase"
	RegisterProtectionSourceParametersHostTypeKSapSybase string = "kSapSybase"

	// RegisterProtectionSourceParametersHostTypeKSapMaxDB captures enum value "kSapMaxDB"
	RegisterProtectionSourceParametersHostTypeKSapMaxDB string = "kSapMaxDB"

	// RegisterProtectionSourceParametersHostTypeKSapSybaseIQ captures enum value "kSapSybaseIQ"
	RegisterProtectionSourceParametersHostTypeKSapSybaseIQ string = "kSapSybaseIQ"

	// RegisterProtectionSourceParametersHostTypeKDB2 captures enum value "kDB2"
	RegisterProtectionSourceParametersHostTypeKDB2 string = "kDB2"

	// RegisterProtectionSourceParametersHostTypeKSapASE captures enum value "kSapASE"
	RegisterProtectionSourceParametersHostTypeKSapASE string = "kSapASE"

	// RegisterProtectionSourceParametersHostTypeKMariaDB captures enum value "kMariaDB"
	RegisterProtectionSourceParametersHostTypeKMariaDB string = "kMariaDB"

	// RegisterProtectionSourceParametersHostTypeKPostgreSQL captures enum value "kPostgreSQL"
	RegisterProtectionSourceParametersHostTypeKPostgreSQL string = "kPostgreSQL"

	// RegisterProtectionSourceParametersHostTypeKVOS captures enum value "kVOS"
	RegisterProtectionSourceParametersHostTypeKVOS string = "kVOS"

	// RegisterProtectionSourceParametersHostTypeKHPUX captures enum value "kHPUX"
	RegisterProtectionSourceParametersHostTypeKHPUX string = "kHPUX"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateHostTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeHostTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateHostType(formats strfmt.Registry) error {
	if swag.IsZero(m.HostType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostTypeEnum("hostType", "body", *m.HostType); err != nil {
		return err
	}

	return nil
}

var registerProtectionSourceParametersTypeHyperVTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSCVMMServer","kStandaloneHost","kStandaloneCluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeHyperVTypePropEnum = append(registerProtectionSourceParametersTypeHyperVTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersHyperVTypeKSCVMMServer captures enum value "kSCVMMServer"
	RegisterProtectionSourceParametersHyperVTypeKSCVMMServer string = "kSCVMMServer"

	// RegisterProtectionSourceParametersHyperVTypeKStandaloneHost captures enum value "kStandaloneHost"
	RegisterProtectionSourceParametersHyperVTypeKStandaloneHost string = "kStandaloneHost"

	// RegisterProtectionSourceParametersHyperVTypeKStandaloneCluster captures enum value "kStandaloneCluster"
	RegisterProtectionSourceParametersHyperVTypeKStandaloneCluster string = "kStandaloneCluster"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateHyperVTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeHyperVTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateHyperVType(formats strfmt.Registry) error {
	if swag.IsZero(m.HyperVType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHyperVTypeEnum("hyperVType", "body", *m.HyperVType); err != nil {
		return err
	}

	return nil
}

var registerProtectionSourceParametersTypeIbmFlashSystemTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStorageArray"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeIbmFlashSystemTypePropEnum = append(registerProtectionSourceParametersTypeIbmFlashSystemTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersIbmFlashSystemTypeKStorageArray captures enum value "kStorageArray"
	RegisterProtectionSourceParametersIbmFlashSystemTypeKStorageArray string = "kStorageArray"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateIbmFlashSystemTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeIbmFlashSystemTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateIbmFlashSystemType(formats strfmt.Registry) error {
	if swag.IsZero(m.IbmFlashSystemType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIbmFlashSystemTypeEnum("ibmFlashSystemType", "body", *m.IbmFlashSystemType); err != nil {
		return err
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateIsilonParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateKubernetesCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesCredentials) { // not required
		return nil
	}

	if m.KubernetesCredentials != nil {
		if err := m.KubernetesCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateKubernetesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesParams) { // not required
		return nil
	}

	if m.KubernetesParams != nil {
		if err := m.KubernetesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

var registerProtectionSourceParametersTypeKubernetesTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeKubernetesTypePropEnum = append(registerProtectionSourceParametersTypeKubernetesTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersKubernetesTypeKCluster captures enum value "kCluster"
	RegisterProtectionSourceParametersKubernetesTypeKCluster string = "kCluster"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateKubernetesTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeKubernetesTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateKubernetesType(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesType) { // not required
		return nil
	}

	// value enum
	if err := m.validateKubernetesTypeEnum("kubernetesType", "body", *m.KubernetesType); err != nil {
		return err
	}

	return nil
}

var registerProtectionSourceParametersTypeKvmTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kOVirtManager"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeKvmTypePropEnum = append(registerProtectionSourceParametersTypeKvmTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersKvmTypeKOVirtManager captures enum value "kOVirtManager"
	RegisterProtectionSourceParametersKvmTypeKOVirtManager string = "kOVirtManager"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateKvmTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeKvmTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateKvmType(formats strfmt.Registry) error {
	if swag.IsZero(m.KvmType) { // not required
		return nil
	}

	// value enum
	if err := m.validateKvmTypeEnum("kvmType", "body", *m.KvmType); err != nil {
		return err
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateNasMountCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.NasMountCredentials) { // not required
		return nil
	}

	return nil
}

var registerProtectionSourceParametersTypeNetappTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kVserver"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeNetappTypePropEnum = append(registerProtectionSourceParametersTypeNetappTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersNetappTypeKCluster captures enum value "kCluster"
	RegisterProtectionSourceParametersNetappTypeKCluster string = "kCluster"

	// RegisterProtectionSourceParametersNetappTypeKVserver captures enum value "kVserver"
	RegisterProtectionSourceParametersNetappTypeKVserver string = "kVserver"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateNetappTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeNetappTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateNetappType(formats strfmt.Registry) error {
	if swag.IsZero(m.NetappType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNetappTypeEnum("netappType", "body", *m.NetappType); err != nil {
		return err
	}

	return nil
}

var registerProtectionSourceParametersTypeNimbleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStorageArray"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeNimbleTypePropEnum = append(registerProtectionSourceParametersTypeNimbleTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersNimbleTypeKStorageArray captures enum value "kStorageArray"
	RegisterProtectionSourceParametersNimbleTypeKStorageArray string = "kStorageArray"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateNimbleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeNimbleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateNimbleType(formats strfmt.Registry) error {
	if swag.IsZero(m.NimbleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNimbleTypeEnum("nimbleType", "body", *m.NimbleType); err != nil {
		return err
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateOffice365CredentialsList(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365CredentialsList) { // not required
		return nil
	}

	for i := 0; i < len(m.Office365CredentialsList); i++ {
		if swag.IsZero(m.Office365CredentialsList[i]) { // not required
			continue
		}

		if m.Office365CredentialsList[i] != nil {
			if err := m.Office365CredentialsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateOffice365ServiceAccountCredentialsList(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365ServiceAccountCredentialsList) { // not required
		return nil
	}

	for i := 0; i < len(m.Office365ServiceAccountCredentialsList); i++ {
		if swag.IsZero(m.Office365ServiceAccountCredentialsList[i]) { // not required
			continue
		}

		if m.Office365ServiceAccountCredentialsList[i] != nil {
			if err := m.Office365ServiceAccountCredentialsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var registerProtectionSourceParametersTypeOffice365TypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDomain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeOffice365TypePropEnum = append(registerProtectionSourceParametersTypeOffice365TypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersOffice365TypeKDomain captures enum value "kDomain"
	RegisterProtectionSourceParametersOffice365TypeKDomain string = "kDomain"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateOffice365TypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeOffice365TypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateOffice365Type(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateOffice365TypeEnum("office365Type", "body", *m.Office365Type); err != nil {
		return err
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validatePhysicalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

var registerProtectionSourceParametersTypePhysicalTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kHost"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypePhysicalTypePropEnum = append(registerProtectionSourceParametersTypePhysicalTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersPhysicalTypeKHost captures enum value "kHost"
	RegisterProtectionSourceParametersPhysicalTypeKHost string = "kHost"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validatePhysicalTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypePhysicalTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validatePhysicalType(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhysicalTypeEnum("physicalType", "body", *m.PhysicalType); err != nil {
		return err
	}

	return nil
}

var registerProtectionSourceParametersTypePureTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStorageArray"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypePureTypePropEnum = append(registerProtectionSourceParametersTypePureTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersPureTypeKStorageArray captures enum value "kStorageArray"
	RegisterProtectionSourceParametersPureTypeKStorageArray string = "kStorageArray"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validatePureTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypePureTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validatePureType(formats strfmt.Registry) error {
	if swag.IsZero(m.PureType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePureTypeEnum("pureType", "body", *m.PureType); err != nil {
		return err
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateSslVerification(formats strfmt.Registry) error {
	if swag.IsZero(m.SslVerification) { // not required
		return nil
	}

	if m.SslVerification != nil {
		if err := m.SslVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sslVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sslVerification")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateSubnets(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {
		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {
			if err := m.Subnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateThrottlingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingPolicy) { // not required
		return nil
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateThrottlingPolicyOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingPolicyOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.ThrottlingPolicyOverrides); i++ {
		if swag.IsZero(m.ThrottlingPolicyOverrides[i]) { // not required
			continue
		}

		if m.ThrottlingPolicyOverrides[i] != nil {
			if err := m.ThrottlingPolicyOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParams) { // not required
		return nil
	}

	if m.VlanParams != nil {
		if err := m.VlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

var registerProtectionSourceParametersTypeVmwareTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVCenter","kStandaloneHost","kvCloudDirector"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerProtectionSourceParametersTypeVmwareTypePropEnum = append(registerProtectionSourceParametersTypeVmwareTypePropEnum, v)
	}
}

const (

	// RegisterProtectionSourceParametersVmwareTypeKVCenter captures enum value "kVCenter"
	RegisterProtectionSourceParametersVmwareTypeKVCenter string = "kVCenter"

	// RegisterProtectionSourceParametersVmwareTypeKStandaloneHost captures enum value "kStandaloneHost"
	RegisterProtectionSourceParametersVmwareTypeKStandaloneHost string = "kStandaloneHost"

	// RegisterProtectionSourceParametersVmwareTypeKvCloudDirector captures enum value "kvCloudDirector"
	RegisterProtectionSourceParametersVmwareTypeKvCloudDirector string = "kvCloudDirector"
)

// prop value enum
func (m *RegisterProtectionSourceParameters) validateVmwareTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerProtectionSourceParametersTypeVmwareTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) validateVmwareType(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVmwareTypeEnum("vmwareType", "body", *m.VmwareType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this register protection source parameters based on the context it is used
func (m *RegisterProtectionSourceParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsFleetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterNetworkInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeDagProtectionPreference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpFleetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNasMountCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365CredentialsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365ServiceAccountCredentialsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSslVerification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingPolicyOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateAwsCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsCredentials != nil {

		if swag.IsZero(m.AwsCredentials) { // not required
			return nil
		}

		if err := m.AwsCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateAwsFleetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsFleetParams != nil {

		if swag.IsZero(m.AwsFleetParams) { // not required
			return nil
		}

		if err := m.AwsFleetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateAzureCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureCredentials != nil {

		if swag.IsZero(m.AzureCredentials) { // not required
			return nil
		}

		if err := m.AzureCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateCloudCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudCredentials != nil {

		if swag.IsZero(m.CloudCredentials) { // not required
			return nil
		}

		if err := m.CloudCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateClusterNetworkInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterNetworkInfo != nil {

		if swag.IsZero(m.ClusterNetworkInfo) { // not required
			return nil
		}

		if err := m.ClusterNetworkInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterNetworkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterNetworkInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateExchangeDagProtectionPreference(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeDagProtectionPreference != nil {

		if swag.IsZero(m.ExchangeDagProtectionPreference) { // not required
			return nil
		}

		if err := m.ExchangeDagProtectionPreference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeDagProtectionPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeDagProtectionPreference")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateGcpCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpCredentials != nil {

		if swag.IsZero(m.GcpCredentials) { // not required
			return nil
		}

		if err := m.GcpCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateGcpFleetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpFleetParams != nil {

		if swag.IsZero(m.GcpFleetParams) { // not required
			return nil
		}

		if err := m.GcpFleetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateKubernetesCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesCredentials != nil {

		if swag.IsZero(m.KubernetesCredentials) { // not required
			return nil
		}

		if err := m.KubernetesCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateKubernetesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesParams != nil {

		if swag.IsZero(m.KubernetesParams) { // not required
			return nil
		}

		if err := m.KubernetesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateNasMountCredentials(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateOffice365CredentialsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Office365CredentialsList); i++ {

		if m.Office365CredentialsList[i] != nil {

			if swag.IsZero(m.Office365CredentialsList[i]) { // not required
				return nil
			}

			if err := m.Office365CredentialsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365CredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateOffice365ServiceAccountCredentialsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Office365ServiceAccountCredentialsList); i++ {

		if m.Office365ServiceAccountCredentialsList[i] != nil {

			if swag.IsZero(m.Office365ServiceAccountCredentialsList[i]) { // not required
				return nil
			}

			if err := m.Office365ServiceAccountCredentialsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateSslVerification(ctx context.Context, formats strfmt.Registry) error {

	if m.SslVerification != nil {

		if swag.IsZero(m.SslVerification) { // not required
			return nil
		}

		if err := m.SslVerification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sslVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sslVerification")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateSubnets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subnets); i++ {

		if m.Subnets[i] != nil {

			if swag.IsZero(m.Subnets[i]) { // not required
				return nil
			}

			if err := m.Subnets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateThrottlingPolicy(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateThrottlingPolicyOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ThrottlingPolicyOverrides); i++ {

		if m.ThrottlingPolicyOverrides[i] != nil {

			if swag.IsZero(m.ThrottlingPolicyOverrides[i]) { // not required
				return nil
			}

			if err := m.ThrottlingPolicyOverrides[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("throttlingPolicyOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParams != nil {

		if swag.IsZero(m.VlanParams) { // not required
			return nil
		}

		if err := m.VlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterProtectionSourceParameters) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisterProtectionSourceParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterProtectionSourceParameters) UnmarshalBinary(b []byte) error {
	var res RegisterProtectionSourceParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
