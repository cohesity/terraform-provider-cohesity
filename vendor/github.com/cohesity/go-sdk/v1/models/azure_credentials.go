// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureCredentials Azure source Credentials.
//
// Specifies the credentials to authenticate with Azure Cloud Platform.
//
// swagger:model AzureCredentials
type AzureCredentials struct {

	// Specifies Application Id of the active directory of Azure account.
	ApplicationID *string `json:"applicationId,omitempty"`

	// Specifies Application key of the active directory of Azure account.
	ApplicationKey *string `json:"applicationKey,omitempty"`

	// Specifies the entity type such as 'kSubscription' if the environment is
	// kAzure.
	// Specifies the type of an Azure source entity.
	// 'kSubscription' indicates a billing unit within Azure account.
	// 'kResourceGroup' indicates a container that holds related resources.
	// 'kVirtualMachine' indicates a Virtual Machine in Azure environment.
	// 'kStorageAccount' represents a collection of storage containers.
	// 'kStorageKey' indicates a key required to access the storage account.
	// 'kStorageContainer' represents a storage container within a storage account.
	// 'kStorageBlob' represents a storage blog within a storage container.
	// 'kStorageResourceGroup' indicates a container that holds related
	// storage resources.
	// 'kNetworkSecurityGroup' represents a network security group.
	// 'kVirtualNetwork' represents a virtual network.
	// 'kNetworkResourceGroup' indicates a container that holds related
	// network resources.
	// 'kSubnet' represents a subnet within the virtual network.
	// 'kComputeOptions' indicates the number of CPU cores and memory size
	// available for a type of a Virtual Machine.
	// 'kAvailabilitySet' indicates the availability set.
	// Enum: ["kSubscription","kResourceGroup","kVirtualMachine","kStorageAccount","kStorageKey","kStorageContainer","kStorageBlob","kStorageResourceGroup","kNetworkSecurityGroup","kVirtualNetwork","kNetworkResourceGroup","kSubnet","kComputeOptions","kAvailabilitySet"]
	AzureType *string `json:"azureType,omitempty"`

	// Specifies Azure stack hub domain name for where the given subscription is
	// present.
	DomainName *string `json:"domainName,omitempty"`

	// Specifies the region in which the Azure Stack will be registered.
	Region *string `json:"region,omitempty"`

	// Specifies Subscription id inside a customer's Azure account. It represents
	// sub-section within the Azure account where a customer allows us to
	// create VMs, storage account etc.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// Specifies the subscription type of Azure such as 'kAzureCommercial',
	// 'kAzureGovCloud', 'kAzureStackCommercial' or 'kAzureStackADFS'.
	// Specifies the subscription type of an Azure source entity.
	// 'kAzureCommercial' indicates a standard Azure subscription.
	// 'kAzureGovCloud' indicates a govt Azure subscription.
	// 'kAzureStackCommercial' indicates a stack commercial Azure subscription.
	// 'kAzureStackADFS' indicates a ADFS Azure subbscription.
	// Enum: ["kAzureCommercial","kAzureGovCloud","kAzureStackCommercial","kAzureStackADFS"]
	SubscriptionType *string `json:"subscriptionType,omitempty"`

	// Specifies Tenant Id of the active directory of Azure account.
	TenantID *string `json:"tenantId,omitempty"`
}

// Validate validates this azure credentials
func (m *AzureCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzureType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var azureCredentialsTypeAzureTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSubscription","kResourceGroup","kVirtualMachine","kStorageAccount","kStorageKey","kStorageContainer","kStorageBlob","kStorageResourceGroup","kNetworkSecurityGroup","kVirtualNetwork","kNetworkResourceGroup","kSubnet","kComputeOptions","kAvailabilitySet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureCredentialsTypeAzureTypePropEnum = append(azureCredentialsTypeAzureTypePropEnum, v)
	}
}

const (

	// AzureCredentialsAzureTypeKSubscription captures enum value "kSubscription"
	AzureCredentialsAzureTypeKSubscription string = "kSubscription"

	// AzureCredentialsAzureTypeKResourceGroup captures enum value "kResourceGroup"
	AzureCredentialsAzureTypeKResourceGroup string = "kResourceGroup"

	// AzureCredentialsAzureTypeKVirtualMachine captures enum value "kVirtualMachine"
	AzureCredentialsAzureTypeKVirtualMachine string = "kVirtualMachine"

	// AzureCredentialsAzureTypeKStorageAccount captures enum value "kStorageAccount"
	AzureCredentialsAzureTypeKStorageAccount string = "kStorageAccount"

	// AzureCredentialsAzureTypeKStorageKey captures enum value "kStorageKey"
	AzureCredentialsAzureTypeKStorageKey string = "kStorageKey"

	// AzureCredentialsAzureTypeKStorageContainer captures enum value "kStorageContainer"
	AzureCredentialsAzureTypeKStorageContainer string = "kStorageContainer"

	// AzureCredentialsAzureTypeKStorageBlob captures enum value "kStorageBlob"
	AzureCredentialsAzureTypeKStorageBlob string = "kStorageBlob"

	// AzureCredentialsAzureTypeKStorageResourceGroup captures enum value "kStorageResourceGroup"
	AzureCredentialsAzureTypeKStorageResourceGroup string = "kStorageResourceGroup"

	// AzureCredentialsAzureTypeKNetworkSecurityGroup captures enum value "kNetworkSecurityGroup"
	AzureCredentialsAzureTypeKNetworkSecurityGroup string = "kNetworkSecurityGroup"

	// AzureCredentialsAzureTypeKVirtualNetwork captures enum value "kVirtualNetwork"
	AzureCredentialsAzureTypeKVirtualNetwork string = "kVirtualNetwork"

	// AzureCredentialsAzureTypeKNetworkResourceGroup captures enum value "kNetworkResourceGroup"
	AzureCredentialsAzureTypeKNetworkResourceGroup string = "kNetworkResourceGroup"

	// AzureCredentialsAzureTypeKSubnet captures enum value "kSubnet"
	AzureCredentialsAzureTypeKSubnet string = "kSubnet"

	// AzureCredentialsAzureTypeKComputeOptions captures enum value "kComputeOptions"
	AzureCredentialsAzureTypeKComputeOptions string = "kComputeOptions"

	// AzureCredentialsAzureTypeKAvailabilitySet captures enum value "kAvailabilitySet"
	AzureCredentialsAzureTypeKAvailabilitySet string = "kAvailabilitySet"
)

// prop value enum
func (m *AzureCredentials) validateAzureTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureCredentialsTypeAzureTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCredentials) validateAzureType(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAzureTypeEnum("azureType", "body", *m.AzureType); err != nil {
		return err
	}

	return nil
}

var azureCredentialsTypeSubscriptionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAzureCommercial","kAzureGovCloud","kAzureStackCommercial","kAzureStackADFS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureCredentialsTypeSubscriptionTypePropEnum = append(azureCredentialsTypeSubscriptionTypePropEnum, v)
	}
}

const (

	// AzureCredentialsSubscriptionTypeKAzureCommercial captures enum value "kAzureCommercial"
	AzureCredentialsSubscriptionTypeKAzureCommercial string = "kAzureCommercial"

	// AzureCredentialsSubscriptionTypeKAzureGovCloud captures enum value "kAzureGovCloud"
	AzureCredentialsSubscriptionTypeKAzureGovCloud string = "kAzureGovCloud"

	// AzureCredentialsSubscriptionTypeKAzureStackCommercial captures enum value "kAzureStackCommercial"
	AzureCredentialsSubscriptionTypeKAzureStackCommercial string = "kAzureStackCommercial"

	// AzureCredentialsSubscriptionTypeKAzureStackADFS captures enum value "kAzureStackADFS"
	AzureCredentialsSubscriptionTypeKAzureStackADFS string = "kAzureStackADFS"
)

// prop value enum
func (m *AzureCredentials) validateSubscriptionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureCredentialsTypeSubscriptionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCredentials) validateSubscriptionType(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriptionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubscriptionTypeEnum("subscriptionType", "body", *m.SubscriptionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure credentials based on context it is used
func (m *AzureCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCredentials) UnmarshalBinary(b []byte) error {
	var res AzureCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
