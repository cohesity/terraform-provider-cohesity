// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateDatastoreInfo This represents a volume or SMB file share that can be used for
// VM placement.
//
// swagger:model PrivateDatastoreInfo
type PrivateDatastoreInfo struct {

	// The capacity of a file share or a volume in bytes.
	// This is set for entities of type kDatastore.
	Capacity *uint64 `json:"capacity,omitempty"`

	// The datastore type. This is set for entities of type kDatastore.
	DatastoreType *int32 `json:"datastoreType,omitempty"`

	// The free space of a file share or a volume in bytes.
	// This is set for entities of type kDatastore.
	FreeSpace *uint64 `json:"freeSpace,omitempty"`

	// If true, this datastore is highly available and can be used to deploy
	// highly available virtual machines.
	HighlyAvailable *bool `json:"highlyAvailable,omitempty"`

	// The mount points available for this datastore.
	MountPointVec []string `json:"mountPointVec"`
}

// Validate validates this private datastore info
func (m *PrivateDatastoreInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this private datastore info based on context it is used
func (m *PrivateDatastoreInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrivateDatastoreInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateDatastoreInfo) UnmarshalBinary(b []byte) error {
	var res PrivateDatastoreInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
