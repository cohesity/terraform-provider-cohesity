// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubernetesNamespaceRecoverParams Captures information about the K8s Namespace that is being restored.
//
// swagger:model KubernetesNamespaceRecoverParams
type KubernetesNamespaceRecoverParams struct {

	// If specified, any objects matching the filter params will be excluded from
	// restore.
	ExcludeParams *K8SFilterParams `json:"excludeParams,omitempty"`

	// List of PVCs that user requested to be excluded while doing restore.
	ExcludedPvcVec []string `json:"excludedPvcVec"`

	// Info about PVC(s) to be included for this restore job based on labels.
	// 'excluded_pvc_vec' overrides this filter.
	IncludeParams *K8SFilterParams `json:"includeParams,omitempty"`

	// Whether to restore only pvc or all the namespace resources.
	PvcOnlyRestore *bool `json:"pvcOnlyRestore,omitempty"`

	// Storage class translation requested by user for the restore.
	// Map to store custom arguments which will be provided to the source
	// registration scripts.
	StorageClassTranslationMap map[string]string `json:"storageClassTranslationMap,omitempty"`
}

// Validate validates this kubernetes namespace recover params
func (m *KubernetesNamespaceRecoverParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExcludeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesNamespaceRecoverParams) validateExcludeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeParams) { // not required
		return nil
	}

	if m.ExcludeParams != nil {
		if err := m.ExcludeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("excludeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("excludeParams")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesNamespaceRecoverParams) validateIncludeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IncludeParams) { // not required
		return nil
	}

	if m.IncludeParams != nil {
		if err := m.IncludeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("includeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("includeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kubernetes namespace recover params based on the context it is used
func (m *KubernetesNamespaceRecoverParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExcludeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncludeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesNamespaceRecoverParams) contextValidateExcludeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ExcludeParams != nil {

		if swag.IsZero(m.ExcludeParams) { // not required
			return nil
		}

		if err := m.ExcludeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("excludeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("excludeParams")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesNamespaceRecoverParams) contextValidateIncludeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IncludeParams != nil {

		if swag.IsZero(m.IncludeParams) { // not required
			return nil
		}

		if err := m.IncludeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("includeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("includeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesNamespaceRecoverParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesNamespaceRecoverParams) UnmarshalBinary(b []byte) error {
	var res KubernetesNamespaceRecoverParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
