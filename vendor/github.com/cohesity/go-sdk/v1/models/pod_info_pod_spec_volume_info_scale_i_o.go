// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PodInfoPodSpecVolumeInfoScaleIO ScaleIO represents a persistent ScaleIO volume.
//
// swagger:model PodInfo_PodSpec_VolumeInfo_ScaleIO
type PodInfoPodSpecVolumeInfoScaleIO struct {

	// fs type
	FsType *string `json:"fsType,omitempty"`

	// gateway
	Gateway *string `json:"gateway,omitempty"`

	// protection domain
	ProtectionDomain *string `json:"protectionDomain,omitempty"`

	// read only
	ReadOnly *bool `json:"readOnly,omitempty"`

	// secret ref
	SecretRef *ObjectReference `json:"secretRef,omitempty"`

	// ssl enabled
	SslEnabled *bool `json:"sslEnabled,omitempty"`

	// storage mode
	StorageMode *string `json:"storageMode,omitempty"`

	// storage pool
	StoragePool *string `json:"storagePool,omitempty"`

	// system
	System *string `json:"system,omitempty"`

	// volume name
	VolumeName *string `json:"volumeName,omitempty"`
}

// Validate validates this pod info pod spec volume info scale i o
func (m *PodInfoPodSpecVolumeInfoScaleIO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodInfoPodSpecVolumeInfoScaleIO) validateSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretRef) { // not required
		return nil
	}

	if m.SecretRef != nil {
		if err := m.SecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secretRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pod info pod spec volume info scale i o based on the context it is used
func (m *PodInfoPodSpecVolumeInfoScaleIO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodInfoPodSpecVolumeInfoScaleIO) contextValidateSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.SecretRef != nil {

		if swag.IsZero(m.SecretRef) { // not required
			return nil
		}

		if err := m.SecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secretRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodInfoPodSpecVolumeInfoScaleIO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodInfoPodSpecVolumeInfoScaleIO) UnmarshalBinary(b []byte) error {
	var res PodInfoPodSpecVolumeInfoScaleIO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
