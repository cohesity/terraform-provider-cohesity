// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PerformRestoreJobStateProto Proto to define the persistent information of a wrapper restore job that
// spawns multiple child restore tasks.
//
// swagger:model PerformRestoreJobStateProto
type PerformRestoreJobStateProto struct {

	// The time at which the restore job was admitted to run on a Magneto master.
	// This field will be set only after the status changes to 'kAdmitted'.
	// Using this field, amount of time spent in the waiting/queued state and the
	// amount of time taken taken to actually run the job can be determined.
	// wait time = admitted_time_usecs - start_time_usecs
	// run time = end_time_usecs - admitted_time_usecs
	AdmittedTimeUsecs *int64 `json:"admittedTimeUsecs,omitempty"`

	// Whether this restore job has a pending cancellation request.
	CancellationRequested *bool `json:"cancellationRequested,omitempty"`

	// Whether to continue with the restore operation if restore of any object
	// fails.
	ContinueRestoreOnError *bool `json:"continueRestoreOnError,omitempty"`

	// Custom Tags will be attached to each temporary and permanant entity
	// that will be created during this restore. Currently only being used
	// for AWS and restore task type - kRecoverVMs.
	CustomTagVec []*CustomTag `json:"customTagVec"`

	// Will contain the details of network used in transferring the data from
	// source account to Cohesity cluster.
	DataTransferInfo *DataTransferInfo `json:"dataTransferInfo,omitempty"`

	// This contains information regarding deploy vm to cloud task state. This is
	// set for restore type kConvertAndDeployVMs and kDeployVms.
	DeployVmsToCloudTaskState *DeployVMsToCloudTaskStateProto `json:"deployVmsToCloudTaskState,omitempty"`

	// This field defines the download chat specific params for downloading
	// chat/post messages for a user/team/channel.
	DownloadChatsParams *DownloadChatsParams `json:"downloadChatsParams,omitempty"`

	// This field defines the encryption params for restore task of type
	// kRecoverVMs. For recovery to original location, this will not be set.
	EncryptionParams *EncryptionParams `json:"encryptionParams,omitempty"`

	// If the restore job has finished, this field contains the end time for the
	// job.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// The error encountered by job (if any). Only valid if the job has finished.
	Error *ErrorProto `json:"error,omitempty"`

	// This is set to true by the user in order to restore the objects via SAN
	// transport, as opposed to NBDSSL transport.
	// NOTE: Not all adapters support this method. Currently only VMware.
	LeverageSanTransport *bool `json:"leverageSanTransport,omitempty"`

	// The name of the restore job.
	Name *string `json:"name,omitempty"`

	// Parameters to connect to destination nosql parent entity.
	NosqlConnectParams *NoSQLConnectParams `json:"nosqlConnectParams,omitempty"`

	// Additional parameters for the recovery job to send to imanis server.
	NosqlRecoverJobParams *NoSQLRecoverJobParams `json:"nosqlRecoverJobParams,omitempty"`

	// Information on the exact set of objects being restored (along with
	// snapshots they are being recovered from). Even if the user wanted to
	// restore an entire job form the latest snapshot, this will have
	// individual objects and the exact snapshot they are bein restored from.
	// If specified, this can only have leaf-level entities.
	Objects []*RestoreObject `json:"objects"`

	// A way to connect to the parent source.
	ParentSourceConnectionParams *ConnectorParams `json:"parentSourceConnectionParams,omitempty"`

	// If enabled, magneto physical file restore will be enabled via job
	// framework
	PhysicalFlrParallelRestore *bool `json:"physicalFlrParallelRestore,omitempty"`

	// The power state configuration to be applied to the restored object.
	// Please refer to comments for the field
	// CreateRestoreTaskArg.power_state_config for more details.
	PowerStateConfig *PowerStateConfigProto `json:"powerStateConfig,omitempty"`

	// Whether to preserve tags for the clone op.
	// This field is currently used by HyperV and VMWare.
	PreserveTags *bool `json:"preserveTags,omitempty"`

	// Root path of a Pulse task tracking the progress of the restore job.
	ProgressMonitorTaskPath *string `json:"progressMonitorTaskPath,omitempty"`

	// By default, objects are restored with their original name. This field can
	// be used to specify the transformation ( i.e prefix/suffix) to be applied
	// to the source object name to derive the new name of the restored object.
	//
	// List of env and action type for which this field is applicable are:
	// AWS: kCloneVMs, kRecoverVMs.
	RenameRestoredObjectParam *RenameObjectParamProto `json:"renameRestoredObjectParam,omitempty"`

	// An optional parameter to specify how restored vApps(kVirtualApp) are
	// renamed. Please refer to comments for the field
	// CreateRestoreTaskArg.rename_restored_vapp_param for more details.
	RenameRestoredVappParam *RenameObjectParamProto `json:"renameRestoredVappParam,omitempty"`

	// Sha1 checksum of the restore request. This is used to identify the
	// duplicate restore requests.
	RequestSha1Checksum []uint8 `json:"requestSha1Checksum"`

	// This field defines the Acropolis specific params for restore task of type
	// kRecoverVMs.
	RestoreAcropolisVmsParams *RestoreAcropolisVMsParams `json:"restoreAcropolisVmsParams,omitempty"`

	// This field defines o365 groups specific params for restore job of type
	// kRecoverO365Groups.
	RestoreGroupsParams *RestoreO365GroupsParams `json:"restoreGroupsParams,omitempty"`

	// A unique id for this restore job within the cluster.
	RestoreJobID *int64 `json:"restoreJobId,omitempty"`

	// A global unique id for this restore job. Note that currently it is used to
	// perform tenant migration.
	RestoreJobUID *UniversalIDProto `json:"restoreJobUid,omitempty"`

	// This field defines the kubernetes specific params for restore task of type
	// kRecoverNamespaces.
	RestoreKubernetesNamespacesParams *RestoreKubernetesNamespacesParams `json:"restoreKubernetesNamespacesParams,omitempty"`

	// This field defines the KVM specific params for restore task of type
	// kRecoverVMs.
	RestoreKvmVmsParams *RestoreKVMVMsParams `json:"restoreKvmVmsParams,omitempty"`

	// This field defines the params for triggering M365 Backup Storage API
	// based recoveries. This is valid for kRecoverM365ExchangeCSM,
	// kRecoverM365OneDriveCSM & kRecoverM365SharepointCSM.
	RestoreM365CsmParams *RestoreM365CSMParams `json:"restoreM365CsmParams,omitempty"`

	// Field to indicate the objects specific customization.
	RestoreObjectCustomizations []*RestoreObjectCustomization `json:"restoreObjectCustomizations"`

	// An optional registered parent source to which objects are to be restored.
	// If not specified, objects are restored back to the original source that
	// was managing the objects.
	// If 'restored_to_different_source' is set to true, then this field must be
	// specified.
	RestoreParentSource *EntityProto `json:"restoreParentSource,omitempty"`

	// This field defines the O365 Public Folders specific params for restore
	// task of type kRecoverO365PublicFolders.
	RestorePublicFoldersParams *RestoreO365PublicFoldersParams `json:"restorePublicFoldersParams,omitempty"`

	// This field defines the S3 specific params for restore task of type
	// kRecoverS3Buckets & kRecoverS3Objects.
	RestoreS3Params *RestoreS3Params `json:"restoreS3Params,omitempty"`

	// This field defines o365 site specific params for restore job of type
	// kRecoverSites.
	RestoreSiteParams *RestoreSiteParams `json:"restoreSiteParams,omitempty"`

	// Entity Id of object inside which restored entities will be created.
	RestoreTargetEntityID *int64 `json:"restoreTargetEntityId,omitempty"`

	// This will be optionally populated for certain type of restores (FLR for
	// now) and can be used as a template proto while creating the actual restore
	// task later.
	RestoreTaskStateProtoTmpl *PerformRestoreTaskStateProto `json:"restoreTaskStateProtoTmpl,omitempty"`

	// Even if the user wanted to restore an entire job from the latest snapshot,
	// this will have info of all the individual objects.
	RestoreTaskVec []*PerformRestoreJobStateProtoRestoreTask `json:"restoreTaskVec"`

	// This field defines the O365 Teams specific params for restore task of type
	// kRecoverO365Teams.
	RestoreTeamsParams *RestoreO365TeamsParams `json:"restoreTeamsParams,omitempty"`

	// This field defines the VMware specific params for restore task of type
	// kCloneVMs and kRecoverVMs.
	RestoreVmwareVMParams *RestoreVMwareVMParams `json:"restoreVmwareVmParams,omitempty"`

	// This is populated for VMware environment.
	RestoredObjectsNetworkConfig *RestoredObjectNetworkConfigProto `json:"restoredObjectsNetworkConfig,omitempty"`

	// Whether restore is being performed to a different parent source.
	RestoredToDifferentSource *bool `json:"restoredToDifferentSource,omitempty"`

	// This flag can be set to true to just create the image and not deploy the
	// VM. This flag is set to true during the DR operation that is invoked via
	// runbooks, the creation of image(AMI in case of AWS) and snapshots of the
	// data disk is achieved by invoking a restore of type kConvertAndDeployVMs
	// and orchestration of the VMs is achieved by runbooks.
	SkipImageDeploy *bool `json:"skipImageDeploy,omitempty"`

	// Whether to skip Rigel for restore or not. This field is applicable only
	// for DMaaS. This field is currently being used in DRaaS workflows only.
	SkipRigelForRestore *bool `json:"skipRigelForRestore,omitempty"`

	// The start time for this restore job.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Status of the restore job.
	Status *int32 `json:"status,omitempty"`

	// Name of the external view that the user specifies for restore operations.
	// This field will be used to populate "full_view_name" field in
	// PerformRestoreTaskStateProto so that each restore task uses the same view
	// to clone the files into.
	// This field currently only used for recovery type of kCloneVMs backed up
	// using CDP VMs.
	TargetViewName *string `json:"targetViewName,omitempty"`

	// The type of restore being performed.
	Type *int32 `json:"type,omitempty"`

	// This field defines the uda specific params for restore task of type
	// kRecoverUda.
	UdaRecoverJobParams *UdaRecoverJobParams `json:"udaRecoverJobParams,omitempty"`

	// The user who requested this restore job.
	User *string `json:"user,omitempty"`

	// Specifies information about the user who made the request.
	UserInfo *UserInformation `json:"userInfo,omitempty"`

	// The params to use while recovering a vcd entity.
	VcdConfig *RestoredObjectVCDConfigProto `json:"vcdConfig,omitempty"`

	// The view box id to which the restore job belongs to.
	ViewBoxID *int64 `json:"viewBoxId,omitempty"`

	// The params to use when cloning the view. This contains information about
	// the view that is created when the user requests a clone operation.
	// Information such as QoS, whitelisting can be provided.
	ViewParams *ViewParams `json:"viewParams,omitempty"`

	// Populate warnings on the job if any. The warning messages are propagated
	// from the child restore tasks upon completion of the task.
	Warnings []*ErrorProto `json:"warnings"`
}

// Validate validates this perform restore job state proto
func (m *PerformRestoreJobStateProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomTagVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataTransferInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployVmsToCloudTaskState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadChatsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNosqlConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNosqlRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentSourceConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerStateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredObjectParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredVappParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreAcropolisVmsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreGroupsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreJobUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreKubernetesNamespacesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreKvmVmsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreM365CsmParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreObjectCustomizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreParentSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestorePublicFoldersParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreS3Params(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreSiteParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreTaskStateProtoTmpl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreTaskVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreTeamsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreVmwareVMParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredObjectsNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformRestoreJobStateProto) validateCustomTagVec(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomTagVec) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomTagVec); i++ {
		if swag.IsZero(m.CustomTagVec[i]) { // not required
			continue
		}

		if m.CustomTagVec[i] != nil {
			if err := m.CustomTagVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateDataTransferInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DataTransferInfo) { // not required
		return nil
	}

	if m.DataTransferInfo != nil {
		if err := m.DataTransferInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataTransferInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataTransferInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateDeployVmsToCloudTaskState(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployVmsToCloudTaskState) { // not required
		return nil
	}

	if m.DeployVmsToCloudTaskState != nil {
		if err := m.DeployVmsToCloudTaskState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateDownloadChatsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DownloadChatsParams) { // not required
		return nil
	}

	if m.DownloadChatsParams != nil {
		if err := m.DownloadChatsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadChatsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadChatsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateEncryptionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionParams) { // not required
		return nil
	}

	if m.EncryptionParams != nil {
		if err := m.EncryptionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateNosqlConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NosqlConnectParams) { // not required
		return nil
	}

	if m.NosqlConnectParams != nil {
		if err := m.NosqlConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateNosqlRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NosqlRecoverJobParams) { // not required
		return nil
	}

	if m.NosqlRecoverJobParams != nil {
		if err := m.NosqlRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateParentSourceConnectionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentSourceConnectionParams) { // not required
		return nil
	}

	if m.ParentSourceConnectionParams != nil {
		if err := m.ParentSourceConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSourceConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSourceConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validatePowerStateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerStateConfig) { // not required
		return nil
	}

	if m.PowerStateConfig != nil {
		if err := m.PowerStateConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerStateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerStateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRenameRestoredObjectParam(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredObjectParam) { // not required
		return nil
	}

	if m.RenameRestoredObjectParam != nil {
		if err := m.RenameRestoredObjectParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRenameRestoredVappParam(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredVappParam) { // not required
		return nil
	}

	if m.RenameRestoredVappParam != nil {
		if err := m.RenameRestoredVappParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredVappParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredVappParam")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreAcropolisVmsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreAcropolisVmsParams) { // not required
		return nil
	}

	if m.RestoreAcropolisVmsParams != nil {
		if err := m.RestoreAcropolisVmsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAcropolisVmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAcropolisVmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreGroupsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreGroupsParams) { // not required
		return nil
	}

	if m.RestoreGroupsParams != nil {
		if err := m.RestoreGroupsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreGroupsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreGroupsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreJobUID) { // not required
		return nil
	}

	if m.RestoreJobUID != nil {
		if err := m.RestoreJobUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreJobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreJobUid")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreKubernetesNamespacesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreKubernetesNamespacesParams) { // not required
		return nil
	}

	if m.RestoreKubernetesNamespacesParams != nil {
		if err := m.RestoreKubernetesNamespacesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreKubernetesNamespacesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreKubernetesNamespacesParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreKvmVmsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreKvmVmsParams) { // not required
		return nil
	}

	if m.RestoreKvmVmsParams != nil {
		if err := m.RestoreKvmVmsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreKvmVmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreKvmVmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreM365CsmParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreM365CsmParams) { // not required
		return nil
	}

	if m.RestoreM365CsmParams != nil {
		if err := m.RestoreM365CsmParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreM365CsmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreM365CsmParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreObjectCustomizations(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreObjectCustomizations) { // not required
		return nil
	}

	for i := 0; i < len(m.RestoreObjectCustomizations); i++ {
		if swag.IsZero(m.RestoreObjectCustomizations[i]) { // not required
			continue
		}

		if m.RestoreObjectCustomizations[i] != nil {
			if err := m.RestoreObjectCustomizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjectCustomizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjectCustomizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreParentSource(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreParentSource) { // not required
		return nil
	}

	if m.RestoreParentSource != nil {
		if err := m.RestoreParentSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParentSource")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestorePublicFoldersParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestorePublicFoldersParams) { // not required
		return nil
	}

	if m.RestorePublicFoldersParams != nil {
		if err := m.RestorePublicFoldersParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restorePublicFoldersParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restorePublicFoldersParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreS3Params(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreS3Params) { // not required
		return nil
	}

	if m.RestoreS3Params != nil {
		if err := m.RestoreS3Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreS3Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreS3Params")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreSiteParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreSiteParams) { // not required
		return nil
	}

	if m.RestoreSiteParams != nil {
		if err := m.RestoreSiteParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreSiteParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreSiteParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreTaskStateProtoTmpl(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreTaskStateProtoTmpl) { // not required
		return nil
	}

	if m.RestoreTaskStateProtoTmpl != nil {
		if err := m.RestoreTaskStateProtoTmpl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreTaskStateProtoTmpl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreTaskStateProtoTmpl")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreTaskVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreTaskVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RestoreTaskVec); i++ {
		if swag.IsZero(m.RestoreTaskVec[i]) { // not required
			continue
		}

		if m.RestoreTaskVec[i] != nil {
			if err := m.RestoreTaskVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreTaskVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreTaskVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreTeamsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreTeamsParams) { // not required
		return nil
	}

	if m.RestoreTeamsParams != nil {
		if err := m.RestoreTeamsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreTeamsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreTeamsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoreVmwareVMParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreVmwareVMParams) { // not required
		return nil
	}

	if m.RestoreVmwareVMParams != nil {
		if err := m.RestoreVmwareVMParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVmwareVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVmwareVmParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateRestoredObjectsNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredObjectsNetworkConfig) { // not required
		return nil
	}

	if m.RestoredObjectsNetworkConfig != nil {
		if err := m.RestoredObjectsNetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredObjectsNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredObjectsNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateUdaRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaRecoverJobParams) { // not required
		return nil
	}

	if m.UdaRecoverJobParams != nil {
		if err := m.UdaRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateUserInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.UserInfo) { // not required
		return nil
	}

	if m.UserInfo != nil {
		if err := m.UserInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateVcdConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdConfig) { // not required
		return nil
	}

	if m.VcdConfig != nil {
		if err := m.VcdConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateViewParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewParams) { // not required
		return nil
	}

	if m.ViewParams != nil {
		if err := m.ViewParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) validateWarnings(formats strfmt.Registry) error {
	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	for i := 0; i < len(m.Warnings); i++ {
		if swag.IsZero(m.Warnings[i]) { // not required
			continue
		}

		if m.Warnings[i] != nil {
			if err := m.Warnings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this perform restore job state proto based on the context it is used
func (m *PerformRestoreJobStateProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomTagVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataTransferInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployVmsToCloudTaskState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDownloadChatsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNosqlConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNosqlRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentSourceConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerStateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredObjectParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredVappParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreAcropolisVmsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreGroupsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreKubernetesNamespacesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreKvmVmsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreM365CsmParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreObjectCustomizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreParentSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestorePublicFoldersParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreS3Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreSiteParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreTaskStateProtoTmpl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreTaskVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreTeamsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreVmwareVMParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredObjectsNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateCustomTagVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomTagVec); i++ {

		if m.CustomTagVec[i] != nil {

			if swag.IsZero(m.CustomTagVec[i]) { // not required
				return nil
			}

			if err := m.CustomTagVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customTagVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateDataTransferInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DataTransferInfo != nil {

		if swag.IsZero(m.DataTransferInfo) { // not required
			return nil
		}

		if err := m.DataTransferInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataTransferInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataTransferInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateDeployVmsToCloudTaskState(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployVmsToCloudTaskState != nil {

		if swag.IsZero(m.DeployVmsToCloudTaskState) { // not required
			return nil
		}

		if err := m.DeployVmsToCloudTaskState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployVmsToCloudTaskState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployVmsToCloudTaskState")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateDownloadChatsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DownloadChatsParams != nil {

		if swag.IsZero(m.DownloadChatsParams) { // not required
			return nil
		}

		if err := m.DownloadChatsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadChatsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadChatsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateEncryptionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionParams != nil {

		if swag.IsZero(m.EncryptionParams) { // not required
			return nil
		}

		if err := m.EncryptionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateNosqlConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NosqlConnectParams != nil {

		if swag.IsZero(m.NosqlConnectParams) { // not required
			return nil
		}

		if err := m.NosqlConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateNosqlRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NosqlRecoverJobParams != nil {

		if swag.IsZero(m.NosqlRecoverJobParams) { // not required
			return nil
		}

		if err := m.NosqlRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nosqlRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nosqlRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateParentSourceConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentSourceConnectionParams != nil {

		if swag.IsZero(m.ParentSourceConnectionParams) { // not required
			return nil
		}

		if err := m.ParentSourceConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentSourceConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentSourceConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidatePowerStateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerStateConfig != nil {

		if swag.IsZero(m.PowerStateConfig) { // not required
			return nil
		}

		if err := m.PowerStateConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerStateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerStateConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRenameRestoredObjectParam(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredObjectParam != nil {

		if swag.IsZero(m.RenameRestoredObjectParam) { // not required
			return nil
		}

		if err := m.RenameRestoredObjectParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParam")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRenameRestoredVappParam(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredVappParam != nil {

		if swag.IsZero(m.RenameRestoredVappParam) { // not required
			return nil
		}

		if err := m.RenameRestoredVappParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredVappParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredVappParam")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreAcropolisVmsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreAcropolisVmsParams != nil {

		if swag.IsZero(m.RestoreAcropolisVmsParams) { // not required
			return nil
		}

		if err := m.RestoreAcropolisVmsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAcropolisVmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAcropolisVmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreGroupsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreGroupsParams != nil {

		if swag.IsZero(m.RestoreGroupsParams) { // not required
			return nil
		}

		if err := m.RestoreGroupsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreGroupsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreGroupsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreJobUID(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreJobUID != nil {

		if swag.IsZero(m.RestoreJobUID) { // not required
			return nil
		}

		if err := m.RestoreJobUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreJobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreJobUid")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreKubernetesNamespacesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreKubernetesNamespacesParams != nil {

		if swag.IsZero(m.RestoreKubernetesNamespacesParams) { // not required
			return nil
		}

		if err := m.RestoreKubernetesNamespacesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreKubernetesNamespacesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreKubernetesNamespacesParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreKvmVmsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreKvmVmsParams != nil {

		if swag.IsZero(m.RestoreKvmVmsParams) { // not required
			return nil
		}

		if err := m.RestoreKvmVmsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreKvmVmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreKvmVmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreM365CsmParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreM365CsmParams != nil {

		if swag.IsZero(m.RestoreM365CsmParams) { // not required
			return nil
		}

		if err := m.RestoreM365CsmParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreM365CsmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreM365CsmParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreObjectCustomizations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestoreObjectCustomizations); i++ {

		if m.RestoreObjectCustomizations[i] != nil {

			if swag.IsZero(m.RestoreObjectCustomizations[i]) { // not required
				return nil
			}

			if err := m.RestoreObjectCustomizations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreObjectCustomizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreObjectCustomizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreParentSource(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreParentSource != nil {

		if swag.IsZero(m.RestoreParentSource) { // not required
			return nil
		}

		if err := m.RestoreParentSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreParentSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreParentSource")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestorePublicFoldersParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestorePublicFoldersParams != nil {

		if swag.IsZero(m.RestorePublicFoldersParams) { // not required
			return nil
		}

		if err := m.RestorePublicFoldersParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restorePublicFoldersParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restorePublicFoldersParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreS3Params(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreS3Params != nil {

		if swag.IsZero(m.RestoreS3Params) { // not required
			return nil
		}

		if err := m.RestoreS3Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreS3Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreS3Params")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreSiteParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreSiteParams != nil {

		if swag.IsZero(m.RestoreSiteParams) { // not required
			return nil
		}

		if err := m.RestoreSiteParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreSiteParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreSiteParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreTaskStateProtoTmpl(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreTaskStateProtoTmpl != nil {

		if swag.IsZero(m.RestoreTaskStateProtoTmpl) { // not required
			return nil
		}

		if err := m.RestoreTaskStateProtoTmpl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreTaskStateProtoTmpl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreTaskStateProtoTmpl")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreTaskVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestoreTaskVec); i++ {

		if m.RestoreTaskVec[i] != nil {

			if swag.IsZero(m.RestoreTaskVec[i]) { // not required
				return nil
			}

			if err := m.RestoreTaskVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreTaskVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreTaskVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreTeamsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreTeamsParams != nil {

		if swag.IsZero(m.RestoreTeamsParams) { // not required
			return nil
		}

		if err := m.RestoreTeamsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreTeamsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreTeamsParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoreVmwareVMParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreVmwareVMParams != nil {

		if swag.IsZero(m.RestoreVmwareVMParams) { // not required
			return nil
		}

		if err := m.RestoreVmwareVMParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVmwareVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVmwareVmParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateRestoredObjectsNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredObjectsNetworkConfig != nil {

		if swag.IsZero(m.RestoredObjectsNetworkConfig) { // not required
			return nil
		}

		if err := m.RestoredObjectsNetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredObjectsNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredObjectsNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateUdaRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaRecoverJobParams != nil {

		if swag.IsZero(m.UdaRecoverJobParams) { // not required
			return nil
		}

		if err := m.UdaRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateUserInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.UserInfo != nil {

		if swag.IsZero(m.UserInfo) { // not required
			return nil
		}

		if err := m.UserInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateVcdConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdConfig != nil {

		if swag.IsZero(m.VcdConfig) { // not required
			return nil
		}

		if err := m.VcdConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfig")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateViewParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewParams != nil {

		if swag.IsZero(m.ViewParams) { // not required
			return nil
		}

		if err := m.ViewParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

func (m *PerformRestoreJobStateProto) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Warnings); i++ {

		if m.Warnings[i] != nil {

			if swag.IsZero(m.Warnings[i]) { // not required
				return nil
			}

			if err := m.Warnings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformRestoreJobStateProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformRestoreJobStateProto) UnmarshalBinary(b []byte) error {
	var res PerformRestoreJobStateProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
