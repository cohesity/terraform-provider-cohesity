// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TaskEvent Task Event.
//
// Specifies events that clients can attach to a task.
//
// swagger:model TaskEvent
type TaskEvent struct {

	// Specifies the message associated with an event.
	EventMessage *string `json:"eventMessage,omitempty"`

	// Specifies the completion percentage of the task attached to this event.
	PercentFinished *float32 `json:"percentFinished,omitempty"`

	// Specifies the amount of work remaining for the task attached to this event.
	RemainingWorkCount *int64 `json:"remainingWorkCount,omitempty"`

	// Specifies the Unix timestamp that the event occurred.
	TimestampSeconds *int64 `json:"timestampSeconds,omitempty"`
}

// Validate validates this task event
func (m *TaskEvent) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this task event based on context it is used
func (m *TaskEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskEvent) UnmarshalBinary(b []byte) error {
	var res TaskEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
