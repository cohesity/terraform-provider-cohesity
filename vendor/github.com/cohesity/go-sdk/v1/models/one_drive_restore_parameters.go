// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OneDriveRestoreParameters OneDrive Restore Parameters.
//
// Specifies information needed for recovering Drive(s) & Drive items.
//
// swagger:model OneDriveRestoreParameters
type OneDriveRestoreParameters struct {

	// Specifies the list of Drive owners which are to be restored along with the
	// details of their drives.
	DriveOwnerList []*OneDriveOwner `json:"driveOwnerList"`

	// Specifies whether the objects are to be restored to the original drive.
	RestoreToOriginalDrive *bool `json:"restoreToOriginalDrive,omitempty"`

	// Specifies the Drive Id of the target user where the OneDrive items are to
	// be recovered.
	TargetDriveID *string `json:"targetDriveId,omitempty"`

	// Specifies the target folder path within the drive where recovery has to be
	// done.
	TargetFolderPath *string `json:"targetFolderPath,omitempty"`

	// Specifies the target user where the recovery of the entire OneDrive or the
	// OneDrive items is to be done.
	TargetUser *ProtectionSource `json:"targetUser,omitempty"`
}

// Validate validates this one drive restore parameters
func (m *OneDriveRestoreParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDriveOwnerList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OneDriveRestoreParameters) validateDriveOwnerList(formats strfmt.Registry) error {
	if swag.IsZero(m.DriveOwnerList) { // not required
		return nil
	}

	for i := 0; i < len(m.DriveOwnerList); i++ {
		if swag.IsZero(m.DriveOwnerList[i]) { // not required
			continue
		}

		if m.DriveOwnerList[i] != nil {
			if err := m.DriveOwnerList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("driveOwnerList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("driveOwnerList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OneDriveRestoreParameters) validateTargetUser(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetUser) { // not required
		return nil
	}

	if m.TargetUser != nil {
		if err := m.TargetUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetUser")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this one drive restore parameters based on the context it is used
func (m *OneDriveRestoreParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDriveOwnerList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OneDriveRestoreParameters) contextValidateDriveOwnerList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DriveOwnerList); i++ {

		if m.DriveOwnerList[i] != nil {

			if swag.IsZero(m.DriveOwnerList[i]) { // not required
				return nil
			}

			if err := m.DriveOwnerList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("driveOwnerList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("driveOwnerList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OneDriveRestoreParameters) contextValidateTargetUser(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetUser != nil {

		if swag.IsZero(m.TargetUser) { // not required
			return nil
		}

		if err := m.TargetUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetUser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OneDriveRestoreParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OneDriveRestoreParameters) UnmarshalBinary(b []byte) error {
	var res OneDriveRestoreParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
