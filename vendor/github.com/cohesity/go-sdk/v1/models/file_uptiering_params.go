// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FileUptieringParams File Uptiering Parameters for NAS migration.
//
// swagger:model FileUptieringParams
type FileUptieringParams struct {

	// If enabled, audit log the files which are uptiered.
	EnableAuditLogging *bool `json:"enableAuditLogging,omitempty"`

	// File uptier policy based on file access/modify time.
	FileSelectPolicy *int32 `json:"fileSelectPolicy,omitempty"`

	// Gives the size criteria to be used for selecting the files to be uptiered.
	// The hot files, which are greater or smaller than file_size, are uptiered.
	FileSize *int64 `json:"fileSize,omitempty"`

	// File size policy for selecting files to uptier.
	FileSizePolicy *int32 `json:"fileSizePolicy,omitempty"`

	// Identifies the hot files in the view. Files which are accessed
	// num_file_access times in hot_file_window msecs, are uptiered. It is only
	// applicable when file_select_policy is kLastAccessed and num_file_access is
	// greater than 1.
	HotFileWindow *int64 `json:"hotFileWindow,omitempty"`

	// Mount path where the Cohesity target view is mounted on NFS clients while
	// migrating the data.
	NfsMountPath *string `json:"nfsMountPath,omitempty"`

	// Number of times file must be accessed within hot_file_window in order to
	// qualify for uptiering. Applicable only when file_select_policy is
	// kLastAccessed.
	NumFileAccess *uint32 `json:"numFileAccess,omitempty"`

	// The object's entity id to SourceViewData map from which the data will be
	// uptieried.
	SourceViewMap interface{} `json:"sourceViewMap,omitempty"`

	// The source view name from which the data will be uptiered.
	SourceViewName *string `json:"sourceViewName,omitempty"`

	// If set, all files in the view will be uptiered regardless of
	// file_select_policy, num_file_access, hot_file_window, file_size
	// constraints.
	UptierAllFiles *bool `json:"uptierAllFiles,omitempty"`
}

// Validate validates this file uptiering params
func (m *FileUptieringParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this file uptiering params based on context it is used
func (m *FileUptieringParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FileUptieringParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileUptieringParams) UnmarshalBinary(b []byte) error {
	var res FileUptieringParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
