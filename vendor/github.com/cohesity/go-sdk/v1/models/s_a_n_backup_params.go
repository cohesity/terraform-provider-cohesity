// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SANBackupParams This message contains additional params for SAN backup job.
//
// swagger:model SANBackupParams
type SANBackupParams struct {

	// This field indicates whether to perform volume diff query for Nimble
	// volume backups sequentially across various protected volumes.
	NimbleSequentialVolDiffQuery *bool `json:"nimbleSequentialVolDiffQuery,omitempty"`

	// This field stores the intent to persist changed areas info during the
	// backup task.
	PreserveChangedAreasEnabled *bool `json:"preserveChangedAreasEnabled,omitempty"`

	// This field indicates whether to perform volume diff query for Pure volume
	// backups sequentially across various protected volumes.
	PureSequentialVolDiffQuery *bool `json:"pureSequentialVolDiffQuery,omitempty"`

	// Other external resources which may be needed for san backup workflow.
	SanExternalResource *SanExternalResource `json:"sanExternalResource,omitempty"`

	// Time to retain primary SAN snapshot if needed. Currently IBM Flashsystem
	// env is using this field to set safeguarded snapshot retention time.
	SnapshotRetentionTimeUsecs *int64 `json:"snapshotRetentionTimeUsecs,omitempty"`

	// This field indicates tranport mode for the backup.
	TransportMode *int32 `json:"transportMode,omitempty"`

	// This field indicates whether to create snapshot with some additional array
	// sepcific security. Currently this field is used for only IBM FlashSystem.
	UseSecuredSnapshot *bool `json:"useSecuredSnapshot,omitempty"`
}

// Validate validates this s a n backup params
func (m *SANBackupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSanExternalResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SANBackupParams) validateSanExternalResource(formats strfmt.Registry) error {
	if swag.IsZero(m.SanExternalResource) { // not required
		return nil
	}

	if m.SanExternalResource != nil {
		if err := m.SanExternalResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sanExternalResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sanExternalResource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this s a n backup params based on the context it is used
func (m *SANBackupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSanExternalResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SANBackupParams) contextValidateSanExternalResource(ctx context.Context, formats strfmt.Registry) error {

	if m.SanExternalResource != nil {

		if swag.IsZero(m.SanExternalResource) { // not required
			return nil
		}

		if err := m.SanExternalResource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sanExternalResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sanExternalResource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SANBackupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SANBackupParams) UnmarshalBinary(b []byte) error {
	var res SANBackupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
