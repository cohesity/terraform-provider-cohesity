// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateHostSettingsCheckResult Define the result of performing a single check.
//
// swagger:model PrivateHostSettingsCheckResult
type PrivateHostSettingsCheckResult struct {

	// The type of environment the checks pertains to.
	EnvType *int32 `json:"envType,omitempty"`

	// The check type for which this result corresponds.
	HostSettingsCheck *HostSettingsCheck `json:"hostSettingsCheck,omitempty"`

	// Detailed information about individual checks
	InfoMessagesVec []string `json:"infoMessagesVec"`

	// Indicates whether to indicate failed/passed/warning.
	ResultType *int32 `json:"resultType,omitempty"`

	// A descriptive message for failed/warning types. May also include a
	// step to take.
	UserMessage *string `json:"userMessage,omitempty"`
}

// Validate validates this private host settings check result
func (m *PrivateHostSettingsCheckResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostSettingsCheck(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateHostSettingsCheckResult) validateHostSettingsCheck(formats strfmt.Registry) error {
	if swag.IsZero(m.HostSettingsCheck) { // not required
		return nil
	}

	if m.HostSettingsCheck != nil {
		if err := m.HostSettingsCheck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostSettingsCheck")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostSettingsCheck")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private host settings check result based on the context it is used
func (m *PrivateHostSettingsCheckResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostSettingsCheck(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateHostSettingsCheckResult) contextValidateHostSettingsCheck(ctx context.Context, formats strfmt.Registry) error {

	if m.HostSettingsCheck != nil {

		if swag.IsZero(m.HostSettingsCheck) { // not required
			return nil
		}

		if err := m.HostSettingsCheck.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostSettingsCheck")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostSettingsCheck")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateHostSettingsCheckResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateHostSettingsCheckResult) UnmarshalBinary(b []byte) error {
	var res PrivateHostSettingsCheckResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
