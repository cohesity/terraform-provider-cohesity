// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IsilonProtectionSource Isilon Protection Source.
//
// Specifies a Protection Source in Isilon OneFs environment.
//
// swagger:model IsilonProtectionSource
type IsilonProtectionSource struct {

	// Specifies an access zone in an Isilon OneFs file system. This is set only
	// when the entity type is 'kZone'.
	AccessZone *IsilonAccessZone `json:"accessZone,omitempty"`

	// Specifies information of an Isilon OneFs Cluster. This is set only
	// when the entity type is 'kCluster'.
	Cluster *IsilonCluster `json:"cluster,omitempty"`

	// Specifies information about a mount point in an Isilon OneFs file system.
	// This is set only when the entity type is 'kMountPoint'.
	MountPoint *IsilonMountPoint `json:"mountPoint,omitempty"`

	// Specifies a unique name of the Protection Source.
	Name *string `json:"name,omitempty"`

	// Specifies the type of the entity in an Isilon OneFs file system
	// like 'kCluster', 'kZone', or, 'kMountPoint'.
	// 'kCluster' indicates an Isilon OneFs Cluster.
	// 'kZone' indicates an access zone in an Isilon OneFs Cluster.
	// 'kMountPoint' indicates a mount point exposed by an Isilon OneFs Cluster.
	// Enum: ["kCluster","kZone","kMountPoint"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this isilon protection source
func (m *IsilonProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IsilonProtectionSource) validateAccessZone(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessZone) { // not required
		return nil
	}

	if m.AccessZone != nil {
		if err := m.AccessZone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessZone")
			}
			return err
		}
	}

	return nil
}

func (m *IsilonProtectionSource) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *IsilonProtectionSource) validateMountPoint(formats strfmt.Registry) error {
	if swag.IsZero(m.MountPoint) { // not required
		return nil
	}

	if m.MountPoint != nil {
		if err := m.MountPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountPoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountPoint")
			}
			return err
		}
	}

	return nil
}

var isilonProtectionSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kZone","kMountPoint"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		isilonProtectionSourceTypeTypePropEnum = append(isilonProtectionSourceTypeTypePropEnum, v)
	}
}

const (

	// IsilonProtectionSourceTypeKCluster captures enum value "kCluster"
	IsilonProtectionSourceTypeKCluster string = "kCluster"

	// IsilonProtectionSourceTypeKZone captures enum value "kZone"
	IsilonProtectionSourceTypeKZone string = "kZone"

	// IsilonProtectionSourceTypeKMountPoint captures enum value "kMountPoint"
	IsilonProtectionSourceTypeKMountPoint string = "kMountPoint"
)

// prop value enum
func (m *IsilonProtectionSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, isilonProtectionSourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IsilonProtectionSource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this isilon protection source based on the context it is used
func (m *IsilonProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountPoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IsilonProtectionSource) contextValidateAccessZone(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessZone != nil {

		if swag.IsZero(m.AccessZone) { // not required
			return nil
		}

		if err := m.AccessZone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessZone")
			}
			return err
		}
	}

	return nil
}

func (m *IsilonProtectionSource) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {

		if swag.IsZero(m.Cluster) { // not required
			return nil
		}

		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *IsilonProtectionSource) contextValidateMountPoint(ctx context.Context, formats strfmt.Registry) error {

	if m.MountPoint != nil {

		if swag.IsZero(m.MountPoint) { // not required
			return nil
		}

		if err := m.MountPoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountPoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountPoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IsilonProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IsilonProtectionSource) UnmarshalBinary(b []byte) error {
	var res IsilonProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
