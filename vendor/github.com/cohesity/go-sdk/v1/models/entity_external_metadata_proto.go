// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntityExternalMetadataProto Message to store external metadata as part of EntityHierarchyProto.
// Adapters can add thier specific extensions.
//
// extension                   Location                                     No.
// =============================================================================
// azure_sql_entity_metadata    magneto/connectors/azure/azure.proto        100
//
// swagger:model EntityExternalMetadataProto
type EntityExternalMetadataProto struct {

	// Connector params required to connect to different type of environment.
	CredentialVec []*PrivateAppCredentials `json:"credentialVec"`

	// Connector params required to connect to the external entity if applicable.
	// Don't use it for AWS entity. It was only being used for AWS RDS Postgres
	// instances which has been converted to ChildType kRDSPostgres and added to
	// credential_vec, so add a new child type if required for new AWS entities.
	// It is also recommended to use credential_vec for other adapters as well.
	Credentials *PrivateCredentials `json:"credentials,omitempty"`

	// Information about maintenance mode, if applicable.
	// Maintenance mode is currently supported only for top-level registered
	// entities.
	MaintenanceModeConfig *MaintenanceModeConfigProto `json:"maintenanceModeConfig,omitempty"`

	// These params may be specified for uda entities.
	UdaParams *RegisteredEntityUdaParams `json:"udaParams,omitempty"`
}

// Validate validates this entity external metadata proto
func (m *EntityExternalMetadataProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceModeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityExternalMetadataProto) validateCredentialVec(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialVec) { // not required
		return nil
	}

	for i := 0; i < len(m.CredentialVec); i++ {
		if swag.IsZero(m.CredentialVec[i]) { // not required
			continue
		}

		if m.CredentialVec[i] != nil {
			if err := m.CredentialVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentialVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentialVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityExternalMetadataProto) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *EntityExternalMetadataProto) validateMaintenanceModeConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MaintenanceModeConfig) { // not required
		return nil
	}

	if m.MaintenanceModeConfig != nil {
		if err := m.MaintenanceModeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenanceModeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenanceModeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *EntityExternalMetadataProto) validateUdaParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaParams) { // not required
		return nil
	}

	if m.UdaParams != nil {
		if err := m.UdaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this entity external metadata proto based on the context it is used
func (m *EntityExternalMetadataProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentialVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaintenanceModeConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityExternalMetadataProto) contextValidateCredentialVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CredentialVec); i++ {

		if m.CredentialVec[i] != nil {

			if swag.IsZero(m.CredentialVec[i]) { // not required
				return nil
			}

			if err := m.CredentialVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentialVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentialVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityExternalMetadataProto) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *EntityExternalMetadataProto) contextValidateMaintenanceModeConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MaintenanceModeConfig != nil {

		if swag.IsZero(m.MaintenanceModeConfig) { // not required
			return nil
		}

		if err := m.MaintenanceModeConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenanceModeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenanceModeConfig")
			}
			return err
		}
	}

	return nil
}

func (m *EntityExternalMetadataProto) contextValidateUdaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaParams != nil {

		if swag.IsZero(m.UdaParams) { // not required
			return nil
		}

		if err := m.UdaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityExternalMetadataProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityExternalMetadataProto) UnmarshalBinary(b []byte) error {
	var res EntityExternalMetadataProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
