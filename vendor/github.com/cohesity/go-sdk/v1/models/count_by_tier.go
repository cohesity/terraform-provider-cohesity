// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CountByTier Disk count By Tier.
//
// CountByTier provides the disk count of each storage tier.
//
// swagger:model CountByTier
type CountByTier struct {

	// DiskCount is the disk number of the storage tier.
	DiskCount *int64 `json:"diskCount,omitempty"`

	// StorageTier is the type of StorageTier.
	// StorageTierType represents the various values for the Storage Tier.
	// 'PCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'SATA-SSD' indicates storage tier type of SATA Solid State Drive.
	// 'SATA-HDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'CLOUD' indicates storage tier type of Cloud.
	// Enum: ["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]
	StorageTier *string `json:"storageTier,omitempty"`
}

// Validate validates this count by tier
func (m *CountByTier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var countByTierTypeStorageTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		countByTierTypeStorageTierPropEnum = append(countByTierTypeStorageTierPropEnum, v)
	}
}

const (

	// CountByTierStorageTierPCIeSSD captures enum value "PCIeSSD"
	CountByTierStorageTierPCIeSSD string = "PCIeSSD"

	// CountByTierStorageTierSATADashSSD captures enum value "SATA-SSD"
	CountByTierStorageTierSATADashSSD string = "SATA-SSD"

	// CountByTierStorageTierSATADashHDD captures enum value "SATA-HDD"
	CountByTierStorageTierSATADashHDD string = "SATA-HDD"

	// CountByTierStorageTierCLOUD captures enum value "CLOUD"
	CountByTierStorageTierCLOUD string = "CLOUD"
)

// prop value enum
func (m *CountByTier) validateStorageTierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, countByTierTypeStorageTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CountByTier) validateStorageTier(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageTier) { // not required
		return nil
	}

	// value enum
	if err := m.validateStorageTierEnum("storageTier", "body", *m.StorageTier); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this count by tier based on context it is used
func (m *CountByTier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CountByTier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CountByTier) UnmarshalBinary(b []byte) error {
	var res CountByTier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
