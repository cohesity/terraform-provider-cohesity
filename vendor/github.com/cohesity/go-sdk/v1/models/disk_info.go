// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DiskInfo Message representing information related to a disk attached to GCP instance.
//
// swagger:model DiskInfo
type DiskInfo struct {

	// Name of the device. Eg - /dev/xvde.
	DeviceName *string `json:"deviceName,omitempty"`

	// Name of the disk. Eg - instance1-disk.
	DiskName *string `json:"diskName,omitempty"`

	// Type of the disk. Eg - Balanced persistent disk etc.
	DiskType *string `json:"diskType,omitempty"`

	// ID of the disk.
	ID *int64 `json:"id,omitempty"`

	// True if the disk is attached as root device for a GCP instance,
	// else default is false.
	IsBootable *bool `json:"isBootable,omitempty"`

	// label vec
	LabelVec []*DiskInfoLabel `json:"labelVec"`

	// Size of the disk in bytes.
	SizeGb *int64 `json:"sizeGb,omitempty"`
}

// Validate validates this disk info
func (m *DiskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskInfo) validateLabelVec(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelVec) { // not required
		return nil
	}

	for i := 0; i < len(m.LabelVec); i++ {
		if swag.IsZero(m.LabelVec[i]) { // not required
			continue
		}

		if m.LabelVec[i] != nil {
			if err := m.LabelVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this disk info based on the context it is used
func (m *DiskInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskInfo) contextValidateLabelVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelVec); i++ {

		if m.LabelVec[i] != nil {

			if swag.IsZero(m.LabelVec[i]) { // not required
				return nil
			}

			if err := m.LabelVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskInfo) UnmarshalBinary(b []byte) error {
	var res DiskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
