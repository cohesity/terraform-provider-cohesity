// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PodInfoPodSpecVolumeInfoCSI Represents storage that is managed by an external CSI volume driver.
//
// swagger:model PodInfo_PodSpec_VolumeInfo_CSI
type PodInfoPodSpecVolumeInfoCSI struct {

	// controller expand secret ref
	ControllerExpandSecretRef *ObjectReference `json:"controllerExpandSecretRef,omitempty"`

	// controller publish secret ref
	ControllerPublishSecretRef *ObjectReference `json:"controllerPublishSecretRef,omitempty"`

	// driver
	Driver *string `json:"driver,omitempty"`

	// fs type
	FsType *string `json:"fsType,omitempty"`

	// node publish secret ref
	NodePublishSecretRef *ObjectReference `json:"nodePublishSecretRef,omitempty"`

	// node stage secret ref
	NodeStageSecretRef *ObjectReference `json:"nodeStageSecretRef,omitempty"`

	// read only
	ReadOnly *bool `json:"readOnly,omitempty"`

	// volume attributes
	VolumeAttributes map[string]string `json:"volumeAttributes,omitempty"`

	// volume handle
	VolumeHandle *string `json:"volumeHandle,omitempty"`
}

// Validate validates this pod info pod spec volume info c s i
func (m *PodInfoPodSpecVolumeInfoCSI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllerExpandSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerPublishSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodePublishSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeStageSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodInfoPodSpecVolumeInfoCSI) validateControllerExpandSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerExpandSecretRef) { // not required
		return nil
	}

	if m.ControllerExpandSecretRef != nil {
		if err := m.ControllerExpandSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerExpandSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerExpandSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfoCSI) validateControllerPublishSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerPublishSecretRef) { // not required
		return nil
	}

	if m.ControllerPublishSecretRef != nil {
		if err := m.ControllerPublishSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerPublishSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerPublishSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfoCSI) validateNodePublishSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.NodePublishSecretRef) { // not required
		return nil
	}

	if m.NodePublishSecretRef != nil {
		if err := m.NodePublishSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodePublishSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodePublishSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfoCSI) validateNodeStageSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeStageSecretRef) { // not required
		return nil
	}

	if m.NodeStageSecretRef != nil {
		if err := m.NodeStageSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeStageSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeStageSecretRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pod info pod spec volume info c s i based on the context it is used
func (m *PodInfoPodSpecVolumeInfoCSI) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControllerExpandSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerPublishSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodePublishSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeStageSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodInfoPodSpecVolumeInfoCSI) contextValidateControllerExpandSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ControllerExpandSecretRef != nil {

		if swag.IsZero(m.ControllerExpandSecretRef) { // not required
			return nil
		}

		if err := m.ControllerExpandSecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerExpandSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerExpandSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfoCSI) contextValidateControllerPublishSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ControllerPublishSecretRef != nil {

		if swag.IsZero(m.ControllerPublishSecretRef) { // not required
			return nil
		}

		if err := m.ControllerPublishSecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerPublishSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerPublishSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfoCSI) contextValidateNodePublishSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.NodePublishSecretRef != nil {

		if swag.IsZero(m.NodePublishSecretRef) { // not required
			return nil
		}

		if err := m.NodePublishSecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodePublishSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodePublishSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *PodInfoPodSpecVolumeInfoCSI) contextValidateNodeStageSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeStageSecretRef != nil {

		if swag.IsZero(m.NodeStageSecretRef) { // not required
			return nil
		}

		if err := m.NodeStageSecretRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeStageSecretRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeStageSecretRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodInfoPodSpecVolumeInfoCSI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodInfoPodSpecVolumeInfoCSI) UnmarshalBinary(b []byte) error {
	var res PodInfoPodSpecVolumeInfoCSI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
