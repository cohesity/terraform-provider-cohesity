// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateGcpEntity private gcp entity
//
// swagger:model PrivateGcpEntity
type PrivateGcpEntity struct {

	// Set only for BaaS. Represents a list of project ids. If set, only these
	// projects are added to the entity hierarchy.
	AllowedProjectIDVec []string `json:"allowedProjectIdVec"`

	// Set only for BaaS. Represents a list of regions. If set, only these
	// regions should be listed in the entity hierarchy on this cluster.
	// Typically this is the same region where the cluster is running.
	AllowedRegionVec []string `json:"allowedRegionVec"`

	// Information related to cluster. This is only valid for CE and NGCE
	// clusters. This is only populated for kIAMUser entity.
	ClusterNetworkInfo *FleetNetworkParamsNetworkParams `json:"clusterNetworkInfo,omitempty"`

	// Information common to all types of cloud entities.
	CommonInfo *EntityCommonInfo `json:"commonInfo,omitempty"`

	// List of disk attached to a GCP instance. This is populated only for
	// kInstanceType entity type.
	DiskInfoVec []*DiskInfo `json:"diskInfoVec"`

	// Information related to GCP fleets launched for various purposes. This
	// will only be set for kIAMUser entity.
	GcpFleetParams *GCPFleetParams `json:"gcpFleetParams,omitempty"`

	// Populated in entities of type kSubnet if the subnet is part of a Shared
	// VPC. This contains the ID of the host project the subnet belongs to.
	// Populated in entities of type kProject if the project is a service project
	// in a Shared VPC setup. This contains the ID of the host project it is
	// attached to.
	HostProjectID *string `json:"hostProjectId,omitempty"`

	// The host environment type. This is set for entities of type
	// kVirtualMachine.
	HostType *int32 `json:"hostType,omitempty"`

	// iam info
	IamInfo *EntityIAMInfo `json:"iamInfo,omitempty"`

	// List of metadata keys and values. This is set for entities of type
	// kVirtualMachine.
	MetadataVecDEPRECATED []*GCPAttributes `json:"metadataVec_DEPRECATED"`

	// List of network tags. This is set for entities of type kVirtualMachine.
	NetworkTagVecDEPRECATED []*GCPAttributes `json:"networkTagVec_DEPRECATED"`

	// The client email of GCP service account is used as owner id.
	OwnerID *string `json:"ownerId,omitempty"`

	// Private ip address. This is set for entities of type kVirtualMachine.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty"`

	// For entities of type kVirtualMachine this contains the id of the project
	// the virtual machine belongs to. For entities of type kSubnet, this
	// contains the id of project the subnet is available to. For entities of the
	// type kVPCConnector this contains the id of the project the VPC connector
	// belongs to.
	ProjectID *string `json:"projectId,omitempty"`

	// For entities of type kVirtualMachine this contains the region
	// the virtual machine belongs to.
	// For the kVPCConnectorEntity this contains the region the VPC connector
	// belongs to.
	Region *string `json:"region,omitempty"`

	// This is set for entities of type kVirtualMachine. Contains a list of all
	// metadata present on the instance - network tags, labels, and custom
	// metadata.
	TagAttributesVec []*GCPAttributes `json:"tagAttributesVec"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// In the kSubnet entity this field contains the VPC network the subnet
	// belongs to.
	// In the kSubnet, kVirtualMachine and kVPCConnector entities this field
	// contains the name of VPC network the entity resource belongs to.
	VpcNetwork *string `json:"vpcNetwork,omitempty"`

	// Subnetwork to be used for deploying proxy VMs. Set only for the service
	// account entity
	VpcSubnetwork *string `json:"vpcSubnetwork,omitempty"`

	// For entities of type kVirtualMachine this contains the zone the
	// virtual machine belongs to.
	Zone *string `json:"zone,omitempty"`
}

// Validate validates this private gcp entity
func (m *PrivateGcpEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterNetworkInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpFleetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadataVecDEPRECATED(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkTagVecDEPRECATED(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagAttributesVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateGcpEntity) validateClusterNetworkInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterNetworkInfo) { // not required
		return nil
	}

	if m.ClusterNetworkInfo != nil {
		if err := m.ClusterNetworkInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterNetworkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterNetworkInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGcpEntity) validateCommonInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CommonInfo) { // not required
		return nil
	}

	if m.CommonInfo != nil {
		if err := m.CommonInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGcpEntity) validateDiskInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskInfoVec); i++ {
		if swag.IsZero(m.DiskInfoVec[i]) { // not required
			continue
		}

		if m.DiskInfoVec[i] != nil {
			if err := m.DiskInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateGcpEntity) validateGcpFleetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpFleetParams) { // not required
		return nil
	}

	if m.GcpFleetParams != nil {
		if err := m.GcpFleetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGcpEntity) validateIamInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.IamInfo) { // not required
		return nil
	}

	if m.IamInfo != nil {
		if err := m.IamInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGcpEntity) validateMetadataVecDEPRECATED(formats strfmt.Registry) error {
	if swag.IsZero(m.MetadataVecDEPRECATED) { // not required
		return nil
	}

	for i := 0; i < len(m.MetadataVecDEPRECATED); i++ {
		if swag.IsZero(m.MetadataVecDEPRECATED[i]) { // not required
			continue
		}

		if m.MetadataVecDEPRECATED[i] != nil {
			if err := m.MetadataVecDEPRECATED[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadataVec_DEPRECATED" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metadataVec_DEPRECATED" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateGcpEntity) validateNetworkTagVecDEPRECATED(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkTagVecDEPRECATED) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkTagVecDEPRECATED); i++ {
		if swag.IsZero(m.NetworkTagVecDEPRECATED[i]) { // not required
			continue
		}

		if m.NetworkTagVecDEPRECATED[i] != nil {
			if err := m.NetworkTagVecDEPRECATED[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkTagVec_DEPRECATED" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkTagVec_DEPRECATED" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateGcpEntity) validateTagAttributesVec(formats strfmt.Registry) error {
	if swag.IsZero(m.TagAttributesVec) { // not required
		return nil
	}

	for i := 0; i < len(m.TagAttributesVec); i++ {
		if swag.IsZero(m.TagAttributesVec[i]) { // not required
			continue
		}

		if m.TagAttributesVec[i] != nil {
			if err := m.TagAttributesVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this private gcp entity based on the context it is used
func (m *PrivateGcpEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterNetworkInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommonInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiskInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpFleetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIamInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadataVecDEPRECATED(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkTagVecDEPRECATED(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagAttributesVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateGcpEntity) contextValidateClusterNetworkInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterNetworkInfo != nil {

		if swag.IsZero(m.ClusterNetworkInfo) { // not required
			return nil
		}

		if err := m.ClusterNetworkInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterNetworkInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterNetworkInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGcpEntity) contextValidateCommonInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CommonInfo != nil {

		if swag.IsZero(m.CommonInfo) { // not required
			return nil
		}

		if err := m.CommonInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGcpEntity) contextValidateDiskInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiskInfoVec); i++ {

		if m.DiskInfoVec[i] != nil {

			if swag.IsZero(m.DiskInfoVec[i]) { // not required
				return nil
			}

			if err := m.DiskInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateGcpEntity) contextValidateGcpFleetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpFleetParams != nil {

		if swag.IsZero(m.GcpFleetParams) { // not required
			return nil
		}

		if err := m.GcpFleetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpFleetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpFleetParams")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGcpEntity) contextValidateIamInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.IamInfo != nil {

		if swag.IsZero(m.IamInfo) { // not required
			return nil
		}

		if err := m.IamInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGcpEntity) contextValidateMetadataVecDEPRECATED(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MetadataVecDEPRECATED); i++ {

		if m.MetadataVecDEPRECATED[i] != nil {

			if swag.IsZero(m.MetadataVecDEPRECATED[i]) { // not required
				return nil
			}

			if err := m.MetadataVecDEPRECATED[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadataVec_DEPRECATED" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metadataVec_DEPRECATED" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateGcpEntity) contextValidateNetworkTagVecDEPRECATED(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkTagVecDEPRECATED); i++ {

		if m.NetworkTagVecDEPRECATED[i] != nil {

			if swag.IsZero(m.NetworkTagVecDEPRECATED[i]) { // not required
				return nil
			}

			if err := m.NetworkTagVecDEPRECATED[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkTagVec_DEPRECATED" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkTagVec_DEPRECATED" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrivateGcpEntity) contextValidateTagAttributesVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagAttributesVec); i++ {

		if m.TagAttributesVec[i] != nil {

			if swag.IsZero(m.TagAttributesVec[i]) { // not required
				return nil
			}

			if err := m.TagAttributesVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagAttributesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateGcpEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateGcpEntity) UnmarshalBinary(b []byte) error {
	var res PrivateGcpEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
