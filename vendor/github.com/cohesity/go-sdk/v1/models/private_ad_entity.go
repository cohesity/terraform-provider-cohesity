// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateAdEntity private ad entity
//
// swagger:model PrivateAdEntity
type PrivateAdEntity struct {

	// Represents an AD domain controller.
	Dc *ADDomainController `json:"dc,omitempty"`

	// Domain associated with this domain controller. This is an echo of
	// dc.domain.id.name. Added part of Entity to make logic for calculation of
	// full entity name of the domain controller simpler. Full entity name of an
	// AD entity is domain_name/name.
	// Example of a domain name: tme.local
	DomainName *string `json:"domainName,omitempty"`

	// A human readable name for the object.
	Name *string `json:"name,omitempty"`

	// The entity id of the owner entity.
	OwnerID *int64 `json:"ownerId,omitempty"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// The UUID of the object.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this private ad entity
func (m *PrivateAdEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAdEntity) validateDc(formats strfmt.Registry) error {
	if swag.IsZero(m.Dc) { // not required
		return nil
	}

	if m.Dc != nil {
		if err := m.Dc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dc")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private ad entity based on the context it is used
func (m *PrivateAdEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAdEntity) contextValidateDc(ctx context.Context, formats strfmt.Registry) error {

	if m.Dc != nil {

		if swag.IsZero(m.Dc) { // not required
			return nil
		}

		if err := m.Dc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateAdEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateAdEntity) UnmarshalBinary(b []byte) error {
	var res PrivateAdEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
