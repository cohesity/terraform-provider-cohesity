// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SapHanaProtectionSource Specifies an Object representing SAP HANA source.
//
// swagger:model SapHanaProtectionSource
type SapHanaProtectionSource struct {

	// Information of a SAP HANA cluster, only valid for an entity
	// of type kCluster.
	ClusterInfo *SapHanaCluster `json:"clusterInfo,omitempty"`

	// Specifies the instance name of the SAP Hana entity.
	Name *string `json:"name,omitempty"`

	// Information of a SAP HANA object, only valid for an entity of
	// type kObject.
	ObjectInfo *SapHanaObject `json:"objectInfo,omitempty"`

	// Specifies the type of the managed Object in SAP HANA
	// Protection Source.
	Type *int32 `json:"type,omitempty"`

	// Specifies the UUID for the SAP Hana entity.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this sap hana protection source
func (m *SapHanaProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SapHanaProtectionSource) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SapHanaProtectionSource) validateObjectInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectInfo) { // not required
		return nil
	}

	if m.ObjectInfo != nil {
		if err := m.ObjectInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sap hana protection source based on the context it is used
func (m *SapHanaProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SapHanaProtectionSource) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {

		if swag.IsZero(m.ClusterInfo) { // not required
			return nil
		}

		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SapHanaProtectionSource) contextValidateObjectInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectInfo != nil {

		if swag.IsZero(m.ObjectInfo) { // not required
			return nil
		}

		if err := m.ObjectInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SapHanaProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SapHanaProtectionSource) UnmarshalBinary(b []byte) error {
	var res SapHanaProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
