// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExchangeServerDAGNode Represents an Exchange server DAG Node. Database copies can exist
// independently on each node on non-shared storage. Normally a file share acts
// as witness for DAG. A failover cluster is created behind the DAG to handle
// database switchover or node failover.
//
// swagger:model ExchangeServerDAGNode
type ExchangeServerDAGNode struct {

	// This member server is marked for deletion in AD. At some time in future,
	// this member server will be removed.
	Deleted *bool `json:"deleted,omitempty"`

	// This member server is in DAG maintenance or failover cluster maintenance
	// mode. They should not be included in backup.
	Maintenance *bool `json:"maintenance,omitempty"`

	// This member server is operational and healthy. If false, it should not be
	// included in backup.
	Operational *bool `json:"operational,omitempty"`

	// Array of other Exchange server identifiers in the DAG.
	OtherDagServerIDVec []*ExchangeServerIdentity `json:"otherDagServerIdVec"`

	// This member server is the primary active manager (PAM) role owner in DAG.
	// It coordinates DB/server switchover and failover. It also holds the
	// cluster quorum resource.
	Primaryactivemanager *bool `json:"primaryactivemanager,omitempty"`

	// DAG node information.
	Server *ExchangeServerNode `json:"server,omitempty"`
}

// Validate validates this exchange server d a g node
func (m *ExchangeServerDAGNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOtherDagServerIDVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeServerDAGNode) validateOtherDagServerIDVec(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherDagServerIDVec) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherDagServerIDVec); i++ {
		if swag.IsZero(m.OtherDagServerIDVec[i]) { // not required
			continue
		}

		if m.OtherDagServerIDVec[i] != nil {
			if err := m.OtherDagServerIDVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("otherDagServerIdVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("otherDagServerIdVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExchangeServerDAGNode) validateServer(formats strfmt.Registry) error {
	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exchange server d a g node based on the context it is used
func (m *ExchangeServerDAGNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherDagServerIDVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeServerDAGNode) contextValidateOtherDagServerIDVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherDagServerIDVec); i++ {

		if m.OtherDagServerIDVec[i] != nil {

			if swag.IsZero(m.OtherDagServerIDVec[i]) { // not required
				return nil
			}

			if err := m.OtherDagServerIDVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("otherDagServerIdVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("otherDagServerIdVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExchangeServerDAGNode) contextValidateServer(ctx context.Context, formats strfmt.Registry) error {

	if m.Server != nil {

		if swag.IsZero(m.Server) { // not required
			return nil
		}

		if err := m.Server.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeServerDAGNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeServerDAGNode) UnmarshalBinary(b []byte) error {
	var res ExchangeServerDAGNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
