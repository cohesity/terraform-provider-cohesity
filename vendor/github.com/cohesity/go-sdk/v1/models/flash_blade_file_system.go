// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlashBladeFileSystem Flash Blade File System.
//
// Specifies information about a Flash Blade File System in a Storage Array.
//
// swagger:model FlashBladeFileSystem
type FlashBladeFileSystem struct {

	// Specifies whether the .snapshot directory exists on the file system.
	// Backup is enabled only if the directory exists.
	BackupEnabled *bool `json:"backupEnabled,omitempty"`

	// Specifies the time when the filesystem was created in Unix epoch time
	// in milliseconds.
	CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

	// Specifies the total capacity in bytes of the file system.
	LogicalCapacityBytes *int64 `json:"logicalCapacityBytes,omitempty"`

	// Specifies the size of logical data currently represented on the
	// file system in bytes.
	LogicalUsedBytes *int64 `json:"logicalUsedBytes,omitempty"`

	// Specifies information about an NFS export. This field is set if the file
	// system supports protocol type 'kNfs'.
	NfsInfo *FlashBladeNfsInfo `json:"nfsInfo,omitempty"`

	// Specifies the size of physical data currently consumed by the file
	// system. This includes the space used for the snapshots.
	PhysicalUsedBytes *int64 `json:"physicalUsedBytes,omitempty"`

	// List of Protocols.
	//
	// Specifies the list of protocols enabled on the file system.
	// 'kNfs' indicates NFS exports are supported on Pure FlashBlade File System.
	// 'kCifs2' indicates CIFS/SMB Shares are supported on Pure FlashBlade File
	// System.
	// 'kHttp' indicates object protocol over HTTP and HTTPS are supported.
	Protocols []string `json:"protocols"`

	// Specifies the size of physical data consumed by the file system
	// itself not including the size of the snapshots.
	UniqueUsedBytes *int64 `json:"uniqueUsedBytes,omitempty"`
}

// Validate validates this flash blade file system
func (m *FlashBladeFileSystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNfsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocols(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlashBladeFileSystem) validateNfsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsInfo) { // not required
		return nil
	}

	if m.NfsInfo != nil {
		if err := m.NfsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfsInfo")
			}
			return err
		}
	}

	return nil
}

var flashBladeFileSystemProtocolsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kCifs2","kHttp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flashBladeFileSystemProtocolsItemsEnum = append(flashBladeFileSystemProtocolsItemsEnum, v)
	}
}

func (m *FlashBladeFileSystem) validateProtocolsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flashBladeFileSystemProtocolsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FlashBladeFileSystem) validateProtocols(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocols) { // not required
		return nil
	}

	for i := 0; i < len(m.Protocols); i++ {

		// value enum
		if err := m.validateProtocolsItemsEnum("protocols"+"."+strconv.Itoa(i), "body", m.Protocols[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this flash blade file system based on the context it is used
func (m *FlashBladeFileSystem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNfsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlashBladeFileSystem) contextValidateNfsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.NfsInfo != nil {

		if swag.IsZero(m.NfsInfo) { // not required
			return nil
		}

		if err := m.NfsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfsInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlashBladeFileSystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlashBladeFileSystem) UnmarshalBinary(b []byte) error {
	var res FlashBladeFileSystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
