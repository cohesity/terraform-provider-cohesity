// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MongoDBConnectParams MongoDB Connect Params.
//
// Specifies an Object containing information about a registered mongodb
// source.
//
// swagger:model MongoDBConnectParams
type MongoDBConnectParams struct {

	// Specifies whether authentication is configured on this MongoDB cluster.
	// Specifies the type of an MongoDB source entity.
	// 'SCRAM'
	// 'LDAP'
	// 'NONE'
	// 'KERBEROS'
	// Enum: ["SCRAM","LDAP","NONE","KERBEROS"]
	AuthType *string `json:"authType,omitempty"`

	// Specifies the Authenticating Database for this MongoDB cluster.
	AuthenticatingDatabaseName *string `json:"authenticatingDatabaseName,omitempty"`

	// Specifies whether connection is allowed through SSL only in this cluster.
	RequiresSsl *bool `json:"requiresSsl,omitempty"`

	// MongoDB Secondary node tag. Required only if 'useSecondaryForBackup' is true.
	// The system will use this to identify the secondary nodes for reading backup data.
	SecondaryNodeTag *string `json:"secondaryNodeTag,omitempty"`

	// Specifies the seeds of this MongoDB Cluster.
	Seeds []string `json:"seeds"`

	// Set this to true if you want the system to peform backups from fixed nodes.
	UseFixedNodeForBackup *bool `json:"useFixedNodeForBackup,omitempty"`

	// Set this to true if you want the system to peform backups from secondary nodes.
	UseSecondaryForBackup *bool `json:"useSecondaryForBackup,omitempty"`
}

// Validate validates this mongo d b connect params
func (m *MongoDBConnectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mongoDBConnectParamsTypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SCRAM","LDAP","NONE","KERBEROS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mongoDBConnectParamsTypeAuthTypePropEnum = append(mongoDBConnectParamsTypeAuthTypePropEnum, v)
	}
}

const (

	// MongoDBConnectParamsAuthTypeSCRAM captures enum value "SCRAM"
	MongoDBConnectParamsAuthTypeSCRAM string = "SCRAM"

	// MongoDBConnectParamsAuthTypeLDAP captures enum value "LDAP"
	MongoDBConnectParamsAuthTypeLDAP string = "LDAP"

	// MongoDBConnectParamsAuthTypeNONE captures enum value "NONE"
	MongoDBConnectParamsAuthTypeNONE string = "NONE"

	// MongoDBConnectParamsAuthTypeKERBEROS captures enum value "KERBEROS"
	MongoDBConnectParamsAuthTypeKERBEROS string = "KERBEROS"
)

// prop value enum
func (m *MongoDBConnectParams) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mongoDBConnectParamsTypeAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MongoDBConnectParams) validateAuthType(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mongo d b connect params based on context it is used
func (m *MongoDBConnectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MongoDBConnectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MongoDBConnectParams) UnmarshalBinary(b []byte) error {
	var res MongoDBConnectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
