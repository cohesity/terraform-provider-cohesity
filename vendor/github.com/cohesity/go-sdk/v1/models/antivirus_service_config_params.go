// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AntivirusServiceConfigParams Antivirus Service Config parameters.
//
// Specifies the parameters for an Antivirus service provider.
//
// swagger:model AntivirusServiceConfigParams
type AntivirusServiceConfigParams struct {

	// Specifies the description of the Antivirus service. This could be any
	// additional information admin might associate with the Antivirus service.
	Description *string `json:"description,omitempty"`

	// Specifies the ICAP uri for this Antivirus service. It is of the form
	// icap://<ip-address>[:<port>]/<service>
	// Required: true
	IcapURI *string `json:"icapUri"`
}

// Validate validates this antivirus service config params
func (m *AntivirusServiceConfigParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIcapURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntivirusServiceConfigParams) validateIcapURI(formats strfmt.Registry) error {

	if err := validate.Required("icapUri", "body", m.IcapURI); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this antivirus service config params based on context it is used
func (m *AntivirusServiceConfigParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AntivirusServiceConfigParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntivirusServiceConfigParams) UnmarshalBinary(b []byte) error {
	var res AntivirusServiceConfigParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
