// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InterfaceGroup InterfaceGroup.
//
// Specifies the settings of an interface group.
//
// swagger:model InterfaceGroup
type InterfaceGroup struct {

	// Specifies node group type.
	GroupType *int32 `json:"groupType,omitempty"`

	// Interface group Id.
	//
	// Specifies the id of the interface group.
	ID *int32 `json:"id,omitempty"`

	// Specifies the product model and interface lists.
	ModelInterfaceLists []*ProductModelInterfaceTuple `json:"modelInterfaceLists"`

	// Specifies the name of the interface group.
	Name *string `json:"name,omitempty"`

	// network params
	NetworkParams *NetworkParams `json:"networkParams,omitempty"`

	// Specifies the node IDs and interface lists.
	NodeInterfacePairs []*NodeInterfacePair `json:"nodeInterfacePairs"`
}

// Validate validates this interface group
func (m *InterfaceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModelInterfaceLists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeInterfacePairs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceGroup) validateModelInterfaceLists(formats strfmt.Registry) error {
	if swag.IsZero(m.ModelInterfaceLists) { // not required
		return nil
	}

	for i := 0; i < len(m.ModelInterfaceLists); i++ {
		if swag.IsZero(m.ModelInterfaceLists[i]) { // not required
			continue
		}

		if m.ModelInterfaceLists[i] != nil {
			if err := m.ModelInterfaceLists[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modelInterfaceLists" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modelInterfaceLists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InterfaceGroup) validateNetworkParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkParams) { // not required
		return nil
	}

	if m.NetworkParams != nil {
		if err := m.NetworkParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkParams")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceGroup) validateNodeInterfacePairs(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeInterfacePairs) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeInterfacePairs); i++ {
		if swag.IsZero(m.NodeInterfacePairs[i]) { // not required
			continue
		}

		if m.NodeInterfacePairs[i] != nil {
			if err := m.NodeInterfacePairs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeInterfacePairs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeInterfacePairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this interface group based on the context it is used
func (m *InterfaceGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModelInterfaceLists(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeInterfacePairs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceGroup) contextValidateModelInterfaceLists(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ModelInterfaceLists); i++ {

		if m.ModelInterfaceLists[i] != nil {

			if swag.IsZero(m.ModelInterfaceLists[i]) { // not required
				return nil
			}

			if err := m.ModelInterfaceLists[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modelInterfaceLists" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modelInterfaceLists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InterfaceGroup) contextValidateNetworkParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkParams != nil {

		if swag.IsZero(m.NetworkParams) { // not required
			return nil
		}

		if err := m.NetworkParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkParams")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceGroup) contextValidateNodeInterfacePairs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeInterfacePairs); i++ {

		if m.NodeInterfacePairs[i] != nil {

			if swag.IsZero(m.NodeInterfacePairs[i]) { // not required
				return nil
			}

			if err := m.NodeInterfacePairs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeInterfacePairs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeInterfacePairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceGroup) UnmarshalBinary(b []byte) error {
	var res InterfaceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
