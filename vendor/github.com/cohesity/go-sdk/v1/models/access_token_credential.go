// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessTokenCredential Create Access Token Credential Request.
//
// Specifies the Cohesity credentials required for generating an access token.
//
// swagger:model AccessTokenCredential
type AccessTokenCredential struct {

	// Specifies the certificate for logging in the cert base auth cluster.
	Certificate *string `json:"certificate,omitempty"`

	// Specifies the domain the user is logging in to. For a Local user model,
	// the domain is always LOCAL. For LDAP/AD user models, the domain will map to
	// an LDAP connection string. A user is uniquely identified by a
	// combination of username and domain. If this is not set, LOCAL is assumed.
	Domain *string `json:"domain,omitempty"`

	// Specifies OTP code for MFA verification.
	OtpCode *string `json:"otpCode,omitempty"`

	// Specifies OTP type for MFA verification.
	// 'Totp' implies the code is TOTP.
	// 'Email' implies the code is email OTP.
	// Enum: ["Totp","Email"]
	OtpType *string `json:"otpType,omitempty"`

	// Specifies the password of the Cohesity user account.
	Password *string `json:"password,omitempty"`

	// Specifies the matching private key of the above certificate.
	PrivateKey *string `json:"privateKey,omitempty"`

	// Specifies the login name of the Cohesity user.
	Username *string `json:"username,omitempty"`
}

// Validate validates this access token credential
func (m *AccessTokenCredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOtpType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var accessTokenCredentialTypeOtpTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Totp","Email"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessTokenCredentialTypeOtpTypePropEnum = append(accessTokenCredentialTypeOtpTypePropEnum, v)
	}
}

const (

	// AccessTokenCredentialOtpTypeTotp captures enum value "Totp"
	AccessTokenCredentialOtpTypeTotp string = "Totp"

	// AccessTokenCredentialOtpTypeEmail captures enum value "Email"
	AccessTokenCredentialOtpTypeEmail string = "Email"
)

// prop value enum
func (m *AccessTokenCredential) validateOtpTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accessTokenCredentialTypeOtpTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccessTokenCredential) validateOtpType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtpType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOtpTypeEnum("otpType", "body", *m.OtpType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this access token credential based on context it is used
func (m *AccessTokenCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccessTokenCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessTokenCredential) UnmarshalBinary(b []byte) error {
	var res AccessTokenCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
