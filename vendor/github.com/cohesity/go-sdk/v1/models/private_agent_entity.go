// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateAgentEntity private agent entity
//
// swagger:model PrivateAgentEntity
type PrivateAgentEntity struct {

	// agent cert info
	AgentCertInfo *AgentCertificateInformation `json:"agentCertInfo,omitempty"`

	// Port on which agent is running.
	AgentPort *int32 `json:"agentPort,omitempty"`

	// The universal identifier of the object:
	// this refers to the Agent's UID and the value is shared with
	// physical::Entity objects if there are any.
	AgentUID *UniversalIDProto `json:"agentUid,omitempty"`

	// Arguments for the AIX installer.
	AixInstallerArgs *string `json:"aixInstallerArgs,omitempty"`

	// Config file creation timestamp expressed as UTC time.
	ConfigFileTimestamp *int64 `json:"configFileTimestamp,omitempty"`

	// Scribe key for the configuration file of this agent.
	ConfigScribeKey *string `json:"configScribeKey,omitempty"`

	// Host environment type.
	HostType *int32 `json:"hostType,omitempty"`

	// Arguments for HPUX installer.
	HpuxInstallerArgs *string `json:"hpuxInstallerArgs,omitempty"`

	// Cached installer URI. This comes from Iris as it composes the URIs on
	// the fly using the cluster's hostname. The URI is cached, saved in the WAL
	// and used in the recovery path to resume the Upgrade op.
	InstallerURI *string `json:"installerUri,omitempty"`

	// Arguments for the Linux installer.
	LinuxInstallerArgs *string `json:"linuxInstallerArgs,omitempty"`

	// A human readable name of the object. Typically the hostname of the
	// machine where the Agent is installed.
	Name *string `json:"name,omitempty"`

	// The list of owning entities' IDs. These act as refs:
	// the singular field was introduced in 4.0.
	// it became repeated in 4.2 in order to handle Windows Cluster.
	OwnerEntityIDVec []int64 `json:"ownerEntityIdVec"`

	// The common properties block. It is exposed to physical::Entity objects.
	Properties *Properties `json:"properties,omitempty"`

	// The Agent's refresh error.
	RefreshError *PrivateErrorProto `json:"refreshError,omitempty"`

	// Arguments for the Solaris installer.
	SolarisInstallerArgs *string `json:"solarisInstallerArgs,omitempty"`

	// This captures a list of features that are supported on this agent, e.g.
	// "sql" or "hyperv".
	SupportedFeatures []string `json:"supportedFeatures"`

	// The type of entity this proto refers to.
	Type *int32 `json:"type,omitempty"`

	// Arguments for the Windows installer.
	WindowsInstallerArgs *string `json:"windowsInstallerArgs,omitempty"`
}

// Validate validates this private agent entity
func (m *PrivateAgentEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentCertInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAgentEntity) validateAgentCertInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentCertInfo) { // not required
		return nil
	}

	if m.AgentCertInfo != nil {
		if err := m.AgentCertInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentCertInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentCertInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAgentEntity) validateAgentUID(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentUID) { // not required
		return nil
	}

	if m.AgentUID != nil {
		if err := m.AgentUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentUid")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAgentEntity) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAgentEntity) validateRefreshError(formats strfmt.Registry) error {
	if swag.IsZero(m.RefreshError) { // not required
		return nil
	}

	if m.RefreshError != nil {
		if err := m.RefreshError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshError")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private agent entity based on the context it is used
func (m *PrivateAgentEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentCertInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefreshError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateAgentEntity) contextValidateAgentCertInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentCertInfo != nil {

		if swag.IsZero(m.AgentCertInfo) { // not required
			return nil
		}

		if err := m.AgentCertInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentCertInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentCertInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAgentEntity) contextValidateAgentUID(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentUID != nil {

		if swag.IsZero(m.AgentUID) { // not required
			return nil
		}

		if err := m.AgentUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentUid")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAgentEntity) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.Properties != nil {

		if swag.IsZero(m.Properties) { // not required
			return nil
		}

		if err := m.Properties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateAgentEntity) contextValidateRefreshError(ctx context.Context, formats strfmt.Registry) error {

	if m.RefreshError != nil {

		if swag.IsZero(m.RefreshError) { // not required
			return nil
		}

		if err := m.RefreshError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshError")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateAgentEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateAgentEntity) UnmarshalBinary(b []byte) error {
	var res PrivateAgentEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
