// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DestroyClonedVMTaskInfoProto Message that encapsulates information about the destroy clone task for any
// environment we support. Environment specific information are defined as
// extensions to this proto.
//
// Each available extension is listed below along with the location of the
// proto file (relative to magneto/connectors) where it is defined.
//
// DestroyClonedVMTaskInfoProto extension          Location           Extension
// =============================================================================
// vmware::DestroyClonedTaskInfo::
// vmware_destroy_cloned_vm_task_info            vmware/vmware.proto    100
// hyperv::DestroyClonedTaskInfo::
// hyperv_destroy_cloned_vm_task_info            hyperv/hyperv.proto    101
// =============================================================================
//
// swagger:model DestroyClonedVMTaskInfoProto
type DestroyClonedVMTaskInfoProto struct {

	// If datastore was not unmounted, this field contains the reason for the
	// same.
	DatastoreNotUnmountedReason *string `json:"datastoreNotUnmountedReason,omitempty"`

	// Whether the datastore corresponding to the clone view was unmounted from
	// primary environment.
	DatastoreUnmounted *bool `json:"datastoreUnmounted,omitempty"`

	// Vector of all cloned entities that this destroy task will teardown.
	DestroyClonedEntityInfoVec []*DestroyClonedEntityInfoProto `json:"destroyClonedEntityInfoVec"`

	// The type of environment this destroy clone task info pertains to.
	Type *int32 `json:"type,omitempty"`

	// Whether the clone view was deleted by the destroy task.
	ViewDeleted *bool `json:"viewDeleted,omitempty"`

	// Field to store information when using custom storage policy.
	VmwareCustomStoragePolicyInfo *VMwareStoragePolicyInfo `json:"vmwareCustomStoragePolicyInfo,omitempty"`
}

// Validate validates this destroy cloned VM task info proto
func (m *DestroyClonedVMTaskInfoProto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestroyClonedEntityInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareCustomStoragePolicyInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestroyClonedVMTaskInfoProto) validateDestroyClonedEntityInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DestroyClonedEntityInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DestroyClonedEntityInfoVec); i++ {
		if swag.IsZero(m.DestroyClonedEntityInfoVec[i]) { // not required
			continue
		}

		if m.DestroyClonedEntityInfoVec[i] != nil {
			if err := m.DestroyClonedEntityInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destroyClonedEntityInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("destroyClonedEntityInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DestroyClonedVMTaskInfoProto) validateVmwareCustomStoragePolicyInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareCustomStoragePolicyInfo) { // not required
		return nil
	}

	if m.VmwareCustomStoragePolicyInfo != nil {
		if err := m.VmwareCustomStoragePolicyInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareCustomStoragePolicyInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareCustomStoragePolicyInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this destroy cloned VM task info proto based on the context it is used
func (m *DestroyClonedVMTaskInfoProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestroyClonedEntityInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareCustomStoragePolicyInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DestroyClonedVMTaskInfoProto) contextValidateDestroyClonedEntityInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DestroyClonedEntityInfoVec); i++ {

		if m.DestroyClonedEntityInfoVec[i] != nil {

			if swag.IsZero(m.DestroyClonedEntityInfoVec[i]) { // not required
				return nil
			}

			if err := m.DestroyClonedEntityInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destroyClonedEntityInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("destroyClonedEntityInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DestroyClonedVMTaskInfoProto) contextValidateVmwareCustomStoragePolicyInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareCustomStoragePolicyInfo != nil {

		if swag.IsZero(m.VmwareCustomStoragePolicyInfo) { // not required
			return nil
		}

		if err := m.VmwareCustomStoragePolicyInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareCustomStoragePolicyInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareCustomStoragePolicyInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DestroyClonedVMTaskInfoProto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DestroyClonedVMTaskInfoProto) UnmarshalBinary(b []byte) error {
	var res DestroyClonedVMTaskInfoProto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
