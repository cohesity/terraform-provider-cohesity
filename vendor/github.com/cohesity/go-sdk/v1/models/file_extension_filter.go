// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileExtensionFilter file extension filter
//
// swagger:model FileExtensionFilter
type FileExtensionFilter struct {

	// The list of file extensions to apply
	FileExtensionsList []string `json:"fileExtensionsList"`

	// If set, it enables the file extension filter
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// The mode applied to the list of file extensions
	// 'kWhitelist' indicates a allowlist extension filter.
	// 'kBlacklist' indicates a denylist extension filter.
	// Enum: ["kWhitelist","kBlacklist"]
	Mode *string `json:"mode,omitempty"`
}

// Validate validates this file extension filter
func (m *FileExtensionFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fileExtensionFilterTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kWhitelist","kBlacklist"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileExtensionFilterTypeModePropEnum = append(fileExtensionFilterTypeModePropEnum, v)
	}
}

const (

	// FileExtensionFilterModeKWhitelist captures enum value "kWhitelist"
	FileExtensionFilterModeKWhitelist string = "kWhitelist"

	// FileExtensionFilterModeKBlacklist captures enum value "kBlacklist"
	FileExtensionFilterModeKBlacklist string = "kBlacklist"
)

// prop value enum
func (m *FileExtensionFilter) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fileExtensionFilterTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FileExtensionFilter) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this file extension filter based on context it is used
func (m *FileExtensionFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FileExtensionFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileExtensionFilter) UnmarshalBinary(b []byte) error {
	var res FileExtensionFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
