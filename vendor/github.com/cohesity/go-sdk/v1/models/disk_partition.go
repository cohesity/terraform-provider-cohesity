// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DiskPartition Disk Partition.
//
// Specifies information about each partition in a physical disk.
//
// swagger:model DiskPartition
type DiskPartition struct {

	// Specifies the length of the block in bytes.
	LengthBytes *int64 `json:"lengthBytes,omitempty"`

	// Specifies a unique number of the partition within the linear disk file.
	Number *int64 `json:"number,omitempty"`

	// Specifies the offset of the block (in bytes) from the beginning
	// of the containing object such as a physical disk or a
	// virtual disk file.
	OffsetBytes *int64 `json:"offsetBytes,omitempty"`

	// Specifies the partition type uuid.
	// If disk is unpartitioned, this field is not set.
	// If disk is MBR partitioned, this field is set to a partition type.
	// If disk is GPT partitioned, this field is set to a partition type
	// GUID.
	TypeUUID *string `json:"typeUuid,omitempty"`

	// Specifies the partition uuid.
	// If disk is unpartitioned, this field is not set.
	// If disk is MBR partitioned, this field is not set.
	// If disk is GPT partitioned, this field is set to a partition GUID.
	UUID *string `json:"uuid,omitempty"`
}

// Validate validates this disk partition
func (m *DiskPartition) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this disk partition based on context it is used
func (m *DiskPartition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DiskPartition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskPartition) UnmarshalBinary(b []byte) error {
	var res DiskPartition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
