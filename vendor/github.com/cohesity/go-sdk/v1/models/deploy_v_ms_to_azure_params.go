// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeployVMsToAzureParams Contains Azure specific information needed to identify various resources
// when converting and deploying a VM to Azure.
//
// swagger:model DeployVMsToAzureParams
type DeployVMsToAzureParams struct {

	// Name of the Availability set in which the VM is to be restored.
	AvailabilitySet *EntityProto `json:"availabilitySet,omitempty"`

	// Managed disk parameter if deployment is using managed disks.
	AzureManagedDiskParams *AzureManagedDiskParams `json:"azureManagedDiskParams,omitempty"`

	// Type of VM (e.g. small, medium, large) when cloning the VM in Azure.
	ComputeOptions *EntityProto `json:"computeOptions,omitempty"`

	// NOTE:: Not using as of now, we will use it in cloudspin/clone/failover to
	// azure.
	// Will contain the details of network used in transferring the data from
	// source account to Cohesity cluster.
	DataTransferInfo *DataTransferInfo `json:"dataTransferInfo,omitempty"`

	// Name of the Azure resource group that has the virtual network mentioned
	// below.
	NetworkResourceGroup *EntityProto `json:"networkResourceGroup,omitempty"`

	// Name of the network security group. It's location should be same as the
	// storage account.
	NetworkSecurityGroup *EntityProto `json:"networkSecurityGroup,omitempty"`

	// Location of the VM to be recovered.
	Region *EntityProto `json:"region,omitempty"`

	// Name of the Azure resource group. Its value is globally unique within
	// Azure.
	ResourceGroup *EntityProto `json:"resourceGroup,omitempty"`

	// Name of the storage account that will contain the storage container within
	// which we will create the blob that will become the VHD disk for the
	// cloned VM.
	StorageAccount *EntityProto `json:"storageAccount,omitempty"`

	// Name of the storage container within the above storage account.
	StorageContainer *EntityProto `json:"storageContainer,omitempty"`

	// The storage key for the above storage account.
	StorageKey *EntityProto `json:"storageKey,omitempty"`

	// Name of the Azure resource group that has the storage account mentioned
	// below.
	StorageResourceGroup *EntityProto `json:"storageResourceGroup,omitempty"`

	// Name of the subnet within the above virtual network.
	Subnet *EntityProto `json:"subnet,omitempty"`

	// The subscription for the tenant to deploy the VM to.
	Subscription *EntityProto `json:"subscription,omitempty"`

	// Next few fields are for getting additional resources for creating
	// temporary resources in Azure to create a temporary VM to convert the
	// VM so that the guest VM will be Azure Compatible. The values are optional
	// for customer to provide.
	//
	// Name of the resource group where the temporary VM needs to be created.
	TempVMResourceGroup *EntityProto `json:"tempVmResourceGroup,omitempty"`

	// Name of the Storage Account where the temporary VM needs to be created.
	TempVMStorageAccount *EntityProto `json:"tempVmStorageAccount,omitempty"`

	// Name of the Storage container where the temporary VM's OS Disk needs to
	// be created.
	TempVMStorageContainer *EntityProto `json:"tempVmStorageContainer,omitempty"`

	// Name of the Subnet within the temp_vm_virtual_network where the temporary
	// vm needs to be created.
	TempVMSubnet *EntityProto `json:"tempVmSubnet,omitempty"`

	// Name of the Virtual Network where the temporary VM needs to be created.
	TempVMVirtualNetwork *EntityProto `json:"tempVmVirtualNetwork,omitempty"`

	// Name of the Virtual Network.
	VirtualNetwork *EntityProto `json:"virtualNetwork,omitempty"`
}

// Validate validates this deploy v ms to azure params
func (m *DeployVMsToAzureParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilitySet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureManagedDiskParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataTransferInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSecurityGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempVMResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempVMStorageAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempVMStorageContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempVMSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempVMVirtualNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployVMsToAzureParams) validateAvailabilitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailabilitySet) { // not required
		return nil
	}

	if m.AvailabilitySet != nil {
		if err := m.AvailabilitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilitySet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateAzureManagedDiskParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureManagedDiskParams) { // not required
		return nil
	}

	if m.AzureManagedDiskParams != nil {
		if err := m.AzureManagedDiskParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureManagedDiskParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureManagedDiskParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateComputeOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputeOptions) { // not required
		return nil
	}

	if m.ComputeOptions != nil {
		if err := m.ComputeOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeOptions")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateDataTransferInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DataTransferInfo) { // not required
		return nil
	}

	if m.DataTransferInfo != nil {
		if err := m.DataTransferInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataTransferInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataTransferInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateNetworkResourceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkResourceGroup) { // not required
		return nil
	}

	if m.NetworkResourceGroup != nil {
		if err := m.NetworkResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkResourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkResourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateNetworkSecurityGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSecurityGroup) { // not required
		return nil
	}

	if m.NetworkSecurityGroup != nil {
		if err := m.NetworkSecurityGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkSecurityGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkSecurityGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateResourceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {
		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateStorageAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageAccount) { // not required
		return nil
	}

	if m.StorageAccount != nil {
		if err := m.StorageAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageAccount")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateStorageContainer(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageContainer) { // not required
		return nil
	}

	if m.StorageContainer != nil {
		if err := m.StorageContainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageContainer")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateStorageKey(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageKey) { // not required
		return nil
	}

	if m.StorageKey != nil {
		if err := m.StorageKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageKey")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateStorageResourceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageResourceGroup) { // not required
		return nil
	}

	if m.StorageResourceGroup != nil {
		if err := m.StorageResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageResourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageResourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {
		if err := m.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateSubscription(formats strfmt.Registry) error {
	if swag.IsZero(m.Subscription) { // not required
		return nil
	}

	if m.Subscription != nil {
		if err := m.Subscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateTempVMResourceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.TempVMResourceGroup) { // not required
		return nil
	}

	if m.TempVMResourceGroup != nil {
		if err := m.TempVMResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempVmResourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempVmResourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateTempVMStorageAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.TempVMStorageAccount) { // not required
		return nil
	}

	if m.TempVMStorageAccount != nil {
		if err := m.TempVMStorageAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempVmStorageAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempVmStorageAccount")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateTempVMStorageContainer(formats strfmt.Registry) error {
	if swag.IsZero(m.TempVMStorageContainer) { // not required
		return nil
	}

	if m.TempVMStorageContainer != nil {
		if err := m.TempVMStorageContainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempVmStorageContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempVmStorageContainer")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateTempVMSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.TempVMSubnet) { // not required
		return nil
	}

	if m.TempVMSubnet != nil {
		if err := m.TempVMSubnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempVmSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempVmSubnet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateTempVMVirtualNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.TempVMVirtualNetwork) { // not required
		return nil
	}

	if m.TempVMVirtualNetwork != nil {
		if err := m.TempVMVirtualNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempVmVirtualNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempVmVirtualNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) validateVirtualNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualNetwork) { // not required
		return nil
	}

	if m.VirtualNetwork != nil {
		if err := m.VirtualNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualNetwork")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deploy v ms to azure params based on the context it is used
func (m *DeployVMsToAzureParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailabilitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureManagedDiskParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComputeOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataTransferInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkResourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSecurityGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageContainer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageResourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTempVMResourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTempVMStorageAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTempVMStorageContainer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTempVMSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTempVMVirtualNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployVMsToAzureParams) contextValidateAvailabilitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailabilitySet != nil {

		if swag.IsZero(m.AvailabilitySet) { // not required
			return nil
		}

		if err := m.AvailabilitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilitySet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateAzureManagedDiskParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureManagedDiskParams != nil {

		if swag.IsZero(m.AzureManagedDiskParams) { // not required
			return nil
		}

		if err := m.AzureManagedDiskParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureManagedDiskParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureManagedDiskParams")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateComputeOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputeOptions != nil {

		if swag.IsZero(m.ComputeOptions) { // not required
			return nil
		}

		if err := m.ComputeOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeOptions")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateDataTransferInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DataTransferInfo != nil {

		if swag.IsZero(m.DataTransferInfo) { // not required
			return nil
		}

		if err := m.DataTransferInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataTransferInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataTransferInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateNetworkResourceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkResourceGroup != nil {

		if swag.IsZero(m.NetworkResourceGroup) { // not required
			return nil
		}

		if err := m.NetworkResourceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkResourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkResourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateNetworkSecurityGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkSecurityGroup != nil {

		if swag.IsZero(m.NetworkSecurityGroup) { // not required
			return nil
		}

		if err := m.NetworkSecurityGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkSecurityGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkSecurityGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateResourceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceGroup != nil {

		if swag.IsZero(m.ResourceGroup) { // not required
			return nil
		}

		if err := m.ResourceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateStorageAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageAccount != nil {

		if swag.IsZero(m.StorageAccount) { // not required
			return nil
		}

		if err := m.StorageAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageAccount")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateStorageContainer(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageContainer != nil {

		if swag.IsZero(m.StorageContainer) { // not required
			return nil
		}

		if err := m.StorageContainer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageContainer")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateStorageKey(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageKey != nil {

		if swag.IsZero(m.StorageKey) { // not required
			return nil
		}

		if err := m.StorageKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageKey")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateStorageResourceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageResourceGroup != nil {

		if swag.IsZero(m.StorageResourceGroup) { // not required
			return nil
		}

		if err := m.StorageResourceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageResourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageResourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.Subnet != nil {

		if swag.IsZero(m.Subnet) { // not required
			return nil
		}

		if err := m.Subnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateSubscription(ctx context.Context, formats strfmt.Registry) error {

	if m.Subscription != nil {

		if swag.IsZero(m.Subscription) { // not required
			return nil
		}

		if err := m.Subscription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateTempVMResourceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.TempVMResourceGroup != nil {

		if swag.IsZero(m.TempVMResourceGroup) { // not required
			return nil
		}

		if err := m.TempVMResourceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempVmResourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempVmResourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateTempVMStorageAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.TempVMStorageAccount != nil {

		if swag.IsZero(m.TempVMStorageAccount) { // not required
			return nil
		}

		if err := m.TempVMStorageAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempVmStorageAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempVmStorageAccount")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateTempVMStorageContainer(ctx context.Context, formats strfmt.Registry) error {

	if m.TempVMStorageContainer != nil {

		if swag.IsZero(m.TempVMStorageContainer) { // not required
			return nil
		}

		if err := m.TempVMStorageContainer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempVmStorageContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempVmStorageContainer")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateTempVMSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.TempVMSubnet != nil {

		if swag.IsZero(m.TempVMSubnet) { // not required
			return nil
		}

		if err := m.TempVMSubnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempVmSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempVmSubnet")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateTempVMVirtualNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.TempVMVirtualNetwork != nil {

		if swag.IsZero(m.TempVMVirtualNetwork) { // not required
			return nil
		}

		if err := m.TempVMVirtualNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempVmVirtualNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempVmVirtualNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *DeployVMsToAzureParams) contextValidateVirtualNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.VirtualNetwork != nil {

		if swag.IsZero(m.VirtualNetwork) { // not required
			return nil
		}

		if err := m.VirtualNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualNetwork")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployVMsToAzureParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployVMsToAzureParams) UnmarshalBinary(b []byte) error {
	var res DeployVMsToAzureParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
