// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreAppArg RestoreAppArg represents the argument to recover/clone an application.
//
// Example of application includes a SQL DB.
//
// swagger:model RestoreAppArg
type RestoreAppArg struct {

	// Action is the name of the action of task.
	Action *int32 `json:"Action,omitempty"`

	// Name is the name of the restore task. This field is mandatory.
	Name *string `json:"name,omitempty"`

	// PostScript specifies the details of user script to be run after creating
	// the clone. This is only applicable to action == 'kCloneApp'.
	PostScript *RemoteScriptPathAndParams `json:"postScript,omitempty"`

	// PreScript specifies the details of user script to be run before creating
	// the clone. This is only applicable to action == 'kCloneApp'.
	PreScript *RemoteScriptPathAndParams `json:"preScript,omitempty"`

	// Specifies the name transformation to be applied to the vApp during restore.
	RenameRestoredVappParams *RenameObjectParamProto `json:"renameRestoredVappParams,omitempty"`

	// RestoreAppParams contains the information about the application restore
	// task.
	RestoreAppParams *RestoreAppParams `json:"restoreAppParams,omitempty"`

	// RestoreAppParamsList contains a list of RestoreAppParams which captures
	// information about multiple application restore tasks.
	RestoreAppParamsList []*RestoreAppParams `json:"restoreAppParamsList"`

	// Vlan Params associated with the restore.
	// If this is not specified, then the VLAN settings will be automatically
	// selected from one of the following options:
	// a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be
	// automatically based on the client's (e.g. ESXI host) IP address.
	// b. If VLANs are not configured on Cohesity, then the partition hostname or
	// VIPs will be used for restores.
	RestoreVlanParams *VlanParams `json:"restoreVlanParams,omitempty"`

	// Specifies the Vcd config info parameter for restore tasks.
	VcdConfigParams *RestoredObjectVCDConfigProto `json:"vcdConfigParams,omitempty"`
}

// Validate validates this restore app arg
func (m *RestoreAppArg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredVappParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreAppParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreAppParamsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdConfigParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAppArg) validatePostScript(formats strfmt.Registry) error {
	if swag.IsZero(m.PostScript) { // not required
		return nil
	}

	if m.PostScript != nil {
		if err := m.PostScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postScript")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppArg) validatePreScript(formats strfmt.Registry) error {
	if swag.IsZero(m.PreScript) { // not required
		return nil
	}

	if m.PreScript != nil {
		if err := m.PreScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preScript")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppArg) validateRenameRestoredVappParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRestoredVappParams) { // not required
		return nil
	}

	if m.RenameRestoredVappParams != nil {
		if err := m.RenameRestoredVappParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredVappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredVappParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppArg) validateRestoreAppParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreAppParams) { // not required
		return nil
	}

	if m.RestoreAppParams != nil {
		if err := m.RestoreAppParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAppParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppArg) validateRestoreAppParamsList(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreAppParamsList) { // not required
		return nil
	}

	for i := 0; i < len(m.RestoreAppParamsList); i++ {
		if swag.IsZero(m.RestoreAppParamsList[i]) { // not required
			continue
		}

		if m.RestoreAppParamsList[i] != nil {
			if err := m.RestoreAppParamsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreAppParamsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreAppParamsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreAppArg) validateRestoreVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreVlanParams) { // not required
		return nil
	}

	if m.RestoreVlanParams != nil {
		if err := m.RestoreVlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppArg) validateVcdConfigParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdConfigParams) { // not required
		return nil
	}

	if m.VcdConfigParams != nil {
		if err := m.VcdConfigParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfigParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfigParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore app arg based on the context it is used
func (m *RestoreAppArg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredVappParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreAppParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreAppParamsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoreVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcdConfigParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreAppArg) contextValidatePostScript(ctx context.Context, formats strfmt.Registry) error {

	if m.PostScript != nil {

		if swag.IsZero(m.PostScript) { // not required
			return nil
		}

		if err := m.PostScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postScript")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppArg) contextValidatePreScript(ctx context.Context, formats strfmt.Registry) error {

	if m.PreScript != nil {

		if swag.IsZero(m.PreScript) { // not required
			return nil
		}

		if err := m.PreScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preScript")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppArg) contextValidateRenameRestoredVappParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredVappParams != nil {

		if swag.IsZero(m.RenameRestoredVappParams) { // not required
			return nil
		}

		if err := m.RenameRestoredVappParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredVappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredVappParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppArg) contextValidateRestoreAppParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreAppParams != nil {

		if swag.IsZero(m.RestoreAppParams) { // not required
			return nil
		}

		if err := m.RestoreAppParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreAppParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppArg) contextValidateRestoreAppParamsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestoreAppParamsList); i++ {

		if m.RestoreAppParamsList[i] != nil {

			if swag.IsZero(m.RestoreAppParamsList[i]) { // not required
				return nil
			}

			if err := m.RestoreAppParamsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restoreAppParamsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restoreAppParamsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreAppArg) contextValidateRestoreVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoreVlanParams != nil {

		if swag.IsZero(m.RestoreVlanParams) { // not required
			return nil
		}

		if err := m.RestoreVlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoreVlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoreVlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreAppArg) contextValidateVcdConfigParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdConfigParams != nil {

		if swag.IsZero(m.VcdConfigParams) { // not required
			return nil
		}

		if err := m.VcdConfigParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdConfigParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdConfigParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreAppArg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreAppArg) UnmarshalBinary(b []byte) error {
	var res RestoreAppArg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
