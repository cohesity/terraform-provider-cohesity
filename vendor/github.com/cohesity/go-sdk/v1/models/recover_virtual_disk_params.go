// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverVirtualDiskParams Contains information needed when recovering virtual disks.
//
// swagger:model RecoverVirtualDiskParams
type RecoverVirtualDiskParams struct {

	// Whether to power-off the VM before recovering virtual disks.
	PowerOffVMBeforeRecovery *bool `json:"powerOffVmBeforeRecovery,omitempty"`

	// Whether to power-on the VM after recovering virtual disks.
	PowerOnVMAfterRecovery *bool `json:"powerOnVmAfterRecovery,omitempty"`

	// Target entity to which the disks should be attached.
	TargetEntity *EntityProto `json:"targetEntity,omitempty"`

	// virtual disk mappings
	VirtualDiskMappings []*RecoverVirtualDiskParamsVirtualDiskMapping `json:"virtualDiskMappings"`
}

// Validate validates this recover virtual disk params
func (m *RecoverVirtualDiskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDiskMappings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVirtualDiskParams) validateTargetEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetEntity) { // not required
		return nil
	}

	if m.TargetEntity != nil {
		if err := m.TargetEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskParams) validateVirtualDiskMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualDiskMappings) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualDiskMappings); i++ {
		if swag.IsZero(m.VirtualDiskMappings[i]) { // not required
			continue
		}

		if m.VirtualDiskMappings[i] != nil {
			if err := m.VirtualDiskMappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualDiskMappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualDiskMappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this recover virtual disk params based on the context it is used
func (m *RecoverVirtualDiskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualDiskMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVirtualDiskParams) contextValidateTargetEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetEntity != nil {

		if swag.IsZero(m.TargetEntity) { // not required
			return nil
		}

		if err := m.TargetEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVirtualDiskParams) contextValidateVirtualDiskMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualDiskMappings); i++ {

		if m.VirtualDiskMappings[i] != nil {

			if swag.IsZero(m.VirtualDiskMappings[i]) { // not required
				return nil
			}

			if err := m.VirtualDiskMappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualDiskMappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualDiskMappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverVirtualDiskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverVirtualDiskParams) UnmarshalBinary(b []byte) error {
	var res RecoverVirtualDiskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
