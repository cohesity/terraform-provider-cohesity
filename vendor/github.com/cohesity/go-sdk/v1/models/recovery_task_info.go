// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryTaskInfo Recovery Task Information.
//
// Parameters for a recovery op.
//
// swagger:model RecoveryTaskInfo
type RecoveryTaskInfo struct {

	// Name of the recovery task.
	Name *string `json:"name,omitempty"`

	// Id of the recovery task.
	TaskID *string `json:"taskId,omitempty"`

	// Denotes if the recovery task has an archival target.
	// This param is used to reflect if the recovery op has an archival
	// target to work with.
	// 'local' indicates no archival target.
	// 'archive' indicates that objects restored using an archival target.
	// Enum: ["local","archive"]
	Type *string `json:"type,omitempty"`
}

// Validate validates this recovery task info
func (m *RecoveryTaskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recoveryTaskInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["local","archive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoveryTaskInfoTypeTypePropEnum = append(recoveryTaskInfoTypeTypePropEnum, v)
	}
}

const (

	// RecoveryTaskInfoTypeLocal captures enum value "local"
	RecoveryTaskInfoTypeLocal string = "local"

	// RecoveryTaskInfoTypeArchive captures enum value "archive"
	RecoveryTaskInfoTypeArchive string = "archive"
)

// prop value enum
func (m *RecoveryTaskInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoveryTaskInfoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoveryTaskInfo) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this recovery task info based on context it is used
func (m *RecoveryTaskInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryTaskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryTaskInfo) UnmarshalBinary(b []byte) error {
	var res RecoveryTaskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
