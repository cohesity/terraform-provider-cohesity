// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UdaBackupJobParams Contains backup params at the job level applicable for
// uda environment. These are sent from iris to magneto.
//
// swagger:model UdaBackupJobParams
type UdaBackupJobParams struct {

	// Map to store custom arguments which will be provided to the backup job
	// scripts.
	BackupJobArgumentsMap map[string]UdaCustomArgument `json:"backupJobArgumentsMap,omitempty"`

	// Max concurrency for the backup job.
	Concurrency *int32 `json:"concurrency,omitempty"`

	// Indicates if backup job was created after source acquired
	// entity support capability.
	EntitySupport *bool `json:"entitySupport,omitempty"`

	// Indicates if backup job was created after source acquired
	// externally triggered log backup capability.
	EtLogBackup *bool `json:"etLogBackup,omitempty"`

	// If using external disks, this parameter will contain the user-requested
	// disk size for the slave to consume when requesting a disk from heimdall.
	ExternalDiskSizeGb *int32 `json:"externalDiskSizeGb,omitempty"`

	// If using external disks, this parameter will contain the user-requested
	// disk SKU for the slave to consume when requesting a disk from heimdall.
	ExternalDiskSku *string `json:"externalDiskSku,omitempty"`

	// Custom arguments for full backup scripts.
	FullBackupArgs *string `json:"fullBackupArgs,omitempty"`

	// Custom arguments for incremental backup scripts.
	IncrementalBackupArgs *string `json:"incrementalBackupArgs,omitempty"`

	// Custom arguments for log backup scripts.
	LogBackupArgs *string `json:"logBackupArgs,omitempty"`

	// Max number of view mounts per host.
	Mounts *int32 `json:"mounts,omitempty"`

	// Id of the source to which the objects being protected
	// belong to. This can be removed once entity hierarchy
	// support is added to UDA and protected objects can be
	// specified by their Ids instead of their names.
	SourceID *int64 `json:"sourceId,omitempty"`

	// List of objects to be backed up.
	UdaObjects []*UdaObjects `json:"udaObjects"`

	// This message captures all the details needed by UDA Backup to create S3
	// views and to access the S3 bucket.
	UdaS3ViewBackupProperties *UdaS3ViewBackupProperties `json:"udaS3ViewBackupProperties,omitempty"`
}

// Validate validates this uda backup job params
func (m *UdaBackupJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupJobArgumentsMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaS3ViewBackupProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaBackupJobParams) validateBackupJobArgumentsMap(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupJobArgumentsMap) { // not required
		return nil
	}

	for k := range m.BackupJobArgumentsMap {

		if err := validate.Required("backupJobArgumentsMap"+"."+k, "body", m.BackupJobArgumentsMap[k]); err != nil {
			return err
		}
		if val, ok := m.BackupJobArgumentsMap[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupJobArgumentsMap" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupJobArgumentsMap" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaBackupJobParams) validateUdaObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.UdaObjects); i++ {
		if swag.IsZero(m.UdaObjects[i]) { // not required
			continue
		}

		if m.UdaObjects[i] != nil {
			if err := m.UdaObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("udaObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("udaObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaBackupJobParams) validateUdaS3ViewBackupProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaS3ViewBackupProperties) { // not required
		return nil
	}

	if m.UdaS3ViewBackupProperties != nil {
		if err := m.UdaS3ViewBackupProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaS3ViewBackupProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaS3ViewBackupProperties")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this uda backup job params based on the context it is used
func (m *UdaBackupJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupJobArgumentsMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaS3ViewBackupProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaBackupJobParams) contextValidateBackupJobArgumentsMap(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.BackupJobArgumentsMap {

		if val, ok := m.BackupJobArgumentsMap[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *UdaBackupJobParams) contextValidateUdaObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UdaObjects); i++ {

		if m.UdaObjects[i] != nil {

			if swag.IsZero(m.UdaObjects[i]) { // not required
				return nil
			}

			if err := m.UdaObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("udaObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("udaObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaBackupJobParams) contextValidateUdaS3ViewBackupProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaS3ViewBackupProperties != nil {

		if swag.IsZero(m.UdaS3ViewBackupProperties) { // not required
			return nil
		}

		if err := m.UdaS3ViewBackupProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaS3ViewBackupProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaS3ViewBackupProperties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UdaBackupJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaBackupJobParams) UnmarshalBinary(b []byte) error {
	var res UdaBackupJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
