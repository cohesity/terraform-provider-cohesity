// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CdpLogRunParamsDiskLog Message encapsulating the log data for each disk of the VM entity.
//
// swagger:model CdpLogRunParams_DiskLog
type CdpLogRunParamsDiskLog struct {

	// IO data events consumed by a log run.
	// Events are consumed either from last log run to the current time or from
	// first VADP backup run to the current time.
	DataEventsVec []*DataEvent `json:"dataEventsVec"`

	// Disk information of the VM.
	DiskInfo *CdpLogRunParamsVirtualDiskInfo `json:"diskInfo,omitempty"`

	// List of log files per disk.
	LogDataVec []*CdpLogRunParamsLogData `json:"logDataVec"`
}

// Validate validates this cdp log run params disk log
func (m *CdpLogRunParamsDiskLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataEventsVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogDataVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpLogRunParamsDiskLog) validateDataEventsVec(formats strfmt.Registry) error {
	if swag.IsZero(m.DataEventsVec) { // not required
		return nil
	}

	for i := 0; i < len(m.DataEventsVec); i++ {
		if swag.IsZero(m.DataEventsVec[i]) { // not required
			continue
		}

		if m.DataEventsVec[i] != nil {
			if err := m.DataEventsVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataEventsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataEventsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdpLogRunParamsDiskLog) validateDiskInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskInfo) { // not required
		return nil
	}

	if m.DiskInfo != nil {
		if err := m.DiskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CdpLogRunParamsDiskLog) validateLogDataVec(formats strfmt.Registry) error {
	if swag.IsZero(m.LogDataVec) { // not required
		return nil
	}

	for i := 0; i < len(m.LogDataVec); i++ {
		if swag.IsZero(m.LogDataVec[i]) { // not required
			continue
		}

		if m.LogDataVec[i] != nil {
			if err := m.LogDataVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logDataVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logDataVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cdp log run params disk log based on the context it is used
func (m *CdpLogRunParamsDiskLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataEventsVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiskInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogDataVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpLogRunParamsDiskLog) contextValidateDataEventsVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataEventsVec); i++ {

		if m.DataEventsVec[i] != nil {

			if swag.IsZero(m.DataEventsVec[i]) { // not required
				return nil
			}

			if err := m.DataEventsVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataEventsVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataEventsVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdpLogRunParamsDiskLog) contextValidateDiskInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskInfo != nil {

		if swag.IsZero(m.DiskInfo) { // not required
			return nil
		}

		if err := m.DiskInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CdpLogRunParamsDiskLog) contextValidateLogDataVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LogDataVec); i++ {

		if m.LogDataVec[i] != nil {

			if swag.IsZero(m.LogDataVec[i]) { // not required
				return nil
			}

			if err := m.LogDataVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logDataVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logDataVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdpLogRunParamsDiskLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdpLogRunParamsDiskLog) UnmarshalBinary(b []byte) error {
	var res CdpLogRunParamsDiskLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
