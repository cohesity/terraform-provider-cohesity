// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ScriptPathAndParams A message to encapsulate pre or post script associated with a backup job
// policy.
//
// swagger:model ScriptPathAndParams
type ScriptPathAndParams struct {

	// Applicable only for pre backup scripts. If this flag is set to true, then
	// backup job will start even if the pre backup script fails.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Indicates if the script is active. If 'is_active' is set to false, this
	// script will not be executed even if it is part of the backup job.
	IsActive *bool `json:"isActive,omitempty"`

	// Custom parameters that users want to pass to the script. For example,
	// if user wants to pass following params:
	// 1. foo=bar
	// 2. v=10.
	// User can construct the param string as "far=bar v=10".
	ScriptParams *string `json:"scriptParams,omitempty"`

	// For backup jobs of type 'kPuppeteer', 'script_path' is full path of
	// location of the script within the host.
	// For Pre/Post scripts of agent-based backup jobs, 'script_path' is just
	// name of the script, not full path.
	// For backup jobs of cloud adapters (GCP, AWS, Azure) script path will
	// capture the full path of the script on the cloud VM instance.
	ScriptPath *string `json:"scriptPath,omitempty"`

	// Timeout of the script. The script will be killed if it exceeds this value.
	// '-1' indicates that the timeout is not set for the script.
	TimeoutSecs *int32 `json:"timeoutSecs,omitempty"`
}

// Validate validates this script path and params
func (m *ScriptPathAndParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this script path and params based on context it is used
func (m *ScriptPathAndParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScriptPathAndParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScriptPathAndParams) UnmarshalBinary(b []byte) error {
	var res ScriptPathAndParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
