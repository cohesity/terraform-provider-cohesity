// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ActiveAlertsStats Active Alert Statistics.
//
// Specifies the active alert statistics details.
//
// swagger:model ActiveAlertsStats
type ActiveAlertsStats struct {

	// Specifies the count of active critical Alerts excluding alerts that belong to other bucket.
	NumCriticalAlerts *int64 `json:"numCriticalAlerts,omitempty"`

	// Specifies the count of active critical alerts categories.
	NumCriticalAlertsCategories *int64 `json:"numCriticalAlertsCategories,omitempty"`

	// Specifies the count of active service Alerts.
	NumDataServiceAlerts *int64 `json:"numDataServiceAlerts,omitempty"`

	// Specifies the count of active service critical Alerts.
	NumDataServiceCriticalAlerts *int64 `json:"numDataServiceCriticalAlerts,omitempty"`

	// Specifies the count of active service info Alerts.
	NumDataServiceInfoAlerts *int64 `json:"numDataServiceInfoAlerts,omitempty"`

	// Specifies the count of active service warning Alerts.
	NumDataServiceWarningAlerts *int64 `json:"numDataServiceWarningAlerts,omitempty"`

	// Specifies the count of active hardware Alerts.
	NumHardwareAlerts *int64 `json:"numHardwareAlerts,omitempty"`

	// Specifies the count of active hardware critical Alerts.
	NumHardwareCriticalAlerts *int64 `json:"numHardwareCriticalAlerts,omitempty"`

	// Specifies the count of active hardware info Alerts.
	NumHardwareInfoAlerts *int64 `json:"numHardwareInfoAlerts,omitempty"`

	// Specifies the count of active hardware warning Alerts.
	NumHardwareWarningAlerts *int64 `json:"numHardwareWarningAlerts,omitempty"`

	// Specifies the count of active info Alerts excluding alerts that belong to other bucket.
	NumInfoAlerts *int64 `json:"numInfoAlerts,omitempty"`

	// Specifies the count of active info alerts categories.
	NumInfoAlertsCategories *int64 `json:"numInfoAlertsCategories,omitempty"`

	// Specifies the count of active Alerts of maintenance bucket
	NumMaintenanceAlerts *int64 `json:"numMaintenanceAlerts,omitempty"`

	// Specifies the count of active other critical Alerts.
	NumMaintenanceCriticalAlerts *int64 `json:"numMaintenanceCriticalAlerts,omitempty"`

	// Specifies the count of active other info Alerts.
	NumMaintenanceInfoAlerts *int64 `json:"numMaintenanceInfoAlerts,omitempty"`

	// Specifies the count of active other warning Alerts.
	NumMaintenanceWarningAlerts *int64 `json:"numMaintenanceWarningAlerts,omitempty"`

	// Specifies the count of active software Alerts.
	NumSoftwareAlerts *int64 `json:"numSoftwareAlerts,omitempty"`

	// Specifies the count of active software critical Alerts.
	NumSoftwareCriticalAlerts *int64 `json:"numSoftwareCriticalAlerts,omitempty"`

	// Specifies the count of active software info Alerts.
	NumSoftwareInfoAlerts *int64 `json:"numSoftwareInfoAlerts,omitempty"`

	// Specifies the count of active software warning Alerts.
	NumSoftwareWarningAlerts *int64 `json:"numSoftwareWarningAlerts,omitempty"`

	// Specifies the count of active warning Alerts excluding alerts that belong to other bucket.
	NumWarningAlerts *int64 `json:"numWarningAlerts,omitempty"`

	// Specifies the count of active warning alerts categories.
	NumWarningAlertsCategories *int64 `json:"numWarningAlertsCategories,omitempty"`
}

// Validate validates this active alerts stats
func (m *ActiveAlertsStats) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this active alerts stats based on context it is used
func (m *ActiveAlertsStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ActiveAlertsStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActiveAlertsStats) UnmarshalBinary(b []byte) error {
	var res ActiveAlertsStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
