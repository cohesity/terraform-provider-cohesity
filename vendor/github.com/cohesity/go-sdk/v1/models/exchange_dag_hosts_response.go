// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExchangeDagHostsResponse Exchange DAG Hosts Response.
//
// Specifies if the endpoint provided in the request is standalone exchange
// server or not. If the endpoint is not a standalone exchange server, the list
// of hosts which belong to the Exchange DAG are returned.
//
// swagger:model ExchangeDagHostsResponse
type ExchangeDagHostsResponse struct {

	// Specifies information about the preference order while choosing
	// between which database copy of the exchange database, which is part of
	// DAG, should be protected.
	ExchangeDagProtectionPreference *ExchangeDAGProtectionPreference `json:"exchangeDagProtectionPreference,omitempty"`

	// Specifies the list of exchange hosts that belong to Exchange DAG.
	ExchangeHostInfoList []*ExchangeHostInfo `json:"exchangeHostInfoList"`

	// Specifies the Unique GUID for the DAG.
	GUID *string `json:"guid,omitempty"`

	// Specifies if the endpoint provided in the request is a standlone exchange
	// server or not. exchangeHostInfoList is not populated if it is a standalone
	// exchange server.
	IsStandaloneHost *bool `json:"isStandaloneHost,omitempty"`

	// Specifies the display name of the DAG.
	Name *string `json:"name,omitempty"`

	// Specifies the Protection Source Id of the Exchange DAG if it is already
	// created.
	ProtectionSourceID *int64 `json:"protectionSourceId,omitempty"`
}

// Validate validates this exchange dag hosts response
func (m *ExchangeDagHostsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExchangeDagProtectionPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeHostInfoList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeDagHostsResponse) validateExchangeDagProtectionPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeDagProtectionPreference) { // not required
		return nil
	}

	if m.ExchangeDagProtectionPreference != nil {
		if err := m.ExchangeDagProtectionPreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeDagProtectionPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeDagProtectionPreference")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDagHostsResponse) validateExchangeHostInfoList(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeHostInfoList) { // not required
		return nil
	}

	for i := 0; i < len(m.ExchangeHostInfoList); i++ {
		if swag.IsZero(m.ExchangeHostInfoList[i]) { // not required
			continue
		}

		if m.ExchangeHostInfoList[i] != nil {
			if err := m.ExchangeHostInfoList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchangeHostInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exchangeHostInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this exchange dag hosts response based on the context it is used
func (m *ExchangeDagHostsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExchangeDagProtectionPreference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeHostInfoList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeDagHostsResponse) contextValidateExchangeDagProtectionPreference(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeDagProtectionPreference != nil {

		if swag.IsZero(m.ExchangeDagProtectionPreference) { // not required
			return nil
		}

		if err := m.ExchangeDagProtectionPreference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeDagProtectionPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeDagProtectionPreference")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeDagHostsResponse) contextValidateExchangeHostInfoList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExchangeHostInfoList); i++ {

		if m.ExchangeHostInfoList[i] != nil {

			if swag.IsZero(m.ExchangeHostInfoList[i]) { // not required
				return nil
			}

			if err := m.ExchangeHostInfoList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchangeHostInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exchangeHostInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeDagHostsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeDagHostsResponse) UnmarshalBinary(b []byte) error {
	var res ExchangeDagHostsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
