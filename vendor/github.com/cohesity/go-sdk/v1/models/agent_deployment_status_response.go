// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgentDeploymentStatusResponse Agent Deployment Status Response.
//
// Specifies the overview of the agent deployment status.
//
// swagger:model AgentDeploymentStatusResponse
type AgentDeploymentStatusResponse struct {

	// Specifies the port agent is listening on.
	AgentPort *int32 `json:"agentPort,omitempty"`

	// Specifies the certificate expiry time for agent.
	CertificateExpiryTimeUsecs *int64 `json:"certificateExpiryTimeUsecs,omitempty"`

	// Specifies the agent certificate status.
	CertificateIssuer *string `json:"certificateIssuer,omitempty"`

	// Specifies the status of the certificate.
	// CertificateStatus specifies the status of the agent certificate
	// Enum: ["Active","Expired"]
	CertificateStatus *string `json:"certificateStatus,omitempty"`

	// Specifies cipher type being used by the agent.
	CipherType *string `json:"cipherType,omitempty"`

	// Specifies the compact version of Cohesity agent. For example, 6.0.1.
	CompactVersion *string `json:"compactVersion,omitempty"`

	// Specifies the health status of the Cohesity agent.
	// Specifies the status of the agent running on a physical source.
	// 'kUnknown' indicates the Agent is not known. No attempt to connect
	// to the Agent has occurred.
	// 'kUnreachable' indicates the Agent is not reachable.
	// 'kHealthy' indicates the Agent is healthy.
	// 'kDegraded' indicates the Agent is running but in a degraded state.
	// Enum: ["kUnknown","kUnreachable","kHealthy","kDegraded"]
	HealthStatus *string `json:"healthStatus,omitempty"`

	// Specifies the IP of the host on which the agent is installed.
	HostIP *string `json:"hostIp,omitempty"`

	// Specifies the host type on which the agent is installed.
	// 'kLinux' indicates the Linux operating system.
	// 'kWindows' indicates the Microsoft Windows operating system.
	// 'kAix' indicates the IBM AIX operating system.
	// 'kSolaris' indicates the Oracle Solaris operating system.
	// 'kSapHana' indicates the Sap Hana database system developed by SAP SE.
	// 'kSapOracle' indicates the Sap Oracle database system developed by SAP SE.
	// 'kCockroachDB' indicates the CockroachDB database system.
	// 'kMySQL' indicates the MySQL database system.
	// 'kSapSybase' indicates the SapSybase database system.
	// 'kSapMaxDB' indicates the SapMaxDB database system.
	// 'kSapSybaseIQ' indicates the SapSybaseIQ database system.
	// 'kDB2' indicates the DB2 database system.
	// 'kSapASE' indicates the SapASE database system.
	// 'kMariaDB' indicates the MariaDB database system.
	// 'kPostgreSQL' indicates the PostgreSQL database system.
	// 'kHPUX' indicates the HPUX database system.
	// 'kVOS' indicates the VOS database system.
	// 'kOther' indicates the other types of operating system.
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]
	HostOsType *string `json:"hostOsType,omitempty"`

	// Specifies the status of the last upgrade attempt.
	// Specifies the status of the upgrade of the agent on a physical server.
	// 'kIdle' indicates there is no agent upgrade in progress.
	// 'kAccepted' indicates the Agent upgrade is accepted.
	// 'kStarted' indicates the Agent upgrade is in progress.
	// 'kFinished' indicates the Agent upgrade is completed.
	// 'kScheduled' indicates that the Agent is scheduled for upgrade.
	// Enum: ["kIdle","kAccepted","kStarted","kFinished","kScheduled"]
	LastUpgradeStatus *string `json:"lastUpgradeStatus,omitempty"`

	// Specifies the upgradability of the agent running on the server.
	// Specifies the upgradability of the agent running on the physical server.
	// 'kUpgradable' indicates the Agent can be upgraded to the agent software
	// version on the cluster.
	// 'kCurrent' indicates the Agent is running the latest version.
	// 'kUnknown' indicates the Agent's version is not known.
	// 'kNonUpgradableInvalidVersion' indicates the Agent's version is invalid.
	// 'kNonUpgradableAgentIsNewer' indicates the Agent's version is newer than
	// the agent software version the cluster.
	// 'kNonUpgradableAgentIsOld' indicates the Agent's version is too old that
	// does not support upgrades.
	// Enum: ["kUpgradable","kCurrent","kUnknown","kNonUpgradableInvalidVersion","kNonUpgradableAgentIsNewer","kNonUpgradableAgentIsOld"]
	Upgradability *string `json:"upgradability,omitempty"`

	// Specifies detailed message about the agent upgrade failure. This field
	// is not set for successful upgrade.
	UpgradeStatusMessage *string `json:"upgradeStatusMessage,omitempty"`

	// Specifies the Cohesity software version of the agent. For example:
	// 6.0.1-release-YYYYMMDD_<hash>
	Version *string `json:"version,omitempty"`
}

// Validate validates this agent deployment status response
func (m *AgentDeploymentStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpgradeStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentDeploymentStatusResponseTypeCertificateStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Expired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentDeploymentStatusResponseTypeCertificateStatusPropEnum = append(agentDeploymentStatusResponseTypeCertificateStatusPropEnum, v)
	}
}

const (

	// AgentDeploymentStatusResponseCertificateStatusActive captures enum value "Active"
	AgentDeploymentStatusResponseCertificateStatusActive string = "Active"

	// AgentDeploymentStatusResponseCertificateStatusExpired captures enum value "Expired"
	AgentDeploymentStatusResponseCertificateStatusExpired string = "Expired"
)

// prop value enum
func (m *AgentDeploymentStatusResponse) validateCertificateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentDeploymentStatusResponseTypeCertificateStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgentDeploymentStatusResponse) validateCertificateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificateStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateCertificateStatusEnum("certificateStatus", "body", *m.CertificateStatus); err != nil {
		return err
	}

	return nil
}

var agentDeploymentStatusResponseTypeHealthStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUnknown","kUnreachable","kHealthy","kDegraded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentDeploymentStatusResponseTypeHealthStatusPropEnum = append(agentDeploymentStatusResponseTypeHealthStatusPropEnum, v)
	}
}

const (

	// AgentDeploymentStatusResponseHealthStatusKUnknown captures enum value "kUnknown"
	AgentDeploymentStatusResponseHealthStatusKUnknown string = "kUnknown"

	// AgentDeploymentStatusResponseHealthStatusKUnreachable captures enum value "kUnreachable"
	AgentDeploymentStatusResponseHealthStatusKUnreachable string = "kUnreachable"

	// AgentDeploymentStatusResponseHealthStatusKHealthy captures enum value "kHealthy"
	AgentDeploymentStatusResponseHealthStatusKHealthy string = "kHealthy"

	// AgentDeploymentStatusResponseHealthStatusKDegraded captures enum value "kDegraded"
	AgentDeploymentStatusResponseHealthStatusKDegraded string = "kDegraded"
)

// prop value enum
func (m *AgentDeploymentStatusResponse) validateHealthStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentDeploymentStatusResponseTypeHealthStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgentDeploymentStatusResponse) validateHealthStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthStatusEnum("healthStatus", "body", *m.HealthStatus); err != nil {
		return err
	}

	return nil
}

var agentDeploymentStatusResponseTypeHostOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kOther","kSapSybase","kSapMaxDB","kSapSybaseIQ","kDB2","kSapASE","kMariaDB","kPostgreSQL","kVOS","kHPUX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentDeploymentStatusResponseTypeHostOsTypePropEnum = append(agentDeploymentStatusResponseTypeHostOsTypePropEnum, v)
	}
}

const (

	// AgentDeploymentStatusResponseHostOsTypeKLinux captures enum value "kLinux"
	AgentDeploymentStatusResponseHostOsTypeKLinux string = "kLinux"

	// AgentDeploymentStatusResponseHostOsTypeKWindows captures enum value "kWindows"
	AgentDeploymentStatusResponseHostOsTypeKWindows string = "kWindows"

	// AgentDeploymentStatusResponseHostOsTypeKAix captures enum value "kAix"
	AgentDeploymentStatusResponseHostOsTypeKAix string = "kAix"

	// AgentDeploymentStatusResponseHostOsTypeKSolaris captures enum value "kSolaris"
	AgentDeploymentStatusResponseHostOsTypeKSolaris string = "kSolaris"

	// AgentDeploymentStatusResponseHostOsTypeKSapHana captures enum value "kSapHana"
	AgentDeploymentStatusResponseHostOsTypeKSapHana string = "kSapHana"

	// AgentDeploymentStatusResponseHostOsTypeKSapOracle captures enum value "kSapOracle"
	AgentDeploymentStatusResponseHostOsTypeKSapOracle string = "kSapOracle"

	// AgentDeploymentStatusResponseHostOsTypeKCockroachDB captures enum value "kCockroachDB"
	AgentDeploymentStatusResponseHostOsTypeKCockroachDB string = "kCockroachDB"

	// AgentDeploymentStatusResponseHostOsTypeKMySQL captures enum value "kMySQL"
	AgentDeploymentStatusResponseHostOsTypeKMySQL string = "kMySQL"

	// AgentDeploymentStatusResponseHostOsTypeKOther captures enum value "kOther"
	AgentDeploymentStatusResponseHostOsTypeKOther string = "kOther"

	// AgentDeploymentStatusResponseHostOsTypeKSapSybase captures enum value "kSapSybase"
	AgentDeploymentStatusResponseHostOsTypeKSapSybase string = "kSapSybase"

	// AgentDeploymentStatusResponseHostOsTypeKSapMaxDB captures enum value "kSapMaxDB"
	AgentDeploymentStatusResponseHostOsTypeKSapMaxDB string = "kSapMaxDB"

	// AgentDeploymentStatusResponseHostOsTypeKSapSybaseIQ captures enum value "kSapSybaseIQ"
	AgentDeploymentStatusResponseHostOsTypeKSapSybaseIQ string = "kSapSybaseIQ"

	// AgentDeploymentStatusResponseHostOsTypeKDB2 captures enum value "kDB2"
	AgentDeploymentStatusResponseHostOsTypeKDB2 string = "kDB2"

	// AgentDeploymentStatusResponseHostOsTypeKSapASE captures enum value "kSapASE"
	AgentDeploymentStatusResponseHostOsTypeKSapASE string = "kSapASE"

	// AgentDeploymentStatusResponseHostOsTypeKMariaDB captures enum value "kMariaDB"
	AgentDeploymentStatusResponseHostOsTypeKMariaDB string = "kMariaDB"

	// AgentDeploymentStatusResponseHostOsTypeKPostgreSQL captures enum value "kPostgreSQL"
	AgentDeploymentStatusResponseHostOsTypeKPostgreSQL string = "kPostgreSQL"

	// AgentDeploymentStatusResponseHostOsTypeKVOS captures enum value "kVOS"
	AgentDeploymentStatusResponseHostOsTypeKVOS string = "kVOS"

	// AgentDeploymentStatusResponseHostOsTypeKHPUX captures enum value "kHPUX"
	AgentDeploymentStatusResponseHostOsTypeKHPUX string = "kHPUX"
)

// prop value enum
func (m *AgentDeploymentStatusResponse) validateHostOsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentDeploymentStatusResponseTypeHostOsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgentDeploymentStatusResponse) validateHostOsType(formats strfmt.Registry) error {
	if swag.IsZero(m.HostOsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostOsTypeEnum("hostOsType", "body", *m.HostOsType); err != nil {
		return err
	}

	return nil
}

var agentDeploymentStatusResponseTypeLastUpgradeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kIdle","kAccepted","kStarted","kFinished","kScheduled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentDeploymentStatusResponseTypeLastUpgradeStatusPropEnum = append(agentDeploymentStatusResponseTypeLastUpgradeStatusPropEnum, v)
	}
}

const (

	// AgentDeploymentStatusResponseLastUpgradeStatusKIdle captures enum value "kIdle"
	AgentDeploymentStatusResponseLastUpgradeStatusKIdle string = "kIdle"

	// AgentDeploymentStatusResponseLastUpgradeStatusKAccepted captures enum value "kAccepted"
	AgentDeploymentStatusResponseLastUpgradeStatusKAccepted string = "kAccepted"

	// AgentDeploymentStatusResponseLastUpgradeStatusKStarted captures enum value "kStarted"
	AgentDeploymentStatusResponseLastUpgradeStatusKStarted string = "kStarted"

	// AgentDeploymentStatusResponseLastUpgradeStatusKFinished captures enum value "kFinished"
	AgentDeploymentStatusResponseLastUpgradeStatusKFinished string = "kFinished"

	// AgentDeploymentStatusResponseLastUpgradeStatusKScheduled captures enum value "kScheduled"
	AgentDeploymentStatusResponseLastUpgradeStatusKScheduled string = "kScheduled"
)

// prop value enum
func (m *AgentDeploymentStatusResponse) validateLastUpgradeStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentDeploymentStatusResponseTypeLastUpgradeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgentDeploymentStatusResponse) validateLastUpgradeStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpgradeStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateLastUpgradeStatusEnum("lastUpgradeStatus", "body", *m.LastUpgradeStatus); err != nil {
		return err
	}

	return nil
}

var agentDeploymentStatusResponseTypeUpgradabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUpgradable","kCurrent","kUnknown","kNonUpgradableInvalidVersion","kNonUpgradableAgentIsNewer","kNonUpgradableAgentIsOld"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentDeploymentStatusResponseTypeUpgradabilityPropEnum = append(agentDeploymentStatusResponseTypeUpgradabilityPropEnum, v)
	}
}

const (

	// AgentDeploymentStatusResponseUpgradabilityKUpgradable captures enum value "kUpgradable"
	AgentDeploymentStatusResponseUpgradabilityKUpgradable string = "kUpgradable"

	// AgentDeploymentStatusResponseUpgradabilityKCurrent captures enum value "kCurrent"
	AgentDeploymentStatusResponseUpgradabilityKCurrent string = "kCurrent"

	// AgentDeploymentStatusResponseUpgradabilityKUnknown captures enum value "kUnknown"
	AgentDeploymentStatusResponseUpgradabilityKUnknown string = "kUnknown"

	// AgentDeploymentStatusResponseUpgradabilityKNonUpgradableInvalidVersion captures enum value "kNonUpgradableInvalidVersion"
	AgentDeploymentStatusResponseUpgradabilityKNonUpgradableInvalidVersion string = "kNonUpgradableInvalidVersion"

	// AgentDeploymentStatusResponseUpgradabilityKNonUpgradableAgentIsNewer captures enum value "kNonUpgradableAgentIsNewer"
	AgentDeploymentStatusResponseUpgradabilityKNonUpgradableAgentIsNewer string = "kNonUpgradableAgentIsNewer"

	// AgentDeploymentStatusResponseUpgradabilityKNonUpgradableAgentIsOld captures enum value "kNonUpgradableAgentIsOld"
	AgentDeploymentStatusResponseUpgradabilityKNonUpgradableAgentIsOld string = "kNonUpgradableAgentIsOld"
)

// prop value enum
func (m *AgentDeploymentStatusResponse) validateUpgradabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentDeploymentStatusResponseTypeUpgradabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgentDeploymentStatusResponse) validateUpgradability(formats strfmt.Registry) error {
	if swag.IsZero(m.Upgradability) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpgradabilityEnum("upgradability", "body", *m.Upgradability); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this agent deployment status response based on context it is used
func (m *AgentDeploymentStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AgentDeploymentStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentDeploymentStatusResponse) UnmarshalBinary(b []byte) error {
	var res AgentDeploymentStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
