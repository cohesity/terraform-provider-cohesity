// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NoSQLRecoverJobParams no Sql recover job params
//
// swagger:model NoSqlRecoverJobParams
type NoSQLRecoverJobParams struct {

	// Net bandwidth bytes per second
	BandwidthBytesPerSecond *int64 `json:"bandwidthBytesPerSecond,omitempty"`

	// Params specific to cassandra recover job.
	CassandraRecoverJobParams *CassandraRecoverJobParams `json:"cassandraRecoverJobParams,omitempty"`

	// Max number of mappers
	Concurrency *int32 `json:"concurrency,omitempty"`

	// ENG-345531 (only for Cassandra currently) - whether to continue
	// restore if we encounter error for one of the objects
	ContinueRestoreOnError *bool `json:"continueRestoreOnError,omitempty"`

	// Params specific to couchbase recover job.
	CouchbaseRecoverJobParams *CouchbaseRecoverJobParams `json:"couchbaseRecoverJobParams,omitempty"`

	// Params specific to hbase recover job.
	HbaseRecoverJobParams *HBaseRecoverJobParams `json:"hbaseRecoverJobParams,omitempty"`

	// Params specific to hdfs recover job.
	HdfsRecoverJobParams *HdfsRecoverJobParams `json:"hdfsRecoverJobParams,omitempty"`

	// Params specific to hive recover job.
	HiveRecoverJobParams *HiveRecoverJobParams `json:"hiveRecoverJobParams,omitempty"`

	// Mirror params
	MirrorJobParams *NoSQLMirrorRecoveryJobParams `json:"mirrorJobParams,omitempty"`

	// Params specific to mongodb recover job.
	MongodbRecoverJobParams *MongoDBRecoverJobParams `json:"mongodbRecoverJobParams,omitempty"`

	// Whether to overwrite or keep the object if the object being recovered
	// already exists in the destination.
	Overwrite *bool `json:"overwrite,omitempty"`
}

// Validate validates this no Sql recover job params
func (m *NoSQLRecoverJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCassandraRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouchbaseRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMirrorJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbRecoverJobParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLRecoverJobParams) validateCassandraRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraRecoverJobParams) { // not required
		return nil
	}

	if m.CassandraRecoverJobParams != nil {
		if err := m.CassandraRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) validateCouchbaseRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CouchbaseRecoverJobParams) { // not required
		return nil
	}

	if m.CouchbaseRecoverJobParams != nil {
		if err := m.CouchbaseRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) validateHbaseRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseRecoverJobParams) { // not required
		return nil
	}

	if m.HbaseRecoverJobParams != nil {
		if err := m.HbaseRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) validateHdfsRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsRecoverJobParams) { // not required
		return nil
	}

	if m.HdfsRecoverJobParams != nil {
		if err := m.HdfsRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) validateHiveRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveRecoverJobParams) { // not required
		return nil
	}

	if m.HiveRecoverJobParams != nil {
		if err := m.HiveRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) validateMirrorJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MirrorJobParams) { // not required
		return nil
	}

	if m.MirrorJobParams != nil {
		if err := m.MirrorJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mirrorJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mirrorJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) validateMongodbRecoverJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MongodbRecoverJobParams) { // not required
		return nil
	}

	if m.MongodbRecoverJobParams != nil {
		if err := m.MongodbRecoverJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this no Sql recover job params based on the context it is used
func (m *NoSQLRecoverJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCassandraRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCouchbaseRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMirrorJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongodbRecoverJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLRecoverJobParams) contextValidateCassandraRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraRecoverJobParams != nil {

		if swag.IsZero(m.CassandraRecoverJobParams) { // not required
			return nil
		}

		if err := m.CassandraRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) contextValidateCouchbaseRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CouchbaseRecoverJobParams != nil {

		if swag.IsZero(m.CouchbaseRecoverJobParams) { // not required
			return nil
		}

		if err := m.CouchbaseRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) contextValidateHbaseRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseRecoverJobParams != nil {

		if swag.IsZero(m.HbaseRecoverJobParams) { // not required
			return nil
		}

		if err := m.HbaseRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) contextValidateHdfsRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsRecoverJobParams != nil {

		if swag.IsZero(m.HdfsRecoverJobParams) { // not required
			return nil
		}

		if err := m.HdfsRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) contextValidateHiveRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveRecoverJobParams != nil {

		if swag.IsZero(m.HiveRecoverJobParams) { // not required
			return nil
		}

		if err := m.HiveRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) contextValidateMirrorJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MirrorJobParams != nil {

		if swag.IsZero(m.MirrorJobParams) { // not required
			return nil
		}

		if err := m.MirrorJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mirrorJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mirrorJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *NoSQLRecoverJobParams) contextValidateMongodbRecoverJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MongodbRecoverJobParams != nil {

		if swag.IsZero(m.MongodbRecoverJobParams) { // not required
			return nil
		}

		if err := m.MongodbRecoverJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbRecoverJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbRecoverJobParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NoSQLRecoverJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NoSQLRecoverJobParams) UnmarshalBinary(b []byte) error {
	var res NoSQLRecoverJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
