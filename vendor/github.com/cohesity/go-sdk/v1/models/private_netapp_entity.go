// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateNetappEntity private netapp entity
//
// swagger:model PrivateNetappEntity
type PrivateNetappEntity struct {

	// As an optimization, this flag tells whether we can skip the step of
	// updating the UUIDs of volume entities. If the parent Netapp entity is
	// registered after 6.1, or there is no more old volume that is still using
	// its volume UUID in the EH, then this flag will be set to true.
	CanSkipUpdatingUuids *bool `json:"canSkipUpdatingUuids,omitempty"`

	// Specific information of a cluster, only valid for an entity of type
	// kCluster.
	ClusterInfo *PrivateClusterInfo `json:"clusterInfo,omitempty"`

	// Whether this entity is a top level entity. Because a top level entity can
	// either be a cluster or a vserver, thus we cannot tell only based on the
	// type.
	IsTopLevelEntity *bool `json:"isTopLevelEntity,omitempty"`

	// The license names installed in the cluster.
	LicenseVec []int32 `json:"licenseVec"`

	// The name of the entity.
	Name *string `json:"name,omitempty"`

	// The type of the entity.
	Type *int32 `json:"type,omitempty"`

	// The globally unique ID of this entity assigned by the Netapp server.
	UUID *string `json:"uuid,omitempty"`

	// Version number of netapp cluster.
	VersionTuple *EntityVersionTuple `json:"versionTuple,omitempty"`

	// Specific information of a volume, only valid for an entity of type
	// kVolume.
	VolumeInfo *PrivateVolumeInfo `json:"volumeInfo,omitempty"`

	// Specific information of a vserver, only valid for an entity of type
	// kVserver.
	VserverInfo *VserverInfo `json:"vserverInfo,omitempty"`

	// Vservers within a cluster. Only populated for virtualized storage
	// snapshots backup.
	VserverInfoVec []*VserverInfo `json:"vserverInfoVec"`
}

// Validate validates this private netapp entity
func (m *PrivateNetappEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionTuple(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVserverInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVserverInfoVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateNetappEntity) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetappEntity) validateVersionTuple(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionTuple) { // not required
		return nil
	}

	if m.VersionTuple != nil {
		if err := m.VersionTuple.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionTuple")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionTuple")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetappEntity) validateVolumeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeInfo) { // not required
		return nil
	}

	if m.VolumeInfo != nil {
		if err := m.VolumeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetappEntity) validateVserverInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VserverInfo) { // not required
		return nil
	}

	if m.VserverInfo != nil {
		if err := m.VserverInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vserverInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vserverInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetappEntity) validateVserverInfoVec(formats strfmt.Registry) error {
	if swag.IsZero(m.VserverInfoVec) { // not required
		return nil
	}

	for i := 0; i < len(m.VserverInfoVec); i++ {
		if swag.IsZero(m.VserverInfoVec[i]) { // not required
			continue
		}

		if m.VserverInfoVec[i] != nil {
			if err := m.VserverInfoVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vserverInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vserverInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this private netapp entity based on the context it is used
func (m *PrivateNetappEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionTuple(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVserverInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVserverInfoVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateNetappEntity) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {

		if swag.IsZero(m.ClusterInfo) { // not required
			return nil
		}

		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetappEntity) contextValidateVersionTuple(ctx context.Context, formats strfmt.Registry) error {

	if m.VersionTuple != nil {

		if swag.IsZero(m.VersionTuple) { // not required
			return nil
		}

		if err := m.VersionTuple.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionTuple")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionTuple")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetappEntity) contextValidateVolumeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeInfo != nil {

		if swag.IsZero(m.VolumeInfo) { // not required
			return nil
		}

		if err := m.VolumeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetappEntity) contextValidateVserverInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.VserverInfo != nil {

		if swag.IsZero(m.VserverInfo) { // not required
			return nil
		}

		if err := m.VserverInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vserverInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vserverInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetappEntity) contextValidateVserverInfoVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VserverInfoVec); i++ {

		if m.VserverInfoVec[i] != nil {

			if swag.IsZero(m.VserverInfoVec[i]) { // not required
				return nil
			}

			if err := m.VserverInfoVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vserverInfoVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vserverInfoVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateNetappEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateNetappEntity) UnmarshalBinary(b []byte) error {
	var res PrivateNetappEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
