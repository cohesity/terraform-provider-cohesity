// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SourceFiltersSourceFilter Message to capture a source filter. Listed below the supported filter
// types with examples.
//
// Plain text filter: { source_filter: "TestDatabase", is_regex: false}.
// Wildcard filter: { source_filter: "Test?Database*", is_regex: false}.
// Regex filter: { source_filter: "^Test.*Database$", is_regex: true}.
//
// swagger:model SourceFilters_SourceFilter
type SourceFiltersSourceFilter struct {

	// Determines if the filter is case sensitive or not. For some
	// environments (e.g. SQL), there may be a flag controlled default if the
	// field is not populated while for some environments (e.g. VMware), the
	// default will be based on the default value for this field.
	CaseSensitive *bool `json:"caseSensitive,omitempty"`

	// If true, this implies 'source_filter' is a regex filter. If false, it
	// will be treated as wildcard/plain text filter.
	IsRegex *bool `json:"isRegex,omitempty"`

	// This contains the filter string.
	SourceFilter *string `json:"sourceFilter,omitempty"`
}

// Validate validates this source filters source filter
func (m *SourceFiltersSourceFilter) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this source filters source filter based on context it is used
func (m *SourceFiltersSourceFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SourceFiltersSourceFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceFiltersSourceFilter) UnmarshalBinary(b []byte) error {
	var res SourceFiltersSourceFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
