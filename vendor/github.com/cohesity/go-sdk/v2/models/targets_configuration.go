// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TargetsConfiguration Specifies the replication, archival and cloud spin targets of Protection Policy.
//
// swagger:model TargetsConfiguration
type TargetsConfiguration struct {

	// replication targets
	ReplicationTargets []*ReplicationConfig `json:"replicationTargets"`

	// archival targets
	ArchivalTargets []*ArchivalConfig `json:"archivalTargets"`

	// cloud spin targets
	CloudSpinTargets []*CloudSpinConfig `json:"cloudSpinTargets"`

	// onprem deploy targets
	OnpremDeployTargets []*OnpremDeployConfig `json:"onpremDeployTargets"`

	// rpaas targets
	RpaasTargets []*RpaasConfig `json:"rpaasTargets"`
}

// Validate validates this targets configuration
func (m *TargetsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplicationTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivalTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudSpinTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnpremDeployTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRpaasTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetsConfiguration) validateReplicationTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationTargets); i++ {
		if swag.IsZero(m.ReplicationTargets[i]) { // not required
			continue
		}

		if m.ReplicationTargets[i] != nil {
			if err := m.ReplicationTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicationTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicationTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TargetsConfiguration) validateArchivalTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchivalTargets); i++ {
		if swag.IsZero(m.ArchivalTargets[i]) { // not required
			continue
		}

		if m.ArchivalTargets[i] != nil {
			if err := m.ArchivalTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("archivalTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("archivalTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TargetsConfiguration) validateCloudSpinTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudSpinTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudSpinTargets); i++ {
		if swag.IsZero(m.CloudSpinTargets[i]) { // not required
			continue
		}

		if m.CloudSpinTargets[i] != nil {
			if err := m.CloudSpinTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudSpinTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudSpinTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TargetsConfiguration) validateOnpremDeployTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.OnpremDeployTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.OnpremDeployTargets); i++ {
		if swag.IsZero(m.OnpremDeployTargets[i]) { // not required
			continue
		}

		if m.OnpremDeployTargets[i] != nil {
			if err := m.OnpremDeployTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("onpremDeployTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("onpremDeployTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TargetsConfiguration) validateRpaasTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.RpaasTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.RpaasTargets); i++ {
		if swag.IsZero(m.RpaasTargets[i]) { // not required
			continue
		}

		if m.RpaasTargets[i] != nil {
			if err := m.RpaasTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rpaasTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rpaasTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this targets configuration based on the context it is used
func (m *TargetsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReplicationTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchivalTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudSpinTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnpremDeployTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRpaasTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetsConfiguration) contextValidateReplicationTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicationTargets); i++ {

		if m.ReplicationTargets[i] != nil {

			if swag.IsZero(m.ReplicationTargets[i]) { // not required
				return nil
			}

			if err := m.ReplicationTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicationTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicationTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TargetsConfiguration) contextValidateArchivalTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArchivalTargets); i++ {

		if m.ArchivalTargets[i] != nil {

			if swag.IsZero(m.ArchivalTargets[i]) { // not required
				return nil
			}

			if err := m.ArchivalTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("archivalTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("archivalTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TargetsConfiguration) contextValidateCloudSpinTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudSpinTargets); i++ {

		if m.CloudSpinTargets[i] != nil {

			if swag.IsZero(m.CloudSpinTargets[i]) { // not required
				return nil
			}

			if err := m.CloudSpinTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudSpinTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudSpinTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TargetsConfiguration) contextValidateOnpremDeployTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OnpremDeployTargets); i++ {

		if m.OnpremDeployTargets[i] != nil {

			if swag.IsZero(m.OnpremDeployTargets[i]) { // not required
				return nil
			}

			if err := m.OnpremDeployTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("onpremDeployTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("onpremDeployTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TargetsConfiguration) contextValidateRpaasTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RpaasTargets); i++ {

		if m.RpaasTargets[i] != nil {

			if swag.IsZero(m.RpaasTargets[i]) { // not required
				return nil
			}

			if err := m.RpaasTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rpaasTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rpaasTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetsConfiguration) UnmarshalBinary(b []byte) error {
	var res TargetsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
