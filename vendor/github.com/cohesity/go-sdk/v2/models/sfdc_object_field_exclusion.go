// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SfdcObjectFieldExclusion Sfdc Object Field Exclusion.
//
// Specifies the field names to be excluded for the object.
//
// swagger:model SfdcObjectFieldExclusion
type SfdcObjectFieldExclusion struct {

	// Specifies the id of the object in which some fields are to be excluded. This should be a leaf level object.
	ObjectID int64 `json:"objectId,omitempty"`

	// Specifies the list of Sfdc API names of the fields to be excluded in this object.
	// Unique: true
	ExcludeFieldNames []string `json:"excludeFieldNames"`
}

// Validate validates this sfdc object field exclusion
func (m *SfdcObjectFieldExclusion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExcludeFieldNames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcObjectFieldExclusion) validateExcludeFieldNames(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeFieldNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludeFieldNames", "body", m.ExcludeFieldNames); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sfdc object field exclusion based on context it is used
func (m *SfdcObjectFieldExclusion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SfdcObjectFieldExclusion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcObjectFieldExclusion) UnmarshalBinary(b []byte) error {
	var res SfdcObjectFieldExclusion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
