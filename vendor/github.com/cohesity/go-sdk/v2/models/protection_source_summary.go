// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectionSourceSummary ProtectedSourceSummary is the summary of all the Protection Runs for the Protection groups using the Specified Protection Policy. This is only populated for a policy of type kRPO.
//
// swagger:model ProtectionSourceSummary
type ProtectionSourceSummary struct {

	// Specifies the status of the protection group
	IsProtectionGroupPaused *bool `json:"isProtectionGroupPaused,omitempty"`

	// Specifies the time at which the next Protection Run is scheduled for the given Protection Source in Unix epoch Time
	NextProtectionRunTimeUsecs *int64 `json:"nextProtectionRunTimeUsecs,omitempty"`

	// Snapshot, replication, archival results for each object.
	LastProtectionRun *ProtectionGroupRun `json:"lastProtectionRun,omitempty"`

	// Specifies the entity summary information.
	Object *Object `json:"object,omitempty"`
}

// Validate validates this protection source summary
func (m *ProtectionSourceSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastProtectionRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSourceSummary) validateLastProtectionRun(formats strfmt.Registry) error {
	if swag.IsZero(m.LastProtectionRun) { // not required
		return nil
	}

	if m.LastProtectionRun != nil {
		if err := m.LastProtectionRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastProtectionRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastProtectionRun")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceSummary) validateObject(formats strfmt.Registry) error {
	if swag.IsZero(m.Object) { // not required
		return nil
	}

	if m.Object != nil {
		if err := m.Object.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this protection source summary based on the context it is used
func (m *ProtectionSourceSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastProtectionRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSourceSummary) contextValidateLastProtectionRun(ctx context.Context, formats strfmt.Registry) error {

	if m.LastProtectionRun != nil {

		if swag.IsZero(m.LastProtectionRun) { // not required
			return nil
		}

		if err := m.LastProtectionRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastProtectionRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastProtectionRun")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSourceSummary) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if m.Object != nil {

		if swag.IsZero(m.Object) { // not required
			return nil
		}

		if err := m.Object.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionSourceSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionSourceSummary) UnmarshalBinary(b []byte) error {
	var res ProtectionSourceSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
