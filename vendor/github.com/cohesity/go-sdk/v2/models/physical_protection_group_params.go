// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhysicalProtectionGroupParams Physical Protection Group Params.
//
// Specifies the parameters specific to Physical Protection Group.
//
// swagger:model PhysicalProtectionGroupParams
type PhysicalProtectionGroupParams struct {

	// Specifies the Physical Protection Group type.
	// Required: true
	// Enum: ["kFile","kVolume"]
	ProtectionType *string `json:"protectionType"`

	// Specifies the Volume based Physical Protection Group params.
	VolumeProtectionTypeParams *PhysicalVolumeProtectionGroupParams `json:"volumeProtectionTypeParams,omitempty"`

	// Specifies the File based Physical Protection Group params.
	FileProtectionTypeParams *PhysicalFileProtectionGroupParams `json:"fileProtectionTypeParams,omitempty"`
}

// Validate validates this physical protection group params
func (m *PhysicalProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var physicalProtectionGroupParamsTypeProtectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kFile","kVolume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		physicalProtectionGroupParamsTypeProtectionTypePropEnum = append(physicalProtectionGroupParamsTypeProtectionTypePropEnum, v)
	}
}

const (

	// PhysicalProtectionGroupParamsProtectionTypeKFile captures enum value "kFile"
	PhysicalProtectionGroupParamsProtectionTypeKFile string = "kFile"

	// PhysicalProtectionGroupParamsProtectionTypeKVolume captures enum value "kVolume"
	PhysicalProtectionGroupParamsProtectionTypeKVolume string = "kVolume"
)

// prop value enum
func (m *PhysicalProtectionGroupParams) validateProtectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, physicalProtectionGroupParamsTypeProtectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PhysicalProtectionGroupParams) validateProtectionType(formats strfmt.Registry) error {

	if err := validate.Required("protectionType", "body", m.ProtectionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtectionTypeEnum("protectionType", "body", *m.ProtectionType); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalProtectionGroupParams) validateVolumeProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeProtectionTypeParams) { // not required
		return nil
	}

	if m.VolumeProtectionTypeParams != nil {
		if err := m.VolumeProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalProtectionGroupParams) validateFileProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FileProtectionTypeParams) { // not required
		return nil
	}

	if m.FileProtectionTypeParams != nil {
		if err := m.FileProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this physical protection group params based on the context it is used
func (m *PhysicalProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVolumeProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalProtectionGroupParams) contextValidateVolumeProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeProtectionTypeParams != nil {

		if swag.IsZero(m.VolumeProtectionTypeParams) { // not required
			return nil
		}

		if err := m.VolumeProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalProtectionGroupParams) contextValidateFileProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FileProtectionTypeParams != nil {

		if swag.IsZero(m.FileProtectionTypeParams) { // not required
			return nil
		}

		if err := m.FileProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res PhysicalProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
