// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvSpecificObjectProtectionResponseParams Specifies the parameters which are specific to adapter identified by enviournment.
//
// swagger:model EnvSpecificObjectProtectionResponseParams
type EnvSpecificObjectProtectionResponseParams struct {

	// Specifies the environment for current object.
	// Enum: ["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsRDSPostgres","kAwsAuroraPostgres","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc","kO365ExchangeCSM","kO365OneDriveCSM","kO365SharepointCSM"]
	Environment *string `json:"environment,omitempty"`

	// Specifies the parameters which are specific to VMware related Object Backup.
	VmwareParams *VmwareObjectProtectionResponseParams `json:"vmwareParams,omitempty"`

	// Specifies the parameters which are specific to Generic Nas related Object Backup.
	GenericNasParams *GenericNasObjectProtectionResponseParams `json:"genericNasParams,omitempty"`

	// Specifies the parameters which are specific to Gpfs related Object Backup.
	GpfsParams *GpfsObjectProtectionResponseParams `json:"gpfsParams,omitempty"`

	// Specifies the parameters which are specific to Elastifile related Object Backup.
	ElastifileParams *ElastifileObjectProtectionResponseParams `json:"elastifileParams,omitempty"`

	// Specifies the parameters which are specific to Netapp related Object Backup.
	NetappParams *NetappObjectProtectionResponseParams `json:"netappParams,omitempty"`

	// Specifies the parameters which are specific to Isilon related Object Backup.
	IsilonParams *IsilonObjectProtectionResponseParams `json:"isilonParams,omitempty"`

	// Specifies the parameters which are specific to Flashblade related Object Backup.
	FlashbladeParams *FlashbladeObjectProtectionResponseParams `json:"flashbladeParams,omitempty"`

	// Specifies the parameters which are specific to Mssql related Object Backup.
	MssqlParams *MssqlObjectProtectionResponseParams `json:"mssqlParams,omitempty"`

	// Specifies the parameters which are specific to Oracle related Object Backup.
	OracleParams *OracleObjectProtectionResponseParams `json:"oracleParams,omitempty"`

	// Specifies the parameters which are specific to Microsoft 365 related Object Backup.
	Office365Params *Office365ObjectProtectionResponseParams `json:"office365Params,omitempty"`

	// Specifies the parameters which are specific to Aws related Object Backup.
	AwsParams *AwsObjectProtectionResponseParams `json:"awsParams,omitempty"`

	// Specifies the parameters which are specific to HyperV related Object Backup.
	HypervParams *HyperVObjectProtectionResponseParams `json:"hypervParams,omitempty"`

	// physical params
	PhysicalParams *PhysicalObjectProtectionResponseParams `json:"physicalParams,omitempty"`

	// Specifies the parameters which are specific to Sfdc related Object Backup.
	SfdcParams *SfdcObjectProtectionResponseParams `json:"sfdcParams,omitempty"`

	// Specifies the parameters which are specific to Universal Data Adapter related Object Backup.
	UdaParams *UdaObjectProtectionResponseParams `json:"udaParams,omitempty"`

	// Specifies the parameters which are specific to SAP HANA related Object Backup.
	SapHanaParams *SapHanaObjectProtectionResponseParams `json:"sapHanaParams,omitempty"`

	// Specifies the parameters which are specific to Azure related Object Backup.
	AzureParams *AzureObjectProtectionResponseParams `json:"azureParams,omitempty"`
}

// Validate validates this env specific object protection response params
func (m *EnvSpecificObjectProtectionResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericNasParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpfsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElastifileParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlashbladeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMssqlParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365Params(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSapHanaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var envSpecificObjectProtectionResponseParamsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsRDSPostgres","kAwsAuroraPostgres","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc","kO365ExchangeCSM","kO365OneDriveCSM","kO365SharepointCSM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		envSpecificObjectProtectionResponseParamsTypeEnvironmentPropEnum = append(envSpecificObjectProtectionResponseParamsTypeEnvironmentPropEnum, v)
	}
}

const (

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKVMware captures enum value "kVMware"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKVMware string = "kVMware"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKHyperV captures enum value "kHyperV"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKHyperV string = "kHyperV"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKVCD captures enum value "kVCD"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKVCD string = "kVCD"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAzure captures enum value "kAzure"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAzure string = "kAzure"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKGCP captures enum value "kGCP"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKGCP string = "kGCP"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKKVM captures enum value "kKVM"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKKVM string = "kKVM"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAcropolis captures enum value "kAcropolis"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAcropolis string = "kAcropolis"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAWS captures enum value "kAWS"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAWS string = "kAWS"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAWSNative captures enum value "kAWSNative"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAWSNative string = "kAWSNative"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAwsS3 captures enum value "kAwsS3"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAwsS3 string = "kAwsS3"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAWSSnapshotManager captures enum value "kAWSSnapshotManager"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAWSSnapshotManager string = "kAWSSnapshotManager"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKRDSSnapshotManager captures enum value "kRDSSnapshotManager"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKRDSSnapshotManager string = "kRDSSnapshotManager"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAuroraSnapshotManager captures enum value "kAuroraSnapshotManager"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAuroraSnapshotManager string = "kAuroraSnapshotManager"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAwsRDSPostgresBackup captures enum value "kAwsRDSPostgresBackup"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAwsRDSPostgresBackup string = "kAwsRDSPostgresBackup"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAwsRDSPostgres captures enum value "kAwsRDSPostgres"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAwsRDSPostgres string = "kAwsRDSPostgres"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAwsAuroraPostgres captures enum value "kAwsAuroraPostgres"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAwsAuroraPostgres string = "kAwsAuroraPostgres"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAzureNative captures enum value "kAzureNative"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAzureNative string = "kAzureNative"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAzureSQL captures enum value "kAzureSQL"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAzureSQL string = "kAzureSQL"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAzureSnapshotManager captures enum value "kAzureSnapshotManager"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAzureSnapshotManager string = "kAzureSnapshotManager"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKPhysical captures enum value "kPhysical"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKPhysical string = "kPhysical"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKPhysicalFiles captures enum value "kPhysicalFiles"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKPhysicalFiles string = "kPhysicalFiles"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKGPFS captures enum value "kGPFS"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKGPFS string = "kGPFS"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKElastifile captures enum value "kElastifile"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKElastifile string = "kElastifile"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKNetapp captures enum value "kNetapp"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKNetapp string = "kNetapp"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKGenericNas captures enum value "kGenericNas"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKGenericNas string = "kGenericNas"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKIsilon captures enum value "kIsilon"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKIsilon string = "kIsilon"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKFlashBlade captures enum value "kFlashBlade"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKFlashBlade string = "kFlashBlade"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKPure captures enum value "kPure"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKPure string = "kPure"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKSQL captures enum value "kSQL"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKSQL string = "kSQL"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKExchange captures enum value "kExchange"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKExchange string = "kExchange"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKAD captures enum value "kAD"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKAD string = "kAD"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKOracle captures enum value "kOracle"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKOracle string = "kOracle"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKView captures enum value "kView"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKView string = "kView"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKRemoteAdapter captures enum value "kRemoteAdapter"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKRemoteAdapter string = "kRemoteAdapter"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKO365 captures enum value "kO365"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKO365 string = "kO365"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKO365PublicFolders captures enum value "kO365PublicFolders"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKO365PublicFolders string = "kO365PublicFolders"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKO365Teams captures enum value "kO365Teams"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKO365Teams string = "kO365Teams"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKO365Group captures enum value "kO365Group"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKO365Group string = "kO365Group"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKO365Exchange captures enum value "kO365Exchange"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKO365Exchange string = "kO365Exchange"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKO365OneDrive captures enum value "kO365OneDrive"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKO365OneDrive string = "kO365OneDrive"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKO365Sharepoint captures enum value "kO365Sharepoint"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKO365Sharepoint string = "kO365Sharepoint"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKKubernetes captures enum value "kKubernetes"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKKubernetes string = "kKubernetes"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKCassandra captures enum value "kCassandra"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKCassandra string = "kCassandra"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKMongoDB captures enum value "kMongoDB"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKMongoDB string = "kMongoDB"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKCouchbase captures enum value "kCouchbase"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKCouchbase string = "kCouchbase"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKHdfs captures enum value "kHdfs"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKHdfs string = "kHdfs"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKHive captures enum value "kHive"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKHive string = "kHive"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKHBase captures enum value "kHBase"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKHBase string = "kHBase"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKSAPHANA captures enum value "kSAPHANA"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKSAPHANA string = "kSAPHANA"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKUDA captures enum value "kUDA"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKUDA string = "kUDA"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKSfdc captures enum value "kSfdc"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKSfdc string = "kSfdc"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKO365ExchangeCSM captures enum value "kO365ExchangeCSM"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKO365ExchangeCSM string = "kO365ExchangeCSM"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKO365OneDriveCSM captures enum value "kO365OneDriveCSM"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKO365OneDriveCSM string = "kO365OneDriveCSM"

	// EnvSpecificObjectProtectionResponseParamsEnvironmentKO365SharepointCSM captures enum value "kO365SharepointCSM"
	EnvSpecificObjectProtectionResponseParamsEnvironmentKO365SharepointCSM string = "kO365SharepointCSM"
)

// prop value enum
func (m *EnvSpecificObjectProtectionResponseParams) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, envSpecificObjectProtectionResponseParamsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateGenericNasParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GenericNasParams) { // not required
		return nil
	}

	if m.GenericNasParams != nil {
		if err := m.GenericNasParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateGpfsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GpfsParams) { // not required
		return nil
	}

	if m.GpfsParams != nil {
		if err := m.GpfsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateElastifileParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ElastifileParams) { // not required
		return nil
	}

	if m.ElastifileParams != nil {
		if err := m.ElastifileParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateNetappParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NetappParams) { // not required
		return nil
	}

	if m.NetappParams != nil {
		if err := m.NetappParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateIsilonParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateFlashbladeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FlashbladeParams) { // not required
		return nil
	}

	if m.FlashbladeParams != nil {
		if err := m.FlashbladeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateMssqlParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MssqlParams) { // not required
		return nil
	}

	if m.MssqlParams != nil {
		if err := m.MssqlParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateOracleParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleParams) { // not required
		return nil
	}

	if m.OracleParams != nil {
		if err := m.OracleParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateOffice365Params(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365Params) { // not required
		return nil
	}

	if m.Office365Params != nil {
		if err := m.Office365Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Params")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateAwsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsParams) { // not required
		return nil
	}

	if m.AwsParams != nil {
		if err := m.AwsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateHypervParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParams) { // not required
		return nil
	}

	if m.HypervParams != nil {
		if err := m.HypervParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validatePhysicalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateSfdcParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcParams) { // not required
		return nil
	}

	if m.SfdcParams != nil {
		if err := m.SfdcParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateUdaParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaParams) { // not required
		return nil
	}

	if m.UdaParams != nil {
		if err := m.UdaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateSapHanaParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SapHanaParams) { // not required
		return nil
	}

	if m.SapHanaParams != nil {
		if err := m.SapHanaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapHanaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) validateAzureParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureParams) { // not required
		return nil
	}

	if m.AzureParams != nil {
		if err := m.AzureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this env specific object protection response params based on the context it is used
func (m *EnvSpecificObjectProtectionResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenericNasParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpfsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElastifileParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlashbladeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMssqlParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSapHanaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateGenericNasParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericNasParams != nil {

		if swag.IsZero(m.GenericNasParams) { // not required
			return nil
		}

		if err := m.GenericNasParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateGpfsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GpfsParams != nil {

		if swag.IsZero(m.GpfsParams) { // not required
			return nil
		}

		if err := m.GpfsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateElastifileParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ElastifileParams != nil {

		if swag.IsZero(m.ElastifileParams) { // not required
			return nil
		}

		if err := m.ElastifileParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateNetappParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NetappParams != nil {

		if swag.IsZero(m.NetappParams) { // not required
			return nil
		}

		if err := m.NetappParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateFlashbladeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FlashbladeParams != nil {

		if swag.IsZero(m.FlashbladeParams) { // not required
			return nil
		}

		if err := m.FlashbladeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateMssqlParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MssqlParams != nil {

		if swag.IsZero(m.MssqlParams) { // not required
			return nil
		}

		if err := m.MssqlParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateOracleParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleParams != nil {

		if swag.IsZero(m.OracleParams) { // not required
			return nil
		}

		if err := m.OracleParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateOffice365Params(ctx context.Context, formats strfmt.Registry) error {

	if m.Office365Params != nil {

		if swag.IsZero(m.Office365Params) { // not required
			return nil
		}

		if err := m.Office365Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Params")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateAwsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsParams != nil {

		if swag.IsZero(m.AwsParams) { // not required
			return nil
		}

		if err := m.AwsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateHypervParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParams != nil {

		if swag.IsZero(m.HypervParams) { // not required
			return nil
		}

		if err := m.HypervParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateSfdcParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcParams != nil {

		if swag.IsZero(m.SfdcParams) { // not required
			return nil
		}

		if err := m.SfdcParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateUdaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaParams != nil {

		if swag.IsZero(m.UdaParams) { // not required
			return nil
		}

		if err := m.UdaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateSapHanaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SapHanaParams != nil {

		if swag.IsZero(m.SapHanaParams) { // not required
			return nil
		}

		if err := m.SapHanaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapHanaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionResponseParams) contextValidateAzureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureParams != nil {

		if swag.IsZero(m.AzureParams) { // not required
			return nil
		}

		if err := m.AzureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvSpecificObjectProtectionResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvSpecificObjectProtectionResponseParams) UnmarshalBinary(b []byte) error {
	var res EnvSpecificObjectProtectionResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
