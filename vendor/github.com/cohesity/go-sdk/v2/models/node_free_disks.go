// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeFreeDisks NodeFreeDisks
//
// Sepcifies the free disks of a node.
//
// swagger:model NodeFreeDisks
type NodeFreeDisks struct {

	// Specifies the id of a node.
	// Required: true
	NodeID *int64 `json:"nodeId"`

	// Specifies list of free disks of node.
	// Required: true
	FreeDisks []*FreeDisk `json:"freeDisks"`

	// Chassis serial number.
	ChassisSerial *string `json:"chassisSerial,omitempty"`

	// Slot number of node
	Slot *int64 `json:"slot,omitempty"`

	// Error message of disks assimilation request.
	// Read Only: true
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// Validate validates this node free disks
func (m *NodeFreeDisks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreeDisks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeFreeDisks) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("nodeId", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

func (m *NodeFreeDisks) validateFreeDisks(formats strfmt.Registry) error {

	if err := validate.Required("freeDisks", "body", m.FreeDisks); err != nil {
		return err
	}

	for i := 0; i < len(m.FreeDisks); i++ {
		if swag.IsZero(m.FreeDisks[i]) { // not required
			continue
		}

		if m.FreeDisks[i] != nil {
			if err := m.FreeDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("freeDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("freeDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this node free disks based on the context it is used
func (m *NodeFreeDisks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFreeDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeFreeDisks) contextValidateFreeDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FreeDisks); i++ {

		if m.FreeDisks[i] != nil {

			if swag.IsZero(m.FreeDisks[i]) { // not required
				return nil
			}

			if err := m.FreeDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("freeDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("freeDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeFreeDisks) contextValidateErrorMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorMessage", "body", m.ErrorMessage); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeFreeDisks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeFreeDisks) UnmarshalBinary(b []byte) error {
	var res NodeFreeDisks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
