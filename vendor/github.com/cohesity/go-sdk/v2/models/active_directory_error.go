// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActiveDirectoryError Specifies the Active Directory error object.
//
// swagger:model ActiveDirectoryError
type ActiveDirectoryError struct {

	// Specifies the error code.
	// Enum: ["MachineAccountNeedFixing"]
	ErrorCode *string `json:"errorCode,omitempty"`

	// Specifies the error message corresponding to the error code.
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// Validate validates this active directory error
func (m *ActiveDirectoryError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var activeDirectoryErrorTypeErrorCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MachineAccountNeedFixing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		activeDirectoryErrorTypeErrorCodePropEnum = append(activeDirectoryErrorTypeErrorCodePropEnum, v)
	}
}

const (

	// ActiveDirectoryErrorErrorCodeMachineAccountNeedFixing captures enum value "MachineAccountNeedFixing"
	ActiveDirectoryErrorErrorCodeMachineAccountNeedFixing string = "MachineAccountNeedFixing"
)

// prop value enum
func (m *ActiveDirectoryError) validateErrorCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, activeDirectoryErrorTypeErrorCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActiveDirectoryError) validateErrorCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorCodeEnum("errorCode", "body", *m.ErrorCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this active directory error based on context it is used
func (m *ActiveDirectoryError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ActiveDirectoryError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActiveDirectoryError) UnmarshalBinary(b []byte) error {
	var res ActiveDirectoryError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
