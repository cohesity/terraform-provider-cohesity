// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiffGraphNodeRelation Definition of graph node relation difference between two snapshots.
//
// swagger:model DiffGraphNodeRelation
type DiffGraphNodeRelation struct {

	// Specifies the difference in the graph node info.
	DiffGraphNode struct {
		DiffGraphNode
	} `json:"diffGraphNode,omitempty"`

	// Specifies Unique ID of the source node.
	// Read Only: true
	SrcNodeID string `json:"srcNodeId,omitempty"`

	// Specifies the list of all the edges which are unmodified.
	UnmodifiedRelations []*DiffGraphNodeRelationUnmodifiedRelationsItems0 `json:"unmodifiedRelations"`

	// Specifies the all pair of edges/node relations which are added, deleted or modified
	DiffRelations []*DiffGraphNodeRelationDiffRelationsItems0 `json:"diffRelations"`
}

// Validate validates this diff graph node relation
func (m *DiffGraphNodeRelation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiffGraphNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnmodifiedRelations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiffRelations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiffGraphNodeRelation) validateDiffGraphNode(formats strfmt.Registry) error {
	if swag.IsZero(m.DiffGraphNode) { // not required
		return nil
	}

	return nil
}

func (m *DiffGraphNodeRelation) validateUnmodifiedRelations(formats strfmt.Registry) error {
	if swag.IsZero(m.UnmodifiedRelations) { // not required
		return nil
	}

	for i := 0; i < len(m.UnmodifiedRelations); i++ {
		if swag.IsZero(m.UnmodifiedRelations[i]) { // not required
			continue
		}

		if m.UnmodifiedRelations[i] != nil {
			if err := m.UnmodifiedRelations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unmodifiedRelations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unmodifiedRelations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiffGraphNodeRelation) validateDiffRelations(formats strfmt.Registry) error {
	if swag.IsZero(m.DiffRelations) { // not required
		return nil
	}

	for i := 0; i < len(m.DiffRelations); i++ {
		if swag.IsZero(m.DiffRelations[i]) { // not required
			continue
		}

		if m.DiffRelations[i] != nil {
			if err := m.DiffRelations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diffRelations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diffRelations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this diff graph node relation based on the context it is used
func (m *DiffGraphNodeRelation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiffGraphNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSrcNodeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnmodifiedRelations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiffRelations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiffGraphNodeRelation) contextValidateDiffGraphNode(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DiffGraphNodeRelation) contextValidateSrcNodeID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "srcNodeId", "body", string(m.SrcNodeID)); err != nil {
		return err
	}

	return nil
}

func (m *DiffGraphNodeRelation) contextValidateUnmodifiedRelations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UnmodifiedRelations); i++ {

		if m.UnmodifiedRelations[i] != nil {

			if swag.IsZero(m.UnmodifiedRelations[i]) { // not required
				return nil
			}

			if err := m.UnmodifiedRelations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unmodifiedRelations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unmodifiedRelations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiffGraphNodeRelation) contextValidateDiffRelations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiffRelations); i++ {

		if m.DiffRelations[i] != nil {

			if swag.IsZero(m.DiffRelations[i]) { // not required
				return nil
			}

			if err := m.DiffRelations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diffRelations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diffRelations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiffGraphNodeRelation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiffGraphNodeRelation) UnmarshalBinary(b []byte) error {
	var res DiffGraphNodeRelation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DiffGraphNodeRelationDiffRelationsItems0 diff graph node relation diff relations items0
//
// swagger:model DiffGraphNodeRelationDiffRelationsItems0
type DiffGraphNodeRelationDiffRelationsItems0 struct {
	DiffGraphNodeEdge
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DiffGraphNodeRelationDiffRelationsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DiffGraphNodeEdge
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DiffGraphNodeEdge = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DiffGraphNodeRelationDiffRelationsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.DiffGraphNodeEdge)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this diff graph node relation diff relations items0
func (m *DiffGraphNodeRelationDiffRelationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DiffGraphNodeEdge
	if err := m.DiffGraphNodeEdge.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this diff graph node relation diff relations items0 based on the context it is used
func (m *DiffGraphNodeRelationDiffRelationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DiffGraphNodeEdge
	if err := m.DiffGraphNodeEdge.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DiffGraphNodeRelationDiffRelationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiffGraphNodeRelationDiffRelationsItems0) UnmarshalBinary(b []byte) error {
	var res DiffGraphNodeRelationDiffRelationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DiffGraphNodeRelationUnmodifiedRelationsItems0 diff graph node relation unmodified relations items0
//
// swagger:model DiffGraphNodeRelationUnmodifiedRelationsItems0
type DiffGraphNodeRelationUnmodifiedRelationsItems0 struct {
	GraphEdge
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DiffGraphNodeRelationUnmodifiedRelationsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GraphEdge
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GraphEdge = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DiffGraphNodeRelationUnmodifiedRelationsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.GraphEdge)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this diff graph node relation unmodified relations items0
func (m *DiffGraphNodeRelationUnmodifiedRelationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GraphEdge
	if err := m.GraphEdge.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this diff graph node relation unmodified relations items0 based on the context it is used
func (m *DiffGraphNodeRelationUnmodifiedRelationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GraphEdge
	if err := m.GraphEdge.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DiffGraphNodeRelationUnmodifiedRelationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiffGraphNodeRelationUnmodifiedRelationsItems0) UnmarshalBinary(b []byte) error {
	var res DiffGraphNodeRelationUnmodifiedRelationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
