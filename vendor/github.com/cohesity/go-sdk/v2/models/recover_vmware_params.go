// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverVmwareParams Recover VMware environment params.
//
// Specifies the recovery options specific to VMware environment.
//
// swagger:model RecoverVmwareParams
type RecoverVmwareParams struct {

	// Specifies the list of recover Object parameters. This property is mandatory for all recovery action types except recover vms. While recovering VMs, a user can specify snapshots of VM's or a Protection Group Run details to recover all the VM's that are backed up by that Run. For recovering files, specifies the object contains the file to recover.
	Objects []*RecoverVmwareSnapshotParams `json:"objects"`

	// Specifies the type of recovery action to be performed.
	// Required: true
	// Enum: ["RecoverVMs","RecoverFiles","InstantVolumeMount","RecoverVmDisks","RecoverVApps","RecoverVAppTemplates","UptierSnapshot"]
	RecoveryAction *string `json:"recoveryAction"`

	// Specifies the parameters to download files and folders.
	DownloadFileAndFolderParams *CommonDownloadFileAndFolderParams `json:"downloadFileAndFolderParams,omitempty"`

	// Specifies the parameters to mount VMware Volumes.
	MountVolumeParams *MountVmwareVolumeParams `json:"mountVolumeParams,omitempty"`

	// Specifies the parameters to recover files and folders.
	RecoverFileAndFolderParams *RecoverVMwareFileAndFolderParams `json:"recoverFileAndFolderParams,omitempty"`

	// Specifies the parameters to recover a VMware vApp.
	RecoverVAppParams *RecoverVmwareVAppParams `json:"recoverVAppParams,omitempty"`

	// Specifies the parameters to recover a VMware vApp template.
	RecoverVAppTemplateParams *RecoverVmwareVAppTemplateParams `json:"recoverVAppTemplateParams,omitempty"`

	// Specifies the parameters to recover VMware Disks.
	RecoverVMDiskParams *RecoverVmwareDiskParams `json:"recoverVmDiskParams,omitempty"`

	// Specifies the parameters to recover VMware VM.
	RecoverVMParams *RecoverVmwareVMParams `json:"recoverVmParams,omitempty"`
}

// Validate validates this recover vmware params
func (m *RecoverVmwareParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadFileAndFolderParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountVolumeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverFileAndFolderParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverVAppParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverVAppTemplateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverVMDiskParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverVMParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVmwareParams) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var recoverVmwareParamsTypeRecoveryActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RecoverVMs","RecoverFiles","InstantVolumeMount","RecoverVmDisks","RecoverVApps","RecoverVAppTemplates","UptierSnapshot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverVmwareParamsTypeRecoveryActionPropEnum = append(recoverVmwareParamsTypeRecoveryActionPropEnum, v)
	}
}

const (

	// RecoverVmwareParamsRecoveryActionRecoverVMs captures enum value "RecoverVMs"
	RecoverVmwareParamsRecoveryActionRecoverVMs string = "RecoverVMs"

	// RecoverVmwareParamsRecoveryActionRecoverFiles captures enum value "RecoverFiles"
	RecoverVmwareParamsRecoveryActionRecoverFiles string = "RecoverFiles"

	// RecoverVmwareParamsRecoveryActionInstantVolumeMount captures enum value "InstantVolumeMount"
	RecoverVmwareParamsRecoveryActionInstantVolumeMount string = "InstantVolumeMount"

	// RecoverVmwareParamsRecoveryActionRecoverVMDisks captures enum value "RecoverVmDisks"
	RecoverVmwareParamsRecoveryActionRecoverVMDisks string = "RecoverVmDisks"

	// RecoverVmwareParamsRecoveryActionRecoverVApps captures enum value "RecoverVApps"
	RecoverVmwareParamsRecoveryActionRecoverVApps string = "RecoverVApps"

	// RecoverVmwareParamsRecoveryActionRecoverVAppTemplates captures enum value "RecoverVAppTemplates"
	RecoverVmwareParamsRecoveryActionRecoverVAppTemplates string = "RecoverVAppTemplates"

	// RecoverVmwareParamsRecoveryActionUptierSnapshot captures enum value "UptierSnapshot"
	RecoverVmwareParamsRecoveryActionUptierSnapshot string = "UptierSnapshot"
)

// prop value enum
func (m *RecoverVmwareParams) validateRecoveryActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverVmwareParamsTypeRecoveryActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverVmwareParams) validateRecoveryAction(formats strfmt.Registry) error {

	if err := validate.Required("recoveryAction", "body", m.RecoveryAction); err != nil {
		return err
	}

	// value enum
	if err := m.validateRecoveryActionEnum("recoveryAction", "body", *m.RecoveryAction); err != nil {
		return err
	}

	return nil
}

func (m *RecoverVmwareParams) validateDownloadFileAndFolderParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DownloadFileAndFolderParams) { // not required
		return nil
	}

	if m.DownloadFileAndFolderParams != nil {
		if err := m.DownloadFileAndFolderParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadFileAndFolderParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadFileAndFolderParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) validateMountVolumeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MountVolumeParams) { // not required
		return nil
	}

	if m.MountVolumeParams != nil {
		if err := m.MountVolumeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountVolumeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountVolumeParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) validateRecoverFileAndFolderParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverFileAndFolderParams) { // not required
		return nil
	}

	if m.RecoverFileAndFolderParams != nil {
		if err := m.RecoverFileAndFolderParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverFileAndFolderParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverFileAndFolderParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) validateRecoverVAppParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverVAppParams) { // not required
		return nil
	}

	if m.RecoverVAppParams != nil {
		if err := m.RecoverVAppParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVAppParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) validateRecoverVAppTemplateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverVAppTemplateParams) { // not required
		return nil
	}

	if m.RecoverVAppTemplateParams != nil {
		if err := m.RecoverVAppTemplateParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVAppTemplateParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVAppTemplateParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) validateRecoverVMDiskParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverVMDiskParams) { // not required
		return nil
	}

	if m.RecoverVMDiskParams != nil {
		if err := m.RecoverVMDiskParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVmDiskParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVmDiskParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) validateRecoverVMParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverVMParams) { // not required
		return nil
	}

	if m.RecoverVMParams != nil {
		if err := m.RecoverVMParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVmParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover vmware params based on the context it is used
func (m *RecoverVmwareParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDownloadFileAndFolderParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountVolumeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverFileAndFolderParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverVAppParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverVAppTemplateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverVMDiskParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverVMParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVmwareParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverVmwareParams) contextValidateDownloadFileAndFolderParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DownloadFileAndFolderParams != nil {

		if swag.IsZero(m.DownloadFileAndFolderParams) { // not required
			return nil
		}

		if err := m.DownloadFileAndFolderParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadFileAndFolderParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadFileAndFolderParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) contextValidateMountVolumeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MountVolumeParams != nil {

		if swag.IsZero(m.MountVolumeParams) { // not required
			return nil
		}

		if err := m.MountVolumeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountVolumeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountVolumeParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) contextValidateRecoverFileAndFolderParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverFileAndFolderParams != nil {

		if swag.IsZero(m.RecoverFileAndFolderParams) { // not required
			return nil
		}

		if err := m.RecoverFileAndFolderParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverFileAndFolderParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverFileAndFolderParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) contextValidateRecoverVAppParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverVAppParams != nil {

		if swag.IsZero(m.RecoverVAppParams) { // not required
			return nil
		}

		if err := m.RecoverVAppParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVAppParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVAppParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) contextValidateRecoverVAppTemplateParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverVAppTemplateParams != nil {

		if swag.IsZero(m.RecoverVAppTemplateParams) { // not required
			return nil
		}

		if err := m.RecoverVAppTemplateParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVAppTemplateParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVAppTemplateParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) contextValidateRecoverVMDiskParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverVMDiskParams != nil {

		if swag.IsZero(m.RecoverVMDiskParams) { // not required
			return nil
		}

		if err := m.RecoverVMDiskParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVmDiskParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVmDiskParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareParams) contextValidateRecoverVMParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverVMParams != nil {

		if swag.IsZero(m.RecoverVMParams) { // not required
			return nil
		}

		if err := m.RecoverVMParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVmParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverVmwareParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverVmwareParams) UnmarshalBinary(b []byte) error {
	var res RecoverVmwareParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
