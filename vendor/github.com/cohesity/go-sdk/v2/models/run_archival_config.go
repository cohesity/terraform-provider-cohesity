// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RunArchivalConfig Archival Target Configuration
//
// Specifies settings for copying Snapshots External Targets (such as AWS or Tape). This also specifies the retention policy that should be applied to Snapshots after they have been copied to the specified target.
//
// swagger:model RunArchivalConfig
type RunArchivalConfig struct {

	// Specifies the Archival target to copy the Snapshots to.
	// Required: true
	ID *int64 `json:"id"`

	// Specifies the snapshot's archival target type from which recovery has been performed.
	// Required: true
	// Enum: ["Tape","Cloud","Nas"]
	ArchivalTargetType *string `json:"archivalTargetType"`

	// Specifies the Retention period of snapshot in days, months or years to retain copied Snapshots on the target.
	Retention *Retention `json:"retention,omitempty"`

	// Specifies if Snapshots are copied from a fully successful Protection Group Run or a partially successful Protection Group Run. If false, Snapshots are copied the Protection Group Run, even if the Run was not fully successful i.e. Snapshots were not captured for all Objects in the Protection Group. If true, Snapshots are copied only when the run is fully successful.
	CopyOnlyFullySuccessful *bool `json:"copyOnlyFullySuccessful,omitempty"`
}

// Validate validates this run archival config
func (m *RunArchivalConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivalTargetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunArchivalConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var runArchivalConfigTypeArchivalTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tape","Cloud","Nas"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runArchivalConfigTypeArchivalTargetTypePropEnum = append(runArchivalConfigTypeArchivalTargetTypePropEnum, v)
	}
}

const (

	// RunArchivalConfigArchivalTargetTypeTape captures enum value "Tape"
	RunArchivalConfigArchivalTargetTypeTape string = "Tape"

	// RunArchivalConfigArchivalTargetTypeCloud captures enum value "Cloud"
	RunArchivalConfigArchivalTargetTypeCloud string = "Cloud"

	// RunArchivalConfigArchivalTargetTypeNas captures enum value "Nas"
	RunArchivalConfigArchivalTargetTypeNas string = "Nas"
)

// prop value enum
func (m *RunArchivalConfig) validateArchivalTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, runArchivalConfigTypeArchivalTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RunArchivalConfig) validateArchivalTargetType(formats strfmt.Registry) error {

	if err := validate.Required("archivalTargetType", "body", m.ArchivalTargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateArchivalTargetTypeEnum("archivalTargetType", "body", *m.ArchivalTargetType); err != nil {
		return err
	}

	return nil
}

func (m *RunArchivalConfig) validateRetention(formats strfmt.Registry) error {
	if swag.IsZero(m.Retention) { // not required
		return nil
	}

	if m.Retention != nil {
		if err := m.Retention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this run archival config based on the context it is used
func (m *RunArchivalConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunArchivalConfig) contextValidateRetention(ctx context.Context, formats strfmt.Registry) error {

	if m.Retention != nil {

		if swag.IsZero(m.Retention) { // not required
			return nil
		}

		if err := m.Retention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunArchivalConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunArchivalConfig) UnmarshalBinary(b []byte) error {
	var res RunArchivalConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
