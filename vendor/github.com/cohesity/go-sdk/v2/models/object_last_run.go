// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectLastRun Specifies last run info of an object.
//
// swagger:model ObjectLastRun
type ObjectLastRun struct {
	ObjectSummary

	// Specifies the last run id.
	RunID string `json:"runId,omitempty"`

	// Specifies the protection group name of last run.
	ProtectionGroupName *string `json:"protectionGroupName,omitempty"`

	// Specifies the protection group id of last run.
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// Specifies the policy name of last run.
	PolicyName *string `json:"policyName,omitempty"`

	// Specifies the policy id of last run.
	PolicyID *string `json:"policyId,omitempty"`

	// Specifies the status of last local back up run.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]
	BackupRunStatus *string `json:"backupRunStatus,omitempty"`

	// Specifies the status of last archival run.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]
	ArchivalRunStatus *string `json:"archivalRunStatus,omitempty"`

	// Specifies the status of last replication run.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]
	ReplicationRunStatus *string `json:"replicationRunStatus,omitempty"`

	// Specifies if the sla is violated in last run.
	IsSLAViolated *bool `json:"isSlaViolated,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ObjectLastRun) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ObjectSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ObjectSummary = aO0

	// AO1
	var dataAO1 struct {
		RunID string `json:"runId,omitempty"`

		ProtectionGroupName *string `json:"protectionGroupName,omitempty"`

		ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

		PolicyName *string `json:"policyName,omitempty"`

		PolicyID *string `json:"policyId,omitempty"`

		BackupRunStatus *string `json:"backupRunStatus,omitempty"`

		ArchivalRunStatus *string `json:"archivalRunStatus,omitempty"`

		ReplicationRunStatus *string `json:"replicationRunStatus,omitempty"`

		IsSLAViolated *bool `json:"isSlaViolated,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.RunID = dataAO1.RunID

	m.ProtectionGroupName = dataAO1.ProtectionGroupName

	m.ProtectionGroupID = dataAO1.ProtectionGroupID

	m.PolicyName = dataAO1.PolicyName

	m.PolicyID = dataAO1.PolicyID

	m.BackupRunStatus = dataAO1.BackupRunStatus

	m.ArchivalRunStatus = dataAO1.ArchivalRunStatus

	m.ReplicationRunStatus = dataAO1.ReplicationRunStatus

	m.IsSLAViolated = dataAO1.IsSLAViolated

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ObjectLastRun) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ObjectSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		RunID string `json:"runId,omitempty"`

		ProtectionGroupName *string `json:"protectionGroupName,omitempty"`

		ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

		PolicyName *string `json:"policyName,omitempty"`

		PolicyID *string `json:"policyId,omitempty"`

		BackupRunStatus *string `json:"backupRunStatus,omitempty"`

		ArchivalRunStatus *string `json:"archivalRunStatus,omitempty"`

		ReplicationRunStatus *string `json:"replicationRunStatus,omitempty"`

		IsSLAViolated *bool `json:"isSlaViolated,omitempty"`
	}

	dataAO1.RunID = m.RunID

	dataAO1.ProtectionGroupName = m.ProtectionGroupName

	dataAO1.ProtectionGroupID = m.ProtectionGroupID

	dataAO1.PolicyName = m.PolicyName

	dataAO1.PolicyID = m.PolicyID

	dataAO1.BackupRunStatus = m.BackupRunStatus

	dataAO1.ArchivalRunStatus = m.ArchivalRunStatus

	dataAO1.ReplicationRunStatus = m.ReplicationRunStatus

	dataAO1.IsSLAViolated = m.IsSLAViolated

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this object last run
func (m *ObjectLastRun) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectSummary
	if err := m.ObjectSummary.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRunStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivalRunStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationRunStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var objectLastRunTypeBackupRunStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectLastRunTypeBackupRunStatusPropEnum = append(objectLastRunTypeBackupRunStatusPropEnum, v)
	}
}

// property enum
func (m *ObjectLastRun) validateBackupRunStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectLastRunTypeBackupRunStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectLastRun) validateBackupRunStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupRunStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackupRunStatusEnum("backupRunStatus", "body", *m.BackupRunStatus); err != nil {
		return err
	}

	return nil
}

var objectLastRunTypeArchivalRunStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectLastRunTypeArchivalRunStatusPropEnum = append(objectLastRunTypeArchivalRunStatusPropEnum, v)
	}
}

// property enum
func (m *ObjectLastRun) validateArchivalRunStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectLastRunTypeArchivalRunStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectLastRun) validateArchivalRunStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ArchivalRunStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateArchivalRunStatusEnum("archivalRunStatus", "body", *m.ArchivalRunStatus); err != nil {
		return err
	}

	return nil
}

var objectLastRunTypeReplicationRunStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectLastRunTypeReplicationRunStatusPropEnum = append(objectLastRunTypeReplicationRunStatusPropEnum, v)
	}
}

// property enum
func (m *ObjectLastRun) validateReplicationRunStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectLastRunTypeReplicationRunStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectLastRun) validateReplicationRunStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationRunStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationRunStatusEnum("replicationRunStatus", "body", *m.ReplicationRunStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this object last run based on the context it is used
func (m *ObjectLastRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectSummary
	if err := m.ObjectSummary.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ObjectLastRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectLastRun) UnmarshalBinary(b []byte) error {
	var res ObjectLastRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
