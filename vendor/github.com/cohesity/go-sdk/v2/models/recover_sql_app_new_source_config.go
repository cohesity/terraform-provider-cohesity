// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverSQLAppNewSourceConfig Recover Sql App New Source Config.
//
// Specifies the new destination Source configuration where the databases will be recovered.
//
// swagger:model RecoverSqlAppNewSourceConfig
type RecoverSQLAppNewSourceConfig struct {
	CommonSQLAppSourceConfig

	// Specifies an instance name of the Sql Server that should be used for restoring databases to.
	// Required: true
	InstanceName *string `json:"instanceName"`

	// Specifies the directory where to put the database data files. Missing directory will be automatically created.
	// Required: true
	DataFileDirectoryLocation *string `json:"dataFileDirectoryLocation"`

	// Specifies the directory where to put the database log files. Missing directory will be automatically created.
	// Required: true
	LogFileDirectoryLocation *string `json:"logFileDirectoryLocation"`

	// Specifies a new name for the restored database. If this field is not specified, then the original database will be overwritten after recovery.
	DatabaseName *string `json:"databaseName,omitempty"`

	// Specifies the source id of target host where databases will be recovered. This source id can be a physical host or virtual machine.
	// Required: true
	Host *RecoveryObjectIdentifier `json:"host"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RecoverSQLAppNewSourceConfig) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonSQLAppSourceConfig
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonSQLAppSourceConfig = aO0

	// now for regular properties
	var propsRecoverSQLAppNewSourceConfig struct {
		InstanceName *string `json:"instanceName"`

		DataFileDirectoryLocation *string `json:"dataFileDirectoryLocation"`

		LogFileDirectoryLocation *string `json:"logFileDirectoryLocation"`

		DatabaseName *string `json:"databaseName,omitempty"`

		Host *RecoveryObjectIdentifier `json:"host"`
	}
	if err := swag.ReadJSON(raw, &propsRecoverSQLAppNewSourceConfig); err != nil {
		return err
	}
	m.InstanceName = propsRecoverSQLAppNewSourceConfig.InstanceName

	m.DataFileDirectoryLocation = propsRecoverSQLAppNewSourceConfig.DataFileDirectoryLocation

	m.LogFileDirectoryLocation = propsRecoverSQLAppNewSourceConfig.LogFileDirectoryLocation

	m.DatabaseName = propsRecoverSQLAppNewSourceConfig.DatabaseName

	m.Host = propsRecoverSQLAppNewSourceConfig.Host

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RecoverSQLAppNewSourceConfig) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.CommonSQLAppSourceConfig)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRecoverSQLAppNewSourceConfig struct {
		InstanceName *string `json:"instanceName"`

		DataFileDirectoryLocation *string `json:"dataFileDirectoryLocation"`

		LogFileDirectoryLocation *string `json:"logFileDirectoryLocation"`

		DatabaseName *string `json:"databaseName,omitempty"`

		Host *RecoveryObjectIdentifier `json:"host"`
	}
	propsRecoverSQLAppNewSourceConfig.InstanceName = m.InstanceName

	propsRecoverSQLAppNewSourceConfig.DataFileDirectoryLocation = m.DataFileDirectoryLocation

	propsRecoverSQLAppNewSourceConfig.LogFileDirectoryLocation = m.LogFileDirectoryLocation

	propsRecoverSQLAppNewSourceConfig.DatabaseName = m.DatabaseName

	propsRecoverSQLAppNewSourceConfig.Host = m.Host

	jsonDataPropsRecoverSQLAppNewSourceConfig, errRecoverSQLAppNewSourceConfig := swag.WriteJSON(propsRecoverSQLAppNewSourceConfig)
	if errRecoverSQLAppNewSourceConfig != nil {
		return nil, errRecoverSQLAppNewSourceConfig
	}
	_parts = append(_parts, jsonDataPropsRecoverSQLAppNewSourceConfig)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recover Sql app new source config
func (m *RecoverSQLAppNewSourceConfig) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonSQLAppSourceConfig
	if err := m.CommonSQLAppSourceConfig.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataFileDirectoryLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogFileDirectoryLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverSQLAppNewSourceConfig) validateInstanceName(formats strfmt.Registry) error {

	if err := validate.Required("instanceName", "body", m.InstanceName); err != nil {
		return err
	}

	return nil
}

func (m *RecoverSQLAppNewSourceConfig) validateDataFileDirectoryLocation(formats strfmt.Registry) error {

	if err := validate.Required("dataFileDirectoryLocation", "body", m.DataFileDirectoryLocation); err != nil {
		return err
	}

	return nil
}

func (m *RecoverSQLAppNewSourceConfig) validateLogFileDirectoryLocation(formats strfmt.Registry) error {

	if err := validate.Required("logFileDirectoryLocation", "body", m.LogFileDirectoryLocation); err != nil {
		return err
	}

	return nil
}

func (m *RecoverSQLAppNewSourceConfig) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover Sql app new source config based on the context it is used
func (m *RecoverSQLAppNewSourceConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonSQLAppSourceConfig
	if err := m.CommonSQLAppSourceConfig.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverSQLAppNewSourceConfig) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {

		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverSQLAppNewSourceConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverSQLAppNewSourceConfig) UnmarshalBinary(b []byte) error {
	var res RecoverSQLAppNewSourceConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
