// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetappRegistrationParams Netapp Protection Source.
//
// Specifies parameters to register an Netapp Source.
//
// swagger:model NetappRegistrationParams
type NetappRegistrationParams struct {

	// Specifies the Netapp source type. Can be either kCluster or kVServer (SVM).
	// Required: true
	// Enum: ["kCluster","kVServer"]
	SourceType *string `json:"sourceType"`

	// Specifies the Hostname or IP Address Endpoint for the Netapp Source.
	// Required: true
	Endpoint *string `json:"endpoint"`

	// Specifies the credentials for an Netapp Source.
	// Required: true
	Credentials *Credentials `json:"credentials"`

	// Specifies whether or not to back up SMB Volumes.
	BackUpSMBVolumes *bool `json:"backUpSMBVolumes,omitempty"`

	// Specifies the credentials for SMB Volumes. Must be specified if backUpSMBVolumes is set to true.
	SmbCredentials *SmbMountCredentials `json:"smbCredentials,omitempty"`

	// Specifies the list of IP addresses that are allowed or denied at the job level. Allowed IPs and Denied IPs cannot be used together.
	FilterIPConfig *FilterIPConfig `json:"filterIpConfig,omitempty"`

	// Specifies the source throttling parameters to be used during registration of the NAS source.
	ThrottlingConfig *NasThrottlingConfig `json:"throttlingConfig,omitempty"`

	// Specifies if storage array snapshot is enabled or not in the Source.
	StorageArraySnapshotEnabled *bool `json:"storageArraySnapshotEnabled,omitempty"`

	// Specifies the storage array snapshot management configuration.
	StorageArraySnapshotConfig *StorageArraySnapshotConfig `json:"storageArraySnapshotConfig,omitempty"`
}

// Validate validates this netapp registration params
func (m *NetappRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterIPConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageArraySnapshotConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var netappRegistrationParamsTypeSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kVServer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netappRegistrationParamsTypeSourceTypePropEnum = append(netappRegistrationParamsTypeSourceTypePropEnum, v)
	}
}

const (

	// NetappRegistrationParamsSourceTypeKCluster captures enum value "kCluster"
	NetappRegistrationParamsSourceTypeKCluster string = "kCluster"

	// NetappRegistrationParamsSourceTypeKVServer captures enum value "kVServer"
	NetappRegistrationParamsSourceTypeKVServer string = "kVServer"
)

// prop value enum
func (m *NetappRegistrationParams) validateSourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, netappRegistrationParamsTypeSourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetappRegistrationParams) validateSourceType(formats strfmt.Registry) error {

	if err := validate.Required("sourceType", "body", m.SourceType); err != nil {
		return err
	}

	// value enum
	if err := m.validateSourceTypeEnum("sourceType", "body", *m.SourceType); err != nil {
		return err
	}

	return nil
}

func (m *NetappRegistrationParams) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

func (m *NetappRegistrationParams) validateCredentials(formats strfmt.Registry) error {

	if err := validate.Required("credentials", "body", m.Credentials); err != nil {
		return err
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *NetappRegistrationParams) validateSmbCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.SmbCredentials) { // not required
		return nil
	}

	if m.SmbCredentials != nil {
		if err := m.SmbCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smbCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smbCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *NetappRegistrationParams) validateFilterIPConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterIPConfig) { // not required
		return nil
	}

	if m.FilterIPConfig != nil {
		if err := m.FilterIPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterIpConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filterIpConfig")
			}
			return err
		}
	}

	return nil
}

func (m *NetappRegistrationParams) validateThrottlingConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingConfig) { // not required
		return nil
	}

	if m.ThrottlingConfig != nil {
		if err := m.ThrottlingConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingConfig")
			}
			return err
		}
	}

	return nil
}

func (m *NetappRegistrationParams) validateStorageArraySnapshotConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageArraySnapshotConfig) { // not required
		return nil
	}

	if m.StorageArraySnapshotConfig != nil {
		if err := m.StorageArraySnapshotConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageArraySnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageArraySnapshotConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this netapp registration params based on the context it is used
func (m *NetappRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterIPConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageArraySnapshotConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetappRegistrationParams) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *NetappRegistrationParams) contextValidateSmbCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SmbCredentials != nil {

		if swag.IsZero(m.SmbCredentials) { // not required
			return nil
		}

		if err := m.SmbCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smbCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smbCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *NetappRegistrationParams) contextValidateFilterIPConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.FilterIPConfig != nil {

		if swag.IsZero(m.FilterIPConfig) { // not required
			return nil
		}

		if err := m.FilterIPConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterIpConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filterIpConfig")
			}
			return err
		}
	}

	return nil
}

func (m *NetappRegistrationParams) contextValidateThrottlingConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ThrottlingConfig != nil {

		if swag.IsZero(m.ThrottlingConfig) { // not required
			return nil
		}

		if err := m.ThrottlingConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingConfig")
			}
			return err
		}
	}

	return nil
}

func (m *NetappRegistrationParams) contextValidateStorageArraySnapshotConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageArraySnapshotConfig != nil {

		if swag.IsZero(m.StorageArraySnapshotConfig) { // not required
			return nil
		}

		if err := m.StorageArraySnapshotConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageArraySnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageArraySnapshotConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetappRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetappRegistrationParams) UnmarshalBinary(b []byte) error {
	var res NetappRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
