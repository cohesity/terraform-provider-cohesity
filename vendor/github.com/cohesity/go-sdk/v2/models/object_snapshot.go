// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectSnapshot Object Snapshot.
//
// Specifies an Object Snapshot.
//
// swagger:model ObjectSnapshot
type ObjectSnapshot struct {

	// Specifies the id of the snapshot.
	ID *string `json:"id,omitempty"`

	// Specifies the target type where the Object's snapshot resides.
	// Enum: ["Local","Archival","RpaasArchival","StorageArraySnapshot","Remote"]
	SnapshotTargetType *string `json:"snapshotTargetType,omitempty"`

	// Specifies the ownership context for the target.
	// Enum: ["Local","FortKnox"]
	OwnershipContext *string `json:"ownershipContext,omitempty"`

	// Specifies the indexing status of objects in this snapshot.<br> 'InProgress' indicates the indexing is in progress.<br> 'Done' indicates indexing is done.<br> 'NoIndex' indicates indexing is not applicable.<br> 'Error' indicates indexing failed with error.
	// Enum: ["InProgress","Done","NoIndex","Error"]
	IndexingStatus *string `json:"indexingStatus,omitempty"`

	// Specifies id of the Protection Group.
	// Pattern: ^\d+:\d+:\d+$
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// Specifies name of the Protection Group.
	ProtectionGroupName *string `json:"protectionGroupName,omitempty"`

	// Specifies id of the Protection Group Run.
	// Pattern: ^\d+:\d+$
	ProtectionGroupRunID *string `json:"protectionGroupRunId,omitempty"`

	// Specifies the instance id of the protection run which create the snapshot.
	RunInstanceID *int64 `json:"runInstanceId,omitempty"`

	// Specifies the start time of the run in micro seconds.
	RunStartTimeUsecs *int64 `json:"runStartTimeUsecs,omitempty"`

	// Specifies the source protection group id in case of replication.
	SourceGroupID *string `json:"sourceGroupId,omitempty"`

	// Specifies the type of protection run created this snapshot.
	// Enum: ["kRegular","kFull","kLog","kSystem","kHydrateCDP","kStorageArraySnapshot"]
	RunType *string `json:"runType,omitempty"`

	// Specifies the snapshot environment.
	// Enum: ["kVMware","kHyperV","kAzure","kKVM","kAWS","kAcropolis","kGCP","kPhysical","kPhysicalFiles","kIsilon","kNetapp","kGenericNas","kFlashBlade","kElastifile","kGPFS","kPure","kIbmFlashSystem","kNimble","kSQL","kOracle","kExchange","kAD","kView","kO365","kHyperFlex","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc"]
	Environment *string `json:"environment,omitempty"`

	// Specifies the timestamp in Unix time epoch in microseconds when the snapshot is taken for the specified Object.
	SnapshotTimestampUsecs *int64 `json:"snapshotTimestampUsecs,omitempty"`

	// Specifies the expiry time of the snapshot in Unix timestamp epoch in microseconds. If the snapshot has no expiry, this property will not be set.
	ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

	// Specifies the Storage Domain id where the snapshot of object is present.
	StorageDomainID *int64 `json:"storageDomainId,omitempty"`

	// Specifies if this snapshot has datalock.
	HasDataLock *bool `json:"hasDataLock,omitempty"`

	// Specifies if this snapshot is on legalhold.
	OnLegalHold *bool `json:"onLegalHold,omitempty"`

	// Specifies the object id which the snapshot is taken from.
	ObjectID *int64 `json:"objectId,omitempty"`

	// Specifies the object name which the snapshot is taken from.
	ObjectName *string `json:"objectName,omitempty"`

	// Specifies the object source id which the snapshot is taken from.
	SourceID *int64 `json:"sourceId,omitempty"`

	// Specifies the region id where this snapshot belongs to.
	RegionID *string `json:"regionId,omitempty"`

	// Specifies the cluster id where this snapshot belongs to.
	ClusterID *int64 `json:"clusterId,omitempty"`

	// Specifies the cluster incarnation id where this snapshot belongs to.
	ClusterIncarnationID *int64 `json:"clusterIncarnationId,omitempty"`

	// Specifies the parameters specific to AWS type snapshot.
	AwsParams *AwsSnapshotParams `json:"awsParams,omitempty"`

	// Specifies the parameters specific to Azure type snapshot.
	AzureParams *AzureSnapshotParams `json:"azureParams,omitempty"`

	// Specifies the parameters specific to NetApp type snapshot.
	ElastifileParams *CommonNasObjectParams `json:"elastifileParams,omitempty"`

	// Specifies the external target information if this is an archival snapshot.
	ExternalTargetInfo *ArchivalTargetSummaryInfo `json:"externalTargetInfo,omitempty"`

	// Specifies the parameters specific to Flashblade type snapshot.
	FlashbladeParams *FlashbladeObjectParams `json:"flashbladeParams,omitempty"`

	// Specifies the parameters specific to Generic NAS type snapshot.
	GenericNasParams *CommonNasObjectParams `json:"genericNasParams,omitempty"`

	// Specifies the parameters specific to GPFS type snapshot.
	GpfsParams *CommonNasObjectParams `json:"gpfsParams,omitempty"`

	// Specifies the parameters specific to HyperV type snapshot.
	HypervParams *HypervSnapshotParams `json:"hypervParams,omitempty"`

	// Specifies the parameters specific to Isilon type snapshot.
	IsilonParams *IsilonObjectParams `json:"isilonParams,omitempty"`

	// Specifies the parameters specific to NetApp type snapshot.
	NetappParams *NetappObjectParams `json:"netappParams,omitempty"`

	// Specifies the parameters specific to Physical type snapshot.
	PhysicalParams *PhysicalSnapshotParams `json:"physicalParams,omitempty"`

	// Specifies the parameters specific to Salesforce type snapshot.
	SfdcParams *SfdcObjectParams `json:"sfdcParams,omitempty"`
}

// Validate validates this object snapshot
func (m *ObjectSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnapshotTargetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnershipContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndexingStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionGroupRunID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElastifileParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalTargetInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlashbladeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericNasParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpfsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var objectSnapshotTypeSnapshotTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Local","Archival","RpaasArchival","StorageArraySnapshot","Remote"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectSnapshotTypeSnapshotTargetTypePropEnum = append(objectSnapshotTypeSnapshotTargetTypePropEnum, v)
	}
}

const (

	// ObjectSnapshotSnapshotTargetTypeLocal captures enum value "Local"
	ObjectSnapshotSnapshotTargetTypeLocal string = "Local"

	// ObjectSnapshotSnapshotTargetTypeArchival captures enum value "Archival"
	ObjectSnapshotSnapshotTargetTypeArchival string = "Archival"

	// ObjectSnapshotSnapshotTargetTypeRpaasArchival captures enum value "RpaasArchival"
	ObjectSnapshotSnapshotTargetTypeRpaasArchival string = "RpaasArchival"

	// ObjectSnapshotSnapshotTargetTypeStorageArraySnapshot captures enum value "StorageArraySnapshot"
	ObjectSnapshotSnapshotTargetTypeStorageArraySnapshot string = "StorageArraySnapshot"

	// ObjectSnapshotSnapshotTargetTypeRemote captures enum value "Remote"
	ObjectSnapshotSnapshotTargetTypeRemote string = "Remote"
)

// prop value enum
func (m *ObjectSnapshot) validateSnapshotTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectSnapshotTypeSnapshotTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectSnapshot) validateSnapshotTargetType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotTargetType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSnapshotTargetTypeEnum("snapshotTargetType", "body", *m.SnapshotTargetType); err != nil {
		return err
	}

	return nil
}

var objectSnapshotTypeOwnershipContextPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Local","FortKnox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectSnapshotTypeOwnershipContextPropEnum = append(objectSnapshotTypeOwnershipContextPropEnum, v)
	}
}

const (

	// ObjectSnapshotOwnershipContextLocal captures enum value "Local"
	ObjectSnapshotOwnershipContextLocal string = "Local"

	// ObjectSnapshotOwnershipContextFortKnox captures enum value "FortKnox"
	ObjectSnapshotOwnershipContextFortKnox string = "FortKnox"
)

// prop value enum
func (m *ObjectSnapshot) validateOwnershipContextEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectSnapshotTypeOwnershipContextPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectSnapshot) validateOwnershipContext(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnershipContext) { // not required
		return nil
	}

	// value enum
	if err := m.validateOwnershipContextEnum("ownershipContext", "body", *m.OwnershipContext); err != nil {
		return err
	}

	return nil
}

var objectSnapshotTypeIndexingStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InProgress","Done","NoIndex","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectSnapshotTypeIndexingStatusPropEnum = append(objectSnapshotTypeIndexingStatusPropEnum, v)
	}
}

const (

	// ObjectSnapshotIndexingStatusInProgress captures enum value "InProgress"
	ObjectSnapshotIndexingStatusInProgress string = "InProgress"

	// ObjectSnapshotIndexingStatusDone captures enum value "Done"
	ObjectSnapshotIndexingStatusDone string = "Done"

	// ObjectSnapshotIndexingStatusNoIndex captures enum value "NoIndex"
	ObjectSnapshotIndexingStatusNoIndex string = "NoIndex"

	// ObjectSnapshotIndexingStatusError captures enum value "Error"
	ObjectSnapshotIndexingStatusError string = "Error"
)

// prop value enum
func (m *ObjectSnapshot) validateIndexingStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectSnapshotTypeIndexingStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectSnapshot) validateIndexingStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.IndexingStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateIndexingStatusEnum("indexingStatus", "body", *m.IndexingStatus); err != nil {
		return err
	}

	return nil
}

func (m *ObjectSnapshot) validateProtectionGroupID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionGroupID) { // not required
		return nil
	}

	if err := validate.Pattern("protectionGroupId", "body", *m.ProtectionGroupID, `^\d+:\d+:\d+$`); err != nil {
		return err
	}

	return nil
}

func (m *ObjectSnapshot) validateProtectionGroupRunID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionGroupRunID) { // not required
		return nil
	}

	if err := validate.Pattern("protectionGroupRunId", "body", *m.ProtectionGroupRunID, `^\d+:\d+$`); err != nil {
		return err
	}

	return nil
}

var objectSnapshotTypeRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kFull","kLog","kSystem","kHydrateCDP","kStorageArraySnapshot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectSnapshotTypeRunTypePropEnum = append(objectSnapshotTypeRunTypePropEnum, v)
	}
}

const (

	// ObjectSnapshotRunTypeKRegular captures enum value "kRegular"
	ObjectSnapshotRunTypeKRegular string = "kRegular"

	// ObjectSnapshotRunTypeKFull captures enum value "kFull"
	ObjectSnapshotRunTypeKFull string = "kFull"

	// ObjectSnapshotRunTypeKLog captures enum value "kLog"
	ObjectSnapshotRunTypeKLog string = "kLog"

	// ObjectSnapshotRunTypeKSystem captures enum value "kSystem"
	ObjectSnapshotRunTypeKSystem string = "kSystem"

	// ObjectSnapshotRunTypeKHydrateCDP captures enum value "kHydrateCDP"
	ObjectSnapshotRunTypeKHydrateCDP string = "kHydrateCDP"

	// ObjectSnapshotRunTypeKStorageArraySnapshot captures enum value "kStorageArraySnapshot"
	ObjectSnapshotRunTypeKStorageArraySnapshot string = "kStorageArraySnapshot"
)

// prop value enum
func (m *ObjectSnapshot) validateRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectSnapshotTypeRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectSnapshot) validateRunType(formats strfmt.Registry) error {
	if swag.IsZero(m.RunType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunTypeEnum("runType", "body", *m.RunType); err != nil {
		return err
	}

	return nil
}

var objectSnapshotTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kAzure","kKVM","kAWS","kAcropolis","kGCP","kPhysical","kPhysicalFiles","kIsilon","kNetapp","kGenericNas","kFlashBlade","kElastifile","kGPFS","kPure","kIbmFlashSystem","kNimble","kSQL","kOracle","kExchange","kAD","kView","kO365","kHyperFlex","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectSnapshotTypeEnvironmentPropEnum = append(objectSnapshotTypeEnvironmentPropEnum, v)
	}
}

const (

	// ObjectSnapshotEnvironmentKVMware captures enum value "kVMware"
	ObjectSnapshotEnvironmentKVMware string = "kVMware"

	// ObjectSnapshotEnvironmentKHyperV captures enum value "kHyperV"
	ObjectSnapshotEnvironmentKHyperV string = "kHyperV"

	// ObjectSnapshotEnvironmentKAzure captures enum value "kAzure"
	ObjectSnapshotEnvironmentKAzure string = "kAzure"

	// ObjectSnapshotEnvironmentKKVM captures enum value "kKVM"
	ObjectSnapshotEnvironmentKKVM string = "kKVM"

	// ObjectSnapshotEnvironmentKAWS captures enum value "kAWS"
	ObjectSnapshotEnvironmentKAWS string = "kAWS"

	// ObjectSnapshotEnvironmentKAcropolis captures enum value "kAcropolis"
	ObjectSnapshotEnvironmentKAcropolis string = "kAcropolis"

	// ObjectSnapshotEnvironmentKGCP captures enum value "kGCP"
	ObjectSnapshotEnvironmentKGCP string = "kGCP"

	// ObjectSnapshotEnvironmentKPhysical captures enum value "kPhysical"
	ObjectSnapshotEnvironmentKPhysical string = "kPhysical"

	// ObjectSnapshotEnvironmentKPhysicalFiles captures enum value "kPhysicalFiles"
	ObjectSnapshotEnvironmentKPhysicalFiles string = "kPhysicalFiles"

	// ObjectSnapshotEnvironmentKIsilon captures enum value "kIsilon"
	ObjectSnapshotEnvironmentKIsilon string = "kIsilon"

	// ObjectSnapshotEnvironmentKNetapp captures enum value "kNetapp"
	ObjectSnapshotEnvironmentKNetapp string = "kNetapp"

	// ObjectSnapshotEnvironmentKGenericNas captures enum value "kGenericNas"
	ObjectSnapshotEnvironmentKGenericNas string = "kGenericNas"

	// ObjectSnapshotEnvironmentKFlashBlade captures enum value "kFlashBlade"
	ObjectSnapshotEnvironmentKFlashBlade string = "kFlashBlade"

	// ObjectSnapshotEnvironmentKElastifile captures enum value "kElastifile"
	ObjectSnapshotEnvironmentKElastifile string = "kElastifile"

	// ObjectSnapshotEnvironmentKGPFS captures enum value "kGPFS"
	ObjectSnapshotEnvironmentKGPFS string = "kGPFS"

	// ObjectSnapshotEnvironmentKPure captures enum value "kPure"
	ObjectSnapshotEnvironmentKPure string = "kPure"

	// ObjectSnapshotEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	ObjectSnapshotEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// ObjectSnapshotEnvironmentKNimble captures enum value "kNimble"
	ObjectSnapshotEnvironmentKNimble string = "kNimble"

	// ObjectSnapshotEnvironmentKSQL captures enum value "kSQL"
	ObjectSnapshotEnvironmentKSQL string = "kSQL"

	// ObjectSnapshotEnvironmentKOracle captures enum value "kOracle"
	ObjectSnapshotEnvironmentKOracle string = "kOracle"

	// ObjectSnapshotEnvironmentKExchange captures enum value "kExchange"
	ObjectSnapshotEnvironmentKExchange string = "kExchange"

	// ObjectSnapshotEnvironmentKAD captures enum value "kAD"
	ObjectSnapshotEnvironmentKAD string = "kAD"

	// ObjectSnapshotEnvironmentKView captures enum value "kView"
	ObjectSnapshotEnvironmentKView string = "kView"

	// ObjectSnapshotEnvironmentKO365 captures enum value "kO365"
	ObjectSnapshotEnvironmentKO365 string = "kO365"

	// ObjectSnapshotEnvironmentKHyperFlex captures enum value "kHyperFlex"
	ObjectSnapshotEnvironmentKHyperFlex string = "kHyperFlex"

	// ObjectSnapshotEnvironmentKKubernetes captures enum value "kKubernetes"
	ObjectSnapshotEnvironmentKKubernetes string = "kKubernetes"

	// ObjectSnapshotEnvironmentKCassandra captures enum value "kCassandra"
	ObjectSnapshotEnvironmentKCassandra string = "kCassandra"

	// ObjectSnapshotEnvironmentKMongoDB captures enum value "kMongoDB"
	ObjectSnapshotEnvironmentKMongoDB string = "kMongoDB"

	// ObjectSnapshotEnvironmentKCouchbase captures enum value "kCouchbase"
	ObjectSnapshotEnvironmentKCouchbase string = "kCouchbase"

	// ObjectSnapshotEnvironmentKHdfs captures enum value "kHdfs"
	ObjectSnapshotEnvironmentKHdfs string = "kHdfs"

	// ObjectSnapshotEnvironmentKHive captures enum value "kHive"
	ObjectSnapshotEnvironmentKHive string = "kHive"

	// ObjectSnapshotEnvironmentKHBase captures enum value "kHBase"
	ObjectSnapshotEnvironmentKHBase string = "kHBase"

	// ObjectSnapshotEnvironmentKSAPHANA captures enum value "kSAPHANA"
	ObjectSnapshotEnvironmentKSAPHANA string = "kSAPHANA"

	// ObjectSnapshotEnvironmentKUDA captures enum value "kUDA"
	ObjectSnapshotEnvironmentKUDA string = "kUDA"

	// ObjectSnapshotEnvironmentKSfdc captures enum value "kSfdc"
	ObjectSnapshotEnvironmentKSfdc string = "kSfdc"
)

// prop value enum
func (m *ObjectSnapshot) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectSnapshotTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectSnapshot) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *ObjectSnapshot) validateAwsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsParams) { // not required
		return nil
	}

	if m.AwsParams != nil {
		if err := m.AwsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validateAzureParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureParams) { // not required
		return nil
	}

	if m.AzureParams != nil {
		if err := m.AzureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validateElastifileParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ElastifileParams) { // not required
		return nil
	}

	if m.ElastifileParams != nil {
		if err := m.ElastifileParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validateExternalTargetInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalTargetInfo) { // not required
		return nil
	}

	if m.ExternalTargetInfo != nil {
		if err := m.ExternalTargetInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalTargetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalTargetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validateFlashbladeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FlashbladeParams) { // not required
		return nil
	}

	if m.FlashbladeParams != nil {
		if err := m.FlashbladeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validateGenericNasParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GenericNasParams) { // not required
		return nil
	}

	if m.GenericNasParams != nil {
		if err := m.GenericNasParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validateGpfsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GpfsParams) { // not required
		return nil
	}

	if m.GpfsParams != nil {
		if err := m.GpfsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validateHypervParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParams) { // not required
		return nil
	}

	if m.HypervParams != nil {
		if err := m.HypervParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validateIsilonParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validateNetappParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NetappParams) { // not required
		return nil
	}

	if m.NetappParams != nil {
		if err := m.NetappParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validatePhysicalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) validateSfdcParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcParams) { // not required
		return nil
	}

	if m.SfdcParams != nil {
		if err := m.SfdcParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this object snapshot based on the context it is used
func (m *ObjectSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElastifileParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalTargetInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlashbladeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenericNasParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpfsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectSnapshot) contextValidateAwsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsParams != nil {

		if swag.IsZero(m.AwsParams) { // not required
			return nil
		}

		if err := m.AwsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidateAzureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureParams != nil {

		if swag.IsZero(m.AzureParams) { // not required
			return nil
		}

		if err := m.AzureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidateElastifileParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ElastifileParams != nil {

		if swag.IsZero(m.ElastifileParams) { // not required
			return nil
		}

		if err := m.ElastifileParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidateExternalTargetInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalTargetInfo != nil {

		if swag.IsZero(m.ExternalTargetInfo) { // not required
			return nil
		}

		if err := m.ExternalTargetInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalTargetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalTargetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidateFlashbladeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FlashbladeParams != nil {

		if swag.IsZero(m.FlashbladeParams) { // not required
			return nil
		}

		if err := m.FlashbladeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidateGenericNasParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericNasParams != nil {

		if swag.IsZero(m.GenericNasParams) { // not required
			return nil
		}

		if err := m.GenericNasParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidateGpfsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GpfsParams != nil {

		if swag.IsZero(m.GpfsParams) { // not required
			return nil
		}

		if err := m.GpfsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidateHypervParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParams != nil {

		if swag.IsZero(m.HypervParams) { // not required
			return nil
		}

		if err := m.HypervParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidateNetappParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NetappParams != nil {

		if swag.IsZero(m.NetappParams) { // not required
			return nil
		}

		if err := m.NetappParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSnapshot) contextValidateSfdcParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcParams != nil {

		if swag.IsZero(m.SfdcParams) { // not required
			return nil
		}

		if err := m.SfdcParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectSnapshot) UnmarshalBinary(b []byte) error {
	var res ObjectSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
