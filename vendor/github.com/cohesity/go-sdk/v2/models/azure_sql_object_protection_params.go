// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureSQLObjectProtectionParams Azure SQL Object Protection Request Params.
//
// Specifies the parameters which are specific to Azure SQL Object Protection Groups using Azure native APIs. Atlease one of objects must be specified.
//
// swagger:model AzureSqlObjectProtectionParams
type AzureSQLObjectProtectionParams struct {

	// Specifies the objects to be protected.
	Objects []*AzureObjectLevelParams `json:"objects"`

	// Specifies azure managed storage disk to be used for object protection. By default Premium LRS is being used to support Azure SQL workloads.
	// Enum: ["PremiumSSD","PremiumSSDv2","StandardSSD","StandardHDD","UltraDisk","Premium_LRS","PremiumV2_LRS","Premium_ZRS","StandardSSD_LRS","StandardSSD_ZRS","Standard_LRS","UltraSSD_LRS"]
	DiskType *string `json:"diskType,omitempty"`

	// If set to true, a copy of the database is created during backup, and the backup is performed from the copied database. This backup will be transactionally consistent. If set to false, the backup is performed from the production database while transactions are in progress. In this case, the backup will be transactionally inconsistent, and recovery can fail or the recovered database may be in an inconsistent state.
	CopyDatabase *bool `json:"copyDatabase,omitempty"`

	// Specifies the SQL package options to be used during Azure SQL object Protection.
	SQLPackageOptions *AzureSQLPackageOptions `json:"sqlPackageOptions,omitempty"`

	// Specifies the copy database sku options to be used during Azure SQL object Protection.
	CopyDatabaseSku *AzureSQLSkuOptions `json:"copyDatabaseSku,omitempty"`

	// Specifies the size of the disk we will attach to rigel to use for exporting this DB(in GB).
	TempDiskSizeGb *int32 `json:"tempDiskSizeGb,omitempty"`

	// Specifies the ids of the objects to be excluded in the Object Protection. This can be used to ignore specific objects under a parent object which has been included for protection.
	// Unique: true
	ExcludeObjectIds []int64 `json:"excludeObjectIds"`
}

// Validate validates this azure Sql object protection params
func (m *AzureSQLObjectProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLPackageOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopyDatabaseSku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeObjectIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureSQLObjectProtectionParams) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var azureSqlObjectProtectionParamsTypeDiskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PremiumSSD","PremiumSSDv2","StandardSSD","StandardHDD","UltraDisk","Premium_LRS","PremiumV2_LRS","Premium_ZRS","StandardSSD_LRS","StandardSSD_ZRS","Standard_LRS","UltraSSD_LRS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureSqlObjectProtectionParamsTypeDiskTypePropEnum = append(azureSqlObjectProtectionParamsTypeDiskTypePropEnum, v)
	}
}

const (

	// AzureSQLObjectProtectionParamsDiskTypePremiumSSD captures enum value "PremiumSSD"
	AzureSQLObjectProtectionParamsDiskTypePremiumSSD string = "PremiumSSD"

	// AzureSQLObjectProtectionParamsDiskTypePremiumSSDv2 captures enum value "PremiumSSDv2"
	AzureSQLObjectProtectionParamsDiskTypePremiumSSDv2 string = "PremiumSSDv2"

	// AzureSQLObjectProtectionParamsDiskTypeStandardSSD captures enum value "StandardSSD"
	AzureSQLObjectProtectionParamsDiskTypeStandardSSD string = "StandardSSD"

	// AzureSQLObjectProtectionParamsDiskTypeStandardHDD captures enum value "StandardHDD"
	AzureSQLObjectProtectionParamsDiskTypeStandardHDD string = "StandardHDD"

	// AzureSQLObjectProtectionParamsDiskTypeUltraDisk captures enum value "UltraDisk"
	AzureSQLObjectProtectionParamsDiskTypeUltraDisk string = "UltraDisk"

	// AzureSQLObjectProtectionParamsDiskTypePremiumLRS captures enum value "Premium_LRS"
	AzureSQLObjectProtectionParamsDiskTypePremiumLRS string = "Premium_LRS"

	// AzureSQLObjectProtectionParamsDiskTypePremiumV2LRS captures enum value "PremiumV2_LRS"
	AzureSQLObjectProtectionParamsDiskTypePremiumV2LRS string = "PremiumV2_LRS"

	// AzureSQLObjectProtectionParamsDiskTypePremiumZRS captures enum value "Premium_ZRS"
	AzureSQLObjectProtectionParamsDiskTypePremiumZRS string = "Premium_ZRS"

	// AzureSQLObjectProtectionParamsDiskTypeStandardSSDLRS captures enum value "StandardSSD_LRS"
	AzureSQLObjectProtectionParamsDiskTypeStandardSSDLRS string = "StandardSSD_LRS"

	// AzureSQLObjectProtectionParamsDiskTypeStandardSSDZRS captures enum value "StandardSSD_ZRS"
	AzureSQLObjectProtectionParamsDiskTypeStandardSSDZRS string = "StandardSSD_ZRS"

	// AzureSQLObjectProtectionParamsDiskTypeStandardLRS captures enum value "Standard_LRS"
	AzureSQLObjectProtectionParamsDiskTypeStandardLRS string = "Standard_LRS"

	// AzureSQLObjectProtectionParamsDiskTypeUltraSSDLRS captures enum value "UltraSSD_LRS"
	AzureSQLObjectProtectionParamsDiskTypeUltraSSDLRS string = "UltraSSD_LRS"
)

// prop value enum
func (m *AzureSQLObjectProtectionParams) validateDiskTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureSqlObjectProtectionParamsTypeDiskTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureSQLObjectProtectionParams) validateDiskType(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDiskTypeEnum("diskType", "body", *m.DiskType); err != nil {
		return err
	}

	return nil
}

func (m *AzureSQLObjectProtectionParams) validateSQLPackageOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLPackageOptions) { // not required
		return nil
	}

	if m.SQLPackageOptions != nil {
		if err := m.SQLPackageOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlPackageOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlPackageOptions")
			}
			return err
		}
	}

	return nil
}

func (m *AzureSQLObjectProtectionParams) validateCopyDatabaseSku(formats strfmt.Registry) error {
	if swag.IsZero(m.CopyDatabaseSku) { // not required
		return nil
	}

	if m.CopyDatabaseSku != nil {
		if err := m.CopyDatabaseSku.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyDatabaseSku")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copyDatabaseSku")
			}
			return err
		}
	}

	return nil
}

func (m *AzureSQLObjectProtectionParams) validateExcludeObjectIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeObjectIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludeObjectIds", "body", m.ExcludeObjectIds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this azure Sql object protection params based on the context it is used
func (m *AzureSQLObjectProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLPackageOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCopyDatabaseSku(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureSQLObjectProtectionParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureSQLObjectProtectionParams) contextValidateSQLPackageOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLPackageOptions != nil {

		if swag.IsZero(m.SQLPackageOptions) { // not required
			return nil
		}

		if err := m.SQLPackageOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlPackageOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlPackageOptions")
			}
			return err
		}
	}

	return nil
}

func (m *AzureSQLObjectProtectionParams) contextValidateCopyDatabaseSku(ctx context.Context, formats strfmt.Registry) error {

	if m.CopyDatabaseSku != nil {

		if swag.IsZero(m.CopyDatabaseSku) { // not required
			return nil
		}

		if err := m.CopyDatabaseSku.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyDatabaseSku")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("copyDatabaseSku")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureSQLObjectProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureSQLObjectProtectionParams) UnmarshalBinary(b []byte) error {
	var res AzureSQLObjectProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
