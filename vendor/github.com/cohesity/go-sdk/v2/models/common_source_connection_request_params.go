// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonSourceConnectionRequestParams Test common connection request parameters.
//
// Specifies the common set of parameters to test connectivity with a source.
//
// swagger:model CommonSourceConnectionRequestParams
type CommonSourceConnectionRequestParams struct {

	// Specifies the environment type of the Protection Source.
	// Required: true
	// Enum: ["kCassandra","kHive","kHBase","kHdfs","kSQL","kOracle"]
	Environment *string `json:"environment"`

	// Specifies the id of the connection from where this source is reachable. This should only be set for a source being registered by a tenant user.
	ConnectionID *int64 `json:"connectionId,omitempty"`
}

// Validate validates this common source connection request params
func (m *CommonSourceConnectionRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonSourceConnectionRequestParamsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCassandra","kHive","kHBase","kHdfs","kSQL","kOracle"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonSourceConnectionRequestParamsTypeEnvironmentPropEnum = append(commonSourceConnectionRequestParamsTypeEnvironmentPropEnum, v)
	}
}

const (

	// CommonSourceConnectionRequestParamsEnvironmentKCassandra captures enum value "kCassandra"
	CommonSourceConnectionRequestParamsEnvironmentKCassandra string = "kCassandra"

	// CommonSourceConnectionRequestParamsEnvironmentKHive captures enum value "kHive"
	CommonSourceConnectionRequestParamsEnvironmentKHive string = "kHive"

	// CommonSourceConnectionRequestParamsEnvironmentKHBase captures enum value "kHBase"
	CommonSourceConnectionRequestParamsEnvironmentKHBase string = "kHBase"

	// CommonSourceConnectionRequestParamsEnvironmentKHdfs captures enum value "kHdfs"
	CommonSourceConnectionRequestParamsEnvironmentKHdfs string = "kHdfs"

	// CommonSourceConnectionRequestParamsEnvironmentKSQL captures enum value "kSQL"
	CommonSourceConnectionRequestParamsEnvironmentKSQL string = "kSQL"

	// CommonSourceConnectionRequestParamsEnvironmentKOracle captures enum value "kOracle"
	CommonSourceConnectionRequestParamsEnvironmentKOracle string = "kOracle"
)

// prop value enum
func (m *CommonSourceConnectionRequestParams) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonSourceConnectionRequestParamsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonSourceConnectionRequestParams) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common source connection request params based on context it is used
func (m *CommonSourceConnectionRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonSourceConnectionRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonSourceConnectionRequestParams) UnmarshalBinary(b []byte) error {
	var res CommonSourceConnectionRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
