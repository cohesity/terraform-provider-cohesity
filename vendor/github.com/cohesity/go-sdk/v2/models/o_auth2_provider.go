// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OAuth2Provider OAuth 2 provider
//
// swagger:model OAuth2Provider
type OAuth2Provider struct {

	// Specifies the audiences of the configuration. This is used for validation. We will check this against the 'aud' field sent in the JWT at authorization time and if they do not match against at least one of the elements in this list, then authentication will fail. We will also check the 'clientIds' under the specified audience to make sure it matches the 'appid' in the token.
	// Required: true
	// Max Items: 50
	// Min Items: 1
	Audiences []*OAuthAudience `json:"audiences"`

	// Specifies the URL to poll for the public key.
	// Required: true
	PublicKeyURL *string `json:"publicKeyUrl"`

	// Specifies the number of minutes the cluster should wait before polling for a new public key. Default value is 1440 (24 hours).
	// Maximum: 10080
	// Minimum: 1
	PollingFrequencyMins *int64 `json:"pollingFrequencyMins,omitempty"`
}

// Validate validates this o auth2 provider
func (m *OAuth2Provider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudiences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKeyURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePollingFrequencyMins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuth2Provider) validateAudiences(formats strfmt.Registry) error {

	if err := validate.Required("audiences", "body", m.Audiences); err != nil {
		return err
	}

	iAudiencesSize := int64(len(m.Audiences))

	if err := validate.MinItems("audiences", "body", iAudiencesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("audiences", "body", iAudiencesSize, 50); err != nil {
		return err
	}

	for i := 0; i < len(m.Audiences); i++ {
		if swag.IsZero(m.Audiences[i]) { // not required
			continue
		}

		if m.Audiences[i] != nil {
			if err := m.Audiences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audiences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("audiences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OAuth2Provider) validatePublicKeyURL(formats strfmt.Registry) error {

	if err := validate.Required("publicKeyUrl", "body", m.PublicKeyURL); err != nil {
		return err
	}

	return nil
}

func (m *OAuth2Provider) validatePollingFrequencyMins(formats strfmt.Registry) error {
	if swag.IsZero(m.PollingFrequencyMins) { // not required
		return nil
	}

	if err := validate.MinimumInt("pollingFrequencyMins", "body", *m.PollingFrequencyMins, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pollingFrequencyMins", "body", *m.PollingFrequencyMins, 10080, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o auth2 provider based on the context it is used
func (m *OAuth2Provider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAudiences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuth2Provider) contextValidateAudiences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Audiences); i++ {

		if m.Audiences[i] != nil {

			if swag.IsZero(m.Audiences[i]) { // not required
				return nil
			}

			if err := m.Audiences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audiences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("audiences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OAuth2Provider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OAuth2Provider) UnmarshalBinary(b []byte) error {
	var res OAuth2Provider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
