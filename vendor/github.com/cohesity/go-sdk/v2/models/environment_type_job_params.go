// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EnvironmentTypeJobParams Specifies the policy level additional environment specific backup params. If this is not specified, default actions will be taken, for example for NAS environments, all objects within the source will be backed up.
//
// swagger:model EnvironmentTypeJobParams
type EnvironmentTypeJobParams struct {

	// Specifies additional special parameters that are applicable only to Types of 'kHyperV' type.
	HypervParams *HypervEnvJobParams `json:"hypervParams,omitempty"`

	// Specifies additional special parameters that are applicable only to Types of 'kGenericNas' type.
	NasParams *NasEnvJobParams `json:"nasParams,omitempty"`

	// Specifies additional special parameters that are applicable only to Sources of 'kPhysical' type in a kPhysical environment.
	PhysicalParams *PhysicalEnvJobParams `json:"physicalParams,omitempty"`

	// Specifies additional special parameters that are applicable only to Types of 'kSQL' type.
	SQLParams *CommonMSSQLProtectionGroupParams `json:"sqlParams,omitempty"`

	// Specifies additional special parameters that are applicable only to Types of 'kOracle' type.
	OracleParams *OracleEnvJobParams `json:"oracleParams,omitempty"`

	// Specifies additional special parameters that are applicable only to externally triggered backup jobs of 'kView' type.
	ExternallyTriggeredJobParams *ExternallyTriggeredJobParams `json:"externallyTriggeredJobParams,omitempty"`

	// Specifies additional special parameters that are applicable only to Types of 'kVMware' type.
	VmwareParams *VmwareEnvJobParams `json:"vmwareParams,omitempty"`

	// Specifies additional special parameters that are applicable only to types of 'kO365Outlook' type which incorporates both Mailbox & OneDrive backup parameters.
	Office365Params *O365EnvJobParams `json:"office365Params,omitempty"`

	// Specifies additional special parameters that are applicable only to snaphot manger jobs.
	AwsSnapshotParams *AwsSnapshotManagerParams `json:"awsSnapshotParams,omitempty"`

	// Specifies additional special parameters that are applicable only to Types of 'kExchange' type.
	ExchangeParams *ExchangeEnvJobParams `json:"exchangeParams,omitempty"`

	// Specifies additional special parameters that are applicable only to SAN Types.
	PureParams *SanEnvJobParams `json:"pureParams,omitempty"`
}

// Validate validates this environment type job params
func (m *EnvironmentTypeJobParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHypervParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNasParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternallyTriggeredJobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365Params(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsSnapshotParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePureParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentTypeJobParams) validateHypervParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParams) { // not required
		return nil
	}

	if m.HypervParams != nil {
		if err := m.HypervParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) validateNasParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NasParams) { // not required
		return nil
	}

	if m.NasParams != nil {
		if err := m.NasParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) validatePhysicalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) validateSQLParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLParams) { // not required
		return nil
	}

	if m.SQLParams != nil {
		if err := m.SQLParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) validateOracleParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleParams) { // not required
		return nil
	}

	if m.OracleParams != nil {
		if err := m.OracleParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) validateExternallyTriggeredJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternallyTriggeredJobParams) { // not required
		return nil
	}

	if m.ExternallyTriggeredJobParams != nil {
		if err := m.ExternallyTriggeredJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externallyTriggeredJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externallyTriggeredJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) validateOffice365Params(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365Params) { // not required
		return nil
	}

	if m.Office365Params != nil {
		if err := m.Office365Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Params")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) validateAwsSnapshotParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsSnapshotParams) { // not required
		return nil
	}

	if m.AwsSnapshotParams != nil {
		if err := m.AwsSnapshotParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsSnapshotParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsSnapshotParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) validateExchangeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeParams) { // not required
		return nil
	}

	if m.ExchangeParams != nil {
		if err := m.ExchangeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) validatePureParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PureParams) { // not required
		return nil
	}

	if m.PureParams != nil {
		if err := m.PureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pureParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this environment type job params based on the context it is used
func (m *EnvironmentTypeJobParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHypervParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNasParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternallyTriggeredJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsSnapshotParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentTypeJobParams) contextValidateHypervParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParams != nil {

		if swag.IsZero(m.HypervParams) { // not required
			return nil
		}

		if err := m.HypervParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) contextValidateNasParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NasParams != nil {

		if swag.IsZero(m.NasParams) { // not required
			return nil
		}

		if err := m.NasParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) contextValidateSQLParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLParams != nil {

		if swag.IsZero(m.SQLParams) { // not required
			return nil
		}

		if err := m.SQLParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) contextValidateOracleParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleParams != nil {

		if swag.IsZero(m.OracleParams) { // not required
			return nil
		}

		if err := m.OracleParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) contextValidateExternallyTriggeredJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternallyTriggeredJobParams != nil {

		if swag.IsZero(m.ExternallyTriggeredJobParams) { // not required
			return nil
		}

		if err := m.ExternallyTriggeredJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externallyTriggeredJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externallyTriggeredJobParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) contextValidateOffice365Params(ctx context.Context, formats strfmt.Registry) error {

	if m.Office365Params != nil {

		if swag.IsZero(m.Office365Params) { // not required
			return nil
		}

		if err := m.Office365Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Params")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) contextValidateAwsSnapshotParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsSnapshotParams != nil {

		if swag.IsZero(m.AwsSnapshotParams) { // not required
			return nil
		}

		if err := m.AwsSnapshotParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsSnapshotParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsSnapshotParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) contextValidateExchangeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeParams != nil {

		if swag.IsZero(m.ExchangeParams) { // not required
			return nil
		}

		if err := m.ExchangeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentTypeJobParams) contextValidatePureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PureParams != nil {

		if swag.IsZero(m.PureParams) { // not required
			return nil
		}

		if err := m.PureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pureParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentTypeJobParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentTypeJobParams) UnmarshalBinary(b []byte) error {
	var res EnvironmentTypeJobParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
