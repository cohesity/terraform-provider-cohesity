// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureApplicationCredentials Specifies the credentials of an application from Azure active directory.
//
// swagger:model AzureApplicationCredentials
type AzureApplicationCredentials struct {

	// Specifies the application id of an Azure active directory application.
	// Required: true
	ApplicationID *string `json:"applicationId"`

	// Specifies the application object id of an Azure active directory application.
	ApplicationObjectID *string `json:"applicationObjectId,omitempty"`

	// Specifies the encrypted application key of an Azure active directory application.
	EncryptedApplicationKey *string `json:"encryptedApplicationKey,omitempty"`
}

// Validate validates this azure application credentials
func (m *AzureApplicationCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureApplicationCredentials) validateApplicationID(formats strfmt.Registry) error {

	if err := validate.Required("applicationId", "body", m.ApplicationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure application credentials based on context it is used
func (m *AzureApplicationCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureApplicationCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureApplicationCredentials) UnmarshalBinary(b []byte) error {
	var res AzureApplicationCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
