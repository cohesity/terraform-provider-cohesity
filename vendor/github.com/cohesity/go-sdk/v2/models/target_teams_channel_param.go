// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TargetTeamsChannelParam Specifies the target Microsoft 365 Team channel to recover to in case of granular restore
//
// swagger:model TargetTeamsChannelParam
type TargetTeamsChannelParam struct {

	// Specifies the id of the target channel.
	ID *string `json:"id,omitempty"`

	// Specifies the name of the target channel.
	Name *string `json:"name,omitempty"`

	// Specifies whether we should create a new channel. If this is true name must not be empty
	CreateNewChannel *bool `json:"createNewChannel,omitempty"`

	// Specifies whether to create a public or private channel
	// Enum: ["Private","Public"]
	ChannelType string `json:"channelType,omitempty"`

	// List of owners for the private channel. At least one owner is needed to create a private channel
	ChannelOwners []*RecoveryObjectIdentifier `json:"channelOwners"`
}

// Validate validates this target teams channel param
func (m *TargetTeamsChannelParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelOwners(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var targetTeamsChannelParamTypeChannelTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Private","Public"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		targetTeamsChannelParamTypeChannelTypePropEnum = append(targetTeamsChannelParamTypeChannelTypePropEnum, v)
	}
}

const (

	// TargetTeamsChannelParamChannelTypePrivate captures enum value "Private"
	TargetTeamsChannelParamChannelTypePrivate string = "Private"

	// TargetTeamsChannelParamChannelTypePublic captures enum value "Public"
	TargetTeamsChannelParamChannelTypePublic string = "Public"
)

// prop value enum
func (m *TargetTeamsChannelParam) validateChannelTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, targetTeamsChannelParamTypeChannelTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TargetTeamsChannelParam) validateChannelType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChannelTypeEnum("channelType", "body", m.ChannelType); err != nil {
		return err
	}

	return nil
}

func (m *TargetTeamsChannelParam) validateChannelOwners(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelOwners) { // not required
		return nil
	}

	for i := 0; i < len(m.ChannelOwners); i++ {
		if swag.IsZero(m.ChannelOwners[i]) { // not required
			continue
		}

		if m.ChannelOwners[i] != nil {
			if err := m.ChannelOwners[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channelOwners" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("channelOwners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this target teams channel param based on the context it is used
func (m *TargetTeamsChannelParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChannelOwners(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetTeamsChannelParam) contextValidateChannelOwners(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChannelOwners); i++ {

		if m.ChannelOwners[i] != nil {

			if swag.IsZero(m.ChannelOwners[i]) { // not required
				return nil
			}

			if err := m.ChannelOwners[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channelOwners" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("channelOwners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetTeamsChannelParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetTeamsChannelParam) UnmarshalBinary(b []byte) error {
	var res TargetTeamsChannelParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
