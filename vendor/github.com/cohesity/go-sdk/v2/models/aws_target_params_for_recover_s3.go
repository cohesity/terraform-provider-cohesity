// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsTargetParamsForRecoverS3 AWS Target Params for Recover S3 Buckets or Objects.
//
// Specifies the parameters for an AWS recovery target.
//
// swagger:model AwsTargetParamsForRecoverS3
type AwsTargetParamsForRecoverS3 struct {

	// Specifies whether to recover to the original target. If true, originalTargetConfig must be specified. If false, newTargetConfig must be specified.
	// Required: true
	RecoverToOriginalTarget *bool `json:"recoverToOriginalTarget"`

	// Specifies whether to override the existing objects. Default is false.
	OverwriteExisting *bool `json:"overwriteExisting,omitempty"`

	// Specifies whether to preserve the objects attributes at the time of restore. Default is true.
	PreserveAttributes *bool `json:"preserveAttributes,omitempty"`

	// Specifies whether to continue restore on receiving error or not. Default is true.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies the prefix to be added to all the objects being recovered.
	ObjectPrefix *string `json:"objectPrefix,omitempty"`

	// Specifies the configuration for recovering to a new target.
	NewTargetConfig *AwsRecoverS3NewTargetConfig `json:"newTargetConfig,omitempty"`
}

// Validate validates this aws target params for recover s3
func (m *AwsTargetParamsForRecoverS3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoverToOriginalTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewTargetConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsTargetParamsForRecoverS3) validateRecoverToOriginalTarget(formats strfmt.Registry) error {

	if err := validate.Required("recoverToOriginalTarget", "body", m.RecoverToOriginalTarget); err != nil {
		return err
	}

	return nil
}

func (m *AwsTargetParamsForRecoverS3) validateNewTargetConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.NewTargetConfig) { // not required
		return nil
	}

	if m.NewTargetConfig != nil {
		if err := m.NewTargetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newTargetConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws target params for recover s3 based on the context it is used
func (m *AwsTargetParamsForRecoverS3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewTargetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsTargetParamsForRecoverS3) contextValidateNewTargetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NewTargetConfig != nil {

		if swag.IsZero(m.NewTargetConfig) { // not required
			return nil
		}

		if err := m.NewTargetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newTargetConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsTargetParamsForRecoverS3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsTargetParamsForRecoverS3) UnmarshalBinary(b []byte) error {
	var res AwsTargetParamsForRecoverS3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
