// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IamRoleAwsCredentials AWS IAM Role credentials request parameters.
//
// # Specifies the credentials to register a commercial AWS
//
// swagger:model IamRoleAwsCredentials
type IamRoleAwsCredentials struct {

	// Specifies the IAM role which will be used to access the security credentials required for API calls. This should have all the permissions required for the tenant's use case. In case of DMaaS this will be the Tenant's IAM role ARN. This is assumed only after the cp_iam_role_arn(control plane role) is assumed
	// Required: true
	IamRoleArn *string `json:"iamRoleArn"`

	// This is only applicable in case of DMaaS. Control plane IAM role ARN, this is first assumed by the dataplane(cluster). Then we assume the iam_role_arn which is tenant's IAM role with all required permissions.
	CpIamRoleArn *string `json:"cpIamRoleArn,omitempty"`
}

// Validate validates this iam role aws credentials
func (m *IamRoleAwsCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIamRoleArn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamRoleAwsCredentials) validateIamRoleArn(formats strfmt.Registry) error {

	if err := validate.Required("iamRoleArn", "body", m.IamRoleArn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this iam role aws credentials based on context it is used
func (m *IamRoleAwsCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IamRoleAwsCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamRoleAwsCredentials) UnmarshalBinary(b []byte) error {
	var res IamRoleAwsCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
