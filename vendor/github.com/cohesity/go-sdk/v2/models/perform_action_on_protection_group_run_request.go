// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformActionOnProtectionGroupRunRequest Specifies the request to perform actions on protection runs.
//
// swagger:model PerformActionOnProtectionGroupRunRequest
type PerformActionOnProtectionGroupRunRequest struct {

	// Specifies the type of the action which will be performed on protection runs.
	// Required: true
	// Enum: ["Pause","Resume","Cancel"]
	Action *string `json:"action"`

	// Specifies the pause action params for a protection run.
	PauseParams []*PauseProtectionRunActionParams `json:"pauseParams"`

	// Specifies the resume action params for a protection run.
	ResumeParams []*ResumeProtectionRunActionParams `json:"resumeParams"`

	// Specifies the cancel action params for a protection run.
	CancelParams []*CancelProtectionGroupRunRequest `json:"cancelParams"`
}

// Validate validates this perform action on protection group run request
func (m *PerformActionOnProtectionGroupRunRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePauseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResumeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCancelParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var performActionOnProtectionGroupRunRequestTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pause","Resume","Cancel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performActionOnProtectionGroupRunRequestTypeActionPropEnum = append(performActionOnProtectionGroupRunRequestTypeActionPropEnum, v)
	}
}

const (

	// PerformActionOnProtectionGroupRunRequestActionPause captures enum value "Pause"
	PerformActionOnProtectionGroupRunRequestActionPause string = "Pause"

	// PerformActionOnProtectionGroupRunRequestActionResume captures enum value "Resume"
	PerformActionOnProtectionGroupRunRequestActionResume string = "Resume"

	// PerformActionOnProtectionGroupRunRequestActionCancel captures enum value "Cancel"
	PerformActionOnProtectionGroupRunRequestActionCancel string = "Cancel"
)

// prop value enum
func (m *PerformActionOnProtectionGroupRunRequest) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performActionOnProtectionGroupRunRequestTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformActionOnProtectionGroupRunRequest) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *PerformActionOnProtectionGroupRunRequest) validatePauseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PauseParams) { // not required
		return nil
	}

	for i := 0; i < len(m.PauseParams); i++ {
		if swag.IsZero(m.PauseParams[i]) { // not required
			continue
		}

		if m.PauseParams[i] != nil {
			if err := m.PauseParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pauseParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pauseParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformActionOnProtectionGroupRunRequest) validateResumeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ResumeParams) { // not required
		return nil
	}

	for i := 0; i < len(m.ResumeParams); i++ {
		if swag.IsZero(m.ResumeParams[i]) { // not required
			continue
		}

		if m.ResumeParams[i] != nil {
			if err := m.ResumeParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resumeParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resumeParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformActionOnProtectionGroupRunRequest) validateCancelParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CancelParams) { // not required
		return nil
	}

	for i := 0; i < len(m.CancelParams); i++ {
		if swag.IsZero(m.CancelParams[i]) { // not required
			continue
		}

		if m.CancelParams[i] != nil {
			if err := m.CancelParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cancelParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cancelParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this perform action on protection group run request based on the context it is used
func (m *PerformActionOnProtectionGroupRunRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePauseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResumeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCancelParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformActionOnProtectionGroupRunRequest) contextValidatePauseParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PauseParams); i++ {

		if m.PauseParams[i] != nil {

			if swag.IsZero(m.PauseParams[i]) { // not required
				return nil
			}

			if err := m.PauseParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pauseParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pauseParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformActionOnProtectionGroupRunRequest) contextValidateResumeParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResumeParams); i++ {

		if m.ResumeParams[i] != nil {

			if swag.IsZero(m.ResumeParams[i]) { // not required
				return nil
			}

			if err := m.ResumeParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resumeParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resumeParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerformActionOnProtectionGroupRunRequest) contextValidateCancelParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CancelParams); i++ {

		if m.CancelParams[i] != nil {

			if swag.IsZero(m.CancelParams[i]) { // not required
				return nil
			}

			if err := m.CancelParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cancelParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cancelParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformActionOnProtectionGroupRunRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformActionOnProtectionGroupRunRequest) UnmarshalBinary(b []byte) error {
	var res PerformActionOnProtectionGroupRunRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
