// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverAzureSQLObjectParams Specifies details of recovery object to be recovered.
//
// swagger:model RecoverAzureSqlObjectParams
type RecoverAzureSQLObjectParams struct {

	// Set to true to overwrite an existing object at the destination. If set to false, and the same object exists at the destination, then recovery will fail for that object.
	OverwriteDatabase *bool `json:"overwriteDatabase,omitempty"`

	// Specifies the new name to which the object should be renamed to after the recovery.
	NewDatabaseName *string `json:"newDatabaseName,omitempty"`

	// Specifies the SQL package options to be used during Azure SQL Object Recovery.
	SQLPackageOptions *AzureSQLPackageOptions `json:"sqlPackageOptions,omitempty"`

	// Specifies the restored database sku options to be used during Azure SQL Object Recovery.
	RestoredDatabaseSku *AzureSQLSkuOptions `json:"restoredDatabaseSku,omitempty"`
}

// Validate validates this recover azure Sql object params
func (m *RecoverAzureSQLObjectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSQLPackageOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoredDatabaseSku(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverAzureSQLObjectParams) validateSQLPackageOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLPackageOptions) { // not required
		return nil
	}

	if m.SQLPackageOptions != nil {
		if err := m.SQLPackageOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlPackageOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlPackageOptions")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureSQLObjectParams) validateRestoredDatabaseSku(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoredDatabaseSku) { // not required
		return nil
	}

	if m.RestoredDatabaseSku != nil {
		if err := m.RestoredDatabaseSku.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredDatabaseSku")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredDatabaseSku")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover azure Sql object params based on the context it is used
func (m *RecoverAzureSQLObjectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSQLPackageOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestoredDatabaseSku(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverAzureSQLObjectParams) contextValidateSQLPackageOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLPackageOptions != nil {

		if swag.IsZero(m.SQLPackageOptions) { // not required
			return nil
		}

		if err := m.SQLPackageOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlPackageOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlPackageOptions")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureSQLObjectParams) contextValidateRestoredDatabaseSku(ctx context.Context, formats strfmt.Registry) error {

	if m.RestoredDatabaseSku != nil {

		if swag.IsZero(m.RestoredDatabaseSku) { // not required
			return nil
		}

		if err := m.RestoredDatabaseSku.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restoredDatabaseSku")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restoredDatabaseSku")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverAzureSQLObjectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverAzureSQLObjectParams) UnmarshalBinary(b []byte) error {
	var res RecoverAzureSQLObjectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
