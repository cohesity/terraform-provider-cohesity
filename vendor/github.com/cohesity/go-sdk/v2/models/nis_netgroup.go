// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NisNetgroup Specifies an NIS netgroup.
//
// swagger:model NisNetgroup
type NisNetgroup struct {

	// Specifies the netgroup name.
	// Required: true
	Name *string `json:"name"`

	// Specifies the domain name for the netgroup.
	// Required: true
	Domain *string `json:"domain"`

	// Specifies NFS protocol acess level for clients from the netgroup.
	// Enum: ["kDisabled","kReadOnly","kReadWrite"]
	NfsAccess *string `json:"nfsAccess,omitempty"`

	// Specifies which nfsSquash Mounted.
	// 'kNone' mounts none.
	// 'kRootSquash' mounts nfsRootSquash. Whether clients from this subnet can
	// mount as root on NFS.
	// 'kAllSquash' mounts nfsAllSquash. Whether all clients from this subnet can
	// map view with view_all_squash_uid/view_all_squash_gid configured in
	// the view.
	// Enum: ["kNone","kRootSquash","kAllSquash"]
	NfsSquash *string `json:"nfsSquash,omitempty"`
}

// Validate validates this nis netgroup
func (m *NisNetgroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsSquash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NisNetgroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NisNetgroup) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

var nisNetgroupTypeNfsAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDisabled","kReadOnly","kReadWrite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nisNetgroupTypeNfsAccessPropEnum = append(nisNetgroupTypeNfsAccessPropEnum, v)
	}
}

const (

	// NisNetgroupNfsAccessKDisabled captures enum value "kDisabled"
	NisNetgroupNfsAccessKDisabled string = "kDisabled"

	// NisNetgroupNfsAccessKReadOnly captures enum value "kReadOnly"
	NisNetgroupNfsAccessKReadOnly string = "kReadOnly"

	// NisNetgroupNfsAccessKReadWrite captures enum value "kReadWrite"
	NisNetgroupNfsAccessKReadWrite string = "kReadWrite"
)

// prop value enum
func (m *NisNetgroup) validateNfsAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nisNetgroupTypeNfsAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NisNetgroup) validateNfsAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsAccess) { // not required
		return nil
	}

	// value enum
	if err := m.validateNfsAccessEnum("nfsAccess", "body", *m.NfsAccess); err != nil {
		return err
	}

	return nil
}

var nisNetgroupTypeNfsSquashPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNone","kRootSquash","kAllSquash"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nisNetgroupTypeNfsSquashPropEnum = append(nisNetgroupTypeNfsSquashPropEnum, v)
	}
}

const (

	// NisNetgroupNfsSquashKNone captures enum value "kNone"
	NisNetgroupNfsSquashKNone string = "kNone"

	// NisNetgroupNfsSquashKRootSquash captures enum value "kRootSquash"
	NisNetgroupNfsSquashKRootSquash string = "kRootSquash"

	// NisNetgroupNfsSquashKAllSquash captures enum value "kAllSquash"
	NisNetgroupNfsSquashKAllSquash string = "kAllSquash"
)

// prop value enum
func (m *NisNetgroup) validateNfsSquashEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nisNetgroupTypeNfsSquashPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NisNetgroup) validateNfsSquash(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsSquash) { // not required
		return nil
	}

	// value enum
	if err := m.validateNfsSquashEnum("nfsSquash", "body", *m.NfsSquash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nis netgroup based on context it is used
func (m *NisNetgroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NisNetgroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NisNetgroup) UnmarshalBinary(b []byte) error {
	var res NisNetgroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
