// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterPackageStatus Status of a package along with error message, if any.
//
// swagger:model ClusterPackageStatus
type ClusterPackageStatus struct {

	// Status of the package
	// * `Available` - Package is available for use.
	// * `DownloadFailed` - Package download has failed.
	//
	// Required: true
	// Enum: ["Available","DownloadFailed"]
	Status *string `json:"status"`

	// Error message if package is not available.
	//
	ErrorMsg string `json:"errorMsg,omitempty"`
}

// Validate validates this cluster package status
func (m *ClusterPackageStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterPackageStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Available","DownloadFailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterPackageStatusTypeStatusPropEnum = append(clusterPackageStatusTypeStatusPropEnum, v)
	}
}

const (

	// ClusterPackageStatusStatusAvailable captures enum value "Available"
	ClusterPackageStatusStatusAvailable string = "Available"

	// ClusterPackageStatusStatusDownloadFailed captures enum value "DownloadFailed"
	ClusterPackageStatusStatusDownloadFailed string = "DownloadFailed"
)

// prop value enum
func (m *ClusterPackageStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterPackageStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterPackageStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster package status based on context it is used
func (m *ClusterPackageStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterPackageStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterPackageStatus) UnmarshalBinary(b []byte) error {
	var res ClusterPackageStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
