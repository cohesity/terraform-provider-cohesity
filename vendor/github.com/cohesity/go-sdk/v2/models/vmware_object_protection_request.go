// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareObjectProtectionRequest Specifies the VMware object level settings for object protection.
//
// swagger:model VmwareObjectProtectionRequest
type VmwareObjectProtectionRequest struct {

	// Specifies the id of the object being protected. This can be a leaf level or non leaf level object.
	// Required: true
	ID *int64 `json:"id"`

	// Specifies the list of IDs of the objects to not be protected in this backup. This field only applies if provided object id is non leaf entity such as Tag or a folder. This can be used to ignore specific objects under a parent object which has been included for protection.
	ExcludeObjectIds []*int64 `json:"excludeObjectIds"`

	CommonVmwareObjectParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VmwareObjectProtectionRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID *int64 `json:"id"`

		ExcludeObjectIds []*int64 `json:"excludeObjectIds"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ID = dataAO0.ID

	m.ExcludeObjectIds = dataAO0.ExcludeObjectIds

	// AO1
	var aO1 CommonVmwareObjectParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.CommonVmwareObjectParams = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VmwareObjectProtectionRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID *int64 `json:"id"`

		ExcludeObjectIds []*int64 `json:"excludeObjectIds"`
	}

	dataAO0.ID = m.ID

	dataAO0.ExcludeObjectIds = m.ExcludeObjectIds

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.CommonVmwareObjectParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vmware object protection request
func (m *VmwareObjectProtectionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with CommonVmwareObjectParams
	if err := m.CommonVmwareObjectParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareObjectProtectionRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vmware object protection request based on the context it is used
func (m *VmwareObjectProtectionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonVmwareObjectParams
	if err := m.CommonVmwareObjectParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VmwareObjectProtectionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareObjectProtectionRequest) UnmarshalBinary(b []byte) error {
	var res VmwareObjectProtectionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
