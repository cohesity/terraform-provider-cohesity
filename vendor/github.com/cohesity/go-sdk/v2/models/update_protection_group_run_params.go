// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateProtectionGroupRunParams Update Protection Group Run Request Params.
//
// Specifies the params to update a Protection Group Run.
//
// swagger:model UpdateProtectionGroupRunParams
type UpdateProtectionGroupRunParams struct {

	// Specifies a unique Protection Group Run id.
	// Required: true
	// Pattern: ^\d+:\d+$
	RunID *string `json:"runId"`

	// Specifies the params to perform actions on local snapshot taken by this Protection Group Run.
	LocalSnapshotConfig *UpdateLocalSnapshotConfig `json:"localSnapshotConfig,omitempty"`

	// Specifies the params to perform actions on replication snapshots taken by this Protection Group Run. A user can configure new replication targets here.
	ReplicationSnapshotConfig *UpdateReplicationSnapshotConfig `json:"replicationSnapshotConfig,omitempty"`

	// Specifies the params to perform actions on archival snapshots taken by this Protection Group Run. A user can configure new archival targets here.
	ArchivalSnapshotConfig *UpdateArchivalSnapshotConfig `json:"archivalSnapshotConfig,omitempty"`
}

// Validate validates this update protection group run params
func (m *UpdateProtectionGroupRunParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalSnapshotConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationSnapshotConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivalSnapshotConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateProtectionGroupRunParams) validateRunID(formats strfmt.Registry) error {

	if err := validate.Required("runId", "body", m.RunID); err != nil {
		return err
	}

	if err := validate.Pattern("runId", "body", *m.RunID, `^\d+:\d+$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateProtectionGroupRunParams) validateLocalSnapshotConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalSnapshotConfig) { // not required
		return nil
	}

	if m.LocalSnapshotConfig != nil {
		if err := m.LocalSnapshotConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionGroupRunParams) validateReplicationSnapshotConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationSnapshotConfig) { // not required
		return nil
	}

	if m.ReplicationSnapshotConfig != nil {
		if err := m.ReplicationSnapshotConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionGroupRunParams) validateArchivalSnapshotConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalSnapshotConfig) { // not required
		return nil
	}

	if m.ArchivalSnapshotConfig != nil {
		if err := m.ArchivalSnapshotConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update protection group run params based on the context it is used
func (m *UpdateProtectionGroupRunParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocalSnapshotConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationSnapshotConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchivalSnapshotConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateProtectionGroupRunParams) contextValidateLocalSnapshotConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalSnapshotConfig != nil {

		if swag.IsZero(m.LocalSnapshotConfig) { // not required
			return nil
		}

		if err := m.LocalSnapshotConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionGroupRunParams) contextValidateReplicationSnapshotConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationSnapshotConfig != nil {

		if swag.IsZero(m.ReplicationSnapshotConfig) { // not required
			return nil
		}

		if err := m.ReplicationSnapshotConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateProtectionGroupRunParams) contextValidateArchivalSnapshotConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchivalSnapshotConfig != nil {

		if swag.IsZero(m.ArchivalSnapshotConfig) { // not required
			return nil
		}

		if err := m.ArchivalSnapshotConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateProtectionGroupRunParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateProtectionGroupRunParams) UnmarshalBinary(b []byte) error {
	var res UpdateProtectionGroupRunParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
