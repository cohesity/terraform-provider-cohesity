// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeployClusterResult Create Cluster Result
//
// Specifies the immediate result of a Cluster creation request Contains validation results for each node. If the request is valid, it also indicates that the individual node bringup operation is started in the background.
//
// swagger:model DeployClusterResult
type DeployClusterResult struct {
	Cluster

	// All Nodes that are accepted to the Cluster are appended to this list.
	HealthyNodes []*NodeStatus `json:"healthyNodes"`

	// All Nodes that are not accepted to the Cluster are appended to this list.
	UnhealthyNodes []*NodeStatus `json:"unhealthyNodes"`

	// Specifies an optional message field
	Message *string `json:"message,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DeployClusterResult) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Cluster
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Cluster = aO0

	// now for regular properties
	var propsDeployClusterResult struct {
		HealthyNodes []*NodeStatus `json:"healthyNodes"`

		UnhealthyNodes []*NodeStatus `json:"unhealthyNodes"`

		Message *string `json:"message,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsDeployClusterResult); err != nil {
		return err
	}
	m.HealthyNodes = propsDeployClusterResult.HealthyNodes

	m.UnhealthyNodes = propsDeployClusterResult.UnhealthyNodes

	m.Message = propsDeployClusterResult.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DeployClusterResult) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.Cluster)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsDeployClusterResult struct {
		HealthyNodes []*NodeStatus `json:"healthyNodes"`

		UnhealthyNodes []*NodeStatus `json:"unhealthyNodes"`

		Message *string `json:"message,omitempty"`
	}
	propsDeployClusterResult.HealthyNodes = m.HealthyNodes

	propsDeployClusterResult.UnhealthyNodes = m.UnhealthyNodes

	propsDeployClusterResult.Message = m.Message

	jsonDataPropsDeployClusterResult, errDeployClusterResult := swag.WriteJSON(propsDeployClusterResult)
	if errDeployClusterResult != nil {
		return nil, errDeployClusterResult
	}
	_parts = append(_parts, jsonDataPropsDeployClusterResult)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this deploy cluster result
func (m *DeployClusterResult) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Cluster
	if err := m.Cluster.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthyNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnhealthyNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployClusterResult) validateHealthyNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthyNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.HealthyNodes); i++ {
		if swag.IsZero(m.HealthyNodes[i]) { // not required
			continue
		}

		if m.HealthyNodes[i] != nil {
			if err := m.HealthyNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("healthyNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("healthyNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeployClusterResult) validateUnhealthyNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.UnhealthyNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.UnhealthyNodes); i++ {
		if swag.IsZero(m.UnhealthyNodes[i]) { // not required
			continue
		}

		if m.UnhealthyNodes[i] != nil {
			if err := m.UnhealthyNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unhealthyNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unhealthyNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this deploy cluster result based on the context it is used
func (m *DeployClusterResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Cluster
	if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthyNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnhealthyNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployClusterResult) contextValidateHealthyNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HealthyNodes); i++ {

		if m.HealthyNodes[i] != nil {

			if swag.IsZero(m.HealthyNodes[i]) { // not required
				return nil
			}

			if err := m.HealthyNodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("healthyNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("healthyNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeployClusterResult) contextValidateUnhealthyNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UnhealthyNodes); i++ {

		if m.UnhealthyNodes[i] != nil {

			if swag.IsZero(m.UnhealthyNodes[i]) { // not required
				return nil
			}

			if err := m.UnhealthyNodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unhealthyNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unhealthyNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployClusterResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployClusterResult) UnmarshalBinary(b []byte) error {
	var res DeployClusterResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
