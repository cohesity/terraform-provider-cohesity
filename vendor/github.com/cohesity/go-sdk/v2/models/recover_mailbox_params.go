// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverMailboxParams Specifies the parameters to recover an Office 365 Mailbox.
//
// swagger:model RecoverMailboxParams
type RecoverMailboxParams struct {

	// Specifies a list of Mailbox params associated with the objects to recover.
	// Required: true
	Objects []*ObjectMailboxParam `json:"objects"`

	// Specifies whether to continue recovering other Mailboxes if one of Mailbox failed to recover. Default value is false.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies whether to skip the recovery of the archive mailbox and/or items present in the archive mailbox. Default value is true
	SkipRecoverArchiveMailbox *bool `json:"skipRecoverArchiveMailbox,omitempty"`

	// Specifies whether to skip the recovery of the Recoverable Items present in the selected snapshot. Default value is true
	SkipRecoverRecoverableItems *bool `json:"skipRecoverRecoverableItems,omitempty"`

	// Specifies whether to skip the recovery of the Archive Recoverable Items present in the selected snapshot. Default value is true
	SkipRecoverArchiveRecoverableItems *bool `json:"skipRecoverArchiveRecoverableItems,omitempty"`

	// Specifies the PST conversion specific parameters. This should always be specified when need to convert selected items to PST.
	PstParams *PstParam `json:"pstParams,omitempty"`

	// Specifies the target Mailbox to recover to. If not specified, the objects will be recovered to original location.
	TargetMailbox *TargetMailboxParam `json:"targetMailbox,omitempty"`
}

// Validate validates this recover mailbox params
func (m *RecoverMailboxParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePstParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetMailbox(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverMailboxParams) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverMailboxParams) validatePstParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PstParams) { // not required
		return nil
	}

	if m.PstParams != nil {
		if err := m.PstParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pstParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pstParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverMailboxParams) validateTargetMailbox(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetMailbox) { // not required
		return nil
	}

	if m.TargetMailbox != nil {
		if err := m.TargetMailbox.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetMailbox")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetMailbox")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover mailbox params based on the context it is used
func (m *RecoverMailboxParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePstParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetMailbox(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverMailboxParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverMailboxParams) contextValidatePstParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PstParams != nil {

		if swag.IsZero(m.PstParams) { // not required
			return nil
		}

		if err := m.PstParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pstParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pstParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverMailboxParams) contextValidateTargetMailbox(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetMailbox != nil {

		if swag.IsZero(m.TargetMailbox) { // not required
			return nil
		}

		if err := m.TargetMailbox.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetMailbox")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetMailbox")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverMailboxParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverMailboxParams) UnmarshalBinary(b []byte) error {
	var res RecoverMailboxParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
