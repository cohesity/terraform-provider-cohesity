// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DownloadFilesAndFoldersRequestParams Download Files And Folders Recovery Params.
//
// Specifies the parameters to create a download files and folders Recovery.
//
// swagger:model DownloadFilesAndFoldersRequestParams
type DownloadFilesAndFoldersRequestParams struct {

	// Specifies the name of the recovery task. This field must be set and must be a unique name.
	// Required: true
	Name *string `json:"name"`

	// Specifies the snapshot object from which to download files and folders.
	// Required: true
	Object *CommonRecoverObjectSnapshotParams `json:"object"`

	// If current recovery is child task triggered through another parent recovery operation, then this field will specify the id of the parent recovery.
	// Pattern: ^\d+:\d+:\d+$
	ParentRecoveryID *string `json:"parentRecoveryId,omitempty"`

	// Specifies the list of files and folders to download. Only one of filesAndFolders or documents should be used.
	// Min Items: 1
	FilesAndFolders []*FilesAndFoldersObject `json:"filesAndFolders"`

	// Specifies the list of documents to download using item ids. Only one of filesAndFolders or documents should be used. Currently only files are supported by documents.
	// Min Items: 1
	Documents []*DocumentObject `json:"documents"`

	// Specifies the glacier retrieval type when restoring or downloding files or folders from a Glacier-based cloud snapshot.
	// Enum: ["kStandard","kExpeditedNoPCU","kExpeditedWithPCU"]
	GlacierRetrievalType *string `json:"glacierRetrievalType,omitempty"`
}

// Validate validates this download files and folders request params
func (m *DownloadFilesAndFoldersRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentRecoveryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilesAndFolders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlacierRetrievalType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DownloadFilesAndFoldersRequestParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DownloadFilesAndFoldersRequestParams) validateObject(formats strfmt.Registry) error {

	if err := validate.Required("object", "body", m.Object); err != nil {
		return err
	}

	if m.Object != nil {
		if err := m.Object.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadFilesAndFoldersRequestParams) validateParentRecoveryID(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentRecoveryID) { // not required
		return nil
	}

	if err := validate.Pattern("parentRecoveryId", "body", *m.ParentRecoveryID, `^\d+:\d+:\d+$`); err != nil {
		return err
	}

	return nil
}

func (m *DownloadFilesAndFoldersRequestParams) validateFilesAndFolders(formats strfmt.Registry) error {
	if swag.IsZero(m.FilesAndFolders) { // not required
		return nil
	}

	iFilesAndFoldersSize := int64(len(m.FilesAndFolders))

	if err := validate.MinItems("filesAndFolders", "body", iFilesAndFoldersSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FilesAndFolders); i++ {
		if swag.IsZero(m.FilesAndFolders[i]) { // not required
			continue
		}

		if m.FilesAndFolders[i] != nil {
			if err := m.FilesAndFolders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filesAndFolders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filesAndFolders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DownloadFilesAndFoldersRequestParams) validateDocuments(formats strfmt.Registry) error {
	if swag.IsZero(m.Documents) { // not required
		return nil
	}

	iDocumentsSize := int64(len(m.Documents))

	if err := validate.MinItems("documents", "body", iDocumentsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Documents); i++ {
		if swag.IsZero(m.Documents[i]) { // not required
			continue
		}

		if m.Documents[i] != nil {
			if err := m.Documents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("documents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var downloadFilesAndFoldersRequestParamsTypeGlacierRetrievalTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStandard","kExpeditedNoPCU","kExpeditedWithPCU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		downloadFilesAndFoldersRequestParamsTypeGlacierRetrievalTypePropEnum = append(downloadFilesAndFoldersRequestParamsTypeGlacierRetrievalTypePropEnum, v)
	}
}

const (

	// DownloadFilesAndFoldersRequestParamsGlacierRetrievalTypeKStandard captures enum value "kStandard"
	DownloadFilesAndFoldersRequestParamsGlacierRetrievalTypeKStandard string = "kStandard"

	// DownloadFilesAndFoldersRequestParamsGlacierRetrievalTypeKExpeditedNoPCU captures enum value "kExpeditedNoPCU"
	DownloadFilesAndFoldersRequestParamsGlacierRetrievalTypeKExpeditedNoPCU string = "kExpeditedNoPCU"

	// DownloadFilesAndFoldersRequestParamsGlacierRetrievalTypeKExpeditedWithPCU captures enum value "kExpeditedWithPCU"
	DownloadFilesAndFoldersRequestParamsGlacierRetrievalTypeKExpeditedWithPCU string = "kExpeditedWithPCU"
)

// prop value enum
func (m *DownloadFilesAndFoldersRequestParams) validateGlacierRetrievalTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, downloadFilesAndFoldersRequestParamsTypeGlacierRetrievalTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DownloadFilesAndFoldersRequestParams) validateGlacierRetrievalType(formats strfmt.Registry) error {
	if swag.IsZero(m.GlacierRetrievalType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGlacierRetrievalTypeEnum("glacierRetrievalType", "body", *m.GlacierRetrievalType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this download files and folders request params based on the context it is used
func (m *DownloadFilesAndFoldersRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilesAndFolders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DownloadFilesAndFoldersRequestParams) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if m.Object != nil {

		if err := m.Object.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadFilesAndFoldersRequestParams) contextValidateFilesAndFolders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilesAndFolders); i++ {

		if m.FilesAndFolders[i] != nil {

			if swag.IsZero(m.FilesAndFolders[i]) { // not required
				return nil
			}

			if err := m.FilesAndFolders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filesAndFolders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filesAndFolders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DownloadFilesAndFoldersRequestParams) contextValidateDocuments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Documents); i++ {

		if m.Documents[i] != nil {

			if swag.IsZero(m.Documents[i]) { // not required
				return nil
			}

			if err := m.Documents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("documents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DownloadFilesAndFoldersRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DownloadFilesAndFoldersRequestParams) UnmarshalBinary(b []byte) error {
	var res DownloadFilesAndFoldersRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
