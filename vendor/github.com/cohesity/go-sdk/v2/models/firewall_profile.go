// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirewallProfile Specifies the firewall profile & their attachments.
//
// swagger:model FirewallProfile
type FirewallProfile struct {

	// Specifies the name of the profile.
	// Required: true
	Name *string `json:"name"`

	// Specifies the port along with the protocol settings. For example 22/tcp, 68/udp.
	Ports []string `json:"ports,omitempty"`

	// Specifies the packet direction settings.
	Directions []string `json:"directions,omitempty"`
}

// Validate validates this firewall profile
func (m *FirewallProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirections(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirewallProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var firewallProfileDirectionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INPUT","OUTPUT","NAT_INPUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firewallProfileDirectionsItemsEnum = append(firewallProfileDirectionsItemsEnum, v)
	}
}

func (m *FirewallProfile) validateDirectionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, firewallProfileDirectionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FirewallProfile) validateDirections(formats strfmt.Registry) error {
	if swag.IsZero(m.Directions) { // not required
		return nil
	}

	for i := 0; i < len(m.Directions); i++ {

		// value enum
		if err := m.validateDirectionsItemsEnum("directions"+"."+strconv.Itoa(i), "body", m.Directions[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this firewall profile based on context it is used
func (m *FirewallProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FirewallProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirewallProfile) UnmarshalBinary(b []byte) error {
	var res FirewallProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
