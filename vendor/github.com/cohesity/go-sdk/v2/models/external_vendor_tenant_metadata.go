// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExternalVendorTenantMetadata ExternalVendorTenantMetadata
//
// Specifies the additional metadata for the tenant that is specifically set by the external vendors who are responsible for managing tenants. This field will only applicable if tenant creation is happening for a specially provisioned clusters for external vendors.
//
// swagger:model ExternalVendorTenantMetadata
type ExternalVendorTenantMetadata struct {

	// Specifies the type of the external vendor. The type specific parameters must be specified the provided type.
	// Required: true
	// Enum: ["IBM"]
	Type *string `json:"type"`

	// Specifies the additional metadata for the tenant that is specifically set by the external vendor of type 'IBM'.
	IbmTenantMetadataParams *IbmTenantMetadataParams `json:"ibmTenantMetadataParams,omitempty"`
}

// Validate validates this external vendor tenant metadata
func (m *ExternalVendorTenantMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmTenantMetadataParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var externalVendorTenantMetadataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IBM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		externalVendorTenantMetadataTypeTypePropEnum = append(externalVendorTenantMetadataTypeTypePropEnum, v)
	}
}

const (

	// ExternalVendorTenantMetadataTypeIBM captures enum value "IBM"
	ExternalVendorTenantMetadataTypeIBM string = "IBM"
)

// prop value enum
func (m *ExternalVendorTenantMetadata) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, externalVendorTenantMetadataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExternalVendorTenantMetadata) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ExternalVendorTenantMetadata) validateIbmTenantMetadataParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IbmTenantMetadataParams) { // not required
		return nil
	}

	if m.IbmTenantMetadataParams != nil {
		if err := m.IbmTenantMetadataParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibmTenantMetadataParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibmTenantMetadataParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this external vendor tenant metadata based on the context it is used
func (m *ExternalVendorTenantMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIbmTenantMetadataParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalVendorTenantMetadata) contextValidateIbmTenantMetadataParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IbmTenantMetadataParams != nil {

		if swag.IsZero(m.IbmTenantMetadataParams) { // not required
			return nil
		}

		if err := m.IbmTenantMetadataParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibmTenantMetadataParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibmTenantMetadataParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExternalVendorTenantMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalVendorTenantMetadata) UnmarshalBinary(b []byte) error {
	var res ExternalVendorTenantMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
