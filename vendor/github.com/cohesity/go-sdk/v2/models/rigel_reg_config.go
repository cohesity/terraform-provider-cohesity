// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RigelRegConfig Rigel Registration Config.
//
// Specifies the Rigel Registration Config.
//
// swagger:model RigelRegConfig
type RigelRegConfig struct {

	// Specifies the registration status.
	RegInfo *RigelClaimInfo `json:"regInfo,omitempty"`

	// Specifies the connection status between rigel and control plane(helios).
	ControlPlaneConnectionInfo *RigelConnectionInfo `json:"controlPlaneConnectionInfo,omitempty"`

	// Specifies the connection status between rigel and data plane.
	DataPlaneConnectionInfo *RigelConnectionInfo `json:"dataPlaneConnectionInfo,omitempty"`

	// Flag to indicate if certificate is valid.
	IsCertificateValid *bool `json:"isCertificateValid,omitempty"`
}

// Validate validates this rigel reg config
func (m *RigelRegConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControlPlaneConnectionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataPlaneConnectionInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RigelRegConfig) validateRegInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RegInfo) { // not required
		return nil
	}

	if m.RegInfo != nil {
		if err := m.RegInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("regInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RigelRegConfig) validateControlPlaneConnectionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlPlaneConnectionInfo) { // not required
		return nil
	}

	if m.ControlPlaneConnectionInfo != nil {
		if err := m.ControlPlaneConnectionInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlPlaneConnectionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controlPlaneConnectionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RigelRegConfig) validateDataPlaneConnectionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DataPlaneConnectionInfo) { // not required
		return nil
	}

	if m.DataPlaneConnectionInfo != nil {
		if err := m.DataPlaneConnectionInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataPlaneConnectionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataPlaneConnectionInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rigel reg config based on the context it is used
func (m *RigelRegConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControlPlaneConnectionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataPlaneConnectionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RigelRegConfig) contextValidateRegInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RegInfo != nil {

		if swag.IsZero(m.RegInfo) { // not required
			return nil
		}

		if err := m.RegInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("regInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RigelRegConfig) contextValidateControlPlaneConnectionInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ControlPlaneConnectionInfo != nil {

		if swag.IsZero(m.ControlPlaneConnectionInfo) { // not required
			return nil
		}

		if err := m.ControlPlaneConnectionInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlPlaneConnectionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controlPlaneConnectionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RigelRegConfig) contextValidateDataPlaneConnectionInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DataPlaneConnectionInfo != nil {

		if swag.IsZero(m.DataPlaneConnectionInfo) { // not required
			return nil
		}

		if err := m.DataPlaneConnectionInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataPlaneConnectionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataPlaneConnectionInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RigelRegConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RigelRegConfig) UnmarshalBinary(b []byte) error {
	var res RigelRegConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
