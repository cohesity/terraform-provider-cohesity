// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateProtectionGroupRunRequest Specifies the request to create a protection run. On success, the system will accept the request and return the Protection Group id for which the run is supposed to start. The actual run may start at a later time if the system is busy. Consumers must query the Protection Group to see the run.
//
// swagger:model CreateProtectionGroupRunRequest
type CreateProtectionGroupRunRequest struct {

	// Type of protection run. 'kRegular' indicates an incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates system volume backup. It produces an image for bare metal recovery.
	// Required: true
	// Enum: ["kRegular","kFull","kLog","kSystem","kHydrateCDP","kStorageArraySnapshot"]
	RunType *string `json:"runType"`

	// Specifies the list of objects to be protected by this Protection Group run. These can be leaf objects or non-leaf objects in the protection hierarchy. This must be specified only if a subset of objects from the Protection Groups needs to be protected.
	Objects []*RunObject `json:"objects"`

	// Specifies the remote, archival or cloudSpin targets where the snapshot is backed up.
	TargetsConfig *RunTargetsConfiguration `json:"targetsConfig,omitempty"`

	// Specifies the parameters specific to Universal Data Adapter.
	UdaParams *UdaProtectionRunParams `json:"udaParams,omitempty"`

	// Specifies the parameters specific to Cassandra Adapter.
	CassandraParams *CassandraProtectionRunParams `json:"cassandraParams,omitempty"`
}

// Validate validates this create protection group run request
func (m *CreateProtectionGroupRunRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetsConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createProtectionGroupRunRequestTypeRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kFull","kLog","kSystem","kHydrateCDP","kStorageArraySnapshot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createProtectionGroupRunRequestTypeRunTypePropEnum = append(createProtectionGroupRunRequestTypeRunTypePropEnum, v)
	}
}

const (

	// CreateProtectionGroupRunRequestRunTypeKRegular captures enum value "kRegular"
	CreateProtectionGroupRunRequestRunTypeKRegular string = "kRegular"

	// CreateProtectionGroupRunRequestRunTypeKFull captures enum value "kFull"
	CreateProtectionGroupRunRequestRunTypeKFull string = "kFull"

	// CreateProtectionGroupRunRequestRunTypeKLog captures enum value "kLog"
	CreateProtectionGroupRunRequestRunTypeKLog string = "kLog"

	// CreateProtectionGroupRunRequestRunTypeKSystem captures enum value "kSystem"
	CreateProtectionGroupRunRequestRunTypeKSystem string = "kSystem"

	// CreateProtectionGroupRunRequestRunTypeKHydrateCDP captures enum value "kHydrateCDP"
	CreateProtectionGroupRunRequestRunTypeKHydrateCDP string = "kHydrateCDP"

	// CreateProtectionGroupRunRequestRunTypeKStorageArraySnapshot captures enum value "kStorageArraySnapshot"
	CreateProtectionGroupRunRequestRunTypeKStorageArraySnapshot string = "kStorageArraySnapshot"
)

// prop value enum
func (m *CreateProtectionGroupRunRequest) validateRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createProtectionGroupRunRequestTypeRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateProtectionGroupRunRequest) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("runType", "body", m.RunType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRunTypeEnum("runType", "body", *m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *CreateProtectionGroupRunRequest) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateProtectionGroupRunRequest) validateTargetsConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetsConfig) { // not required
		return nil
	}

	if m.TargetsConfig != nil {
		if err := m.TargetsConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetsConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreateProtectionGroupRunRequest) validateUdaParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaParams) { // not required
		return nil
	}

	if m.UdaParams != nil {
		if err := m.UdaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateProtectionGroupRunRequest) validateCassandraParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraParams) { // not required
		return nil
	}

	if m.CassandraParams != nil {
		if err := m.CassandraParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create protection group run request based on the context it is used
func (m *CreateProtectionGroupRunRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetsConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateProtectionGroupRunRequest) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateProtectionGroupRunRequest) contextValidateTargetsConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetsConfig != nil {

		if swag.IsZero(m.TargetsConfig) { // not required
			return nil
		}

		if err := m.TargetsConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetsConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreateProtectionGroupRunRequest) contextValidateUdaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaParams != nil {

		if swag.IsZero(m.UdaParams) { // not required
			return nil
		}

		if err := m.UdaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateProtectionGroupRunRequest) contextValidateCassandraParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraParams != nil {

		if swag.IsZero(m.CassandraParams) { // not required
			return nil
		}

		if err := m.CassandraParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateProtectionGroupRunRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateProtectionGroupRunRequest) UnmarshalBinary(b []byte) error {
	var res CreateProtectionGroupRunRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
