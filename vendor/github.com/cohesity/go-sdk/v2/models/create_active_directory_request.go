// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateActiveDirectoryRequest Specifies the request to create an Active Directory.
//
// swagger:model CreateActiveDirectoryRequest
type CreateActiveDirectoryRequest struct {
	CommonActiveDirectoryParams

	// Specifies the domain name of the Active Directory.
	// Required: true
	// Pattern: ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9]))*$
	DomainName *string `json:"domainName"`

	// Specifies if specified machine accounts should overwrite existing machine accounts.
	OverwriteMachineAccounts *bool `json:"overwriteMachineAccounts,omitempty"`

	// Specifies the params of a user with administrative privilege of this Active Directory.
	// Required: true
	ActiveDirectoryAdminParams *ActiveDirectoryAdminParams `json:"activeDirectoryAdminParams"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CreateActiveDirectoryRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonActiveDirectoryParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonActiveDirectoryParams = aO0

	// AO1
	var dataAO1 struct {
		DomainName *string `json:"domainName"`

		OverwriteMachineAccounts *bool `json:"overwriteMachineAccounts,omitempty"`

		ActiveDirectoryAdminParams *ActiveDirectoryAdminParams `json:"activeDirectoryAdminParams"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DomainName = dataAO1.DomainName

	m.OverwriteMachineAccounts = dataAO1.OverwriteMachineAccounts

	m.ActiveDirectoryAdminParams = dataAO1.ActiveDirectoryAdminParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CreateActiveDirectoryRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonActiveDirectoryParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DomainName *string `json:"domainName"`

		OverwriteMachineAccounts *bool `json:"overwriteMachineAccounts,omitempty"`

		ActiveDirectoryAdminParams *ActiveDirectoryAdminParams `json:"activeDirectoryAdminParams"`
	}

	dataAO1.DomainName = m.DomainName

	dataAO1.OverwriteMachineAccounts = m.OverwriteMachineAccounts

	dataAO1.ActiveDirectoryAdminParams = m.ActiveDirectoryAdminParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create active directory request
func (m *CreateActiveDirectoryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonActiveDirectoryParams
	if err := m.CommonActiveDirectoryParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActiveDirectoryAdminParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateActiveDirectoryRequest) validateDomainName(formats strfmt.Registry) error {

	if err := validate.Required("domainName", "body", m.DomainName); err != nil {
		return err
	}

	if err := validate.Pattern("domainName", "body", *m.DomainName, `^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9]))*$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateActiveDirectoryRequest) validateActiveDirectoryAdminParams(formats strfmt.Registry) error {

	if err := validate.Required("activeDirectoryAdminParams", "body", m.ActiveDirectoryAdminParams); err != nil {
		return err
	}

	if m.ActiveDirectoryAdminParams != nil {
		if err := m.ActiveDirectoryAdminParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeDirectoryAdminParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activeDirectoryAdminParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create active directory request based on the context it is used
func (m *CreateActiveDirectoryRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonActiveDirectoryParams
	if err := m.CommonActiveDirectoryParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateActiveDirectoryAdminParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateActiveDirectoryRequest) contextValidateActiveDirectoryAdminParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ActiveDirectoryAdminParams != nil {

		if err := m.ActiveDirectoryAdminParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeDirectoryAdminParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activeDirectoryAdminParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateActiveDirectoryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateActiveDirectoryRequest) UnmarshalBinary(b []byte) error {
	var res CreateActiveDirectoryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
