// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityConfigCertificateBasedAuth Specifies security config for certificate based authentication.
//
// swagger:model SecurityConfigCertificateBasedAuth
type SecurityConfigCertificateBasedAuth struct {

	// If true, certfication based authentication is done via configured
	// mapping. Else it will proceed based on legacy serial number match.
	EnableMappingBasedAuthentication *bool `json:"enableMappingBasedAuthentication,omitempty"`

	// Specifies the field to be used in certificate for authentication.
	// Enum: ["CommonName","EmailAddress","UserPrincipalName"]
	CertificateMapping *string `json:"certificateMapping,omitempty"`

	// Specifies the field to be used in AD user for authentication.
	// Enum: ["SamAccountName","UserPrincipalName"]
	AdMapping *string `json:"adMapping,omitempty"`
}

// Validate validates this security config certificate based auth
func (m *SecurityConfigCertificateBasedAuth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdMapping(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var securityConfigCertificateBasedAuthTypeCertificateMappingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CommonName","EmailAddress","UserPrincipalName"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityConfigCertificateBasedAuthTypeCertificateMappingPropEnum = append(securityConfigCertificateBasedAuthTypeCertificateMappingPropEnum, v)
	}
}

const (

	// SecurityConfigCertificateBasedAuthCertificateMappingCommonName captures enum value "CommonName"
	SecurityConfigCertificateBasedAuthCertificateMappingCommonName string = "CommonName"

	// SecurityConfigCertificateBasedAuthCertificateMappingEmailAddress captures enum value "EmailAddress"
	SecurityConfigCertificateBasedAuthCertificateMappingEmailAddress string = "EmailAddress"

	// SecurityConfigCertificateBasedAuthCertificateMappingUserPrincipalName captures enum value "UserPrincipalName"
	SecurityConfigCertificateBasedAuthCertificateMappingUserPrincipalName string = "UserPrincipalName"
)

// prop value enum
func (m *SecurityConfigCertificateBasedAuth) validateCertificateMappingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, securityConfigCertificateBasedAuthTypeCertificateMappingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SecurityConfigCertificateBasedAuth) validateCertificateMapping(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificateMapping) { // not required
		return nil
	}

	// value enum
	if err := m.validateCertificateMappingEnum("certificateMapping", "body", *m.CertificateMapping); err != nil {
		return err
	}

	return nil
}

var securityConfigCertificateBasedAuthTypeAdMappingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SamAccountName","UserPrincipalName"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityConfigCertificateBasedAuthTypeAdMappingPropEnum = append(securityConfigCertificateBasedAuthTypeAdMappingPropEnum, v)
	}
}

const (

	// SecurityConfigCertificateBasedAuthAdMappingSamAccountName captures enum value "SamAccountName"
	SecurityConfigCertificateBasedAuthAdMappingSamAccountName string = "SamAccountName"

	// SecurityConfigCertificateBasedAuthAdMappingUserPrincipalName captures enum value "UserPrincipalName"
	SecurityConfigCertificateBasedAuthAdMappingUserPrincipalName string = "UserPrincipalName"
)

// prop value enum
func (m *SecurityConfigCertificateBasedAuth) validateAdMappingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, securityConfigCertificateBasedAuthTypeAdMappingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SecurityConfigCertificateBasedAuth) validateAdMapping(formats strfmt.Registry) error {
	if swag.IsZero(m.AdMapping) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdMappingEnum("adMapping", "body", *m.AdMapping); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this security config certificate based auth based on context it is used
func (m *SecurityConfigCertificateBasedAuth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfigCertificateBasedAuth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfigCertificateBasedAuth) UnmarshalBinary(b []byte) error {
	var res SecurityConfigCertificateBasedAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
