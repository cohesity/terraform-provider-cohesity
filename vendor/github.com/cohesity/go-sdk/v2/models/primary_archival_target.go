// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrimaryArchivalTarget Specifies the primary archival settings. Mainly used for cloud direct archive (CAD) policy where primary backup is stored on archival target.
//
// swagger:model PrimaryArchivalTarget
type PrimaryArchivalTarget struct {

	// Specifies the Archival target id to take primary backup.
	// Required: true
	TargetID *int64 `json:"targetId"`

	// Specifies the Archival target name where Snapshots are copied.
	// Read Only: true
	TargetName *string `json:"targetName,omitempty"`

	// Specifies the Archival target name where Snapshots are copied.
	TierSettings *TierLevelSettings `json:"tierSettings,omitempty"`
}

// Validate validates this primary archival target
func (m *PrimaryArchivalTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrimaryArchivalTarget) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("targetId", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

func (m *PrimaryArchivalTarget) validateTierSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.TierSettings) { // not required
		return nil
	}

	if m.TierSettings != nil {
		if err := m.TierSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tierSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tierSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this primary archival target based on the context it is used
func (m *PrimaryArchivalTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTierSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrimaryArchivalTarget) contextValidateTargetName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetName", "body", m.TargetName); err != nil {
		return err
	}

	return nil
}

func (m *PrimaryArchivalTarget) contextValidateTierSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.TierSettings != nil {

		if swag.IsZero(m.TierSettings) { // not required
			return nil
		}

		if err := m.TierSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tierSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tierSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrimaryArchivalTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrimaryArchivalTarget) UnmarshalBinary(b []byte) error {
	var res PrimaryArchivalTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
