// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssessSoftwareUpdateParams Specifies parameters to assess cluster state for the software update (upgrade/patch).
//
// swagger:model AssessSoftwareUpdateParams
type AssessSoftwareUpdateParams struct {

	// Version name of the package.
	// Required: true
	VersionName *string `json:"versionName"`

	// Type of software package.
	// Required: true
	// Enum: ["Upgrade","Patch"]
	PackageType *string `json:"packageType"`

	// Specifies the phase of software update.
	// Required: true
	// Enum: ["Pre","Post"]
	Phase *string `json:"phase"`
}

// Validate validates this assess software update params
func (m *AssessSoftwareUpdateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssessSoftwareUpdateParams) validateVersionName(formats strfmt.Registry) error {

	if err := validate.Required("versionName", "body", m.VersionName); err != nil {
		return err
	}

	return nil
}

var assessSoftwareUpdateParamsTypePackageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Upgrade","Patch"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assessSoftwareUpdateParamsTypePackageTypePropEnum = append(assessSoftwareUpdateParamsTypePackageTypePropEnum, v)
	}
}

const (

	// AssessSoftwareUpdateParamsPackageTypeUpgrade captures enum value "Upgrade"
	AssessSoftwareUpdateParamsPackageTypeUpgrade string = "Upgrade"

	// AssessSoftwareUpdateParamsPackageTypePatch captures enum value "Patch"
	AssessSoftwareUpdateParamsPackageTypePatch string = "Patch"
)

// prop value enum
func (m *AssessSoftwareUpdateParams) validatePackageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assessSoftwareUpdateParamsTypePackageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssessSoftwareUpdateParams) validatePackageType(formats strfmt.Registry) error {

	if err := validate.Required("packageType", "body", m.PackageType); err != nil {
		return err
	}

	// value enum
	if err := m.validatePackageTypeEnum("packageType", "body", *m.PackageType); err != nil {
		return err
	}

	return nil
}

var assessSoftwareUpdateParamsTypePhasePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pre","Post"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assessSoftwareUpdateParamsTypePhasePropEnum = append(assessSoftwareUpdateParamsTypePhasePropEnum, v)
	}
}

const (

	// AssessSoftwareUpdateParamsPhasePre captures enum value "Pre"
	AssessSoftwareUpdateParamsPhasePre string = "Pre"

	// AssessSoftwareUpdateParamsPhasePost captures enum value "Post"
	AssessSoftwareUpdateParamsPhasePost string = "Post"
)

// prop value enum
func (m *AssessSoftwareUpdateParams) validatePhaseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assessSoftwareUpdateParamsTypePhasePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssessSoftwareUpdateParams) validatePhase(formats strfmt.Registry) error {

	if err := validate.Required("phase", "body", m.Phase); err != nil {
		return err
	}

	// value enum
	if err := m.validatePhaseEnum("phase", "body", *m.Phase); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this assess software update params based on context it is used
func (m *AssessSoftwareUpdateParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssessSoftwareUpdateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssessSoftwareUpdateParams) UnmarshalBinary(b []byte) error {
	var res AssessSoftwareUpdateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
