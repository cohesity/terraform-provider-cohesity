// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnmpUser SNMP User Info for this cluster
//
// swagger:model SnmpUser
type SnmpUser struct {

	// UserName is the user name to access SNMP V2 or SNMP V3 agent.
	UserName *string `json:"userName,omitempty"`

	// UserType is the SNMP user type, can be read-only user, read/write user, or trap users.
	// Enum: ["kReadUser","kReadWriteUser","kTrapUser"]
	UserType *string `json:"userType,omitempty"`

	// AuthPrototol is the authentication protocol for SNMP V3 users.
	// Enum: ["kAuthMD5","kAuthSHA"]
	AuthProtocol *string `json:"authProtocol,omitempty"`

	// AuthPassword is the authentication password for SNMP V3 users.
	AuthPassword *string `json:"authPassword,omitempty"`

	// PrivPrototol is the privacy protocol for SNMP V3 users.
	// Enum: ["kPrivDES","kPrivAES"]
	PrivProtocol *string `json:"privProtocol,omitempty"`

	// PrivPassword is the privacy password for SNMP V3 users.
	PrivPassword *string `json:"privPassword,omitempty"`

	// EngineID is the SNMP V3 Engine ID used by trap users.
	EngineID *string `json:"engineId,omitempty"`

	// SecurityLevel is the SNMP V3 security level. It can be authNoPriv, noPriv, and authPriv.
	// Enum: ["kNoAuthNoPriv","kAuthNoPriv","kAuthPriv"]
	SecurityLevel *string `json:"securityLevel,omitempty"`

	// ContextName is the context used for SNMP V3.
	ContextName *string `json:"contextName,omitempty"`
}

// Validate validates this snmp user
func (m *SnmpUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snmpUserTypeUserTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kReadUser","kReadWriteUser","kTrapUser"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpUserTypeUserTypePropEnum = append(snmpUserTypeUserTypePropEnum, v)
	}
}

const (

	// SnmpUserUserTypeKReadUser captures enum value "kReadUser"
	SnmpUserUserTypeKReadUser string = "kReadUser"

	// SnmpUserUserTypeKReadWriteUser captures enum value "kReadWriteUser"
	SnmpUserUserTypeKReadWriteUser string = "kReadWriteUser"

	// SnmpUserUserTypeKTrapUser captures enum value "kTrapUser"
	SnmpUserUserTypeKTrapUser string = "kTrapUser"
)

// prop value enum
func (m *SnmpUser) validateUserTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snmpUserTypeUserTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnmpUser) validateUserType(formats strfmt.Registry) error {
	if swag.IsZero(m.UserType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserTypeEnum("userType", "body", *m.UserType); err != nil {
		return err
	}

	return nil
}

var snmpUserTypeAuthProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAuthMD5","kAuthSHA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpUserTypeAuthProtocolPropEnum = append(snmpUserTypeAuthProtocolPropEnum, v)
	}
}

const (

	// SnmpUserAuthProtocolKAuthMD5 captures enum value "kAuthMD5"
	SnmpUserAuthProtocolKAuthMD5 string = "kAuthMD5"

	// SnmpUserAuthProtocolKAuthSHA captures enum value "kAuthSHA"
	SnmpUserAuthProtocolKAuthSHA string = "kAuthSHA"
)

// prop value enum
func (m *SnmpUser) validateAuthProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snmpUserTypeAuthProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnmpUser) validateAuthProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthProtocolEnum("authProtocol", "body", *m.AuthProtocol); err != nil {
		return err
	}

	return nil
}

var snmpUserTypePrivProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPrivDES","kPrivAES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpUserTypePrivProtocolPropEnum = append(snmpUserTypePrivProtocolPropEnum, v)
	}
}

const (

	// SnmpUserPrivProtocolKPrivDES captures enum value "kPrivDES"
	SnmpUserPrivProtocolKPrivDES string = "kPrivDES"

	// SnmpUserPrivProtocolKPrivAES captures enum value "kPrivAES"
	SnmpUserPrivProtocolKPrivAES string = "kPrivAES"
)

// prop value enum
func (m *SnmpUser) validatePrivProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snmpUserTypePrivProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnmpUser) validatePrivProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivProtocolEnum("privProtocol", "body", *m.PrivProtocol); err != nil {
		return err
	}

	return nil
}

var snmpUserTypeSecurityLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNoAuthNoPriv","kAuthNoPriv","kAuthPriv"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpUserTypeSecurityLevelPropEnum = append(snmpUserTypeSecurityLevelPropEnum, v)
	}
}

const (

	// SnmpUserSecurityLevelKNoAuthNoPriv captures enum value "kNoAuthNoPriv"
	SnmpUserSecurityLevelKNoAuthNoPriv string = "kNoAuthNoPriv"

	// SnmpUserSecurityLevelKAuthNoPriv captures enum value "kAuthNoPriv"
	SnmpUserSecurityLevelKAuthNoPriv string = "kAuthNoPriv"

	// SnmpUserSecurityLevelKAuthPriv captures enum value "kAuthPriv"
	SnmpUserSecurityLevelKAuthPriv string = "kAuthPriv"
)

// prop value enum
func (m *SnmpUser) validateSecurityLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snmpUserTypeSecurityLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnmpUser) validateSecurityLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateSecurityLevelEnum("securityLevel", "body", *m.SecurityLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snmp user based on context it is used
func (m *SnmpUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnmpUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnmpUser) UnmarshalBinary(b []byte) error {
	var res SnmpUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
