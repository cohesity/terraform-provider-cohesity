// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KubernetesObjectProtectionParams Specifies the Kubernetes Object Protection Parameters.
//
// Specifies the parameters that are specific to Kubernetes Object Protection.
//
// swagger:model KubernetesObjectProtectionParams
type KubernetesObjectProtectionParams struct {

	// Specifies the objects to be included in Protection.
	// Required: true
	// Min Items: 1
	// Unique: true
	Objects []*KubernetesProtectionGroupObjectParams `json:"objects"`

	// Specifies the object ids to be excluded for protection.
	// Unique: true
	ExcludeObjectIds []int64 `json:"excludeObjectIds"`

	// Array of array of label IDs that specify labels to protect. Optionally specify a list of labels to protect by listing protection source ids of labels in this two dimensional array. Using this two dimensional array of label IDs, the cluster generates a list of namespaces to protect, which are derived from intersections of the inner arrays and union of the outer array.
	LabelIds [][]int64 `json:"labelIds"`

	// Array of arrays of label IDs that specify labels to exclude. Optionally specify a list of labels to exclude from protecting by listing protection source ids of labels in this two dimensional array. Using this two dimensional array of label IDs, the Cluster generates a list of namespaces to exclude from protecting, which are derived from intersections of the inner arrays and union of the outer array.
	ExcludeLabelIds [][]int64 `json:"excludeLabelIds"`

	// Specifies the paramaters to include objects (e.g.: volumes) attached to Kubernetes pods. If not populated, all objects are included unless specifically excluded otherwise.
	IncludeParams *KubernetesFilterParams `json:"includeParams,omitempty"`

	// Specifies the paramaters to exclude objects attached to Kubernetes pods. Exclusion takes precedence over inclusion.
	ExcludeParams *KubernetesFilterParams `json:"excludeParams,omitempty"`

	// Specifies if CSI snapshots should be used for backup of namespaces. Default: False
	LeverageCSISnapshot *bool `json:"leverageCSISnapshot,omitempty"`

	// Specifies if indexing of files and folders is allowed or not while backing up namespace. If allowed files and folder can be recovered. Default: False
	EnableIndexing *bool `json:"enableIndexing,omitempty"`

	// Specifies whether to ignore the failure of a volume while backing up and proceed with the backup. Default: False
	VolumeBackupFailure *bool `json:"volumeBackupFailure,omitempty"`

	// Specifies whether to fallback to a non-snapshot backup for PVC in case the snapshot backup fails. Default: False
	NonSnapshotBackup *bool `json:"nonSnapshotBackup,omitempty"`
}

// Validate validates this kubernetes object protection params
func (m *KubernetesObjectProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeObjectIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesObjectProtectionParams) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	iObjectsSize := int64(len(m.Objects))

	if err := validate.MinItems("objects", "body", iObjectsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("objects", "body", m.Objects); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesObjectProtectionParams) validateExcludeObjectIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeObjectIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludeObjectIds", "body", m.ExcludeObjectIds); err != nil {
		return err
	}

	return nil
}

func (m *KubernetesObjectProtectionParams) validateIncludeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IncludeParams) { // not required
		return nil
	}

	if m.IncludeParams != nil {
		if err := m.IncludeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("includeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("includeParams")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesObjectProtectionParams) validateExcludeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeParams) { // not required
		return nil
	}

	if m.ExcludeParams != nil {
		if err := m.ExcludeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("excludeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("excludeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kubernetes object protection params based on the context it is used
func (m *KubernetesObjectProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncludeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExcludeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesObjectProtectionParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesObjectProtectionParams) contextValidateIncludeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IncludeParams != nil {

		if swag.IsZero(m.IncludeParams) { // not required
			return nil
		}

		if err := m.IncludeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("includeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("includeParams")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesObjectProtectionParams) contextValidateExcludeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ExcludeParams != nil {

		if swag.IsZero(m.ExcludeParams) { // not required
			return nil
		}

		if err := m.ExcludeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("excludeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("excludeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesObjectProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesObjectProtectionParams) UnmarshalBinary(b []byte) error {
	var res KubernetesObjectProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
