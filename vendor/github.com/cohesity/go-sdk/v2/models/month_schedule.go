// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MonthSchedule Month Schedule
//
// Specifies settings that define a schedule for a Protection Group runs to on specific week and specific days of that week.
//
// swagger:model MonthSchedule
type MonthSchedule struct {

	// Specifies a list of days of the week when to start Protection Group Runs. <br> Example: To run a Protection Group on every Monday and Tuesday, set the schedule with following values: <br>  unit: 'Weeks' <br>  dayOfWeek: ['Monday','Tuesday']
	DayOfWeek []string `json:"dayOfWeek"`

	// Specifies the week of the month (such as 'Third') or nth day of month (such as 'First' or 'Last') in a Monthly Schedule specified by unit field as 'Months'. <br>This field can be used in combination with 'dayOfWeek' to define the day in the month to start the Protection Group Run. <br> Example: if 'weekOfMonth' is set to 'Third' and day is set to 'Monday', a backup is performed on the third Monday of every month. <br> Example: if 'weekOfMonth' is set to 'Last' and dayOfWeek is not set, a backup is performed on the last day of every month.
	// Enum: ["First","Second","Third","Fourth","Last"]
	WeekOfMonth *string `json:"weekOfMonth,omitempty"`

	// Specifies the exact date of the month (such as 18) in a Monthly Schedule specified by unit field as 'Years'. <br> Example: if 'dayOfMonth' is set to '18', a backup is performed on the 18th of every month.
	DayOfMonth *int32 `json:"dayOfMonth,omitempty"`
}

// Validate validates this month schedule
func (m *MonthSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekOfMonth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var monthScheduleDayOfWeekItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monthScheduleDayOfWeekItemsEnum = append(monthScheduleDayOfWeekItemsEnum, v)
	}
}

func (m *MonthSchedule) validateDayOfWeekItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, monthScheduleDayOfWeekItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MonthSchedule) validateDayOfWeek(formats strfmt.Registry) error {
	if swag.IsZero(m.DayOfWeek) { // not required
		return nil
	}

	for i := 0; i < len(m.DayOfWeek); i++ {

		// value enum
		if err := m.validateDayOfWeekItemsEnum("dayOfWeek"+"."+strconv.Itoa(i), "body", m.DayOfWeek[i]); err != nil {
			return err
		}

	}

	return nil
}

var monthScheduleTypeWeekOfMonthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["First","Second","Third","Fourth","Last"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monthScheduleTypeWeekOfMonthPropEnum = append(monthScheduleTypeWeekOfMonthPropEnum, v)
	}
}

const (

	// MonthScheduleWeekOfMonthFirst captures enum value "First"
	MonthScheduleWeekOfMonthFirst string = "First"

	// MonthScheduleWeekOfMonthSecond captures enum value "Second"
	MonthScheduleWeekOfMonthSecond string = "Second"

	// MonthScheduleWeekOfMonthThird captures enum value "Third"
	MonthScheduleWeekOfMonthThird string = "Third"

	// MonthScheduleWeekOfMonthFourth captures enum value "Fourth"
	MonthScheduleWeekOfMonthFourth string = "Fourth"

	// MonthScheduleWeekOfMonthLast captures enum value "Last"
	MonthScheduleWeekOfMonthLast string = "Last"
)

// prop value enum
func (m *MonthSchedule) validateWeekOfMonthEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, monthScheduleTypeWeekOfMonthPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MonthSchedule) validateWeekOfMonth(formats strfmt.Registry) error {
	if swag.IsZero(m.WeekOfMonth) { // not required
		return nil
	}

	// value enum
	if err := m.validateWeekOfMonthEnum("weekOfMonth", "body", *m.WeekOfMonth); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this month schedule based on context it is used
func (m *MonthSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MonthSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonthSchedule) UnmarshalBinary(b []byte) error {
	var res MonthSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
