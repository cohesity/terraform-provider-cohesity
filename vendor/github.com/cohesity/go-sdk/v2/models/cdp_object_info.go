// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CdpObjectInfo Specifies the CDP related information for a given object. This field will only be populated when protection group is configured with policy having CDP retention settings.
//
// swagger:model CdpObjectInfo
type CdpObjectInfo struct {

	// Specifies whether CDP is currently active or not. CDP might have been active on this object before, but it might not be anymore.
	CdpEnabled *bool `json:"cdpEnabled,omitempty"`

	// Specifies if re-enabling CDP is allowed or not through UI without any job or policy update through API.
	AllowReEnableCdp *bool `json:"allowReEnableCdp,omitempty"`

	// Specifies the details about last continious backup taken for this object.
	LastRunInfo *CdpObjectLastRunInfo `json:"lastRunInfo,omitempty"`

	// Specifies the protection group id to which this CDP object belongs.
	// Read Only: true
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`
}

// Validate validates this cdp object info
func (m *CdpObjectInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastRunInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpObjectInfo) validateLastRunInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRunInfo) { // not required
		return nil
	}

	if m.LastRunInfo != nil {
		if err := m.LastRunInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastRunInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastRunInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cdp object info based on the context it is used
func (m *CdpObjectInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastRunInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionGroupID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpObjectInfo) contextValidateLastRunInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.LastRunInfo != nil {

		if swag.IsZero(m.LastRunInfo) { // not required
			return nil
		}

		if err := m.LastRunInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastRunInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastRunInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CdpObjectInfo) contextValidateProtectionGroupID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "protectionGroupId", "body", m.ProtectionGroupID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdpObjectInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdpObjectInfo) UnmarshalBinary(b []byte) error {
	var res CdpObjectInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
