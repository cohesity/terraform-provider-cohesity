// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchGraphNodesRequestParams Search Graph Nodes Request Params
//
// Specifies the request parameters to query nodes in the graph for a given session id.
//
// swagger:model SearchGraphNodesRequestParams
type SearchGraphNodesRequestParams struct {
	GraphNodeFilterParams

	// Specifies the id of a Session.
	// Required: true
	SessionID *string `json:"sessionId"`

	// If set to false the response will only return name, type and is_root fields filled in each node. If set to true all the attributes for the nodes are also returned. Defaults to true.
	IncludeAttributes *bool `json:"includeAttributes,omitempty"`

	// Specifies a cookie which can be passed in by the user in order to retrieve the next page of results.
	PaginationCookie *string `json:"paginationCookie,omitempty"`

	// Specifies the number of graph nodes to be fetched for the specified pagination cookie.
	Count int32 `json:"count,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SearchGraphNodesRequestParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GraphNodeFilterParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GraphNodeFilterParams = aO0

	// AO1
	var dataAO1 struct {
		SessionID *string `json:"sessionId"`

		IncludeAttributes *bool `json:"includeAttributes,omitempty"`

		PaginationCookie *string `json:"paginationCookie,omitempty"`

		Count int32 `json:"count,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.SessionID = dataAO1.SessionID

	m.IncludeAttributes = dataAO1.IncludeAttributes

	m.PaginationCookie = dataAO1.PaginationCookie

	m.Count = dataAO1.Count

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SearchGraphNodesRequestParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.GraphNodeFilterParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		SessionID *string `json:"sessionId"`

		IncludeAttributes *bool `json:"includeAttributes,omitempty"`

		PaginationCookie *string `json:"paginationCookie,omitempty"`

		Count int32 `json:"count,omitempty"`
	}

	dataAO1.SessionID = m.SessionID

	dataAO1.IncludeAttributes = m.IncludeAttributes

	dataAO1.PaginationCookie = m.PaginationCookie

	dataAO1.Count = m.Count

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search graph nodes request params
func (m *SearchGraphNodesRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GraphNodeFilterParams
	if err := m.GraphNodeFilterParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchGraphNodesRequestParams) validateSessionID(formats strfmt.Registry) error {

	if err := validate.Required("sessionId", "body", m.SessionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this search graph nodes request params based on the context it is used
func (m *SearchGraphNodesRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GraphNodeFilterParams
	if err := m.GraphNodeFilterParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SearchGraphNodesRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchGraphNodesRequestParams) UnmarshalBinary(b []byte) error {
	var res SearchGraphNodesRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
