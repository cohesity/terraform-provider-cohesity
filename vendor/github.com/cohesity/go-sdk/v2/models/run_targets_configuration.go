// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RunTargetsConfiguration Target Configuration
//
// Specifies the replication and archival targets.
//
// swagger:model RunTargetsConfiguration
type RunTargetsConfiguration struct {

	// Specifies whether to use default policy settings or not. If specified as true then 'replications' and 'arcihvals' should not be specified. In case of true value, replicatioan targets congfigured in the policy will be added internally.
	UsePolicyDefaults *bool `json:"usePolicyDefaults,omitempty"`

	// Specifies a list of replication targets configurations.
	Replications []*RunReplicationConfig `json:"replications"`

	// Specifies a list of archival targets configurations.
	Archivals []*RunArchivalConfig `json:"archivals"`

	// Specifies a list of cloud replication targets configurations.
	CloudReplications []*RunCloudReplicationConfig `json:"cloudReplications"`
}

// Validate validates this run targets configuration
func (m *RunTargetsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudReplications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunTargetsConfiguration) validateReplications(formats strfmt.Registry) error {
	if swag.IsZero(m.Replications) { // not required
		return nil
	}

	for i := 0; i < len(m.Replications); i++ {
		if swag.IsZero(m.Replications[i]) { // not required
			continue
		}

		if m.Replications[i] != nil {
			if err := m.Replications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunTargetsConfiguration) validateArchivals(formats strfmt.Registry) error {
	if swag.IsZero(m.Archivals) { // not required
		return nil
	}

	for i := 0; i < len(m.Archivals); i++ {
		if swag.IsZero(m.Archivals[i]) { // not required
			continue
		}

		if m.Archivals[i] != nil {
			if err := m.Archivals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("archivals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("archivals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunTargetsConfiguration) validateCloudReplications(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudReplications) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudReplications); i++ {
		if swag.IsZero(m.CloudReplications[i]) { // not required
			continue
		}

		if m.CloudReplications[i] != nil {
			if err := m.CloudReplications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudReplications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudReplications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this run targets configuration based on the context it is used
func (m *RunTargetsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchivals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudReplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunTargetsConfiguration) contextValidateReplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Replications); i++ {

		if m.Replications[i] != nil {

			if swag.IsZero(m.Replications[i]) { // not required
				return nil
			}

			if err := m.Replications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunTargetsConfiguration) contextValidateArchivals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Archivals); i++ {

		if m.Archivals[i] != nil {

			if swag.IsZero(m.Archivals[i]) { // not required
				return nil
			}

			if err := m.Archivals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("archivals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("archivals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RunTargetsConfiguration) contextValidateCloudReplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudReplications); i++ {

		if m.CloudReplications[i] != nil {

			if swag.IsZero(m.CloudReplications[i]) { // not required
				return nil
			}

			if err := m.CloudReplications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudReplications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudReplications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunTargetsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunTargetsConfiguration) UnmarshalBinary(b []byte) error {
	var res RunTargetsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
