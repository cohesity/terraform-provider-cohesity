// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IbmTenantMeteringConfig IbmTenantMeteringConfig
//
// Specifies the metering configuration that will be used for cohesity cluster to send the billing details to IBM billing service.
//
// swagger:model IbmTenantMeteringConfig
type IbmTenantMeteringConfig struct {

	// Specifies the base metering URL that will be used by cluster to send the billing information.
	URL *string `json:"url,omitempty"`

	// Specifies the frequency in seconds at which the metrics will be pushed to IBM billing service from cluster.
	SubmissionIntervalInSecs *int32 `json:"submissionIntervalInSecs,omitempty"`

	// Specifies the list of part identifiers used for metrics identification.
	// Min Items: 1
	// Unique: true
	PartIds []string `json:"partIds"`
}

// Validate validates this ibm tenant metering config
func (m *IbmTenantMeteringConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ibmTenantMeteringConfigPartIdsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USAGETERABYTE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ibmTenantMeteringConfigPartIdsItemsEnum = append(ibmTenantMeteringConfigPartIdsItemsEnum, v)
	}
}

func (m *IbmTenantMeteringConfig) validatePartIdsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ibmTenantMeteringConfigPartIdsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IbmTenantMeteringConfig) validatePartIds(formats strfmt.Registry) error {
	if swag.IsZero(m.PartIds) { // not required
		return nil
	}

	iPartIdsSize := int64(len(m.PartIds))

	if err := validate.MinItems("partIds", "body", iPartIdsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("partIds", "body", m.PartIds); err != nil {
		return err
	}

	for i := 0; i < len(m.PartIds); i++ {

		// value enum
		if err := m.validatePartIdsItemsEnum("partIds"+"."+strconv.Itoa(i), "body", m.PartIds[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this ibm tenant metering config based on context it is used
func (m *IbmTenantMeteringConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbmTenantMeteringConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbmTenantMeteringConfig) UnmarshalBinary(b []byte) error {
	var res IbmTenantMeteringConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
