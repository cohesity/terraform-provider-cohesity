// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleRestoreRangeInfo Oracle Restore Range Info
//
// # Specifies Restore Ranges related to an Oracle Database
//
// swagger:model OracleRestoreRangeInfo
type OracleRestoreRangeInfo struct {

	// Specifies an array of SCN based oracle restore ranges.
	ScnRangeInfo []*OracleRangeMetaInfo `json:"ScnRangeInfo"`

	// Specifies an array of time based oracle restore ranges.
	TimeRangeInfo []*OracleRangeMetaInfo `json:"TimeRangeInfo"`

	// Specifies an array of time based oracle restore ranges.
	SequenceRangeInfo []*OracleRangeMetaInfo `json:"SequenceRangeInfo"`
}

// Validate validates this oracle restore range info
func (m *OracleRestoreRangeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScnRangeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeRangeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequenceRangeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRestoreRangeInfo) validateScnRangeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ScnRangeInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ScnRangeInfo); i++ {
		if swag.IsZero(m.ScnRangeInfo[i]) { // not required
			continue
		}

		if m.ScnRangeInfo[i] != nil {
			if err := m.ScnRangeInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ScnRangeInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ScnRangeInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRestoreRangeInfo) validateTimeRangeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRangeInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.TimeRangeInfo); i++ {
		if swag.IsZero(m.TimeRangeInfo[i]) { // not required
			continue
		}

		if m.TimeRangeInfo[i] != nil {
			if err := m.TimeRangeInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TimeRangeInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TimeRangeInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRestoreRangeInfo) validateSequenceRangeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SequenceRangeInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.SequenceRangeInfo); i++ {
		if swag.IsZero(m.SequenceRangeInfo[i]) { // not required
			continue
		}

		if m.SequenceRangeInfo[i] != nil {
			if err := m.SequenceRangeInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SequenceRangeInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SequenceRangeInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this oracle restore range info based on the context it is used
func (m *OracleRestoreRangeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScnRangeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeRangeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSequenceRangeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRestoreRangeInfo) contextValidateScnRangeInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScnRangeInfo); i++ {

		if m.ScnRangeInfo[i] != nil {

			if swag.IsZero(m.ScnRangeInfo[i]) { // not required
				return nil
			}

			if err := m.ScnRangeInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ScnRangeInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ScnRangeInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRestoreRangeInfo) contextValidateTimeRangeInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TimeRangeInfo); i++ {

		if m.TimeRangeInfo[i] != nil {

			if swag.IsZero(m.TimeRangeInfo[i]) { // not required
				return nil
			}

			if err := m.TimeRangeInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TimeRangeInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TimeRangeInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRestoreRangeInfo) contextValidateSequenceRangeInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SequenceRangeInfo); i++ {

		if m.SequenceRangeInfo[i] != nil {

			if swag.IsZero(m.SequenceRangeInfo[i]) { // not required
				return nil
			}

			if err := m.SequenceRangeInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SequenceRangeInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SequenceRangeInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRestoreRangeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRestoreRangeInfo) UnmarshalBinary(b []byte) error {
	var res OracleRestoreRangeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
