// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonAuthenticationMethodParams AWS External Target Request Cloud Category Params.
//
// Specifies the cloud category parameter which are specific to AWS related External Targets.
//
// swagger:model CommonAuthenticationMethodParams
type CommonAuthenticationMethodParams struct {

	// Specifies the AWS External Target Authentication type.
	// Required: true
	// Enum: ["kUseIAMUser","kUseIAMRole","kUseIAMRolesAnywhere","kUseSTS","kUseHelios","kUseInstanceProfile"]
	AuthenticationType *string `json:"authenticationType"`
}

// Validate validates this common authentication method params
func (m *CommonAuthenticationMethodParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonAuthenticationMethodParamsTypeAuthenticationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUseIAMUser","kUseIAMRole","kUseIAMRolesAnywhere","kUseSTS","kUseHelios","kUseInstanceProfile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonAuthenticationMethodParamsTypeAuthenticationTypePropEnum = append(commonAuthenticationMethodParamsTypeAuthenticationTypePropEnum, v)
	}
}

const (

	// CommonAuthenticationMethodParamsAuthenticationTypeKUseIAMUser captures enum value "kUseIAMUser"
	CommonAuthenticationMethodParamsAuthenticationTypeKUseIAMUser string = "kUseIAMUser"

	// CommonAuthenticationMethodParamsAuthenticationTypeKUseIAMRole captures enum value "kUseIAMRole"
	CommonAuthenticationMethodParamsAuthenticationTypeKUseIAMRole string = "kUseIAMRole"

	// CommonAuthenticationMethodParamsAuthenticationTypeKUseIAMRolesAnywhere captures enum value "kUseIAMRolesAnywhere"
	CommonAuthenticationMethodParamsAuthenticationTypeKUseIAMRolesAnywhere string = "kUseIAMRolesAnywhere"

	// CommonAuthenticationMethodParamsAuthenticationTypeKUseSTS captures enum value "kUseSTS"
	CommonAuthenticationMethodParamsAuthenticationTypeKUseSTS string = "kUseSTS"

	// CommonAuthenticationMethodParamsAuthenticationTypeKUseHelios captures enum value "kUseHelios"
	CommonAuthenticationMethodParamsAuthenticationTypeKUseHelios string = "kUseHelios"

	// CommonAuthenticationMethodParamsAuthenticationTypeKUseInstanceProfile captures enum value "kUseInstanceProfile"
	CommonAuthenticationMethodParamsAuthenticationTypeKUseInstanceProfile string = "kUseInstanceProfile"
)

// prop value enum
func (m *CommonAuthenticationMethodParams) validateAuthenticationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonAuthenticationMethodParamsTypeAuthenticationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonAuthenticationMethodParams) validateAuthenticationType(formats strfmt.Registry) error {

	if err := validate.Required("authenticationType", "body", m.AuthenticationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthenticationTypeEnum("authenticationType", "body", *m.AuthenticationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common authentication method params based on context it is used
func (m *CommonAuthenticationMethodParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonAuthenticationMethodParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonAuthenticationMethodParams) UnmarshalBinary(b []byte) error {
	var res CommonAuthenticationMethodParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
