// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonExternalTargetParams Specifies the parameters which are common between all External Target.
//
// swagger:model CommonExternalTargetParams
type CommonExternalTargetParams struct {

	// Specifies the ID of the External Target.
	// Read Only: true
	ID *int64 `json:"id,omitempty"`

	// Specifies the global identifier of the External Target.
	GlobalID *string `json:"globalId,omitempty"`

	// Specifies the name of the External Target.
	// Required: true
	Name *string `json:"name"`

	// Specifies the purpose of the External Target.
	// Required: true
	// Enum: ["Archival","Tiering","Rpaas"]
	PurposeType *string `json:"purposeType"`

	// Specifies whether the type of compression of the External Target
	// Enum: ["None","Low","High"]
	Compression *string `json:"compression,omitempty"`

	// Whether to enable object lock for this vault. If this field is set, all the objects written to the vault will be object locked until all the archives referring to them expire.
	EnableObjectLock *bool `json:"enableObjectLock,omitempty"`

	// Specifies the registration status of the External Target
	// Read Only: true
	// Enum: ["Registered","Unregistering","Unregistered"]
	Status *string `json:"status,omitempty"`

	// Specifies the error message if the event is in failed state.
	// Read Only: true
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Specifies the list of tenantIds for the External Target
	TenantIds []string `json:"tenantIds"`

	// Specifies the cloud domain information.
	CloudDomains []*CloudDomain `json:"cloudDomains"`

	// Specifies the storage domain associated with the target.
	StorageDomainName *string `json:"storageDomainName,omitempty"`

	// Specifies whether how this external target is being consumed either Local or FortKnox.
	// Enum: ["Local","FortKnox"]
	OwnershipContext *string `json:"ownershipContext,omitempty"`

	// Specifies whether this external target has been found to be capable of supporting WORM archives.
	IsWormCapable *bool `json:"isWormCapable,omitempty"`

	// Specifies whether this external target is used to store apollo mr records.
	UseForApolloMrStore *bool `json:"useForApolloMrStore,omitempty"`
}

// Validate validates this common external target params
func (m *CommonExternalTargetParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurposeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnershipContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonExternalTargetParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var commonExternalTargetParamsTypePurposeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Archival","Tiering","Rpaas"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonExternalTargetParamsTypePurposeTypePropEnum = append(commonExternalTargetParamsTypePurposeTypePropEnum, v)
	}
}

const (

	// CommonExternalTargetParamsPurposeTypeArchival captures enum value "Archival"
	CommonExternalTargetParamsPurposeTypeArchival string = "Archival"

	// CommonExternalTargetParamsPurposeTypeTiering captures enum value "Tiering"
	CommonExternalTargetParamsPurposeTypeTiering string = "Tiering"

	// CommonExternalTargetParamsPurposeTypeRpaas captures enum value "Rpaas"
	CommonExternalTargetParamsPurposeTypeRpaas string = "Rpaas"
)

// prop value enum
func (m *CommonExternalTargetParams) validatePurposeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonExternalTargetParamsTypePurposeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonExternalTargetParams) validatePurposeType(formats strfmt.Registry) error {

	if err := validate.Required("purposeType", "body", m.PurposeType); err != nil {
		return err
	}

	// value enum
	if err := m.validatePurposeTypeEnum("purposeType", "body", *m.PurposeType); err != nil {
		return err
	}

	return nil
}

var commonExternalTargetParamsTypeCompressionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Low","High"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonExternalTargetParamsTypeCompressionPropEnum = append(commonExternalTargetParamsTypeCompressionPropEnum, v)
	}
}

const (

	// CommonExternalTargetParamsCompressionNone captures enum value "None"
	CommonExternalTargetParamsCompressionNone string = "None"

	// CommonExternalTargetParamsCompressionLow captures enum value "Low"
	CommonExternalTargetParamsCompressionLow string = "Low"

	// CommonExternalTargetParamsCompressionHigh captures enum value "High"
	CommonExternalTargetParamsCompressionHigh string = "High"
)

// prop value enum
func (m *CommonExternalTargetParams) validateCompressionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonExternalTargetParamsTypeCompressionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonExternalTargetParams) validateCompression(formats strfmt.Registry) error {
	if swag.IsZero(m.Compression) { // not required
		return nil
	}

	// value enum
	if err := m.validateCompressionEnum("compression", "body", *m.Compression); err != nil {
		return err
	}

	return nil
}

var commonExternalTargetParamsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Registered","Unregistering","Unregistered"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonExternalTargetParamsTypeStatusPropEnum = append(commonExternalTargetParamsTypeStatusPropEnum, v)
	}
}

const (

	// CommonExternalTargetParamsStatusRegistered captures enum value "Registered"
	CommonExternalTargetParamsStatusRegistered string = "Registered"

	// CommonExternalTargetParamsStatusUnregistering captures enum value "Unregistering"
	CommonExternalTargetParamsStatusUnregistering string = "Unregistering"

	// CommonExternalTargetParamsStatusUnregistered captures enum value "Unregistered"
	CommonExternalTargetParamsStatusUnregistered string = "Unregistered"
)

// prop value enum
func (m *CommonExternalTargetParams) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonExternalTargetParamsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonExternalTargetParams) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CommonExternalTargetParams) validateCloudDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudDomains) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudDomains); i++ {
		if swag.IsZero(m.CloudDomains[i]) { // not required
			continue
		}

		if m.CloudDomains[i] != nil {
			if err := m.CloudDomains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudDomains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudDomains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var commonExternalTargetParamsTypeOwnershipContextPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Local","FortKnox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonExternalTargetParamsTypeOwnershipContextPropEnum = append(commonExternalTargetParamsTypeOwnershipContextPropEnum, v)
	}
}

const (

	// CommonExternalTargetParamsOwnershipContextLocal captures enum value "Local"
	CommonExternalTargetParamsOwnershipContextLocal string = "Local"

	// CommonExternalTargetParamsOwnershipContextFortKnox captures enum value "FortKnox"
	CommonExternalTargetParamsOwnershipContextFortKnox string = "FortKnox"
)

// prop value enum
func (m *CommonExternalTargetParams) validateOwnershipContextEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonExternalTargetParamsTypeOwnershipContextPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonExternalTargetParams) validateOwnershipContext(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnershipContext) { // not required
		return nil
	}

	// value enum
	if err := m.validateOwnershipContextEnum("ownershipContext", "body", *m.OwnershipContext); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this common external target params based on the context it is used
func (m *CommonExternalTargetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonExternalTargetParams) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CommonExternalTargetParams) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CommonExternalTargetParams) contextValidateErrorMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorMessage", "body", m.ErrorMessage); err != nil {
		return err
	}

	return nil
}

func (m *CommonExternalTargetParams) contextValidateCloudDomains(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudDomains); i++ {

		if m.CloudDomains[i] != nil {

			if swag.IsZero(m.CloudDomains[i]) { // not required
				return nil
			}

			if err := m.CloudDomains[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudDomains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudDomains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonExternalTargetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonExternalTargetParams) UnmarshalBinary(b []byte) error {
	var res CommonExternalTargetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
