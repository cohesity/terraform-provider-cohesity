// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// S3TaggingFilter s3 tagging filter
//
// swagger:model S3TaggingFilter
type S3TaggingFilter struct {

	// List of key, value pair. If any of the tags on the object matches any
	// tags defined in tagSet array, it's regarded as a match.
	TagSet []*TagSet `json:"tagSet"`

	// If set, it enables tagging filter for S3 views.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// Whitelist or blacklist the objects to be scanned.
	// Enum: ["Whitelist","Blacklist"]
	Mode *string `json:"mode,omitempty"`
}

// Validate validates this s3 tagging filter
func (m *S3TaggingFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTagSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *S3TaggingFilter) validateTagSet(formats strfmt.Registry) error {
	if swag.IsZero(m.TagSet) { // not required
		return nil
	}

	for i := 0; i < len(m.TagSet); i++ {
		if swag.IsZero(m.TagSet[i]) { // not required
			continue
		}

		if m.TagSet[i] != nil {
			if err := m.TagSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var s3TaggingFilterTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Whitelist","Blacklist"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		s3TaggingFilterTypeModePropEnum = append(s3TaggingFilterTypeModePropEnum, v)
	}
}

const (

	// S3TaggingFilterModeWhitelist captures enum value "Whitelist"
	S3TaggingFilterModeWhitelist string = "Whitelist"

	// S3TaggingFilterModeBlacklist captures enum value "Blacklist"
	S3TaggingFilterModeBlacklist string = "Blacklist"
)

// prop value enum
func (m *S3TaggingFilter) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, s3TaggingFilterTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *S3TaggingFilter) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this s3 tagging filter based on the context it is used
func (m *S3TaggingFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTagSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *S3TaggingFilter) contextValidateTagSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagSet); i++ {

		if m.TagSet[i] != nil {

			if swag.IsZero(m.TagSet[i]) { // not required
				return nil
			}

			if err := m.TagSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *S3TaggingFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3TaggingFilter) UnmarshalBinary(b []byte) error {
	var res S3TaggingFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
