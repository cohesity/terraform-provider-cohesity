// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KubernetesRecoverFilesNewTargetConfig Kubernetes Recover Files New Target Config.
//
// Specifies the configuration for recovering files and folders to a new target.
//
// swagger:model KubernetesRecoverFilesNewTargetConfig
type KubernetesRecoverFilesNewTargetConfig struct {

	// Specifies the absolute path of the file.
	// Required: true
	AbsolutePath *string `json:"absolutePath"`

	// Specifies the target namespace to recover files and folders to.
	TargetNamespace *RecoverTarget `json:"targetNamespace,omitempty"`

	// Specifies the target PVC(Persistent Volume Claim) to recover files and folders to.
	// Required: true
	TargetPvc *RecoverTarget `json:"targetPvc"`

	// Specifies the target kubernetes to recover files and folders to.
	TargetSource *RecoverTarget `json:"targetSource,omitempty"`
}

// Validate validates this kubernetes recover files new target config
func (m *KubernetesRecoverFilesNewTargetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbsolutePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPvc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesRecoverFilesNewTargetConfig) validateAbsolutePath(formats strfmt.Registry) error {

	if err := validate.Required("absolutePath", "body", m.AbsolutePath); err != nil {
		return err
	}

	return nil
}

func (m *KubernetesRecoverFilesNewTargetConfig) validateTargetNamespace(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetNamespace) { // not required
		return nil
	}

	if m.TargetNamespace != nil {
		if err := m.TargetNamespace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetNamespace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetNamespace")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesRecoverFilesNewTargetConfig) validateTargetPvc(formats strfmt.Registry) error {

	if err := validate.Required("targetPvc", "body", m.TargetPvc); err != nil {
		return err
	}

	if m.TargetPvc != nil {
		if err := m.TargetPvc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetPvc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetPvc")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesRecoverFilesNewTargetConfig) validateTargetSource(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetSource) { // not required
		return nil
	}

	if m.TargetSource != nil {
		if err := m.TargetSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetSource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kubernetes recover files new target config based on the context it is used
func (m *KubernetesRecoverFilesNewTargetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetNamespace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetPvc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesRecoverFilesNewTargetConfig) contextValidateTargetNamespace(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetNamespace != nil {

		if swag.IsZero(m.TargetNamespace) { // not required
			return nil
		}

		if err := m.TargetNamespace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetNamespace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetNamespace")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesRecoverFilesNewTargetConfig) contextValidateTargetPvc(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetPvc != nil {

		if err := m.TargetPvc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetPvc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetPvc")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesRecoverFilesNewTargetConfig) contextValidateTargetSource(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetSource != nil {

		if swag.IsZero(m.TargetSource) { // not required
			return nil
		}

		if err := m.TargetSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesRecoverFilesNewTargetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesRecoverFilesNewTargetConfig) UnmarshalBinary(b []byte) error {
	var res KubernetesRecoverFilesNewTargetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
