// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FullSchedule Full Schedule
//
// Specifies settings that defines how frequent full backup will be performed for a Protection Group.
//
// swagger:model FullSchedule
type FullSchedule struct {

	// Specifies how often to start new runs of a Protection Group. <br>'Days' specifies that Protection Group run starts periodically on every day. For full backup schedule, currently we only support frequecny of 1 which indicates that full backup will be performed daily. <br>'Weeks' specifies that new Protection Group runs start weekly on certain days specified using 'dayOfWeek' field. <br>'Months' specifies that new Protection Group runs start monthly on certain day of specific week. This schedule needs 'weekOfMonth' and 'dayOfWeek' fields to be set. <br>'ProtectOnce' specifies that groups using this policy option will run only once and after that group will permanently be disabled. <br> Example: To run the Protection Group on Second Sunday of Every Month, following schedule need to be set: <br> unit: 'Month' <br> dayOfWeek: 'Sunday' <br> weekOfMonth: 'Second'
	// Required: true
	// Enum: ["Days","Weeks","Months","Years","ProtectOnce"]
	Unit *string `json:"unit"`

	// Specifies the days Schedule for Protection Group to start runs after certain number of days.
	DaySchedule *DaySchedule `json:"daySchedule,omitempty"`

	// Specifies the week Schedule for Protection Group to start runs on certain number of days in a week.
	WeekSchedule *WeekSchedule `json:"weekSchedule,omitempty"`

	// Specifies the week Schedule for Protection Group to start runs on specific week in a month and specific days of that week.
	MonthSchedule *MonthSchedule `json:"monthSchedule,omitempty"`

	// Specifies the year Schedule for Protection Group to start runs on specific day of that year.
	YearSchedule *YearSchedule `json:"yearSchedule,omitempty"`
}

// Validate validates this full schedule
func (m *FullSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaySchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYearSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fullScheduleTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Days","Weeks","Months","Years","ProtectOnce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fullScheduleTypeUnitPropEnum = append(fullScheduleTypeUnitPropEnum, v)
	}
}

const (

	// FullScheduleUnitDays captures enum value "Days"
	FullScheduleUnitDays string = "Days"

	// FullScheduleUnitWeeks captures enum value "Weeks"
	FullScheduleUnitWeeks string = "Weeks"

	// FullScheduleUnitMonths captures enum value "Months"
	FullScheduleUnitMonths string = "Months"

	// FullScheduleUnitYears captures enum value "Years"
	FullScheduleUnitYears string = "Years"

	// FullScheduleUnitProtectOnce captures enum value "ProtectOnce"
	FullScheduleUnitProtectOnce string = "ProtectOnce"
)

// prop value enum
func (m *FullSchedule) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fullScheduleTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FullSchedule) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", *m.Unit); err != nil {
		return err
	}

	return nil
}

func (m *FullSchedule) validateDaySchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.DaySchedule) { // not required
		return nil
	}

	if m.DaySchedule != nil {
		if err := m.DaySchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("daySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *FullSchedule) validateWeekSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.WeekSchedule) { // not required
		return nil
	}

	if m.WeekSchedule != nil {
		if err := m.WeekSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weekSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *FullSchedule) validateMonthSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.MonthSchedule) { // not required
		return nil
	}

	if m.MonthSchedule != nil {
		if err := m.MonthSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *FullSchedule) validateYearSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.YearSchedule) { // not required
		return nil
	}

	if m.YearSchedule != nil {
		if err := m.YearSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("yearSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("yearSchedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this full schedule based on the context it is used
func (m *FullSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDaySchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeekSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonthSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateYearSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FullSchedule) contextValidateDaySchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.DaySchedule != nil {

		if swag.IsZero(m.DaySchedule) { // not required
			return nil
		}

		if err := m.DaySchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("daySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *FullSchedule) contextValidateWeekSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.WeekSchedule != nil {

		if swag.IsZero(m.WeekSchedule) { // not required
			return nil
		}

		if err := m.WeekSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weekSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *FullSchedule) contextValidateMonthSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.MonthSchedule != nil {

		if swag.IsZero(m.MonthSchedule) { // not required
			return nil
		}

		if err := m.MonthSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *FullSchedule) contextValidateYearSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.YearSchedule != nil {

		if swag.IsZero(m.YearSchedule) { // not required
			return nil
		}

		if err := m.YearSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("yearSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("yearSchedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FullSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FullSchedule) UnmarshalBinary(b []byte) error {
	var res FullSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
