// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphNode Determines information about a node in the graph.
//
// swagger:model GraphNode
type GraphNode struct {

	// Specifies the unique id of the node.
	// Required: true
	NodeID *string `json:"nodeId"`

	// Specifies the type of aad node.
	NodeType *string `json:"nodeType,omitempty"`

	// Specifies the display name of the node.
	Name *string `json:"name,omitempty"`

	// Boolean to indicate if this is a root node or not.
	IsRootNode *bool `json:"isRootNode,omitempty"`

	// Specifies the aad specific node information.
	AadParams *AadNodeInfo `json:"aadParams,omitempty"`
}

// Validate validates this graph node
func (m *GraphNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAadParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphNode) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("nodeId", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

func (m *GraphNode) validateAadParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AadParams) { // not required
		return nil
	}

	if m.AadParams != nil {
		if err := m.AadParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aadParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aadParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this graph node based on the context it is used
func (m *GraphNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAadParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphNode) contextValidateAadParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AadParams != nil {

		if swag.IsZero(m.AadParams) { // not required
			return nil
		}

		if err := m.AadParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aadParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aadParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphNode) UnmarshalBinary(b []byte) error {
	var res GraphNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
