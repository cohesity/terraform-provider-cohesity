// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AWSTargetConfig AWS Target Configuration
//
// # Specifies the configuration for adding AWS as repilcation target
//
// swagger:model AWSTargetConfig
type AWSTargetConfig struct {

	// Specifies the source id of the AWS protection source registered on Cohesity cluster.
	// Required: true
	SourceID *int64 `json:"sourceId"`

	// Specifies the name of the AWS Replication target.
	// Read Only: true
	Name *string `json:"name,omitempty"`

	// Specifies id of the AWS region in which to replicate the Snapshot to. Applicable if replication target is AWS target.
	// Required: true
	Region *int64 `json:"region"`

	// Specifies name of the AWS region in which to replicate the Snapshot to. Applicable if replication target is AWS target.
	// Read Only: true
	RegionName *string `json:"regionName,omitempty"`
}

// Validate validates this a w s target config
func (m *AWSTargetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AWSTargetConfig) validateSourceID(formats strfmt.Registry) error {

	if err := validate.Required("sourceId", "body", m.SourceID); err != nil {
		return err
	}

	return nil
}

func (m *AWSTargetConfig) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this a w s target config based on the context it is used
func (m *AWSTargetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegionName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AWSTargetConfig) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AWSTargetConfig) contextValidateRegionName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "regionName", "body", m.RegionName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AWSTargetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AWSTargetConfig) UnmarshalBinary(b []byte) error {
	var res AWSTargetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
