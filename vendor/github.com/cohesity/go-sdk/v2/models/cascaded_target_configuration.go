// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CascadedTargetConfiguration Specifies the source of the cascadded replication and list of all remote targets that needs to added. Each source cluster and remote targets are considered as nodes and immediate connections between them are considered as edges.
//
// swagger:model CascadedTargetConfiguration
type CascadedTargetConfiguration struct {

	// Specifies the source cluster id from where the remote operations will be performed to the next set of remote targets.
	// Required: true
	SourceClusterID *int64 `json:"sourceClusterId"`

	// Specifies the list of remote targets that need to be added from the current source.
	// Required: true
	RemoteTargets *TargetsConfiguration `json:"remoteTargets"`
}

// Validate validates this cascaded target configuration
func (m *CascadedTargetConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CascadedTargetConfiguration) validateSourceClusterID(formats strfmt.Registry) error {

	if err := validate.Required("sourceClusterId", "body", m.SourceClusterID); err != nil {
		return err
	}

	return nil
}

func (m *CascadedTargetConfiguration) validateRemoteTargets(formats strfmt.Registry) error {

	if err := validate.Required("remoteTargets", "body", m.RemoteTargets); err != nil {
		return err
	}

	if m.RemoteTargets != nil {
		if err := m.RemoteTargets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteTargets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteTargets")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cascaded target configuration based on the context it is used
func (m *CascadedTargetConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRemoteTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CascadedTargetConfiguration) contextValidateRemoteTargets(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteTargets != nil {

		if err := m.RemoteTargets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteTargets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteTargets")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CascadedTargetConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CascadedTargetConfiguration) UnmarshalBinary(b []byte) error {
	var res CascadedTargetConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
