// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudDomain Specifies the parameters which are specific to cloud domain.
//
// swagger:model CloudDomain
type CloudDomain struct {

	// Specifies the Id of the cloud domain..
	// Read Only: true
	DomainID *int64 `json:"domainId,omitempty"`

	// Specifies the Id of ViewBox related to the cloud domain.
	// Read Only: true
	ViewBoxID *int64 `json:"viewBoxId,omitempty"`

	// Specifies the Name of StorageDomain related to the cloud domain.
	// Read Only: true
	StorageDomainName *string `json:"storageDomainName,omitempty"`
}

// Validate validates this cloud domain
func (m *CloudDomain) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this cloud domain based on the context it is used
func (m *CloudDomain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDomainID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewBoxID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageDomainName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudDomain) contextValidateDomainID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "domainId", "body", m.DomainID); err != nil {
		return err
	}

	return nil
}

func (m *CloudDomain) contextValidateViewBoxID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "viewBoxId", "body", m.ViewBoxID); err != nil {
		return err
	}

	return nil
}

func (m *CloudDomain) contextValidateStorageDomainName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageDomainName", "body", m.StorageDomainName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudDomain) UnmarshalBinary(b []byte) error {
	var res CloudDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
