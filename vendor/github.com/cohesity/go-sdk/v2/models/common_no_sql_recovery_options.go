// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonNoSQLRecoveryOptions Specifies the common properties required by all Nosl adapters at the time of recovery.
//
// swagger:model CommonNoSqlRecoveryOptions
type CommonNoSQLRecoveryOptions struct {

	// Specifies the 'Source Registration ID' of the source where the objects are to be recovered. If this is not specified, the recovery job will recover to the original location.
	RecoverTo *int64 `json:"recoverTo,omitempty"`

	// Set to true to overwrite an existing object at the destination. If set to false, and the same object exists at the destination, then recovery will fail for that object.
	Overwrite *bool `json:"overwrite,omitempty"`

	// Specifies the maximum number of concurrent IO Streams that will be created to exchange data with the cluster.
	Concurrency *int32 `json:"concurrency,omitempty"`

	// Specifies the maximum network bandwidth that each concurrent IO Stream can use for exchanging data with the cluster.
	BandwidthMBPS *int64 `json:"bandwidthMBPS,omitempty"`

	// This field will hold the warnings in cases where the job status is SucceededWithWarnings.
	// Read Only: true
	Warnings []string `json:"warnings"`

	// Specifies the advanced configuration for a recovery job.
	AdvancedConfigs []*KeyValuePair `json:"advancedConfigs"`
}

// Validate validates this common no Sql recovery options
func (m *CommonNoSQLRecoveryOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvancedConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonNoSQLRecoveryOptions) validateAdvancedConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvancedConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.AdvancedConfigs); i++ {
		if swag.IsZero(m.AdvancedConfigs[i]) { // not required
			continue
		}

		if m.AdvancedConfigs[i] != nil {
			if err := m.AdvancedConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this common no Sql recovery options based on the context it is used
func (m *CommonNoSQLRecoveryOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdvancedConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonNoSQLRecoveryOptions) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "warnings", "body", []string(m.Warnings)); err != nil {
		return err
	}

	return nil
}

func (m *CommonNoSQLRecoveryOptions) contextValidateAdvancedConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdvancedConfigs); i++ {

		if m.AdvancedConfigs[i] != nil {

			if swag.IsZero(m.AdvancedConfigs[i]) { // not required
				return nil
			}

			if err := m.AdvancedConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonNoSQLRecoveryOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonNoSQLRecoveryOptions) UnmarshalBinary(b []byte) error {
	var res CommonNoSQLRecoveryOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
