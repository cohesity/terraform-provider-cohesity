// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// S3Config Specifies the S3 config settings for this View.
//
// swagger:model S3Config
type S3Config struct {

	// Specifies the path to access this View as an S3 share.
	// Read Only: true
	S3AccessPath *string `json:"s3AccessPath,omitempty"`

	// Specifies the versioning state of S3 bucket. Buckets can be in one of three states: UnVersioned (default), VersioningEnabled, or VersioningSuspended. Once versioning is enabled for a bucket, it can never return to an UnVersioned state. However, versioning on the bucket can be suspended.
	// Enum: ["UnVersioned","Enabled","Suspended"]
	Versioning *string `json:"versioning,omitempty"`

	// Specifies if this View has S3 ABAC enabled. This can only be set
	// while creating a view. The ABAC server corresponding the tenant
	// will be used for authentication and authorization checks.
	//
	EnableAbac *bool `json:"enableAbac,omitempty"`

	// Specifies if this View has S3 MPU 2.0 enabled. This can set
	// while editing a view.
	//
	S3EnableEfficientMpu *bool `json:"s3EnableEfficientMpu,omitempty"`

	// Specifies if this View has S3 MPU 2.0 enabled. This can set
	// while editing a view.
	//
	S3EfficientMpuMaxSubfiles *int32 `json:"s3EfficientMpuMaxSubfiles,omitempty"`

	// Specifies the migration state for this view. A view can be under
	// following migration states: Enabled, Paused, Complete,
	// UnderMigration.
	//
	// Enum: ["Enabled","UnderMigration","Paused","Complete"]
	S3MigrationState *string `json:"s3MigrationState,omitempty"`

	// Specifies the ACL config of the View as an S3 bucket.
	ACLConfig *ACLConfig `json:"aclConfig,omitempty"`

	// Specifies the policy in effect for this bucket.
	BucketPolicy *BucketPolicy `json:"bucketPolicy,omitempty"`

	// Specifies the S3 Lifecycle policy of the bucket
	LifecycleManagement *S3LifecycleManagement `json:"lifecycleManagement,omitempty"`

	// Specifies the owner info of the View as an S3 bucket.
	OwnerInfo *S3OwnerInfo `json:"ownerInfo,omitempty"`
}

// Validate validates this s3 config
func (m *S3Config) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersioning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3MigrationState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateACLConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucketPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var s3ConfigTypeVersioningPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UnVersioned","Enabled","Suspended"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		s3ConfigTypeVersioningPropEnum = append(s3ConfigTypeVersioningPropEnum, v)
	}
}

const (

	// S3ConfigVersioningUnVersioned captures enum value "UnVersioned"
	S3ConfigVersioningUnVersioned string = "UnVersioned"

	// S3ConfigVersioningEnabled captures enum value "Enabled"
	S3ConfigVersioningEnabled string = "Enabled"

	// S3ConfigVersioningSuspended captures enum value "Suspended"
	S3ConfigVersioningSuspended string = "Suspended"
)

// prop value enum
func (m *S3Config) validateVersioningEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, s3ConfigTypeVersioningPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *S3Config) validateVersioning(formats strfmt.Registry) error {
	if swag.IsZero(m.Versioning) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersioningEnum("versioning", "body", *m.Versioning); err != nil {
		return err
	}

	return nil
}

var s3ConfigTypeS3MigrationStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enabled","UnderMigration","Paused","Complete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		s3ConfigTypeS3MigrationStatePropEnum = append(s3ConfigTypeS3MigrationStatePropEnum, v)
	}
}

const (

	// S3ConfigS3MigrationStateEnabled captures enum value "Enabled"
	S3ConfigS3MigrationStateEnabled string = "Enabled"

	// S3ConfigS3MigrationStateUnderMigration captures enum value "UnderMigration"
	S3ConfigS3MigrationStateUnderMigration string = "UnderMigration"

	// S3ConfigS3MigrationStatePaused captures enum value "Paused"
	S3ConfigS3MigrationStatePaused string = "Paused"

	// S3ConfigS3MigrationStateComplete captures enum value "Complete"
	S3ConfigS3MigrationStateComplete string = "Complete"
)

// prop value enum
func (m *S3Config) validateS3MigrationStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, s3ConfigTypeS3MigrationStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *S3Config) validateS3MigrationState(formats strfmt.Registry) error {
	if swag.IsZero(m.S3MigrationState) { // not required
		return nil
	}

	// value enum
	if err := m.validateS3MigrationStateEnum("s3MigrationState", "body", *m.S3MigrationState); err != nil {
		return err
	}

	return nil
}

func (m *S3Config) validateACLConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ACLConfig) { // not required
		return nil
	}

	if m.ACLConfig != nil {
		if err := m.ACLConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aclConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aclConfig")
			}
			return err
		}
	}

	return nil
}

func (m *S3Config) validateBucketPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.BucketPolicy) { // not required
		return nil
	}

	if m.BucketPolicy != nil {
		if err := m.BucketPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucketPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucketPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *S3Config) validateLifecycleManagement(formats strfmt.Registry) error {
	if swag.IsZero(m.LifecycleManagement) { // not required
		return nil
	}

	if m.LifecycleManagement != nil {
		if err := m.LifecycleManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifecycleManagement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lifecycleManagement")
			}
			return err
		}
	}

	return nil
}

func (m *S3Config) validateOwnerInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerInfo) { // not required
		return nil
	}

	if m.OwnerInfo != nil {
		if err := m.OwnerInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this s3 config based on the context it is used
func (m *S3Config) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateS3AccessPath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateACLConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBucketPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLifecycleManagement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *S3Config) contextValidateS3AccessPath(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "s3AccessPath", "body", m.S3AccessPath); err != nil {
		return err
	}

	return nil
}

func (m *S3Config) contextValidateACLConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ACLConfig != nil {

		if swag.IsZero(m.ACLConfig) { // not required
			return nil
		}

		if err := m.ACLConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aclConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aclConfig")
			}
			return err
		}
	}

	return nil
}

func (m *S3Config) contextValidateBucketPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.BucketPolicy != nil {

		if swag.IsZero(m.BucketPolicy) { // not required
			return nil
		}

		if err := m.BucketPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucketPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucketPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *S3Config) contextValidateLifecycleManagement(ctx context.Context, formats strfmt.Registry) error {

	if m.LifecycleManagement != nil {

		if swag.IsZero(m.LifecycleManagement) { // not required
			return nil
		}

		if err := m.LifecycleManagement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifecycleManagement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lifecycleManagement")
			}
			return err
		}
	}

	return nil
}

func (m *S3Config) contextValidateOwnerInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerInfo != nil {

		if swag.IsZero(m.OwnerInfo) { // not required
			return nil
		}

		if err := m.OwnerInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *S3Config) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3Config) UnmarshalBinary(b []byte) error {
	var res S3Config
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
