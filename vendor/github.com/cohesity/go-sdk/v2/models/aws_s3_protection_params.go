// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsS3ProtectionParams Create AWS S3 Protection Request Body
//
// Specifies the parameters which are specific to AWS Object Protection for AWS S3. Atlease one of tags or objects must be specified.
//
// swagger:model AwsS3ProtectionParams
type AwsS3ProtectionParams struct {

	// Specifies the objects to be protected.
	Objects []*AwsS3ObjectLevelParams `json:"objects"`

	// Specifies whether to skip files on error or not. Default value is false.
	SkipOnError *bool `json:"skipOnError,omitempty"`

	// Specifies the AWS S3 Storage classes to backup.
	StorageClass []string `json:"storageClass"`

	// Specifies whether to backup object level acls. Default value is false.
	BackupObjectLevelACLs *bool `json:"backupObjectLevelACLs,omitempty"`

	// ARN of the inventory report destination bucket for S3 backups.
	InventoryReportDestination *string `json:"inventoryReportDestination,omitempty"`

	// The prefix in the S3 destination bucket where inventory reports will be stored.
	InventoryReportDestinationPrefix *string `json:"inventoryReportDestinationPrefix,omitempty"`

	// Specifies the frequency to generate inventory reports.
	// Enum: ["Weekly","Monthly"]
	InventoryReportFrequency *string `json:"inventoryReportFrequency,omitempty"`

	// Specifies the baseline incremental frequency.
	// Enum: ["Daily","Weekly","Monthly"]
	BaselineIncrementalFrequency *string `json:"baselineIncrementalFrequency,omitempty"`
}

// Validate validates this aws s3 protection params
func (m *AwsS3ProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryReportFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaselineIncrementalFrequency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsS3ProtectionParams) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var awsS3ProtectionParamsStorageClassItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AmazonS3Standard","AmazonS3IntelligentTiering","AmazonS3StandardIA","AmazonS3OneZoneIA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsS3ProtectionParamsStorageClassItemsEnum = append(awsS3ProtectionParamsStorageClassItemsEnum, v)
	}
}

func (m *AwsS3ProtectionParams) validateStorageClassItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, awsS3ProtectionParamsStorageClassItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AwsS3ProtectionParams) validateStorageClass(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageClass) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageClass); i++ {

		// value enum
		if err := m.validateStorageClassItemsEnum("storageClass"+"."+strconv.Itoa(i), "body", m.StorageClass[i]); err != nil {
			return err
		}

	}

	return nil
}

var awsS3ProtectionParamsTypeInventoryReportFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Weekly","Monthly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsS3ProtectionParamsTypeInventoryReportFrequencyPropEnum = append(awsS3ProtectionParamsTypeInventoryReportFrequencyPropEnum, v)
	}
}

const (

	// AwsS3ProtectionParamsInventoryReportFrequencyWeekly captures enum value "Weekly"
	AwsS3ProtectionParamsInventoryReportFrequencyWeekly string = "Weekly"

	// AwsS3ProtectionParamsInventoryReportFrequencyMonthly captures enum value "Monthly"
	AwsS3ProtectionParamsInventoryReportFrequencyMonthly string = "Monthly"
)

// prop value enum
func (m *AwsS3ProtectionParams) validateInventoryReportFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, awsS3ProtectionParamsTypeInventoryReportFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AwsS3ProtectionParams) validateInventoryReportFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.InventoryReportFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateInventoryReportFrequencyEnum("inventoryReportFrequency", "body", *m.InventoryReportFrequency); err != nil {
		return err
	}

	return nil
}

var awsS3ProtectionParamsTypeBaselineIncrementalFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Daily","Weekly","Monthly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsS3ProtectionParamsTypeBaselineIncrementalFrequencyPropEnum = append(awsS3ProtectionParamsTypeBaselineIncrementalFrequencyPropEnum, v)
	}
}

const (

	// AwsS3ProtectionParamsBaselineIncrementalFrequencyDaily captures enum value "Daily"
	AwsS3ProtectionParamsBaselineIncrementalFrequencyDaily string = "Daily"

	// AwsS3ProtectionParamsBaselineIncrementalFrequencyWeekly captures enum value "Weekly"
	AwsS3ProtectionParamsBaselineIncrementalFrequencyWeekly string = "Weekly"

	// AwsS3ProtectionParamsBaselineIncrementalFrequencyMonthly captures enum value "Monthly"
	AwsS3ProtectionParamsBaselineIncrementalFrequencyMonthly string = "Monthly"
)

// prop value enum
func (m *AwsS3ProtectionParams) validateBaselineIncrementalFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, awsS3ProtectionParamsTypeBaselineIncrementalFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AwsS3ProtectionParams) validateBaselineIncrementalFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.BaselineIncrementalFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateBaselineIncrementalFrequencyEnum("baselineIncrementalFrequency", "body", *m.BaselineIncrementalFrequency); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this aws s3 protection params based on the context it is used
func (m *AwsS3ProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsS3ProtectionParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsS3ProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsS3ProtectionParams) UnmarshalBinary(b []byte) error {
	var res AwsS3ProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
