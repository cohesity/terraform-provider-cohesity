// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WormSpecificTargetParams Azure External Target Request WORM Params for archival purpose type.
//
// Specifies the parameters which specific to WORM and needs to passed when WORM is enabled for archival External Targets.
//
// swagger:model WormSpecificTargetParams
type WormSpecificTargetParams struct {

	// Specifies the resource group of worm enabled external target.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// Specifies the subscription id of worm enabled external target.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// Specifies the application id of worm enabled external target.
	ApplicationID *string `json:"applicationId,omitempty"`

	// Specifies the encrypted application key of worm enabled external target.
	EncryptedApplicationKey *string `json:"encryptedApplicationKey,omitempty"`

	// Specifies the tenant id of worm enabled external target.
	TenantID *string `json:"tenantId,omitempty"`
}

// Validate validates this worm specific target params
func (m *WormSpecificTargetParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this worm specific target params based on context it is used
func (m *WormSpecificTargetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WormSpecificTargetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WormSpecificTargetParams) UnmarshalBinary(b []byte) error {
	var res WormSpecificTargetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
