// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewAliasInfo View Alias Information.
//
// View Alias Info is returned as part of list views.
//
// swagger:model ViewAliasInfo
type ViewAliasInfo struct {

	// Alias name.
	AliasName *string `json:"aliasName,omitempty"`

	// View path for the alias.
	ViewPath *string `json:"viewPath,omitempty"`

	// List of external client subnet IPs that are allowed to access the share.
	ClientSubnetWhitelist []*Subnet `json:"clientSubnetWhitelist"`

	// This field is currently deprecated. Specifies whether to enable filer audit log on this view alias. This is only used if filer audit logging is enabled in cluster config.
	EnableFilerAuditLog *bool `json:"enableFilerAuditLog,omitempty"`

	// Specifies the state of File Audit logging for this Share. Supported types: [Inherited, Enabled, Disabled]. Inherited: Audit log setting is inherited from the  View. Enabled: Audit log is enabled for this Share. Disabled: Audit log is disabled for this Share.
	// Enum: ["Inherited","Enabled","Disabled"]
	FileAuditLoggingState *string `json:"fileAuditLoggingState,omitempty"`

	// SMB config for the alias (share).
	SmbConfig *AliasSmbConfig `json:"smbConfig,omitempty"`
}

// Validate validates this view alias info
func (m *ViewAliasInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientSubnetWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileAuditLoggingState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewAliasInfo) validateClientSubnetWhitelist(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientSubnetWhitelist) { // not required
		return nil
	}

	for i := 0; i < len(m.ClientSubnetWhitelist); i++ {
		if swag.IsZero(m.ClientSubnetWhitelist[i]) { // not required
			continue
		}

		if m.ClientSubnetWhitelist[i] != nil {
			if err := m.ClientSubnetWhitelist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clientSubnetWhitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clientSubnetWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var viewAliasInfoTypeFileAuditLoggingStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Inherited","Enabled","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewAliasInfoTypeFileAuditLoggingStatePropEnum = append(viewAliasInfoTypeFileAuditLoggingStatePropEnum, v)
	}
}

const (

	// ViewAliasInfoFileAuditLoggingStateInherited captures enum value "Inherited"
	ViewAliasInfoFileAuditLoggingStateInherited string = "Inherited"

	// ViewAliasInfoFileAuditLoggingStateEnabled captures enum value "Enabled"
	ViewAliasInfoFileAuditLoggingStateEnabled string = "Enabled"

	// ViewAliasInfoFileAuditLoggingStateDisabled captures enum value "Disabled"
	ViewAliasInfoFileAuditLoggingStateDisabled string = "Disabled"
)

// prop value enum
func (m *ViewAliasInfo) validateFileAuditLoggingStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewAliasInfoTypeFileAuditLoggingStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewAliasInfo) validateFileAuditLoggingState(formats strfmt.Registry) error {
	if swag.IsZero(m.FileAuditLoggingState) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileAuditLoggingStateEnum("fileAuditLoggingState", "body", *m.FileAuditLoggingState); err != nil {
		return err
	}

	return nil
}

func (m *ViewAliasInfo) validateSmbConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SmbConfig) { // not required
		return nil
	}

	if m.SmbConfig != nil {
		if err := m.SmbConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smbConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smbConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this view alias info based on the context it is used
func (m *ViewAliasInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientSubnetWhitelist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewAliasInfo) contextValidateClientSubnetWhitelist(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClientSubnetWhitelist); i++ {

		if m.ClientSubnetWhitelist[i] != nil {

			if swag.IsZero(m.ClientSubnetWhitelist[i]) { // not required
				return nil
			}

			if err := m.ClientSubnetWhitelist[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clientSubnetWhitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clientSubnetWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewAliasInfo) contextValidateSmbConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SmbConfig != nil {

		if swag.IsZero(m.SmbConfig) { // not required
			return nil
		}

		if err := m.SmbConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smbConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smbConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewAliasInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewAliasInfo) UnmarshalBinary(b []byte) error {
	var res ViewAliasInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
