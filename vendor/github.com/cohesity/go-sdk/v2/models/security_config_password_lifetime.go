// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityConfigPasswordLifetime Specifies security config for password lifetime.
//
// swagger:model SecurityConfigPasswordLifetime
type SecurityConfigPasswordLifetime struct {

	// Specifies the minimum password lifetime in days.
	// Minimum: 0
	MinLifetimeDays *int32 `json:"minLifetimeDays,omitempty"`

	// Specifies the maximum password lifetime in days.
	// Maximum: 365
	// Minimum: 1
	MaxLifetimeDays *int32 `json:"maxLifetimeDays,omitempty"`
}

// Validate validates this security config password lifetime
func (m *SecurityConfigPasswordLifetime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMinLifetimeDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxLifetimeDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfigPasswordLifetime) validateMinLifetimeDays(formats strfmt.Registry) error {
	if swag.IsZero(m.MinLifetimeDays) { // not required
		return nil
	}

	if err := validate.MinimumInt("minLifetimeDays", "body", int64(*m.MinLifetimeDays), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfigPasswordLifetime) validateMaxLifetimeDays(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxLifetimeDays) { // not required
		return nil
	}

	if err := validate.MinimumInt("maxLifetimeDays", "body", int64(*m.MaxLifetimeDays), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("maxLifetimeDays", "body", int64(*m.MaxLifetimeDays), 365, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this security config password lifetime based on context it is used
func (m *SecurityConfigPasswordLifetime) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfigPasswordLifetime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfigPasswordLifetime) UnmarshalBinary(b []byte) error {
	var res SecurityConfigPasswordLifetime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
