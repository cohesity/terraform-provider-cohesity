// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TierLevelSettings Specifies the settings tier levels configured with each archival target. The tier settings need to be applied in specific order and default tier should always be passed as first entry in tiers array. The following example illustrates how to configure tiering input for AWS tiering. Same type of input structure applied to other cloud platforms also. <br>If user wants to achieve following tiering for backup, <br>User Desired Tiering- <br><t>1.Archive Full back up for 12 Months <br><t>2.Tier Levels <br><t><t>[1,12] [ <br><t><t><t>s3 (1 to 2 months), (default tier) <br><t><t><t>s3 Intelligent tiering (3 to 6 months), <br><t><t><t>s3 One Zone (7 to 9 months) <br><t><t><t>Glacier (10 to 12 months)] <br><t>API Input <br><t><t>1.tiers-[ <br><t><t><t>{'tierType': 'S3','moveAfterUnit':'months', <br><t><t><t>'moveAfter':2 - move from s3 to s3Inte after 2 months}, <br><t><t><t>{'tierType': 'S3Inte','moveAfterUnit':'months', <br><t><t><t>'moveAfter':4 - move from S3Inte to Glacier after 4 months}, <br><t><t><t>{'tierType': 'Glacier', 'moveAfterUnit':'months', <br><t><t><t>'moveAfter': 3 - move from Glacier to S3 One Zone after 3 months }, <br><t><t><t>{'tierType': 'S3 One Zone', 'moveAfterUnit': nil, <br><t><t><t>'moveAfter': nil - For the last record, 'moveAfter' and 'moveAfterUnit' <br><t><t><t>will be ignored since there are no further tier for data movement } <br><t><t><t>}]
//
// swagger:model TierLevelSettings
type TierLevelSettings struct {

	// Specifies the cloud platform to enable tiering.
	// Required: true
	// Enum: ["AWS","Azure","Oracle","Google"]
	CloudPlatform *string `json:"cloudPlatform"`

	// Specifies the settings for AWS Tiers.
	AwsTiering *AWSTiers `json:"awsTiering,omitempty"`

	// Specifies the settings for Azure Tiers.
	AzureTiering *AzureTiers `json:"azureTiering,omitempty"`

	// Specifies the settings for Google Tiers.
	GoogleTiering *GoogleTiers `json:"googleTiering,omitempty"`

	// Specifies the settings for Oracle Tiers.
	OracleTiering *OracleTiers `json:"oracleTiering,omitempty"`
}

// Validate validates this tier level settings
func (m *TierLevelSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsTiering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureTiering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGoogleTiering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleTiering(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tierLevelSettingsTypeCloudPlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","Azure","Oracle","Google"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tierLevelSettingsTypeCloudPlatformPropEnum = append(tierLevelSettingsTypeCloudPlatformPropEnum, v)
	}
}

const (

	// TierLevelSettingsCloudPlatformAWS captures enum value "AWS"
	TierLevelSettingsCloudPlatformAWS string = "AWS"

	// TierLevelSettingsCloudPlatformAzure captures enum value "Azure"
	TierLevelSettingsCloudPlatformAzure string = "Azure"

	// TierLevelSettingsCloudPlatformOracle captures enum value "Oracle"
	TierLevelSettingsCloudPlatformOracle string = "Oracle"

	// TierLevelSettingsCloudPlatformGoogle captures enum value "Google"
	TierLevelSettingsCloudPlatformGoogle string = "Google"
)

// prop value enum
func (m *TierLevelSettings) validateCloudPlatformEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tierLevelSettingsTypeCloudPlatformPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TierLevelSettings) validateCloudPlatform(formats strfmt.Registry) error {

	if err := validate.Required("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	// value enum
	if err := m.validateCloudPlatformEnum("cloudPlatform", "body", *m.CloudPlatform); err != nil {
		return err
	}

	return nil
}

func (m *TierLevelSettings) validateAwsTiering(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsTiering) { // not required
		return nil
	}

	if m.AwsTiering != nil {
		if err := m.AwsTiering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsTiering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsTiering")
			}
			return err
		}
	}

	return nil
}

func (m *TierLevelSettings) validateAzureTiering(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureTiering) { // not required
		return nil
	}

	if m.AzureTiering != nil {
		if err := m.AzureTiering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureTiering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureTiering")
			}
			return err
		}
	}

	return nil
}

func (m *TierLevelSettings) validateGoogleTiering(formats strfmt.Registry) error {
	if swag.IsZero(m.GoogleTiering) { // not required
		return nil
	}

	if m.GoogleTiering != nil {
		if err := m.GoogleTiering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("googleTiering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("googleTiering")
			}
			return err
		}
	}

	return nil
}

func (m *TierLevelSettings) validateOracleTiering(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleTiering) { // not required
		return nil
	}

	if m.OracleTiering != nil {
		if err := m.OracleTiering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleTiering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleTiering")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tier level settings based on the context it is used
func (m *TierLevelSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsTiering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureTiering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGoogleTiering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleTiering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TierLevelSettings) contextValidateAwsTiering(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsTiering != nil {

		if swag.IsZero(m.AwsTiering) { // not required
			return nil
		}

		if err := m.AwsTiering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsTiering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsTiering")
			}
			return err
		}
	}

	return nil
}

func (m *TierLevelSettings) contextValidateAzureTiering(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureTiering != nil {

		if swag.IsZero(m.AzureTiering) { // not required
			return nil
		}

		if err := m.AzureTiering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureTiering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureTiering")
			}
			return err
		}
	}

	return nil
}

func (m *TierLevelSettings) contextValidateGoogleTiering(ctx context.Context, formats strfmt.Registry) error {

	if m.GoogleTiering != nil {

		if swag.IsZero(m.GoogleTiering) { // not required
			return nil
		}

		if err := m.GoogleTiering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("googleTiering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("googleTiering")
			}
			return err
		}
	}

	return nil
}

func (m *TierLevelSettings) contextValidateOracleTiering(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleTiering != nil {

		if swag.IsZero(m.OracleTiering) { // not required
			return nil
		}

		if err := m.OracleTiering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleTiering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleTiering")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TierLevelSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TierLevelSettings) UnmarshalBinary(b []byte) error {
	var res TierLevelSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
