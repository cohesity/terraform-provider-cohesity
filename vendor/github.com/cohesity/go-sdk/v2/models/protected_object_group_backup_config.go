// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtectedObjectGroupBackupConfig Specifies the parameters of a protection group which is protecting an object.
//
// swagger:model ProtectedObjectGroupBackupConfig
type ProtectedObjectGroupBackupConfig struct {

	// Specifies the protection group id, if given object is also protected by a protection group.
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// Specifies the protection group name, if given object is also protected by a protection group.
	// Read Only: true
	ProtectionGroupName *string `json:"protectionGroupName,omitempty"`
}

// Validate validates this protected object group backup config
func (m *ProtectedObjectGroupBackupConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this protected object group backup config based on the context it is used
func (m *ProtectedObjectGroupBackupConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtectionGroupName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectedObjectGroupBackupConfig) contextValidateProtectionGroupName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "protectionGroupName", "body", m.ProtectionGroupName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectedObjectGroupBackupConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectedObjectGroupBackupConfig) UnmarshalBinary(b []byte) error {
	var res ProtectedObjectGroupBackupConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
