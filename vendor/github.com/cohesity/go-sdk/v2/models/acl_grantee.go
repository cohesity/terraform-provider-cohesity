// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ACLGrantee Specifies an ACL grantee.
//
// swagger:model AclGrantee
type ACLGrantee struct {

	// Specifies the grantee type.
	// Required: true
	// Enum: ["RegisteredUser","Group"]
	Type *string `json:"type"`

	// Specifies the user id of the grantee if the `type` is Registered User.
	UserID *string `json:"userId,omitempty"`

	// Specifies the group to which permissions are granted if the `type` is Group.
	// Enum: ["AuthenticatedUsersGroup","AllUsersGroup","LogDeliveryGroup"]
	Group *string `json:"group,omitempty"`
}

// Validate validates this Acl grantee
func (m *ACLGrantee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var aclGranteeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RegisteredUser","Group"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aclGranteeTypeTypePropEnum = append(aclGranteeTypeTypePropEnum, v)
	}
}

const (

	// ACLGranteeTypeRegisteredUser captures enum value "RegisteredUser"
	ACLGranteeTypeRegisteredUser string = "RegisteredUser"

	// ACLGranteeTypeGroup captures enum value "Group"
	ACLGranteeTypeGroup string = "Group"
)

// prop value enum
func (m *ACLGrantee) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, aclGranteeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ACLGrantee) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var aclGranteeTypeGroupPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AuthenticatedUsersGroup","AllUsersGroup","LogDeliveryGroup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aclGranteeTypeGroupPropEnum = append(aclGranteeTypeGroupPropEnum, v)
	}
}

const (

	// ACLGranteeGroupAuthenticatedUsersGroup captures enum value "AuthenticatedUsersGroup"
	ACLGranteeGroupAuthenticatedUsersGroup string = "AuthenticatedUsersGroup"

	// ACLGranteeGroupAllUsersGroup captures enum value "AllUsersGroup"
	ACLGranteeGroupAllUsersGroup string = "AllUsersGroup"

	// ACLGranteeGroupLogDeliveryGroup captures enum value "LogDeliveryGroup"
	ACLGranteeGroupLogDeliveryGroup string = "LogDeliveryGroup"
)

// prop value enum
func (m *ACLGrantee) validateGroupEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, aclGranteeTypeGroupPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ACLGrantee) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.Group) { // not required
		return nil
	}

	// value enum
	if err := m.validateGroupEnum("group", "body", *m.Group); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Acl grantee based on context it is used
func (m *ACLGrantee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ACLGrantee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ACLGrantee) UnmarshalBinary(b []byte) error {
	var res ACLGrantee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
