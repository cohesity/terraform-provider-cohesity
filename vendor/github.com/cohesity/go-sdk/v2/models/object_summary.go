// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectSummary Object Summary
//
// Specifies the Object Summary.
//
// swagger:model ObjectSummary
type ObjectSummary struct {
	ObjectIdentifier

	// Specifies the hash identifier of the object.
	ObjectHash *string `json:"objectHash,omitempty"`

	// Specifies the type of the object.
	// Enum: ["kCluster","kVserver","kVolume","kVCenter","kStandaloneHost","kvCloudDirector","kFolder","kDatacenter","kComputeResource","kClusterComputeResource","kResourcePool","kDatastore","kHostSystem","kVirtualMachine","kVirtualApp","kStoragePod","kNetwork","kDistributedVirtualPortgroup","kTagCategory","kTag","kOpaqueNetwork","kOrganization","kVirtualDatacenter","kCatalog","kOrgMetadata","kStoragePolicy","kVirtualAppTemplate","kDomain","kOutlook","kMailbox","kUsers","kGroups","kSites","kUser","kGroup","kSite","kApplication","kGraphUser","kPublicFolders","kPublicFolder","kTeams","kTeam","kRootPublicFolder","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKeyspace","kTable","kDatabase","kCollection","kBucket","kNamespace","kSCVMMServer","kStandaloneCluster","kHostGroup","kHypervHost","kHostCluster","kCustomProperty","kTenant","kSubscription","kResourceGroup","kStorageAccount","kStorageKey","kStorageContainer","kStorageBlob","kApplicationSecurityGroup","kNetworkSecurityGroup","kVirtualNetwork","kSubnet","kComputeOptions","kSnapshotManagerPermit","kAvailabilitySet","kSQLServer","kSQLDatabase","kOVirtManager","kHost","kStorageDomain","kVNicProfile","kIAMUser","kRegion","kAvailabilityZone","kEC2Instance","kVPC","kInstanceType","kKeyPair","kRDSOptionGroup","kRDSParameterGroup","kRDSInstance","kRDSSubnet","kRDSTag","kAuroraTag","kAuroraCluster","kAccount","kSubTaskPermit","kS3Bucket","kS3Tag","kKmsKey","kRDSPostgresDb","kAuroraClusterPostgresDb","kProject","kLabel","kMetadata","kVPCConnector","kPrismCentral","kOtherHypervisorCluster","kZone","kMountPoint","kStorageArray","kFileSystem","kContainer","kFilesystem","kFileset","kPureProtectionGroup","kVolumeGroup","kStoragePool","kViewBox","kView","kWindowsCluster","kOracleRACCluster","kOracleAPCluster","kUnixCluster","kService","kPVC","kPersistentVolumeClaim","kPersistentVolume","kRootContainer","kDAGRootContainer","kExchangeNode","kExchangeDAGDatabaseCopy","kExchangeStandaloneDatabase","kExchangeDAG","kExchangeDAGDatabase","kDomainController","kInstance","kAAG","kAAGRootContainer","kAAGDatabase","kRACRootContainer","kTableSpace","kPDB","kObject","kSapHanaCluster","kSapHanaSID","kSapHanaDatabase","kOrg","kAppInstance"]
	ObjectType *string `json:"objectType,omitempty"`

	// Specifies the logical size of object in bytes.
	LogicalSizeBytes *int64 `json:"logicalSizeBytes,omitempty"`

	// Specifies the uuid which is a unique identifier of the object.
	UUID *string `json:"uuid,omitempty"`

	// Specifies the global id which is a unique identifier of the object.
	GlobalID *string `json:"globalId,omitempty"`

	// Specifies the protection type of the object if any.
	// Enum: ["kAgent","kNative","kSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsS3","kAwsRDSPostgresBackup","kAwsAuroraPostgres","kAwsRDSPostgres","kAzureSQL","kFile","kVolume"]
	ProtectionType *string `json:"protectionType,omitempty"`

	// Specifies the operating system type of the object.
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kOther","kHPUX","kVOS"]
	OsType *string `json:"osType,omitempty"`

	// Specifies the vCenter object details.
	VCenterSummary *ObjectTypeVCenterParams `json:"vCenterSummary,omitempty"`

	// Specifies the Sharepoint site object details.
	SharepointSiteSummary *SharepointObjectParams `json:"sharepointSiteSummary,omitempty"`

	// Specifies the windows cluster object details.
	WindowsClusterSummary *ObjectTypeWindowsClusterParams `json:"windowsClusterSummary,omitempty"`

	// Specifies child object details.
	ChildObjects []*ObjectSummary `json:"childObjects"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ObjectSummary) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ObjectIdentifier
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ObjectIdentifier = aO0

	// AO1
	var dataAO1 struct {
		ObjectHash *string `json:"objectHash,omitempty"`

		ObjectType *string `json:"objectType,omitempty"`

		LogicalSizeBytes *int64 `json:"logicalSizeBytes,omitempty"`

		UUID *string `json:"uuid,omitempty"`

		GlobalID *string `json:"globalId,omitempty"`

		ProtectionType *string `json:"protectionType,omitempty"`

		OsType *string `json:"osType,omitempty"`

		VCenterSummary *ObjectTypeVCenterParams `json:"vCenterSummary,omitempty"`

		SharepointSiteSummary *SharepointObjectParams `json:"sharepointSiteSummary,omitempty"`

		WindowsClusterSummary *ObjectTypeWindowsClusterParams `json:"windowsClusterSummary,omitempty"`

		ChildObjects []*ObjectSummary `json:"childObjects"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ObjectHash = dataAO1.ObjectHash

	m.ObjectType = dataAO1.ObjectType

	m.LogicalSizeBytes = dataAO1.LogicalSizeBytes

	m.UUID = dataAO1.UUID

	m.GlobalID = dataAO1.GlobalID

	m.ProtectionType = dataAO1.ProtectionType

	m.OsType = dataAO1.OsType

	m.VCenterSummary = dataAO1.VCenterSummary

	m.SharepointSiteSummary = dataAO1.SharepointSiteSummary

	m.WindowsClusterSummary = dataAO1.WindowsClusterSummary

	m.ChildObjects = dataAO1.ChildObjects

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ObjectSummary) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ObjectIdentifier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ObjectHash *string `json:"objectHash,omitempty"`

		ObjectType *string `json:"objectType,omitempty"`

		LogicalSizeBytes *int64 `json:"logicalSizeBytes,omitempty"`

		UUID *string `json:"uuid,omitempty"`

		GlobalID *string `json:"globalId,omitempty"`

		ProtectionType *string `json:"protectionType,omitempty"`

		OsType *string `json:"osType,omitempty"`

		VCenterSummary *ObjectTypeVCenterParams `json:"vCenterSummary,omitempty"`

		SharepointSiteSummary *SharepointObjectParams `json:"sharepointSiteSummary,omitempty"`

		WindowsClusterSummary *ObjectTypeWindowsClusterParams `json:"windowsClusterSummary,omitempty"`

		ChildObjects []*ObjectSummary `json:"childObjects"`
	}

	dataAO1.ObjectHash = m.ObjectHash

	dataAO1.ObjectType = m.ObjectType

	dataAO1.LogicalSizeBytes = m.LogicalSizeBytes

	dataAO1.UUID = m.UUID

	dataAO1.GlobalID = m.GlobalID

	dataAO1.ProtectionType = m.ProtectionType

	dataAO1.OsType = m.OsType

	dataAO1.VCenterSummary = m.VCenterSummary

	dataAO1.SharepointSiteSummary = m.SharepointSiteSummary

	dataAO1.WindowsClusterSummary = m.WindowsClusterSummary

	dataAO1.ChildObjects = m.ChildObjects

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this object summary
func (m *ObjectSummary) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectIdentifier
	if err := m.ObjectIdentifier.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVCenterSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharepointSiteSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindowsClusterSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildObjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var objectSummaryTypeObjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kVserver","kVolume","kVCenter","kStandaloneHost","kvCloudDirector","kFolder","kDatacenter","kComputeResource","kClusterComputeResource","kResourcePool","kDatastore","kHostSystem","kVirtualMachine","kVirtualApp","kStoragePod","kNetwork","kDistributedVirtualPortgroup","kTagCategory","kTag","kOpaqueNetwork","kOrganization","kVirtualDatacenter","kCatalog","kOrgMetadata","kStoragePolicy","kVirtualAppTemplate","kDomain","kOutlook","kMailbox","kUsers","kGroups","kSites","kUser","kGroup","kSite","kApplication","kGraphUser","kPublicFolders","kPublicFolder","kTeams","kTeam","kRootPublicFolder","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKeyspace","kTable","kDatabase","kCollection","kBucket","kNamespace","kSCVMMServer","kStandaloneCluster","kHostGroup","kHypervHost","kHostCluster","kCustomProperty","kTenant","kSubscription","kResourceGroup","kStorageAccount","kStorageKey","kStorageContainer","kStorageBlob","kApplicationSecurityGroup","kNetworkSecurityGroup","kVirtualNetwork","kSubnet","kComputeOptions","kSnapshotManagerPermit","kAvailabilitySet","kSQLServer","kSQLDatabase","kOVirtManager","kHost","kStorageDomain","kVNicProfile","kIAMUser","kRegion","kAvailabilityZone","kEC2Instance","kVPC","kInstanceType","kKeyPair","kRDSOptionGroup","kRDSParameterGroup","kRDSInstance","kRDSSubnet","kRDSTag","kAuroraTag","kAuroraCluster","kAccount","kSubTaskPermit","kS3Bucket","kS3Tag","kKmsKey","kRDSPostgresDb","kAuroraClusterPostgresDb","kProject","kLabel","kMetadata","kVPCConnector","kPrismCentral","kOtherHypervisorCluster","kZone","kMountPoint","kStorageArray","kFileSystem","kContainer","kFilesystem","kFileset","kPureProtectionGroup","kVolumeGroup","kStoragePool","kViewBox","kView","kWindowsCluster","kOracleRACCluster","kOracleAPCluster","kUnixCluster","kService","kPVC","kPersistentVolumeClaim","kPersistentVolume","kRootContainer","kDAGRootContainer","kExchangeNode","kExchangeDAGDatabaseCopy","kExchangeStandaloneDatabase","kExchangeDAG","kExchangeDAGDatabase","kDomainController","kInstance","kAAG","kAAGRootContainer","kAAGDatabase","kRACRootContainer","kTableSpace","kPDB","kObject","kSapHanaCluster","kSapHanaSID","kSapHanaDatabase","kOrg","kAppInstance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectSummaryTypeObjectTypePropEnum = append(objectSummaryTypeObjectTypePropEnum, v)
	}
}

// property enum
func (m *ObjectSummary) validateObjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectSummaryTypeObjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectSummary) validateObjectType(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectTypeEnum("objectType", "body", *m.ObjectType); err != nil {
		return err
	}

	return nil
}

var objectSummaryTypeProtectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAgent","kNative","kSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsS3","kAwsRDSPostgresBackup","kAwsAuroraPostgres","kAwsRDSPostgres","kAzureSQL","kFile","kVolume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectSummaryTypeProtectionTypePropEnum = append(objectSummaryTypeProtectionTypePropEnum, v)
	}
}

// property enum
func (m *ObjectSummary) validateProtectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectSummaryTypeProtectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectSummary) validateProtectionType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtectionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtectionTypeEnum("protectionType", "body", *m.ProtectionType); err != nil {
		return err
	}

	return nil
}

var objectSummaryTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kOther","kHPUX","kVOS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectSummaryTypeOsTypePropEnum = append(objectSummaryTypeOsTypePropEnum, v)
	}
}

// property enum
func (m *ObjectSummary) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectSummaryTypeOsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectSummary) validateOsType(formats strfmt.Registry) error {

	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsTypeEnum("osType", "body", *m.OsType); err != nil {
		return err
	}

	return nil
}

func (m *ObjectSummary) validateVCenterSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.VCenterSummary) { // not required
		return nil
	}

	if m.VCenterSummary != nil {
		if err := m.VCenterSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vCenterSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vCenterSummary")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSummary) validateSharepointSiteSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.SharepointSiteSummary) { // not required
		return nil
	}

	if m.SharepointSiteSummary != nil {
		if err := m.SharepointSiteSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharepointSiteSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharepointSiteSummary")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSummary) validateWindowsClusterSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.WindowsClusterSummary) { // not required
		return nil
	}

	if m.WindowsClusterSummary != nil {
		if err := m.WindowsClusterSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("windowsClusterSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("windowsClusterSummary")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSummary) validateChildObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.ChildObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildObjects); i++ {
		if swag.IsZero(m.ChildObjects[i]) { // not required
			continue
		}

		if m.ChildObjects[i] != nil {
			if err := m.ChildObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this object summary based on the context it is used
func (m *ObjectSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectIdentifier
	if err := m.ObjectIdentifier.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVCenterSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharepointSiteSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWindowsClusterSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChildObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectSummary) contextValidateVCenterSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.VCenterSummary != nil {

		if swag.IsZero(m.VCenterSummary) { // not required
			return nil
		}

		if err := m.VCenterSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vCenterSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vCenterSummary")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSummary) contextValidateSharepointSiteSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.SharepointSiteSummary != nil {

		if swag.IsZero(m.SharepointSiteSummary) { // not required
			return nil
		}

		if err := m.SharepointSiteSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharepointSiteSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharepointSiteSummary")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSummary) contextValidateWindowsClusterSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.WindowsClusterSummary != nil {

		if swag.IsZero(m.WindowsClusterSummary) { // not required
			return nil
		}

		if err := m.WindowsClusterSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("windowsClusterSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("windowsClusterSummary")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectSummary) contextValidateChildObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChildObjects); i++ {

		if m.ChildObjects[i] != nil {

			if swag.IsZero(m.ChildObjects[i]) { // not required
				return nil
			}

			if err := m.ChildObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectSummary) UnmarshalBinary(b []byte) error {
	var res ObjectSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
