// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserQuotaOverrides Specifies a list of user quotas set on the View. These user quotas will override the default View user quota.
//
// swagger:model UserQuotaOverrides
type UserQuotaOverrides struct {

	// Array of UserQuota. Specifies the list of UserQuota for each user.
	// Required: true
	UserQuotas []*UserQuota `json:"userQuotas"`

	// Specifies the pagination cookie.
	Cookie *string `json:"cookie,omitempty"`

	// By default, the overrides specified in userQuotas is treated as delta and the existing overrides will be left untouched. Set this to true, if the existing overrides should be cleared before applying overrides specified in userQuotas.
	OverrideExistingPerUserQuotas *bool `json:"overrideExistingPerUserQuotas,omitempty"`
}

// Validate validates this user quota overrides
func (m *UserQuotaOverrides) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserQuotas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserQuotaOverrides) validateUserQuotas(formats strfmt.Registry) error {

	if err := validate.Required("userQuotas", "body", m.UserQuotas); err != nil {
		return err
	}

	for i := 0; i < len(m.UserQuotas); i++ {
		if swag.IsZero(m.UserQuotas[i]) { // not required
			continue
		}

		if m.UserQuotas[i] != nil {
			if err := m.UserQuotas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userQuotas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userQuotas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user quota overrides based on the context it is used
func (m *UserQuotaOverrides) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserQuotas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserQuotaOverrides) contextValidateUserQuotas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserQuotas); i++ {

		if m.UserQuotas[i] != nil {

			if swag.IsZero(m.UserQuotas[i]) { // not required
				return nil
			}

			if err := m.UserQuotas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userQuotas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userQuotas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserQuotaOverrides) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserQuotaOverrides) UnmarshalBinary(b []byte) error {
	var res UserQuotaOverrides
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
