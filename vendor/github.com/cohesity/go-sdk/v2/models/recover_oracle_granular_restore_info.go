// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverOracleGranularRestoreInfo Recover Oracle Granular Restore Information
//
// Specifies information about list of objects (PDBs) to restore.
//
// swagger:model RecoverOracleGranularRestoreInfo
type RecoverOracleGranularRestoreInfo struct {

	// Specifies type of granular restore.
	// Enum: ["kPDB"]
	GranularityType *string `json:"granularityType,omitempty"`

	// Specifies information about the list of pdbs to be restored.
	PdbRestoreParams *OraclePdbRestoreParams `json:"pdbRestoreParams,omitempty"`
}

// Validate validates this recover oracle granular restore info
func (m *RecoverOracleGranularRestoreInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGranularityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePdbRestoreParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recoverOracleGranularRestoreInfoTypeGranularityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPDB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverOracleGranularRestoreInfoTypeGranularityTypePropEnum = append(recoverOracleGranularRestoreInfoTypeGranularityTypePropEnum, v)
	}
}

const (

	// RecoverOracleGranularRestoreInfoGranularityTypeKPDB captures enum value "kPDB"
	RecoverOracleGranularRestoreInfoGranularityTypeKPDB string = "kPDB"
)

// prop value enum
func (m *RecoverOracleGranularRestoreInfo) validateGranularityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverOracleGranularRestoreInfoTypeGranularityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverOracleGranularRestoreInfo) validateGranularityType(formats strfmt.Registry) error {
	if swag.IsZero(m.GranularityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGranularityTypeEnum("granularityType", "body", *m.GranularityType); err != nil {
		return err
	}

	return nil
}

func (m *RecoverOracleGranularRestoreInfo) validatePdbRestoreParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PdbRestoreParams) { // not required
		return nil
	}

	if m.PdbRestoreParams != nil {
		if err := m.PdbRestoreParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pdbRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pdbRestoreParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover oracle granular restore info based on the context it is used
func (m *RecoverOracleGranularRestoreInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePdbRestoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverOracleGranularRestoreInfo) contextValidatePdbRestoreParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PdbRestoreParams != nil {

		if swag.IsZero(m.PdbRestoreParams) { // not required
			return nil
		}

		if err := m.PdbRestoreParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pdbRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pdbRestoreParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverOracleGranularRestoreInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverOracleGranularRestoreInfo) UnmarshalBinary(b []byte) error {
	var res RecoverOracleGranularRestoreInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
