// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseEntityInfo Object details about Oracle database entity info.
//
// swagger:model DatabaseEntityInfo
type DatabaseEntityInfo struct {

	// Specifies the information about container database.
	ContainerDatabaseInfo *ContainerDatabaseInfo `json:"containerDatabaseInfo,omitempty"`

	// Specifies the dataguard information about container database.
	DataGuardInfo *OracleDataGuardInfo `json:"dataGuardInfo,omitempty"`

	// Specifies database type of oracle database.
	// Enum: ["kSingleInstance","kRACDatabase"]
	DbType *string `json:"dbType,omitempty"`
}

// Validate validates this database entity info
func (m *DatabaseEntityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerDatabaseInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataGuardInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseEntityInfo) validateContainerDatabaseInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ContainerDatabaseInfo) { // not required
		return nil
	}

	if m.ContainerDatabaseInfo != nil {
		if err := m.ContainerDatabaseInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerDatabaseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("containerDatabaseInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseEntityInfo) validateDataGuardInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DataGuardInfo) { // not required
		return nil
	}

	if m.DataGuardInfo != nil {
		if err := m.DataGuardInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataGuardInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataGuardInfo")
			}
			return err
		}
	}

	return nil
}

var databaseEntityInfoTypeDbTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSingleInstance","kRACDatabase"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseEntityInfoTypeDbTypePropEnum = append(databaseEntityInfoTypeDbTypePropEnum, v)
	}
}

const (

	// DatabaseEntityInfoDbTypeKSingleInstance captures enum value "kSingleInstance"
	DatabaseEntityInfoDbTypeKSingleInstance string = "kSingleInstance"

	// DatabaseEntityInfoDbTypeKRACDatabase captures enum value "kRACDatabase"
	DatabaseEntityInfoDbTypeKRACDatabase string = "kRACDatabase"
)

// prop value enum
func (m *DatabaseEntityInfo) validateDbTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, databaseEntityInfoTypeDbTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DatabaseEntityInfo) validateDbType(formats strfmt.Registry) error {
	if swag.IsZero(m.DbType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDbTypeEnum("dbType", "body", *m.DbType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this database entity info based on the context it is used
func (m *DatabaseEntityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContainerDatabaseInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataGuardInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseEntityInfo) contextValidateContainerDatabaseInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ContainerDatabaseInfo != nil {

		if swag.IsZero(m.ContainerDatabaseInfo) { // not required
			return nil
		}

		if err := m.ContainerDatabaseInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerDatabaseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("containerDatabaseInfo")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseEntityInfo) contextValidateDataGuardInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DataGuardInfo != nil {

		if swag.IsZero(m.DataGuardInfo) { // not required
			return nil
		}

		if err := m.DataGuardInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataGuardInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataGuardInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseEntityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseEntityInfo) UnmarshalBinary(b []byte) error {
	var res DatabaseEntityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
