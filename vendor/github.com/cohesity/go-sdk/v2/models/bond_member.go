// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BondMember Bond member details.
//
// swagger:model BondMember
type BondMember struct {

	// Name of the bond secondary.
	Name *string `json:"name,omitempty"`

	// MAC address of the bond secondary.
	MacAddress *string `json:"macAddress,omitempty"`

	// Speed of the bond secondary.
	// Enum: ["1Gbit/s","10Gbit/s","25Gbit/s","40Gbit/s","100Gbit/s","Unknown"]
	Speed *string `json:"speed,omitempty"`

	// Bond secondary link state.
	// Enum: ["Up","Down"]
	LinkState *string `json:"linkState,omitempty"`

	// Specifies whether or not this is a active secondary. This is only valid in ActiveBackup bonding mode.
	ActiveSecondary *bool `json:"activeSecondary,omitempty"`

	// Slot information of the bond secondary.
	Slot *string `json:"slot,omitempty"`

	// Bond secondary interface stats.
	Stats *InterfaceStats `json:"stats,omitempty"`

	// Uplink switch information of bond secondary.
	UplinkSwitch *UplinkSwitch `json:"uplinkSwitch,omitempty"`
}

// Validate validates this bond member
func (m *BondMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUplinkSwitch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bondMemberTypeSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1Gbit/s","10Gbit/s","25Gbit/s","40Gbit/s","100Gbit/s","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bondMemberTypeSpeedPropEnum = append(bondMemberTypeSpeedPropEnum, v)
	}
}

const (

	// BondMemberSpeedNr1Gbits captures enum value "1Gbit/s"
	BondMemberSpeedNr1Gbits string = "1Gbit/s"

	// BondMemberSpeedNr10Gbits captures enum value "10Gbit/s"
	BondMemberSpeedNr10Gbits string = "10Gbit/s"

	// BondMemberSpeedNr25Gbits captures enum value "25Gbit/s"
	BondMemberSpeedNr25Gbits string = "25Gbit/s"

	// BondMemberSpeedNr40Gbits captures enum value "40Gbit/s"
	BondMemberSpeedNr40Gbits string = "40Gbit/s"

	// BondMemberSpeedNr100Gbits captures enum value "100Gbit/s"
	BondMemberSpeedNr100Gbits string = "100Gbit/s"

	// BondMemberSpeedUnknown captures enum value "Unknown"
	BondMemberSpeedUnknown string = "Unknown"
)

// prop value enum
func (m *BondMember) validateSpeedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bondMemberTypeSpeedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BondMember) validateSpeed(formats strfmt.Registry) error {
	if swag.IsZero(m.Speed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSpeedEnum("speed", "body", *m.Speed); err != nil {
		return err
	}

	return nil
}

var bondMemberTypeLinkStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Up","Down"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bondMemberTypeLinkStatePropEnum = append(bondMemberTypeLinkStatePropEnum, v)
	}
}

const (

	// BondMemberLinkStateUp captures enum value "Up"
	BondMemberLinkStateUp string = "Up"

	// BondMemberLinkStateDown captures enum value "Down"
	BondMemberLinkStateDown string = "Down"
)

// prop value enum
func (m *BondMember) validateLinkStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bondMemberTypeLinkStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BondMember) validateLinkState(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLinkStateEnum("linkState", "body", *m.LinkState); err != nil {
		return err
	}

	return nil
}

func (m *BondMember) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *BondMember) validateUplinkSwitch(formats strfmt.Registry) error {
	if swag.IsZero(m.UplinkSwitch) { // not required
		return nil
	}

	if m.UplinkSwitch != nil {
		if err := m.UplinkSwitch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uplinkSwitch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uplinkSwitch")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bond member based on the context it is used
func (m *BondMember) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUplinkSwitch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BondMember) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *BondMember) contextValidateUplinkSwitch(ctx context.Context, formats strfmt.Registry) error {

	if m.UplinkSwitch != nil {

		if swag.IsZero(m.UplinkSwitch) { // not required
			return nil
		}

		if err := m.UplinkSwitch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uplinkSwitch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uplinkSwitch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BondMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BondMember) UnmarshalBinary(b []byte) error {
	var res BondMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
