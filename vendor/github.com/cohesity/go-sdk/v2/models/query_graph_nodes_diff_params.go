// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryGraphNodesDiffParams Specify the query params to determine difference of graph nodes between two snapshots for a given session id.
//
// swagger:model QueryGraphNodesDiffParams
type QueryGraphNodesDiffParams struct {

	// Specifies the id of the session for which diff of nodes has to be fetched.
	SessionID *string `json:"sessionId,omitempty"`

	// Specifies the filter params for the node to be fetched.
	NodeFilter struct {
		GraphNodeFilterParams
	} `json:"nodeFilter,omitempty"`

	// Specifies an optional mask to filter only certain kinds of diffs. Supported diff types - Added/Modified/Deleted/Unmodified
	// Unique: true
	DiffTypes []string `json:"diffTypes"`

	// Specifies a cookie which can be passed in by the user in order to retrieve the next page of results.
	PaginationCookie *string `json:"paginationCookie,omitempty"`

	// Specifies the number of objects to be fetched for the specified pagination cookie.
	Count int32 `json:"count,omitempty"`
}

// Validate validates this query graph nodes diff params
func (m *QueryGraphNodesDiffParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiffTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryGraphNodesDiffParams) validateNodeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeFilter) { // not required
		return nil
	}

	return nil
}

var queryGraphNodesDiffParamsDiffTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Added","Modified","Deleted","Unmodified"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryGraphNodesDiffParamsDiffTypesItemsEnum = append(queryGraphNodesDiffParamsDiffTypesItemsEnum, v)
	}
}

func (m *QueryGraphNodesDiffParams) validateDiffTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queryGraphNodesDiffParamsDiffTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueryGraphNodesDiffParams) validateDiffTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.DiffTypes) { // not required
		return nil
	}

	if err := validate.UniqueItems("diffTypes", "body", m.DiffTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.DiffTypes); i++ {

		// value enum
		if err := m.validateDiffTypesItemsEnum("diffTypes"+"."+strconv.Itoa(i), "body", m.DiffTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this query graph nodes diff params based on the context it is used
func (m *QueryGraphNodesDiffParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryGraphNodesDiffParams) contextValidateNodeFilter(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *QueryGraphNodesDiffParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryGraphNodesDiffParams) UnmarshalBinary(b []byte) error {
	var res QueryGraphNodesDiffParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
