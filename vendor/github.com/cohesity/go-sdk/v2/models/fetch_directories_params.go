// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FetchDirectoriesParams Fetch Directories Parameters
//
// Specifies the parameters required to fetch the subfolders and files of a directory.
//
// swagger:model FetchDirectoriesParams
type FetchDirectoriesParams struct {

	// Specifies the environment.
	// Enum: ["kVMware","kHyperV","kSQL","kView","kRemoteAdapter","kPhysical","kPhysicalFiles","kPure","kIbmFlashSystem","kAzure","kNetapp","kGenericNas","kAcropolis","kIsilon","kGPFS","kKVM","kAWS","kExchange","kOracle","kGCP","kFlashBlade","kO365","kHyperFlex","kKubernetes","kElastifile","kSAPHANA","kUDA","kSfdc","kExperimentalAdapter","kMongoDBPhysical"]
	Environment *string `json:"environment,omitempty"`

	// Specifies the snapshot that we are checking for the directories
	SnapshotID *string `json:"snapshotId,omitempty"`

	// AttemptNum is the attempt number of the run that successfully created the snapshot.
	AttemptNum *int64 `json:"attemptNum,omitempty"`

	// VolumeName is the name of the volume that needs to be browsed. This should match the name returned in VolumeInfo.
	VolumeName *string `json:"volumeName,omitempty"`

	// Id of the Storage Domain if a View is being browsed.
	StorageDomainID *int64 `json:"storageDomainId,omitempty"`

	// Name of the View if a View is being browsed.
	ViewName *string `json:"viewName,omitempty"`

	// DirPath is the full path of the directory whose contents need to be listed.
	// Required: true
	DirPath *string `json:"dirPath"`

	// MaxEntries is the maximum number of entries to return in this call. If there are more entries, server will return a cookie in the response that can be used to continue enumeration from the last call. The default value is 1000 i.e. If no value is specified, 1000 entries are returned.
	MaxEntries *int32 `json:"maxEntries,omitempty"`

	// VolumeInfoCookie is the cookie to be passed in calls to reading a directory for this volume.
	VolumeInfoCookie *uint64 `json:"volumeInfoCookie,omitempty"`

	// Cookie is used for paginating results. If the response returned partial results, it will also return a cookie that can be used to resume the listing. The value returned in response should be passed in the next call. The first call should not have this value set. Note that this value is only a suggestion and server is free to do a short read (return fewer entries along with a cookie). Please note that this should be used when browsing indexed data and does not apply otherwise.
	Cookie *string `json:"cookie,omitempty"`

	// Specifies whether file stat data is returned.
	IncludeStatFileEntries *bool `json:"includeStatFileEntries,omitempty"`

	// Specifies whether to use indexed data for browse.
	BrowseIndexedData *bool `json:"browseIndexedData,omitempty"`

	// PointInTimeUsecs is the time to read directory from previously available snapshot before this time.
	PointInTimeUsecs *int64 `json:"pointInTimeUsecs,omitempty"`
}

// Validate validates this fetch directories params
func (m *FetchDirectoriesParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirPath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fetchDirectoriesParamsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kRemoteAdapter","kPhysical","kPhysicalFiles","kPure","kIbmFlashSystem","kAzure","kNetapp","kGenericNas","kAcropolis","kIsilon","kGPFS","kKVM","kAWS","kExchange","kOracle","kGCP","kFlashBlade","kO365","kHyperFlex","kKubernetes","kElastifile","kSAPHANA","kUDA","kSfdc","kExperimentalAdapter","kMongoDBPhysical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fetchDirectoriesParamsTypeEnvironmentPropEnum = append(fetchDirectoriesParamsTypeEnvironmentPropEnum, v)
	}
}

const (

	// FetchDirectoriesParamsEnvironmentKVMware captures enum value "kVMware"
	FetchDirectoriesParamsEnvironmentKVMware string = "kVMware"

	// FetchDirectoriesParamsEnvironmentKHyperV captures enum value "kHyperV"
	FetchDirectoriesParamsEnvironmentKHyperV string = "kHyperV"

	// FetchDirectoriesParamsEnvironmentKSQL captures enum value "kSQL"
	FetchDirectoriesParamsEnvironmentKSQL string = "kSQL"

	// FetchDirectoriesParamsEnvironmentKView captures enum value "kView"
	FetchDirectoriesParamsEnvironmentKView string = "kView"

	// FetchDirectoriesParamsEnvironmentKRemoteAdapter captures enum value "kRemoteAdapter"
	FetchDirectoriesParamsEnvironmentKRemoteAdapter string = "kRemoteAdapter"

	// FetchDirectoriesParamsEnvironmentKPhysical captures enum value "kPhysical"
	FetchDirectoriesParamsEnvironmentKPhysical string = "kPhysical"

	// FetchDirectoriesParamsEnvironmentKPhysicalFiles captures enum value "kPhysicalFiles"
	FetchDirectoriesParamsEnvironmentKPhysicalFiles string = "kPhysicalFiles"

	// FetchDirectoriesParamsEnvironmentKPure captures enum value "kPure"
	FetchDirectoriesParamsEnvironmentKPure string = "kPure"

	// FetchDirectoriesParamsEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	FetchDirectoriesParamsEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// FetchDirectoriesParamsEnvironmentKAzure captures enum value "kAzure"
	FetchDirectoriesParamsEnvironmentKAzure string = "kAzure"

	// FetchDirectoriesParamsEnvironmentKNetapp captures enum value "kNetapp"
	FetchDirectoriesParamsEnvironmentKNetapp string = "kNetapp"

	// FetchDirectoriesParamsEnvironmentKGenericNas captures enum value "kGenericNas"
	FetchDirectoriesParamsEnvironmentKGenericNas string = "kGenericNas"

	// FetchDirectoriesParamsEnvironmentKAcropolis captures enum value "kAcropolis"
	FetchDirectoriesParamsEnvironmentKAcropolis string = "kAcropolis"

	// FetchDirectoriesParamsEnvironmentKIsilon captures enum value "kIsilon"
	FetchDirectoriesParamsEnvironmentKIsilon string = "kIsilon"

	// FetchDirectoriesParamsEnvironmentKGPFS captures enum value "kGPFS"
	FetchDirectoriesParamsEnvironmentKGPFS string = "kGPFS"

	// FetchDirectoriesParamsEnvironmentKKVM captures enum value "kKVM"
	FetchDirectoriesParamsEnvironmentKKVM string = "kKVM"

	// FetchDirectoriesParamsEnvironmentKAWS captures enum value "kAWS"
	FetchDirectoriesParamsEnvironmentKAWS string = "kAWS"

	// FetchDirectoriesParamsEnvironmentKExchange captures enum value "kExchange"
	FetchDirectoriesParamsEnvironmentKExchange string = "kExchange"

	// FetchDirectoriesParamsEnvironmentKOracle captures enum value "kOracle"
	FetchDirectoriesParamsEnvironmentKOracle string = "kOracle"

	// FetchDirectoriesParamsEnvironmentKGCP captures enum value "kGCP"
	FetchDirectoriesParamsEnvironmentKGCP string = "kGCP"

	// FetchDirectoriesParamsEnvironmentKFlashBlade captures enum value "kFlashBlade"
	FetchDirectoriesParamsEnvironmentKFlashBlade string = "kFlashBlade"

	// FetchDirectoriesParamsEnvironmentKO365 captures enum value "kO365"
	FetchDirectoriesParamsEnvironmentKO365 string = "kO365"

	// FetchDirectoriesParamsEnvironmentKHyperFlex captures enum value "kHyperFlex"
	FetchDirectoriesParamsEnvironmentKHyperFlex string = "kHyperFlex"

	// FetchDirectoriesParamsEnvironmentKKubernetes captures enum value "kKubernetes"
	FetchDirectoriesParamsEnvironmentKKubernetes string = "kKubernetes"

	// FetchDirectoriesParamsEnvironmentKElastifile captures enum value "kElastifile"
	FetchDirectoriesParamsEnvironmentKElastifile string = "kElastifile"

	// FetchDirectoriesParamsEnvironmentKSAPHANA captures enum value "kSAPHANA"
	FetchDirectoriesParamsEnvironmentKSAPHANA string = "kSAPHANA"

	// FetchDirectoriesParamsEnvironmentKUDA captures enum value "kUDA"
	FetchDirectoriesParamsEnvironmentKUDA string = "kUDA"

	// FetchDirectoriesParamsEnvironmentKSfdc captures enum value "kSfdc"
	FetchDirectoriesParamsEnvironmentKSfdc string = "kSfdc"

	// FetchDirectoriesParamsEnvironmentKExperimentalAdapter captures enum value "kExperimentalAdapter"
	FetchDirectoriesParamsEnvironmentKExperimentalAdapter string = "kExperimentalAdapter"

	// FetchDirectoriesParamsEnvironmentKMongoDBPhysical captures enum value "kMongoDBPhysical"
	FetchDirectoriesParamsEnvironmentKMongoDBPhysical string = "kMongoDBPhysical"
)

// prop value enum
func (m *FetchDirectoriesParams) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fetchDirectoriesParamsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FetchDirectoriesParams) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *FetchDirectoriesParams) validateDirPath(formats strfmt.Registry) error {

	if err := validate.Required("dirPath", "body", m.DirPath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this fetch directories params based on context it is used
func (m *FetchDirectoriesParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FetchDirectoriesParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FetchDirectoriesParams) UnmarshalBinary(b []byte) error {
	var res FetchDirectoriesParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
