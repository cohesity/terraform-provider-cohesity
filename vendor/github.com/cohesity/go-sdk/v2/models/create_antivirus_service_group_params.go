// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAntivirusServiceGroupParams Specifies the parameters to create an Antivirus Service group.
//
// swagger:model CreateAntivirusServiceGroupParams
type CreateAntivirusServiceGroupParams struct {

	// Specifies the Antivirus Service group name.
	// Required: true
	Name *string `json:"name"`

	// Specifies a list of Antivirus Services for this group.
	// Required: true
	// Min Items: 1
	AntivirusServices []*AntivirusService `json:"antivirusServices"`

	// This field is currently deprecated. Specifies whether the Antivirus Group is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Specifies the description for the Antivirus Service group.
	Description *string `json:"description,omitempty"`

	// Specifies the state[Enable, Disable] of the group.
	// Enum: ["Enable","Disable"]
	State *string `json:"state,omitempty"`
}

// Validate validates this create antivirus service group params
func (m *CreateAntivirusServiceGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAntivirusServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAntivirusServiceGroupParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateAntivirusServiceGroupParams) validateAntivirusServices(formats strfmt.Registry) error {

	if err := validate.Required("antivirusServices", "body", m.AntivirusServices); err != nil {
		return err
	}

	iAntivirusServicesSize := int64(len(m.AntivirusServices))

	if err := validate.MinItems("antivirusServices", "body", iAntivirusServicesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.AntivirusServices); i++ {
		if swag.IsZero(m.AntivirusServices[i]) { // not required
			continue
		}

		if m.AntivirusServices[i] != nil {
			if err := m.AntivirusServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("antivirusServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("antivirusServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createAntivirusServiceGroupParamsTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enable","Disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createAntivirusServiceGroupParamsTypeStatePropEnum = append(createAntivirusServiceGroupParamsTypeStatePropEnum, v)
	}
}

const (

	// CreateAntivirusServiceGroupParamsStateEnable captures enum value "Enable"
	CreateAntivirusServiceGroupParamsStateEnable string = "Enable"

	// CreateAntivirusServiceGroupParamsStateDisable captures enum value "Disable"
	CreateAntivirusServiceGroupParamsStateDisable string = "Disable"
)

// prop value enum
func (m *CreateAntivirusServiceGroupParams) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createAntivirusServiceGroupParamsTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateAntivirusServiceGroupParams) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create antivirus service group params based on the context it is used
func (m *CreateAntivirusServiceGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAntivirusServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAntivirusServiceGroupParams) contextValidateAntivirusServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AntivirusServices); i++ {

		if m.AntivirusServices[i] != nil {

			if swag.IsZero(m.AntivirusServices[i]) { // not required
				return nil
			}

			if err := m.AntivirusServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("antivirusServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("antivirusServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAntivirusServiceGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAntivirusServiceGroupParams) UnmarshalBinary(b []byte) error {
	var res CreateAntivirusServiceGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
