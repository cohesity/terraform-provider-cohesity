// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Schedule Specifies a schedule for actions to be taken.
//
// swagger:model Schedule
type Schedule struct {

	// Specifies the type of schedule for this ScheduleProto.
	// Enum: ["PeriodicTimeWindows","CustomIntervals"]
	ScheduleType *string `json:"scheduleType,omitempty"`

	//  Specifies the time range within the days of the week.
	PeriodicTimeWindows []*TimeWindow `json:"periodicTimeWindows"`

	//  Specifies the time ranges in usecs.
	TimeRanges []*TimeRangeUsecs `json:"timeRanges"`

	// Specifies the timezone of the user of this ScheduleProto. The timezones have unique names of the form 'Area/Location'.
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this schedule
func (m *Schedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScheduleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodicTimeWindows(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeRanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scheduleTypeScheduleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PeriodicTimeWindows","CustomIntervals"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleTypeScheduleTypePropEnum = append(scheduleTypeScheduleTypePropEnum, v)
	}
}

const (

	// ScheduleScheduleTypePeriodicTimeWindows captures enum value "PeriodicTimeWindows"
	ScheduleScheduleTypePeriodicTimeWindows string = "PeriodicTimeWindows"

	// ScheduleScheduleTypeCustomIntervals captures enum value "CustomIntervals"
	ScheduleScheduleTypeCustomIntervals string = "CustomIntervals"
)

// prop value enum
func (m *Schedule) validateScheduleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleTypeScheduleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Schedule) validateScheduleType(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateScheduleTypeEnum("scheduleType", "body", *m.ScheduleType); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) validatePeriodicTimeWindows(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodicTimeWindows) { // not required
		return nil
	}

	for i := 0; i < len(m.PeriodicTimeWindows); i++ {
		if swag.IsZero(m.PeriodicTimeWindows[i]) { // not required
			continue
		}

		if m.PeriodicTimeWindows[i] != nil {
			if err := m.PeriodicTimeWindows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("periodicTimeWindows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("periodicTimeWindows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Schedule) validateTimeRanges(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRanges) { // not required
		return nil
	}

	for i := 0; i < len(m.TimeRanges); i++ {
		if swag.IsZero(m.TimeRanges[i]) { // not required
			continue
		}

		if m.TimeRanges[i] != nil {
			if err := m.TimeRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this schedule based on the context it is used
func (m *Schedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePeriodicTimeWindows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeRanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schedule) contextValidatePeriodicTimeWindows(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PeriodicTimeWindows); i++ {

		if m.PeriodicTimeWindows[i] != nil {

			if swag.IsZero(m.PeriodicTimeWindows[i]) { // not required
				return nil
			}

			if err := m.PeriodicTimeWindows[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("periodicTimeWindows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("periodicTimeWindows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Schedule) contextValidateTimeRanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TimeRanges); i++ {

		if m.TimeRanges[i] != nil {

			if swag.IsZero(m.TimeRanges[i]) { // not required
				return nil
			}

			if err := m.TimeRanges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Schedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Schedule) UnmarshalBinary(b []byte) error {
	var res Schedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
