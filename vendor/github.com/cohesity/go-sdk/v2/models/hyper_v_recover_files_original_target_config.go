// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HyperVRecoverFilesOriginalTargetConfig HyperV Recover Files Original Target Config.
//
// Specifies the configuration for recovering files and folders to the original target.
//
// swagger:model HyperVRecoverFilesOriginalTargetConfig
type HyperVRecoverFilesOriginalTargetConfig struct {

	// Specifies whether to recover files and folders to the original path location. If false, alternatePath must be specified.
	// Required: true
	RecoverToOriginalPath *bool `json:"recoverToOriginalPath"`

	// Specifies the alternate path location to recover files to.
	AlternatePath *string `json:"alternatePath,omitempty"`

	// Specifies the credentials for the target VM.
	// Required: true
	TargetVMCredentials *Credentials `json:"targetVmCredentials"`
}

// Validate validates this hyper v recover files original target config
func (m *HyperVRecoverFilesOriginalTargetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoverToOriginalPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetVMCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperVRecoverFilesOriginalTargetConfig) validateRecoverToOriginalPath(formats strfmt.Registry) error {

	if err := validate.Required("recoverToOriginalPath", "body", m.RecoverToOriginalPath); err != nil {
		return err
	}

	return nil
}

func (m *HyperVRecoverFilesOriginalTargetConfig) validateTargetVMCredentials(formats strfmt.Registry) error {

	if err := validate.Required("targetVmCredentials", "body", m.TargetVMCredentials); err != nil {
		return err
	}

	if m.TargetVMCredentials != nil {
		if err := m.TargetVMCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVmCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVmCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hyper v recover files original target config based on the context it is used
func (m *HyperVRecoverFilesOriginalTargetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetVMCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperVRecoverFilesOriginalTargetConfig) contextValidateTargetVMCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetVMCredentials != nil {

		if err := m.TargetVMCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVmCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVmCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperVRecoverFilesOriginalTargetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperVRecoverFilesOriginalTargetConfig) UnmarshalBinary(b []byte) error {
	var res HyperVRecoverFilesOriginalTargetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
