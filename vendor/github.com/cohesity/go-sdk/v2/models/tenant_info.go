// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantInfo Tenant
//
// Description of a Tenant and it's properties.
//
// swagger:model TenantInfo
type TenantInfo struct {

	// The tenant id.
	ID *string `json:"id,omitempty"`

	// Name of the Tenant.
	Name *string `json:"name,omitempty"`

	// Description about the tenant.
	Description *string `json:"description,omitempty"`

	// Current Status of the Tenant.
	// Enum: ["Active","Inactive","MarkedForDeletion","Deleted"]
	Status *string `json:"status,omitempty"`

	// network
	Network *TenantNetwork `json:"network,omitempty"`

	// Epoch time when tenant was created.
	// Read Only: true
	CreatedAtTimeMsecs *int64 `json:"createdAtTimeMsecs,omitempty"`

	// Epoch time when tenant was last updated.
	// Read Only: true
	LastUpdatedAtTimeMsecs *int64 `json:"lastUpdatedAtTimeMsecs,omitempty"`

	// Epoch time when tenant was last updated.
	// Read Only: true
	DeletedAtTimeMsecs *int64 `json:"deletedAtTimeMsecs,omitempty"`

	// Flag to indicate if tenant is managed on helios
	IsManagedOnHelios *bool `json:"isManagedOnHelios,omitempty"`
}

// Validate validates this tenant info
func (m *TenantInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tenantInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive","MarkedForDeletion","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantInfoTypeStatusPropEnum = append(tenantInfoTypeStatusPropEnum, v)
	}
}

const (

	// TenantInfoStatusActive captures enum value "Active"
	TenantInfoStatusActive string = "Active"

	// TenantInfoStatusInactive captures enum value "Inactive"
	TenantInfoStatusInactive string = "Inactive"

	// TenantInfoStatusMarkedForDeletion captures enum value "MarkedForDeletion"
	TenantInfoStatusMarkedForDeletion string = "MarkedForDeletion"

	// TenantInfoStatusDeleted captures enum value "Deleted"
	TenantInfoStatusDeleted string = "Deleted"
)

// prop value enum
func (m *TenantInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TenantInfo) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tenant info based on the context it is used
func (m *TenantInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAtTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdatedAtTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletedAtTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantInfo) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {

		if swag.IsZero(m.Network) { // not required
			return nil
		}

		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *TenantInfo) contextValidateCreatedAtTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAtTimeMsecs", "body", m.CreatedAtTimeMsecs); err != nil {
		return err
	}

	return nil
}

func (m *TenantInfo) contextValidateLastUpdatedAtTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastUpdatedAtTimeMsecs", "body", m.LastUpdatedAtTimeMsecs); err != nil {
		return err
	}

	return nil
}

func (m *TenantInfo) contextValidateDeletedAtTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deletedAtTimeMsecs", "body", m.DeletedAtTimeMsecs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenantInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantInfo) UnmarshalBinary(b []byte) error {
	var res TenantInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
