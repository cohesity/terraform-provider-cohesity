// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IbmTenantMetadataParams IbmTenantMetadataParams
//
// Specifies the additional metadata for the tenant that is specifically set by the external vendor of type 'IBM'.
//
// swagger:model IbmTenantMetadataParams
type IbmTenantMetadataParams struct {

	// Specifies the unique identifier of the IBM's account ID.
	AccountID *string `json:"accountId,omitempty"`

	// Specifies the current liveness mode of the tenant. This mode may change based on AZ failures when vendor chooses to failover or failback the tenants to other AZs.
	// Enum: ["Active","Standby","Suspend"]
	LivenessMode *string `json:"livenessMode,omitempty"`

	// Specifies the current ownership mode for the tenant. The ownership of the tenant represents the active role for functioning of the tenant.
	// Enum: ["Primary","Secondary"]
	OwnershipMode *string `json:"ownershipMode,omitempty"`

	// Specifies the unique CRN associated with the tenant.
	Crn *string `json:"crn,omitempty"`

	// Specifies the Resource Group ID associated with the tenant.
	ResourceGroupID *string `json:"resourceGroupId,omitempty"`

	// Specifies the metadata for metrics configuration. The metadata defined here will be used by cluster to send the usgae metrics to IBM cloud metering service for calculating the tenant billing.
	MetricsConfig *IbmTenantMetricsConfig `json:"metricsConfig,omitempty"`

	// Specifies the Plan Id associated with the tenant. This field is introduced for tracking purposes inside IBM enviournment.
	PlanID *string `json:"planId,omitempty"`

	// Specifies the Resource Instance ID associated with the tenant. This field is introduced for tracking purposes inside IBM enviournment.
	ResourceInstanceID *string `json:"resourceInstanceId,omitempty"`

	// Specifies the list of custom properties associated with the tenant. External vendors can choose to set any properties inside following list. Note that the fields set inside the following will not be available for direct filtering. API callers should make sure that no sensitive information such as passwords is sent in these fields.
	CustomProperties []*ExternalVendorCustomProperties `json:"customProperties"`
}

// Validate validates this ibm tenant metadata params
func (m *IbmTenantMetadataParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLivenessMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnershipMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricsConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ibmTenantMetadataParamsTypeLivenessModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Standby","Suspend"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ibmTenantMetadataParamsTypeLivenessModePropEnum = append(ibmTenantMetadataParamsTypeLivenessModePropEnum, v)
	}
}

const (

	// IbmTenantMetadataParamsLivenessModeActive captures enum value "Active"
	IbmTenantMetadataParamsLivenessModeActive string = "Active"

	// IbmTenantMetadataParamsLivenessModeStandby captures enum value "Standby"
	IbmTenantMetadataParamsLivenessModeStandby string = "Standby"

	// IbmTenantMetadataParamsLivenessModeSuspend captures enum value "Suspend"
	IbmTenantMetadataParamsLivenessModeSuspend string = "Suspend"
)

// prop value enum
func (m *IbmTenantMetadataParams) validateLivenessModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ibmTenantMetadataParamsTypeLivenessModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IbmTenantMetadataParams) validateLivenessMode(formats strfmt.Registry) error {
	if swag.IsZero(m.LivenessMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateLivenessModeEnum("livenessMode", "body", *m.LivenessMode); err != nil {
		return err
	}

	return nil
}

var ibmTenantMetadataParamsTypeOwnershipModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Primary","Secondary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ibmTenantMetadataParamsTypeOwnershipModePropEnum = append(ibmTenantMetadataParamsTypeOwnershipModePropEnum, v)
	}
}

const (

	// IbmTenantMetadataParamsOwnershipModePrimary captures enum value "Primary"
	IbmTenantMetadataParamsOwnershipModePrimary string = "Primary"

	// IbmTenantMetadataParamsOwnershipModeSecondary captures enum value "Secondary"
	IbmTenantMetadataParamsOwnershipModeSecondary string = "Secondary"
)

// prop value enum
func (m *IbmTenantMetadataParams) validateOwnershipModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ibmTenantMetadataParamsTypeOwnershipModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IbmTenantMetadataParams) validateOwnershipMode(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnershipMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateOwnershipModeEnum("ownershipMode", "body", *m.OwnershipMode); err != nil {
		return err
	}

	return nil
}

func (m *IbmTenantMetadataParams) validateMetricsConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricsConfig) { // not required
		return nil
	}

	if m.MetricsConfig != nil {
		if err := m.MetricsConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metricsConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metricsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IbmTenantMetadataParams) validateCustomProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomProperties); i++ {
		if swag.IsZero(m.CustomProperties[i]) { // not required
			continue
		}

		if m.CustomProperties[i] != nil {
			if err := m.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ibm tenant metadata params based on the context it is used
func (m *IbmTenantMetadataParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetricsConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbmTenantMetadataParams) contextValidateMetricsConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricsConfig != nil {

		if swag.IsZero(m.MetricsConfig) { // not required
			return nil
		}

		if err := m.MetricsConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metricsConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metricsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IbmTenantMetadataParams) contextValidateCustomProperties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomProperties); i++ {

		if m.CustomProperties[i] != nil {

			if swag.IsZero(m.CustomProperties[i]) { // not required
				return nil
			}

			if err := m.CustomProperties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IbmTenantMetadataParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbmTenantMetadataParams) UnmarshalBinary(b []byte) error {
	var res IbmTenantMetadataParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
