// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TieringInfo Specifies the data tiering task details.
//
// swagger:model TieringInfo
type TieringInfo struct {

	// Specifies the progress of data tiering task.
	Progress *ProgressSummary `json:"progress,omitempty"`

	// Status of the analysis run.
	// 'Running' indicates that the run is still running.
	// 'Canceled' indicates that the run has been canceled.
	// 'Canceling' indicates that the run is in the process of being
	//  canceled.
	// 'Failed' indicates that the run has failed.
	// 'Missed' indicates that the run was unable to take place at the
	//  scheduled time because the previous run was still happening.
	// 'Succeeded' indicates that the run has finished successfully.
	// 'SucceededWithWarning' indicates that the run finished
	//  successfully, but there were some warning messages.
	// 'OnHold' indicates that the run has On hold.
	// 'Skipped' indicates that the run was skipped.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]
	Status *string `json:"status,omitempty"`

	// Specifies the stats of data tiering task.
	Stats *DataTieringTaskStats `json:"stats,omitempty"`
}

// Validate validates this tiering info
func (m *TieringInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TieringInfo) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if m.Progress != nil {
		if err := m.Progress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

var tieringInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tieringInfoTypeStatusPropEnum = append(tieringInfoTypeStatusPropEnum, v)
	}
}

const (

	// TieringInfoStatusAccepted captures enum value "Accepted"
	TieringInfoStatusAccepted string = "Accepted"

	// TieringInfoStatusRunning captures enum value "Running"
	TieringInfoStatusRunning string = "Running"

	// TieringInfoStatusCanceled captures enum value "Canceled"
	TieringInfoStatusCanceled string = "Canceled"

	// TieringInfoStatusCanceling captures enum value "Canceling"
	TieringInfoStatusCanceling string = "Canceling"

	// TieringInfoStatusFailed captures enum value "Failed"
	TieringInfoStatusFailed string = "Failed"

	// TieringInfoStatusMissed captures enum value "Missed"
	TieringInfoStatusMissed string = "Missed"

	// TieringInfoStatusSucceeded captures enum value "Succeeded"
	TieringInfoStatusSucceeded string = "Succeeded"

	// TieringInfoStatusSucceededWithWarning captures enum value "SucceededWithWarning"
	TieringInfoStatusSucceededWithWarning string = "SucceededWithWarning"

	// TieringInfoStatusOnHold captures enum value "OnHold"
	TieringInfoStatusOnHold string = "OnHold"

	// TieringInfoStatusFinalizing captures enum value "Finalizing"
	TieringInfoStatusFinalizing string = "Finalizing"

	// TieringInfoStatusSkipped captures enum value "Skipped"
	TieringInfoStatusSkipped string = "Skipped"

	// TieringInfoStatusLegalHold captures enum value "LegalHold"
	TieringInfoStatusLegalHold string = "LegalHold"
)

// prop value enum
func (m *TieringInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tieringInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TieringInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TieringInfo) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tiering info based on the context it is used
func (m *TieringInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TieringInfo) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	if m.Progress != nil {

		if swag.IsZero(m.Progress) { // not required
			return nil
		}

		if err := m.Progress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

func (m *TieringInfo) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TieringInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TieringInfo) UnmarshalBinary(b []byte) error {
	var res TieringInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
