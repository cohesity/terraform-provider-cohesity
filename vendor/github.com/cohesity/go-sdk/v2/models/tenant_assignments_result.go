// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TenantAssignmentsResult Result of attempted tenant assignments
//
// swagger:model TenantAssignmentsResult
type TenantAssignmentsResult struct {

	// storage domains
	StorageDomains TenantAssignmentTypeIntegerID `json:"storageDomains,omitempty"`

	// objects
	Objects TenantAssignmentTypeIntegerID `json:"objects,omitempty"`

	// vlans
	Vlans TenantAssignmentTypeStringID `json:"vlans,omitempty"`

	// views
	Views TenantAssignmentTypeIntegerID `json:"views,omitempty"`

	// policies
	Policies TenantAssignmentTypeStringID `json:"policies,omitempty"`
}

// Validate validates this tenant assignments result
func (m *TenantAssignmentsResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViews(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantAssignmentsResult) validateStorageDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageDomains) { // not required
		return nil
	}

	if err := m.StorageDomains.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storageDomains")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storageDomains")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentsResult) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	if err := m.Objects.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("objects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("objects")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentsResult) validateVlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlans) { // not required
		return nil
	}

	if err := m.Vlans.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vlans")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vlans")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentsResult) validateViews(formats strfmt.Registry) error {
	if swag.IsZero(m.Views) { // not required
		return nil
	}

	if err := m.Views.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("views")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("views")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentsResult) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	if err := m.Policies.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policies")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("policies")
		}
		return err
	}

	return nil
}

// ContextValidate validate this tenant assignments result based on the context it is used
func (m *TenantAssignmentsResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViews(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantAssignmentsResult) contextValidateStorageDomains(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StorageDomains.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storageDomains")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storageDomains")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentsResult) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Objects.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("objects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("objects")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentsResult) contextValidateVlans(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Vlans.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vlans")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vlans")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentsResult) contextValidateViews(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Views.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("views")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("views")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentsResult) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Policies.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policies")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("policies")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenantAssignmentsResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantAssignmentsResult) UnmarshalBinary(b []byte) error {
	var res TenantAssignmentsResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
