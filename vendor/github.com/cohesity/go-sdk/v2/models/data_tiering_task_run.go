// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataTieringTaskRun Specifies the data tiering task run.
//
// swagger:model DataTieringTaskRun
type DataTieringTaskRun struct {

	// Specifies the id of the data tiering task run.
	ID *string `json:"id,omitempty"`

	// Specifies the start time of task run in Unix epoch Timestamp(in microseconds).
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the end time of task run in Unix epoch Timestamp(in microseconds).
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the data tiering tiering task details.
	TieringInfo *TieringInfo `json:"tieringInfo,omitempty"`
}

// Validate validates this data tiering task run
func (m *DataTieringTaskRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTieringInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringTaskRun) validateTieringInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TieringInfo) { // not required
		return nil
	}

	if m.TieringInfo != nil {
		if err := m.TieringInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tieringInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tieringInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data tiering task run based on the context it is used
func (m *DataTieringTaskRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTieringInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringTaskRun) contextValidateTieringInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.TieringInfo != nil {

		if swag.IsZero(m.TieringInfo) { // not required
			return nil
		}

		if err := m.TieringInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tieringInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tieringInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTieringTaskRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTieringTaskRun) UnmarshalBinary(b []byte) error {
	var res DataTieringTaskRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
