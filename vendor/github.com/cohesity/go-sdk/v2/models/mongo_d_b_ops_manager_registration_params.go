// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MongoDBOpsManagerRegistrationParams Register MongoDB Ops Manager request parameters.
//
// Specifies parameters to register MongoDB Ops Manager.
//
// swagger:model MongoDBOpsManagerRegistrationParams
type MongoDBOpsManagerRegistrationParams struct {

	// Specify the MongoDB Ops Manager hostname or IP address.
	// Required: true
	Hostname *string `json:"hostname"`

	// Specifies port for the connection.
	// Required: true
	Port *int32 `json:"port"`

	// Set to true if connection to MongoDB has to be over SSL.
	// Required: true
	IsSSlRequired *bool `json:"isSSlRequired"`

	// Specifies the public key for connection.
	// Required: true
	PublicKey *string `json:"publicKey"`

	// Specifies the private key for connection.
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// Specifies the CA certificate to enable SSL communication with Ops manager.
	CaCertificate *string `json:"caCertificate,omitempty"`
}

// Validate validates this mongo d b ops manager registration params
func (m *MongoDBOpsManagerRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSSlRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MongoDBOpsManagerRegistrationParams) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *MongoDBOpsManagerRegistrationParams) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *MongoDBOpsManagerRegistrationParams) validateIsSSlRequired(formats strfmt.Registry) error {

	if err := validate.Required("isSSlRequired", "body", m.IsSSlRequired); err != nil {
		return err
	}

	return nil
}

func (m *MongoDBOpsManagerRegistrationParams) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

func (m *MongoDBOpsManagerRegistrationParams) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mongo d b ops manager registration params based on context it is used
func (m *MongoDBOpsManagerRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MongoDBOpsManagerRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MongoDBOpsManagerRegistrationParams) UnmarshalBinary(b []byte) error {
	var res MongoDBOpsManagerRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
