// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServicesHealthGetResponse "Response containing the overall health status and health status for"
// " each service."
//
// swagger:model ServicesHealthGetResponse
type ServicesHealthGetResponse struct {

	// "The overall health status of the services (e.g., Healthy, Degraded,"
	// " Unhealthy)."
	//
	// Enum: ["Healthy","Degraded","Unhealthy"]
	HealthStatus string `json:"healthStatus,omitempty"`

	// List of services with their respective health statuses.
	Services []*ServiceHealth `json:"services"`
}

// Validate validates this services health get response
func (m *ServicesHealthGetResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var servicesHealthGetResponseTypeHealthStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Healthy","Degraded","Unhealthy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		servicesHealthGetResponseTypeHealthStatusPropEnum = append(servicesHealthGetResponseTypeHealthStatusPropEnum, v)
	}
}

const (

	// ServicesHealthGetResponseHealthStatusHealthy captures enum value "Healthy"
	ServicesHealthGetResponseHealthStatusHealthy string = "Healthy"

	// ServicesHealthGetResponseHealthStatusDegraded captures enum value "Degraded"
	ServicesHealthGetResponseHealthStatusDegraded string = "Degraded"

	// ServicesHealthGetResponseHealthStatusUnhealthy captures enum value "Unhealthy"
	ServicesHealthGetResponseHealthStatusUnhealthy string = "Unhealthy"
)

// prop value enum
func (m *ServicesHealthGetResponse) validateHealthStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, servicesHealthGetResponseTypeHealthStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServicesHealthGetResponse) validateHealthStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthStatusEnum("healthStatus", "body", m.HealthStatus); err != nil {
		return err
	}

	return nil
}

func (m *ServicesHealthGetResponse) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this services health get response based on the context it is used
func (m *ServicesHealthGetResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServicesHealthGetResponse) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {

			if swag.IsZero(m.Services[i]) { // not required
				return nil
			}

			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServicesHealthGetResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServicesHealthGetResponse) UnmarshalBinary(b []byte) error {
	var res ServicesHealthGetResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
