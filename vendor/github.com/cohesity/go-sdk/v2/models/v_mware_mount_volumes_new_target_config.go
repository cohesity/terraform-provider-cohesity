// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMwareMountVolumesNewTargetConfig VMware Mount Volumes New Target Config.
//
// Specifies the configuration for mounting volumes to a new target.
//
// swagger:model VMwareMountVolumesNewTargetConfig
type VMwareMountVolumesNewTargetConfig struct {

	// Specifies the target entity where the volumes are being mounted.
	// Required: true
	MountTarget *RecoverTarget `json:"mountTarget"`

	// Specifies whether the volumes need to be online within the target environment after attaching the disks. For linux VMs, this should always be set to true. For Windows, this is optional. If this is set to true, VMware tools must be installed on the VM. If this is set to false, useExistingAgent and targetCredentials are not needed.
	// Required: true
	BringDisksOnline *bool `json:"bringDisksOnline"`

	// Specifies whether this will use an existing agent on the target vm or will deploy a new agent. This is required if bringDisksOnline is set to true.
	UseExistingAgent *bool `json:"useExistingAgent,omitempty"`

	// Specifies credentials to access the target VM. This is required if bringDisksOnline is set to true and useExistingAgent set to false.
	TargetVMCredentials *Credentials `json:"targetVmCredentials,omitempty"`
}

// Validate validates this v mware mount volumes new target config
func (m *VMwareMountVolumesNewTargetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBringDisksOnline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetVMCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareMountVolumesNewTargetConfig) validateMountTarget(formats strfmt.Registry) error {

	if err := validate.Required("mountTarget", "body", m.MountTarget); err != nil {
		return err
	}

	if m.MountTarget != nil {
		if err := m.MountTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountTarget")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareMountVolumesNewTargetConfig) validateBringDisksOnline(formats strfmt.Registry) error {

	if err := validate.Required("bringDisksOnline", "body", m.BringDisksOnline); err != nil {
		return err
	}

	return nil
}

func (m *VMwareMountVolumesNewTargetConfig) validateTargetVMCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetVMCredentials) { // not required
		return nil
	}

	if m.TargetVMCredentials != nil {
		if err := m.TargetVMCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVmCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVmCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v mware mount volumes new target config based on the context it is used
func (m *VMwareMountVolumesNewTargetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMountTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetVMCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMwareMountVolumesNewTargetConfig) contextValidateMountTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.MountTarget != nil {

		if err := m.MountTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountTarget")
			}
			return err
		}
	}

	return nil
}

func (m *VMwareMountVolumesNewTargetConfig) contextValidateTargetVMCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetVMCredentials != nil {

		if swag.IsZero(m.TargetVMCredentials) { // not required
			return nil
		}

		if err := m.TargetVMCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVmCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVmCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMwareMountVolumesNewTargetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMwareMountVolumesNewTargetConfig) UnmarshalBinary(b []byte) error {
	var res VMwareMountVolumesNewTargetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
