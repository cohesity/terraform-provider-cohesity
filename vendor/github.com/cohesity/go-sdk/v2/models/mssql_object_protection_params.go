// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MssqlObjectProtectionParams Specifies the parameters specific to MSSQL Object Protection.
//
// swagger:model MssqlObjectProtectionParams
type MssqlObjectProtectionParams struct {

	// Specifies the MSSQL Object Protection type.
	// Required: true
	// Enum: ["kFile","kVolume","kNative"]
	ObjectProtectionType *string `json:"objectProtectionType"`

	// Specifies the File based MSSQL Object Protection params.
	FileObjectProtectionTypeParams *MssqlFileObjectProtectionParams `json:"fileObjectProtectionTypeParams,omitempty"`

	// Specifies the Native based MSSQL Object Protection params.
	NativeObjectProtectionTypeParams *MssqlNativeObjectProtectionParams `json:"nativeObjectProtectionTypeParams,omitempty"`
}

// Validate validates this mssql object protection params
func (m *MssqlObjectProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileObjectProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNativeObjectProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mssqlObjectProtectionParamsTypeObjectProtectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kFile","kVolume","kNative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mssqlObjectProtectionParamsTypeObjectProtectionTypePropEnum = append(mssqlObjectProtectionParamsTypeObjectProtectionTypePropEnum, v)
	}
}

const (

	// MssqlObjectProtectionParamsObjectProtectionTypeKFile captures enum value "kFile"
	MssqlObjectProtectionParamsObjectProtectionTypeKFile string = "kFile"

	// MssqlObjectProtectionParamsObjectProtectionTypeKVolume captures enum value "kVolume"
	MssqlObjectProtectionParamsObjectProtectionTypeKVolume string = "kVolume"

	// MssqlObjectProtectionParamsObjectProtectionTypeKNative captures enum value "kNative"
	MssqlObjectProtectionParamsObjectProtectionTypeKNative string = "kNative"
)

// prop value enum
func (m *MssqlObjectProtectionParams) validateObjectProtectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mssqlObjectProtectionParamsTypeObjectProtectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MssqlObjectProtectionParams) validateObjectProtectionType(formats strfmt.Registry) error {

	if err := validate.Required("objectProtectionType", "body", m.ObjectProtectionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateObjectProtectionTypeEnum("objectProtectionType", "body", *m.ObjectProtectionType); err != nil {
		return err
	}

	return nil
}

func (m *MssqlObjectProtectionParams) validateFileObjectProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FileObjectProtectionTypeParams) { // not required
		return nil
	}

	if m.FileObjectProtectionTypeParams != nil {
		if err := m.FileObjectProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *MssqlObjectProtectionParams) validateNativeObjectProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NativeObjectProtectionTypeParams) { // not required
		return nil
	}

	if m.NativeObjectProtectionTypeParams != nil {
		if err := m.NativeObjectProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nativeObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nativeObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mssql object protection params based on the context it is used
func (m *MssqlObjectProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileObjectProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNativeObjectProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MssqlObjectProtectionParams) contextValidateFileObjectProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FileObjectProtectionTypeParams != nil {

		if swag.IsZero(m.FileObjectProtectionTypeParams) { // not required
			return nil
		}

		if err := m.FileObjectProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *MssqlObjectProtectionParams) contextValidateNativeObjectProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NativeObjectProtectionTypeParams != nil {

		if swag.IsZero(m.NativeObjectProtectionTypeParams) { // not required
			return nil
		}

		if err := m.NativeObjectProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nativeObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nativeObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MssqlObjectProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MssqlObjectProtectionParams) UnmarshalBinary(b []byte) error {
	var res MssqlObjectProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
