// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FleetConfig Recover as fleet config.
//
// Specifies various resources while deploying fleet params.
//
// swagger:model FleetConfig
type FleetConfig struct {

	// Specifies the subnet type of the fleet.
	// Enum: ["kCluster","kSourceVM","kCustom"]
	FleetSubnetType *string `json:"fleetSubnetType,omitempty"`

	// Specifies the network security groups within above VPC.
	FleetTags []*FleetTags `json:"fleetTags"`

	// Specifies the network security groups within above VPC.
	FleetNetworkParams *FleetNetworkParams `json:"fleetNetworkParams,omitempty"`
}

// Validate validates this fleet config
func (m *FleetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFleetSubnetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFleetTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFleetNetworkParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fleetConfigTypeFleetSubnetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCluster","kSourceVM","kCustom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fleetConfigTypeFleetSubnetTypePropEnum = append(fleetConfigTypeFleetSubnetTypePropEnum, v)
	}
}

const (

	// FleetConfigFleetSubnetTypeKCluster captures enum value "kCluster"
	FleetConfigFleetSubnetTypeKCluster string = "kCluster"

	// FleetConfigFleetSubnetTypeKSourceVM captures enum value "kSourceVM"
	FleetConfigFleetSubnetTypeKSourceVM string = "kSourceVM"

	// FleetConfigFleetSubnetTypeKCustom captures enum value "kCustom"
	FleetConfigFleetSubnetTypeKCustom string = "kCustom"
)

// prop value enum
func (m *FleetConfig) validateFleetSubnetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fleetConfigTypeFleetSubnetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FleetConfig) validateFleetSubnetType(formats strfmt.Registry) error {
	if swag.IsZero(m.FleetSubnetType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFleetSubnetTypeEnum("fleetSubnetType", "body", *m.FleetSubnetType); err != nil {
		return err
	}

	return nil
}

func (m *FleetConfig) validateFleetTags(formats strfmt.Registry) error {
	if swag.IsZero(m.FleetTags) { // not required
		return nil
	}

	for i := 0; i < len(m.FleetTags); i++ {
		if swag.IsZero(m.FleetTags[i]) { // not required
			continue
		}

		if m.FleetTags[i] != nil {
			if err := m.FleetTags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fleetTags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fleetTags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FleetConfig) validateFleetNetworkParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FleetNetworkParams) { // not required
		return nil
	}

	if m.FleetNetworkParams != nil {
		if err := m.FleetNetworkParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fleetNetworkParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fleetNetworkParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fleet config based on the context it is used
func (m *FleetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFleetTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFleetNetworkParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FleetConfig) contextValidateFleetTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FleetTags); i++ {

		if m.FleetTags[i] != nil {

			if swag.IsZero(m.FleetTags[i]) { // not required
				return nil
			}

			if err := m.FleetTags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fleetTags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fleetTags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FleetConfig) contextValidateFleetNetworkParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FleetNetworkParams != nil {

		if swag.IsZero(m.FleetNetworkParams) { // not required
			return nil
		}

		if err := m.FleetNetworkParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fleetNetworkParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fleetNetworkParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FleetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FleetConfig) UnmarshalBinary(b []byte) error {
	var res FleetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
