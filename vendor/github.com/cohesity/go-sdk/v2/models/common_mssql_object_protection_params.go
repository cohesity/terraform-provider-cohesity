// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonMssqlObjectProtectionParams Specifies the common parameters for MSSQL Object Protection.
//
// swagger:model CommonMssqlObjectProtectionParams
type CommonMssqlObjectProtectionParams struct {

	// Specifies the MSSQL Object Protection type.
	// Required: true
	// Enum: ["kFile","kVolume","kNative"]
	ObjectProtectionType *string `json:"objectProtectionType"`

	// Specifies the common File based MSSQL Object Protection params.
	CommonFileObjectProtectionTypeParams *CommonMssqlFileObjectProtectionParams `json:"commonFileObjectProtectionTypeParams,omitempty"`

	// Specifies the common Native based MSSQL Object Protection params.
	CommonNativeObjectProtectionTypeParams *CommonMssqlNativeObjectProtectionParams `json:"commonNativeObjectProtectionTypeParams,omitempty"`
}

// Validate validates this common mssql object protection params
func (m *CommonMssqlObjectProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonFileObjectProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonNativeObjectProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonMssqlObjectProtectionParamsTypeObjectProtectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kFile","kVolume","kNative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonMssqlObjectProtectionParamsTypeObjectProtectionTypePropEnum = append(commonMssqlObjectProtectionParamsTypeObjectProtectionTypePropEnum, v)
	}
}

const (

	// CommonMssqlObjectProtectionParamsObjectProtectionTypeKFile captures enum value "kFile"
	CommonMssqlObjectProtectionParamsObjectProtectionTypeKFile string = "kFile"

	// CommonMssqlObjectProtectionParamsObjectProtectionTypeKVolume captures enum value "kVolume"
	CommonMssqlObjectProtectionParamsObjectProtectionTypeKVolume string = "kVolume"

	// CommonMssqlObjectProtectionParamsObjectProtectionTypeKNative captures enum value "kNative"
	CommonMssqlObjectProtectionParamsObjectProtectionTypeKNative string = "kNative"
)

// prop value enum
func (m *CommonMssqlObjectProtectionParams) validateObjectProtectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonMssqlObjectProtectionParamsTypeObjectProtectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonMssqlObjectProtectionParams) validateObjectProtectionType(formats strfmt.Registry) error {

	if err := validate.Required("objectProtectionType", "body", m.ObjectProtectionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateObjectProtectionTypeEnum("objectProtectionType", "body", *m.ObjectProtectionType); err != nil {
		return err
	}

	return nil
}

func (m *CommonMssqlObjectProtectionParams) validateCommonFileObjectProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CommonFileObjectProtectionTypeParams) { // not required
		return nil
	}

	if m.CommonFileObjectProtectionTypeParams != nil {
		if err := m.CommonFileObjectProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonFileObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonFileObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *CommonMssqlObjectProtectionParams) validateCommonNativeObjectProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CommonNativeObjectProtectionTypeParams) { // not required
		return nil
	}

	if m.CommonNativeObjectProtectionTypeParams != nil {
		if err := m.CommonNativeObjectProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonNativeObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonNativeObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common mssql object protection params based on the context it is used
func (m *CommonMssqlObjectProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommonFileObjectProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommonNativeObjectProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonMssqlObjectProtectionParams) contextValidateCommonFileObjectProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CommonFileObjectProtectionTypeParams != nil {

		if swag.IsZero(m.CommonFileObjectProtectionTypeParams) { // not required
			return nil
		}

		if err := m.CommonFileObjectProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonFileObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonFileObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *CommonMssqlObjectProtectionParams) contextValidateCommonNativeObjectProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CommonNativeObjectProtectionTypeParams != nil {

		if swag.IsZero(m.CommonNativeObjectProtectionTypeParams) { // not required
			return nil
		}

		if err := m.CommonNativeObjectProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonNativeObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonNativeObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonMssqlObjectProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonMssqlObjectProtectionParams) UnmarshalBinary(b []byte) error {
	var res CommonMssqlObjectProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
