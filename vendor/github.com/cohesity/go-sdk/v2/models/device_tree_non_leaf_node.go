// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceTreeNonLeafNode Specifies the parameters of a non leaf node in device tree.
//
// swagger:model DeviceTreeNonLeafNode
type DeviceTreeNonLeafNode struct {

	// Specifies the children nodes combine type.
	// Enum: ["Linear","Stripe","Mirror","Raid5","Raid6","Zero","Thin","ThinPool","Snapshot","Cache","CachePool"]
	Type *string `json:"type,omitempty"`

	// Specifies the length of device.
	DeviceLength *int64 `json:"deviceLength,omitempty"`

	// Specifies the id of device.
	DeviceID *int64 `json:"deviceId,omitempty"`

	// Specifies a list of children nodes.
	ChildrenNodes []*DeviceTreeNode `json:"childrenNodes"`
}

// Validate validates this device tree non leaf node
func (m *DeviceTreeNonLeafNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildrenNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceTreeNonLeafNodeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Linear","Stripe","Mirror","Raid5","Raid6","Zero","Thin","ThinPool","Snapshot","Cache","CachePool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceTreeNonLeafNodeTypeTypePropEnum = append(deviceTreeNonLeafNodeTypeTypePropEnum, v)
	}
}

const (

	// DeviceTreeNonLeafNodeTypeLinear captures enum value "Linear"
	DeviceTreeNonLeafNodeTypeLinear string = "Linear"

	// DeviceTreeNonLeafNodeTypeStripe captures enum value "Stripe"
	DeviceTreeNonLeafNodeTypeStripe string = "Stripe"

	// DeviceTreeNonLeafNodeTypeMirror captures enum value "Mirror"
	DeviceTreeNonLeafNodeTypeMirror string = "Mirror"

	// DeviceTreeNonLeafNodeTypeRaid5 captures enum value "Raid5"
	DeviceTreeNonLeafNodeTypeRaid5 string = "Raid5"

	// DeviceTreeNonLeafNodeTypeRaid6 captures enum value "Raid6"
	DeviceTreeNonLeafNodeTypeRaid6 string = "Raid6"

	// DeviceTreeNonLeafNodeTypeZero captures enum value "Zero"
	DeviceTreeNonLeafNodeTypeZero string = "Zero"

	// DeviceTreeNonLeafNodeTypeThin captures enum value "Thin"
	DeviceTreeNonLeafNodeTypeThin string = "Thin"

	// DeviceTreeNonLeafNodeTypeThinPool captures enum value "ThinPool"
	DeviceTreeNonLeafNodeTypeThinPool string = "ThinPool"

	// DeviceTreeNonLeafNodeTypeSnapshot captures enum value "Snapshot"
	DeviceTreeNonLeafNodeTypeSnapshot string = "Snapshot"

	// DeviceTreeNonLeafNodeTypeCache captures enum value "Cache"
	DeviceTreeNonLeafNodeTypeCache string = "Cache"

	// DeviceTreeNonLeafNodeTypeCachePool captures enum value "CachePool"
	DeviceTreeNonLeafNodeTypeCachePool string = "CachePool"
)

// prop value enum
func (m *DeviceTreeNonLeafNode) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceTreeNonLeafNodeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceTreeNonLeafNode) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DeviceTreeNonLeafNode) validateChildrenNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildrenNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildrenNodes); i++ {
		if swag.IsZero(m.ChildrenNodes[i]) { // not required
			continue
		}

		if m.ChildrenNodes[i] != nil {
			if err := m.ChildrenNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childrenNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childrenNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this device tree non leaf node based on the context it is used
func (m *DeviceTreeNonLeafNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildrenNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceTreeNonLeafNode) contextValidateChildrenNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChildrenNodes); i++ {

		if m.ChildrenNodes[i] != nil {

			if swag.IsZero(m.ChildrenNodes[i]) { // not required
				return nil
			}

			if err := m.ChildrenNodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childrenNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childrenNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceTreeNonLeafNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceTreeNonLeafNode) UnmarshalBinary(b []byte) error {
	var res DeviceTreeNonLeafNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
