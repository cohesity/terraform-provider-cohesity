// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetappObjectParams Specifies the common parameters for Netapp objects.
//
// swagger:model NetappObjectParams
type NetappObjectParams struct {

	// Specifies a list of NAS mount protocols supported by this object.
	SupportedNasMountProtocols []string `json:"supportedNasMountProtocols"`

	// Specifies the Netapp volume type.
	// Enum: ["ReadWrite","LoadSharing","DataProtection","DataCache","Temp","UnkownType"]
	VolumeType *string `json:"volumeType,omitempty"`

	// Specifies the extended style of a NetApp volume.
	// Enum: ["kFlexVol","kFlexGroup"]
	VolumeExtendedStyle *string `json:"volumeExtendedStyle,omitempty"`
}

// Validate validates this netapp object params
func (m *NetappObjectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupportedNasMountProtocols(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeExtendedStyle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var netappObjectParamsSupportedNasMountProtocolsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kCifs","kIscsi","kFc","kFcache","kHttp","kNdmp","kManagement","kNvme"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netappObjectParamsSupportedNasMountProtocolsItemsEnum = append(netappObjectParamsSupportedNasMountProtocolsItemsEnum, v)
	}
}

func (m *NetappObjectParams) validateSupportedNasMountProtocolsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, netappObjectParamsSupportedNasMountProtocolsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetappObjectParams) validateSupportedNasMountProtocols(formats strfmt.Registry) error {
	if swag.IsZero(m.SupportedNasMountProtocols) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedNasMountProtocols); i++ {

		// value enum
		if err := m.validateSupportedNasMountProtocolsItemsEnum("supportedNasMountProtocols"+"."+strconv.Itoa(i), "body", m.SupportedNasMountProtocols[i]); err != nil {
			return err
		}

	}

	return nil
}

var netappObjectParamsTypeVolumeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ReadWrite","LoadSharing","DataProtection","DataCache","Temp","UnkownType"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netappObjectParamsTypeVolumeTypePropEnum = append(netappObjectParamsTypeVolumeTypePropEnum, v)
	}
}

const (

	// NetappObjectParamsVolumeTypeReadWrite captures enum value "ReadWrite"
	NetappObjectParamsVolumeTypeReadWrite string = "ReadWrite"

	// NetappObjectParamsVolumeTypeLoadSharing captures enum value "LoadSharing"
	NetappObjectParamsVolumeTypeLoadSharing string = "LoadSharing"

	// NetappObjectParamsVolumeTypeDataProtection captures enum value "DataProtection"
	NetappObjectParamsVolumeTypeDataProtection string = "DataProtection"

	// NetappObjectParamsVolumeTypeDataCache captures enum value "DataCache"
	NetappObjectParamsVolumeTypeDataCache string = "DataCache"

	// NetappObjectParamsVolumeTypeTemp captures enum value "Temp"
	NetappObjectParamsVolumeTypeTemp string = "Temp"

	// NetappObjectParamsVolumeTypeUnkownType captures enum value "UnkownType"
	NetappObjectParamsVolumeTypeUnkownType string = "UnkownType"
)

// prop value enum
func (m *NetappObjectParams) validateVolumeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, netappObjectParamsTypeVolumeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetappObjectParams) validateVolumeType(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVolumeTypeEnum("volumeType", "body", *m.VolumeType); err != nil {
		return err
	}

	return nil
}

var netappObjectParamsTypeVolumeExtendedStylePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kFlexVol","kFlexGroup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netappObjectParamsTypeVolumeExtendedStylePropEnum = append(netappObjectParamsTypeVolumeExtendedStylePropEnum, v)
	}
}

const (

	// NetappObjectParamsVolumeExtendedStyleKFlexVol captures enum value "kFlexVol"
	NetappObjectParamsVolumeExtendedStyleKFlexVol string = "kFlexVol"

	// NetappObjectParamsVolumeExtendedStyleKFlexGroup captures enum value "kFlexGroup"
	NetappObjectParamsVolumeExtendedStyleKFlexGroup string = "kFlexGroup"
)

// prop value enum
func (m *NetappObjectParams) validateVolumeExtendedStyleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, netappObjectParamsTypeVolumeExtendedStylePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetappObjectParams) validateVolumeExtendedStyle(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeExtendedStyle) { // not required
		return nil
	}

	// value enum
	if err := m.validateVolumeExtendedStyleEnum("volumeExtendedStyle", "body", *m.VolumeExtendedStyle); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this netapp object params based on context it is used
func (m *NetappObjectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetappObjectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetappObjectParams) UnmarshalBinary(b []byte) error {
	var res NetappObjectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
