// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonTargetConfiguration Common Target Configuration.
//
// Specifies common parameters required while setting up additional protection target configuration.
//
// swagger:model CommonTargetConfiguration
type CommonTargetConfiguration struct {

	// Specifies the Id for a backup copy policy. This is generated when the policy is created
	// Required: true
	Schedule *TargetSchedule `json:"schedule"`

	// Specifies the Retention period of backup in days, months or years to retain copied Snapshots on the target.
	// Required: true
	Retention *Retention `json:"retention"`

	// Specifies if Snapshots are copied from the first completely successful Protection Group Run or the first partially successful Protection Group Run occurring at the start of the replication schedule. <br> If true, Snapshots are copied from the first Protection Group Run occurring at the start of the replication schedule that was completely successful i.e. Snapshots for all the Objects in the Protection Group were successfully captured. <br> If false, Snapshots are copied from the first Protection Group Run occurring at the start of the replication schedule, even if first Protection Group Run was not completely successful i.e. Snapshots were not captured for all Objects in the Protection Group.
	CopyOnRunSuccess *bool `json:"copyOnRunSuccess,omitempty"`

	// Specifies the unique identifier for the target getting added. This field need to be passed only when policies are being updated.
	ConfigID *string `json:"configId,omitempty"`

	// Specifies which type of run should be copied, if not set, all types of runs will be eligible for copying. If set, this will ensure that the first run of given type in the scheduled period will get copied. Currently, this can only be set to Full.
	// Enum: ["Regular","Full","Log","System","StorageArraySnapshot"]
	BackupRunType *string `json:"backupRunType,omitempty"`

	// Specifies the replication/archival timeouts for different type of runs(kFull, kRegular etc.).
	RunTimeouts []*CancellationTimeoutParams `json:"runTimeouts"`

	// Specifies the retention period of log backup in days, months or years to retain copied Snapshots on the external target.
	LogRetention *LogRetention `json:"logRetention,omitempty"`
}

// Validate validates this common target configuration
func (m *CommonTargetConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunTimeouts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogRetention(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonTargetConfiguration) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *CommonTargetConfiguration) validateRetention(formats strfmt.Registry) error {

	if err := validate.Required("retention", "body", m.Retention); err != nil {
		return err
	}

	if m.Retention != nil {
		if err := m.Retention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

var commonTargetConfigurationTypeBackupRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Regular","Full","Log","System","StorageArraySnapshot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonTargetConfigurationTypeBackupRunTypePropEnum = append(commonTargetConfigurationTypeBackupRunTypePropEnum, v)
	}
}

const (

	// CommonTargetConfigurationBackupRunTypeRegular captures enum value "Regular"
	CommonTargetConfigurationBackupRunTypeRegular string = "Regular"

	// CommonTargetConfigurationBackupRunTypeFull captures enum value "Full"
	CommonTargetConfigurationBackupRunTypeFull string = "Full"

	// CommonTargetConfigurationBackupRunTypeLog captures enum value "Log"
	CommonTargetConfigurationBackupRunTypeLog string = "Log"

	// CommonTargetConfigurationBackupRunTypeSystem captures enum value "System"
	CommonTargetConfigurationBackupRunTypeSystem string = "System"

	// CommonTargetConfigurationBackupRunTypeStorageArraySnapshot captures enum value "StorageArraySnapshot"
	CommonTargetConfigurationBackupRunTypeStorageArraySnapshot string = "StorageArraySnapshot"
)

// prop value enum
func (m *CommonTargetConfiguration) validateBackupRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonTargetConfigurationTypeBackupRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonTargetConfiguration) validateBackupRunType(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRunType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackupRunTypeEnum("backupRunType", "body", *m.BackupRunType); err != nil {
		return err
	}

	return nil
}

func (m *CommonTargetConfiguration) validateRunTimeouts(formats strfmt.Registry) error {
	if swag.IsZero(m.RunTimeouts) { // not required
		return nil
	}

	for i := 0; i < len(m.RunTimeouts); i++ {
		if swag.IsZero(m.RunTimeouts[i]) { // not required
			continue
		}

		if m.RunTimeouts[i] != nil {
			if err := m.RunTimeouts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runTimeouts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runTimeouts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonTargetConfiguration) validateLogRetention(formats strfmt.Registry) error {
	if swag.IsZero(m.LogRetention) { // not required
		return nil
	}

	if m.LogRetention != nil {
		if err := m.LogRetention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logRetention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logRetention")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common target configuration based on the context it is used
func (m *CommonTargetConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunTimeouts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonTargetConfiguration) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {

		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *CommonTargetConfiguration) contextValidateRetention(ctx context.Context, formats strfmt.Registry) error {

	if m.Retention != nil {

		if err := m.Retention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

func (m *CommonTargetConfiguration) contextValidateRunTimeouts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RunTimeouts); i++ {

		if m.RunTimeouts[i] != nil {

			if swag.IsZero(m.RunTimeouts[i]) { // not required
				return nil
			}

			if err := m.RunTimeouts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runTimeouts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runTimeouts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonTargetConfiguration) contextValidateLogRetention(ctx context.Context, formats strfmt.Registry) error {

	if m.LogRetention != nil {

		if swag.IsZero(m.LogRetention) { // not required
			return nil
		}

		if err := m.LogRetention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logRetention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logRetention")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonTargetConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonTargetConfiguration) UnmarshalBinary(b []byte) error {
	var res CommonTargetConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
