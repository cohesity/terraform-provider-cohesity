// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterOperationAttribute Name value pair representing an attribute of the operation
//
// swagger:model ClusterOperationAttribute
type ClusterOperationAttribute struct {

	// Name of the attribute. Following attributres are possible.
	// * `kUpgradePackageName` - Indicates the name of the package for
	//   operation types is from enum `cluster_software_operation_type` that
	//   represent upgrade related operations.
	// * `kPatchPackageName` - Indicates the
	//   name of the package for operation types is from enum
	//   `cluster_software_operation_type` that represents patch related
	//   operations.
	// * `kPackageType` specifies whether operation is related to upgrade
	//   or patch.  This will have values from enum `cluster_package_type`.
	// * `kPackageSubType` specifies package sub type.  This will have values
	//   from enum `cluster_package_sub_type`.
	//
	// Required: true
	// Enum: ["kUpgradePackageName","kPatchPackageName","kPackageType","kPackageSubType"]
	Name *string `json:"name"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this cluster operation attribute
func (m *ClusterOperationAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterOperationAttributeTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUpgradePackageName","kPatchPackageName","kPackageType","kPackageSubType"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterOperationAttributeTypeNamePropEnum = append(clusterOperationAttributeTypeNamePropEnum, v)
	}
}

const (

	// ClusterOperationAttributeNameKUpgradePackageName captures enum value "kUpgradePackageName"
	ClusterOperationAttributeNameKUpgradePackageName string = "kUpgradePackageName"

	// ClusterOperationAttributeNameKPatchPackageName captures enum value "kPatchPackageName"
	ClusterOperationAttributeNameKPatchPackageName string = "kPatchPackageName"

	// ClusterOperationAttributeNameKPackageType captures enum value "kPackageType"
	ClusterOperationAttributeNameKPackageType string = "kPackageType"

	// ClusterOperationAttributeNameKPackageSubType captures enum value "kPackageSubType"
	ClusterOperationAttributeNameKPackageSubType string = "kPackageSubType"
)

// prop value enum
func (m *ClusterOperationAttribute) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterOperationAttributeTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterOperationAttribute) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ClusterOperationAttribute) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster operation attribute based on context it is used
func (m *ClusterOperationAttribute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterOperationAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterOperationAttribute) UnmarshalBinary(b []byte) error {
	var res ClusterOperationAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
