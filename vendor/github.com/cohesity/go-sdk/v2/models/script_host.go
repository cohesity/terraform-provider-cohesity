// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScriptHost Pre/Post Script Host
//
// Specifies the params for the host of a pre / post script.
//
// swagger:model ScriptHost
type ScriptHost struct {

	// Specifies the Hostname or IP address of the host where the pre and post script will be run.
	Hostname *string `json:"hostname,omitempty"`

	// Specifies the username for the host.
	Username *string `json:"username,omitempty"`

	// Specifies the Operating system type of the host.
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kOther","kHPUX","kVOS"]
	HostType *string `json:"hostType,omitempty"`
}

// Validate validates this script host
func (m *ScriptHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scriptHostTypeHostTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kOther","kHPUX","kVOS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scriptHostTypeHostTypePropEnum = append(scriptHostTypeHostTypePropEnum, v)
	}
}

const (

	// ScriptHostHostTypeKLinux captures enum value "kLinux"
	ScriptHostHostTypeKLinux string = "kLinux"

	// ScriptHostHostTypeKWindows captures enum value "kWindows"
	ScriptHostHostTypeKWindows string = "kWindows"

	// ScriptHostHostTypeKAix captures enum value "kAix"
	ScriptHostHostTypeKAix string = "kAix"

	// ScriptHostHostTypeKSolaris captures enum value "kSolaris"
	ScriptHostHostTypeKSolaris string = "kSolaris"

	// ScriptHostHostTypeKSapHana captures enum value "kSapHana"
	ScriptHostHostTypeKSapHana string = "kSapHana"

	// ScriptHostHostTypeKOther captures enum value "kOther"
	ScriptHostHostTypeKOther string = "kOther"

	// ScriptHostHostTypeKHPUX captures enum value "kHPUX"
	ScriptHostHostTypeKHPUX string = "kHPUX"

	// ScriptHostHostTypeKVOS captures enum value "kVOS"
	ScriptHostHostTypeKVOS string = "kVOS"
)

// prop value enum
func (m *ScriptHost) validateHostTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scriptHostTypeHostTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScriptHost) validateHostType(formats strfmt.Registry) error {
	if swag.IsZero(m.HostType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostTypeEnum("hostType", "body", *m.HostType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this script host based on context it is used
func (m *ScriptHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScriptHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScriptHost) UnmarshalBinary(b []byte) error {
	var res ScriptHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
