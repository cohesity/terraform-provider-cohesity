// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HiveSourceRegistrationParams Register Hive source request parameters.
//
// Specifies parameters to register Hive source.
//
// swagger:model HiveSourceRegistrationParams
type HiveSourceRegistrationParams struct {
	HiveAdditionalParams

	// IP or hostname of any host from which the Hive configuration file hive-site.xml can be read.
	// Required: true
	Host *string `json:"host"`

	// The directory containing the hive-site.xml.
	// Required: true
	ConfigurationDirectory *string `json:"configurationDirectory"`

	// Protection Source registration id of the HDFS on which this Hive is running.
	// Required: true
	HdfsSourceRegistrationID *int64 `json:"hdfsSourceRegistrationID"`

	// The kerberos principal to be used to connect to this Hive source.
	KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

	// ssh password credentials
	SSHPasswordCredentials *HiveSourceRegistrationParamsAO1SSHPasswordCredentials `json:"sshPasswordCredentials,omitempty"`

	// ssh private key credentials
	SSHPrivateKeyCredentials *HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HiveSourceRegistrationParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 HiveAdditionalParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.HiveAdditionalParams = aO0

	// AO1
	var dataAO1 struct {
		Host *string `json:"host"`

		ConfigurationDirectory *string `json:"configurationDirectory"`

		HdfsSourceRegistrationID *int64 `json:"hdfsSourceRegistrationID"`

		KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

		SSHPasswordCredentials *HiveSourceRegistrationParamsAO1SSHPasswordCredentials `json:"sshPasswordCredentials,omitempty"`

		SSHPrivateKeyCredentials *HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Host = dataAO1.Host

	m.ConfigurationDirectory = dataAO1.ConfigurationDirectory

	m.HdfsSourceRegistrationID = dataAO1.HdfsSourceRegistrationID

	m.KerberosPrincipal = dataAO1.KerberosPrincipal

	m.SSHPasswordCredentials = dataAO1.SSHPasswordCredentials

	m.SSHPrivateKeyCredentials = dataAO1.SSHPrivateKeyCredentials

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HiveSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.HiveAdditionalParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Host *string `json:"host"`

		ConfigurationDirectory *string `json:"configurationDirectory"`

		HdfsSourceRegistrationID *int64 `json:"hdfsSourceRegistrationID"`

		KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

		SSHPasswordCredentials *HiveSourceRegistrationParamsAO1SSHPasswordCredentials `json:"sshPasswordCredentials,omitempty"`

		SSHPrivateKeyCredentials *HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
	}

	dataAO1.Host = m.Host

	dataAO1.ConfigurationDirectory = m.ConfigurationDirectory

	dataAO1.HdfsSourceRegistrationID = m.HdfsSourceRegistrationID

	dataAO1.KerberosPrincipal = m.KerberosPrincipal

	dataAO1.SSHPasswordCredentials = m.SSHPasswordCredentials

	dataAO1.SSHPrivateKeyCredentials = m.SSHPrivateKeyCredentials

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hive source registration params
func (m *HiveSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HiveAdditionalParams
	if err := m.HiveAdditionalParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurationDirectory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsSourceRegistrationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPasswordCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPrivateKeyCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HiveSourceRegistrationParams) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *HiveSourceRegistrationParams) validateConfigurationDirectory(formats strfmt.Registry) error {

	if err := validate.Required("configurationDirectory", "body", m.ConfigurationDirectory); err != nil {
		return err
	}

	return nil
}

func (m *HiveSourceRegistrationParams) validateHdfsSourceRegistrationID(formats strfmt.Registry) error {

	if err := validate.Required("hdfsSourceRegistrationID", "body", m.HdfsSourceRegistrationID); err != nil {
		return err
	}

	return nil
}

func (m *HiveSourceRegistrationParams) validateSSHPasswordCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHPasswordCredentials) { // not required
		return nil
	}

	if m.SSHPasswordCredentials != nil {
		if err := m.SSHPasswordCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPasswordCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPasswordCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *HiveSourceRegistrationParams) validateSSHPrivateKeyCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHPrivateKeyCredentials) { // not required
		return nil
	}

	if m.SSHPrivateKeyCredentials != nil {
		if err := m.SSHPrivateKeyCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPrivateKeyCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPrivateKeyCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hive source registration params based on the context it is used
func (m *HiveSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HiveAdditionalParams
	if err := m.HiveAdditionalParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHPasswordCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHPrivateKeyCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HiveSourceRegistrationParams) contextValidateSSHPasswordCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHPasswordCredentials != nil {

		if swag.IsZero(m.SSHPasswordCredentials) { // not required
			return nil
		}

		if err := m.SSHPasswordCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPasswordCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPasswordCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *HiveSourceRegistrationParams) contextValidateSSHPrivateKeyCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHPrivateKeyCredentials != nil {

		if swag.IsZero(m.SSHPrivateKeyCredentials) { // not required
			return nil
		}

		if err := m.SSHPrivateKeyCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPrivateKeyCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPrivateKeyCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HiveSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HiveSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res HiveSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HiveSourceRegistrationParamsAO1SSHPasswordCredentials SSH username + password required for reading configuration file.Either 'sshPasswordCredentials' or 'sshPrivateKeyCredentials' are required.
//
// swagger:model HiveSourceRegistrationParamsAO1SSHPasswordCredentials
type HiveSourceRegistrationParamsAO1SSHPasswordCredentials struct {

	// SSH password.
	// Required: true
	Password *string `json:"password"`

	// SSH username.
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this hive source registration params a o1 SSH password credentials
func (m *HiveSourceRegistrationParamsAO1SSHPasswordCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HiveSourceRegistrationParamsAO1SSHPasswordCredentials) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("sshPasswordCredentials"+"."+"password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *HiveSourceRegistrationParamsAO1SSHPasswordCredentials) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("sshPasswordCredentials"+"."+"username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hive source registration params a o1 SSH password credentials based on context it is used
func (m *HiveSourceRegistrationParamsAO1SSHPasswordCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HiveSourceRegistrationParamsAO1SSHPasswordCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HiveSourceRegistrationParamsAO1SSHPasswordCredentials) UnmarshalBinary(b []byte) error {
	var res HiveSourceRegistrationParamsAO1SSHPasswordCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials SSH  userID + privateKey required for reading configuration file.
//
// swagger:model HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials
type HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials struct {

	// Passphrase for the private key.
	Passphrase string `json:"passphrase,omitempty"`

	// The private key.
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// userId for PrivateKey credentials.
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this hive source registration params a o1 SSH private key credentials
func (m *HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("sshPrivateKeyCredentials"+"."+"privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("sshPrivateKeyCredentials"+"."+"userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hive source registration params a o1 SSH private key credentials based on context it is used
func (m *HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials) UnmarshalBinary(b []byte) error {
	var res HiveSourceRegistrationParamsAO1SSHPrivateKeyCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
