// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MigrateS3Views Specifies the parameters required to perform the S3 Migration.
//
// swagger:model MigrateS3Views
type MigrateS3Views struct {

	// Specifies the list Views IDs on which the migration action
	// will be performed.
	// Required: true
	ViewIds []int64 `json:"viewIds"`

	// Specifies the target S3 migration state for the Views
	// specified in the viewIds parameter. Supported Migration
	// States are: [Enable, Cancel, Pause, Resume].
	// Required: true
	// Enum: ["Enable","Cancel","Pause","Resume"]
	S3MigrationAction *string `json:"s3MigrationAction"`
}

// Validate validates this migrate s3 views
func (m *MigrateS3Views) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateViewIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3MigrationAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MigrateS3Views) validateViewIds(formats strfmt.Registry) error {

	if err := validate.Required("viewIds", "body", m.ViewIds); err != nil {
		return err
	}

	return nil
}

var migrateS3ViewsTypeS3MigrationActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enable","Cancel","Pause","Resume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		migrateS3ViewsTypeS3MigrationActionPropEnum = append(migrateS3ViewsTypeS3MigrationActionPropEnum, v)
	}
}

const (

	// MigrateS3ViewsS3MigrationActionEnable captures enum value "Enable"
	MigrateS3ViewsS3MigrationActionEnable string = "Enable"

	// MigrateS3ViewsS3MigrationActionCancel captures enum value "Cancel"
	MigrateS3ViewsS3MigrationActionCancel string = "Cancel"

	// MigrateS3ViewsS3MigrationActionPause captures enum value "Pause"
	MigrateS3ViewsS3MigrationActionPause string = "Pause"

	// MigrateS3ViewsS3MigrationActionResume captures enum value "Resume"
	MigrateS3ViewsS3MigrationActionResume string = "Resume"
)

// prop value enum
func (m *MigrateS3Views) validateS3MigrationActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, migrateS3ViewsTypeS3MigrationActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MigrateS3Views) validateS3MigrationAction(formats strfmt.Registry) error {

	if err := validate.Required("s3MigrationAction", "body", m.S3MigrationAction); err != nil {
		return err
	}

	// value enum
	if err := m.validateS3MigrationActionEnum("s3MigrationAction", "body", *m.S3MigrationAction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this migrate s3 views based on context it is used
func (m *MigrateS3Views) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MigrateS3Views) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MigrateS3Views) UnmarshalBinary(b []byte) error {
	var res MigrateS3Views
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
