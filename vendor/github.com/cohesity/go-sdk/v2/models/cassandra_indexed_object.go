// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CassandraIndexedObject CassandraIndexedObject
//
// Specifies a Cassandra indexed object.
//
// swagger:model CassandraIndexedObject
type CassandraIndexedObject struct {
	CommonIndexedObjectParams

	// Specifies the Cassandra Object type.
	// Enum: ["CassandraKeyspaces","CassandraTables"]
	Type *string `json:"type,omitempty"`

	// Specifies the id of the indexed object.
	ID *string `json:"id,omitempty"`

	// Specifies type of Keyspace.
	// Enum: ["kRegular","kGraph","kSystem"]
	KeyspaceType *string `json:"keyspaceType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CassandraIndexedObject) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonIndexedObjectParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonIndexedObjectParams = aO0

	// AO1
	var dataAO1 struct {
		Type *string `json:"type,omitempty"`

		ID *string `json:"id,omitempty"`

		KeyspaceType *string `json:"keyspaceType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Type = dataAO1.Type

	m.ID = dataAO1.ID

	m.KeyspaceType = dataAO1.KeyspaceType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CassandraIndexedObject) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonIndexedObjectParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Type *string `json:"type,omitempty"`

		ID *string `json:"id,omitempty"`

		KeyspaceType *string `json:"keyspaceType,omitempty"`
	}

	dataAO1.Type = m.Type

	dataAO1.ID = m.ID

	dataAO1.KeyspaceType = m.KeyspaceType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this cassandra indexed object
func (m *CassandraIndexedObject) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonIndexedObjectParams
	if err := m.CommonIndexedObjectParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyspaceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cassandraIndexedObjectTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CassandraKeyspaces","CassandraTables"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cassandraIndexedObjectTypeTypePropEnum = append(cassandraIndexedObjectTypeTypePropEnum, v)
	}
}

// property enum
func (m *CassandraIndexedObject) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cassandraIndexedObjectTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CassandraIndexedObject) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var cassandraIndexedObjectTypeKeyspaceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kGraph","kSystem"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cassandraIndexedObjectTypeKeyspaceTypePropEnum = append(cassandraIndexedObjectTypeKeyspaceTypePropEnum, v)
	}
}

// property enum
func (m *CassandraIndexedObject) validateKeyspaceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cassandraIndexedObjectTypeKeyspaceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CassandraIndexedObject) validateKeyspaceType(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyspaceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateKeyspaceTypeEnum("keyspaceType", "body", *m.KeyspaceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cassandra indexed object based on the context it is used
func (m *CassandraIndexedObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonIndexedObjectParams
	if err := m.CommonIndexedObjectParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CassandraIndexedObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraIndexedObject) UnmarshalBinary(b []byte) error {
	var res CassandraIndexedObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
