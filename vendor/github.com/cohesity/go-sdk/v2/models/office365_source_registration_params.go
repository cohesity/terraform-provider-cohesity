// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Office365SourceRegistrationParams Office 365 Source Registration parameters
//
// Specifies the paramaters to register an office-365 source.
//
// swagger:model Office365SourceRegistrationParams
type Office365SourceRegistrationParams struct {
	CommonSourceRegistrationParams

	// Specifies a list of office365 azure application credentials needed to authenticate & authorize users for Office 365.
	Office365AppCredentialsList []*Office365AppCredentials `json:"office365AppCredentialsList"`

	// Specifies the list of Office365 service account credentials which can be used for Mailbox Backups.
	Office365ServiceAccountCredentialsList []*Credentials `json:"office365ServiceAccountCredentialsList"`

	// Specifies whether OAuth should be used for authentication in case of Exchange Online.
	UseOAuthForExchangeOnline *bool `json:"useOAuthForExchangeOnline,omitempty"`

	// Specifies the list of the protection source id of the windows physical host which will be used during the protection and recovery of the sites that belong to a office365 domain.
	ProxyHostSourceIDList []int64 `json:"proxyHostSourceIdList"`

	// Specifies the region where Office 365 Exchange environment is.
	// Enum: ["Default","China","Germany","UsDoD","UsGccHigh"]
	Office365Region *string `json:"office365Region,omitempty"`

	// Specifies the parameters used for selectively discovering the office 365 objects during source registration or refresh. Example: o365ObjectsDiscoveryParams: { discoverableObjectTypeList:{['kUsers', 'kSites', 'kGroups']}, usersDiscoveryParams:{discoverUsersWithMailbox:true, discoverUsersWithOnedrive:false} }
	O365ObjectsDiscoveryParams *ObjectsDiscoveryParams `json:"o365ObjectsDiscoveryParams,omitempty"`

	// Specifies whether to use existing Office365 credentials like password and client secret for app id's. This parameter is only valid in the case of updating the registered source.
	UseExistingCredentials *bool `json:"useExistingCredentials,omitempty"`

	// Specifies whether to enable M365 Storage Service API based(CSM) Backup for this M365 source.
	EnableM365CSMBackup *bool `json:"enableM365CSMBackup,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Office365SourceRegistrationParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonSourceRegistrationParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonSourceRegistrationParams = aO0

	// AO1
	var dataAO1 struct {
		Office365AppCredentialsList []*Office365AppCredentials `json:"office365AppCredentialsList"`

		Office365ServiceAccountCredentialsList []*Credentials `json:"office365ServiceAccountCredentialsList"`

		UseOAuthForExchangeOnline *bool `json:"useOAuthForExchangeOnline,omitempty"`

		ProxyHostSourceIDList []int64 `json:"proxyHostSourceIdList"`

		Office365Region *string `json:"office365Region,omitempty"`

		O365ObjectsDiscoveryParams *ObjectsDiscoveryParams `json:"o365ObjectsDiscoveryParams,omitempty"`

		UseExistingCredentials *bool `json:"useExistingCredentials,omitempty"`

		EnableM365CSMBackup *bool `json:"enableM365CSMBackup,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Office365AppCredentialsList = dataAO1.Office365AppCredentialsList

	m.Office365ServiceAccountCredentialsList = dataAO1.Office365ServiceAccountCredentialsList

	m.UseOAuthForExchangeOnline = dataAO1.UseOAuthForExchangeOnline

	m.ProxyHostSourceIDList = dataAO1.ProxyHostSourceIDList

	m.Office365Region = dataAO1.Office365Region

	m.O365ObjectsDiscoveryParams = dataAO1.O365ObjectsDiscoveryParams

	m.UseExistingCredentials = dataAO1.UseExistingCredentials

	m.EnableM365CSMBackup = dataAO1.EnableM365CSMBackup

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Office365SourceRegistrationParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonSourceRegistrationParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Office365AppCredentialsList []*Office365AppCredentials `json:"office365AppCredentialsList"`

		Office365ServiceAccountCredentialsList []*Credentials `json:"office365ServiceAccountCredentialsList"`

		UseOAuthForExchangeOnline *bool `json:"useOAuthForExchangeOnline,omitempty"`

		ProxyHostSourceIDList []int64 `json:"proxyHostSourceIdList"`

		Office365Region *string `json:"office365Region,omitempty"`

		O365ObjectsDiscoveryParams *ObjectsDiscoveryParams `json:"o365ObjectsDiscoveryParams,omitempty"`

		UseExistingCredentials *bool `json:"useExistingCredentials,omitempty"`

		EnableM365CSMBackup *bool `json:"enableM365CSMBackup,omitempty"`
	}

	dataAO1.Office365AppCredentialsList = m.Office365AppCredentialsList

	dataAO1.Office365ServiceAccountCredentialsList = m.Office365ServiceAccountCredentialsList

	dataAO1.UseOAuthForExchangeOnline = m.UseOAuthForExchangeOnline

	dataAO1.ProxyHostSourceIDList = m.ProxyHostSourceIDList

	dataAO1.Office365Region = m.Office365Region

	dataAO1.O365ObjectsDiscoveryParams = m.O365ObjectsDiscoveryParams

	dataAO1.UseExistingCredentials = m.UseExistingCredentials

	dataAO1.EnableM365CSMBackup = m.EnableM365CSMBackup

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this office365 source registration params
func (m *Office365SourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonSourceRegistrationParams
	if err := m.CommonSourceRegistrationParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365AppCredentialsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365ServiceAccountCredentialsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365Region(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO365ObjectsDiscoveryParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Office365SourceRegistrationParams) validateOffice365AppCredentialsList(formats strfmt.Registry) error {

	if swag.IsZero(m.Office365AppCredentialsList) { // not required
		return nil
	}

	for i := 0; i < len(m.Office365AppCredentialsList); i++ {
		if swag.IsZero(m.Office365AppCredentialsList[i]) { // not required
			continue
		}

		if m.Office365AppCredentialsList[i] != nil {
			if err := m.Office365AppCredentialsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365AppCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365AppCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Office365SourceRegistrationParams) validateOffice365ServiceAccountCredentialsList(formats strfmt.Registry) error {

	if swag.IsZero(m.Office365ServiceAccountCredentialsList) { // not required
		return nil
	}

	for i := 0; i < len(m.Office365ServiceAccountCredentialsList); i++ {
		if swag.IsZero(m.Office365ServiceAccountCredentialsList[i]) { // not required
			continue
		}

		if m.Office365ServiceAccountCredentialsList[i] != nil {
			if err := m.Office365ServiceAccountCredentialsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var office365SourceRegistrationParamsTypeOffice365RegionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","China","Germany","UsDoD","UsGccHigh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		office365SourceRegistrationParamsTypeOffice365RegionPropEnum = append(office365SourceRegistrationParamsTypeOffice365RegionPropEnum, v)
	}
}

// property enum
func (m *Office365SourceRegistrationParams) validateOffice365RegionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, office365SourceRegistrationParamsTypeOffice365RegionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Office365SourceRegistrationParams) validateOffice365Region(formats strfmt.Registry) error {

	if swag.IsZero(m.Office365Region) { // not required
		return nil
	}

	// value enum
	if err := m.validateOffice365RegionEnum("office365Region", "body", *m.Office365Region); err != nil {
		return err
	}

	return nil
}

func (m *Office365SourceRegistrationParams) validateO365ObjectsDiscoveryParams(formats strfmt.Registry) error {

	if swag.IsZero(m.O365ObjectsDiscoveryParams) { // not required
		return nil
	}

	if m.O365ObjectsDiscoveryParams != nil {
		if err := m.O365ObjectsDiscoveryParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365ObjectsDiscoveryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365ObjectsDiscoveryParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this office365 source registration params based on the context it is used
func (m *Office365SourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonSourceRegistrationParams
	if err := m.CommonSourceRegistrationParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365AppCredentialsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365ServiceAccountCredentialsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateO365ObjectsDiscoveryParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Office365SourceRegistrationParams) contextValidateOffice365AppCredentialsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Office365AppCredentialsList); i++ {

		if m.Office365AppCredentialsList[i] != nil {

			if swag.IsZero(m.Office365AppCredentialsList[i]) { // not required
				return nil
			}

			if err := m.Office365AppCredentialsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365AppCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365AppCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Office365SourceRegistrationParams) contextValidateOffice365ServiceAccountCredentialsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Office365ServiceAccountCredentialsList); i++ {

		if m.Office365ServiceAccountCredentialsList[i] != nil {

			if swag.IsZero(m.Office365ServiceAccountCredentialsList[i]) { // not required
				return nil
			}

			if err := m.Office365ServiceAccountCredentialsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("office365ServiceAccountCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Office365SourceRegistrationParams) contextValidateO365ObjectsDiscoveryParams(ctx context.Context, formats strfmt.Registry) error {

	if m.O365ObjectsDiscoveryParams != nil {

		if swag.IsZero(m.O365ObjectsDiscoveryParams) { // not required
			return nil
		}

		if err := m.O365ObjectsDiscoveryParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365ObjectsDiscoveryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365ObjectsDiscoveryParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Office365SourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Office365SourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res Office365SourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
