// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ViewUserQuotas Specifies the default logical user quota on the View along with the list of logical quota overrides for each user.
//
// swagger:model ViewUserQuotas
type ViewUserQuotas struct {
	ViewUserQuotaSettings

	UserQuotaOverrides

	// Specifies summary for user quotas in a view.
	SummaryForView *UserQuotaSummaryForView `json:"summaryForView,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ViewUserQuotas) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ViewUserQuotaSettings
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ViewUserQuotaSettings = aO0

	// AO1
	var aO1 UserQuotaOverrides
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.UserQuotaOverrides = aO1

	// AO2
	var dataAO2 struct {
		SummaryForView *UserQuotaSummaryForView `json:"summaryForView,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.SummaryForView = dataAO2.SummaryForView

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ViewUserQuotas) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.ViewUserQuotaSettings)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.UserQuotaOverrides)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		SummaryForView *UserQuotaSummaryForView `json:"summaryForView,omitempty"`
	}

	dataAO2.SummaryForView = m.SummaryForView

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this view user quotas
func (m *ViewUserQuotas) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ViewUserQuotaSettings
	if err := m.ViewUserQuotaSettings.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with UserQuotaOverrides
	if err := m.UserQuotaOverrides.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummaryForView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewUserQuotas) validateSummaryForView(formats strfmt.Registry) error {

	if swag.IsZero(m.SummaryForView) { // not required
		return nil
	}

	if m.SummaryForView != nil {
		if err := m.SummaryForView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryForView")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryForView")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this view user quotas based on the context it is used
func (m *ViewUserQuotas) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ViewUserQuotaSettings
	if err := m.ViewUserQuotaSettings.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with UserQuotaOverrides
	if err := m.UserQuotaOverrides.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummaryForView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewUserQuotas) contextValidateSummaryForView(ctx context.Context, formats strfmt.Registry) error {

	if m.SummaryForView != nil {

		if swag.IsZero(m.SummaryForView) { // not required
			return nil
		}

		if err := m.SummaryForView.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryForView")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryForView")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewUserQuotas) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewUserQuotas) UnmarshalBinary(b []byte) error {
	var res ViewUserQuotas
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
