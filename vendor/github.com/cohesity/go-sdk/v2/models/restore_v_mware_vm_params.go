// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreVMwareVMParams VMware Target Params.
//
// Specifies the parameters for a VMware recovery target.
//
// swagger:model RestoreVMwareVMParams
type RestoreVMwareVMParams struct {

	// Specifies the folder ID where the VMs should be created.
	TargetVMFolderID *int64 `json:"targetVMFolderId,omitempty"`

	// Specifies the folder where the restore datastore should be created.
	TargetDataStoreID *int64 `json:"targetDataStoreId,omitempty"`

	// Specifies whether to perform copy recovery or not.
	EnableCopyRecovery *bool `json:"enableCopyRecovery,omitempty"`

	// Specifies if the restore is to alternate location.
	ResourcePoolID *int64 `json:"resourcePoolId,omitempty"`

	// Specifies Datastore Ids, if the restore is to alternate location.
	DatastoreIds []int64 `json:"datastoreIds"`

	// Specifies whether to overwrite the VM at the target location.
	OverwriteExistingVM *bool `json:"overwriteExistingVm,omitempty"`

	// Specifies whether to power off and mark the VM at the target location as deprecated.
	PowerOffAndRenameExistingVM *bool `json:"powerOffAndRenameExistingVm,omitempty"`

	// Specifies whether to attempt differential restore.
	AttemptDifferentialRestore *bool `json:"attemptDifferentialRestore,omitempty"`

	// Specifies whether a task in on prem deploy or not.
	IsOnPremDeploy *bool `json:"isOnPremDeploy,omitempty"`
}

// Validate validates this restore v mware VM params
func (m *RestoreVMwareVMParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this restore v mware VM params based on context it is used
func (m *RestoreVMwareVMParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RestoreVMwareVMParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreVMwareVMParams) UnmarshalBinary(b []byte) error {
	var res RestoreVMwareVMParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
