// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BondInterfaceNetworkParams Bond interface network parameters.
//
// swagger:model BondInterfaceNetworkParams
type BondInterfaceNetworkParams struct {

	// Rate option to use for link partner to transmit LACPDU packets in 802.3ad mode.
	// Enum: ["Slow","Fast"]
	LacpRate *string `json:"lacpRate,omitempty"`

	// Bonding mode of the interface.
	// Enum: ["ActiveBackup","802_3ad"]
	BondingMode *string `json:"bondingMode,omitempty"`

	// Transmit hash policy to use for selection in 802.3ad mode.
	// Enum: ["layer2","layer3_4","layer2_3"]
	XmitHashPolicy *string `json:"xmitHashPolicy,omitempty"`
}

// Validate validates this bond interface network params
func (m *BondInterfaceNetworkParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLacpRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBondingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXmitHashPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bondInterfaceNetworkParamsTypeLacpRatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Slow","Fast"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bondInterfaceNetworkParamsTypeLacpRatePropEnum = append(bondInterfaceNetworkParamsTypeLacpRatePropEnum, v)
	}
}

const (

	// BondInterfaceNetworkParamsLacpRateSlow captures enum value "Slow"
	BondInterfaceNetworkParamsLacpRateSlow string = "Slow"

	// BondInterfaceNetworkParamsLacpRateFast captures enum value "Fast"
	BondInterfaceNetworkParamsLacpRateFast string = "Fast"
)

// prop value enum
func (m *BondInterfaceNetworkParams) validateLacpRateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bondInterfaceNetworkParamsTypeLacpRatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BondInterfaceNetworkParams) validateLacpRate(formats strfmt.Registry) error {
	if swag.IsZero(m.LacpRate) { // not required
		return nil
	}

	// value enum
	if err := m.validateLacpRateEnum("lacpRate", "body", *m.LacpRate); err != nil {
		return err
	}

	return nil
}

var bondInterfaceNetworkParamsTypeBondingModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ActiveBackup","802_3ad"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bondInterfaceNetworkParamsTypeBondingModePropEnum = append(bondInterfaceNetworkParamsTypeBondingModePropEnum, v)
	}
}

const (

	// BondInterfaceNetworkParamsBondingModeActiveBackup captures enum value "ActiveBackup"
	BondInterfaceNetworkParamsBondingModeActiveBackup string = "ActiveBackup"

	// BondInterfaceNetworkParamsBondingModeNr8023ad captures enum value "802_3ad"
	BondInterfaceNetworkParamsBondingModeNr8023ad string = "802_3ad"
)

// prop value enum
func (m *BondInterfaceNetworkParams) validateBondingModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bondInterfaceNetworkParamsTypeBondingModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BondInterfaceNetworkParams) validateBondingMode(formats strfmt.Registry) error {
	if swag.IsZero(m.BondingMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBondingModeEnum("bondingMode", "body", *m.BondingMode); err != nil {
		return err
	}

	return nil
}

var bondInterfaceNetworkParamsTypeXmitHashPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["layer2","layer3_4","layer2_3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bondInterfaceNetworkParamsTypeXmitHashPolicyPropEnum = append(bondInterfaceNetworkParamsTypeXmitHashPolicyPropEnum, v)
	}
}

const (

	// BondInterfaceNetworkParamsXmitHashPolicyLayer2 captures enum value "layer2"
	BondInterfaceNetworkParamsXmitHashPolicyLayer2 string = "layer2"

	// BondInterfaceNetworkParamsXmitHashPolicyLayer34 captures enum value "layer3_4"
	BondInterfaceNetworkParamsXmitHashPolicyLayer34 string = "layer3_4"

	// BondInterfaceNetworkParamsXmitHashPolicyLayer23 captures enum value "layer2_3"
	BondInterfaceNetworkParamsXmitHashPolicyLayer23 string = "layer2_3"
)

// prop value enum
func (m *BondInterfaceNetworkParams) validateXmitHashPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bondInterfaceNetworkParamsTypeXmitHashPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BondInterfaceNetworkParams) validateXmitHashPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.XmitHashPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateXmitHashPolicyEnum("xmitHashPolicy", "body", *m.XmitHashPolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bond interface network params based on context it is used
func (m *BondInterfaceNetworkParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BondInterfaceNetworkParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BondInterfaceNetworkParams) UnmarshalBinary(b []byte) error {
	var res BondInterfaceNetworkParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
