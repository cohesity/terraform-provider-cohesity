// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhysicalFileProtectionGroupObjectParams physical file protection group object params
//
// swagger:model PhysicalFileProtectionGroupObjectParams
type PhysicalFileProtectionGroupObjectParams struct {

	// Specifies the ID of the object protected.
	// Required: true
	ID *int64 `json:"id"`

	// Specifies the name of the object protected.
	// Read Only: true
	Name *string `json:"name,omitempty"`

	// Specifies a list of file paths to be protected by this Protection Group.
	FilePaths []*PhysicalFileBackupPathParams `json:"filePaths"`

	// Specifies whether path level or object level skip nested volume setting will be used.
	UsesPathLevelSkipNestedVolumeSetting *bool `json:"usesPathLevelSkipNestedVolumeSetting,omitempty"`

	// Specifies mount types of nested volumes to be skipped.
	NestedVolumeTypesToSkip []string `json:"nestedVolumeTypesToSkip"`

	// Specifies whether to follow NAS target pointed by symlink for windows sources.
	FollowNasSymlinkTarget *bool `json:"followNasSymlinkTarget,omitempty"`

	// Specifies the path of metadatafile on source. This file contains absolute paths of files that needs to be backed up on the same source.
	MetadataFilePath *string `json:"metadataFilePath,omitempty"`

	// Specifies writer names which should be excluded from physical file based backups.
	ExcludedVssWriters []string `json:"excludedVssWriters"`
}

// Validate validates this physical file protection group object params
func (m *PhysicalFileProtectionGroupObjectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilePaths(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalFileProtectionGroupObjectParams) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalFileProtectionGroupObjectParams) validateFilePaths(formats strfmt.Registry) error {
	if swag.IsZero(m.FilePaths) { // not required
		return nil
	}

	for i := 0; i < len(m.FilePaths); i++ {
		if swag.IsZero(m.FilePaths[i]) { // not required
			continue
		}

		if m.FilePaths[i] != nil {
			if err := m.FilePaths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filePaths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filePaths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this physical file protection group object params based on the context it is used
func (m *PhysicalFileProtectionGroupObjectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilePaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalFileProtectionGroupObjectParams) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalFileProtectionGroupObjectParams) contextValidateFilePaths(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilePaths); i++ {

		if m.FilePaths[i] != nil {

			if swag.IsZero(m.FilePaths[i]) { // not required
				return nil
			}

			if err := m.FilePaths[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filePaths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filePaths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalFileProtectionGroupObjectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalFileProtectionGroupObjectParams) UnmarshalBinary(b []byte) error {
	var res PhysicalFileProtectionGroupObjectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
