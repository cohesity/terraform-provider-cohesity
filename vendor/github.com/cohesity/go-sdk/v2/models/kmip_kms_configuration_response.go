// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KmipKmsConfigurationResponse KMIP compliant KMS configuration response params.
//
// swagger:model KmipKmsConfigurationResponse
type KmipKmsConfigurationResponse struct {

	// KMIP protocol version used to communicate with the KMS.
	// Enum: ["KMIP1_1","KMIP1_2","KMIP1_3","KMIP1_4","KMIP2_0"]
	ProtocolVersion *string `json:"protocolVersion,omitempty"`

	// KMS server IP address or FQDN.
	Server *string `json:"server,omitempty"`

	// Port on which the KMS server is listening.
	Port *int32 `json:"port,omitempty"`

	// Specifies expiry date of client certificate in msecs.
	// Read Only: true
	CertificateExpiryDate *int64 `json:"certificateExpiryDate,omitempty"`

	// Additional KMS server IP address or FQDNs for fail over.
	AdditionalServerAddress []string `json:"AdditionalServerAddress"`
}

// Validate validates this kmip kms configuration response
func (m *KmipKmsConfigurationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocolVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var kmipKmsConfigurationResponseTypeProtocolVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["KMIP1_1","KMIP1_2","KMIP1_3","KMIP1_4","KMIP2_0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kmipKmsConfigurationResponseTypeProtocolVersionPropEnum = append(kmipKmsConfigurationResponseTypeProtocolVersionPropEnum, v)
	}
}

const (

	// KmipKmsConfigurationResponseProtocolVersionKMIP11 captures enum value "KMIP1_1"
	KmipKmsConfigurationResponseProtocolVersionKMIP11 string = "KMIP1_1"

	// KmipKmsConfigurationResponseProtocolVersionKMIP12 captures enum value "KMIP1_2"
	KmipKmsConfigurationResponseProtocolVersionKMIP12 string = "KMIP1_2"

	// KmipKmsConfigurationResponseProtocolVersionKMIP13 captures enum value "KMIP1_3"
	KmipKmsConfigurationResponseProtocolVersionKMIP13 string = "KMIP1_3"

	// KmipKmsConfigurationResponseProtocolVersionKMIP14 captures enum value "KMIP1_4"
	KmipKmsConfigurationResponseProtocolVersionKMIP14 string = "KMIP1_4"

	// KmipKmsConfigurationResponseProtocolVersionKMIP20 captures enum value "KMIP2_0"
	KmipKmsConfigurationResponseProtocolVersionKMIP20 string = "KMIP2_0"
)

// prop value enum
func (m *KmipKmsConfigurationResponse) validateProtocolVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kmipKmsConfigurationResponseTypeProtocolVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KmipKmsConfigurationResponse) validateProtocolVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtocolVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolVersionEnum("protocolVersion", "body", *m.ProtocolVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this kmip kms configuration response based on the context it is used
func (m *KmipKmsConfigurationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificateExpiryDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmipKmsConfigurationResponse) contextValidateCertificateExpiryDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "certificateExpiryDate", "body", m.CertificateExpiryDate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KmipKmsConfigurationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KmipKmsConfigurationResponse) UnmarshalBinary(b []byte) error {
	var res KmipKmsConfigurationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
