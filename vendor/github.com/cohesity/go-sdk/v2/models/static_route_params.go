// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StaticRouteParams Specifies the static route parameters.
//
// swagger:model StaticRouteParams
type StaticRouteParams struct {

	// Specifies the unique identifier for the route.
	// Read Only: true
	ID *string `json:"id,omitempty"`

	// Specifies the network interface name to use for communicating with the destination network.
	Interface *string `json:"interface,omitempty"`

	// Specifies the network interfaces name to use for communicating with the destination network.
	// Required: true
	InterfaceGroup *string `json:"interfaceGroup"`

	// Specifies the destination network of the Static Route.
	// Required: true
	DestinationNetwork *string `json:"destinationNetwork"`

	// Specifies the next hop to the destination network.
	// Required: true
	NextHop *string `json:"nextHop"`

	// Specifies a description of the Static Route.
	Description *string `json:"description,omitempty"`

	// Specifies MTU setting per route.
	Mtu *int64 `json:"mtu,omitempty"`

	// Specifies the network node group to represent a group of nodes.
	NodeGroupName *string `json:"nodeGroupName,omitempty"`
}

// Validate validates this static route params
func (m *StaticRouteParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterfaceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StaticRouteParams) validateInterfaceGroup(formats strfmt.Registry) error {

	if err := validate.Required("interfaceGroup", "body", m.InterfaceGroup); err != nil {
		return err
	}

	return nil
}

func (m *StaticRouteParams) validateDestinationNetwork(formats strfmt.Registry) error {

	if err := validate.Required("destinationNetwork", "body", m.DestinationNetwork); err != nil {
		return err
	}

	return nil
}

func (m *StaticRouteParams) validateNextHop(formats strfmt.Registry) error {

	if err := validate.Required("nextHop", "body", m.NextHop); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this static route params based on the context it is used
func (m *StaticRouteParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StaticRouteParams) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StaticRouteParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StaticRouteParams) UnmarshalBinary(b []byte) error {
	var res StaticRouteParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
