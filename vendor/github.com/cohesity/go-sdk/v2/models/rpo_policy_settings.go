// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RpoPolicySettings RPO Policy Settings
//
// Specifies all the additional settings that are applicable only to an RPO policy. This can include storage domain, settings of different environments, etc.
//
// swagger:model RpoPolicySettings
type RpoPolicySettings struct {

	// Specifies the Storage Domain to which data will be written
	StorageDomainID *int64 `json:"storageDomainId,omitempty"`

	// Specifies the policy level additional environment specific backup params. If this is not specified, default actions will be taken,  for example for NAS environments, all objects within the source will be backed up.
	EnvBackupParams *EnvironmentTypeJobParams `json:"envBackupParams,omitempty"`

	// Specifies settings for indexing files found in an Object so these files can be searched and recovered. This also specifies inclusion and exclusion rules that determine the directories to index.
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`

	// Specifies the alerting policy
	AlertingPolicy *ProtectionGroupAlertingPolicy `json:"alertingPolicy,omitempty"`

	// Specifies whether the data will be written to HDD or SSD.
	// Enum: ["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]
	BackupQosPrincipal *string `json:"backupQosPrincipal,omitempty"`
}

// Validate validates this rpo policy settings
func (m *RpoPolicySettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvBackupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndexingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupQosPrincipal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RpoPolicySettings) validateEnvBackupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvBackupParams) { // not required
		return nil
	}

	if m.EnvBackupParams != nil {
		if err := m.EnvBackupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("envBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("envBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *RpoPolicySettings) validateIndexingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.IndexingPolicy) { // not required
		return nil
	}

	if m.IndexingPolicy != nil {
		if err := m.IndexingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indexingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indexingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RpoPolicySettings) validateAlertingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertingPolicy) { // not required
		return nil
	}

	if m.AlertingPolicy != nil {
		if err := m.AlertingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertingPolicy")
			}
			return err
		}
	}

	return nil
}

var rpoPolicySettingsTypeBackupQosPrincipalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rpoPolicySettingsTypeBackupQosPrincipalPropEnum = append(rpoPolicySettingsTypeBackupQosPrincipalPropEnum, v)
	}
}

const (

	// RpoPolicySettingsBackupQosPrincipalKBackupHDD captures enum value "kBackupHDD"
	RpoPolicySettingsBackupQosPrincipalKBackupHDD string = "kBackupHDD"

	// RpoPolicySettingsBackupQosPrincipalKBackupSSD captures enum value "kBackupSSD"
	RpoPolicySettingsBackupQosPrincipalKBackupSSD string = "kBackupSSD"

	// RpoPolicySettingsBackupQosPrincipalKTestAndDevHigh captures enum value "kTestAndDevHigh"
	RpoPolicySettingsBackupQosPrincipalKTestAndDevHigh string = "kTestAndDevHigh"

	// RpoPolicySettingsBackupQosPrincipalKBackupAll captures enum value "kBackupAll"
	RpoPolicySettingsBackupQosPrincipalKBackupAll string = "kBackupAll"
)

// prop value enum
func (m *RpoPolicySettings) validateBackupQosPrincipalEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rpoPolicySettingsTypeBackupQosPrincipalPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RpoPolicySettings) validateBackupQosPrincipal(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupQosPrincipal) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackupQosPrincipalEnum("backupQosPrincipal", "body", *m.BackupQosPrincipal); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rpo policy settings based on the context it is used
func (m *RpoPolicySettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnvBackupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIndexingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlertingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RpoPolicySettings) contextValidateEnvBackupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.EnvBackupParams != nil {

		if swag.IsZero(m.EnvBackupParams) { // not required
			return nil
		}

		if err := m.EnvBackupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("envBackupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("envBackupParams")
			}
			return err
		}
	}

	return nil
}

func (m *RpoPolicySettings) contextValidateIndexingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.IndexingPolicy != nil {

		if swag.IsZero(m.IndexingPolicy) { // not required
			return nil
		}

		if err := m.IndexingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indexingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indexingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *RpoPolicySettings) contextValidateAlertingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertingPolicy != nil {

		if swag.IsZero(m.AlertingPolicy) { // not required
			return nil
		}

		if err := m.AlertingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertingPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RpoPolicySettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RpoPolicySettings) UnmarshalBinary(b []byte) error {
	var res RpoPolicySettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
