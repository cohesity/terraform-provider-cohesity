// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectOneDriveParam Specifies OneDrive recovery parameters associated with a user.
//
// swagger:model ObjectOneDriveParam
type ObjectOneDriveParam struct {

	// Specifies parameters to recover a OneDrive.
	OneDriveParams []*OneDriveParam `json:"oneDriveParams"`

	// Specifies the OneDrive owner info.
	OwnerInfo *CommonRecoverObjectSnapshotParams `json:"ownerInfo,omitempty"`
}

// Validate validates this object one drive param
func (m *ObjectOneDriveParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOneDriveParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectOneDriveParam) validateOneDriveParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OneDriveParams) { // not required
		return nil
	}

	for i := 0; i < len(m.OneDriveParams); i++ {
		if swag.IsZero(m.OneDriveParams[i]) { // not required
			continue
		}

		if m.OneDriveParams[i] != nil {
			if err := m.OneDriveParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oneDriveParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oneDriveParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectOneDriveParam) validateOwnerInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerInfo) { // not required
		return nil
	}

	if m.OwnerInfo != nil {
		if err := m.OwnerInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this object one drive param based on the context it is used
func (m *ObjectOneDriveParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOneDriveParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectOneDriveParam) contextValidateOneDriveParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OneDriveParams); i++ {

		if m.OneDriveParams[i] != nil {

			if swag.IsZero(m.OneDriveParams[i]) { // not required
				return nil
			}

			if err := m.OneDriveParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oneDriveParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oneDriveParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectOneDriveParam) contextValidateOwnerInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerInfo != nil {

		if swag.IsZero(m.OwnerInfo) { // not required
			return nil
		}

		if err := m.OwnerInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectOneDriveParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectOneDriveParam) UnmarshalBinary(b []byte) error {
	var res ObjectOneDriveParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
