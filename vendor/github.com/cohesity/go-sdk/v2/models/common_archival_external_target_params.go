// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonArchivalExternalTargetParams Specifies the common parameters which are specific to Archival purpose type External Targets.
//
// swagger:model CommonArchivalExternalTargetParams
type CommonArchivalExternalTargetParams struct {

	// Specifies the Storage type of the External Target. Nas option in archival_target_storage_type will soon be deprecated. Please use NAS instead.
	// Required: true
	// Enum: ["Azure","Google","AWS","Oracle","Nas","NAS","QStarTape","S3Compatible"]
	StorageType *string `json:"storageType"`

	// encryption
	// Required: true
	Encryption *EncryptionSettings `json:"encryption"`

	// target bandwidth throttlings
	TargetBandwidthThrottlings *TargetBandwidthThrottlings `json:"targetBandwidthThrottlings,omitempty"`
}

// Validate validates this common archival external target params
func (m *CommonArchivalExternalTargetParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetBandwidthThrottlings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonArchivalExternalTargetParamsTypeStorageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Azure","Google","AWS","Oracle","Nas","NAS","QStarTape","S3Compatible"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonArchivalExternalTargetParamsTypeStorageTypePropEnum = append(commonArchivalExternalTargetParamsTypeStorageTypePropEnum, v)
	}
}

const (

	// CommonArchivalExternalTargetParamsStorageTypeAzure captures enum value "Azure"
	CommonArchivalExternalTargetParamsStorageTypeAzure string = "Azure"

	// CommonArchivalExternalTargetParamsStorageTypeGoogle captures enum value "Google"
	CommonArchivalExternalTargetParamsStorageTypeGoogle string = "Google"

	// CommonArchivalExternalTargetParamsStorageTypeAWS captures enum value "AWS"
	CommonArchivalExternalTargetParamsStorageTypeAWS string = "AWS"

	// CommonArchivalExternalTargetParamsStorageTypeOracle captures enum value "Oracle"
	CommonArchivalExternalTargetParamsStorageTypeOracle string = "Oracle"

	// CommonArchivalExternalTargetParamsStorageTypeNas captures enum value "Nas"
	CommonArchivalExternalTargetParamsStorageTypeNas string = "Nas"

	// CommonArchivalExternalTargetParamsStorageTypeNAS captures enum value "NAS"
	CommonArchivalExternalTargetParamsStorageTypeNAS string = "NAS"

	// CommonArchivalExternalTargetParamsStorageTypeQStarTape captures enum value "QStarTape"
	CommonArchivalExternalTargetParamsStorageTypeQStarTape string = "QStarTape"

	// CommonArchivalExternalTargetParamsStorageTypeS3Compatible captures enum value "S3Compatible"
	CommonArchivalExternalTargetParamsStorageTypeS3Compatible string = "S3Compatible"
)

// prop value enum
func (m *CommonArchivalExternalTargetParams) validateStorageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonArchivalExternalTargetParamsTypeStorageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonArchivalExternalTargetParams) validateStorageType(formats strfmt.Registry) error {

	if err := validate.Required("storageType", "body", m.StorageType); err != nil {
		return err
	}

	// value enum
	if err := m.validateStorageTypeEnum("storageType", "body", *m.StorageType); err != nil {
		return err
	}

	return nil
}

func (m *CommonArchivalExternalTargetParams) validateEncryption(formats strfmt.Registry) error {

	if err := validate.Required("encryption", "body", m.Encryption); err != nil {
		return err
	}

	if m.Encryption != nil {
		if err := m.Encryption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryption")
			}
			return err
		}
	}

	return nil
}

func (m *CommonArchivalExternalTargetParams) validateTargetBandwidthThrottlings(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetBandwidthThrottlings) { // not required
		return nil
	}

	if m.TargetBandwidthThrottlings != nil {
		if err := m.TargetBandwidthThrottlings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetBandwidthThrottlings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetBandwidthThrottlings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common archival external target params based on the context it is used
func (m *CommonArchivalExternalTargetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEncryption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetBandwidthThrottlings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonArchivalExternalTargetParams) contextValidateEncryption(ctx context.Context, formats strfmt.Registry) error {

	if m.Encryption != nil {

		if err := m.Encryption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryption")
			}
			return err
		}
	}

	return nil
}

func (m *CommonArchivalExternalTargetParams) contextValidateTargetBandwidthThrottlings(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetBandwidthThrottlings != nil {

		if swag.IsZero(m.TargetBandwidthThrottlings) { // not required
			return nil
		}

		if err := m.TargetBandwidthThrottlings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetBandwidthThrottlings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetBandwidthThrottlings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonArchivalExternalTargetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonArchivalExternalTargetParams) UnmarshalBinary(b []byte) error {
	var res CommonArchivalExternalTargetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
