// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExperimentalAdapterSourceRegistrationParams ExperimentalAdapter source registration request parameters.
//
// Specifies parameters to register an Experimental Adapter source.
//
// swagger:model ExperimentalAdapterSourceRegistrationParams
type ExperimentalAdapterSourceRegistrationParams struct {

	// Specifies the IPs/hostnames for the nodes forming the Experimental Adapter source cluster.
	// Min Items: 1
	// Unique: true
	Hosts []string `json:"hosts"`

	// Specifies the discover source workflow parameters. This is a stringified JSON representation of the parameters.
	WorkflowParams *string `json:"workflowParams,omitempty"`
}

// Validate validates this experimental adapter source registration params
func (m *ExperimentalAdapterSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExperimentalAdapterSourceRegistrationParams) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	iHostsSize := int64(len(m.Hosts))

	if err := validate.MinItems("hosts", "body", iHostsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("hosts", "body", m.Hosts); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this experimental adapter source registration params based on context it is used
func (m *ExperimentalAdapterSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExperimentalAdapterSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExperimentalAdapterSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res ExperimentalAdapterSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
