// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VmwareObjectProtectionUpdateRequestParams Specifies the parameters which are specific to VMware object protection.
//
// swagger:model VmwareObjectProtectionUpdateRequestParams
type VmwareObjectProtectionUpdateRequestParams struct {
	CommonVmwareProtectionParams

	CommonVmwareObjectParams

	// Specifies the list of IDs of the objects to not be protected in this backup. This field only applies if provided object id is non leaf entity such as Tag or a folder. This can be used to ignore specific objects under a parent object which has been included for protection.
	ExcludeObjectIds []*int64 `json:"excludeObjectIds"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VmwareObjectProtectionUpdateRequestParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonVmwareProtectionParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonVmwareProtectionParams = aO0

	// AO1
	var aO1 CommonVmwareObjectParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.CommonVmwareObjectParams = aO1

	// AO2
	var dataAO2 struct {
		ExcludeObjectIds []*int64 `json:"excludeObjectIds"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.ExcludeObjectIds = dataAO2.ExcludeObjectIds

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VmwareObjectProtectionUpdateRequestParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.CommonVmwareProtectionParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.CommonVmwareObjectParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		ExcludeObjectIds []*int64 `json:"excludeObjectIds"`
	}

	dataAO2.ExcludeObjectIds = m.ExcludeObjectIds

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vmware object protection update request params
func (m *VmwareObjectProtectionUpdateRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonVmwareProtectionParams
	if err := m.CommonVmwareProtectionParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with CommonVmwareObjectParams
	if err := m.CommonVmwareObjectParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this vmware object protection update request params based on the context it is used
func (m *VmwareObjectProtectionUpdateRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonVmwareProtectionParams
	if err := m.CommonVmwareProtectionParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with CommonVmwareObjectParams
	if err := m.CommonVmwareObjectParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VmwareObjectProtectionUpdateRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareObjectProtectionUpdateRequestParams) UnmarshalBinary(b []byte) error {
	var res VmwareObjectProtectionUpdateRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
