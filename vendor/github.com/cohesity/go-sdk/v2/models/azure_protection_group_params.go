// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureProtectionGroupParams Azure Protection Group Request Params.
//
// Specifies the parameters which are specific to Azure related Protection Groups.
//
// swagger:model AzureProtectionGroupParams
type AzureProtectionGroupParams struct {

	// Specifies the Azure Protection Group type.
	// Required: true
	// Enum: ["kAgent","kNative","kSnapshotManager","kAzureSQL"]
	ProtectionType *string `json:"protectionType"`

	// Specifies the parameters which are specific to Azure related protection groups using cohesity protection-service installed on the instance. Objects must be specified.
	AgentProtectionTypeParams *AzureAgentProtectionGroupParams `json:"agentProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to Azure related Protection Groups using Azure native snapshot APIs.
	NativeProtectionTypeParams *AzureNativeProtectionGroupParams `json:"nativeProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to Azure related Protection Groups using Azure native snapshot orchestration with snapshot manager.
	SnapshotManagerProtectionTypeParams *AzureSnapshotManagerProtectionGroupParams `json:"snapshotManagerProtectionTypeParams,omitempty"`
}

// Validate validates this azure protection group params
func (m *AzureProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNativeProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotManagerProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var azureProtectionGroupParamsTypeProtectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAgent","kNative","kSnapshotManager","kAzureSQL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureProtectionGroupParamsTypeProtectionTypePropEnum = append(azureProtectionGroupParamsTypeProtectionTypePropEnum, v)
	}
}

const (

	// AzureProtectionGroupParamsProtectionTypeKAgent captures enum value "kAgent"
	AzureProtectionGroupParamsProtectionTypeKAgent string = "kAgent"

	// AzureProtectionGroupParamsProtectionTypeKNative captures enum value "kNative"
	AzureProtectionGroupParamsProtectionTypeKNative string = "kNative"

	// AzureProtectionGroupParamsProtectionTypeKSnapshotManager captures enum value "kSnapshotManager"
	AzureProtectionGroupParamsProtectionTypeKSnapshotManager string = "kSnapshotManager"

	// AzureProtectionGroupParamsProtectionTypeKAzureSQL captures enum value "kAzureSQL"
	AzureProtectionGroupParamsProtectionTypeKAzureSQL string = "kAzureSQL"
)

// prop value enum
func (m *AzureProtectionGroupParams) validateProtectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureProtectionGroupParamsTypeProtectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureProtectionGroupParams) validateProtectionType(formats strfmt.Registry) error {

	if err := validate.Required("protectionType", "body", m.ProtectionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtectionTypeEnum("protectionType", "body", *m.ProtectionType); err != nil {
		return err
	}

	return nil
}

func (m *AzureProtectionGroupParams) validateAgentProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentProtectionTypeParams) { // not required
		return nil
	}

	if m.AgentProtectionTypeParams != nil {
		if err := m.AgentProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AzureProtectionGroupParams) validateNativeProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NativeProtectionTypeParams) { // not required
		return nil
	}

	if m.NativeProtectionTypeParams != nil {
		if err := m.NativeProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nativeProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nativeProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AzureProtectionGroupParams) validateSnapshotManagerProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotManagerProtectionTypeParams) { // not required
		return nil
	}

	if m.SnapshotManagerProtectionTypeParams != nil {
		if err := m.SnapshotManagerProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotManagerProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotManagerProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure protection group params based on the context it is used
func (m *AzureProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNativeProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotManagerProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureProtectionGroupParams) contextValidateAgentProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentProtectionTypeParams != nil {

		if swag.IsZero(m.AgentProtectionTypeParams) { // not required
			return nil
		}

		if err := m.AgentProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AzureProtectionGroupParams) contextValidateNativeProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NativeProtectionTypeParams != nil {

		if swag.IsZero(m.NativeProtectionTypeParams) { // not required
			return nil
		}

		if err := m.NativeProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nativeProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nativeProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AzureProtectionGroupParams) contextValidateSnapshotManagerProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotManagerProtectionTypeParams != nil {

		if swag.IsZero(m.SnapshotManagerProtectionTypeParams) { // not required
			return nil
		}

		if err := m.SnapshotManagerProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotManagerProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotManagerProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res AzureProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
