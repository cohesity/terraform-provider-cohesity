// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchDocumentLibraryRequestParams Search Document library request params.
//
// Specifies the request parameters to search for files/folders in document libraries.
//
// swagger:model SearchDocumentLibraryRequestParams
type SearchDocumentLibraryRequestParams struct {

	// Specifies the search string to filter the files/folders. User can specify a wildcard character '*' as a suffix to a string where all item names are matched with the prefix string.
	SearchString *string `json:"searchString,omitempty"`

	// Specifies whether to include folders in the response. Default is true.
	IncludeFolders *bool `json:"includeFolders,omitempty"`

	// Specifies whether to include files in the response. Default is true.
	IncludeFiles *bool `json:"includeFiles,omitempty"`

	// Specifies a list of document library types. Only items within the given types will be returned.
	// Unique: true
	CategoryTypes []string `json:"categoryTypes"`

	// Specifies the start time in Unix timestamp epoch in seconds when the file/folder is created.
	CreationStartTimeSecs *int64 `json:"creationStartTimeSecs,omitempty"`

	// Specifies the end time in Unix timestamp epoch in seconds when the file/folder is created.
	CreationEndTimeSecs *int64 `json:"creationEndTimeSecs,omitempty"`

	// Specifies the minimum size of the file in bytes.
	SizeBytesLowerLimit *int64 `json:"sizeBytesLowerLimit,omitempty"`

	// Specifies the maximum size of the file in bytes.
	SizeBytesUpperLimit *int64 `json:"sizeBytesUpperLimit,omitempty"`

	// Specifies the list of owner names to filter on owner of the file/folder.
	OwnerNames []string `json:"ownerNames"`

	// Specifies the O365 specific params to search for indexed items.
	O365Params *O365SearchRequestParams `json:"o365Params,omitempty"`
}

// Validate validates this search document library request params
func (m *SearchDocumentLibraryRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO365Params(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var searchDocumentLibraryRequestParamsCategoryTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Document","Excel","Powerpoint","Image","OneNote"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchDocumentLibraryRequestParamsCategoryTypesItemsEnum = append(searchDocumentLibraryRequestParamsCategoryTypesItemsEnum, v)
	}
}

func (m *SearchDocumentLibraryRequestParams) validateCategoryTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchDocumentLibraryRequestParamsCategoryTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchDocumentLibraryRequestParams) validateCategoryTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryTypes) { // not required
		return nil
	}

	if err := validate.UniqueItems("categoryTypes", "body", m.CategoryTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.CategoryTypes); i++ {

		// value enum
		if err := m.validateCategoryTypesItemsEnum("categoryTypes"+"."+strconv.Itoa(i), "body", m.CategoryTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *SearchDocumentLibraryRequestParams) validateO365Params(formats strfmt.Registry) error {
	if swag.IsZero(m.O365Params) { // not required
		return nil
	}

	if m.O365Params != nil {
		if err := m.O365Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search document library request params based on the context it is used
func (m *SearchDocumentLibraryRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateO365Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchDocumentLibraryRequestParams) contextValidateO365Params(ctx context.Context, formats strfmt.Registry) error {

	if m.O365Params != nil {

		if swag.IsZero(m.O365Params) { // not required
			return nil
		}

		if err := m.O365Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchDocumentLibraryRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchDocumentLibraryRequestParams) UnmarshalBinary(b []byte) error {
	var res SearchDocumentLibraryRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
