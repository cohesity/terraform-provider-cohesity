// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CancelObjectRunsParams Request to cancel object runs.
//
// swagger:model CancelObjectRunsParams
type CancelObjectRunsParams struct {

	// Specifies object id
	// Required: true
	ObjectID *int64 `json:"objectId"`

	// Specifies a list of runs to cancel. If no runs are specified, then all the outstanding runs will be canceled.
	RunsConfig []*CancelObjectRunParams `json:"runsConfig"`

	// Specifies the protections type on which action to be performed. This is used when an object is protected by multiple protection types. If not specified action will be performed on all protection types.
	// Unique: true
	SnapshotBackendTypes []string `json:"snapshotBackendTypes"`
}

// Validate validates this cancel object runs params
func (m *CancelObjectRunsParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunsConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotBackendTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelObjectRunsParams) validateObjectID(formats strfmt.Registry) error {

	if err := validate.Required("objectId", "body", m.ObjectID); err != nil {
		return err
	}

	return nil
}

func (m *CancelObjectRunsParams) validateRunsConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RunsConfig) { // not required
		return nil
	}

	for i := 0; i < len(m.RunsConfig); i++ {
		if swag.IsZero(m.RunsConfig[i]) { // not required
			continue
		}

		if m.RunsConfig[i] != nil {
			if err := m.RunsConfig[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runsConfig" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runsConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var cancelObjectRunsParamsSnapshotBackendTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAWSNative","kAWSSnapshotManager","kPhysical","kSQL","kOracle","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsS3","kAwsRDSPostgresBackup","kAzureNative","kAzureSnapshotManager","kAzureSQL","kAwsAuroraPostgres","kAwsRDSPostgres"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cancelObjectRunsParamsSnapshotBackendTypesItemsEnum = append(cancelObjectRunsParamsSnapshotBackendTypesItemsEnum, v)
	}
}

func (m *CancelObjectRunsParams) validateSnapshotBackendTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cancelObjectRunsParamsSnapshotBackendTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CancelObjectRunsParams) validateSnapshotBackendTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotBackendTypes) { // not required
		return nil
	}

	if err := validate.UniqueItems("snapshotBackendTypes", "body", m.SnapshotBackendTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.SnapshotBackendTypes); i++ {

		// value enum
		if err := m.validateSnapshotBackendTypesItemsEnum("snapshotBackendTypes"+"."+strconv.Itoa(i), "body", m.SnapshotBackendTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this cancel object runs params based on the context it is used
func (m *CancelObjectRunsParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRunsConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelObjectRunsParams) contextValidateRunsConfig(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RunsConfig); i++ {

		if m.RunsConfig[i] != nil {

			if swag.IsZero(m.RunsConfig[i]) { // not required
				return nil
			}

			if err := m.RunsConfig[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runsConfig" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runsConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CancelObjectRunsParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CancelObjectRunsParams) UnmarshalBinary(b []byte) error {
	var res CancelObjectRunsParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
