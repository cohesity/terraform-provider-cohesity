// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataTieringObjectAnalysisInfo Specifies the data tiering object analysis details.
//
// swagger:model DataTieringObjectAnalysisInfo
type DataTieringObjectAnalysisInfo struct {

	// Array of Tag objects.
	TagsInfo []*DataTieringTagObject `json:"tagsInfo"`

	// Status of the analysis run.
	// 'Running' indicates that the run is still running.
	// 'Canceled' indicates that the run has been canceled.
	// 'Canceling' indicates that the run is in the process of being
	//  canceled.
	// 'Failed' indicates that the run has failed.
	// 'Missed' indicates that the run was unable to take place at the
	//  scheduled time because the previous run was still happening.
	// 'Succeeded' indicates that the run has finished successfully.
	// 'SucceededWithWarning' indicates that the run finished
	//  successfully, but there were some warning messages.
	// 'OnHold' indicates that the run has On hold.
	// 'Skipped' indicates that the run was skipped.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]
	Status *string `json:"status,omitempty"`

	// A message about the error if encountered while performing data
	// tiering analysis.
	Message *string `json:"message,omitempty"`

	// Specifies the source share analysis stats.
	Stats []*DataTieringShareStats `json:"stats"`
}

// Validate validates this data tiering object analysis info
func (m *DataTieringObjectAnalysisInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTagsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringObjectAnalysisInfo) validateTagsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TagsInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.TagsInfo); i++ {
		if swag.IsZero(m.TagsInfo[i]) { // not required
			continue
		}

		if m.TagsInfo[i] != nil {
			if err := m.TagsInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var dataTieringObjectAnalysisInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataTieringObjectAnalysisInfoTypeStatusPropEnum = append(dataTieringObjectAnalysisInfoTypeStatusPropEnum, v)
	}
}

const (

	// DataTieringObjectAnalysisInfoStatusAccepted captures enum value "Accepted"
	DataTieringObjectAnalysisInfoStatusAccepted string = "Accepted"

	// DataTieringObjectAnalysisInfoStatusRunning captures enum value "Running"
	DataTieringObjectAnalysisInfoStatusRunning string = "Running"

	// DataTieringObjectAnalysisInfoStatusCanceled captures enum value "Canceled"
	DataTieringObjectAnalysisInfoStatusCanceled string = "Canceled"

	// DataTieringObjectAnalysisInfoStatusCanceling captures enum value "Canceling"
	DataTieringObjectAnalysisInfoStatusCanceling string = "Canceling"

	// DataTieringObjectAnalysisInfoStatusFailed captures enum value "Failed"
	DataTieringObjectAnalysisInfoStatusFailed string = "Failed"

	// DataTieringObjectAnalysisInfoStatusMissed captures enum value "Missed"
	DataTieringObjectAnalysisInfoStatusMissed string = "Missed"

	// DataTieringObjectAnalysisInfoStatusSucceeded captures enum value "Succeeded"
	DataTieringObjectAnalysisInfoStatusSucceeded string = "Succeeded"

	// DataTieringObjectAnalysisInfoStatusSucceededWithWarning captures enum value "SucceededWithWarning"
	DataTieringObjectAnalysisInfoStatusSucceededWithWarning string = "SucceededWithWarning"

	// DataTieringObjectAnalysisInfoStatusOnHold captures enum value "OnHold"
	DataTieringObjectAnalysisInfoStatusOnHold string = "OnHold"

	// DataTieringObjectAnalysisInfoStatusFinalizing captures enum value "Finalizing"
	DataTieringObjectAnalysisInfoStatusFinalizing string = "Finalizing"

	// DataTieringObjectAnalysisInfoStatusSkipped captures enum value "Skipped"
	DataTieringObjectAnalysisInfoStatusSkipped string = "Skipped"

	// DataTieringObjectAnalysisInfoStatusLegalHold captures enum value "LegalHold"
	DataTieringObjectAnalysisInfoStatusLegalHold string = "LegalHold"
)

// prop value enum
func (m *DataTieringObjectAnalysisInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataTieringObjectAnalysisInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataTieringObjectAnalysisInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DataTieringObjectAnalysisInfo) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	for i := 0; i < len(m.Stats); i++ {
		if swag.IsZero(m.Stats[i]) { // not required
			continue
		}

		if m.Stats[i] != nil {
			if err := m.Stats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this data tiering object analysis info based on the context it is used
func (m *DataTieringObjectAnalysisInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTagsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringObjectAnalysisInfo) contextValidateTagsInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagsInfo); i++ {

		if m.TagsInfo[i] != nil {

			if swag.IsZero(m.TagsInfo[i]) { // not required
				return nil
			}

			if err := m.TagsInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataTieringObjectAnalysisInfo) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Stats); i++ {

		if m.Stats[i] != nil {

			if swag.IsZero(m.Stats[i]) { // not required
				return nil
			}

			if err := m.Stats[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTieringObjectAnalysisInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTieringObjectAnalysisInfo) UnmarshalBinary(b []byte) error {
	var res DataTieringObjectAnalysisInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
