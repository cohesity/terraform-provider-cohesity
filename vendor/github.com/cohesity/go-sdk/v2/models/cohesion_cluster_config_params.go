// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CohesionClusterConfigParams Cohesion Cluster Params.
//
// Specifies the cohesion specific parameters.
//
// swagger:model CohesionClusterConfigParams
type CohesionClusterConfigParams struct {

	// Specifies the global unique appliance ID issued by AWS.
	// Read Only: true
	ApplianceID *string `json:"applianceId,omitempty"`

	// Specifies the AWS region to which this appliance is connected to.
	// Read Only: true
	AwsRegionID *string `json:"awsRegionId,omitempty"`

	// Specifies the AWS backup control plane URL.
	// Read Only: true
	AwsControlPlaneURL *string `json:"awsControlPlaneUrl,omitempty"`

	// Specifies the AWS Simple Queue Service URL from which the appliance receives the necessary command messages.
	// Read Only: true
	AwsSQSURL *string `json:"awsSQSUrl,omitempty"`

	// Specifies the AWS storage endpoint to which data will be archived.
	// Read Only: true
	AwsStorageEndpointURL *string `json:"awsStorageEndpointUrl,omitempty"`
}

// Validate validates this cohesion cluster config params
func (m *CohesionClusterConfigParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this cohesion cluster config params based on the context it is used
func (m *CohesionClusterConfigParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplianceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsRegionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsControlPlaneURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsSQSURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsStorageEndpointURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CohesionClusterConfigParams) contextValidateApplianceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "applianceId", "body", m.ApplianceID); err != nil {
		return err
	}

	return nil
}

func (m *CohesionClusterConfigParams) contextValidateAwsRegionID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "awsRegionId", "body", m.AwsRegionID); err != nil {
		return err
	}

	return nil
}

func (m *CohesionClusterConfigParams) contextValidateAwsControlPlaneURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "awsControlPlaneUrl", "body", m.AwsControlPlaneURL); err != nil {
		return err
	}

	return nil
}

func (m *CohesionClusterConfigParams) contextValidateAwsSQSURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "awsSQSUrl", "body", m.AwsSQSURL); err != nil {
		return err
	}

	return nil
}

func (m *CohesionClusterConfigParams) contextValidateAwsStorageEndpointURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "awsStorageEndpointUrl", "body", m.AwsStorageEndpointURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CohesionClusterConfigParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CohesionClusterConfigParams) UnmarshalBinary(b []byte) error {
	var res CohesionClusterConfigParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
