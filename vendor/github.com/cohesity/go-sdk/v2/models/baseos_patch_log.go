// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseosPatchLog Baseos patch Log and status.
//
// Baseos patch Log and status.
//
// swagger:model BaseosPatchLog
type BaseosPatchLog struct {

	// Baseos patch Log file.
	Log string `json:"log,omitempty"`

	// Baseos patch application status
	// Enum: ["UnKnown","NotStarted","InProgress","Failed","Succeeded"]
	Status string `json:"status,omitempty"`
}

// Validate validates this baseos patch log
func (m *BaseosPatchLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var baseosPatchLogTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UnKnown","NotStarted","InProgress","Failed","Succeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseosPatchLogTypeStatusPropEnum = append(baseosPatchLogTypeStatusPropEnum, v)
	}
}

const (

	// BaseosPatchLogStatusUnKnown captures enum value "UnKnown"
	BaseosPatchLogStatusUnKnown string = "UnKnown"

	// BaseosPatchLogStatusNotStarted captures enum value "NotStarted"
	BaseosPatchLogStatusNotStarted string = "NotStarted"

	// BaseosPatchLogStatusInProgress captures enum value "InProgress"
	BaseosPatchLogStatusInProgress string = "InProgress"

	// BaseosPatchLogStatusFailed captures enum value "Failed"
	BaseosPatchLogStatusFailed string = "Failed"

	// BaseosPatchLogStatusSucceeded captures enum value "Succeeded"
	BaseosPatchLogStatusSucceeded string = "Succeeded"
)

// prop value enum
func (m *BaseosPatchLog) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, baseosPatchLogTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BaseosPatchLog) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this baseos patch log based on context it is used
func (m *BaseosPatchLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BaseosPatchLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseosPatchLog) UnmarshalBinary(b []byte) error {
	var res BaseosPatchLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
