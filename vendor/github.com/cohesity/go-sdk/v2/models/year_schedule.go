// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// YearSchedule Year Schedule
//
// Specifies settings that define a schedule for a Protection Group to run on specific year and specific day of that year.
//
// swagger:model YearSchedule
type YearSchedule struct {

	// Specifies the day of the Year (such as 'First' or 'Last') in a Yearly Schedule. <br>This field is used to define the day in the year to start the Protection Group Run. <br> Example: if 'dayOfYear' is set to 'First', a backup is performed on the first day of every year. <br> Example: if 'dayOfYear' is set to 'Last', a backup is performed on the last day of every year.
	// Required: true
	// Enum: ["First","Last"]
	DayOfYear *string `json:"dayOfYear"`
}

// Validate validates this year schedule
func (m *YearSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayOfYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var yearScheduleTypeDayOfYearPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["First","Last"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		yearScheduleTypeDayOfYearPropEnum = append(yearScheduleTypeDayOfYearPropEnum, v)
	}
}

const (

	// YearScheduleDayOfYearFirst captures enum value "First"
	YearScheduleDayOfYearFirst string = "First"

	// YearScheduleDayOfYearLast captures enum value "Last"
	YearScheduleDayOfYearLast string = "Last"
)

// prop value enum
func (m *YearSchedule) validateDayOfYearEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, yearScheduleTypeDayOfYearPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *YearSchedule) validateDayOfYear(formats strfmt.Registry) error {

	if err := validate.Required("dayOfYear", "body", m.DayOfYear); err != nil {
		return err
	}

	// value enum
	if err := m.validateDayOfYearEnum("dayOfYear", "body", *m.DayOfYear); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this year schedule based on context it is used
func (m *YearSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *YearSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *YearSchedule) UnmarshalBinary(b []byte) error {
	var res YearSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
