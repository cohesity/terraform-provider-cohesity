// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HdfsSearchParams Specifies the parameters for searching HDFS Folders and Files.
//
// swagger:model HdfsSearchParams
type HdfsSearchParams struct {

	// Specifies the search string to search the HDFS Folders and Files.
	// Required: true
	SearchString *string `json:"searchString"`

	// Specifies types as Folders or Files or both to be searched.
	// Required: true
	HdfsTypes []string `json:"hdfsTypes"`
}

// Validate validates this hdfs search params
func (m *HdfsSearchParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSearchString(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HdfsSearchParams) validateSearchString(formats strfmt.Registry) error {

	if err := validate.Required("searchString", "body", m.SearchString); err != nil {
		return err
	}

	return nil
}

var hdfsSearchParamsHdfsTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HDFSFolders","HDFSFiles"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hdfsSearchParamsHdfsTypesItemsEnum = append(hdfsSearchParamsHdfsTypesItemsEnum, v)
	}
}

func (m *HdfsSearchParams) validateHdfsTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hdfsSearchParamsHdfsTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HdfsSearchParams) validateHdfsTypes(formats strfmt.Registry) error {

	if err := validate.Required("hdfsTypes", "body", m.HdfsTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.HdfsTypes); i++ {

		// value enum
		if err := m.validateHdfsTypesItemsEnum("hdfsTypes"+"."+strconv.Itoa(i), "body", m.HdfsTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this hdfs search params based on context it is used
func (m *HdfsSearchParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HdfsSearchParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HdfsSearchParams) UnmarshalBinary(b []byte) error {
	var res HdfsSearchParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
