// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonIdentityProviderConfiguration Identity provider configuration
//
// swagger:model CommonIdentityProviderConfiguration
type CommonIdentityProviderConfiguration struct {

	// Specifies identity provider issuer id
	// Required: true
	IssuerID *string `json:"issuerId"`

	// Specifies the identity provider SSO url
	// Required: true
	SsoURL *string `json:"ssoUrl"`

	// Specifies the certificate generated for the app by the idp service when the cluster is registered as an app. This is required to verify the SAML response.
	// Required: true
	Certificate *string `json:"certificate"`

	// Specifies the filename used for the certificate. The default value is idp_certificate.pem
	CertificateFilename *string `json:"certificateFilename,omitempty"`

	// Specifies the default roles assined for all SSO users
	Roles []string `json:"roles"`

	// Specifies the SAML attribute name that contains a comma separated list of cluster roles. This sets the default roles for all SSO users. Either this field or roles must be set, this field takes higher precedence than the roles field.
	SamlAttributeName *string `json:"samlAttributeName,omitempty"`

	// Specifies if local user login is allowed. When idp is configured, only idp users are allowed to login to the cluster, local login is disabled except for users with admin role. If this flag is set to true, local (non-idp) logins are allowed for all local and AD users. Local or AD users with admin role can login always independent of this flag's setting. By default there is no local authentication i.e the value is false.
	AllowLocalUserLogin *bool `json:"allowLocalUserLogin,omitempty"`

	// Specifies whether to sign the SAML request or not. When it is set to true, SAML request will be signed. When it is set to false, SAML request is not signed. Default is false, set this flag to true if the idp site is configured to expect the SAML request from the Cluster signed. If this is set to true, users must get the cluster's certificate and upload it on the idp site.
	SignRequest *bool `json:"signRequest,omitempty"`

	// Specifies a flag to enable or disable this idp service. When it is set to true, idp service is enabled. When it is set to false, idp service is disabled. By defaut idp is enabled i.e the value is true.
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

// Validate validates this common identity provider configuration
func (m *CommonIdentityProviderConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssuerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsoURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonIdentityProviderConfiguration) validateIssuerID(formats strfmt.Registry) error {

	if err := validate.Required("issuerId", "body", m.IssuerID); err != nil {
		return err
	}

	return nil
}

func (m *CommonIdentityProviderConfiguration) validateSsoURL(formats strfmt.Registry) error {

	if err := validate.Required("ssoUrl", "body", m.SsoURL); err != nil {
		return err
	}

	return nil
}

func (m *CommonIdentityProviderConfiguration) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common identity provider configuration based on context it is used
func (m *CommonIdentityProviderConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonIdentityProviderConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonIdentityProviderConfiguration) UnmarshalBinary(b []byte) error {
	var res CommonIdentityProviderConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
