// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateGflagParameters Update Service gflags struct.
//
// Specifies the parameters for updating service gflags.
//
// swagger:model UpdateGflagParameters
type UpdateGflagParameters struct {

	// Specifies the service name and Gflags.
	ServiceFlags *ServiceGflags `json:"serviceFlags,omitempty"`

	// Specifies the reason for clearing gflags.
	Reason *string `json:"reason,omitempty"`

	// Specifies whether to apply the change immediately. If set to true, the gflag change will work without restarting the service.
	EffectiveNow *bool `json:"effectiveNow,omitempty"`

	// Skips the KUndefinedFlagPrefix validation check and allows the user to set undefined gflags, effective after service restart/upgrade
	SkipExistenceCheck *bool `json:"skipExistenceCheck,omitempty"`
}

// Validate validates this update gflag parameters
func (m *UpdateGflagParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceFlags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateGflagParameters) validateServiceFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceFlags) { // not required
		return nil
	}

	if m.ServiceFlags != nil {
		if err := m.ServiceFlags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceFlags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceFlags")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update gflag parameters based on the context it is used
func (m *UpdateGflagParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateGflagParameters) contextValidateServiceFlags(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceFlags != nil {

		if swag.IsZero(m.ServiceFlags) { // not required
			return nil
		}

		if err := m.ServiceFlags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceFlags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceFlags")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateGflagParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateGflagParameters) UnmarshalBinary(b []byte) error {
	var res UpdateGflagParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
