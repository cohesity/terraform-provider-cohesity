// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicFolder Specifies an PublicFolder item to recover.
//
// swagger:model PublicFolder
type PublicFolder struct {

	// Specifies the Unique ID of the folder.
	// Required: true
	FolderID *string `json:"folderId"`

	// Specifies whether to recover the whole PublicFolder.
	RecoverEntireFolder *bool `json:"recoverEntireFolder,omitempty"`

	// Specifies a list of item ids to recover. This field is applicable only if 'recoverEntireFolder' is false.
	ItemIds []string `json:"itemIds"`
}

// Validate validates this public folder
func (m *PublicFolder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFolderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicFolder) validateFolderID(formats strfmt.Registry) error {

	if err := validate.Required("folderId", "body", m.FolderID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this public folder based on context it is used
func (m *PublicFolder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublicFolder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicFolder) UnmarshalBinary(b []byte) error {
	var res PublicFolder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
