// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StringEntityIds Specifies the model to uniquely id an entity. This model also specifies the previous ids for a given entity.
//
// swagger:model StringEntityIds
type StringEntityIds struct {

	// Specifies the latest string entity id. This string id may or may not be same for a given entity across clusters. For version 0, the id is guaranteed to be unique across all clusters, but not same for the same entity across clusters.
	LatestID *VersionInfo `json:"latestId,omitempty"`

	// Specifies all the StringIds previously assigned to this entity. Note that it doesn't contain the latest id.
	PreviousIds []*VersionInfo `json:"previousIds"`

	// Specifies the latest source-generated ID for an entity. It provides the most current identifier assigned by the primary source system.
	LatestSourceGeneratedIds []*EntityIdentifiers `json:"latestSourceGeneratedIds"`

	// Specifies a list of previously assigned source-generated IDs for an entity. It helps in tracking the historical identifiers that were assigned by the primary source system. This can be useful for audit trails, debugging, or migration purposes.
	PreviousSourceGeneratedIds []*EntityIdentifiers `json:"previousSourceGeneratedIds"`
}

// Validate validates this string entity ids
func (m *StringEntityIds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestSourceGeneratedIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousSourceGeneratedIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StringEntityIds) validateLatestID(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestID) { // not required
		return nil
	}

	if m.LatestID != nil {
		if err := m.LatestID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latestId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latestId")
			}
			return err
		}
	}

	return nil
}

func (m *StringEntityIds) validatePreviousIds(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousIds) { // not required
		return nil
	}

	for i := 0; i < len(m.PreviousIds); i++ {
		if swag.IsZero(m.PreviousIds[i]) { // not required
			continue
		}

		if m.PreviousIds[i] != nil {
			if err := m.PreviousIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("previousIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StringEntityIds) validateLatestSourceGeneratedIds(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestSourceGeneratedIds) { // not required
		return nil
	}

	for i := 0; i < len(m.LatestSourceGeneratedIds); i++ {
		if swag.IsZero(m.LatestSourceGeneratedIds[i]) { // not required
			continue
		}

		if m.LatestSourceGeneratedIds[i] != nil {
			if err := m.LatestSourceGeneratedIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("latestSourceGeneratedIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("latestSourceGeneratedIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StringEntityIds) validatePreviousSourceGeneratedIds(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousSourceGeneratedIds) { // not required
		return nil
	}

	for i := 0; i < len(m.PreviousSourceGeneratedIds); i++ {
		if swag.IsZero(m.PreviousSourceGeneratedIds[i]) { // not required
			continue
		}

		if m.PreviousSourceGeneratedIds[i] != nil {
			if err := m.PreviousSourceGeneratedIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousSourceGeneratedIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("previousSourceGeneratedIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this string entity ids based on the context it is used
func (m *StringEntityIds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLatestID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviousIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatestSourceGeneratedIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviousSourceGeneratedIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StringEntityIds) contextValidateLatestID(ctx context.Context, formats strfmt.Registry) error {

	if m.LatestID != nil {

		if swag.IsZero(m.LatestID) { // not required
			return nil
		}

		if err := m.LatestID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latestId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latestId")
			}
			return err
		}
	}

	return nil
}

func (m *StringEntityIds) contextValidatePreviousIds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreviousIds); i++ {

		if m.PreviousIds[i] != nil {

			if swag.IsZero(m.PreviousIds[i]) { // not required
				return nil
			}

			if err := m.PreviousIds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("previousIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StringEntityIds) contextValidateLatestSourceGeneratedIds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LatestSourceGeneratedIds); i++ {

		if m.LatestSourceGeneratedIds[i] != nil {

			if swag.IsZero(m.LatestSourceGeneratedIds[i]) { // not required
				return nil
			}

			if err := m.LatestSourceGeneratedIds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("latestSourceGeneratedIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("latestSourceGeneratedIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StringEntityIds) contextValidatePreviousSourceGeneratedIds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreviousSourceGeneratedIds); i++ {

		if m.PreviousSourceGeneratedIds[i] != nil {

			if swag.IsZero(m.PreviousSourceGeneratedIds[i]) { // not required
				return nil
			}

			if err := m.PreviousSourceGeneratedIds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousSourceGeneratedIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("previousSourceGeneratedIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StringEntityIds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StringEntityIds) UnmarshalBinary(b []byte) error {
	var res StringEntityIds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
