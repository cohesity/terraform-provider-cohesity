// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LifecycleRule Specifies the Lifecycle configuration rule.
//
// swagger:model LifecycleRule
type LifecycleRule struct {

	// Specifies the Unique identifier for the rule. The value cannot be longer than 255 characters.
	// Required: true
	ID *string `json:"id"`

	// Specifies if the rule is currently being applied.
	// Required: true
	Status *bool `json:"status"`

	// Specifies the prefix used to identify objects that a lifecycle rule applies to.
	Prefix *string `json:"prefix,omitempty"`

	// Specifies the days since the initiation of an incomplete multipart upload before permanently removing all parts of the upload.
	AbortIncompleteMultipartUploadAction *AbortIncompleteMultipartUploadAction `json:"abortIncompleteMultipartUploadAction,omitempty"`

	// Specifies the expiration for the lifecycle of the object in the form of date, days and whether the object has a delete marker.
	Expiration *ExpirationAction `json:"expiration,omitempty"`

	// Specifies the filter used to identify objects that a Lifecycle Rule applies to.
	Filter *LifecycleRuleFilter `json:"filter,omitempty"`

	// Specifies when non-current object versions expire. Upon expiration, non-current object versions are permanently deleted. The action can be specified only in versioning enabled or suspended buckets.
	NonCurrentVersionExpirationAction *NonCurrentVersionExpirationAction `json:"nonCurrentVersionExpirationAction,omitempty"`
}

// Validate validates this lifecycle rule
func (m *LifecycleRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAbortIncompleteMultipartUploadAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonCurrentVersionExpirationAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LifecycleRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LifecycleRule) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *LifecycleRule) validateAbortIncompleteMultipartUploadAction(formats strfmt.Registry) error {
	if swag.IsZero(m.AbortIncompleteMultipartUploadAction) { // not required
		return nil
	}

	if m.AbortIncompleteMultipartUploadAction != nil {
		if err := m.AbortIncompleteMultipartUploadAction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("abortIncompleteMultipartUploadAction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("abortIncompleteMultipartUploadAction")
			}
			return err
		}
	}

	return nil
}

func (m *LifecycleRule) validateExpiration(formats strfmt.Registry) error {
	if swag.IsZero(m.Expiration) { // not required
		return nil
	}

	if m.Expiration != nil {
		if err := m.Expiration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expiration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expiration")
			}
			return err
		}
	}

	return nil
}

func (m *LifecycleRule) validateFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.Filter) { // not required
		return nil
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *LifecycleRule) validateNonCurrentVersionExpirationAction(formats strfmt.Registry) error {
	if swag.IsZero(m.NonCurrentVersionExpirationAction) { // not required
		return nil
	}

	if m.NonCurrentVersionExpirationAction != nil {
		if err := m.NonCurrentVersionExpirationAction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nonCurrentVersionExpirationAction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nonCurrentVersionExpirationAction")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this lifecycle rule based on the context it is used
func (m *LifecycleRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAbortIncompleteMultipartUploadAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpiration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNonCurrentVersionExpirationAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LifecycleRule) contextValidateAbortIncompleteMultipartUploadAction(ctx context.Context, formats strfmt.Registry) error {

	if m.AbortIncompleteMultipartUploadAction != nil {

		if swag.IsZero(m.AbortIncompleteMultipartUploadAction) { // not required
			return nil
		}

		if err := m.AbortIncompleteMultipartUploadAction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("abortIncompleteMultipartUploadAction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("abortIncompleteMultipartUploadAction")
			}
			return err
		}
	}

	return nil
}

func (m *LifecycleRule) contextValidateExpiration(ctx context.Context, formats strfmt.Registry) error {

	if m.Expiration != nil {

		if swag.IsZero(m.Expiration) { // not required
			return nil
		}

		if err := m.Expiration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expiration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expiration")
			}
			return err
		}
	}

	return nil
}

func (m *LifecycleRule) contextValidateFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.Filter != nil {

		if swag.IsZero(m.Filter) { // not required
			return nil
		}

		if err := m.Filter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *LifecycleRule) contextValidateNonCurrentVersionExpirationAction(ctx context.Context, formats strfmt.Registry) error {

	if m.NonCurrentVersionExpirationAction != nil {

		if swag.IsZero(m.NonCurrentVersionExpirationAction) { // not required
			return nil
		}

		if err := m.NonCurrentVersionExpirationAction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nonCurrentVersionExpirationAction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nonCurrentVersionExpirationAction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LifecycleRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LifecycleRule) UnmarshalBinary(b []byte) error {
	var res LifecycleRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
