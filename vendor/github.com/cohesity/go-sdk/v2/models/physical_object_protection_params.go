// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhysicalObjectProtectionParams Specifies the parameters specific to Physical Object Protection.
//
// swagger:model PhysicalObjectProtectionParams
type PhysicalObjectProtectionParams struct {

	// Specifies the Physical Object Protection type.
	// Required: true
	// Enum: ["kFile","kVolume"]
	ObjectProtectionType *string `json:"objectProtectionType"`

	// file object protection type params
	FileObjectProtectionTypeParams *PhysicalFileProtectionGroupParams `json:"fileObjectProtectionTypeParams,omitempty"`

	// volume object protection type params
	VolumeObjectProtectionTypeParams *PhysicalVolumeProtectionGroupParams `json:"volumeObjectProtectionTypeParams,omitempty"`
}

// Validate validates this physical object protection params
func (m *PhysicalObjectProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileObjectProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeObjectProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var physicalObjectProtectionParamsTypeObjectProtectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kFile","kVolume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		physicalObjectProtectionParamsTypeObjectProtectionTypePropEnum = append(physicalObjectProtectionParamsTypeObjectProtectionTypePropEnum, v)
	}
}

const (

	// PhysicalObjectProtectionParamsObjectProtectionTypeKFile captures enum value "kFile"
	PhysicalObjectProtectionParamsObjectProtectionTypeKFile string = "kFile"

	// PhysicalObjectProtectionParamsObjectProtectionTypeKVolume captures enum value "kVolume"
	PhysicalObjectProtectionParamsObjectProtectionTypeKVolume string = "kVolume"
)

// prop value enum
func (m *PhysicalObjectProtectionParams) validateObjectProtectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, physicalObjectProtectionParamsTypeObjectProtectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PhysicalObjectProtectionParams) validateObjectProtectionType(formats strfmt.Registry) error {

	if err := validate.Required("objectProtectionType", "body", m.ObjectProtectionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateObjectProtectionTypeEnum("objectProtectionType", "body", *m.ObjectProtectionType); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalObjectProtectionParams) validateFileObjectProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FileObjectProtectionTypeParams) { // not required
		return nil
	}

	if m.FileObjectProtectionTypeParams != nil {
		if err := m.FileObjectProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalObjectProtectionParams) validateVolumeObjectProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeObjectProtectionTypeParams) { // not required
		return nil
	}

	if m.VolumeObjectProtectionTypeParams != nil {
		if err := m.VolumeObjectProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this physical object protection params based on the context it is used
func (m *PhysicalObjectProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileObjectProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeObjectProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalObjectProtectionParams) contextValidateFileObjectProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FileObjectProtectionTypeParams != nil {

		if swag.IsZero(m.FileObjectProtectionTypeParams) { // not required
			return nil
		}

		if err := m.FileObjectProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalObjectProtectionParams) contextValidateVolumeObjectProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeObjectProtectionTypeParams != nil {

		if swag.IsZero(m.VolumeObjectProtectionTypeParams) { // not required
			return nil
		}

		if err := m.VolumeObjectProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeObjectProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeObjectProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalObjectProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalObjectProtectionParams) UnmarshalBinary(b []byte) error {
	var res PhysicalObjectProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
