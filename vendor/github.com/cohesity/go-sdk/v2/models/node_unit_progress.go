// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NodeUnitProgress Patch Operation Node Unit Progress.
//
// Specifies the progress of the patch operation on a node.
//
// swagger:model NodeUnitProgress
type NodeUnitProgress struct {

	// Specifies the IP address of the node.
	NodeIP *string `json:"nodeIp,omitempty"`

	// Specifies whether a operation is in progress on the node.
	InProgress *bool `json:"inProgress,omitempty"`

	// Specifies the patch level transition of the patch operation. For Apply operation, patch level goes up for each operation. For Revert operation, patch level goes down. Patch level zero is the base level where no patch was applied.
	PatchLevelTransition *string `json:"patchLevelTransition,omitempty"`

	// Specifies the percentage of completion of the patch operation on the node.
	Percentage *int64 `json:"percentage,omitempty"`

	// Specifies the time taken so far in this patch unit operation on the node.
	TimeTakenSeconds *int64 `json:"timeTakenSeconds,omitempty"`

	// Specifies a message about the patch operation on the node.
	NodeMessage *string `json:"nodeMessage,omitempty"`
}

// Validate validates this node unit progress
func (m *NodeUnitProgress) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this node unit progress based on context it is used
func (m *NodeUnitProgress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeUnitProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeUnitProgress) UnmarshalBinary(b []byte) error {
	var res NodeUnitProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
