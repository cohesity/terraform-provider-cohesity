// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KmsConfigurationResponseParams KMS Configuration Response Params.
//
// swagger:model KmsConfigurationResponseParams
type KmsConfigurationResponseParams struct {

	// Name of the KMS.
	Name *string `json:"name,omitempty"`

	// Type of KMS. 'InternalKms' indicates the internal cluster KMS. 'AwsKms' indicates AWS KMS. 'KmipKms' indicates any KMIP compliant KMS.
	// Enum: ["InternalKms","AwsKms","KmipKms"]
	Type *string `json:"type,omitempty"`

	// Specifies the usage type of the kms config. 'kArchival' indicates this is used for regular archival. 'kRpaasArchival' indicates this is used for RPaaS only.
	// Enum: ["kArchival","kRpaasArchival"]
	UsageType *string `json:"usageType,omitempty"`

	// AWS KMS configuration.
	AwsKmsParams *AwsKmsConfigurationResponse `json:"awsKmsParams,omitempty"`

	// KMIP compliant KMS configuration.
	KmipKmsParams *KmipKmsConfigurationResponse `json:"kmipKmsParams,omitempty"`

	// Ids of storage domains used to assign the KMS for encryption. Once an external KMS (AWS KMS or KIMP KMS) is assigned to a storage domain, it cannot be changed.
	StorageDomainIds []int64 `json:"storageDomainIds"`

	// Ids of external targets used to assign the KMS for encryption. Once an external KMS (AWS KMS or KIMP KMS) is assigned to an external target, it cannot be changed.
	ExternalTargetIds []int64 `json:"externalTargetIds"`

	// Describes the consumption of the KMS key whether it is used for local or FortKnox.
	// Enum: ["Local","FortKnox"]
	OwnershipContext *string `json:"ownershipContext,omitempty"`
}

// Validate validates this kms configuration response params
func (m *KmsConfigurationResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsKmsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKmipKmsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnershipContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var kmsConfigurationResponseParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InternalKms","AwsKms","KmipKms"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kmsConfigurationResponseParamsTypeTypePropEnum = append(kmsConfigurationResponseParamsTypeTypePropEnum, v)
	}
}

const (

	// KmsConfigurationResponseParamsTypeInternalKms captures enum value "InternalKms"
	KmsConfigurationResponseParamsTypeInternalKms string = "InternalKms"

	// KmsConfigurationResponseParamsTypeAwsKms captures enum value "AwsKms"
	KmsConfigurationResponseParamsTypeAwsKms string = "AwsKms"

	// KmsConfigurationResponseParamsTypeKmipKms captures enum value "KmipKms"
	KmsConfigurationResponseParamsTypeKmipKms string = "KmipKms"
)

// prop value enum
func (m *KmsConfigurationResponseParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kmsConfigurationResponseParamsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KmsConfigurationResponseParams) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var kmsConfigurationResponseParamsTypeUsageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kArchival","kRpaasArchival"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kmsConfigurationResponseParamsTypeUsageTypePropEnum = append(kmsConfigurationResponseParamsTypeUsageTypePropEnum, v)
	}
}

const (

	// KmsConfigurationResponseParamsUsageTypeKArchival captures enum value "kArchival"
	KmsConfigurationResponseParamsUsageTypeKArchival string = "kArchival"

	// KmsConfigurationResponseParamsUsageTypeKRpaasArchival captures enum value "kRpaasArchival"
	KmsConfigurationResponseParamsUsageTypeKRpaasArchival string = "kRpaasArchival"
)

// prop value enum
func (m *KmsConfigurationResponseParams) validateUsageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kmsConfigurationResponseParamsTypeUsageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KmsConfigurationResponseParams) validateUsageType(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsageTypeEnum("usageType", "body", *m.UsageType); err != nil {
		return err
	}

	return nil
}

func (m *KmsConfigurationResponseParams) validateAwsKmsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsKmsParams) { // not required
		return nil
	}

	if m.AwsKmsParams != nil {
		if err := m.AwsKmsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsKmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsKmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *KmsConfigurationResponseParams) validateKmipKmsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KmipKmsParams) { // not required
		return nil
	}

	if m.KmipKmsParams != nil {
		if err := m.KmipKmsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kmipKmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kmipKmsParams")
			}
			return err
		}
	}

	return nil
}

var kmsConfigurationResponseParamsTypeOwnershipContextPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Local","FortKnox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kmsConfigurationResponseParamsTypeOwnershipContextPropEnum = append(kmsConfigurationResponseParamsTypeOwnershipContextPropEnum, v)
	}
}

const (

	// KmsConfigurationResponseParamsOwnershipContextLocal captures enum value "Local"
	KmsConfigurationResponseParamsOwnershipContextLocal string = "Local"

	// KmsConfigurationResponseParamsOwnershipContextFortKnox captures enum value "FortKnox"
	KmsConfigurationResponseParamsOwnershipContextFortKnox string = "FortKnox"
)

// prop value enum
func (m *KmsConfigurationResponseParams) validateOwnershipContextEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kmsConfigurationResponseParamsTypeOwnershipContextPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KmsConfigurationResponseParams) validateOwnershipContext(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnershipContext) { // not required
		return nil
	}

	// value enum
	if err := m.validateOwnershipContextEnum("ownershipContext", "body", *m.OwnershipContext); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this kms configuration response params based on the context it is used
func (m *KmsConfigurationResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsKmsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKmipKmsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmsConfigurationResponseParams) contextValidateAwsKmsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsKmsParams != nil {

		if swag.IsZero(m.AwsKmsParams) { // not required
			return nil
		}

		if err := m.AwsKmsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsKmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsKmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *KmsConfigurationResponseParams) contextValidateKmipKmsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KmipKmsParams != nil {

		if swag.IsZero(m.KmipKmsParams) { // not required
			return nil
		}

		if err := m.KmipKmsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kmipKmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kmipKmsParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KmsConfigurationResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KmsConfigurationResponseParams) UnmarshalBinary(b []byte) error {
	var res KmsConfigurationResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
