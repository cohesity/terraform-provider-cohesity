// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosRegConfig Helios Registration Config.
//
// Specifies the Helios Registration Config.
//
// swagger:model HeliosRegConfig
type HeliosRegConfig struct {

	// Specifies the type of entity that is registered on Helios.
	// Enum: ["Rigel","Cluster","Cohesion","IBMStorageProtect"]
	EntityType *string `json:"entityType,omitempty"`

	// Specifies the Rigel Registration Config.
	RigelRegConfig *RigelRegConfig `json:"rigelRegConfig,omitempty"`

	// cohesion reg config
	CohesionRegConfig *CohesionRegistrationConfig `json:"cohesionRegConfig,omitempty"`
}

// Validate validates this helios reg config
func (m *HeliosRegConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRigelRegConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCohesionRegConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var heliosRegConfigTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rigel","Cluster","Cohesion","IBMStorageProtect"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heliosRegConfigTypeEntityTypePropEnum = append(heliosRegConfigTypeEntityTypePropEnum, v)
	}
}

const (

	// HeliosRegConfigEntityTypeRigel captures enum value "Rigel"
	HeliosRegConfigEntityTypeRigel string = "Rigel"

	// HeliosRegConfigEntityTypeCluster captures enum value "Cluster"
	HeliosRegConfigEntityTypeCluster string = "Cluster"

	// HeliosRegConfigEntityTypeCohesion captures enum value "Cohesion"
	HeliosRegConfigEntityTypeCohesion string = "Cohesion"

	// HeliosRegConfigEntityTypeIBMStorageProtect captures enum value "IBMStorageProtect"
	HeliosRegConfigEntityTypeIBMStorageProtect string = "IBMStorageProtect"
)

// prop value enum
func (m *HeliosRegConfig) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, heliosRegConfigTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HeliosRegConfig) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", *m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *HeliosRegConfig) validateRigelRegConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RigelRegConfig) { // not required
		return nil
	}

	if m.RigelRegConfig != nil {
		if err := m.RigelRegConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rigelRegConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rigelRegConfig")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosRegConfig) validateCohesionRegConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.CohesionRegConfig) { // not required
		return nil
	}

	if m.CohesionRegConfig != nil {
		if err := m.CohesionRegConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cohesionRegConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cohesionRegConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helios reg config based on the context it is used
func (m *HeliosRegConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRigelRegConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCohesionRegConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosRegConfig) contextValidateRigelRegConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RigelRegConfig != nil {

		if swag.IsZero(m.RigelRegConfig) { // not required
			return nil
		}

		if err := m.RigelRegConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rigelRegConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rigelRegConfig")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosRegConfig) contextValidateCohesionRegConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.CohesionRegConfig != nil {

		if swag.IsZero(m.CohesionRegConfig) { // not required
			return nil
		}

		if err := m.CohesionRegConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cohesionRegConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cohesionRegConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosRegConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosRegConfig) UnmarshalBinary(b []byte) error {
	var res HeliosRegConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
