// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsSourceRegistrationParams Specifies the paramaters to register an AWS source.
//
// swagger:model AwsSourceRegistrationParams
type AwsSourceRegistrationParams struct {

	// Specifies the AWS Subscription type (Commercial/Gov).
	// Required: true
	// Enum: ["kAWSCommercial","kAWSGovCloud","kAWSC2S"]
	SubscriptionType *string `json:"subscriptionType"`

	// Specifies the parameters to register a commercial AWS.
	StandardParams *StandardParams `json:"standardParams,omitempty"`

	// Specifies the s3 specific parameters for source registration.
	S3Params *S3SpecificParams `json:"s3Params,omitempty"`
}

// Validate validates this aws source registration params
func (m *AwsSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubscriptionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandardParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3Params(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var awsSourceRegistrationParamsTypeSubscriptionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAWSCommercial","kAWSGovCloud","kAWSC2S"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsSourceRegistrationParamsTypeSubscriptionTypePropEnum = append(awsSourceRegistrationParamsTypeSubscriptionTypePropEnum, v)
	}
}

const (

	// AwsSourceRegistrationParamsSubscriptionTypeKAWSCommercial captures enum value "kAWSCommercial"
	AwsSourceRegistrationParamsSubscriptionTypeKAWSCommercial string = "kAWSCommercial"

	// AwsSourceRegistrationParamsSubscriptionTypeKAWSGovCloud captures enum value "kAWSGovCloud"
	AwsSourceRegistrationParamsSubscriptionTypeKAWSGovCloud string = "kAWSGovCloud"

	// AwsSourceRegistrationParamsSubscriptionTypeKAWSC2S captures enum value "kAWSC2S"
	AwsSourceRegistrationParamsSubscriptionTypeKAWSC2S string = "kAWSC2S"
)

// prop value enum
func (m *AwsSourceRegistrationParams) validateSubscriptionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, awsSourceRegistrationParamsTypeSubscriptionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AwsSourceRegistrationParams) validateSubscriptionType(formats strfmt.Registry) error {

	if err := validate.Required("subscriptionType", "body", m.SubscriptionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateSubscriptionTypeEnum("subscriptionType", "body", *m.SubscriptionType); err != nil {
		return err
	}

	return nil
}

func (m *AwsSourceRegistrationParams) validateStandardParams(formats strfmt.Registry) error {
	if swag.IsZero(m.StandardParams) { // not required
		return nil
	}

	if m.StandardParams != nil {
		if err := m.StandardParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standardParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standardParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsSourceRegistrationParams) validateS3Params(formats strfmt.Registry) error {
	if swag.IsZero(m.S3Params) { // not required
		return nil
	}

	if m.S3Params != nil {
		if err := m.S3Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3Params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws source registration params based on the context it is used
func (m *AwsSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStandardParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsSourceRegistrationParams) contextValidateStandardParams(ctx context.Context, formats strfmt.Registry) error {

	if m.StandardParams != nil {

		if swag.IsZero(m.StandardParams) { // not required
			return nil
		}

		if err := m.StandardParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standardParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standardParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsSourceRegistrationParams) contextValidateS3Params(ctx context.Context, formats strfmt.Registry) error {

	if m.S3Params != nil {

		if swag.IsZero(m.S3Params) { // not required
			return nil
		}

		if err := m.S3Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3Params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res AwsSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
