// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectProgressInfo Specifies the progress of an object.
//
// swagger:model ObjectProgressInfo
type ObjectProgressInfo struct {
	ObjectIdentifier

	ProgressTaskInfo

	// Specifies progress for failed attempts of this object.
	FailedAttempts []*ProgressTaskInfo `json:"failedAttempts"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ObjectProgressInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ObjectIdentifier
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ObjectIdentifier = aO0

	// AO1
	var aO1 ProgressTaskInfo
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.ProgressTaskInfo = aO1

	// AO2
	var dataAO2 struct {
		FailedAttempts []*ProgressTaskInfo `json:"failedAttempts"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.FailedAttempts = dataAO2.FailedAttempts

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ObjectProgressInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.ObjectIdentifier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.ProgressTaskInfo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		FailedAttempts []*ProgressTaskInfo `json:"failedAttempts"`
	}

	dataAO2.FailedAttempts = m.FailedAttempts

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this object progress info
func (m *ObjectProgressInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectIdentifier
	if err := m.ObjectIdentifier.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ProgressTaskInfo
	if err := m.ProgressTaskInfo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedAttempts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectProgressInfo) validateFailedAttempts(formats strfmt.Registry) error {

	if swag.IsZero(m.FailedAttempts) { // not required
		return nil
	}

	for i := 0; i < len(m.FailedAttempts); i++ {
		if swag.IsZero(m.FailedAttempts[i]) { // not required
			continue
		}

		if m.FailedAttempts[i] != nil {
			if err := m.FailedAttempts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failedAttempts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failedAttempts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this object progress info based on the context it is used
func (m *ObjectProgressInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectIdentifier
	if err := m.ObjectIdentifier.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ProgressTaskInfo
	if err := m.ProgressTaskInfo.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailedAttempts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectProgressInfo) contextValidateFailedAttempts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FailedAttempts); i++ {

		if m.FailedAttempts[i] != nil {

			if swag.IsZero(m.FailedAttempts[i]) { // not required
				return nil
			}

			if err := m.FailedAttempts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failedAttempts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failedAttempts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectProgressInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectProgressInfo) UnmarshalBinary(b []byte) error {
	var res ObjectProgressInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
