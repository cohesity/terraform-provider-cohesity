// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareObjectEntityParams Object details for Vmware.
//
// swagger:model VmwareObjectEntityParams
type VmwareObjectEntityParams struct {

	// VMware Object type.
	// Enum: ["kVCenter","kStandaloneHost","kvCloudDirector","kFolder","kDatacenter","kComputeResource","kClusterComputeResource","kResourcePool","kDatastore","kHostSystem","kVirtualMachine","kVirtualApp","kStoragePod","kNetwork","kDistributedVirtualPortgroup","kTagCategory","kTag","kOpaqueNetwork","kOrganization","kVirtualDatacenter","kCatalog","kOrgMetadata","kStoragePolicy","kVirtualAppTemplate"]
	Type *string `json:"type,omitempty"`

	// Specifies the Continuous Data Protection (CDP) details about this object. This is only available if this object if protected by a CDP enabled policy.
	CdpInfo *VmwareCdpObject `json:"cdpInfo,omitempty"`

	// Specifies if the object is a VM template.
	IsTemplate *bool `json:"isTemplate,omitempty"`
}

// Validate validates this vmware object entity params
func (m *VmwareObjectEntityParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdpInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmwareObjectEntityParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVCenter","kStandaloneHost","kvCloudDirector","kFolder","kDatacenter","kComputeResource","kClusterComputeResource","kResourcePool","kDatastore","kHostSystem","kVirtualMachine","kVirtualApp","kStoragePod","kNetwork","kDistributedVirtualPortgroup","kTagCategory","kTag","kOpaqueNetwork","kOrganization","kVirtualDatacenter","kCatalog","kOrgMetadata","kStoragePolicy","kVirtualAppTemplate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmwareObjectEntityParamsTypeTypePropEnum = append(vmwareObjectEntityParamsTypeTypePropEnum, v)
	}
}

const (

	// VmwareObjectEntityParamsTypeKVCenter captures enum value "kVCenter"
	VmwareObjectEntityParamsTypeKVCenter string = "kVCenter"

	// VmwareObjectEntityParamsTypeKStandaloneHost captures enum value "kStandaloneHost"
	VmwareObjectEntityParamsTypeKStandaloneHost string = "kStandaloneHost"

	// VmwareObjectEntityParamsTypeKvCloudDirector captures enum value "kvCloudDirector"
	VmwareObjectEntityParamsTypeKvCloudDirector string = "kvCloudDirector"

	// VmwareObjectEntityParamsTypeKFolder captures enum value "kFolder"
	VmwareObjectEntityParamsTypeKFolder string = "kFolder"

	// VmwareObjectEntityParamsTypeKDatacenter captures enum value "kDatacenter"
	VmwareObjectEntityParamsTypeKDatacenter string = "kDatacenter"

	// VmwareObjectEntityParamsTypeKComputeResource captures enum value "kComputeResource"
	VmwareObjectEntityParamsTypeKComputeResource string = "kComputeResource"

	// VmwareObjectEntityParamsTypeKClusterComputeResource captures enum value "kClusterComputeResource"
	VmwareObjectEntityParamsTypeKClusterComputeResource string = "kClusterComputeResource"

	// VmwareObjectEntityParamsTypeKResourcePool captures enum value "kResourcePool"
	VmwareObjectEntityParamsTypeKResourcePool string = "kResourcePool"

	// VmwareObjectEntityParamsTypeKDatastore captures enum value "kDatastore"
	VmwareObjectEntityParamsTypeKDatastore string = "kDatastore"

	// VmwareObjectEntityParamsTypeKHostSystem captures enum value "kHostSystem"
	VmwareObjectEntityParamsTypeKHostSystem string = "kHostSystem"

	// VmwareObjectEntityParamsTypeKVirtualMachine captures enum value "kVirtualMachine"
	VmwareObjectEntityParamsTypeKVirtualMachine string = "kVirtualMachine"

	// VmwareObjectEntityParamsTypeKVirtualApp captures enum value "kVirtualApp"
	VmwareObjectEntityParamsTypeKVirtualApp string = "kVirtualApp"

	// VmwareObjectEntityParamsTypeKStoragePod captures enum value "kStoragePod"
	VmwareObjectEntityParamsTypeKStoragePod string = "kStoragePod"

	// VmwareObjectEntityParamsTypeKNetwork captures enum value "kNetwork"
	VmwareObjectEntityParamsTypeKNetwork string = "kNetwork"

	// VmwareObjectEntityParamsTypeKDistributedVirtualPortgroup captures enum value "kDistributedVirtualPortgroup"
	VmwareObjectEntityParamsTypeKDistributedVirtualPortgroup string = "kDistributedVirtualPortgroup"

	// VmwareObjectEntityParamsTypeKTagCategory captures enum value "kTagCategory"
	VmwareObjectEntityParamsTypeKTagCategory string = "kTagCategory"

	// VmwareObjectEntityParamsTypeKTag captures enum value "kTag"
	VmwareObjectEntityParamsTypeKTag string = "kTag"

	// VmwareObjectEntityParamsTypeKOpaqueNetwork captures enum value "kOpaqueNetwork"
	VmwareObjectEntityParamsTypeKOpaqueNetwork string = "kOpaqueNetwork"

	// VmwareObjectEntityParamsTypeKOrganization captures enum value "kOrganization"
	VmwareObjectEntityParamsTypeKOrganization string = "kOrganization"

	// VmwareObjectEntityParamsTypeKVirtualDatacenter captures enum value "kVirtualDatacenter"
	VmwareObjectEntityParamsTypeKVirtualDatacenter string = "kVirtualDatacenter"

	// VmwareObjectEntityParamsTypeKCatalog captures enum value "kCatalog"
	VmwareObjectEntityParamsTypeKCatalog string = "kCatalog"

	// VmwareObjectEntityParamsTypeKOrgMetadata captures enum value "kOrgMetadata"
	VmwareObjectEntityParamsTypeKOrgMetadata string = "kOrgMetadata"

	// VmwareObjectEntityParamsTypeKStoragePolicy captures enum value "kStoragePolicy"
	VmwareObjectEntityParamsTypeKStoragePolicy string = "kStoragePolicy"

	// VmwareObjectEntityParamsTypeKVirtualAppTemplate captures enum value "kVirtualAppTemplate"
	VmwareObjectEntityParamsTypeKVirtualAppTemplate string = "kVirtualAppTemplate"
)

// prop value enum
func (m *VmwareObjectEntityParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmwareObjectEntityParamsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VmwareObjectEntityParams) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *VmwareObjectEntityParams) validateCdpInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CdpInfo) { // not required
		return nil
	}

	if m.CdpInfo != nil {
		if err := m.CdpInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware object entity params based on the context it is used
func (m *VmwareObjectEntityParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCdpInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareObjectEntityParams) contextValidateCdpInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CdpInfo != nil {

		if swag.IsZero(m.CdpInfo) { // not required
			return nil
		}

		if err := m.CdpInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareObjectEntityParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareObjectEntityParams) UnmarshalBinary(b []byte) error {
	var res VmwareObjectEntityParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
