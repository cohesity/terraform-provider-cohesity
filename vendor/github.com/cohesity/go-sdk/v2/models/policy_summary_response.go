// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicySummaryResponse Protection Policy Summary Response.
//
// Specifies the details about the Protection Policy Summary.
//
// swagger:model PolicySummaryResponse
type PolicySummaryResponse struct {

	// Specifies the Protection Policy for which the summary is requested.
	Policy *ProtectionPolicy `json:"policy,omitempty"`

	// Specifies the summary of the last Protection Runs of all the related Protection Sources and Protection Groups.
	LastProtectionRunSummary *LastProtectionRunSummary `json:"lastProtectionRunSummary,omitempty"`

	// Specifies the aggregated summary of the Protection Runs.
	ProtectionRunsSummary *ProtectionRunsInPolicySummary `json:"protectionRunsSummary,omitempty"`

	// Specifies the list of Protection Sources which are protected under the given policy. This is only populated if the policy is of type kRPO.
	ProtectionSourcesSummary []*ProtectionSourceSummary `json:"protectionSourcesSummary"`

	// Specifies the list of Protection Groups associated with the given Protection Policy. This is only populated if the type of the Protection Policy is kRegular.
	ProtectionGroupsSummary []*ProtectionGroupRun `json:"protectionGroupsSummary"`

	// If there are more results to display, use this value to get the next set of results, by using this value in paginationCookie param for the next request to GetProtectionPolicySummary.
	PaginationCookie *string `json:"paginationCookie,omitempty"`
}

// Validate validates this policy summary response
func (m *PolicySummaryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastProtectionRunSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionRunsSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionSourcesSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionGroupsSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicySummaryResponse) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *PolicySummaryResponse) validateLastProtectionRunSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.LastProtectionRunSummary) { // not required
		return nil
	}

	if m.LastProtectionRunSummary != nil {
		if err := m.LastProtectionRunSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastProtectionRunSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastProtectionRunSummary")
			}
			return err
		}
	}

	return nil
}

func (m *PolicySummaryResponse) validateProtectionRunsSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionRunsSummary) { // not required
		return nil
	}

	if m.ProtectionRunsSummary != nil {
		if err := m.ProtectionRunsSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionRunsSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionRunsSummary")
			}
			return err
		}
	}

	return nil
}

func (m *PolicySummaryResponse) validateProtectionSourcesSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionSourcesSummary) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionSourcesSummary); i++ {
		if swag.IsZero(m.ProtectionSourcesSummary[i]) { // not required
			continue
		}

		if m.ProtectionSourcesSummary[i] != nil {
			if err := m.ProtectionSourcesSummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionSourcesSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionSourcesSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicySummaryResponse) validateProtectionGroupsSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionGroupsSummary) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionGroupsSummary); i++ {
		if swag.IsZero(m.ProtectionGroupsSummary[i]) { // not required
			continue
		}

		if m.ProtectionGroupsSummary[i] != nil {
			if err := m.ProtectionGroupsSummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionGroupsSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionGroupsSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policy summary response based on the context it is used
func (m *PolicySummaryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastProtectionRunSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionRunsSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionSourcesSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionGroupsSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicySummaryResponse) contextValidatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.Policy != nil {

		if swag.IsZero(m.Policy) { // not required
			return nil
		}

		if err := m.Policy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *PolicySummaryResponse) contextValidateLastProtectionRunSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.LastProtectionRunSummary != nil {

		if swag.IsZero(m.LastProtectionRunSummary) { // not required
			return nil
		}

		if err := m.LastProtectionRunSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastProtectionRunSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastProtectionRunSummary")
			}
			return err
		}
	}

	return nil
}

func (m *PolicySummaryResponse) contextValidateProtectionRunsSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionRunsSummary != nil {

		if swag.IsZero(m.ProtectionRunsSummary) { // not required
			return nil
		}

		if err := m.ProtectionRunsSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectionRunsSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protectionRunsSummary")
			}
			return err
		}
	}

	return nil
}

func (m *PolicySummaryResponse) contextValidateProtectionSourcesSummary(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionSourcesSummary); i++ {

		if m.ProtectionSourcesSummary[i] != nil {

			if swag.IsZero(m.ProtectionSourcesSummary[i]) { // not required
				return nil
			}

			if err := m.ProtectionSourcesSummary[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionSourcesSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionSourcesSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicySummaryResponse) contextValidateProtectionGroupsSummary(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionGroupsSummary); i++ {

		if m.ProtectionGroupsSummary[i] != nil {

			if swag.IsZero(m.ProtectionGroupsSummary[i]) { // not required
				return nil
			}

			if err := m.ProtectionGroupsSummary[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionGroupsSummary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionGroupsSummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicySummaryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicySummaryResponse) UnmarshalBinary(b []byte) error {
	var res PolicySummaryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
