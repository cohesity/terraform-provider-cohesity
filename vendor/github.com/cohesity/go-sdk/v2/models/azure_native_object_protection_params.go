// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AzureNativeObjectProtectionParams Azure Native Object Protection Request Params.
//
// Specifies the parameters which are specific to Azure Object Protection Groups using Azure native APIs. Atlease one of tags or objects must be specified.
//
// swagger:model AzureNativeObjectProtectionParams
type AzureNativeObjectProtectionParams struct {

	// Specifies the objects to be protected.
	Objects []*AzureObjectLevelParams `json:"objects"`

	// Specifies the the details of network used in transferring the data from source account to Cohesity cluster.
	DataTransferInfo *DataTransferInfo `json:"dataTransferInfo,omitempty"`

	// Specifies the parameters to exclude disks attached to Azure VM at job level.
	DiskExclusionParams *AzureDiskExclusionParams `json:"diskExclusionParams,omitempty"`
}

// Validate validates this azure native object protection params
func (m *AzureNativeObjectProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataTransferInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskExclusionParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureNativeObjectProtectionParams) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureNativeObjectProtectionParams) validateDataTransferInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DataTransferInfo) { // not required
		return nil
	}

	if m.DataTransferInfo != nil {
		if err := m.DataTransferInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataTransferInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataTransferInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AzureNativeObjectProtectionParams) validateDiskExclusionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskExclusionParams) { // not required
		return nil
	}

	if m.DiskExclusionParams != nil {
		if err := m.DiskExclusionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskExclusionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskExclusionParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure native object protection params based on the context it is used
func (m *AzureNativeObjectProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataTransferInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiskExclusionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureNativeObjectProtectionParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureNativeObjectProtectionParams) contextValidateDataTransferInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DataTransferInfo != nil {

		if swag.IsZero(m.DataTransferInfo) { // not required
			return nil
		}

		if err := m.DataTransferInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataTransferInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataTransferInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AzureNativeObjectProtectionParams) contextValidateDiskExclusionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskExclusionParams != nil {

		if swag.IsZero(m.DiskExclusionParams) { // not required
			return nil
		}

		if err := m.DiskExclusionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskExclusionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskExclusionParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureNativeObjectProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureNativeObjectProtectionParams) UnmarshalBinary(b []byte) error {
	var res AzureNativeObjectProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
