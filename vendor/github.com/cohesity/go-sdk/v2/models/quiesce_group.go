// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuiesceGroup Kubernetes Quiesce Group
//
// Specifies the quiesce group for kubernetes.
//
// swagger:model QuiesceGroup
type QuiesceGroup struct {

	// Specifies a list of quiesce rules.
	// Required: true
	QuiesceRules []*QuiesceRule `json:"quiesceRules"`

	// Specifies quiesce mode for applying quiesce rules.
	// Required: true
	// Enum: ["kQuiesceTogether","kQuiesceIndependently"]
	QuiesceMode *string `json:"quiesceMode"`
}

// Validate validates this quiesce group
func (m *QuiesceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuiesceRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuiesceMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuiesceGroup) validateQuiesceRules(formats strfmt.Registry) error {

	if err := validate.Required("quiesceRules", "body", m.QuiesceRules); err != nil {
		return err
	}

	for i := 0; i < len(m.QuiesceRules); i++ {
		if swag.IsZero(m.QuiesceRules[i]) { // not required
			continue
		}

		if m.QuiesceRules[i] != nil {
			if err := m.QuiesceRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quiesceRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("quiesceRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var quiesceGroupTypeQuiesceModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kQuiesceTogether","kQuiesceIndependently"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quiesceGroupTypeQuiesceModePropEnum = append(quiesceGroupTypeQuiesceModePropEnum, v)
	}
}

const (

	// QuiesceGroupQuiesceModeKQuiesceTogether captures enum value "kQuiesceTogether"
	QuiesceGroupQuiesceModeKQuiesceTogether string = "kQuiesceTogether"

	// QuiesceGroupQuiesceModeKQuiesceIndependently captures enum value "kQuiesceIndependently"
	QuiesceGroupQuiesceModeKQuiesceIndependently string = "kQuiesceIndependently"
)

// prop value enum
func (m *QuiesceGroup) validateQuiesceModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, quiesceGroupTypeQuiesceModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QuiesceGroup) validateQuiesceMode(formats strfmt.Registry) error {

	if err := validate.Required("quiesceMode", "body", m.QuiesceMode); err != nil {
		return err
	}

	// value enum
	if err := m.validateQuiesceModeEnum("quiesceMode", "body", *m.QuiesceMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this quiesce group based on the context it is used
func (m *QuiesceGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuiesceRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuiesceGroup) contextValidateQuiesceRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QuiesceRules); i++ {

		if m.QuiesceRules[i] != nil {

			if swag.IsZero(m.QuiesceRules[i]) { // not required
				return nil
			}

			if err := m.QuiesceRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quiesceRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("quiesceRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuiesceGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuiesceGroup) UnmarshalBinary(b []byte) error {
	var res QuiesceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
