// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeystoneScopeParams Specifies scope paramteres of a Keystone.
//
// swagger:model KeystoneScopeParams
type KeystoneScopeParams struct {

	// Specifies the scope type.
	// Required: true
	// Enum: ["Project","Domain"]
	Type *string `json:"type"`

	// Specifies the parameters for domain type scope.
	DomainScopeParams *DomainScopeParams `json:"domainScopeParams,omitempty"`

	// Specifies the parameter for project type scope.
	ProjectScopeParams *ProjectScopeParams `json:"projectScopeParams,omitempty"`
}

// Validate validates this keystone scope params
func (m *KeystoneScopeParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainScopeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectScopeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var keystoneScopeParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Project","Domain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keystoneScopeParamsTypeTypePropEnum = append(keystoneScopeParamsTypeTypePropEnum, v)
	}
}

const (

	// KeystoneScopeParamsTypeProject captures enum value "Project"
	KeystoneScopeParamsTypeProject string = "Project"

	// KeystoneScopeParamsTypeDomain captures enum value "Domain"
	KeystoneScopeParamsTypeDomain string = "Domain"
)

// prop value enum
func (m *KeystoneScopeParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, keystoneScopeParamsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KeystoneScopeParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *KeystoneScopeParams) validateDomainScopeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DomainScopeParams) { // not required
		return nil
	}

	if m.DomainScopeParams != nil {
		if err := m.DomainScopeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domainScopeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domainScopeParams")
			}
			return err
		}
	}

	return nil
}

func (m *KeystoneScopeParams) validateProjectScopeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectScopeParams) { // not required
		return nil
	}

	if m.ProjectScopeParams != nil {
		if err := m.ProjectScopeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectScopeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectScopeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this keystone scope params based on the context it is used
func (m *KeystoneScopeParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDomainScopeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectScopeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeystoneScopeParams) contextValidateDomainScopeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DomainScopeParams != nil {

		if swag.IsZero(m.DomainScopeParams) { // not required
			return nil
		}

		if err := m.DomainScopeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domainScopeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domainScopeParams")
			}
			return err
		}
	}

	return nil
}

func (m *KeystoneScopeParams) contextValidateProjectScopeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ProjectScopeParams != nil {

		if swag.IsZero(m.ProjectScopeParams) { // not required
			return nil
		}

		if err := m.ProjectScopeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectScopeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectScopeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeystoneScopeParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeystoneScopeParams) UnmarshalBinary(b []byte) error {
	var res KeystoneScopeParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
