// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HyperVMountVolumesOriginalTargetConfig HyperV Mount Volumes Original Target Config.
//
// Specifies the configuration for mounting volumes to the original target.
//
// swagger:model HyperVMountVolumesOriginalTargetConfig
type HyperVMountVolumesOriginalTargetConfig struct {

	// Specifies whether the volumes need to be online within the target environment after attaching the disks. For linux VMs, this should always be set to false because bring disks online is only supported for Windows VM. For Windows, this is optional. If this is set to true, HyperV Integration Services must be installed on the VM.
	// Required: true
	BringDisksOnline *bool `json:"bringDisksOnline"`

	// Specifies credentials to access the target VM.
	TargetVMCredentials *Credentials `json:"targetVmCredentials,omitempty"`
}

// Validate validates this hyper v mount volumes original target config
func (m *HyperVMountVolumesOriginalTargetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBringDisksOnline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetVMCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperVMountVolumesOriginalTargetConfig) validateBringDisksOnline(formats strfmt.Registry) error {

	if err := validate.Required("bringDisksOnline", "body", m.BringDisksOnline); err != nil {
		return err
	}

	return nil
}

func (m *HyperVMountVolumesOriginalTargetConfig) validateTargetVMCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetVMCredentials) { // not required
		return nil
	}

	if m.TargetVMCredentials != nil {
		if err := m.TargetVMCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVmCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVmCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hyper v mount volumes original target config based on the context it is used
func (m *HyperVMountVolumesOriginalTargetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetVMCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperVMountVolumesOriginalTargetConfig) contextValidateTargetVMCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetVMCredentials != nil {

		if swag.IsZero(m.TargetVMCredentials) { // not required
			return nil
		}

		if err := m.TargetVMCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVmCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVmCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperVMountVolumesOriginalTargetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperVMountVolumesOriginalTargetConfig) UnmarshalBinary(b []byte) error {
	var res HyperVMountVolumesOriginalTargetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
