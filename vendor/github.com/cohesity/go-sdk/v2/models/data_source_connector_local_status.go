// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataSourceConnectorLocalStatus Data-Source Connector Status
//
// Specifies the data-source connector status.
//
// swagger:model DataSourceConnectorLocalStatus
type DataSourceConnectorLocalStatus struct {

	// Specifies the registration status.
	RegistrationStatus *DataSourceConnectorRegistrationStatus `json:"registrationStatus,omitempty"`

	// Specifies the connection status between connector and the cluster.
	ClusterConnectionStatus *DataSourceConnectorClusterConnectionStatus `json:"clusterConnectionStatus,omitempty"`

	// Flag to indicate if connector certificate is valid.
	IsCertificateValid *bool `json:"isCertificateValid,omitempty"`
}

// Validate validates this data source connector local status
func (m *DataSourceConnectorLocalStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegistrationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataSourceConnectorLocalStatus) validateRegistrationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationStatus) { // not required
		return nil
	}

	if m.RegistrationStatus != nil {
		if err := m.RegistrationStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrationStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registrationStatus")
			}
			return err
		}
	}

	return nil
}

func (m *DataSourceConnectorLocalStatus) validateClusterConnectionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterConnectionStatus) { // not required
		return nil
	}

	if m.ClusterConnectionStatus != nil {
		if err := m.ClusterConnectionStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterConnectionStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterConnectionStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data source connector local status based on the context it is used
func (m *DataSourceConnectorLocalStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegistrationStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterConnectionStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataSourceConnectorLocalStatus) contextValidateRegistrationStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.RegistrationStatus != nil {

		if swag.IsZero(m.RegistrationStatus) { // not required
			return nil
		}

		if err := m.RegistrationStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrationStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registrationStatus")
			}
			return err
		}
	}

	return nil
}

func (m *DataSourceConnectorLocalStatus) contextValidateClusterConnectionStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterConnectionStatus != nil {

		if swag.IsZero(m.ClusterConnectionStatus) { // not required
			return nil
		}

		if err := m.ClusterConnectionStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterConnectionStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterConnectionStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataSourceConnectorLocalStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSourceConnectorLocalStatus) UnmarshalBinary(b []byte) error {
	var res DataSourceConnectorLocalStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
