// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectorPatchStatus Data-Source Connector Patch Status.
//
// Specifies patch status for the data-source connector. For example when the patch started, current status of the patch, errors for patch failure etc.
//
// swagger:model ConnectorPatchStatus
type ConnectorPatchStatus struct {

	// Specifies the timestamp in UNIX time (milliseconds) when the connector patch was triggered.
	// Required: true
	StartTimestampMsecs *int64 `json:"startTimestampMsecs"`

	// Specifies the most recent timestamp in UNIX time (milliseconds) when the connector patch status(InProgress/ Failed/Success/NotStarted) was fetched.
	LastStatusFetchedTimestampMsecs *int64 `json:"lastStatusFetchedTimestampMsecs,omitempty"`

	// Specifies error message for patch failure. Will be non empty if the patch failed. In all other cases, this will be empty.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Specifies the last fetched patch status of the connector.
	// Required: true
	// Enum: ["NotStarted","InProgress","Succeeded","Failed"]
	Status *string `json:"status"`
}

// Validate validates this connector patch status
func (m *ConnectorPatchStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartTimestampMsecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectorPatchStatus) validateStartTimestampMsecs(formats strfmt.Registry) error {

	if err := validate.Required("startTimestampMsecs", "body", m.StartTimestampMsecs); err != nil {
		return err
	}

	return nil
}

var connectorPatchStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotStarted","InProgress","Succeeded","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		connectorPatchStatusTypeStatusPropEnum = append(connectorPatchStatusTypeStatusPropEnum, v)
	}
}

const (

	// ConnectorPatchStatusStatusNotStarted captures enum value "NotStarted"
	ConnectorPatchStatusStatusNotStarted string = "NotStarted"

	// ConnectorPatchStatusStatusInProgress captures enum value "InProgress"
	ConnectorPatchStatusStatusInProgress string = "InProgress"

	// ConnectorPatchStatusStatusSucceeded captures enum value "Succeeded"
	ConnectorPatchStatusStatusSucceeded string = "Succeeded"

	// ConnectorPatchStatusStatusFailed captures enum value "Failed"
	ConnectorPatchStatusStatusFailed string = "Failed"
)

// prop value enum
func (m *ConnectorPatchStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, connectorPatchStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConnectorPatchStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this connector patch status based on context it is used
func (m *ConnectorPatchStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorPatchStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorPatchStatus) UnmarshalBinary(b []byte) error {
	var res ConnectorPatchStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
