// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicationTargetResult Replication result for a target.
//
// Replication result for a target.
//
// swagger:model ReplicationTargetResult
type ReplicationTargetResult struct {
	ReplicationTargetSummaryInfo

	// Specifies the start time of replication in Unix epoch Timestamp(in microseconds) for a target.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the end time of replication in Unix epoch Timestamp(in microseconds) for a target.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the time when the replication is queued for schedule in Unix epoch Timestamp(in microseconds) for a target.
	QueuedTimeUsecs *int64 `json:"queuedTimeUsecs,omitempty"`

	// Status of the replication for a target. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]
	Status *string `json:"status,omitempty"`

	// Message about the replication run.
	Message *string `json:"message,omitempty"`

	// Specifies the progress in percentage.
	PercentageCompleted *int32 `json:"percentageCompleted,omitempty"`

	// Replication data statistics for a target.
	Stats *ReplicationDataStats `json:"stats,omitempty"`

	// Specifies whether the snapshot is deleted manually.
	IsManuallyDeleted *bool `json:"isManuallyDeleted,omitempty"`

	// Specifies the expiry time of attempt in Unix epoch Timestamp (in microseconds) for an object.
	ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

	// Task UID for a replication protection run. This is for tasks that are replicated from another cluster.
	ReplicationTaskID *string `json:"replicationTaskId,omitempty"`

	// Specifies the number of metadata actions completed during the protection run.
	EntriesChanged *int64 `json:"entriesChanged,omitempty"`

	// Specifies the direction of the replication. If the snapshot is replicated to this cluster, then isInBound is true. If the snapshot is replicated from this cluster to another cluster, then isInBound is false.
	IsInBound *bool `json:"isInBound,omitempty"`

	// Specifies the dataLock constraints for the replication target.
	DataLockConstraints *DataLockConstraints `json:"dataLockConstraints,omitempty"`

	// Specifies the legal hold status for a replication target.
	OnLegalHold *bool `json:"onLegalHold,omitempty"`

	// Specifies whether view based replication was used. In this case, the view containing all objects is replicated as a whole instead of replicating on a per object basis.
	MultiObjectReplication *bool `json:"multiObjectReplication,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ReplicationTargetResult) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ReplicationTargetSummaryInfo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ReplicationTargetSummaryInfo = aO0

	// AO1
	var dataAO1 struct {
		StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

		EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

		QueuedTimeUsecs *int64 `json:"queuedTimeUsecs,omitempty"`

		Status *string `json:"status,omitempty"`

		Message *string `json:"message,omitempty"`

		PercentageCompleted *int32 `json:"percentageCompleted,omitempty"`

		Stats *ReplicationDataStats `json:"stats,omitempty"`

		IsManuallyDeleted *bool `json:"isManuallyDeleted,omitempty"`

		ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

		ReplicationTaskID *string `json:"replicationTaskId,omitempty"`

		EntriesChanged *int64 `json:"entriesChanged,omitempty"`

		IsInBound *bool `json:"isInBound,omitempty"`

		DataLockConstraints *DataLockConstraints `json:"dataLockConstraints,omitempty"`

		OnLegalHold *bool `json:"onLegalHold,omitempty"`

		MultiObjectReplication *bool `json:"multiObjectReplication,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.StartTimeUsecs = dataAO1.StartTimeUsecs

	m.EndTimeUsecs = dataAO1.EndTimeUsecs

	m.QueuedTimeUsecs = dataAO1.QueuedTimeUsecs

	m.Status = dataAO1.Status

	m.Message = dataAO1.Message

	m.PercentageCompleted = dataAO1.PercentageCompleted

	m.Stats = dataAO1.Stats

	m.IsManuallyDeleted = dataAO1.IsManuallyDeleted

	m.ExpiryTimeUsecs = dataAO1.ExpiryTimeUsecs

	m.ReplicationTaskID = dataAO1.ReplicationTaskID

	m.EntriesChanged = dataAO1.EntriesChanged

	m.IsInBound = dataAO1.IsInBound

	m.DataLockConstraints = dataAO1.DataLockConstraints

	m.OnLegalHold = dataAO1.OnLegalHold

	m.MultiObjectReplication = dataAO1.MultiObjectReplication

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ReplicationTargetResult) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ReplicationTargetSummaryInfo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

		EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

		QueuedTimeUsecs *int64 `json:"queuedTimeUsecs,omitempty"`

		Status *string `json:"status,omitempty"`

		Message *string `json:"message,omitempty"`

		PercentageCompleted *int32 `json:"percentageCompleted,omitempty"`

		Stats *ReplicationDataStats `json:"stats,omitempty"`

		IsManuallyDeleted *bool `json:"isManuallyDeleted,omitempty"`

		ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

		ReplicationTaskID *string `json:"replicationTaskId,omitempty"`

		EntriesChanged *int64 `json:"entriesChanged,omitempty"`

		IsInBound *bool `json:"isInBound,omitempty"`

		DataLockConstraints *DataLockConstraints `json:"dataLockConstraints,omitempty"`

		OnLegalHold *bool `json:"onLegalHold,omitempty"`

		MultiObjectReplication *bool `json:"multiObjectReplication,omitempty"`
	}

	dataAO1.StartTimeUsecs = m.StartTimeUsecs

	dataAO1.EndTimeUsecs = m.EndTimeUsecs

	dataAO1.QueuedTimeUsecs = m.QueuedTimeUsecs

	dataAO1.Status = m.Status

	dataAO1.Message = m.Message

	dataAO1.PercentageCompleted = m.PercentageCompleted

	dataAO1.Stats = m.Stats

	dataAO1.IsManuallyDeleted = m.IsManuallyDeleted

	dataAO1.ExpiryTimeUsecs = m.ExpiryTimeUsecs

	dataAO1.ReplicationTaskID = m.ReplicationTaskID

	dataAO1.EntriesChanged = m.EntriesChanged

	dataAO1.IsInBound = m.IsInBound

	dataAO1.DataLockConstraints = m.DataLockConstraints

	dataAO1.OnLegalHold = m.OnLegalHold

	dataAO1.MultiObjectReplication = m.MultiObjectReplication

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this replication target result
func (m *ReplicationTargetResult) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ReplicationTargetSummaryInfo
	if err := m.ReplicationTargetSummaryInfo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataLockConstraints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var replicationTargetResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicationTargetResultTypeStatusPropEnum = append(replicationTargetResultTypeStatusPropEnum, v)
	}
}

// property enum
func (m *ReplicationTargetResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, replicationTargetResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReplicationTargetResult) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationTargetResult) validateStats(formats strfmt.Registry) error {

	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationTargetResult) validateDataLockConstraints(formats strfmt.Registry) error {

	if swag.IsZero(m.DataLockConstraints) { // not required
		return nil
	}

	if m.DataLockConstraints != nil {
		if err := m.DataLockConstraints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataLockConstraints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataLockConstraints")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replication target result based on the context it is used
func (m *ReplicationTargetResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ReplicationTargetSummaryInfo
	if err := m.ReplicationTargetSummaryInfo.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataLockConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationTargetResult) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationTargetResult) contextValidateDataLockConstraints(ctx context.Context, formats strfmt.Registry) error {

	if m.DataLockConstraints != nil {

		if swag.IsZero(m.DataLockConstraints) { // not required
			return nil
		}

		if err := m.DataLockConstraints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataLockConstraints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataLockConstraints")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationTargetResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationTargetResult) UnmarshalBinary(b []byte) error {
	var res ReplicationTargetResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
