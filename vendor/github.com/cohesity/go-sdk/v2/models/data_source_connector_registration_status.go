// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataSourceConnectorRegistrationStatus Data-Source Connector Registration Status
//
// Specifies the data-source connector registration status.
//
// swagger:model DataSourceConnectorRegistrationStatus
type DataSourceConnectorRegistrationStatus struct {

	// Specifies the registration status.
	// Enum: ["NotDone","InProgress","Success","Failed"]
	Status *string `json:"status,omitempty"`

	// Specifies the message corresponding the registration.
	Message *string `json:"message,omitempty"`
}

// Validate validates this data source connector registration status
func (m *DataSourceConnectorRegistrationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataSourceConnectorRegistrationStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotDone","InProgress","Success","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceConnectorRegistrationStatusTypeStatusPropEnum = append(dataSourceConnectorRegistrationStatusTypeStatusPropEnum, v)
	}
}

const (

	// DataSourceConnectorRegistrationStatusStatusNotDone captures enum value "NotDone"
	DataSourceConnectorRegistrationStatusStatusNotDone string = "NotDone"

	// DataSourceConnectorRegistrationStatusStatusInProgress captures enum value "InProgress"
	DataSourceConnectorRegistrationStatusStatusInProgress string = "InProgress"

	// DataSourceConnectorRegistrationStatusStatusSuccess captures enum value "Success"
	DataSourceConnectorRegistrationStatusStatusSuccess string = "Success"

	// DataSourceConnectorRegistrationStatusStatusFailed captures enum value "Failed"
	DataSourceConnectorRegistrationStatusStatusFailed string = "Failed"
)

// prop value enum
func (m *DataSourceConnectorRegistrationStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataSourceConnectorRegistrationStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataSourceConnectorRegistrationStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data source connector registration status based on context it is used
func (m *DataSourceConnectorRegistrationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataSourceConnectorRegistrationStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSourceConnectorRegistrationStatus) UnmarshalBinary(b []byte) error {
	var res DataSourceConnectorRegistrationStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
