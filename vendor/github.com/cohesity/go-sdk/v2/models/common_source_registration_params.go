// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonSourceRegistrationParams Register source common request parameters.
//
// Specifies common parameters to register a source.
//
// swagger:model CommonSourceRegistrationParams
type CommonSourceRegistrationParams struct {
	Credentials

	// Specifies the endpoint IPaddress, URL or hostname of the host.
	// Required: true
	Endpoint *string `json:"endpoint"`

	// Specifies the description of the source being registered.
	Description *string `json:"description,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CommonSourceRegistrationParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Credentials
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Credentials = aO0

	// AO1
	var dataAO1 struct {
		Endpoint *string `json:"endpoint"`

		Description *string `json:"description,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Endpoint = dataAO1.Endpoint

	m.Description = dataAO1.Description

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CommonSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Credentials)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Endpoint *string `json:"endpoint"`

		Description *string `json:"description,omitempty"`
	}

	dataAO1.Endpoint = m.Endpoint

	dataAO1.Description = m.Description

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this common source registration params
func (m *CommonSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Credentials
	if err := m.Credentials.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonSourceRegistrationParams) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this common source registration params based on the context it is used
func (m *CommonSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Credentials
	if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CommonSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res CommonSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
