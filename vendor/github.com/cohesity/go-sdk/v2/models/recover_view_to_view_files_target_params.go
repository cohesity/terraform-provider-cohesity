// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverViewToViewFilesTargetParams Recover View To View Files Target Params.
//
// Specifies the params of the View recovery target.
//
// swagger:model RecoverViewToViewFilesTargetParams
type RecoverViewToViewFilesTargetParams struct {

	// Specifies the parameter whether the recovery should be performed to a new or the original View target.
	// Required: true
	RecoverToNewView *bool `json:"recoverToNewView"`

	// Specifies the name of the new view that's the target for recovery.
	ViewName *string `json:"viewName,omitempty"`

	// Specifies the ID of the view.
	ViewID *int64 `json:"viewId,omitempty"`

	// Specifies the new destination View configuration parameters where the files will be recovered. This is mandatory if recoverToNewView is set to true.
	NewViewConfig *NewViewFilesTargetParams `json:"newViewConfig,omitempty"`

	// Specifies the View configuration if files are being recovered to original View. If not specified, all the configuration parameters will be retained.
	OriginalViewConfig *OriginalViewFilesTargetParams `json:"originalViewConfig,omitempty"`
}

// Validate validates this recover view to view files target params
func (m *RecoverViewToViewFilesTargetParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoverToNewView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewViewConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalViewConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverViewToViewFilesTargetParams) validateRecoverToNewView(formats strfmt.Registry) error {

	if err := validate.Required("recoverToNewView", "body", m.RecoverToNewView); err != nil {
		return err
	}

	return nil
}

func (m *RecoverViewToViewFilesTargetParams) validateNewViewConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.NewViewConfig) { // not required
		return nil
	}

	if m.NewViewConfig != nil {
		if err := m.NewViewConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newViewConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newViewConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverViewToViewFilesTargetParams) validateOriginalViewConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalViewConfig) { // not required
		return nil
	}

	if m.OriginalViewConfig != nil {
		if err := m.OriginalViewConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalViewConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalViewConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover view to view files target params based on the context it is used
func (m *RecoverViewToViewFilesTargetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewViewConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginalViewConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverViewToViewFilesTargetParams) contextValidateNewViewConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NewViewConfig != nil {

		if swag.IsZero(m.NewViewConfig) { // not required
			return nil
		}

		if err := m.NewViewConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newViewConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newViewConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverViewToViewFilesTargetParams) contextValidateOriginalViewConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalViewConfig != nil {

		if swag.IsZero(m.OriginalViewConfig) { // not required
			return nil
		}

		if err := m.OriginalViewConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalViewConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalViewConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverViewToViewFilesTargetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverViewToViewFilesTargetParams) UnmarshalBinary(b []byte) error {
	var res RecoverViewToViewFilesTargetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
