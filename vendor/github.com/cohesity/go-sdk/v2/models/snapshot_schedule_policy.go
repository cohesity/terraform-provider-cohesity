// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotSchedulePolicy Snapshot Schedule Policy struct.
//
// Describes the snapshot schedule policy struct.
//
// swagger:model SnapshotSchedulePolicy
type SnapshotSchedulePolicy struct {

	// Time of the day.
	Time *string `json:"time,omitempty"`

	// Time zone.
	TimeZone *string `json:"timeZone,omitempty"`

	// Days of the week.
	DaysOfWeek []string `json:"daysOfWeek"`

	// Days of the month.
	DaysOfMonth []int32 `json:"daysOfMonth"`

	// Bool to denote if the policy is suspended.
	Suspended *bool `json:"suspended,omitempty"`
}

// Validate validates this snapshot schedule policy
func (m *SnapshotSchedulePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDaysOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snapshotSchedulePolicyDaysOfWeekItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotSchedulePolicyDaysOfWeekItemsEnum = append(snapshotSchedulePolicyDaysOfWeekItemsEnum, v)
	}
}

func (m *SnapshotSchedulePolicy) validateDaysOfWeekItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapshotSchedulePolicyDaysOfWeekItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapshotSchedulePolicy) validateDaysOfWeek(formats strfmt.Registry) error {
	if swag.IsZero(m.DaysOfWeek) { // not required
		return nil
	}

	for i := 0; i < len(m.DaysOfWeek); i++ {

		// value enum
		if err := m.validateDaysOfWeekItemsEnum("daysOfWeek"+"."+strconv.Itoa(i), "body", m.DaysOfWeek[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this snapshot schedule policy based on context it is used
func (m *SnapshotSchedulePolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotSchedulePolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotSchedulePolicy) UnmarshalBinary(b []byte) error {
	var res SnapshotSchedulePolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
