// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AwsObjectProtectionUpdateRequestParams AWS Object Protection Update Request Params.
//
// Specifies the parameters which are specific to AWS related Object Protection update request.
//
// swagger:model AwsObjectProtectionUpdateRequestParams
type AwsObjectProtectionUpdateRequestParams struct {
	AwsCommonObjectProtectionParams

	// Specifies the parameters which are specific to AWS related Protection using AWS native snapshot APIs.
	NativeProtectionTypeParams *AwsNativeObjectProtectionParams `json:"nativeProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS related Protection using AWS native snapshot orchestration with snapshot manager.
	SnapshotManagerProtectionTypeParams *AwsSnapshotManagerObjectProtectionParams `json:"snapshotManagerProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS related Protection using AWS RDS snapshot orchestration with snapshot manager.
	RdsSnapshotManagerProtectionTypeParams *AwsRdsSnapshotManagerObjectProtectionParams `json:"rdsSnapshotManagerProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS related Protection using AWS Aurora snapshot orchestration with snapshot manager.
	AuroraSnapshotManagerProtectionTypeParams *AwsAuroraSnapshotManagerObjectProtectionParams `json:"auroraSnapshotManagerProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS S3 Protection.
	S3ProtectionTypeParams *AwsS3ProtectionParams `json:"s3ProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS RDS Postgres related Object protection.
	RdsPostgresProtectionTypeParams *AwsRdsPostgresProtectionParams `json:"rdsPostgresProtectionTypeParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AwsObjectProtectionUpdateRequestParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AwsCommonObjectProtectionParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AwsCommonObjectProtectionParams = aO0

	// AO1
	var dataAO1 struct {
		NativeProtectionTypeParams *AwsNativeObjectProtectionParams `json:"nativeProtectionTypeParams,omitempty"`

		SnapshotManagerProtectionTypeParams *AwsSnapshotManagerObjectProtectionParams `json:"snapshotManagerProtectionTypeParams,omitempty"`

		RdsSnapshotManagerProtectionTypeParams *AwsRdsSnapshotManagerObjectProtectionParams `json:"rdsSnapshotManagerProtectionTypeParams,omitempty"`

		AuroraSnapshotManagerProtectionTypeParams *AwsAuroraSnapshotManagerObjectProtectionParams `json:"auroraSnapshotManagerProtectionTypeParams,omitempty"`

		S3ProtectionTypeParams *AwsS3ProtectionParams `json:"s3ProtectionTypeParams,omitempty"`

		RdsPostgresProtectionTypeParams *AwsRdsPostgresProtectionParams `json:"rdsPostgresProtectionTypeParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.NativeProtectionTypeParams = dataAO1.NativeProtectionTypeParams

	m.SnapshotManagerProtectionTypeParams = dataAO1.SnapshotManagerProtectionTypeParams

	m.RdsSnapshotManagerProtectionTypeParams = dataAO1.RdsSnapshotManagerProtectionTypeParams

	m.AuroraSnapshotManagerProtectionTypeParams = dataAO1.AuroraSnapshotManagerProtectionTypeParams

	m.S3ProtectionTypeParams = dataAO1.S3ProtectionTypeParams

	m.RdsPostgresProtectionTypeParams = dataAO1.RdsPostgresProtectionTypeParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AwsObjectProtectionUpdateRequestParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AwsCommonObjectProtectionParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		NativeProtectionTypeParams *AwsNativeObjectProtectionParams `json:"nativeProtectionTypeParams,omitempty"`

		SnapshotManagerProtectionTypeParams *AwsSnapshotManagerObjectProtectionParams `json:"snapshotManagerProtectionTypeParams,omitempty"`

		RdsSnapshotManagerProtectionTypeParams *AwsRdsSnapshotManagerObjectProtectionParams `json:"rdsSnapshotManagerProtectionTypeParams,omitempty"`

		AuroraSnapshotManagerProtectionTypeParams *AwsAuroraSnapshotManagerObjectProtectionParams `json:"auroraSnapshotManagerProtectionTypeParams,omitempty"`

		S3ProtectionTypeParams *AwsS3ProtectionParams `json:"s3ProtectionTypeParams,omitempty"`

		RdsPostgresProtectionTypeParams *AwsRdsPostgresProtectionParams `json:"rdsPostgresProtectionTypeParams,omitempty"`
	}

	dataAO1.NativeProtectionTypeParams = m.NativeProtectionTypeParams

	dataAO1.SnapshotManagerProtectionTypeParams = m.SnapshotManagerProtectionTypeParams

	dataAO1.RdsSnapshotManagerProtectionTypeParams = m.RdsSnapshotManagerProtectionTypeParams

	dataAO1.AuroraSnapshotManagerProtectionTypeParams = m.AuroraSnapshotManagerProtectionTypeParams

	dataAO1.S3ProtectionTypeParams = m.S3ProtectionTypeParams

	dataAO1.RdsPostgresProtectionTypeParams = m.RdsPostgresProtectionTypeParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this aws object protection update request params
func (m *AwsObjectProtectionUpdateRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AwsCommonObjectProtectionParams
	if err := m.AwsCommonObjectProtectionParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNativeProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotManagerProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsSnapshotManagerProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuroraSnapshotManagerProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3ProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsPostgresProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) validateNativeProtectionTypeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.NativeProtectionTypeParams) { // not required
		return nil
	}

	if m.NativeProtectionTypeParams != nil {
		if err := m.NativeProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nativeProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nativeProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) validateSnapshotManagerProtectionTypeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SnapshotManagerProtectionTypeParams) { // not required
		return nil
	}

	if m.SnapshotManagerProtectionTypeParams != nil {
		if err := m.SnapshotManagerProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotManagerProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotManagerProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) validateRdsSnapshotManagerProtectionTypeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.RdsSnapshotManagerProtectionTypeParams) { // not required
		return nil
	}

	if m.RdsSnapshotManagerProtectionTypeParams != nil {
		if err := m.RdsSnapshotManagerProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsSnapshotManagerProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsSnapshotManagerProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) validateAuroraSnapshotManagerProtectionTypeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AuroraSnapshotManagerProtectionTypeParams) { // not required
		return nil
	}

	if m.AuroraSnapshotManagerProtectionTypeParams != nil {
		if err := m.AuroraSnapshotManagerProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraSnapshotManagerProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraSnapshotManagerProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) validateS3ProtectionTypeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.S3ProtectionTypeParams) { // not required
		return nil
	}

	if m.S3ProtectionTypeParams != nil {
		if err := m.S3ProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3ProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3ProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) validateRdsPostgresProtectionTypeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.RdsPostgresProtectionTypeParams) { // not required
		return nil
	}

	if m.RdsPostgresProtectionTypeParams != nil {
		if err := m.RdsPostgresProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsPostgresProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsPostgresProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws object protection update request params based on the context it is used
func (m *AwsObjectProtectionUpdateRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AwsCommonObjectProtectionParams
	if err := m.AwsCommonObjectProtectionParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNativeProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotManagerProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRdsSnapshotManagerProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuroraSnapshotManagerProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3ProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRdsPostgresProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) contextValidateNativeProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NativeProtectionTypeParams != nil {

		if swag.IsZero(m.NativeProtectionTypeParams) { // not required
			return nil
		}

		if err := m.NativeProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nativeProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nativeProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) contextValidateSnapshotManagerProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotManagerProtectionTypeParams != nil {

		if swag.IsZero(m.SnapshotManagerProtectionTypeParams) { // not required
			return nil
		}

		if err := m.SnapshotManagerProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotManagerProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotManagerProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) contextValidateRdsSnapshotManagerProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RdsSnapshotManagerProtectionTypeParams != nil {

		if swag.IsZero(m.RdsSnapshotManagerProtectionTypeParams) { // not required
			return nil
		}

		if err := m.RdsSnapshotManagerProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsSnapshotManagerProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsSnapshotManagerProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) contextValidateAuroraSnapshotManagerProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AuroraSnapshotManagerProtectionTypeParams != nil {

		if swag.IsZero(m.AuroraSnapshotManagerProtectionTypeParams) { // not required
			return nil
		}

		if err := m.AuroraSnapshotManagerProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraSnapshotManagerProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraSnapshotManagerProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) contextValidateS3ProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.S3ProtectionTypeParams != nil {

		if swag.IsZero(m.S3ProtectionTypeParams) { // not required
			return nil
		}

		if err := m.S3ProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3ProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3ProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsObjectProtectionUpdateRequestParams) contextValidateRdsPostgresProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RdsPostgresProtectionTypeParams != nil {

		if swag.IsZero(m.RdsPostgresProtectionTypeParams) { // not required
			return nil
		}

		if err := m.RdsPostgresProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsPostgresProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsPostgresProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsObjectProtectionUpdateRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsObjectProtectionUpdateRequestParams) UnmarshalBinary(b []byte) error {
	var res AwsObjectProtectionUpdateRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
