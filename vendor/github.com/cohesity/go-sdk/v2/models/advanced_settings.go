// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdvancedSettings This is used to regulate certain gflag values from the UI. The values passed by the user from the UI will be used for the respective gflags.
//
// swagger:model AdvancedSettings
type AdvancedSettings struct {

	// Fail the backup job when the database is missing. The database may be missing if it is deleted or corrupted.
	// Enum: ["kError","kWarn","kIgnore"]
	MissingDbBackupStatus *string `json:"missingDbBackupStatus,omitempty"`

	// Whether to report error for all dbs in non-autoprotect jobs.
	// Enum: ["kError","kWarn","kIgnore"]
	ReportAllNonAutoprotectDbErrors *string `json:"reportAllNonAutoprotectDbErrors,omitempty"`

	// Fail the backup job when database is offline or restoring.
	// Enum: ["kError","kWarn","kIgnore"]
	OfflineRestoringDbBackupStatus *string `json:"offlineRestoringDbBackupStatus,omitempty"`

	// Whether to report error if SQL database is cloned.
	// Enum: ["kError","kWarn","kIgnore"]
	ClonedDbBackupStatus *string `json:"clonedDbBackupStatus,omitempty"`

	// Whether to report error if SQL database is not online.
	// Enum: ["kError","kWarn","kIgnore"]
	DbBackupIfNotOnlineStatus *string `json:"dbBackupIfNotOnlineStatus,omitempty"`

	// Whether to skip backup for read-only SQL databases.
	// Enum: ["kError","kWarn","kIgnore"]
	ReadOnlyDbBackupStatus *string `json:"readOnlyDbBackupStatus,omitempty"`

	// If set to true, out of band incremental backup will be started when the log chain is broken and it would be started at the end of the log backup. Default value is false.
	LogChainBreakAutoTriggerOobIncrBackup *bool `json:"logChainBreakAutoTriggerOobIncrBackup,omitempty"`

	// If set to true, out of band incremental backup will be triggered when a new database is found and it would be started at the end of the log backup. Default value is false.
	NewDatabaseAutoTriggerOobIncrBackup *bool `json:"newDatabaseAutoTriggerOobIncrBackup,omitempty"`
}

// Validate validates this advanced settings
func (m *AdvancedSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMissingDbBackupStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportAllNonAutoprotectDbErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfflineRestoringDbBackupStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClonedDbBackupStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbBackupIfNotOnlineStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnlyDbBackupStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var advancedSettingsTypeMissingDbBackupStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kError","kWarn","kIgnore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedSettingsTypeMissingDbBackupStatusPropEnum = append(advancedSettingsTypeMissingDbBackupStatusPropEnum, v)
	}
}

const (

	// AdvancedSettingsMissingDbBackupStatusKError captures enum value "kError"
	AdvancedSettingsMissingDbBackupStatusKError string = "kError"

	// AdvancedSettingsMissingDbBackupStatusKWarn captures enum value "kWarn"
	AdvancedSettingsMissingDbBackupStatusKWarn string = "kWarn"

	// AdvancedSettingsMissingDbBackupStatusKIgnore captures enum value "kIgnore"
	AdvancedSettingsMissingDbBackupStatusKIgnore string = "kIgnore"
)

// prop value enum
func (m *AdvancedSettings) validateMissingDbBackupStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedSettingsTypeMissingDbBackupStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedSettings) validateMissingDbBackupStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.MissingDbBackupStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateMissingDbBackupStatusEnum("missingDbBackupStatus", "body", *m.MissingDbBackupStatus); err != nil {
		return err
	}

	return nil
}

var advancedSettingsTypeReportAllNonAutoprotectDbErrorsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kError","kWarn","kIgnore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedSettingsTypeReportAllNonAutoprotectDbErrorsPropEnum = append(advancedSettingsTypeReportAllNonAutoprotectDbErrorsPropEnum, v)
	}
}

const (

	// AdvancedSettingsReportAllNonAutoprotectDbErrorsKError captures enum value "kError"
	AdvancedSettingsReportAllNonAutoprotectDbErrorsKError string = "kError"

	// AdvancedSettingsReportAllNonAutoprotectDbErrorsKWarn captures enum value "kWarn"
	AdvancedSettingsReportAllNonAutoprotectDbErrorsKWarn string = "kWarn"

	// AdvancedSettingsReportAllNonAutoprotectDbErrorsKIgnore captures enum value "kIgnore"
	AdvancedSettingsReportAllNonAutoprotectDbErrorsKIgnore string = "kIgnore"
)

// prop value enum
func (m *AdvancedSettings) validateReportAllNonAutoprotectDbErrorsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedSettingsTypeReportAllNonAutoprotectDbErrorsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedSettings) validateReportAllNonAutoprotectDbErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.ReportAllNonAutoprotectDbErrors) { // not required
		return nil
	}

	// value enum
	if err := m.validateReportAllNonAutoprotectDbErrorsEnum("reportAllNonAutoprotectDbErrors", "body", *m.ReportAllNonAutoprotectDbErrors); err != nil {
		return err
	}

	return nil
}

var advancedSettingsTypeOfflineRestoringDbBackupStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kError","kWarn","kIgnore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedSettingsTypeOfflineRestoringDbBackupStatusPropEnum = append(advancedSettingsTypeOfflineRestoringDbBackupStatusPropEnum, v)
	}
}

const (

	// AdvancedSettingsOfflineRestoringDbBackupStatusKError captures enum value "kError"
	AdvancedSettingsOfflineRestoringDbBackupStatusKError string = "kError"

	// AdvancedSettingsOfflineRestoringDbBackupStatusKWarn captures enum value "kWarn"
	AdvancedSettingsOfflineRestoringDbBackupStatusKWarn string = "kWarn"

	// AdvancedSettingsOfflineRestoringDbBackupStatusKIgnore captures enum value "kIgnore"
	AdvancedSettingsOfflineRestoringDbBackupStatusKIgnore string = "kIgnore"
)

// prop value enum
func (m *AdvancedSettings) validateOfflineRestoringDbBackupStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedSettingsTypeOfflineRestoringDbBackupStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedSettings) validateOfflineRestoringDbBackupStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.OfflineRestoringDbBackupStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateOfflineRestoringDbBackupStatusEnum("offlineRestoringDbBackupStatus", "body", *m.OfflineRestoringDbBackupStatus); err != nil {
		return err
	}

	return nil
}

var advancedSettingsTypeClonedDbBackupStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kError","kWarn","kIgnore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedSettingsTypeClonedDbBackupStatusPropEnum = append(advancedSettingsTypeClonedDbBackupStatusPropEnum, v)
	}
}

const (

	// AdvancedSettingsClonedDbBackupStatusKError captures enum value "kError"
	AdvancedSettingsClonedDbBackupStatusKError string = "kError"

	// AdvancedSettingsClonedDbBackupStatusKWarn captures enum value "kWarn"
	AdvancedSettingsClonedDbBackupStatusKWarn string = "kWarn"

	// AdvancedSettingsClonedDbBackupStatusKIgnore captures enum value "kIgnore"
	AdvancedSettingsClonedDbBackupStatusKIgnore string = "kIgnore"
)

// prop value enum
func (m *AdvancedSettings) validateClonedDbBackupStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedSettingsTypeClonedDbBackupStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedSettings) validateClonedDbBackupStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ClonedDbBackupStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateClonedDbBackupStatusEnum("clonedDbBackupStatus", "body", *m.ClonedDbBackupStatus); err != nil {
		return err
	}

	return nil
}

var advancedSettingsTypeDbBackupIfNotOnlineStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kError","kWarn","kIgnore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedSettingsTypeDbBackupIfNotOnlineStatusPropEnum = append(advancedSettingsTypeDbBackupIfNotOnlineStatusPropEnum, v)
	}
}

const (

	// AdvancedSettingsDbBackupIfNotOnlineStatusKError captures enum value "kError"
	AdvancedSettingsDbBackupIfNotOnlineStatusKError string = "kError"

	// AdvancedSettingsDbBackupIfNotOnlineStatusKWarn captures enum value "kWarn"
	AdvancedSettingsDbBackupIfNotOnlineStatusKWarn string = "kWarn"

	// AdvancedSettingsDbBackupIfNotOnlineStatusKIgnore captures enum value "kIgnore"
	AdvancedSettingsDbBackupIfNotOnlineStatusKIgnore string = "kIgnore"
)

// prop value enum
func (m *AdvancedSettings) validateDbBackupIfNotOnlineStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedSettingsTypeDbBackupIfNotOnlineStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedSettings) validateDbBackupIfNotOnlineStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.DbBackupIfNotOnlineStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDbBackupIfNotOnlineStatusEnum("dbBackupIfNotOnlineStatus", "body", *m.DbBackupIfNotOnlineStatus); err != nil {
		return err
	}

	return nil
}

var advancedSettingsTypeReadOnlyDbBackupStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kError","kWarn","kIgnore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedSettingsTypeReadOnlyDbBackupStatusPropEnum = append(advancedSettingsTypeReadOnlyDbBackupStatusPropEnum, v)
	}
}

const (

	// AdvancedSettingsReadOnlyDbBackupStatusKError captures enum value "kError"
	AdvancedSettingsReadOnlyDbBackupStatusKError string = "kError"

	// AdvancedSettingsReadOnlyDbBackupStatusKWarn captures enum value "kWarn"
	AdvancedSettingsReadOnlyDbBackupStatusKWarn string = "kWarn"

	// AdvancedSettingsReadOnlyDbBackupStatusKIgnore captures enum value "kIgnore"
	AdvancedSettingsReadOnlyDbBackupStatusKIgnore string = "kIgnore"
)

// prop value enum
func (m *AdvancedSettings) validateReadOnlyDbBackupStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedSettingsTypeReadOnlyDbBackupStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedSettings) validateReadOnlyDbBackupStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ReadOnlyDbBackupStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateReadOnlyDbBackupStatusEnum("readOnlyDbBackupStatus", "body", *m.ReadOnlyDbBackupStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this advanced settings based on context it is used
func (m *AdvancedSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedSettings) UnmarshalBinary(b []byte) error {
	var res AdvancedSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
