// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Privilege Specifies a Privileges.
//
// swagger:model Privilege
type Privilege struct {

	// Specifies the Privilege id.
	ID *int32 `json:"id,omitempty"`

	// Specifies the Privilege name.
	Name *string `json:"name,omitempty"`

	// Specifies the Privilege label.
	Label *string `json:"label,omitempty"`

	// Specifies the Privilege category.
	Category *string `json:"category,omitempty"`

	// Specifies the description message for the Privilege.
	Description *string `json:"description,omitempty"`

	// Specifies whether the Privilege is available for Helios operations.
	IsAvailableOnHelios *bool `json:"isAvailableOnHelios,omitempty"`

	// Specifies whether the Privilege is auto assigned to custom Roles.
	IsCustomRoleDefault *bool `json:"isCustomRoleDefault,omitempty"`

	// Specifies whether the Privilege is a special privilege. Special Privileges are not assigned to builtin 'Admin' Role.
	IsSpecial *bool `json:"isSpecial,omitempty"`

	// Specifies whether the Privilege is a read-only privilege. Read-only Previlege only grants read access to a Role.
	IsViewOnly *bool `json:"isViewOnly,omitempty"`
}

// Validate validates this privilege
func (m *Privilege) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this privilege based on context it is used
func (m *Privilege) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Privilege) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Privilege) UnmarshalBinary(b []byte) error {
	var res Privilege
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
