// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TagParams Specifies the tag vectors used to exclude EBS volumes attached to EC2 instances at global and object level. Contains two vectors: exclusion and inclusion. E.g., {exclusionTagArray: [(K1, V1),  (K2, V2)], inclusionTagArray: [(K3, V3)]} => This will exclude a particular volume iff it has all the tags in exclusionTagArray((K1, V1),  (K2, V2)) and has none of the tags in the inclusionTagArray((K3, V3)).
//
// swagger:model TagParams
type TagParams struct {

	// Array which contains tags for AND exclusion. E.g., exclusionTagArray: [(K1, V1),  (K2, V2)] => This will exclude a particular volume iff it has both these tags.
	ExclusionTagArray []*EBSTag `json:"exclusionTagArray"`

	// Array which contains tags for AND inclusion. E.g., inclusionTagArray: [(K3, V3),  (K4, V4)] => This will exclude a particular volume iff it does not have both these tags.
	InclusionTagArray []*EBSTag `json:"inclusionTagArray"`
}

// Validate validates this tag params
func (m *TagParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExclusionTagArray(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInclusionTagArray(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagParams) validateExclusionTagArray(formats strfmt.Registry) error {
	if swag.IsZero(m.ExclusionTagArray) { // not required
		return nil
	}

	for i := 0; i < len(m.ExclusionTagArray); i++ {
		if swag.IsZero(m.ExclusionTagArray[i]) { // not required
			continue
		}

		if m.ExclusionTagArray[i] != nil {
			if err := m.ExclusionTagArray[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclusionTagArray" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exclusionTagArray" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TagParams) validateInclusionTagArray(formats strfmt.Registry) error {
	if swag.IsZero(m.InclusionTagArray) { // not required
		return nil
	}

	for i := 0; i < len(m.InclusionTagArray); i++ {
		if swag.IsZero(m.InclusionTagArray[i]) { // not required
			continue
		}

		if m.InclusionTagArray[i] != nil {
			if err := m.InclusionTagArray[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inclusionTagArray" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inclusionTagArray" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tag params based on the context it is used
func (m *TagParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExclusionTagArray(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInclusionTagArray(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagParams) contextValidateExclusionTagArray(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExclusionTagArray); i++ {

		if m.ExclusionTagArray[i] != nil {

			if swag.IsZero(m.ExclusionTagArray[i]) { // not required
				return nil
			}

			if err := m.ExclusionTagArray[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclusionTagArray" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exclusionTagArray" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TagParams) contextValidateInclusionTagArray(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InclusionTagArray); i++ {

		if m.InclusionTagArray[i] != nil {

			if swag.IsZero(m.InclusionTagArray[i]) { // not required
				return nil
			}

			if err := m.InclusionTagArray[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inclusionTagArray" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inclusionTagArray" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TagParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagParams) UnmarshalBinary(b []byte) error {
	var res TagParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
