// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageArraySnapshotThrottlingPolicy Storage Snapshot Mgmt throttling Policy Config.
//
// Specifies the throttling policy for individual volume/lun.
//
// swagger:model StorageArraySnapshotThrottlingPolicy
type StorageArraySnapshotThrottlingPolicy struct {

	// Specifies the volume ID of the Storage Snapshot Mgmt throttling Policy.
	ID *int64 `json:"Id,omitempty"`

	// Specifies whether we will use storage snapshot managmement max snapshots config to all volumes/luns that are part of the registered entity.
	MaxSnapshotsConfigEnabled *bool `json:"maxSnapshotsConfigEnabled,omitempty"`

	// Specifies whether we will use storage snapshot managmement max space config to all volumes/luns that are part of the registered entity.
	MaxSpaceConfigEnabled *bool `json:"maxSpaceConfigEnabled,omitempty"`

	// Specifies the max space threshold configuration for storage snapshots.
	MaxSnapshotsMgmtSpaceConfig *StorageArraySnapshotMaxSpaceConfig `json:"maxSnapshotsMgmtSpaceConfig,omitempty"`

	// Specifies the max snapshots threshold configuration taken for storage snapshots.
	MaxSnapshotsMgmtSnapshotConfig *StorageArraySnapshotMaxSnapshotConfig `json:"maxSnapshotsMgmtSnapshotConfig,omitempty"`
}

// Validate validates this storage array snapshot throttling policy
func (m *StorageArraySnapshotThrottlingPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxSnapshotsMgmtSpaceConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSnapshotsMgmtSnapshotConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageArraySnapshotThrottlingPolicy) validateMaxSnapshotsMgmtSpaceConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxSnapshotsMgmtSpaceConfig) { // not required
		return nil
	}

	if m.MaxSnapshotsMgmtSpaceConfig != nil {
		if err := m.MaxSnapshotsMgmtSpaceConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSnapshotsMgmtSpaceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSnapshotsMgmtSpaceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *StorageArraySnapshotThrottlingPolicy) validateMaxSnapshotsMgmtSnapshotConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxSnapshotsMgmtSnapshotConfig) { // not required
		return nil
	}

	if m.MaxSnapshotsMgmtSnapshotConfig != nil {
		if err := m.MaxSnapshotsMgmtSnapshotConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSnapshotsMgmtSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSnapshotsMgmtSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage array snapshot throttling policy based on the context it is used
func (m *StorageArraySnapshotThrottlingPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaxSnapshotsMgmtSpaceConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxSnapshotsMgmtSnapshotConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageArraySnapshotThrottlingPolicy) contextValidateMaxSnapshotsMgmtSpaceConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxSnapshotsMgmtSpaceConfig != nil {

		if swag.IsZero(m.MaxSnapshotsMgmtSpaceConfig) { // not required
			return nil
		}

		if err := m.MaxSnapshotsMgmtSpaceConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSnapshotsMgmtSpaceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSnapshotsMgmtSpaceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *StorageArraySnapshotThrottlingPolicy) contextValidateMaxSnapshotsMgmtSnapshotConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxSnapshotsMgmtSnapshotConfig != nil {

		if swag.IsZero(m.MaxSnapshotsMgmtSnapshotConfig) { // not required
			return nil
		}

		if err := m.MaxSnapshotsMgmtSnapshotConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSnapshotsMgmtSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSnapshotsMgmtSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageArraySnapshotThrottlingPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageArraySnapshotThrottlingPolicy) UnmarshalBinary(b []byte) error {
	var res StorageArraySnapshotThrottlingPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
