// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RunCloudReplicationConfig Replication Target Configuration
//
// Specifies settings for copying Snapshots to cloud targets. This also specifies the retention policy that should be applied to Snapshots after they have been copied to the specified target.
//
// swagger:model RunCloudReplicationConfig
type RunCloudReplicationConfig struct {

	// Specifies the type of target to which replication need to be performed.
	// Required: true
	// Enum: ["AWS","Azure"]
	TargetType *string `json:"targetType"`

	// Specifies the config for AWS target. This must be specified if the target type is AWS.
	AwsTarget *AWSTargetConfig `json:"awsTarget,omitempty"`

	// Specifies the config for Azure target. This must be specified if the target type is Azure.
	AzureTarget *AzureTargetConfig `json:"azureTarget,omitempty"`

	// Specifies the Retention period of snapshot in days, months or years to retain copied Snapshots on the target.
	Retention *Retention `json:"retention,omitempty"`
}

// Validate validates this run cloud replication config
func (m *RunCloudReplicationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var runCloudReplicationConfigTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","Azure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runCloudReplicationConfigTypeTargetTypePropEnum = append(runCloudReplicationConfigTypeTargetTypePropEnum, v)
	}
}

const (

	// RunCloudReplicationConfigTargetTypeAWS captures enum value "AWS"
	RunCloudReplicationConfigTargetTypeAWS string = "AWS"

	// RunCloudReplicationConfigTargetTypeAzure captures enum value "Azure"
	RunCloudReplicationConfigTargetTypeAzure string = "Azure"
)

// prop value enum
func (m *RunCloudReplicationConfig) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, runCloudReplicationConfigTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RunCloudReplicationConfig) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("targetType", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("targetType", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

func (m *RunCloudReplicationConfig) validateAwsTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsTarget) { // not required
		return nil
	}

	if m.AwsTarget != nil {
		if err := m.AwsTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RunCloudReplicationConfig) validateAzureTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureTarget) { // not required
		return nil
	}

	if m.AzureTarget != nil {
		if err := m.AzureTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RunCloudReplicationConfig) validateRetention(formats strfmt.Registry) error {
	if swag.IsZero(m.Retention) { // not required
		return nil
	}

	if m.Retention != nil {
		if err := m.Retention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this run cloud replication config based on the context it is used
func (m *RunCloudReplicationConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunCloudReplicationConfig) contextValidateAwsTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsTarget != nil {

		if swag.IsZero(m.AwsTarget) { // not required
			return nil
		}

		if err := m.AwsTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RunCloudReplicationConfig) contextValidateAzureTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureTarget != nil {

		if swag.IsZero(m.AzureTarget) { // not required
			return nil
		}

		if err := m.AzureTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RunCloudReplicationConfig) contextValidateRetention(ctx context.Context, formats strfmt.Registry) error {

	if m.Retention != nil {

		if swag.IsZero(m.Retention) { // not required
			return nil
		}

		if err := m.Retention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunCloudReplicationConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunCloudReplicationConfig) UnmarshalBinary(b []byte) error {
	var res RunCloudReplicationConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
