// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecurityConfig Specifies the fields of security settings.
//
// swagger:model SecurityConfig
type SecurityConfig struct {

	// Specifies security settings related to password strength.
	PasswordStrength *SecurityConfigPasswordStrength `json:"passwordStrength,omitempty"`

	// Specifies security settings related to password reuse.
	PasswordReuse *SecurityConfigPasswordReuse `json:"passwordReuse,omitempty"`

	// Specifies security settings related to password lifetime.
	PasswordLifetime *SecurityConfigPasswordLifetime `json:"passwordLifetime,omitempty"`

	// Specifies security settings related to account lockout.
	AccountLockout *SecurityConfigAccountLockout `json:"accountLockout,omitempty"`

	// Specifies security settings related to data classification.
	DataClassification *SecurityConfigDataClassification `json:"dataClassification,omitempty"`

	// Specifies security settings related to user sessions. Applies only when session management is enabled.
	SessionConfiguration *SecurityConfigSessionConfiguration `json:"sessionConfiguration,omitempty"`

	// "Specifies security settings related to certificate based
	// authentication."
	CertificateBasedAuth *SecurityConfigCertificateBasedAuth `json:"certificateBasedAuth,omitempty"`

	// Specifies the authentication token timeout in minutes. Applies both for API based access token and browser login cookie.
	AuthTokenTimeoutMinutes *int32 `json:"authTokenTimeoutMinutes,omitempty"`

	// Specifies the UI inactivity timeout in milliseconds. Default value is 30 minutes.
	InactivityTimeoutMSecs *int64 `json:"inactivityTimeoutMSecs,omitempty"`

	// "Specifies ssh configuration related to the cluster."
	SSHConfiguration *SecurityConfigSSHConfiguration `json:"sshConfiguration,omitempty"`
}

// Validate validates this security config
func (m *SecurityConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePasswordStrength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordReuse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountLockout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataClassification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateBasedAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfig) validatePasswordStrength(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordStrength) { // not required
		return nil
	}

	if m.PasswordStrength != nil {
		if err := m.PasswordStrength.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordStrength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passwordStrength")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) validatePasswordReuse(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordReuse) { // not required
		return nil
	}

	if m.PasswordReuse != nil {
		if err := m.PasswordReuse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordReuse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passwordReuse")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) validatePasswordLifetime(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordLifetime) { // not required
		return nil
	}

	if m.PasswordLifetime != nil {
		if err := m.PasswordLifetime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordLifetime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passwordLifetime")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) validateAccountLockout(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountLockout) { // not required
		return nil
	}

	if m.AccountLockout != nil {
		if err := m.AccountLockout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountLockout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accountLockout")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) validateDataClassification(formats strfmt.Registry) error {
	if swag.IsZero(m.DataClassification) { // not required
		return nil
	}

	if m.DataClassification != nil {
		if err := m.DataClassification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataClassification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataClassification")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) validateSessionConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.SessionConfiguration) { // not required
		return nil
	}

	if m.SessionConfiguration != nil {
		if err := m.SessionConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sessionConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sessionConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) validateCertificateBasedAuth(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificateBasedAuth) { // not required
		return nil
	}

	if m.CertificateBasedAuth != nil {
		if err := m.CertificateBasedAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificateBasedAuth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificateBasedAuth")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) validateSSHConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHConfiguration) { // not required
		return nil
	}

	if m.SSHConfiguration != nil {
		if err := m.SSHConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshConfiguration")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security config based on the context it is used
func (m *SecurityConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePasswordStrength(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordReuse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordLifetime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAccountLockout(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataClassification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSessionConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificateBasedAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfig) contextValidatePasswordStrength(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordStrength != nil {

		if swag.IsZero(m.PasswordStrength) { // not required
			return nil
		}

		if err := m.PasswordStrength.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordStrength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passwordStrength")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) contextValidatePasswordReuse(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordReuse != nil {

		if swag.IsZero(m.PasswordReuse) { // not required
			return nil
		}

		if err := m.PasswordReuse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordReuse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passwordReuse")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) contextValidatePasswordLifetime(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordLifetime != nil {

		if swag.IsZero(m.PasswordLifetime) { // not required
			return nil
		}

		if err := m.PasswordLifetime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordLifetime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passwordLifetime")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) contextValidateAccountLockout(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountLockout != nil {

		if swag.IsZero(m.AccountLockout) { // not required
			return nil
		}

		if err := m.AccountLockout.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountLockout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accountLockout")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) contextValidateDataClassification(ctx context.Context, formats strfmt.Registry) error {

	if m.DataClassification != nil {

		if swag.IsZero(m.DataClassification) { // not required
			return nil
		}

		if err := m.DataClassification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataClassification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataClassification")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) contextValidateSessionConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.SessionConfiguration != nil {

		if swag.IsZero(m.SessionConfiguration) { // not required
			return nil
		}

		if err := m.SessionConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sessionConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sessionConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) contextValidateCertificateBasedAuth(ctx context.Context, formats strfmt.Registry) error {

	if m.CertificateBasedAuth != nil {

		if swag.IsZero(m.CertificateBasedAuth) { // not required
			return nil
		}

		if err := m.CertificateBasedAuth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificateBasedAuth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificateBasedAuth")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) contextValidateSSHConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHConfiguration != nil {

		if swag.IsZero(m.SSHConfiguration) { // not required
			return nil
		}

		if err := m.SSHConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshConfiguration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfig) UnmarshalBinary(b []byte) error {
	var res SecurityConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
