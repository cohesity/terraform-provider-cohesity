// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradeCheckNodeResult :Healthcheck results for node"
//
// # The healthcheck results for node
//
// swagger:model UpgradeCheckNodeResult
type UpgradeCheckNodeResult struct {

	// The node ip
	NodeIP string `json:"nodeIp,omitempty"`

	// The healthcheck run status for node
	// Enum: ["Running","Passed","Failed","Skipped","Error"]
	NodeTestStatus string `json:"nodeTestStatus,omitempty"`

	// The healthcheck test results for node
	NodeTestResults []*UpgradeCheckTestResult `json:"nodeTestResults,omitempty"`
}

// Validate validates this upgrade check node result
func (m *UpgradeCheckNodeResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeTestStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTestResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradeCheckNodeResultTypeNodeTestStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Passed","Failed","Skipped","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeCheckNodeResultTypeNodeTestStatusPropEnum = append(upgradeCheckNodeResultTypeNodeTestStatusPropEnum, v)
	}
}

const (

	// UpgradeCheckNodeResultNodeTestStatusRunning captures enum value "Running"
	UpgradeCheckNodeResultNodeTestStatusRunning string = "Running"

	// UpgradeCheckNodeResultNodeTestStatusPassed captures enum value "Passed"
	UpgradeCheckNodeResultNodeTestStatusPassed string = "Passed"

	// UpgradeCheckNodeResultNodeTestStatusFailed captures enum value "Failed"
	UpgradeCheckNodeResultNodeTestStatusFailed string = "Failed"

	// UpgradeCheckNodeResultNodeTestStatusSkipped captures enum value "Skipped"
	UpgradeCheckNodeResultNodeTestStatusSkipped string = "Skipped"

	// UpgradeCheckNodeResultNodeTestStatusError captures enum value "Error"
	UpgradeCheckNodeResultNodeTestStatusError string = "Error"
)

// prop value enum
func (m *UpgradeCheckNodeResult) validateNodeTestStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeCheckNodeResultTypeNodeTestStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeCheckNodeResult) validateNodeTestStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTestStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateNodeTestStatusEnum("nodeTestStatus", "body", m.NodeTestStatus); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeCheckNodeResult) validateNodeTestResults(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTestResults) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeTestResults); i++ {
		if swag.IsZero(m.NodeTestResults[i]) { // not required
			continue
		}

		if m.NodeTestResults[i] != nil {
			if err := m.NodeTestResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeTestResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeTestResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this upgrade check node result based on the context it is used
func (m *UpgradeCheckNodeResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeTestResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeCheckNodeResult) contextValidateNodeTestResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeTestResults); i++ {

		if m.NodeTestResults[i] != nil {

			if swag.IsZero(m.NodeTestResults[i]) { // not required
				return nil
			}

			if err := m.NodeTestResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeTestResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeTestResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeCheckNodeResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeCheckNodeResult) UnmarshalBinary(b []byte) error {
	var res UpgradeCheckNodeResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
