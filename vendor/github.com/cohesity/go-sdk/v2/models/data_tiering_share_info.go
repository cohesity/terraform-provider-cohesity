// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataTieringShareInfo Specifies the info for a particular share.
//
// swagger:model DataTieringShareInfo
type DataTieringShareInfo struct {

	// Specifies the id of the share.
	// Required: true
	ShareID *int64 `json:"shareId"`

	// Only applicable for uptiering tasks.
	// Ignore the uptiering policy and uptier the directory pointed by the
	// 'uptierPath'. If path is '/', then uptier everything
	//
	// This will override the global uptier path.
	UptierPath *string `json:"uptierPath,omitempty"`
}

// Validate validates this data tiering share info
func (m *DataTieringShareInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShareID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringShareInfo) validateShareID(formats strfmt.Registry) error {

	if err := validate.Required("shareId", "body", m.ShareID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data tiering share info based on context it is used
func (m *DataTieringShareInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataTieringShareInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTieringShareInfo) UnmarshalBinary(b []byte) error {
	var res DataTieringShareInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
