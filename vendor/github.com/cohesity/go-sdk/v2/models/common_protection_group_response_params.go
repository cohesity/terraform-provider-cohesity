// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonProtectionGroupResponseParams Specifies the parameters which are common between all Protection Group responses.
//
// swagger:model CommonProtectionGroupResponseParams
type CommonProtectionGroupResponseParams struct {

	// Specifies the ID of the Protection Group.
	ID *string `json:"id,omitempty"`

	// Specifies the name of the Protection Group.
	Name *string `json:"name,omitempty"`

	// Specifies the cluster ID.
	ClusterID *string `json:"clusterId,omitempty"`

	// Specifies the region ID.
	RegionID *string `json:"regionId,omitempty"`

	// Specifies the unique id of the Protection Policy associated with the Protection Group. The Policy provides retry settings Protection Schedules, Priority, SLA, etc.
	PolicyID *string `json:"policyId,omitempty"`

	// Specifies the priority of the Protection Group.
	// Enum: ["kLow","kMedium","kHigh"]
	Priority *string `json:"priority,omitempty"`

	// Specifies the Storage Domain (View Box) ID where this Protection Group writes data.
	StorageDomainID *int64 `json:"storageDomainId,omitempty"`

	// Specifies a description of the Protection Group.
	Description *string `json:"description,omitempty"`

	// Specifies the start time for this Protection Group. If no start time is specified, the start time will default to 2am. This field is only used if the policy has a daily or monthly schedule.
	StartTime *TimeOfDay `json:"startTime,omitempty"`

	// Specifies the end time in micro seconds for this Protection Group. If this is not specified, the Protection Group won't be ended.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the last time this protection group was updated. If this is passed into a PUT request, then the backend will validate that the timestamp passed in matches the time that the protection group was actually last modified. If the two timestamps do not match, then the request will be rejected with a stale error.
	LastModifiedTimestampUsecs *int64 `json:"lastModifiedTimestampUsecs,omitempty"`

	// Specifies the alerting policy for this Protection Group.
	AlertPolicy *ProtectionGroupAlertingPolicy `json:"alertPolicy,omitempty"`

	// Specifies the SLA parameters for this Protection Group.
	SLA []*SLARule `json:"sla"`

	// Specifies whether the Protection Group will be written to HDD or SSD.
	// Enum: ["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]
	QosPolicy *string `json:"qosPolicy,omitempty"`

	// Specifies whether currently executing jobs should abort if a blackout period specified by a policy starts. Available only if the selected policy has at least one blackout period. Default value is false.
	AbortInBlackouts *bool `json:"abortInBlackouts,omitempty"`

	// Specifies whether currently executing jobs should be paused if a blackout period specified by a policy starts. Available only if the selected policy has at least one blackout period. Default value is false. This field should not be set to true if 'abortInBlackouts' is sent as true.
	PauseInBlackouts *bool `json:"pauseInBlackouts,omitempty"`

	// Specifies if the Protection Group is active or not.
	IsActive *bool `json:"isActive,omitempty"`

	// Specifies if the Protection Group has been deleted.
	IsDeleted *bool `json:"isDeleted,omitempty"`

	// Specifies if the the Protection Group is paused. New runs are not scheduled for the paused Protection Groups. Active run if any is not impacted.
	IsPaused *bool `json:"isPaused,omitempty"`

	// Specifies the environment of the Protection Group.
	// Enum: ["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsRDSPostgres","kAwsAuroraPostgres","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc","kO365ExchangeCSM","kO365OneDriveCSM","kO365SharepointCSM"]
	Environment *string `json:"environment,omitempty"`

	// Specifies information about the last run for this Protection Group.
	LastRun *ProtectionGroupRun `json:"lastRun,omitempty"`

	// Specifies the list of tenants that have permissions for this protection group.
	Permissions []*Tenant `json:"permissions"`

	// Specifies if the the Protection Group is using a protect once type of policy. This field is helpful to identify run happen for this group.
	IsProtectOnce *bool `json:"isProtectOnce,omitempty"`

	// Specifies the Information about missing entities.
	MissingEntities []*MissingEntityParams `json:"missingEntities"`

	// Specifies the Information about invalid entities. An entity will be considered invalid if it is part of an active protection group but has lost compatibility for the given backup type.
	InvalidEntities []*MissingEntityParams `json:"invalidEntities"`

	// Specifies the number of protected objects of the Protection Group.
	NumProtectedObjects *int64 `json:"numProtectedObjects,omitempty"`

	// Specifies the advanced configuration for a protection job.
	AdvancedConfigs []*KeyValuePair `json:"advancedConfigs"`
}

// Validate validates this common protection group response params
func (m *CommonProtectionGroupResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSLA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMissingEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvalidEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvancedConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonProtectionGroupResponseParamsTypePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLow","kMedium","kHigh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonProtectionGroupResponseParamsTypePriorityPropEnum = append(commonProtectionGroupResponseParamsTypePriorityPropEnum, v)
	}
}

const (

	// CommonProtectionGroupResponseParamsPriorityKLow captures enum value "kLow"
	CommonProtectionGroupResponseParamsPriorityKLow string = "kLow"

	// CommonProtectionGroupResponseParamsPriorityKMedium captures enum value "kMedium"
	CommonProtectionGroupResponseParamsPriorityKMedium string = "kMedium"

	// CommonProtectionGroupResponseParamsPriorityKHigh captures enum value "kHigh"
	CommonProtectionGroupResponseParamsPriorityKHigh string = "kHigh"
)

// prop value enum
func (m *CommonProtectionGroupResponseParams) validatePriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonProtectionGroupResponseParamsTypePriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonProtectionGroupResponseParams) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriorityEnum("priority", "body", *m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if m.StartTime != nil {
		if err := m.StartTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) validateAlertPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertPolicy) { // not required
		return nil
	}

	if m.AlertPolicy != nil {
		if err := m.AlertPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) validateSLA(formats strfmt.Registry) error {
	if swag.IsZero(m.SLA) { // not required
		return nil
	}

	for i := 0; i < len(m.SLA); i++ {
		if swag.IsZero(m.SLA[i]) { // not required
			continue
		}

		if m.SLA[i] != nil {
			if err := m.SLA[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sla" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sla" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var commonProtectionGroupResponseParamsTypeQosPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonProtectionGroupResponseParamsTypeQosPolicyPropEnum = append(commonProtectionGroupResponseParamsTypeQosPolicyPropEnum, v)
	}
}

const (

	// CommonProtectionGroupResponseParamsQosPolicyKBackupHDD captures enum value "kBackupHDD"
	CommonProtectionGroupResponseParamsQosPolicyKBackupHDD string = "kBackupHDD"

	// CommonProtectionGroupResponseParamsQosPolicyKBackupSSD captures enum value "kBackupSSD"
	CommonProtectionGroupResponseParamsQosPolicyKBackupSSD string = "kBackupSSD"

	// CommonProtectionGroupResponseParamsQosPolicyKTestAndDevHigh captures enum value "kTestAndDevHigh"
	CommonProtectionGroupResponseParamsQosPolicyKTestAndDevHigh string = "kTestAndDevHigh"

	// CommonProtectionGroupResponseParamsQosPolicyKBackupAll captures enum value "kBackupAll"
	CommonProtectionGroupResponseParamsQosPolicyKBackupAll string = "kBackupAll"
)

// prop value enum
func (m *CommonProtectionGroupResponseParams) validateQosPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonProtectionGroupResponseParamsTypeQosPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonProtectionGroupResponseParams) validateQosPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.QosPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateQosPolicyEnum("qosPolicy", "body", *m.QosPolicy); err != nil {
		return err
	}

	return nil
}

var commonProtectionGroupResponseParamsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsRDSPostgres","kAwsAuroraPostgres","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc","kO365ExchangeCSM","kO365OneDriveCSM","kO365SharepointCSM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonProtectionGroupResponseParamsTypeEnvironmentPropEnum = append(commonProtectionGroupResponseParamsTypeEnvironmentPropEnum, v)
	}
}

const (

	// CommonProtectionGroupResponseParamsEnvironmentKVMware captures enum value "kVMware"
	CommonProtectionGroupResponseParamsEnvironmentKVMware string = "kVMware"

	// CommonProtectionGroupResponseParamsEnvironmentKHyperV captures enum value "kHyperV"
	CommonProtectionGroupResponseParamsEnvironmentKHyperV string = "kHyperV"

	// CommonProtectionGroupResponseParamsEnvironmentKVCD captures enum value "kVCD"
	CommonProtectionGroupResponseParamsEnvironmentKVCD string = "kVCD"

	// CommonProtectionGroupResponseParamsEnvironmentKAzure captures enum value "kAzure"
	CommonProtectionGroupResponseParamsEnvironmentKAzure string = "kAzure"

	// CommonProtectionGroupResponseParamsEnvironmentKGCP captures enum value "kGCP"
	CommonProtectionGroupResponseParamsEnvironmentKGCP string = "kGCP"

	// CommonProtectionGroupResponseParamsEnvironmentKKVM captures enum value "kKVM"
	CommonProtectionGroupResponseParamsEnvironmentKKVM string = "kKVM"

	// CommonProtectionGroupResponseParamsEnvironmentKAcropolis captures enum value "kAcropolis"
	CommonProtectionGroupResponseParamsEnvironmentKAcropolis string = "kAcropolis"

	// CommonProtectionGroupResponseParamsEnvironmentKAWS captures enum value "kAWS"
	CommonProtectionGroupResponseParamsEnvironmentKAWS string = "kAWS"

	// CommonProtectionGroupResponseParamsEnvironmentKAWSNative captures enum value "kAWSNative"
	CommonProtectionGroupResponseParamsEnvironmentKAWSNative string = "kAWSNative"

	// CommonProtectionGroupResponseParamsEnvironmentKAwsS3 captures enum value "kAwsS3"
	CommonProtectionGroupResponseParamsEnvironmentKAwsS3 string = "kAwsS3"

	// CommonProtectionGroupResponseParamsEnvironmentKAWSSnapshotManager captures enum value "kAWSSnapshotManager"
	CommonProtectionGroupResponseParamsEnvironmentKAWSSnapshotManager string = "kAWSSnapshotManager"

	// CommonProtectionGroupResponseParamsEnvironmentKRDSSnapshotManager captures enum value "kRDSSnapshotManager"
	CommonProtectionGroupResponseParamsEnvironmentKRDSSnapshotManager string = "kRDSSnapshotManager"

	// CommonProtectionGroupResponseParamsEnvironmentKAuroraSnapshotManager captures enum value "kAuroraSnapshotManager"
	CommonProtectionGroupResponseParamsEnvironmentKAuroraSnapshotManager string = "kAuroraSnapshotManager"

	// CommonProtectionGroupResponseParamsEnvironmentKAwsRDSPostgresBackup captures enum value "kAwsRDSPostgresBackup"
	CommonProtectionGroupResponseParamsEnvironmentKAwsRDSPostgresBackup string = "kAwsRDSPostgresBackup"

	// CommonProtectionGroupResponseParamsEnvironmentKAwsRDSPostgres captures enum value "kAwsRDSPostgres"
	CommonProtectionGroupResponseParamsEnvironmentKAwsRDSPostgres string = "kAwsRDSPostgres"

	// CommonProtectionGroupResponseParamsEnvironmentKAwsAuroraPostgres captures enum value "kAwsAuroraPostgres"
	CommonProtectionGroupResponseParamsEnvironmentKAwsAuroraPostgres string = "kAwsAuroraPostgres"

	// CommonProtectionGroupResponseParamsEnvironmentKAzureNative captures enum value "kAzureNative"
	CommonProtectionGroupResponseParamsEnvironmentKAzureNative string = "kAzureNative"

	// CommonProtectionGroupResponseParamsEnvironmentKAzureSQL captures enum value "kAzureSQL"
	CommonProtectionGroupResponseParamsEnvironmentKAzureSQL string = "kAzureSQL"

	// CommonProtectionGroupResponseParamsEnvironmentKAzureSnapshotManager captures enum value "kAzureSnapshotManager"
	CommonProtectionGroupResponseParamsEnvironmentKAzureSnapshotManager string = "kAzureSnapshotManager"

	// CommonProtectionGroupResponseParamsEnvironmentKPhysical captures enum value "kPhysical"
	CommonProtectionGroupResponseParamsEnvironmentKPhysical string = "kPhysical"

	// CommonProtectionGroupResponseParamsEnvironmentKPhysicalFiles captures enum value "kPhysicalFiles"
	CommonProtectionGroupResponseParamsEnvironmentKPhysicalFiles string = "kPhysicalFiles"

	// CommonProtectionGroupResponseParamsEnvironmentKGPFS captures enum value "kGPFS"
	CommonProtectionGroupResponseParamsEnvironmentKGPFS string = "kGPFS"

	// CommonProtectionGroupResponseParamsEnvironmentKElastifile captures enum value "kElastifile"
	CommonProtectionGroupResponseParamsEnvironmentKElastifile string = "kElastifile"

	// CommonProtectionGroupResponseParamsEnvironmentKNetapp captures enum value "kNetapp"
	CommonProtectionGroupResponseParamsEnvironmentKNetapp string = "kNetapp"

	// CommonProtectionGroupResponseParamsEnvironmentKGenericNas captures enum value "kGenericNas"
	CommonProtectionGroupResponseParamsEnvironmentKGenericNas string = "kGenericNas"

	// CommonProtectionGroupResponseParamsEnvironmentKIsilon captures enum value "kIsilon"
	CommonProtectionGroupResponseParamsEnvironmentKIsilon string = "kIsilon"

	// CommonProtectionGroupResponseParamsEnvironmentKFlashBlade captures enum value "kFlashBlade"
	CommonProtectionGroupResponseParamsEnvironmentKFlashBlade string = "kFlashBlade"

	// CommonProtectionGroupResponseParamsEnvironmentKPure captures enum value "kPure"
	CommonProtectionGroupResponseParamsEnvironmentKPure string = "kPure"

	// CommonProtectionGroupResponseParamsEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	CommonProtectionGroupResponseParamsEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// CommonProtectionGroupResponseParamsEnvironmentKSQL captures enum value "kSQL"
	CommonProtectionGroupResponseParamsEnvironmentKSQL string = "kSQL"

	// CommonProtectionGroupResponseParamsEnvironmentKExchange captures enum value "kExchange"
	CommonProtectionGroupResponseParamsEnvironmentKExchange string = "kExchange"

	// CommonProtectionGroupResponseParamsEnvironmentKAD captures enum value "kAD"
	CommonProtectionGroupResponseParamsEnvironmentKAD string = "kAD"

	// CommonProtectionGroupResponseParamsEnvironmentKOracle captures enum value "kOracle"
	CommonProtectionGroupResponseParamsEnvironmentKOracle string = "kOracle"

	// CommonProtectionGroupResponseParamsEnvironmentKView captures enum value "kView"
	CommonProtectionGroupResponseParamsEnvironmentKView string = "kView"

	// CommonProtectionGroupResponseParamsEnvironmentKRemoteAdapter captures enum value "kRemoteAdapter"
	CommonProtectionGroupResponseParamsEnvironmentKRemoteAdapter string = "kRemoteAdapter"

	// CommonProtectionGroupResponseParamsEnvironmentKO365 captures enum value "kO365"
	CommonProtectionGroupResponseParamsEnvironmentKO365 string = "kO365"

	// CommonProtectionGroupResponseParamsEnvironmentKO365PublicFolders captures enum value "kO365PublicFolders"
	CommonProtectionGroupResponseParamsEnvironmentKO365PublicFolders string = "kO365PublicFolders"

	// CommonProtectionGroupResponseParamsEnvironmentKO365Teams captures enum value "kO365Teams"
	CommonProtectionGroupResponseParamsEnvironmentKO365Teams string = "kO365Teams"

	// CommonProtectionGroupResponseParamsEnvironmentKO365Group captures enum value "kO365Group"
	CommonProtectionGroupResponseParamsEnvironmentKO365Group string = "kO365Group"

	// CommonProtectionGroupResponseParamsEnvironmentKO365Exchange captures enum value "kO365Exchange"
	CommonProtectionGroupResponseParamsEnvironmentKO365Exchange string = "kO365Exchange"

	// CommonProtectionGroupResponseParamsEnvironmentKO365OneDrive captures enum value "kO365OneDrive"
	CommonProtectionGroupResponseParamsEnvironmentKO365OneDrive string = "kO365OneDrive"

	// CommonProtectionGroupResponseParamsEnvironmentKO365Sharepoint captures enum value "kO365Sharepoint"
	CommonProtectionGroupResponseParamsEnvironmentKO365Sharepoint string = "kO365Sharepoint"

	// CommonProtectionGroupResponseParamsEnvironmentKKubernetes captures enum value "kKubernetes"
	CommonProtectionGroupResponseParamsEnvironmentKKubernetes string = "kKubernetes"

	// CommonProtectionGroupResponseParamsEnvironmentKCassandra captures enum value "kCassandra"
	CommonProtectionGroupResponseParamsEnvironmentKCassandra string = "kCassandra"

	// CommonProtectionGroupResponseParamsEnvironmentKMongoDB captures enum value "kMongoDB"
	CommonProtectionGroupResponseParamsEnvironmentKMongoDB string = "kMongoDB"

	// CommonProtectionGroupResponseParamsEnvironmentKCouchbase captures enum value "kCouchbase"
	CommonProtectionGroupResponseParamsEnvironmentKCouchbase string = "kCouchbase"

	// CommonProtectionGroupResponseParamsEnvironmentKHdfs captures enum value "kHdfs"
	CommonProtectionGroupResponseParamsEnvironmentKHdfs string = "kHdfs"

	// CommonProtectionGroupResponseParamsEnvironmentKHive captures enum value "kHive"
	CommonProtectionGroupResponseParamsEnvironmentKHive string = "kHive"

	// CommonProtectionGroupResponseParamsEnvironmentKHBase captures enum value "kHBase"
	CommonProtectionGroupResponseParamsEnvironmentKHBase string = "kHBase"

	// CommonProtectionGroupResponseParamsEnvironmentKSAPHANA captures enum value "kSAPHANA"
	CommonProtectionGroupResponseParamsEnvironmentKSAPHANA string = "kSAPHANA"

	// CommonProtectionGroupResponseParamsEnvironmentKUDA captures enum value "kUDA"
	CommonProtectionGroupResponseParamsEnvironmentKUDA string = "kUDA"

	// CommonProtectionGroupResponseParamsEnvironmentKSfdc captures enum value "kSfdc"
	CommonProtectionGroupResponseParamsEnvironmentKSfdc string = "kSfdc"

	// CommonProtectionGroupResponseParamsEnvironmentKO365ExchangeCSM captures enum value "kO365ExchangeCSM"
	CommonProtectionGroupResponseParamsEnvironmentKO365ExchangeCSM string = "kO365ExchangeCSM"

	// CommonProtectionGroupResponseParamsEnvironmentKO365OneDriveCSM captures enum value "kO365OneDriveCSM"
	CommonProtectionGroupResponseParamsEnvironmentKO365OneDriveCSM string = "kO365OneDriveCSM"

	// CommonProtectionGroupResponseParamsEnvironmentKO365SharepointCSM captures enum value "kO365SharepointCSM"
	CommonProtectionGroupResponseParamsEnvironmentKO365SharepointCSM string = "kO365SharepointCSM"
)

// prop value enum
func (m *CommonProtectionGroupResponseParams) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonProtectionGroupResponseParamsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonProtectionGroupResponseParams) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) validateLastRun(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRun) { // not required
		return nil
	}

	if m.LastRun != nil {
		if err := m.LastRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastRun")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) validateMissingEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.MissingEntities) { // not required
		return nil
	}

	for i := 0; i < len(m.MissingEntities); i++ {
		if swag.IsZero(m.MissingEntities[i]) { // not required
			continue
		}

		if m.MissingEntities[i] != nil {
			if err := m.MissingEntities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("missingEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("missingEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) validateInvalidEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.InvalidEntities) { // not required
		return nil
	}

	for i := 0; i < len(m.InvalidEntities); i++ {
		if swag.IsZero(m.InvalidEntities[i]) { // not required
			continue
		}

		if m.InvalidEntities[i] != nil {
			if err := m.InvalidEntities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invalidEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("invalidEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) validateAdvancedConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvancedConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.AdvancedConfigs); i++ {
		if swag.IsZero(m.AdvancedConfigs[i]) { // not required
			continue
		}

		if m.AdvancedConfigs[i] != nil {
			if err := m.AdvancedConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this common protection group response params based on the context it is used
func (m *CommonProtectionGroupResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlertPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSLA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMissingEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvalidEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdvancedConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonProtectionGroupResponseParams) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if m.StartTime != nil {

		if swag.IsZero(m.StartTime) { // not required
			return nil
		}

		if err := m.StartTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) contextValidateAlertPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertPolicy != nil {

		if swag.IsZero(m.AlertPolicy) { // not required
			return nil
		}

		if err := m.AlertPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) contextValidateSLA(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SLA); i++ {

		if m.SLA[i] != nil {

			if swag.IsZero(m.SLA[i]) { // not required
				return nil
			}

			if err := m.SLA[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sla" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sla" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) contextValidateLastRun(ctx context.Context, formats strfmt.Registry) error {

	if m.LastRun != nil {

		if swag.IsZero(m.LastRun) { // not required
			return nil
		}

		if err := m.LastRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastRun")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Permissions); i++ {

		if m.Permissions[i] != nil {

			if swag.IsZero(m.Permissions[i]) { // not required
				return nil
			}

			if err := m.Permissions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) contextValidateMissingEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MissingEntities); i++ {

		if m.MissingEntities[i] != nil {

			if swag.IsZero(m.MissingEntities[i]) { // not required
				return nil
			}

			if err := m.MissingEntities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("missingEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("missingEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) contextValidateInvalidEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InvalidEntities); i++ {

		if m.InvalidEntities[i] != nil {

			if swag.IsZero(m.InvalidEntities[i]) { // not required
				return nil
			}

			if err := m.InvalidEntities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invalidEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("invalidEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonProtectionGroupResponseParams) contextValidateAdvancedConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdvancedConfigs); i++ {

		if m.AdvancedConfigs[i] != nil {

			if swag.IsZero(m.AdvancedConfigs[i]) { // not required
				return nil
			}

			if err := m.AdvancedConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonProtectionGroupResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonProtectionGroupResponseParams) UnmarshalBinary(b []byte) error {
	var res CommonProtectionGroupResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
