// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloneViewDirectoryParams Specifies the parameters to clone View directory.
//
// swagger:model CloneViewDirectoryParams
type CloneViewDirectoryParams struct {

	// Specifies the path of source directory. This is the full path including the Storage Domain name and View name.
	// Required: true
	SourceDirectoryPath *string `json:"sourceDirectoryPath"`

	// Specifies the path of parent directory of the target directory. This is the full path including the Storage Domain name and View Name.
	// Required: true
	TargetParentDirectoryPath *string `json:"targetParentDirectoryPath"`

	// Specifies the name of the target directory.
	// Required: true
	TargetDirectoryName *string `json:"targetDirectoryName"`
}

// Validate validates this clone view directory params
func (m *CloneViewDirectoryParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceDirectoryPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetParentDirectoryPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetDirectoryName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneViewDirectoryParams) validateSourceDirectoryPath(formats strfmt.Registry) error {

	if err := validate.Required("sourceDirectoryPath", "body", m.SourceDirectoryPath); err != nil {
		return err
	}

	return nil
}

func (m *CloneViewDirectoryParams) validateTargetParentDirectoryPath(formats strfmt.Registry) error {

	if err := validate.Required("targetParentDirectoryPath", "body", m.TargetParentDirectoryPath); err != nil {
		return err
	}

	return nil
}

func (m *CloneViewDirectoryParams) validateTargetDirectoryName(formats strfmt.Registry) error {

	if err := validate.Required("targetDirectoryName", "body", m.TargetDirectoryName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this clone view directory params based on context it is used
func (m *CloneViewDirectoryParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CloneViewDirectoryParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloneViewDirectoryParams) UnmarshalBinary(b []byte) error {
	var res CloneViewDirectoryParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
