// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleDatabaseHost Oracle Protection Group Database Host
//
// Specifies details about an Oracle database host.
//
// swagger:model OracleDatabaseHost
type OracleDatabaseHost struct {

	// Specifies the id of the database host from which backup is allowed.
	HostID *string `json:"hostId,omitempty"`

	// Specifies the number of channels to be created for this host. Default value for the number of channels will be calculated as the minimum of number of nodes in Cohesity cluster and 2 * number of CPU on the host.
	ChannelCount int32 `json:"channelCount,omitempty"`

	// Specifies the port where the Database is listening.
	Port int64 `json:"port,omitempty"`

	// Specifies the necessary parameters for SBT. This is set only when backup type is kSbt.
	SbtHostParams *OracleSbtHostParams `json:"sbtHostParams,omitempty"`
}

// Validate validates this oracle database host
func (m *OracleDatabaseHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSbtHostParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleDatabaseHost) validateSbtHostParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SbtHostParams) { // not required
		return nil
	}

	if m.SbtHostParams != nil {
		if err := m.SbtHostParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sbtHostParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sbtHostParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle database host based on the context it is used
func (m *OracleDatabaseHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSbtHostParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleDatabaseHost) contextValidateSbtHostParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SbtHostParams != nil {

		if swag.IsZero(m.SbtHostParams) { // not required
			return nil
		}

		if err := m.SbtHostParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sbtHostParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sbtHostParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleDatabaseHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleDatabaseHost) UnmarshalBinary(b []byte) error {
	var res OracleDatabaseHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
