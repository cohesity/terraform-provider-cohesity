// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SourceConnectionRequestParams Test connection request parameters.
//
// Specifies the parameters to test connectivity with a source.
//
// swagger:model SourceConnectionRequestParams
type SourceConnectionRequestParams struct {
	CommonSourceConnectionRequestParams

	// cassandra connection params
	CassandraConnectionParams *CassandraConnectionParams `json:"cassandraConnectionParams,omitempty"`

	// hive connection params
	HiveConnectionParams *HadoopConnectionParams `json:"hiveConnectionParams,omitempty"`

	// hbase connection params
	HbaseConnectionParams *HadoopConnectionParams `json:"hbaseConnectionParams,omitempty"`

	// hdfs connection params
	HdfsConnectionParams *HadoopConnectionParams `json:"hdfsConnectionParams,omitempty"`

	// mssql connection params
	MssqlConnectionParams *MssqlConnectionParams `json:"mssqlConnectionParams,omitempty"`

	// oracle connection params
	OracleConnectionParams *OracleConnectionParams `json:"oracleConnectionParams,omitempty"`

	// vmware connection params
	VmwareConnectionParams *VmwareConnectionParams `json:"vmwareConnectionParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SourceConnectionRequestParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonSourceConnectionRequestParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonSourceConnectionRequestParams = aO0

	// AO1
	var dataAO1 struct {
		CassandraConnectionParams *CassandraConnectionParams `json:"cassandraConnectionParams,omitempty"`

		HiveConnectionParams *HadoopConnectionParams `json:"hiveConnectionParams,omitempty"`

		HbaseConnectionParams *HadoopConnectionParams `json:"hbaseConnectionParams,omitempty"`

		HdfsConnectionParams *HadoopConnectionParams `json:"hdfsConnectionParams,omitempty"`

		MssqlConnectionParams *MssqlConnectionParams `json:"mssqlConnectionParams,omitempty"`

		OracleConnectionParams *OracleConnectionParams `json:"oracleConnectionParams,omitempty"`

		VmwareConnectionParams *VmwareConnectionParams `json:"vmwareConnectionParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CassandraConnectionParams = dataAO1.CassandraConnectionParams

	m.HiveConnectionParams = dataAO1.HiveConnectionParams

	m.HbaseConnectionParams = dataAO1.HbaseConnectionParams

	m.HdfsConnectionParams = dataAO1.HdfsConnectionParams

	m.MssqlConnectionParams = dataAO1.MssqlConnectionParams

	m.OracleConnectionParams = dataAO1.OracleConnectionParams

	m.VmwareConnectionParams = dataAO1.VmwareConnectionParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SourceConnectionRequestParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonSourceConnectionRequestParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CassandraConnectionParams *CassandraConnectionParams `json:"cassandraConnectionParams,omitempty"`

		HiveConnectionParams *HadoopConnectionParams `json:"hiveConnectionParams,omitempty"`

		HbaseConnectionParams *HadoopConnectionParams `json:"hbaseConnectionParams,omitempty"`

		HdfsConnectionParams *HadoopConnectionParams `json:"hdfsConnectionParams,omitempty"`

		MssqlConnectionParams *MssqlConnectionParams `json:"mssqlConnectionParams,omitempty"`

		OracleConnectionParams *OracleConnectionParams `json:"oracleConnectionParams,omitempty"`

		VmwareConnectionParams *VmwareConnectionParams `json:"vmwareConnectionParams,omitempty"`
	}

	dataAO1.CassandraConnectionParams = m.CassandraConnectionParams

	dataAO1.HiveConnectionParams = m.HiveConnectionParams

	dataAO1.HbaseConnectionParams = m.HbaseConnectionParams

	dataAO1.HdfsConnectionParams = m.HdfsConnectionParams

	dataAO1.MssqlConnectionParams = m.MssqlConnectionParams

	dataAO1.OracleConnectionParams = m.OracleConnectionParams

	dataAO1.VmwareConnectionParams = m.VmwareConnectionParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this source connection request params
func (m *SourceConnectionRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonSourceConnectionRequestParams
	if err := m.CommonSourceConnectionRequestParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMssqlConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareConnectionParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceConnectionRequestParams) validateCassandraConnectionParams(formats strfmt.Registry) error {

	if swag.IsZero(m.CassandraConnectionParams) { // not required
		return nil
	}

	if m.CassandraConnectionParams != nil {
		if err := m.CassandraConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) validateHiveConnectionParams(formats strfmt.Registry) error {

	if swag.IsZero(m.HiveConnectionParams) { // not required
		return nil
	}

	if m.HiveConnectionParams != nil {
		if err := m.HiveConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) validateHbaseConnectionParams(formats strfmt.Registry) error {

	if swag.IsZero(m.HbaseConnectionParams) { // not required
		return nil
	}

	if m.HbaseConnectionParams != nil {
		if err := m.HbaseConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) validateHdfsConnectionParams(formats strfmt.Registry) error {

	if swag.IsZero(m.HdfsConnectionParams) { // not required
		return nil
	}

	if m.HdfsConnectionParams != nil {
		if err := m.HdfsConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) validateMssqlConnectionParams(formats strfmt.Registry) error {

	if swag.IsZero(m.MssqlConnectionParams) { // not required
		return nil
	}

	if m.MssqlConnectionParams != nil {
		if err := m.MssqlConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) validateOracleConnectionParams(formats strfmt.Registry) error {

	if swag.IsZero(m.OracleConnectionParams) { // not required
		return nil
	}

	if m.OracleConnectionParams != nil {
		if err := m.OracleConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) validateVmwareConnectionParams(formats strfmt.Registry) error {

	if swag.IsZero(m.VmwareConnectionParams) { // not required
		return nil
	}

	if m.VmwareConnectionParams != nil {
		if err := m.VmwareConnectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareConnectionParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this source connection request params based on the context it is used
func (m *SourceConnectionRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonSourceConnectionRequestParams
	if err := m.CommonSourceConnectionRequestParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMssqlConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareConnectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceConnectionRequestParams) contextValidateCassandraConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraConnectionParams != nil {

		if swag.IsZero(m.CassandraConnectionParams) { // not required
			return nil
		}

		if err := m.CassandraConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) contextValidateHiveConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveConnectionParams != nil {

		if swag.IsZero(m.HiveConnectionParams) { // not required
			return nil
		}

		if err := m.HiveConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) contextValidateHbaseConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseConnectionParams != nil {

		if swag.IsZero(m.HbaseConnectionParams) { // not required
			return nil
		}

		if err := m.HbaseConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) contextValidateHdfsConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsConnectionParams != nil {

		if swag.IsZero(m.HdfsConnectionParams) { // not required
			return nil
		}

		if err := m.HdfsConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) contextValidateMssqlConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MssqlConnectionParams != nil {

		if swag.IsZero(m.MssqlConnectionParams) { // not required
			return nil
		}

		if err := m.MssqlConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) contextValidateOracleConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleConnectionParams != nil {

		if swag.IsZero(m.OracleConnectionParams) { // not required
			return nil
		}

		if err := m.OracleConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleConnectionParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionRequestParams) contextValidateVmwareConnectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareConnectionParams != nil {

		if swag.IsZero(m.VmwareConnectionParams) { // not required
			return nil
		}

		if err := m.VmwareConnectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareConnectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareConnectionParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SourceConnectionRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceConnectionRequestParams) UnmarshalBinary(b []byte) error {
	var res SourceConnectionRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
