// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateNetworkInfo Azure Snapshot Manager Protection Group Object Params.
//
// Specifies the object parameters to create Azure Snapshot Manager Protection Group.
//
// swagger:model PrivateNetworkInfo
type PrivateNetworkInfo struct {

	// Specifies the subnet for creating a private endpoint.
	Location *string `json:"location,omitempty"`

	// Specifies the region of the virtual network.
	Region *RecoveryObjectIdentifier `json:"region,omitempty"`

	// Specifies the subnet for creating a private endpoint.
	Subnet *RecoveryObjectIdentifier `json:"subnet,omitempty"`

	// Specifies the virtual network for creating a private end point.
	Vpn *RecoveryObjectIdentifier `json:"vpn,omitempty"`
}

// Validate validates this private network info
func (m *PrivateNetworkInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateNetworkInfo) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetworkInfo) validateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {
		if err := m.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetworkInfo) validateVpn(formats strfmt.Registry) error {
	if swag.IsZero(m.Vpn) { // not required
		return nil
	}

	if m.Vpn != nil {
		if err := m.Vpn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpn")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private network info based on the context it is used
func (m *PrivateNetworkInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateNetworkInfo) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetworkInfo) contextValidateSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.Subnet != nil {

		if swag.IsZero(m.Subnet) { // not required
			return nil
		}

		if err := m.Subnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateNetworkInfo) contextValidateVpn(ctx context.Context, formats strfmt.Registry) error {

	if m.Vpn != nil {

		if swag.IsZero(m.Vpn) { // not required
			return nil
		}

		if err := m.Vpn.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpn")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateNetworkInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateNetworkInfo) UnmarshalBinary(b []byte) error {
	var res PrivateNetworkInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
