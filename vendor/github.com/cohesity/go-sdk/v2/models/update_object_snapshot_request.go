// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateObjectSnapshotRequest Update Object Snapshot Request.
//
// Specifies the parameters to update an object snapshot.
//
// swagger:model UpdateObjectSnapshotRequest
type UpdateObjectSnapshotRequest struct {

	// Whether to set the snapshot on legal hold. If set to true, the run cannot be deleted during the retention period.
	SetLegalHold *bool `json:"setLegalHold,omitempty"`

	// Specifies the snapshot data lock type.
	// Enum: ["Compliance","Administrative"]
	DataLockType *string `json:"dataLockType,omitempty"`

	// Specifies the expiry time of the snapshot in Unix timestamp epoch in seconds.
	ExpiryTimeSecs *int64 `json:"expiryTimeSecs,omitempty"`
}

// Validate validates this update object snapshot request
func (m *UpdateObjectSnapshotRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataLockType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateObjectSnapshotRequestTypeDataLockTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Compliance","Administrative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateObjectSnapshotRequestTypeDataLockTypePropEnum = append(updateObjectSnapshotRequestTypeDataLockTypePropEnum, v)
	}
}

const (

	// UpdateObjectSnapshotRequestDataLockTypeCompliance captures enum value "Compliance"
	UpdateObjectSnapshotRequestDataLockTypeCompliance string = "Compliance"

	// UpdateObjectSnapshotRequestDataLockTypeAdministrative captures enum value "Administrative"
	UpdateObjectSnapshotRequestDataLockTypeAdministrative string = "Administrative"
)

// prop value enum
func (m *UpdateObjectSnapshotRequest) validateDataLockTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateObjectSnapshotRequestTypeDataLockTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateObjectSnapshotRequest) validateDataLockType(formats strfmt.Registry) error {
	if swag.IsZero(m.DataLockType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataLockTypeEnum("dataLockType", "body", *m.DataLockType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update object snapshot request based on context it is used
func (m *UpdateObjectSnapshotRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateObjectSnapshotRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateObjectSnapshotRequest) UnmarshalBinary(b []byte) error {
	var res UpdateObjectSnapshotRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
