// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverOneDriveParams Specifies the parameters to recover an Office 365 OneDrive.
//
// swagger:model RecoverOneDriveParams
type RecoverOneDriveParams struct {

	// Specifies a list of OneDrive params associated with the objects to recover. These parameters allow overriding the request level 'recoverUserDefaultDrive' parameter for each object specified here.
	// Required: true
	Objects []*ObjectOneDriveParam `json:"objects"`

	// Specifies whether to continue recovering other OneDrive items if one of items failed to recover. Default value is false.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies whether to recover Preservation Hold Library associated with the OneDrives selected for restore. Default value is false.
	RecoverPreservationHoldLibrary *bool `json:"recoverPreservationHoldLibrary,omitempty"`

	// Specifies whether to recover default drives associated with the OneDrives selected for restore. Default value is true. This setting can be overridden for each object selected for recovery, by specifying 'recoverEntireDrive' for the desired drive within 'oneDriveParams'. Granular recovery is still allowed even if this value is set to true.
	RecoverUserDefaultDrive *bool `json:"recoverUserDefaultDrive,omitempty"`

	// Specifies the target OneDrive to recover to. If not specified, the objects will be recovered to original location.
	TargetDrive *TargetOneDriveParam `json:"targetDrive,omitempty"`
}

// Validate validates this recover one drive params
func (m *RecoverOneDriveParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetDrive(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverOneDriveParams) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverOneDriveParams) validateTargetDrive(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetDrive) { // not required
		return nil
	}

	if m.TargetDrive != nil {
		if err := m.TargetDrive.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetDrive")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetDrive")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover one drive params based on the context it is used
func (m *RecoverOneDriveParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetDrive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverOneDriveParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverOneDriveParams) contextValidateTargetDrive(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetDrive != nil {

		if swag.IsZero(m.TargetDrive) { // not required
			return nil
		}

		if err := m.TargetDrive.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetDrive")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetDrive")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverOneDriveParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverOneDriveParams) UnmarshalBinary(b []byte) error {
	var res RecoverOneDriveParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
