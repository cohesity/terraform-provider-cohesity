// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaginationParams Specifies the cursor based pagination parameters for Protection Source and its children. Pagination is supported at a given level within the Protection Source Hierarchy with the help of before or after cursors. A Cursor will always refer to a specific source within the source dataset but will be invalidated if the item is removed.
//
// swagger:model PaginationParams
type PaginationParams struct {

	// Specifies the maximum number of entities to be returned within the page.
	PageSize *int64 `json:"pageSize,omitempty"`

	// Specifies the entity id for the Node at any level within the Source entity hierarchy whose children are to be paginated.
	// Required: true
	NodeID *int64 `json:"nodeId"`

	// pagination cursor
	PaginationCursor *PaginationCursor `json:"paginationCursor,omitempty"`
}

// Validate validates this pagination params
func (m *PaginationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaginationCursor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginationParams) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("nodeId", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

func (m *PaginationParams) validatePaginationCursor(formats strfmt.Registry) error {
	if swag.IsZero(m.PaginationCursor) { // not required
		return nil
	}

	if m.PaginationCursor != nil {
		if err := m.PaginationCursor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paginationCursor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paginationCursor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pagination params based on the context it is used
func (m *PaginationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaginationCursor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginationParams) contextValidatePaginationCursor(ctx context.Context, formats strfmt.Registry) error {

	if m.PaginationCursor != nil {

		if swag.IsZero(m.PaginationCursor) { // not required
			return nil
		}

		if err := m.PaginationCursor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paginationCursor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paginationCursor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaginationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginationParams) UnmarshalBinary(b []byte) error {
	var res PaginationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
