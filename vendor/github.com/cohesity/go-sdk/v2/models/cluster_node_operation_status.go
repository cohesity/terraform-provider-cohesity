// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterNodeOperationStatus Status of operation on a node.
//
// swagger:model ClusterNodeOperationStatus
type ClusterNodeOperationStatus struct {

	// Specifies the ID of the node.
	ID *int64 `json:"id,omitempty"`

	// Specifies the IP address of the node.
	IP *string `json:"ip,omitempty"`

	// Specifies the approximate completion percentage for the operation.
	Percentage int32 `json:"percentage,omitempty"`

	// Specifies the status of the operation.
	// `Success` indicates the operation is successful.
	// `Failed` indicates the operation failed due to an error.
	// `InProgress` indicates the operation is in progress.
	//
	// Enum: ["InProgress","Success","Failed","Paused","PartiallyCompleted","Canceled","CancelPending","Skipped","Error"]
	Status *string `json:"status,omitempty"`

	// Specifies the list of events that took place
	// during the operation.
	//
	Events []*OperationEvents `json:"events,omitempty"`
}

// Validate validates this cluster node operation status
func (m *ClusterNodeOperationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterNodeOperationStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InProgress","Success","Failed","Paused","PartiallyCompleted","Canceled","CancelPending","Skipped","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterNodeOperationStatusTypeStatusPropEnum = append(clusterNodeOperationStatusTypeStatusPropEnum, v)
	}
}

const (

	// ClusterNodeOperationStatusStatusInProgress captures enum value "InProgress"
	ClusterNodeOperationStatusStatusInProgress string = "InProgress"

	// ClusterNodeOperationStatusStatusSuccess captures enum value "Success"
	ClusterNodeOperationStatusStatusSuccess string = "Success"

	// ClusterNodeOperationStatusStatusFailed captures enum value "Failed"
	ClusterNodeOperationStatusStatusFailed string = "Failed"

	// ClusterNodeOperationStatusStatusPaused captures enum value "Paused"
	ClusterNodeOperationStatusStatusPaused string = "Paused"

	// ClusterNodeOperationStatusStatusPartiallyCompleted captures enum value "PartiallyCompleted"
	ClusterNodeOperationStatusStatusPartiallyCompleted string = "PartiallyCompleted"

	// ClusterNodeOperationStatusStatusCanceled captures enum value "Canceled"
	ClusterNodeOperationStatusStatusCanceled string = "Canceled"

	// ClusterNodeOperationStatusStatusCancelPending captures enum value "CancelPending"
	ClusterNodeOperationStatusStatusCancelPending string = "CancelPending"

	// ClusterNodeOperationStatusStatusSkipped captures enum value "Skipped"
	ClusterNodeOperationStatusStatusSkipped string = "Skipped"

	// ClusterNodeOperationStatusStatusError captures enum value "Error"
	ClusterNodeOperationStatusStatusError string = "Error"
)

// prop value enum
func (m *ClusterNodeOperationStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterNodeOperationStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterNodeOperationStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ClusterNodeOperationStatus) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster node operation status based on the context it is used
func (m *ClusterNodeOperationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodeOperationStatus) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {

			if swag.IsZero(m.Events[i]) { // not required
				return nil
			}

			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNodeOperationStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNodeOperationStatus) UnmarshalBinary(b []byte) error {
	var res ClusterNodeOperationStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
