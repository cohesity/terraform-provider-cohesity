// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OnPremDeployTargetResult OnPrem Deploy result for a target.
//
// OnPrem Deploy result for a target.
//
// swagger:model OnPremDeployTargetResult
type OnPremDeployTargetResult struct {

	// Status of the OnPrem deploy for a target. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]
	Status *string `json:"status,omitempty"`

	// Message about the onprem deploy run.
	Message *string `json:"message,omitempty"`

	// Target environment of the onprem deploy task.
	// Enum: ["kVMware"]
	Environment *string `json:"environment,omitempty"`

	// vmware params
	VmwareParams *OnPremDeployTargetResultVmwareParams `json:"vmwareParams,omitempty"`

	// Specifies the error message for onprem task failure.
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// Validate validates this on prem deploy target result
func (m *OnPremDeployTargetResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var onPremDeployTargetResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		onPremDeployTargetResultTypeStatusPropEnum = append(onPremDeployTargetResultTypeStatusPropEnum, v)
	}
}

const (

	// OnPremDeployTargetResultStatusAccepted captures enum value "Accepted"
	OnPremDeployTargetResultStatusAccepted string = "Accepted"

	// OnPremDeployTargetResultStatusRunning captures enum value "Running"
	OnPremDeployTargetResultStatusRunning string = "Running"

	// OnPremDeployTargetResultStatusCanceled captures enum value "Canceled"
	OnPremDeployTargetResultStatusCanceled string = "Canceled"

	// OnPremDeployTargetResultStatusCanceling captures enum value "Canceling"
	OnPremDeployTargetResultStatusCanceling string = "Canceling"

	// OnPremDeployTargetResultStatusFailed captures enum value "Failed"
	OnPremDeployTargetResultStatusFailed string = "Failed"

	// OnPremDeployTargetResultStatusMissed captures enum value "Missed"
	OnPremDeployTargetResultStatusMissed string = "Missed"

	// OnPremDeployTargetResultStatusSucceeded captures enum value "Succeeded"
	OnPremDeployTargetResultStatusSucceeded string = "Succeeded"

	// OnPremDeployTargetResultStatusSucceededWithWarning captures enum value "SucceededWithWarning"
	OnPremDeployTargetResultStatusSucceededWithWarning string = "SucceededWithWarning"

	// OnPremDeployTargetResultStatusOnHold captures enum value "OnHold"
	OnPremDeployTargetResultStatusOnHold string = "OnHold"

	// OnPremDeployTargetResultStatusFinalizing captures enum value "Finalizing"
	OnPremDeployTargetResultStatusFinalizing string = "Finalizing"

	// OnPremDeployTargetResultStatusSkipped captures enum value "Skipped"
	OnPremDeployTargetResultStatusSkipped string = "Skipped"

	// OnPremDeployTargetResultStatusLegalHold captures enum value "LegalHold"
	OnPremDeployTargetResultStatusLegalHold string = "LegalHold"

	// OnPremDeployTargetResultStatusPaused captures enum value "Paused"
	OnPremDeployTargetResultStatusPaused string = "Paused"
)

// prop value enum
func (m *OnPremDeployTargetResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, onPremDeployTargetResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OnPremDeployTargetResult) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var onPremDeployTargetResultTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		onPremDeployTargetResultTypeEnvironmentPropEnum = append(onPremDeployTargetResultTypeEnvironmentPropEnum, v)
	}
}

const (

	// OnPremDeployTargetResultEnvironmentKVMware captures enum value "kVMware"
	OnPremDeployTargetResultEnvironmentKVMware string = "kVMware"
)

// prop value enum
func (m *OnPremDeployTargetResult) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, onPremDeployTargetResultTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OnPremDeployTargetResult) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *OnPremDeployTargetResult) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this on prem deploy target result based on the context it is used
func (m *OnPremDeployTargetResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnPremDeployTargetResult) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OnPremDeployTargetResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnPremDeployTargetResult) UnmarshalBinary(b []byte) error {
	var res OnPremDeployTargetResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
