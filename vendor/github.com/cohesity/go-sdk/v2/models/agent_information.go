// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgentInformation Specifies the agent details.
//
// swagger:model AgentInformation
type AgentInformation struct {

	// Specifies the status of agent connection.
	// Enum: ["Unknown","Healthy","Unregistered","Unreachable","Unhealthy","Error"]
	ConnectionStatus *string `json:"connectionStatus,omitempty"`

	// Specifies the whether agent version is compatible with cluster version ro use various features.
	// Enum: ["Supported","Upgrade","Unsupported"]
	SupportStatus *string `json:"supportStatus,omitempty"`

	// Specifies the software version of the agent
	AgentSwVersion *string `json:"agentSwVersion,omitempty"`

	// Specifies the time in usecs when the last agent info was fetched.
	LastFetchedTimeInUsecs *int64 `json:"lastFetchedTimeInUsecs,omitempty"`

	// Specifies the list of host checks and its results.
	HostSettingChecks []*HostSettingCheck `json:"hostSettingChecks"`
}

// Validate validates this agent information
func (m *AgentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostSettingChecks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentInformationTypeConnectionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Healthy","Unregistered","Unreachable","Unhealthy","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentInformationTypeConnectionStatusPropEnum = append(agentInformationTypeConnectionStatusPropEnum, v)
	}
}

const (

	// AgentInformationConnectionStatusUnknown captures enum value "Unknown"
	AgentInformationConnectionStatusUnknown string = "Unknown"

	// AgentInformationConnectionStatusHealthy captures enum value "Healthy"
	AgentInformationConnectionStatusHealthy string = "Healthy"

	// AgentInformationConnectionStatusUnregistered captures enum value "Unregistered"
	AgentInformationConnectionStatusUnregistered string = "Unregistered"

	// AgentInformationConnectionStatusUnreachable captures enum value "Unreachable"
	AgentInformationConnectionStatusUnreachable string = "Unreachable"

	// AgentInformationConnectionStatusUnhealthy captures enum value "Unhealthy"
	AgentInformationConnectionStatusUnhealthy string = "Unhealthy"

	// AgentInformationConnectionStatusError captures enum value "Error"
	AgentInformationConnectionStatusError string = "Error"
)

// prop value enum
func (m *AgentInformation) validateConnectionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentInformationTypeConnectionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgentInformation) validateConnectionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionStatusEnum("connectionStatus", "body", *m.ConnectionStatus); err != nil {
		return err
	}

	return nil
}

var agentInformationTypeSupportStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Supported","Upgrade","Unsupported"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentInformationTypeSupportStatusPropEnum = append(agentInformationTypeSupportStatusPropEnum, v)
	}
}

const (

	// AgentInformationSupportStatusSupported captures enum value "Supported"
	AgentInformationSupportStatusSupported string = "Supported"

	// AgentInformationSupportStatusUpgrade captures enum value "Upgrade"
	AgentInformationSupportStatusUpgrade string = "Upgrade"

	// AgentInformationSupportStatusUnsupported captures enum value "Unsupported"
	AgentInformationSupportStatusUnsupported string = "Unsupported"
)

// prop value enum
func (m *AgentInformation) validateSupportStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentInformationTypeSupportStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgentInformation) validateSupportStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SupportStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateSupportStatusEnum("supportStatus", "body", *m.SupportStatus); err != nil {
		return err
	}

	return nil
}

func (m *AgentInformation) validateHostSettingChecks(formats strfmt.Registry) error {
	if swag.IsZero(m.HostSettingChecks) { // not required
		return nil
	}

	for i := 0; i < len(m.HostSettingChecks); i++ {
		if swag.IsZero(m.HostSettingChecks[i]) { // not required
			continue
		}

		if m.HostSettingChecks[i] != nil {
			if err := m.HostSettingChecks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSettingChecks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSettingChecks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this agent information based on the context it is used
func (m *AgentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostSettingChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentInformation) contextValidateHostSettingChecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostSettingChecks); i++ {

		if m.HostSettingChecks[i] != nil {

			if swag.IsZero(m.HostSettingChecks[i]) { // not required
				return nil
			}

			if err := m.HostSettingChecks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSettingChecks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSettingChecks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentInformation) UnmarshalBinary(b []byte) error {
	var res AgentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
