// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverTarget Recover Target.
//
// Specifies the target entity to recover to.
//
// swagger:model RecoverTarget
type RecoverTarget struct {
	RecoveryObjectIdentifier

	// Specifies the id of the parent source of the target.
	// Read Only: true
	ParentSourceID *int64 `json:"parentSourceId,omitempty"`

	// Specifies the name of the parent source of the target.
	// Read Only: true
	ParentSourceName *string `json:"parentSourceName,omitempty"`

	RecoverTargetAllOf2
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RecoverTarget) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RecoveryObjectIdentifier
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RecoveryObjectIdentifier = aO0

	// AO1
	var dataAO1 struct {
		ParentSourceID *int64 `json:"parentSourceId,omitempty"`

		ParentSourceName *string `json:"parentSourceName,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ParentSourceID = dataAO1.ParentSourceID

	m.ParentSourceName = dataAO1.ParentSourceName

	// AO2
	var aO2 RecoverTargetAllOf2
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.RecoverTargetAllOf2 = aO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RecoverTarget) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.RecoveryObjectIdentifier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ParentSourceID *int64 `json:"parentSourceId,omitempty"`

		ParentSourceName *string `json:"parentSourceName,omitempty"`
	}

	dataAO1.ParentSourceID = m.ParentSourceID

	dataAO1.ParentSourceName = m.ParentSourceName

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	aO2, err := swag.WriteJSON(m.RecoverTargetAllOf2)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recover target
func (m *RecoverTarget) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RecoveryObjectIdentifier
	if err := m.RecoveryObjectIdentifier.Validate(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with RecoverTargetAllOf2

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this recover target based on the context it is used
func (m *RecoverTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RecoveryObjectIdentifier
	if err := m.RecoveryObjectIdentifier.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentSourceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentSourceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with RecoverTargetAllOf2

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverTarget) contextValidateParentSourceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "parentSourceId", "body", m.ParentSourceID); err != nil {
		return err
	}

	return nil
}

func (m *RecoverTarget) contextValidateParentSourceName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "parentSourceName", "body", m.ParentSourceName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverTarget) UnmarshalBinary(b []byte) error {
	var res RecoverTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RecoverTargetAllOf2 recover target all of2
//
// swagger:model RecoverTargetAllOf2
type RecoverTargetAllOf2 interface{}
