// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MssqlNativeObjectProtectionParams Specifies the params to create a Native based MSSQL Object Protection.
//
// swagger:model MssqlNativeObjectProtectionParams
type MssqlNativeObjectProtectionParams struct {

	// Specifies the list of objects to be protected.
	// Required: true
	// Min Items: 1
	Objects []*MssqlNativeObjectProtection `json:"objects"`

	// Specifies the number of streams to be used.
	NumStreams *int32 `json:"numStreams,omitempty"`

	// Specifies the WithClause to be used.
	WithClause *string `json:"withClause,omitempty"`

	CommonMSSQLProtectionGroupParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MssqlNativeObjectProtectionParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Objects []*MssqlNativeObjectProtection `json:"objects"`

		NumStreams *int32 `json:"numStreams,omitempty"`

		WithClause *string `json:"withClause,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Objects = dataAO0.Objects

	m.NumStreams = dataAO0.NumStreams

	m.WithClause = dataAO0.WithClause

	// AO1
	var aO1 CommonMSSQLProtectionGroupParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.CommonMSSQLProtectionGroupParams = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MssqlNativeObjectProtectionParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Objects []*MssqlNativeObjectProtection `json:"objects"`

		NumStreams *int32 `json:"numStreams,omitempty"`

		WithClause *string `json:"withClause,omitempty"`
	}

	dataAO0.Objects = m.Objects

	dataAO0.NumStreams = m.NumStreams

	dataAO0.WithClause = m.WithClause

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.CommonMSSQLProtectionGroupParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this mssql native object protection params
func (m *MssqlNativeObjectProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with CommonMSSQLProtectionGroupParams
	if err := m.CommonMSSQLProtectionGroupParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MssqlNativeObjectProtectionParams) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	iObjectsSize := int64(len(m.Objects))

	if err := validate.MinItems("objects", "body", iObjectsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mssql native object protection params based on the context it is used
func (m *MssqlNativeObjectProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with CommonMSSQLProtectionGroupParams
	if err := m.CommonMSSQLProtectionGroupParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MssqlNativeObjectProtectionParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MssqlNativeObjectProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MssqlNativeObjectProtectionParams) UnmarshalBinary(b []byte) error {
	var res MssqlNativeObjectProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
