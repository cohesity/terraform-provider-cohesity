// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudRetrieveTask Specifies cloud retrieve task info.
//
// swagger:model CloudRetrieveTask
type CloudRetrieveTask struct {

	// Specifies the task start time in microseconds.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the task end time in microseconds.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the status of the retrieve task.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]
	Status *string `json:"status,omitempty"`

	// Message about the cloud retrieve task.
	Message *string `json:"message,omitempty"`

	// Specifies the percentage of the task.
	PercentageFinished *int64 `json:"percentageFinished,omitempty"`

	// Specifies the time remaining to complete the retrieve task.
	TimeRemainingSeconds *int64 `json:"timeRemainingSeconds,omitempty"`

	// Specifies the pulse task id.
	PulseTaskID *int32 `json:"pulseTaskId,omitempty"`
}

// Validate validates this cloud retrieve task
func (m *CloudRetrieveTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cloudRetrieveTaskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudRetrieveTaskTypeStatusPropEnum = append(cloudRetrieveTaskTypeStatusPropEnum, v)
	}
}

const (

	// CloudRetrieveTaskStatusAccepted captures enum value "Accepted"
	CloudRetrieveTaskStatusAccepted string = "Accepted"

	// CloudRetrieveTaskStatusRunning captures enum value "Running"
	CloudRetrieveTaskStatusRunning string = "Running"

	// CloudRetrieveTaskStatusCanceled captures enum value "Canceled"
	CloudRetrieveTaskStatusCanceled string = "Canceled"

	// CloudRetrieveTaskStatusCanceling captures enum value "Canceling"
	CloudRetrieveTaskStatusCanceling string = "Canceling"

	// CloudRetrieveTaskStatusFailed captures enum value "Failed"
	CloudRetrieveTaskStatusFailed string = "Failed"

	// CloudRetrieveTaskStatusMissed captures enum value "Missed"
	CloudRetrieveTaskStatusMissed string = "Missed"

	// CloudRetrieveTaskStatusSucceeded captures enum value "Succeeded"
	CloudRetrieveTaskStatusSucceeded string = "Succeeded"

	// CloudRetrieveTaskStatusSucceededWithWarning captures enum value "SucceededWithWarning"
	CloudRetrieveTaskStatusSucceededWithWarning string = "SucceededWithWarning"

	// CloudRetrieveTaskStatusOnHold captures enum value "OnHold"
	CloudRetrieveTaskStatusOnHold string = "OnHold"

	// CloudRetrieveTaskStatusFinalizing captures enum value "Finalizing"
	CloudRetrieveTaskStatusFinalizing string = "Finalizing"

	// CloudRetrieveTaskStatusSkipped captures enum value "Skipped"
	CloudRetrieveTaskStatusSkipped string = "Skipped"

	// CloudRetrieveTaskStatusLegalHold captures enum value "LegalHold"
	CloudRetrieveTaskStatusLegalHold string = "LegalHold"
)

// prop value enum
func (m *CloudRetrieveTask) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cloudRetrieveTaskTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CloudRetrieveTask) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cloud retrieve task based on context it is used
func (m *CloudRetrieveTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CloudRetrieveTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudRetrieveTask) UnmarshalBinary(b []byte) error {
	var res CloudRetrieveTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
