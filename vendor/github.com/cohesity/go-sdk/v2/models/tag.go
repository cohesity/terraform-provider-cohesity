// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tag Tag.
//
// # Tag details
//
// swagger:model Tag
type Tag struct {

	// Specifies unique id of the Tag.
	// Read Only: true
	// Pattern: ^\d+:\d+:[A-Z0-9-]+$
	ID *string `json:"id,omitempty"`

	// Name of the Tag. Name has to be unique under Namespace.
	// Required: true
	Name *string `json:"name"`

	// Namespace of the Tag. This is used to filter tags based on
	// application or usecase. For example all tags related to vcenter can
	// be put under one namespace or different departments could have their
	// own namespaces e.g. finance/tag1 or operations/tag2 etc.
	// Required: true
	Namespace *string `json:"namespace"`

	// Tenant Id to whom the Tag belongs.
	// Read Only: true
	TenantID *string `json:"tenantId,omitempty"`

	// Description of the Tag.
	Description *string `json:"description,omitempty"`

	// Specifies the timestamp in microseconds since the epoch
	// when this Tag was created.
	// Read Only: true
	CreatedTimeUsecs *uint64 `json:"createdTimeUsecs,omitempty"`

	// Specifies the timestamp in microseconds since the epoch
	// when this Tag was last updated.
	// Read Only: true
	LastUpdatedTimeUsecs *uint64 `json:"lastUpdatedTimeUsecs,omitempty"`

	// If true, Tag is marked for deletion.
	// Read Only: true
	MarkedForDeletion *bool `json:"markedForDeletion,omitempty"`

	// Color of the tag in UI.
	UIColor *string `json:"uiColor,omitempty"`

	// Path of the tag for UI nesting purposes.
	UIPathElements []string `json:"uiPathElements,omitempty"`
}

// Validate validates this tag
func (m *Tag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tag) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", *m.ID, `^\d+:\d+:[A-Z0-9-]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Tag) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Tag) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tag based on the context it is used
func (m *Tag) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenantID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdatedTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarkedForDeletion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tag) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Tag) contextValidateTenantID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *Tag) contextValidateCreatedTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdTimeUsecs", "body", m.CreatedTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *Tag) contextValidateLastUpdatedTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastUpdatedTimeUsecs", "body", m.LastUpdatedTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *Tag) contextValidateMarkedForDeletion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "markedForDeletion", "body", m.MarkedForDeletion); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tag) UnmarshalBinary(b []byte) error {
	var res Tag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
