// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareObjectEnableAppProtectionParams VMware app protection parameters.
//
// Specifies the parameters to enable app protection on VMware.
//
// swagger:model VmwareObjectEnableAppProtectionParams
type VmwareObjectEnableAppProtectionParams struct {

	// Specifies the app from which protection must be enabled.
	// Required: true
	// Enum: ["kSQL","kOracle","kAD","kExchange"]
	AppType *string `json:"appType"`

	// Specifies the parameters to enable protection for SQL app on this VM.
	EnableSQLProtectionParams *VmwareObjectEnableSQLProtectionParams `json:"enableSqlProtectionParams,omitempty"`
}

// Validate validates this vmware object enable app protection params
func (m *VmwareObjectEnableAppProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableSQLProtectionParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmwareObjectEnableAppProtectionParamsTypeAppTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSQL","kOracle","kAD","kExchange"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmwareObjectEnableAppProtectionParamsTypeAppTypePropEnum = append(vmwareObjectEnableAppProtectionParamsTypeAppTypePropEnum, v)
	}
}

const (

	// VmwareObjectEnableAppProtectionParamsAppTypeKSQL captures enum value "kSQL"
	VmwareObjectEnableAppProtectionParamsAppTypeKSQL string = "kSQL"

	// VmwareObjectEnableAppProtectionParamsAppTypeKOracle captures enum value "kOracle"
	VmwareObjectEnableAppProtectionParamsAppTypeKOracle string = "kOracle"

	// VmwareObjectEnableAppProtectionParamsAppTypeKAD captures enum value "kAD"
	VmwareObjectEnableAppProtectionParamsAppTypeKAD string = "kAD"

	// VmwareObjectEnableAppProtectionParamsAppTypeKExchange captures enum value "kExchange"
	VmwareObjectEnableAppProtectionParamsAppTypeKExchange string = "kExchange"
)

// prop value enum
func (m *VmwareObjectEnableAppProtectionParams) validateAppTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmwareObjectEnableAppProtectionParamsTypeAppTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VmwareObjectEnableAppProtectionParams) validateAppType(formats strfmt.Registry) error {

	if err := validate.Required("appType", "body", m.AppType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAppTypeEnum("appType", "body", *m.AppType); err != nil {
		return err
	}

	return nil
}

func (m *VmwareObjectEnableAppProtectionParams) validateEnableSQLProtectionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.EnableSQLProtectionParams) { // not required
		return nil
	}

	if m.EnableSQLProtectionParams != nil {
		if err := m.EnableSQLProtectionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableSqlProtectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableSqlProtectionParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware object enable app protection params based on the context it is used
func (m *VmwareObjectEnableAppProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnableSQLProtectionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareObjectEnableAppProtectionParams) contextValidateEnableSQLProtectionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.EnableSQLProtectionParams != nil {

		if swag.IsZero(m.EnableSQLProtectionParams) { // not required
			return nil
		}

		if err := m.EnableSQLProtectionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableSqlProtectionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableSqlProtectionParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareObjectEnableAppProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareObjectEnableAppProtectionParams) UnmarshalBinary(b []byte) error {
	var res VmwareObjectEnableAppProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
