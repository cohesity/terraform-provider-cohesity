// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvSpecificObjectProtectionUpdateRequestParams Specifies the update parameters which are specific to adapter identified by enviournment.
//
// swagger:model EnvSpecificObjectProtectionUpdateRequestParams
type EnvSpecificObjectProtectionUpdateRequestParams struct {

	// Specifies the environment for current object.
	// Enum: ["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsRDSPostgres","kAwsAuroraPostgres","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc","kO365ExchangeCSM","kO365OneDriveCSM","kO365SharepointCSM"]
	Environment *string `json:"environment,omitempty"`

	// Specifies the parameters which are specific to VMware related Object Backup.
	VmwareParams *VmwareObjectProtectionUpdateRequestParams `json:"vmwareParams,omitempty"`

	// Specifies the parameters which are specific to Generic Nas related Object Backup.
	GenericNasParams *GenericNasObjectProtectionUpdateRequestParams `json:"genericNasParams,omitempty"`

	// Specifies the parameters which are specific to Gpfs related Object Backup.
	GpfsParams *GpfsObjectProtectionUpdateRequestParams `json:"gpfsParams,omitempty"`

	// Specifies the parameters which are specific to Elastifile related Object Backup.
	ElastifileParams *ElastifileObjectProtectionUpdateRequestParams `json:"elastifileParams,omitempty"`

	// Specifies the parameters which are specific to Netapp related Object Backup.
	NetappParams *NetappObjectProtectionUpdateRequestParams `json:"netappParams,omitempty"`

	// Specifies the parameters which are specific to Isilon related Object Backup.
	IsilonParams *IsilonObjectProtectionUpdateRequestParams `json:"isilonParams,omitempty"`

	// Specifies the parameters which are specific to Flashblade related Object Backup.
	FlashbladeParams *FlashbladeObjectProtectionUpdateRequestParams `json:"flashbladeParams,omitempty"`

	// Specifies the parameters which are specific to Mssql related Object Backup.
	MssqlParams *MssqlObjectProtectionUpdateRequestParams `json:"mssqlParams,omitempty"`

	// Specifies the parameters which are specific to Oracle related Object Backup.
	OracleParams *OracleObjectProtectionUpdateRequestParams `json:"oracleParams,omitempty"`

	// Specifies the parameters which are specific to Microsoft 365 related Object Backup.
	Office365Params *Office365ObjectProtectionUpdateRequestParams `json:"office365Params,omitempty"`

	// Specifies the parameters which are specific to Aws related Object Backup.
	AwsParams *AwsObjectProtectionUpdateRequestParams `json:"awsParams,omitempty"`

	// Specifies the parameters which are specific to HyperV related Object Backup.
	HypervParams *HyperVObjectProtectionUpdateRequestParams `json:"hypervParams,omitempty"`

	// physical params
	PhysicalParams *PhysicalObjectProtectionUpdateRequestParams `json:"physicalParams,omitempty"`

	// Specifies the parameters which are specific to Sfdc related Object Backup.
	SfdcParams *SfdcObjectProtectionUpdateRequestParams `json:"sfdcParams,omitempty"`

	// Specifies the parameters which are specific to Universal Data Adapter related Object Backup.
	UdaParams *UdaObjectProtectionUpdateRequestParams `json:"udaParams,omitempty"`

	// Specifies the parameters which are specific to SAP HANA related Object Backup.
	SapHanaParams *SapHanaObjectProtectionUpdateRequestParams `json:"sapHanaParams,omitempty"`

	// Specifies the parameters which are specific to Azure related Object Backup.
	AzureParams *AzureObjectProtectionUpdateRequestParams `json:"azureParams,omitempty"`
}

// Validate validates this env specific object protection update request params
func (m *EnvSpecificObjectProtectionUpdateRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericNasParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpfsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElastifileParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlashbladeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMssqlParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365Params(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSapHanaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var envSpecificObjectProtectionUpdateRequestParamsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsRDSPostgres","kAwsAuroraPostgres","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc","kO365ExchangeCSM","kO365OneDriveCSM","kO365SharepointCSM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		envSpecificObjectProtectionUpdateRequestParamsTypeEnvironmentPropEnum = append(envSpecificObjectProtectionUpdateRequestParamsTypeEnvironmentPropEnum, v)
	}
}

const (

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKVMware captures enum value "kVMware"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKVMware string = "kVMware"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKHyperV captures enum value "kHyperV"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKHyperV string = "kHyperV"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKVCD captures enum value "kVCD"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKVCD string = "kVCD"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAzure captures enum value "kAzure"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAzure string = "kAzure"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKGCP captures enum value "kGCP"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKGCP string = "kGCP"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKKVM captures enum value "kKVM"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKKVM string = "kKVM"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAcropolis captures enum value "kAcropolis"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAcropolis string = "kAcropolis"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAWS captures enum value "kAWS"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAWS string = "kAWS"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAWSNative captures enum value "kAWSNative"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAWSNative string = "kAWSNative"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAwsS3 captures enum value "kAwsS3"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAwsS3 string = "kAwsS3"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAWSSnapshotManager captures enum value "kAWSSnapshotManager"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAWSSnapshotManager string = "kAWSSnapshotManager"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKRDSSnapshotManager captures enum value "kRDSSnapshotManager"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKRDSSnapshotManager string = "kRDSSnapshotManager"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAuroraSnapshotManager captures enum value "kAuroraSnapshotManager"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAuroraSnapshotManager string = "kAuroraSnapshotManager"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAwsRDSPostgresBackup captures enum value "kAwsRDSPostgresBackup"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAwsRDSPostgresBackup string = "kAwsRDSPostgresBackup"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAwsRDSPostgres captures enum value "kAwsRDSPostgres"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAwsRDSPostgres string = "kAwsRDSPostgres"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAwsAuroraPostgres captures enum value "kAwsAuroraPostgres"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAwsAuroraPostgres string = "kAwsAuroraPostgres"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAzureNative captures enum value "kAzureNative"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAzureNative string = "kAzureNative"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAzureSQL captures enum value "kAzureSQL"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAzureSQL string = "kAzureSQL"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAzureSnapshotManager captures enum value "kAzureSnapshotManager"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAzureSnapshotManager string = "kAzureSnapshotManager"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKPhysical captures enum value "kPhysical"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKPhysical string = "kPhysical"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKPhysicalFiles captures enum value "kPhysicalFiles"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKPhysicalFiles string = "kPhysicalFiles"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKGPFS captures enum value "kGPFS"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKGPFS string = "kGPFS"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKElastifile captures enum value "kElastifile"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKElastifile string = "kElastifile"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKNetapp captures enum value "kNetapp"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKNetapp string = "kNetapp"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKGenericNas captures enum value "kGenericNas"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKGenericNas string = "kGenericNas"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKIsilon captures enum value "kIsilon"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKIsilon string = "kIsilon"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKFlashBlade captures enum value "kFlashBlade"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKFlashBlade string = "kFlashBlade"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKPure captures enum value "kPure"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKPure string = "kPure"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKSQL captures enum value "kSQL"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKSQL string = "kSQL"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKExchange captures enum value "kExchange"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKExchange string = "kExchange"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAD captures enum value "kAD"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKAD string = "kAD"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKOracle captures enum value "kOracle"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKOracle string = "kOracle"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKView captures enum value "kView"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKView string = "kView"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKRemoteAdapter captures enum value "kRemoteAdapter"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKRemoteAdapter string = "kRemoteAdapter"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365 captures enum value "kO365"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365 string = "kO365"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365PublicFolders captures enum value "kO365PublicFolders"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365PublicFolders string = "kO365PublicFolders"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365Teams captures enum value "kO365Teams"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365Teams string = "kO365Teams"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365Group captures enum value "kO365Group"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365Group string = "kO365Group"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365Exchange captures enum value "kO365Exchange"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365Exchange string = "kO365Exchange"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365OneDrive captures enum value "kO365OneDrive"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365OneDrive string = "kO365OneDrive"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365Sharepoint captures enum value "kO365Sharepoint"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365Sharepoint string = "kO365Sharepoint"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKKubernetes captures enum value "kKubernetes"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKKubernetes string = "kKubernetes"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKCassandra captures enum value "kCassandra"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKCassandra string = "kCassandra"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKMongoDB captures enum value "kMongoDB"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKMongoDB string = "kMongoDB"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKCouchbase captures enum value "kCouchbase"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKCouchbase string = "kCouchbase"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKHdfs captures enum value "kHdfs"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKHdfs string = "kHdfs"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKHive captures enum value "kHive"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKHive string = "kHive"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKHBase captures enum value "kHBase"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKHBase string = "kHBase"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKSAPHANA captures enum value "kSAPHANA"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKSAPHANA string = "kSAPHANA"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKUDA captures enum value "kUDA"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKUDA string = "kUDA"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKSfdc captures enum value "kSfdc"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKSfdc string = "kSfdc"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365ExchangeCSM captures enum value "kO365ExchangeCSM"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365ExchangeCSM string = "kO365ExchangeCSM"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365OneDriveCSM captures enum value "kO365OneDriveCSM"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365OneDriveCSM string = "kO365OneDriveCSM"

	// EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365SharepointCSM captures enum value "kO365SharepointCSM"
	EnvSpecificObjectProtectionUpdateRequestParamsEnvironmentKO365SharepointCSM string = "kO365SharepointCSM"
)

// prop value enum
func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, envSpecificObjectProtectionUpdateRequestParamsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateVmwareParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateGenericNasParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GenericNasParams) { // not required
		return nil
	}

	if m.GenericNasParams != nil {
		if err := m.GenericNasParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateGpfsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GpfsParams) { // not required
		return nil
	}

	if m.GpfsParams != nil {
		if err := m.GpfsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateElastifileParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ElastifileParams) { // not required
		return nil
	}

	if m.ElastifileParams != nil {
		if err := m.ElastifileParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateNetappParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NetappParams) { // not required
		return nil
	}

	if m.NetappParams != nil {
		if err := m.NetappParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateIsilonParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateFlashbladeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FlashbladeParams) { // not required
		return nil
	}

	if m.FlashbladeParams != nil {
		if err := m.FlashbladeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateMssqlParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MssqlParams) { // not required
		return nil
	}

	if m.MssqlParams != nil {
		if err := m.MssqlParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateOracleParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleParams) { // not required
		return nil
	}

	if m.OracleParams != nil {
		if err := m.OracleParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateOffice365Params(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365Params) { // not required
		return nil
	}

	if m.Office365Params != nil {
		if err := m.Office365Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Params")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateAwsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsParams) { // not required
		return nil
	}

	if m.AwsParams != nil {
		if err := m.AwsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateHypervParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervParams) { // not required
		return nil
	}

	if m.HypervParams != nil {
		if err := m.HypervParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validatePhysicalParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateSfdcParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcParams) { // not required
		return nil
	}

	if m.SfdcParams != nil {
		if err := m.SfdcParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateUdaParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaParams) { // not required
		return nil
	}

	if m.UdaParams != nil {
		if err := m.UdaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateSapHanaParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SapHanaParams) { // not required
		return nil
	}

	if m.SapHanaParams != nil {
		if err := m.SapHanaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapHanaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) validateAzureParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureParams) { // not required
		return nil
	}

	if m.AzureParams != nil {
		if err := m.AzureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this env specific object protection update request params based on the context it is used
func (m *EnvSpecificObjectProtectionUpdateRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenericNasParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpfsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElastifileParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlashbladeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMssqlParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSapHanaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateGenericNasParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericNasParams != nil {

		if swag.IsZero(m.GenericNasParams) { // not required
			return nil
		}

		if err := m.GenericNasParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateGpfsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GpfsParams != nil {

		if swag.IsZero(m.GpfsParams) { // not required
			return nil
		}

		if err := m.GpfsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateElastifileParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ElastifileParams != nil {

		if swag.IsZero(m.ElastifileParams) { // not required
			return nil
		}

		if err := m.ElastifileParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateNetappParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NetappParams != nil {

		if swag.IsZero(m.NetappParams) { // not required
			return nil
		}

		if err := m.NetappParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateFlashbladeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FlashbladeParams != nil {

		if swag.IsZero(m.FlashbladeParams) { // not required
			return nil
		}

		if err := m.FlashbladeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateMssqlParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MssqlParams != nil {

		if swag.IsZero(m.MssqlParams) { // not required
			return nil
		}

		if err := m.MssqlParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateOracleParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleParams != nil {

		if swag.IsZero(m.OracleParams) { // not required
			return nil
		}

		if err := m.OracleParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateOffice365Params(ctx context.Context, formats strfmt.Registry) error {

	if m.Office365Params != nil {

		if swag.IsZero(m.Office365Params) { // not required
			return nil
		}

		if err := m.Office365Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Params")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateAwsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsParams != nil {

		if swag.IsZero(m.AwsParams) { // not required
			return nil
		}

		if err := m.AwsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateHypervParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParams != nil {

		if swag.IsZero(m.HypervParams) { // not required
			return nil
		}

		if err := m.HypervParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateSfdcParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcParams != nil {

		if swag.IsZero(m.SfdcParams) { // not required
			return nil
		}

		if err := m.SfdcParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateUdaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaParams != nil {

		if swag.IsZero(m.UdaParams) { // not required
			return nil
		}

		if err := m.UdaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateSapHanaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SapHanaParams != nil {

		if swag.IsZero(m.SapHanaParams) { // not required
			return nil
		}

		if err := m.SapHanaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapHanaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionUpdateRequestParams) contextValidateAzureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureParams != nil {

		if swag.IsZero(m.AzureParams) { // not required
			return nil
		}

		if err := m.AzureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvSpecificObjectProtectionUpdateRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvSpecificObjectProtectionUpdateRequestParams) UnmarshalBinary(b []byte) error {
	var res EnvSpecificObjectProtectionUpdateRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
