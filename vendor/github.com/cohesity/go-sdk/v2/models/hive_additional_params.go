// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HiveAdditionalParams Hive Additional Params.
//
// Additional params for Hive protection source.
//
// swagger:model HiveAdditionalParams
type HiveAdditionalParams struct {

	// The MetastoreAddress for this Hive.
	// Read Only: true
	MetastoreAddress string `json:"metastoreAddress,omitempty"`

	// The MetastorePort for this Hive.
	// Read Only: true
	MetastorePort int32 `json:"metastorePort,omitempty"`

	// Authentication type.
	// Read Only: true
	// Enum: ["KERBEROS","NONE"]
	AuthType *string `json:"authType,omitempty"`
}

// Validate validates this hive additional params
func (m *HiveAdditionalParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hiveAdditionalParamsTypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["KERBEROS","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hiveAdditionalParamsTypeAuthTypePropEnum = append(hiveAdditionalParamsTypeAuthTypePropEnum, v)
	}
}

const (

	// HiveAdditionalParamsAuthTypeKERBEROS captures enum value "KERBEROS"
	HiveAdditionalParamsAuthTypeKERBEROS string = "KERBEROS"

	// HiveAdditionalParamsAuthTypeNONE captures enum value "NONE"
	HiveAdditionalParamsAuthTypeNONE string = "NONE"
)

// prop value enum
func (m *HiveAdditionalParams) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hiveAdditionalParamsTypeAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HiveAdditionalParams) validateAuthType(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this hive additional params based on the context it is used
func (m *HiveAdditionalParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetastoreAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetastorePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HiveAdditionalParams) contextValidateMetastoreAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "metastoreAddress", "body", string(m.MetastoreAddress)); err != nil {
		return err
	}

	return nil
}

func (m *HiveAdditionalParams) contextValidateMetastorePort(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "metastorePort", "body", int32(m.MetastorePort)); err != nil {
		return err
	}

	return nil
}

func (m *HiveAdditionalParams) contextValidateAuthType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "authType", "body", m.AuthType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HiveAdditionalParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HiveAdditionalParams) UnmarshalBinary(b []byte) error {
	var res HiveAdditionalParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
