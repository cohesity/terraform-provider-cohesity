// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareRecoverTargetSourceDiskParams Specifies disk specific parameters for performing a disk recovery.
//
// swagger:model VmwareRecoverTargetSourceDiskParams
type VmwareRecoverTargetSourceDiskParams struct {

	// Specifies the UUID of the source disk being recovered.
	// Required: true
	DiskUUID *string `json:"diskUuid"`

	// Specifies the ID of the datastore on which the specified disk will be spun up.
	// Required: true
	DatastoreID *int64 `json:"datastoreId"`
}

// Validate validates this vmware recover target source disk params
func (m *VmwareRecoverTargetSourceDiskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatastoreID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareRecoverTargetSourceDiskParams) validateDiskUUID(formats strfmt.Registry) error {

	if err := validate.Required("diskUuid", "body", m.DiskUUID); err != nil {
		return err
	}

	return nil
}

func (m *VmwareRecoverTargetSourceDiskParams) validateDatastoreID(formats strfmt.Registry) error {

	if err := validate.Required("datastoreId", "body", m.DatastoreID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vmware recover target source disk params based on context it is used
func (m *VmwareRecoverTargetSourceDiskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VmwareRecoverTargetSourceDiskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareRecoverTargetSourceDiskParams) UnmarshalBinary(b []byte) error {
	var res VmwareRecoverTargetSourceDiskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
