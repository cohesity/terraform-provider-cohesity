// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RetrieveArchiveTask Specifies the persistent state of a retrieve of an archive task.
//
// swagger:model RetrieveArchiveTask
type RetrieveArchiveTask struct {

	// Specifies the globally unique id for this retrieval of an archive task.
	// Pattern: ^\d+:\d+:\d+$
	TaskUID *string `json:"taskUid,omitempty"`

	// Specifies how much time the retrieved entity is present in the hot-tiers.
	UptierExpiryTimes []int64 `json:"uptierExpiryTimes"`
}

// Validate validates this retrieve archive task
func (m *RetrieveArchiveTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaskUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveArchiveTask) validateTaskUID(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskUID) { // not required
		return nil
	}

	if err := validate.Pattern("taskUid", "body", *m.TaskUID, `^\d+:\d+:\d+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this retrieve archive task based on context it is used
func (m *RetrieveArchiveTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveArchiveTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveArchiveTask) UnmarshalBinary(b []byte) error {
	var res RetrieveArchiveTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
