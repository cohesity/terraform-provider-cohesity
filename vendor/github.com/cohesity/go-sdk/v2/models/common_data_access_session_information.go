// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonDataAccessSessionInformation Common Data Access Session Information.
//
// swagger:model CommonDataAccessSessionInformation
type CommonDataAccessSessionInformation struct {

	// Specifies the id of the data access session.
	SessionID *string `json:"sessionId,omitempty"`

	// The name of the data access session.
	Name *string `json:"name,omitempty"`

	// Specifies the time at which the session was created.
	// Read Only: true
	CreationTimeUsecs int64 `json:"creationTimeUsecs,omitempty"`

	// Specifies the time at which the session was last modified.
	// Read Only: true
	LastModificationTimeUsecs int64 `json:"lastModificationTimeUsecs,omitempty"`

	// Specifies the status of the Data Access Session. Machine status such as Admitted/WaitingForArchiveDownload/ WaitingForResource/SetupInProgress/Ready/Finished
	// Enum: ["Pending","Established","RefreshInitiated","Terminated"]
	Status string `json:"status,omitempty"`

	// Specifies the list of metadata worker endpoints. In case of more than one metadata point client can contact any metadata worker.
	WorkerEndpoints []*WorkerEndpoint `json:"workerEndpoints"`
}

// Validate validates this common data access session information
func (m *CommonDataAccessSessionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonDataAccessSessionInformationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Established","RefreshInitiated","Terminated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonDataAccessSessionInformationTypeStatusPropEnum = append(commonDataAccessSessionInformationTypeStatusPropEnum, v)
	}
}

const (

	// CommonDataAccessSessionInformationStatusPending captures enum value "Pending"
	CommonDataAccessSessionInformationStatusPending string = "Pending"

	// CommonDataAccessSessionInformationStatusEstablished captures enum value "Established"
	CommonDataAccessSessionInformationStatusEstablished string = "Established"

	// CommonDataAccessSessionInformationStatusRefreshInitiated captures enum value "RefreshInitiated"
	CommonDataAccessSessionInformationStatusRefreshInitiated string = "RefreshInitiated"

	// CommonDataAccessSessionInformationStatusTerminated captures enum value "Terminated"
	CommonDataAccessSessionInformationStatusTerminated string = "Terminated"
)

// prop value enum
func (m *CommonDataAccessSessionInformation) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonDataAccessSessionInformationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonDataAccessSessionInformation) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CommonDataAccessSessionInformation) validateWorkerEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkerEndpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkerEndpoints); i++ {
		if swag.IsZero(m.WorkerEndpoints[i]) { // not required
			continue
		}

		if m.WorkerEndpoints[i] != nil {
			if err := m.WorkerEndpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workerEndpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workerEndpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this common data access session information based on the context it is used
func (m *CommonDataAccessSessionInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreationTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastModificationTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkerEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonDataAccessSessionInformation) contextValidateCreationTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "creationTimeUsecs", "body", int64(m.CreationTimeUsecs)); err != nil {
		return err
	}

	return nil
}

func (m *CommonDataAccessSessionInformation) contextValidateLastModificationTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastModificationTimeUsecs", "body", int64(m.LastModificationTimeUsecs)); err != nil {
		return err
	}

	return nil
}

func (m *CommonDataAccessSessionInformation) contextValidateWorkerEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WorkerEndpoints); i++ {

		if m.WorkerEndpoints[i] != nil {

			if swag.IsZero(m.WorkerEndpoints[i]) { // not required
				return nil
			}

			if err := m.WorkerEndpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workerEndpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workerEndpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonDataAccessSessionInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonDataAccessSessionInformation) UnmarshalBinary(b []byte) error {
	var res CommonDataAccessSessionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
