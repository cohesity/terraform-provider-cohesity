// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SfdcObjectProtectionObjectParams Sfdc Object Protection Object Params
//
// Specifies the object parameters to create an Sfdc Object Protection.
//
// swagger:model SfdcObjectProtectionObjectParams
type SfdcObjectProtectionObjectParams struct {

	// Specifies the id of the Sfdc Org being protected. This cannot be the id of a leaf level object. By default, the Sfdc Org is auto-protected.
	// Required: true
	ID *int64 `json:"id"`

	// Specifies the ids of the objects to be excluded in the Object Protection.
	// Unique: true
	ExcludeObjectIds []int64 `json:"excludeObjectIds"`

	// Specifies the list of field names to be excluded in an Sfdc object. A user can specify multiple such entries in this list.
	FieldExclusionList []*SfdcObjectFieldExclusion `json:"fieldExclusionList"`
}

// Validate validates this sfdc object protection object params
func (m *SfdcObjectProtectionObjectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeObjectIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldExclusionList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcObjectProtectionObjectParams) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SfdcObjectProtectionObjectParams) validateExcludeObjectIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeObjectIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludeObjectIds", "body", m.ExcludeObjectIds); err != nil {
		return err
	}

	return nil
}

func (m *SfdcObjectProtectionObjectParams) validateFieldExclusionList(formats strfmt.Registry) error {
	if swag.IsZero(m.FieldExclusionList) { // not required
		return nil
	}

	for i := 0; i < len(m.FieldExclusionList); i++ {
		if swag.IsZero(m.FieldExclusionList[i]) { // not required
			continue
		}

		if m.FieldExclusionList[i] != nil {
			if err := m.FieldExclusionList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fieldExclusionList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fieldExclusionList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sfdc object protection object params based on the context it is used
func (m *SfdcObjectProtectionObjectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFieldExclusionList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcObjectProtectionObjectParams) contextValidateFieldExclusionList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FieldExclusionList); i++ {

		if m.FieldExclusionList[i] != nil {

			if swag.IsZero(m.FieldExclusionList[i]) { // not required
				return nil
			}

			if err := m.FieldExclusionList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fieldExclusionList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fieldExclusionList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SfdcObjectProtectionObjectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcObjectProtectionObjectParams) UnmarshalBinary(b []byte) error {
	var res SfdcObjectProtectionObjectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
