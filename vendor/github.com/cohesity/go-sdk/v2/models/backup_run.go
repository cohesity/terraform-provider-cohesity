// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupRun Snapshot run information for an object.
//
// Specifies information about backup run for an object.
//
// swagger:model BackupRun
type BackupRun struct {

	// Snapshot information for an object.
	SnapshotInfo *SnapshotInfo `json:"snapshotInfo,omitempty"`

	// Failed backup attempts for an object.
	FailedAttempts []*BackupAttempt `json:"failedAttempts"`
}

// Validate validates this backup run
func (m *BackupRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnapshotInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedAttempts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupRun) validateSnapshotInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotInfo) { // not required
		return nil
	}

	if m.SnapshotInfo != nil {
		if err := m.SnapshotInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotInfo")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRun) validateFailedAttempts(formats strfmt.Registry) error {
	if swag.IsZero(m.FailedAttempts) { // not required
		return nil
	}

	for i := 0; i < len(m.FailedAttempts); i++ {
		if swag.IsZero(m.FailedAttempts[i]) { // not required
			continue
		}

		if m.FailedAttempts[i] != nil {
			if err := m.FailedAttempts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failedAttempts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failedAttempts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this backup run based on the context it is used
func (m *BackupRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSnapshotInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailedAttempts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupRun) contextValidateSnapshotInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotInfo != nil {

		if swag.IsZero(m.SnapshotInfo) { // not required
			return nil
		}

		if err := m.SnapshotInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotInfo")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRun) contextValidateFailedAttempts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FailedAttempts); i++ {

		if m.FailedAttempts[i] != nil {

			if swag.IsZero(m.FailedAttempts[i]) { // not required
				return nil
			}

			if err := m.FailedAttempts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failedAttempts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failedAttempts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupRun) UnmarshalBinary(b []byte) error {
	var res BackupRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
