// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CancelObjectRunParams One object run to cancel.
//
// swagger:model CancelObjectRunParams
type CancelObjectRunParams struct {

	// Specifies the id of the run to cancel.
	// Required: true
	RunID *string `json:"runId"`

	// Specifies whether to cancel the local backup run. Default is false.
	CancelLocalRun *bool `json:"cancelLocalRun,omitempty"`

	// Specifies the archival target ids where the tasks run. If specified, the archival target ids must be present within the run specified by the runId above.
	ArchivalTargetIds []int64 `json:"archivalTargetIds"`

	// Specifies the cluster identifiers where the tasks run. If specified, the archival target ids must be present within the run specified by the runId above.
	ReplicationTargets []*ClusterIdentifier `json:"replicationTargets"`

	// Specifies the cloud spin target ids where the tasks run. If specified, the archival target ids must be present within the run specified by the runId above.
	CloudSpinTargetIds []int64 `json:"cloudSpinTargetIds"`
}

// Validate validates this cancel object run params
func (m *CancelObjectRunParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelObjectRunParams) validateRunID(formats strfmt.Registry) error {

	if err := validate.Required("runId", "body", m.RunID); err != nil {
		return err
	}

	return nil
}

func (m *CancelObjectRunParams) validateReplicationTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationTargets); i++ {
		if swag.IsZero(m.ReplicationTargets[i]) { // not required
			continue
		}

		if m.ReplicationTargets[i] != nil {
			if err := m.ReplicationTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicationTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicationTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cancel object run params based on the context it is used
func (m *CancelObjectRunParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReplicationTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelObjectRunParams) contextValidateReplicationTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicationTargets); i++ {

		if m.ReplicationTargets[i] != nil {

			if swag.IsZero(m.ReplicationTargets[i]) { // not required
				return nil
			}

			if err := m.ReplicationTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicationTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicationTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CancelObjectRunParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CancelObjectRunParams) UnmarshalBinary(b []byte) error {
	var res CancelObjectRunParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
