// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonS3CompExternalTargetParams S3 Compatible External Target Request Common Params.
//
// Specifies the common parameters which are specific to S3 Compatible related External Targets.
//
// swagger:model CommonS3CompExternalTargetParams
type CommonS3CompExternalTargetParams struct {

	// Specifies the bucket name of the external target.
	// Required: true
	BucketName *string `json:"bucketName"`

	// Specifies the access key id of the external target.
	// Required: true
	AccessKeyID *string `json:"accessKeyId"`

	// Specifies the secret access key of the external target.
	SecretAccessKey *string `json:"secretAccessKey,omitempty"`

	// Specifies the endpoint of the external target.
	// Required: true
	EndPoint *string `json:"endPoint"`

	// Specifies the region of the external target.
	Region *string `json:"region,omitempty"`

	// Specifies the secure connection(https) is enabled or not.
	SecureConnection *bool `json:"secureConnection,omitempty"`

	// Specifies the aws signature version of the external target.
	SignatureVersion *int32 `json:"signatureVersion,omitempty"`

	// Specifies whether the external target is AWS Snowball.
	IsAwsSnowball *bool `json:"isAwsSnowball,omitempty"`
}

// Validate validates this common s3 comp external target params
func (m *CommonS3CompExternalTargetParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucketName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonS3CompExternalTargetParams) validateBucketName(formats strfmt.Registry) error {

	if err := validate.Required("bucketName", "body", m.BucketName); err != nil {
		return err
	}

	return nil
}

func (m *CommonS3CompExternalTargetParams) validateAccessKeyID(formats strfmt.Registry) error {

	if err := validate.Required("accessKeyId", "body", m.AccessKeyID); err != nil {
		return err
	}

	return nil
}

func (m *CommonS3CompExternalTargetParams) validateEndPoint(formats strfmt.Registry) error {

	if err := validate.Required("endPoint", "body", m.EndPoint); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common s3 comp external target params based on context it is used
func (m *CommonS3CompExternalTargetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonS3CompExternalTargetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonS3CompExternalTargetParams) UnmarshalBinary(b []byte) error {
	var res CommonS3CompExternalTargetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
