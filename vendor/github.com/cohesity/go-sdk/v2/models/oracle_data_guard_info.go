// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OracleDataGuardInfo Dataguard info about Oracle database.
//
// swagger:model OracleDataGuardInfo
type OracleDataGuardInfo struct {

	// Specifies the role of the Oracle DataGuard database.
	// Enum: ["kPrimary","kStandby"]
	Role string `json:"role,omitempty"`

	// Specifies the type of the standby oracle database.
	// Enum: ["kPhysical","kLogical","kSnapshot"]
	StandbyType string `json:"standbyType,omitempty"`
}

// Validate validates this oracle data guard info
func (m *OracleDataGuardInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandbyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleDataGuardInfoTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPrimary","kStandby"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleDataGuardInfoTypeRolePropEnum = append(oracleDataGuardInfoTypeRolePropEnum, v)
	}
}

const (

	// OracleDataGuardInfoRoleKPrimary captures enum value "kPrimary"
	OracleDataGuardInfoRoleKPrimary string = "kPrimary"

	// OracleDataGuardInfoRoleKStandby captures enum value "kStandby"
	OracleDataGuardInfoRoleKStandby string = "kStandby"
)

// prop value enum
func (m *OracleDataGuardInfo) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleDataGuardInfoTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleDataGuardInfo) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

var oracleDataGuardInfoTypeStandbyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPhysical","kLogical","kSnapshot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleDataGuardInfoTypeStandbyTypePropEnum = append(oracleDataGuardInfoTypeStandbyTypePropEnum, v)
	}
}

const (

	// OracleDataGuardInfoStandbyTypeKPhysical captures enum value "kPhysical"
	OracleDataGuardInfoStandbyTypeKPhysical string = "kPhysical"

	// OracleDataGuardInfoStandbyTypeKLogical captures enum value "kLogical"
	OracleDataGuardInfoStandbyTypeKLogical string = "kLogical"

	// OracleDataGuardInfoStandbyTypeKSnapshot captures enum value "kSnapshot"
	OracleDataGuardInfoStandbyTypeKSnapshot string = "kSnapshot"
)

// prop value enum
func (m *OracleDataGuardInfo) validateStandbyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleDataGuardInfoTypeStandbyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleDataGuardInfo) validateStandbyType(formats strfmt.Registry) error {
	if swag.IsZero(m.StandbyType) { // not required
		return nil
	}

	// value enum
	if err := m.validateStandbyTypeEnum("standbyType", "body", m.StandbyType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle data guard info based on context it is used
func (m *OracleDataGuardInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleDataGuardInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleDataGuardInfo) UnmarshalBinary(b []byte) error {
	var res OracleDataGuardInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
