// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectMsTeamParam Specifies recovery parameters associated with a Microsoft 365 Team.
//
// swagger:model ObjectMsTeamParam
type ObjectMsTeamParam struct {

	// Specifies parameters to recover a Microsoft 365 Team.
	// Required: true
	MsTeamParam *MsTeamParam `json:"msTeamParam"`

	// Specifies the Microsoft 365 Team recover object info.
	// Required: true
	RecoverObject *CommonRecoverObjectSnapshotParams `json:"recoverObject"`
}

// Validate validates this object ms team param
func (m *ObjectMsTeamParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMsTeamParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectMsTeamParam) validateMsTeamParam(formats strfmt.Registry) error {

	if err := validate.Required("msTeamParam", "body", m.MsTeamParam); err != nil {
		return err
	}

	if m.MsTeamParam != nil {
		if err := m.MsTeamParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("msTeamParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("msTeamParam")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectMsTeamParam) validateRecoverObject(formats strfmt.Registry) error {

	if err := validate.Required("recoverObject", "body", m.RecoverObject); err != nil {
		return err
	}

	if m.RecoverObject != nil {
		if err := m.RecoverObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverObject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this object ms team param based on the context it is used
func (m *ObjectMsTeamParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMsTeamParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectMsTeamParam) contextValidateMsTeamParam(ctx context.Context, formats strfmt.Registry) error {

	if m.MsTeamParam != nil {

		if err := m.MsTeamParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("msTeamParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("msTeamParam")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectMsTeamParam) contextValidateRecoverObject(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverObject != nil {

		if err := m.RecoverObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectMsTeamParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectMsTeamParam) UnmarshalBinary(b []byte) error {
	var res ObjectMsTeamParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
