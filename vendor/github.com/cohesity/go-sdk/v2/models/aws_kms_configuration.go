// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AwsKmsConfiguration AWS KMS configuration response.
//
// swagger:model AwsKmsConfiguration
type AwsKmsConfiguration struct {

	// AWS CMK alias. Only need one of cmkAlias, cmkArn, cmkKeyId to connect to AWS KMS.
	CmkAlias *string `json:"cmkAlias,omitempty"`

	// AWS CMK Amazon resource number. Only need one of cmkAlias, cmkArn, cmkKeyId to connect to AWS KMS.
	CmkArn *string `json:"cmkArn,omitempty"`

	// AWS CMK key id. Only need one of cmkAlias, cmkArn, cmkKeyId to connect to AWS KMS.
	CmkKeyID *string `json:"cmkKeyId,omitempty"`

	// AWS region, e.g. us-east-1, us-west-2, for the AWS Glacier service to be used to authenticate resources within this region by the configured AWS account.
	Region *string `json:"region,omitempty"`

	AwsKmsConfigurationUpdateParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AwsKmsConfiguration) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CmkAlias *string `json:"cmkAlias,omitempty"`

		CmkArn *string `json:"cmkArn,omitempty"`

		CmkKeyID *string `json:"cmkKeyId,omitempty"`

		Region *string `json:"region,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CmkAlias = dataAO0.CmkAlias

	m.CmkArn = dataAO0.CmkArn

	m.CmkKeyID = dataAO0.CmkKeyID

	m.Region = dataAO0.Region

	// AO1
	var aO1 AwsKmsConfigurationUpdateParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.AwsKmsConfigurationUpdateParams = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AwsKmsConfiguration) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		CmkAlias *string `json:"cmkAlias,omitempty"`

		CmkArn *string `json:"cmkArn,omitempty"`

		CmkKeyID *string `json:"cmkKeyId,omitempty"`

		Region *string `json:"region,omitempty"`
	}

	dataAO0.CmkAlias = m.CmkAlias

	dataAO0.CmkArn = m.CmkArn

	dataAO0.CmkKeyID = m.CmkKeyID

	dataAO0.Region = m.Region

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.AwsKmsConfigurationUpdateParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this aws kms configuration
func (m *AwsKmsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AwsKmsConfigurationUpdateParams
	if err := m.AwsKmsConfigurationUpdateParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this aws kms configuration based on the context it is used
func (m *AwsKmsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AwsKmsConfigurationUpdateParams
	if err := m.AwsKmsConfigurationUpdateParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AwsKmsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsKmsConfiguration) UnmarshalBinary(b []byte) error {
	var res AwsKmsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
