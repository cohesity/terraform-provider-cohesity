// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Recovery Recovery.
//
// Specifies a Recovery.
//
// swagger:model Recovery
type Recovery struct {
	CommonRecoveryResponseParams

	// Specifies the parameters which are specific to Acropolis related Recovery.
	AcropolisParams *RecoverAcropolisParams `json:"acropolisParams,omitempty"`

	// Specifies the parameters which are specific to AWS related Recovery.
	AwsParams *RecoverAwsParams `json:"awsParams,omitempty"`

	// Specifies the parameters which are specific to Azure related Recovery.
	AzureParams *RecoverAzureParams `json:"azureParams,omitempty"`

	// Specifies the parameters which are specific to Cassandra Recovery.
	CassandraParams *CassandraParams `json:"cassandraParams,omitempty"`

	// Specifies the parameters which are specific to Couchbase Recovery.
	CouchbaseParams *CouchbaseParams `json:"couchbaseParams,omitempty"`

	// Specifies the parameters which are specific to Elastifile related Recovery.
	ElastifileParams *RecoverElastifileParams `json:"elastifileParams,omitempty"`

	// Specifies the parameters which are specific to Exchange related Recovery.
	ExchangeParams *RecoverExchangeParams `json:"exchangeParams,omitempty"`

	// Specifies the parameters which are specific to FlashBlade related Recovery.
	FlashbladeParams *RecoverFlashbladeParams `json:"flashbladeParams,omitempty"`

	// Specifies the parameters which are specific to GCP related Recovery.
	GcpParams *RecoverGcpParams `json:"gcpParams,omitempty"`

	// Specifies the parameters which are specific to Generic NAS related Recovery.
	GenericNasParams *RecoverGenericNasParams `json:"genericNasParams,omitempty"`

	// Specifies the parameters which are specific to GPFS related Recovery.
	GpfsParams *RecoverGpfsParams `json:"gpfsParams,omitempty"`

	// Specifies the parameters which are specific to Hbase Recovery.
	HbaseParams *HbaseParams `json:"hbaseParams,omitempty"`

	// Specifies the parameters which are specific to HDFS Recovery.
	HdfsParams *HdfsParams `json:"hdfsParams,omitempty"`

	// Specifies the parameters which are specific to Hive Recovery.
	HiveParams *HiveParams `json:"hiveParams,omitempty"`

	// Specifies the parameters which are specific to HyperV related Recovery.
	HypervParams *RecoverHyperVParams `json:"hypervParams,omitempty"`

	// Specifies the parameters which are specific to Ibm FlashSystem related Recovery.
	IbmFlashSystemParams *RecoverPureParams `json:"ibmFlashSystemParams,omitempty"`

	// Specifies the parameters which are specific to Isilon related Recovery.
	IsilonParams *RecoverIsilonParams `json:"isilonParams,omitempty"`

	// Specifies the parameters which are specific to Kubernetes related Recovery.
	KubernetesParams *RecoverKubernetesParams `json:"kubernetesParams,omitempty"`

	// Specifies the parameters which are specific to KVM related Recovery.
	KvmParams *RecoverKvmParams `json:"kvmParams,omitempty"`

	// Specifies the parameters which are specific to MongoDB Recovery.
	MongodbParams *MongodbParams `json:"mongodbParams,omitempty"`

	// Specifies the parameters which are specific to MsSQL related Recovery.
	MssqlParams *RecoverSQLParams `json:"mssqlParams,omitempty"`

	// Specifies the parameters which are specific to Netapp related Recovery.
	NetappParams *RecoverNetappParams `json:"netappParams,omitempty"`

	// Specifies the parameters which are specific to Office 365 related Recovery.
	Office365Params *RecoverO365Params `json:"office365Params,omitempty"`

	// Specifies the parameters which are specific to Oracle related Recovery.
	OracleParams *RecoverOracleParams `json:"oracleParams,omitempty"`

	// Specifies the parameters which are specific to Physical related Recovery.
	PhysicalParams *RecoverPhysicalParams `json:"physicalParams,omitempty"`

	// Specifies the parameters which are specific to Pure related Recovery.
	PureParams *RecoverPureParams `json:"pureParams,omitempty"`

	// Specifies the parameters which are specific to SAP HANA Recovery.
	SapHanaParams *SapHanaParams `json:"sapHanaParams,omitempty"`

	// Specifies the parameters which are specific to Salesforce related Recovery.
	SfdcParams *RecoverSalesforceParams `json:"sfdcParams,omitempty"`

	// Specifies the parameters which are specific to Universal Data Adapter Recovery.
	UdaParams *UdaParams `json:"udaParams,omitempty"`

	// Specifies the parameters which are specific to View related Recovery.
	ViewParams *RecoverViewParams `json:"viewParams,omitempty"`

	// Specifies the parameters which are specific to VMware related Recovery.
	VmwareParams *RecoverVmwareParams `json:"vmwareParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Recovery) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonRecoveryResponseParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonRecoveryResponseParams = aO0

	// AO1
	var dataAO1 struct {
		AcropolisParams *RecoverAcropolisParams `json:"acropolisParams,omitempty"`

		AwsParams *RecoverAwsParams `json:"awsParams,omitempty"`

		AzureParams *RecoverAzureParams `json:"azureParams,omitempty"`

		CassandraParams *CassandraParams `json:"cassandraParams,omitempty"`

		CouchbaseParams *CouchbaseParams `json:"couchbaseParams,omitempty"`

		ElastifileParams *RecoverElastifileParams `json:"elastifileParams,omitempty"`

		ExchangeParams *RecoverExchangeParams `json:"exchangeParams,omitempty"`

		FlashbladeParams *RecoverFlashbladeParams `json:"flashbladeParams,omitempty"`

		GcpParams *RecoverGcpParams `json:"gcpParams,omitempty"`

		GenericNasParams *RecoverGenericNasParams `json:"genericNasParams,omitempty"`

		GpfsParams *RecoverGpfsParams `json:"gpfsParams,omitempty"`

		HbaseParams *HbaseParams `json:"hbaseParams,omitempty"`

		HdfsParams *HdfsParams `json:"hdfsParams,omitempty"`

		HiveParams *HiveParams `json:"hiveParams,omitempty"`

		HypervParams *RecoverHyperVParams `json:"hypervParams,omitempty"`

		IbmFlashSystemParams *RecoverPureParams `json:"ibmFlashSystemParams,omitempty"`

		IsilonParams *RecoverIsilonParams `json:"isilonParams,omitempty"`

		KubernetesParams *RecoverKubernetesParams `json:"kubernetesParams,omitempty"`

		KvmParams *RecoverKvmParams `json:"kvmParams,omitempty"`

		MongodbParams *MongodbParams `json:"mongodbParams,omitempty"`

		MssqlParams *RecoverSQLParams `json:"mssqlParams,omitempty"`

		NetappParams *RecoverNetappParams `json:"netappParams,omitempty"`

		Office365Params *RecoverO365Params `json:"office365Params,omitempty"`

		OracleParams *RecoverOracleParams `json:"oracleParams,omitempty"`

		PhysicalParams *RecoverPhysicalParams `json:"physicalParams,omitempty"`

		PureParams *RecoverPureParams `json:"pureParams,omitempty"`

		SapHanaParams *SapHanaParams `json:"sapHanaParams,omitempty"`

		SfdcParams *RecoverSalesforceParams `json:"sfdcParams,omitempty"`

		UdaParams *UdaParams `json:"udaParams,omitempty"`

		ViewParams *RecoverViewParams `json:"viewParams,omitempty"`

		VmwareParams *RecoverVmwareParams `json:"vmwareParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AcropolisParams = dataAO1.AcropolisParams

	m.AwsParams = dataAO1.AwsParams

	m.AzureParams = dataAO1.AzureParams

	m.CassandraParams = dataAO1.CassandraParams

	m.CouchbaseParams = dataAO1.CouchbaseParams

	m.ElastifileParams = dataAO1.ElastifileParams

	m.ExchangeParams = dataAO1.ExchangeParams

	m.FlashbladeParams = dataAO1.FlashbladeParams

	m.GcpParams = dataAO1.GcpParams

	m.GenericNasParams = dataAO1.GenericNasParams

	m.GpfsParams = dataAO1.GpfsParams

	m.HbaseParams = dataAO1.HbaseParams

	m.HdfsParams = dataAO1.HdfsParams

	m.HiveParams = dataAO1.HiveParams

	m.HypervParams = dataAO1.HypervParams

	m.IbmFlashSystemParams = dataAO1.IbmFlashSystemParams

	m.IsilonParams = dataAO1.IsilonParams

	m.KubernetesParams = dataAO1.KubernetesParams

	m.KvmParams = dataAO1.KvmParams

	m.MongodbParams = dataAO1.MongodbParams

	m.MssqlParams = dataAO1.MssqlParams

	m.NetappParams = dataAO1.NetappParams

	m.Office365Params = dataAO1.Office365Params

	m.OracleParams = dataAO1.OracleParams

	m.PhysicalParams = dataAO1.PhysicalParams

	m.PureParams = dataAO1.PureParams

	m.SapHanaParams = dataAO1.SapHanaParams

	m.SfdcParams = dataAO1.SfdcParams

	m.UdaParams = dataAO1.UdaParams

	m.ViewParams = dataAO1.ViewParams

	m.VmwareParams = dataAO1.VmwareParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Recovery) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonRecoveryResponseParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AcropolisParams *RecoverAcropolisParams `json:"acropolisParams,omitempty"`

		AwsParams *RecoverAwsParams `json:"awsParams,omitempty"`

		AzureParams *RecoverAzureParams `json:"azureParams,omitempty"`

		CassandraParams *CassandraParams `json:"cassandraParams,omitempty"`

		CouchbaseParams *CouchbaseParams `json:"couchbaseParams,omitempty"`

		ElastifileParams *RecoverElastifileParams `json:"elastifileParams,omitempty"`

		ExchangeParams *RecoverExchangeParams `json:"exchangeParams,omitempty"`

		FlashbladeParams *RecoverFlashbladeParams `json:"flashbladeParams,omitempty"`

		GcpParams *RecoverGcpParams `json:"gcpParams,omitempty"`

		GenericNasParams *RecoverGenericNasParams `json:"genericNasParams,omitempty"`

		GpfsParams *RecoverGpfsParams `json:"gpfsParams,omitempty"`

		HbaseParams *HbaseParams `json:"hbaseParams,omitempty"`

		HdfsParams *HdfsParams `json:"hdfsParams,omitempty"`

		HiveParams *HiveParams `json:"hiveParams,omitempty"`

		HypervParams *RecoverHyperVParams `json:"hypervParams,omitempty"`

		IbmFlashSystemParams *RecoverPureParams `json:"ibmFlashSystemParams,omitempty"`

		IsilonParams *RecoverIsilonParams `json:"isilonParams,omitempty"`

		KubernetesParams *RecoverKubernetesParams `json:"kubernetesParams,omitempty"`

		KvmParams *RecoverKvmParams `json:"kvmParams,omitempty"`

		MongodbParams *MongodbParams `json:"mongodbParams,omitempty"`

		MssqlParams *RecoverSQLParams `json:"mssqlParams,omitempty"`

		NetappParams *RecoverNetappParams `json:"netappParams,omitempty"`

		Office365Params *RecoverO365Params `json:"office365Params,omitempty"`

		OracleParams *RecoverOracleParams `json:"oracleParams,omitempty"`

		PhysicalParams *RecoverPhysicalParams `json:"physicalParams,omitempty"`

		PureParams *RecoverPureParams `json:"pureParams,omitempty"`

		SapHanaParams *SapHanaParams `json:"sapHanaParams,omitempty"`

		SfdcParams *RecoverSalesforceParams `json:"sfdcParams,omitempty"`

		UdaParams *UdaParams `json:"udaParams,omitempty"`

		ViewParams *RecoverViewParams `json:"viewParams,omitempty"`

		VmwareParams *RecoverVmwareParams `json:"vmwareParams,omitempty"`
	}

	dataAO1.AcropolisParams = m.AcropolisParams

	dataAO1.AwsParams = m.AwsParams

	dataAO1.AzureParams = m.AzureParams

	dataAO1.CassandraParams = m.CassandraParams

	dataAO1.CouchbaseParams = m.CouchbaseParams

	dataAO1.ElastifileParams = m.ElastifileParams

	dataAO1.ExchangeParams = m.ExchangeParams

	dataAO1.FlashbladeParams = m.FlashbladeParams

	dataAO1.GcpParams = m.GcpParams

	dataAO1.GenericNasParams = m.GenericNasParams

	dataAO1.GpfsParams = m.GpfsParams

	dataAO1.HbaseParams = m.HbaseParams

	dataAO1.HdfsParams = m.HdfsParams

	dataAO1.HiveParams = m.HiveParams

	dataAO1.HypervParams = m.HypervParams

	dataAO1.IbmFlashSystemParams = m.IbmFlashSystemParams

	dataAO1.IsilonParams = m.IsilonParams

	dataAO1.KubernetesParams = m.KubernetesParams

	dataAO1.KvmParams = m.KvmParams

	dataAO1.MongodbParams = m.MongodbParams

	dataAO1.MssqlParams = m.MssqlParams

	dataAO1.NetappParams = m.NetappParams

	dataAO1.Office365Params = m.Office365Params

	dataAO1.OracleParams = m.OracleParams

	dataAO1.PhysicalParams = m.PhysicalParams

	dataAO1.PureParams = m.PureParams

	dataAO1.SapHanaParams = m.SapHanaParams

	dataAO1.SfdcParams = m.SfdcParams

	dataAO1.UdaParams = m.UdaParams

	dataAO1.ViewParams = m.ViewParams

	dataAO1.VmwareParams = m.VmwareParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recovery
func (m *Recovery) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonRecoveryResponseParams
	if err := m.CommonRecoveryResponseParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcropolisParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouchbaseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElastifileParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlashbladeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericNasParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpfsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmFlashSystemParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKvmParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMssqlParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365Params(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePureParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSapHanaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Recovery) validateAcropolisParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AcropolisParams) { // not required
		return nil
	}

	if m.AcropolisParams != nil {
		if err := m.AcropolisParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateAwsParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsParams) { // not required
		return nil
	}

	if m.AwsParams != nil {
		if err := m.AwsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateAzureParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AzureParams) { // not required
		return nil
	}

	if m.AzureParams != nil {
		if err := m.AzureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateCassandraParams(formats strfmt.Registry) error {

	if swag.IsZero(m.CassandraParams) { // not required
		return nil
	}

	if m.CassandraParams != nil {
		if err := m.CassandraParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateCouchbaseParams(formats strfmt.Registry) error {

	if swag.IsZero(m.CouchbaseParams) { // not required
		return nil
	}

	if m.CouchbaseParams != nil {
		if err := m.CouchbaseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateElastifileParams(formats strfmt.Registry) error {

	if swag.IsZero(m.ElastifileParams) { // not required
		return nil
	}

	if m.ElastifileParams != nil {
		if err := m.ElastifileParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateExchangeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.ExchangeParams) { // not required
		return nil
	}

	if m.ExchangeParams != nil {
		if err := m.ExchangeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateFlashbladeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.FlashbladeParams) { // not required
		return nil
	}

	if m.FlashbladeParams != nil {
		if err := m.FlashbladeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateGcpParams(formats strfmt.Registry) error {

	if swag.IsZero(m.GcpParams) { // not required
		return nil
	}

	if m.GcpParams != nil {
		if err := m.GcpParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateGenericNasParams(formats strfmt.Registry) error {

	if swag.IsZero(m.GenericNasParams) { // not required
		return nil
	}

	if m.GenericNasParams != nil {
		if err := m.GenericNasParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateGpfsParams(formats strfmt.Registry) error {

	if swag.IsZero(m.GpfsParams) { // not required
		return nil
	}

	if m.GpfsParams != nil {
		if err := m.GpfsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateHbaseParams(formats strfmt.Registry) error {

	if swag.IsZero(m.HbaseParams) { // not required
		return nil
	}

	if m.HbaseParams != nil {
		if err := m.HbaseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateHdfsParams(formats strfmt.Registry) error {

	if swag.IsZero(m.HdfsParams) { // not required
		return nil
	}

	if m.HdfsParams != nil {
		if err := m.HdfsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateHiveParams(formats strfmt.Registry) error {

	if swag.IsZero(m.HiveParams) { // not required
		return nil
	}

	if m.HiveParams != nil {
		if err := m.HiveParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateHypervParams(formats strfmt.Registry) error {

	if swag.IsZero(m.HypervParams) { // not required
		return nil
	}

	if m.HypervParams != nil {
		if err := m.HypervParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateIbmFlashSystemParams(formats strfmt.Registry) error {

	if swag.IsZero(m.IbmFlashSystemParams) { // not required
		return nil
	}

	if m.IbmFlashSystemParams != nil {
		if err := m.IbmFlashSystemParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibmFlashSystemParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibmFlashSystemParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateIsilonParams(formats strfmt.Registry) error {

	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateKubernetesParams(formats strfmt.Registry) error {

	if swag.IsZero(m.KubernetesParams) { // not required
		return nil
	}

	if m.KubernetesParams != nil {
		if err := m.KubernetesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateKvmParams(formats strfmt.Registry) error {

	if swag.IsZero(m.KvmParams) { // not required
		return nil
	}

	if m.KvmParams != nil {
		if err := m.KvmParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kvmParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateMongodbParams(formats strfmt.Registry) error {

	if swag.IsZero(m.MongodbParams) { // not required
		return nil
	}

	if m.MongodbParams != nil {
		if err := m.MongodbParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateMssqlParams(formats strfmt.Registry) error {

	if swag.IsZero(m.MssqlParams) { // not required
		return nil
	}

	if m.MssqlParams != nil {
		if err := m.MssqlParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateNetappParams(formats strfmt.Registry) error {

	if swag.IsZero(m.NetappParams) { // not required
		return nil
	}

	if m.NetappParams != nil {
		if err := m.NetappParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateOffice365Params(formats strfmt.Registry) error {

	if swag.IsZero(m.Office365Params) { // not required
		return nil
	}

	if m.Office365Params != nil {
		if err := m.Office365Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Params")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateOracleParams(formats strfmt.Registry) error {

	if swag.IsZero(m.OracleParams) { // not required
		return nil
	}

	if m.OracleParams != nil {
		if err := m.OracleParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validatePhysicalParams(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validatePureParams(formats strfmt.Registry) error {

	if swag.IsZero(m.PureParams) { // not required
		return nil
	}

	if m.PureParams != nil {
		if err := m.PureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pureParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateSapHanaParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SapHanaParams) { // not required
		return nil
	}

	if m.SapHanaParams != nil {
		if err := m.SapHanaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapHanaParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateSfdcParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SfdcParams) { // not required
		return nil
	}

	if m.SfdcParams != nil {
		if err := m.SfdcParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateUdaParams(formats strfmt.Registry) error {

	if swag.IsZero(m.UdaParams) { // not required
		return nil
	}

	if m.UdaParams != nil {
		if err := m.UdaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateViewParams(formats strfmt.Registry) error {

	if swag.IsZero(m.ViewParams) { // not required
		return nil
	}

	if m.ViewParams != nil {
		if err := m.ViewParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) validateVmwareParams(formats strfmt.Registry) error {

	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recovery based on the context it is used
func (m *Recovery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonRecoveryResponseParams
	if err := m.CommonRecoveryResponseParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcropolisParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCouchbaseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElastifileParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlashbladeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenericNasParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpfsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIbmFlashSystemParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKvmParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongodbParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMssqlParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSapHanaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Recovery) contextValidateAcropolisParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AcropolisParams != nil {

		if swag.IsZero(m.AcropolisParams) { // not required
			return nil
		}

		if err := m.AcropolisParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateAwsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsParams != nil {

		if swag.IsZero(m.AwsParams) { // not required
			return nil
		}

		if err := m.AwsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateAzureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureParams != nil {

		if swag.IsZero(m.AzureParams) { // not required
			return nil
		}

		if err := m.AzureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateCassandraParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraParams != nil {

		if swag.IsZero(m.CassandraParams) { // not required
			return nil
		}

		if err := m.CassandraParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateCouchbaseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CouchbaseParams != nil {

		if swag.IsZero(m.CouchbaseParams) { // not required
			return nil
		}

		if err := m.CouchbaseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateElastifileParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ElastifileParams != nil {

		if swag.IsZero(m.ElastifileParams) { // not required
			return nil
		}

		if err := m.ElastifileParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateExchangeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeParams != nil {

		if swag.IsZero(m.ExchangeParams) { // not required
			return nil
		}

		if err := m.ExchangeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateFlashbladeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FlashbladeParams != nil {

		if swag.IsZero(m.FlashbladeParams) { // not required
			return nil
		}

		if err := m.FlashbladeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateGcpParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpParams != nil {

		if swag.IsZero(m.GcpParams) { // not required
			return nil
		}

		if err := m.GcpParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateGenericNasParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericNasParams != nil {

		if swag.IsZero(m.GenericNasParams) { // not required
			return nil
		}

		if err := m.GenericNasParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateGpfsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GpfsParams != nil {

		if swag.IsZero(m.GpfsParams) { // not required
			return nil
		}

		if err := m.GpfsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateHbaseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseParams != nil {

		if swag.IsZero(m.HbaseParams) { // not required
			return nil
		}

		if err := m.HbaseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateHdfsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsParams != nil {

		if swag.IsZero(m.HdfsParams) { // not required
			return nil
		}

		if err := m.HdfsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateHiveParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveParams != nil {

		if swag.IsZero(m.HiveParams) { // not required
			return nil
		}

		if err := m.HiveParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateHypervParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParams != nil {

		if swag.IsZero(m.HypervParams) { // not required
			return nil
		}

		if err := m.HypervParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateIbmFlashSystemParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IbmFlashSystemParams != nil {

		if swag.IsZero(m.IbmFlashSystemParams) { // not required
			return nil
		}

		if err := m.IbmFlashSystemParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibmFlashSystemParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibmFlashSystemParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateKubernetesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesParams != nil {

		if swag.IsZero(m.KubernetesParams) { // not required
			return nil
		}

		if err := m.KubernetesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateKvmParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KvmParams != nil {

		if swag.IsZero(m.KvmParams) { // not required
			return nil
		}

		if err := m.KvmParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kvmParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateMongodbParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MongodbParams != nil {

		if swag.IsZero(m.MongodbParams) { // not required
			return nil
		}

		if err := m.MongodbParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateMssqlParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MssqlParams != nil {

		if swag.IsZero(m.MssqlParams) { // not required
			return nil
		}

		if err := m.MssqlParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateNetappParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NetappParams != nil {

		if swag.IsZero(m.NetappParams) { // not required
			return nil
		}

		if err := m.NetappParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateOffice365Params(ctx context.Context, formats strfmt.Registry) error {

	if m.Office365Params != nil {

		if swag.IsZero(m.Office365Params) { // not required
			return nil
		}

		if err := m.Office365Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Params")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateOracleParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleParams != nil {

		if swag.IsZero(m.OracleParams) { // not required
			return nil
		}

		if err := m.OracleParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidatePureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PureParams != nil {

		if swag.IsZero(m.PureParams) { // not required
			return nil
		}

		if err := m.PureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pureParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateSapHanaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SapHanaParams != nil {

		if swag.IsZero(m.SapHanaParams) { // not required
			return nil
		}

		if err := m.SapHanaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapHanaParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateSfdcParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcParams != nil {

		if swag.IsZero(m.SfdcParams) { // not required
			return nil
		}

		if err := m.SfdcParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateUdaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaParams != nil {

		if swag.IsZero(m.UdaParams) { // not required
			return nil
		}

		if err := m.UdaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateViewParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewParams != nil {

		if swag.IsZero(m.ViewParams) { // not required
			return nil
		}

		if err := m.ViewParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

func (m *Recovery) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Recovery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Recovery) UnmarshalBinary(b []byte) error {
	var res Recovery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
