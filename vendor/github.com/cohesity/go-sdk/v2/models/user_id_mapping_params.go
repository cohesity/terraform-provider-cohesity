// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserIDMappingParams Specifies how the Unix and Windows users are mapped in an Active Directory.
//
// swagger:model UserIdMappingParams
type UserIDMappingParams struct {

	// Specifies the type of the mapping.
	// Required: true
	// Enum: ["Rfc2307","Sfu30","Centrify","CustomAttributes","LdapProvider","NisProvider","Rid","Fixed"]
	Type *string `json:"type"`

	// Specifies the params for Centrify mapping type mapping.
	CentrifyTypeParams *AdCentrifyTypeParams `json:"centrifyTypeParams,omitempty"`

	// Specifies the params for CustomAttributes mapping type mapping.
	CustomAttributesTypeParams *AdCustomAttributesTypeParams `json:"customAttributesTypeParams,omitempty"`

	// Specifies the params for Fixed mapping type mapping.
	FixedTypeParams *AdFixedTypeParams `json:"fixedTypeParams,omitempty"`

	// Specifies the params for LdapProvider mapping type mapping.
	LdapProviderTypeParams *AdLdapProviderTypeParams `json:"ldapProviderTypeParams,omitempty"`

	// Specifies the params for NisProvider mapping type mapping.
	NisProviderTypeParams *AdNisProviderTypeParams `json:"nisProviderTypeParams,omitempty"`

	// Specifies the params for Rfc2307 mapping type mapping.
	Rfc2307TypeParams *AdRfc2307TypeParams `json:"rfc2307TypeParams,omitempty"`

	// Specifies the params for Sfu30 mapping type mapping.
	Sfu30TypeParams *AdSfu30TypeParams `json:"sfu30TypeParams,omitempty"`
}

// Validate validates this user Id mapping params
func (m *UserIDMappingParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCentrifyTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomAttributesTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapProviderTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNisProviderTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRfc2307TypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfu30TypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userIdMappingParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rfc2307","Sfu30","Centrify","CustomAttributes","LdapProvider","NisProvider","Rid","Fixed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userIdMappingParamsTypeTypePropEnum = append(userIdMappingParamsTypeTypePropEnum, v)
	}
}

const (

	// UserIDMappingParamsTypeRfc2307 captures enum value "Rfc2307"
	UserIDMappingParamsTypeRfc2307 string = "Rfc2307"

	// UserIDMappingParamsTypeSfu30 captures enum value "Sfu30"
	UserIDMappingParamsTypeSfu30 string = "Sfu30"

	// UserIDMappingParamsTypeCentrify captures enum value "Centrify"
	UserIDMappingParamsTypeCentrify string = "Centrify"

	// UserIDMappingParamsTypeCustomAttributes captures enum value "CustomAttributes"
	UserIDMappingParamsTypeCustomAttributes string = "CustomAttributes"

	// UserIDMappingParamsTypeLdapProvider captures enum value "LdapProvider"
	UserIDMappingParamsTypeLdapProvider string = "LdapProvider"

	// UserIDMappingParamsTypeNisProvider captures enum value "NisProvider"
	UserIDMappingParamsTypeNisProvider string = "NisProvider"

	// UserIDMappingParamsTypeRid captures enum value "Rid"
	UserIDMappingParamsTypeRid string = "Rid"

	// UserIDMappingParamsTypeFixed captures enum value "Fixed"
	UserIDMappingParamsTypeFixed string = "Fixed"
)

// prop value enum
func (m *UserIDMappingParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userIdMappingParamsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserIDMappingParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *UserIDMappingParams) validateCentrifyTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CentrifyTypeParams) { // not required
		return nil
	}

	if m.CentrifyTypeParams != nil {
		if err := m.CentrifyTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("centrifyTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("centrifyTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) validateCustomAttributesTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomAttributesTypeParams) { // not required
		return nil
	}

	if m.CustomAttributesTypeParams != nil {
		if err := m.CustomAttributesTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customAttributesTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customAttributesTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) validateFixedTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FixedTypeParams) { // not required
		return nil
	}

	if m.FixedTypeParams != nil {
		if err := m.FixedTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixedTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fixedTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) validateLdapProviderTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.LdapProviderTypeParams) { // not required
		return nil
	}

	if m.LdapProviderTypeParams != nil {
		if err := m.LdapProviderTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldapProviderTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldapProviderTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) validateNisProviderTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NisProviderTypeParams) { // not required
		return nil
	}

	if m.NisProviderTypeParams != nil {
		if err := m.NisProviderTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nisProviderTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nisProviderTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) validateRfc2307TypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Rfc2307TypeParams) { // not required
		return nil
	}

	if m.Rfc2307TypeParams != nil {
		if err := m.Rfc2307TypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rfc2307TypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rfc2307TypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) validateSfu30TypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Sfu30TypeParams) { // not required
		return nil
	}

	if m.Sfu30TypeParams != nil {
		if err := m.Sfu30TypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfu30TypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfu30TypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user Id mapping params based on the context it is used
func (m *UserIDMappingParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCentrifyTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomAttributesTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFixedTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLdapProviderTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNisProviderTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRfc2307TypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfu30TypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserIDMappingParams) contextValidateCentrifyTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CentrifyTypeParams != nil {

		if swag.IsZero(m.CentrifyTypeParams) { // not required
			return nil
		}

		if err := m.CentrifyTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("centrifyTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("centrifyTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) contextValidateCustomAttributesTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomAttributesTypeParams != nil {

		if swag.IsZero(m.CustomAttributesTypeParams) { // not required
			return nil
		}

		if err := m.CustomAttributesTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customAttributesTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customAttributesTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) contextValidateFixedTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FixedTypeParams != nil {

		if swag.IsZero(m.FixedTypeParams) { // not required
			return nil
		}

		if err := m.FixedTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixedTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fixedTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) contextValidateLdapProviderTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.LdapProviderTypeParams != nil {

		if swag.IsZero(m.LdapProviderTypeParams) { // not required
			return nil
		}

		if err := m.LdapProviderTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldapProviderTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldapProviderTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) contextValidateNisProviderTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NisProviderTypeParams != nil {

		if swag.IsZero(m.NisProviderTypeParams) { // not required
			return nil
		}

		if err := m.NisProviderTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nisProviderTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nisProviderTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) contextValidateRfc2307TypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.Rfc2307TypeParams != nil {

		if swag.IsZero(m.Rfc2307TypeParams) { // not required
			return nil
		}

		if err := m.Rfc2307TypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rfc2307TypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rfc2307TypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *UserIDMappingParams) contextValidateSfu30TypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.Sfu30TypeParams != nil {

		if swag.IsZero(m.Sfu30TypeParams) { // not required
			return nil
		}

		if err := m.Sfu30TypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfu30TypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfu30TypeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserIDMappingParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserIDMappingParams) UnmarshalBinary(b []byte) error {
	var res UserIDMappingParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
