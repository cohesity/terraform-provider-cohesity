// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataTieringTagObject Specifies the tag information of type and array of (label, value).
//
// swagger:model DataTieringTagObject
type DataTieringTagObject struct {

	// Specifies type of tag.
	// Enum: ["fileTypeTag","fileSizeTag","accessTimeTag","modTimeTag"]
	Type *string `json:"type,omitempty"`

	// Array of tag label and value.
	Tags []*DataTieringTag `json:"tags"`
}

// Validate validates this data tiering tag object
func (m *DataTieringTagObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataTieringTagObjectTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fileTypeTag","fileSizeTag","accessTimeTag","modTimeTag"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataTieringTagObjectTypeTypePropEnum = append(dataTieringTagObjectTypeTypePropEnum, v)
	}
}

const (

	// DataTieringTagObjectTypeFileTypeTag captures enum value "fileTypeTag"
	DataTieringTagObjectTypeFileTypeTag string = "fileTypeTag"

	// DataTieringTagObjectTypeFileSizeTag captures enum value "fileSizeTag"
	DataTieringTagObjectTypeFileSizeTag string = "fileSizeTag"

	// DataTieringTagObjectTypeAccessTimeTag captures enum value "accessTimeTag"
	DataTieringTagObjectTypeAccessTimeTag string = "accessTimeTag"

	// DataTieringTagObjectTypeModTimeTag captures enum value "modTimeTag"
	DataTieringTagObjectTypeModTimeTag string = "modTimeTag"
)

// prop value enum
func (m *DataTieringTagObject) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataTieringTagObjectTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataTieringTagObject) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DataTieringTagObject) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this data tiering tag object based on the context it is used
func (m *DataTieringTagObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringTagObject) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTieringTagObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTieringTagObject) UnmarshalBinary(b []byte) error {
	var res DataTieringTagObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
