// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonApplicationServersRegistrationParams Application Servers Registration Request Config
//
// Specifies the application servers registration config.
//
// swagger:model CommonApplicationServersRegistrationParams
type CommonApplicationServersRegistrationParams struct {

	// Specifies the list of application environments such as kOracle, kSQL, kExchange, kAD etc. running on the Protection Source.
	// Required: true
	ApplicationEnvironments []string `json:"applicationEnvironments"`

	// Set to true if a persistent agent is running on the host. If this is specified, then credentials would not be used to log into the host environment.
	UsePersistentAgent *bool `json:"usePersistentAgent,omitempty"`

	// If set to true registers application servers otherwise will update application servers registration. By default it is set to false.
	RegisterApplications *bool `json:"registerApplications,omitempty"`
}

// Validate validates this common application servers registration params
func (m *CommonApplicationServersRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonApplicationServersRegistrationParamsApplicationEnvironmentsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSQL","kOracle"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonApplicationServersRegistrationParamsApplicationEnvironmentsItemsEnum = append(commonApplicationServersRegistrationParamsApplicationEnvironmentsItemsEnum, v)
	}
}

func (m *CommonApplicationServersRegistrationParams) validateApplicationEnvironmentsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonApplicationServersRegistrationParamsApplicationEnvironmentsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonApplicationServersRegistrationParams) validateApplicationEnvironments(formats strfmt.Registry) error {

	if err := validate.Required("applicationEnvironments", "body", m.ApplicationEnvironments); err != nil {
		return err
	}

	for i := 0; i < len(m.ApplicationEnvironments); i++ {

		// value enum
		if err := m.validateApplicationEnvironmentsItemsEnum("applicationEnvironments"+"."+strconv.Itoa(i), "body", m.ApplicationEnvironments[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this common application servers registration params based on context it is used
func (m *CommonApplicationServersRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonApplicationServersRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonApplicationServersRegistrationParams) UnmarshalBinary(b []byte) error {
	var res CommonApplicationServersRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
