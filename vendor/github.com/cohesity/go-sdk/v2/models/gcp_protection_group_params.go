// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GcpProtectionGroupParams GCP Protection Group Request Params.
//
// Specifies the parameters which are specific to GCP related Protection Groups.
//
// swagger:model GcpProtectionGroupParams
type GcpProtectionGroupParams struct {

	// Specifies the GCP Protection Group type.
	// Required: true
	// Enum: ["kNative"]
	ProtectionType *string `json:"protectionType"`

	// Specifies the parameters which are specific to GCP related Protection Groups using GCP native snapshot APIs.
	NativeProtectionTypeParams *GcpNativeProtectionGroupParams `json:"nativeProtectionTypeParams,omitempty"`
}

// Validate validates this gcp protection group params
func (m *GcpProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNativeProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gcpProtectionGroupParamsTypeProtectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gcpProtectionGroupParamsTypeProtectionTypePropEnum = append(gcpProtectionGroupParamsTypeProtectionTypePropEnum, v)
	}
}

const (

	// GcpProtectionGroupParamsProtectionTypeKNative captures enum value "kNative"
	GcpProtectionGroupParamsProtectionTypeKNative string = "kNative"
)

// prop value enum
func (m *GcpProtectionGroupParams) validateProtectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gcpProtectionGroupParamsTypeProtectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GcpProtectionGroupParams) validateProtectionType(formats strfmt.Registry) error {

	if err := validate.Required("protectionType", "body", m.ProtectionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtectionTypeEnum("protectionType", "body", *m.ProtectionType); err != nil {
		return err
	}

	return nil
}

func (m *GcpProtectionGroupParams) validateNativeProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NativeProtectionTypeParams) { // not required
		return nil
	}

	if m.NativeProtectionTypeParams != nil {
		if err := m.NativeProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nativeProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nativeProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this gcp protection group params based on the context it is used
func (m *GcpProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNativeProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpProtectionGroupParams) contextValidateNativeProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NativeProtectionTypeParams != nil {

		if swag.IsZero(m.NativeProtectionTypeParams) { // not required
			return nil
		}

		if err := m.NativeProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nativeProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nativeProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GcpProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res GcpProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
