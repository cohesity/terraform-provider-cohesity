// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Chassis Chassis specific response.
//
// Specifies information about hardware chassis.
//
// swagger:model Chassis
type Chassis struct {

	// Each chassis in a cluster is assigned a unique id when the chassis is added to the cluster first time. The index starts from 1. The use of an integer id helps speed up internal computations involving chassis. This integer will not change during the lifetime of the chassis in the cluster.
	ID *int64 `json:"id,omitempty"`

	// Specifies the hardware model of the chassis.Like ivybridge, haswell.
	HardwareModel *string `json:"hardwareModel,omitempty"`

	// Unique name assigned to this chassis. This is set to the serial number of the chassis by one of the following two ways. 1) by the chassis manufacturer for non-cohesity systems, and cohesity systems built before jira ticket ECO-2 was approved. 2) by a cohesity contract manufacturer for cohesity systems built after jira ticket ECO-2 was approved.
	Name *string `json:"name,omitempty"`

	// Specifies the serial number of the chassis.
	SerialNumber *string `json:"serialNumber,omitempty"`

	// Specifies list of ids of all the nodes in chassis.
	NodeIds []int64 `json:"nodeIds"`

	// Rack Id that this chassis belong to
	RackID *int64 `json:"rackId,omitempty"`

	// This field is initialized as sum of maximum slots of all the chassis added to the cluster so far plus one. This is required to assign unique node index for the nodes when they are added to the cluster. Please refer to cluster_node_index in Node below.
	ChassisNodeBase uint32 `json:"chassisNodeBase,omitempty"`

	// Location of the chassis within the rack.
	Location *string `json:"location,omitempty"`
}

// Validate validates this chassis
func (m *Chassis) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this chassis based on context it is used
func (m *Chassis) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Chassis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Chassis) UnmarshalBinary(b []byte) error {
	var res Chassis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
