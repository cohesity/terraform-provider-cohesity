// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsCredentials AwsCredentials
//
// Specifies the object to Aws related credentials.
//
// swagger:model AwsCredentials
type AwsCredentials struct {

	// Specifies the username to access target entity.
	Username *string `json:"username,omitempty"`

	// Specifies the password to access target entity.
	Password *string `json:"password,omitempty"`

	// Specifies the DNS address of the AWS managed active directory in which. Currently is set only for kerberos authentication.
	DirectoryDNSAddress *string `json:"directoryDNSAddress,omitempty"`

	// Specifies the Kerberos realm name for a Kerberos-secured target.
	RealmName *string `json:"realmName,omitempty"`

	// Specifies the type of authentication being used in the request.
	// Enum: ["kUseIAMUser","kUseIAMRole","kUseInstanceProfile","kStandardCredentials","kKerberos"]
	AuthType *string `json:"authType,omitempty"`
}

// Validate validates this aws credentials
func (m *AwsCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var awsCredentialsTypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUseIAMUser","kUseIAMRole","kUseInstanceProfile","kStandardCredentials","kKerberos"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsCredentialsTypeAuthTypePropEnum = append(awsCredentialsTypeAuthTypePropEnum, v)
	}
}

const (

	// AwsCredentialsAuthTypeKUseIAMUser captures enum value "kUseIAMUser"
	AwsCredentialsAuthTypeKUseIAMUser string = "kUseIAMUser"

	// AwsCredentialsAuthTypeKUseIAMRole captures enum value "kUseIAMRole"
	AwsCredentialsAuthTypeKUseIAMRole string = "kUseIAMRole"

	// AwsCredentialsAuthTypeKUseInstanceProfile captures enum value "kUseInstanceProfile"
	AwsCredentialsAuthTypeKUseInstanceProfile string = "kUseInstanceProfile"

	// AwsCredentialsAuthTypeKStandardCredentials captures enum value "kStandardCredentials"
	AwsCredentialsAuthTypeKStandardCredentials string = "kStandardCredentials"

	// AwsCredentialsAuthTypeKKerberos captures enum value "kKerberos"
	AwsCredentialsAuthTypeKKerberos string = "kKerberos"
)

// prop value enum
func (m *AwsCredentials) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, awsCredentialsTypeAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AwsCredentials) validateAuthType(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aws credentials based on context it is used
func (m *AwsCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AwsCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsCredentials) UnmarshalBinary(b []byte) error {
	var res AwsCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
