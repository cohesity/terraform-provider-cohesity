// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateUserSessionRequestParams Specifies user session request parameters
//
// swagger:model CreateUserSessionRequestParams
type CreateUserSessionRequestParams struct {

	// Specifies the login name of the Cohesity user
	Username *string `json:"username,omitempty"`

	// Specifies the password of the Cohesity user
	Password *string `json:"password,omitempty"`

	// Specifies the domain the user is logging in to. For a local user the domain is LOCAL. For LDAP/AD user, the domain will map to a LDAP connection string. A user is uniquely identified by a combination of username and domain. LOCAL is the default domain.
	Domain *string `json:"domain,omitempty"`

	// Specifies the certificate for cert based authentication.
	Certificate *string `json:"certificate,omitempty"`

	// Specifies the private key for cert based authentication.
	PrivateKey *string `json:"privateKey,omitempty"`

	// Specifies OTP code for MFA verification.
	OtpCode *string `json:"otpCode,omitempty"`

	// Specifies OTP Type for MFA verification.
	// Enum: ["email","totp","salesforce"]
	OtpType *string `json:"otpType,omitempty"`
}

// Validate validates this create user session request params
func (m *CreateUserSessionRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOtpType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createUserSessionRequestParamsTypeOtpTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","totp","salesforce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createUserSessionRequestParamsTypeOtpTypePropEnum = append(createUserSessionRequestParamsTypeOtpTypePropEnum, v)
	}
}

const (

	// CreateUserSessionRequestParamsOtpTypeEmail captures enum value "email"
	CreateUserSessionRequestParamsOtpTypeEmail string = "email"

	// CreateUserSessionRequestParamsOtpTypeTotp captures enum value "totp"
	CreateUserSessionRequestParamsOtpTypeTotp string = "totp"

	// CreateUserSessionRequestParamsOtpTypeSalesforce captures enum value "salesforce"
	CreateUserSessionRequestParamsOtpTypeSalesforce string = "salesforce"
)

// prop value enum
func (m *CreateUserSessionRequestParams) validateOtpTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createUserSessionRequestParamsTypeOtpTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateUserSessionRequestParams) validateOtpType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtpType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOtpTypeEnum("otpType", "body", *m.OtpType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create user session request params based on context it is used
func (m *CreateUserSessionRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateUserSessionRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateUserSessionRequestParams) UnmarshalBinary(b []byte) error {
	var res CreateUserSessionRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
