// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateView Create View.
//
// Specifies the information required for creating a new View w/o required fields.
//
// swagger:model CreateView
type CreateView struct {

	// Specifies the id of the Storage Domain (View Box) where the View will be
	// created.
	// Required: true
	StorageDomainID *int64 `json:"storageDomainId"`

	// Specifies whether to support case insensitive file/folder names. This
	// parameter can only be set during create and cannot be changed.
	CaseInsensitiveNamesEnabled *bool `json:"caseInsensitiveNamesEnabled,omitempty"`

	// Specifies the Object Services key mapping config of the view. This parameter can only
	// be set during create and cannot be changed.
	// Configuration of Object Services key mapping.
	// Specifies the type of Object Services key mapping config.
	// Enum: ["Random","Short","Long","Hierarchical","ObjectId"]
	ObjectServicesMappingConfig *string `json:"objectServicesMappingConfig,omitempty"`

	// Specifies whether to support s3 folder support feature. This
	// parameter can only be set during create and cannot be changed.
	S3FolderSupportEnabled *bool `json:"s3FolderSupportEnabled,omitempty"`

	// Specifies the intent of the View.
	Intent *ViewIntent `json:"intent,omitempty"`

	// Specifies the protection config of the View.
	ViewProtectionConfig *ViewProtectionConfig `json:"viewProtectionConfig,omitempty"`

	UpdateViewParam
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CreateView) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		StorageDomainID *int64 `json:"storageDomainId"`

		CaseInsensitiveNamesEnabled *bool `json:"caseInsensitiveNamesEnabled,omitempty"`

		ObjectServicesMappingConfig *string `json:"objectServicesMappingConfig,omitempty"`

		S3FolderSupportEnabled *bool `json:"s3FolderSupportEnabled,omitempty"`

		Intent *ViewIntent `json:"intent,omitempty"`

		ViewProtectionConfig *ViewProtectionConfig `json:"viewProtectionConfig,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.StorageDomainID = dataAO0.StorageDomainID

	m.CaseInsensitiveNamesEnabled = dataAO0.CaseInsensitiveNamesEnabled

	m.ObjectServicesMappingConfig = dataAO0.ObjectServicesMappingConfig

	m.S3FolderSupportEnabled = dataAO0.S3FolderSupportEnabled

	m.Intent = dataAO0.Intent

	m.ViewProtectionConfig = dataAO0.ViewProtectionConfig

	// AO1
	var aO1 UpdateViewParam
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.UpdateViewParam = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CreateView) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		StorageDomainID *int64 `json:"storageDomainId"`

		CaseInsensitiveNamesEnabled *bool `json:"caseInsensitiveNamesEnabled,omitempty"`

		ObjectServicesMappingConfig *string `json:"objectServicesMappingConfig,omitempty"`

		S3FolderSupportEnabled *bool `json:"s3FolderSupportEnabled,omitempty"`

		Intent *ViewIntent `json:"intent,omitempty"`

		ViewProtectionConfig *ViewProtectionConfig `json:"viewProtectionConfig,omitempty"`
	}

	dataAO0.StorageDomainID = m.StorageDomainID

	dataAO0.CaseInsensitiveNamesEnabled = m.CaseInsensitiveNamesEnabled

	dataAO0.ObjectServicesMappingConfig = m.ObjectServicesMappingConfig

	dataAO0.S3FolderSupportEnabled = m.S3FolderSupportEnabled

	dataAO0.Intent = m.Intent

	dataAO0.ViewProtectionConfig = m.ViewProtectionConfig

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.UpdateViewParam)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create view
func (m *CreateView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageDomainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectServicesMappingConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewProtectionConfig(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with UpdateViewParam
	if err := m.UpdateViewParam.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateView) validateStorageDomainID(formats strfmt.Registry) error {

	if err := validate.Required("storageDomainId", "body", m.StorageDomainID); err != nil {
		return err
	}

	return nil
}

var createViewTypeObjectServicesMappingConfigPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Random","Short","Long","Hierarchical","ObjectId"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createViewTypeObjectServicesMappingConfigPropEnum = append(createViewTypeObjectServicesMappingConfigPropEnum, v)
	}
}

// property enum
func (m *CreateView) validateObjectServicesMappingConfigEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createViewTypeObjectServicesMappingConfigPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateView) validateObjectServicesMappingConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectServicesMappingConfig) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectServicesMappingConfigEnum("objectServicesMappingConfig", "body", *m.ObjectServicesMappingConfig); err != nil {
		return err
	}

	return nil
}

func (m *CreateView) validateIntent(formats strfmt.Registry) error {

	if swag.IsZero(m.Intent) { // not required
		return nil
	}

	if m.Intent != nil {
		if err := m.Intent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intent")
			}
			return err
		}
	}

	return nil
}

func (m *CreateView) validateViewProtectionConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ViewProtectionConfig) { // not required
		return nil
	}

	if m.ViewProtectionConfig != nil {
		if err := m.ViewProtectionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewProtectionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewProtectionConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create view based on the context it is used
func (m *CreateView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewProtectionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with UpdateViewParam
	if err := m.UpdateViewParam.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateView) contextValidateIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.Intent != nil {

		if swag.IsZero(m.Intent) { // not required
			return nil
		}

		if err := m.Intent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intent")
			}
			return err
		}
	}

	return nil
}

func (m *CreateView) contextValidateViewProtectionConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewProtectionConfig != nil {

		if swag.IsZero(m.ViewProtectionConfig) { // not required
			return nil
		}

		if err := m.ViewProtectionConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewProtectionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewProtectionConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateView) UnmarshalBinary(b []byte) error {
	var res CreateView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
