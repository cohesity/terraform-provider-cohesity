// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CiphersResp Response with two lists: a list of enabled ciphers and a list of disabled ciphers.
//
// Specifies a list of enabled/disabled ciphers on the cluster.
//
// swagger:model CiphersResp
type CiphersResp struct {

	// Enabled ciphers.
	EnabledCiphers []string `json:"enabledCiphers"`

	// Disabled ciphers.
	DisabledCiphers []string `json:"disabledCiphers"`
}

// Validate validates this ciphers resp
func (m *CiphersResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabledCiphers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabledCiphers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ciphersRespEnabledCiphersItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TLS_AES_256_GCM_SHA384","TLS_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","TLS_RSA_WITH_AES_256_GCM_SHA384","TLS_RSA_WITH_AES_128_GCM_SHA256","TLS_RSA_WITH_AES_256_CBC_SHA","TLS_RSA_WITH_AES_128_CBC_SHA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ciphersRespEnabledCiphersItemsEnum = append(ciphersRespEnabledCiphersItemsEnum, v)
	}
}

func (m *CiphersResp) validateEnabledCiphersItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ciphersRespEnabledCiphersItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CiphersResp) validateEnabledCiphers(formats strfmt.Registry) error {
	if swag.IsZero(m.EnabledCiphers) { // not required
		return nil
	}

	for i := 0; i < len(m.EnabledCiphers); i++ {

		// value enum
		if err := m.validateEnabledCiphersItemsEnum("enabledCiphers"+"."+strconv.Itoa(i), "body", m.EnabledCiphers[i]); err != nil {
			return err
		}

	}

	return nil
}

var ciphersRespDisabledCiphersItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TLS_AES_256_GCM_SHA384","TLS_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","TLS_RSA_WITH_AES_256_GCM_SHA384","TLS_RSA_WITH_AES_128_GCM_SHA256","TLS_RSA_WITH_AES_256_CBC_SHA","TLS_RSA_WITH_AES_128_CBC_SHA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ciphersRespDisabledCiphersItemsEnum = append(ciphersRespDisabledCiphersItemsEnum, v)
	}
}

func (m *CiphersResp) validateDisabledCiphersItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ciphersRespDisabledCiphersItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CiphersResp) validateDisabledCiphers(formats strfmt.Registry) error {
	if swag.IsZero(m.DisabledCiphers) { // not required
		return nil
	}

	for i := 0; i < len(m.DisabledCiphers); i++ {

		// value enum
		if err := m.validateDisabledCiphersItemsEnum("disabledCiphers"+"."+strconv.Itoa(i), "body", m.DisabledCiphers[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this ciphers resp based on context it is used
func (m *CiphersResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CiphersResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CiphersResp) UnmarshalBinary(b []byte) error {
	var res CiphersResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
