// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CouchbaseSourceRegistrationParams Register Couchbase source request parameters.
//
// Specifies parameters to register Couchbase source.
//
// swagger:model CouchbaseSourceRegistrationParams
type CouchbaseSourceRegistrationParams struct {
	Credentials

	// Specifies the IP Addresses or hostnames of the Couchbase cluster seed nodes.
	// Required: true
	// Min Items: 1
	// Unique: true
	Seeds []string `json:"seeds"`

	// Set to true if connection to couchbase has to be using SSL.
	// Required: true
	IsSslRequired *bool `json:"isSslRequired"`

	// HTTP direct or HTTP SSL port.
	// Required: true
	HTTPPort *int32 `json:"httpPort"`

	// Carrier direct or Carrier SSL port.
	// Required: true
	CarrierPort *int32 `json:"carrierPort"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CouchbaseSourceRegistrationParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Credentials
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Credentials = aO0

	// AO1
	var dataAO1 struct {
		Seeds []string `json:"seeds"`

		IsSslRequired *bool `json:"isSslRequired"`

		HTTPPort *int32 `json:"httpPort"`

		CarrierPort *int32 `json:"carrierPort"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Seeds = dataAO1.Seeds

	m.IsSslRequired = dataAO1.IsSslRequired

	m.HTTPPort = dataAO1.HTTPPort

	m.CarrierPort = dataAO1.CarrierPort

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CouchbaseSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Credentials)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Seeds []string `json:"seeds"`

		IsSslRequired *bool `json:"isSslRequired"`

		HTTPPort *int32 `json:"httpPort"`

		CarrierPort *int32 `json:"carrierPort"`
	}

	dataAO1.Seeds = m.Seeds

	dataAO1.IsSslRequired = m.IsSslRequired

	dataAO1.HTTPPort = m.HTTPPort

	dataAO1.CarrierPort = m.CarrierPort

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this couchbase source registration params
func (m *CouchbaseSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Credentials
	if err := m.Credentials.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeeds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSslRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CouchbaseSourceRegistrationParams) validateSeeds(formats strfmt.Registry) error {

	if err := validate.Required("seeds", "body", m.Seeds); err != nil {
		return err
	}

	iSeedsSize := int64(len(m.Seeds))

	if err := validate.MinItems("seeds", "body", iSeedsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("seeds", "body", m.Seeds); err != nil {
		return err
	}

	return nil
}

func (m *CouchbaseSourceRegistrationParams) validateIsSslRequired(formats strfmt.Registry) error {

	if err := validate.Required("isSslRequired", "body", m.IsSslRequired); err != nil {
		return err
	}

	return nil
}

func (m *CouchbaseSourceRegistrationParams) validateHTTPPort(formats strfmt.Registry) error {

	if err := validate.Required("httpPort", "body", m.HTTPPort); err != nil {
		return err
	}

	return nil
}

func (m *CouchbaseSourceRegistrationParams) validateCarrierPort(formats strfmt.Registry) error {

	if err := validate.Required("carrierPort", "body", m.CarrierPort); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this couchbase source registration params based on the context it is used
func (m *CouchbaseSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Credentials
	if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CouchbaseSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CouchbaseSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res CouchbaseSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
