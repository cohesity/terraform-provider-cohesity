// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterCreateNetworkConfig Cluster Network Config.
//
// Specifies all of the parameters needed for network configuration of the new Cluster.
//
// swagger:model ClusterCreateNetworkConfig
type ClusterCreateNetworkConfig struct {

	// Specifies the list of NTP Servers new cluster should be configured with.
	// Required: true
	NtpServers []string `json:"ntpServers"`

	// Specifies the list of Domain Names new cluster should be configured with.
	// Required: true
	DomainNames []string `json:"domainNames"`

	// Specifies the FQDN hostname of the cluster.
	VipHostName *string `json:"vipHostName,omitempty"`

	// Specifies IP preference of the cluster to be Ipv4/Ipv6. It is Ipv4 by default.
	// Enum: ["Ipv4","Ipv6"]
	IPPreference *string `json:"ipPreference,omitempty"`

	// Specifies whether or not to use DHCP to configure the network of the Cluster.
	// Required: true
	UseDhcp *bool `json:"useDhcp"`

	// Specifies the parameters needed for DHCP based network configuration.
	DhcpNetworkConfig *ClusterDhcpNetworkConfig `json:"dhcpNetworkConfig,omitempty"`

	// Specifies the parameters needed for manual network configuration.
	ManualNetworkConfig *ClusterManualNetworkConfig `json:"manualNetworkConfig,omitempty"`

	// Specifies the parameters needed for DHCP based secondary network configuration.
	SecondaryDhcpNetworkConfig *ClusterDhcpNetworkConfig `json:"secondaryDhcpNetworkConfig,omitempty"`

	// Specifies the parameters needed for manual secondary network configuration.
	SecondaryManualNetworkConfig *ClusterManualNetworkConfig `json:"secondaryManualNetworkConfig,omitempty"`
}

// Validate validates this cluster create network config
func (m *ClusterCreateNetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNtpServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseDhcp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManualNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDhcpNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryManualNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreateNetworkConfig) validateNtpServers(formats strfmt.Registry) error {

	if err := validate.Required("ntpServers", "body", m.NtpServers); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCreateNetworkConfig) validateDomainNames(formats strfmt.Registry) error {

	if err := validate.Required("domainNames", "body", m.DomainNames); err != nil {
		return err
	}

	return nil
}

var clusterCreateNetworkConfigTypeIPPreferencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Ipv4","Ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterCreateNetworkConfigTypeIPPreferencePropEnum = append(clusterCreateNetworkConfigTypeIPPreferencePropEnum, v)
	}
}

const (

	// ClusterCreateNetworkConfigIPPreferenceIPV4 captures enum value "Ipv4"
	ClusterCreateNetworkConfigIPPreferenceIPV4 string = "Ipv4"

	// ClusterCreateNetworkConfigIPPreferenceIPV6 captures enum value "Ipv6"
	ClusterCreateNetworkConfigIPPreferenceIPV6 string = "Ipv6"
)

// prop value enum
func (m *ClusterCreateNetworkConfig) validateIPPreferenceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterCreateNetworkConfigTypeIPPreferencePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterCreateNetworkConfig) validateIPPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.IPPreference) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPPreferenceEnum("ipPreference", "body", *m.IPPreference); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCreateNetworkConfig) validateUseDhcp(formats strfmt.Registry) error {

	if err := validate.Required("useDhcp", "body", m.UseDhcp); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCreateNetworkConfig) validateDhcpNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpNetworkConfig) { // not required
		return nil
	}

	if m.DhcpNetworkConfig != nil {
		if err := m.DhcpNetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcpNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcpNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreateNetworkConfig) validateManualNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ManualNetworkConfig) { // not required
		return nil
	}

	if m.ManualNetworkConfig != nil {
		if err := m.ManualNetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manualNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manualNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreateNetworkConfig) validateSecondaryDhcpNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDhcpNetworkConfig) { // not required
		return nil
	}

	if m.SecondaryDhcpNetworkConfig != nil {
		if err := m.SecondaryDhcpNetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryDhcpNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryDhcpNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreateNetworkConfig) validateSecondaryManualNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryManualNetworkConfig) { // not required
		return nil
	}

	if m.SecondaryManualNetworkConfig != nil {
		if err := m.SecondaryManualNetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryManualNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryManualNetworkConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster create network config based on the context it is used
func (m *ClusterCreateNetworkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhcpNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManualNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryDhcpNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryManualNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreateNetworkConfig) contextValidateDhcpNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.DhcpNetworkConfig != nil {

		if swag.IsZero(m.DhcpNetworkConfig) { // not required
			return nil
		}

		if err := m.DhcpNetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcpNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcpNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreateNetworkConfig) contextValidateManualNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ManualNetworkConfig != nil {

		if swag.IsZero(m.ManualNetworkConfig) { // not required
			return nil
		}

		if err := m.ManualNetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manualNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manualNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreateNetworkConfig) contextValidateSecondaryDhcpNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryDhcpNetworkConfig != nil {

		if swag.IsZero(m.SecondaryDhcpNetworkConfig) { // not required
			return nil
		}

		if err := m.SecondaryDhcpNetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryDhcpNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryDhcpNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterCreateNetworkConfig) contextValidateSecondaryManualNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryManualNetworkConfig != nil {

		if swag.IsZero(m.SecondaryManualNetworkConfig) { // not required
			return nil
		}

		if err := m.SecondaryManualNetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryManualNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondaryManualNetworkConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreateNetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreateNetworkConfig) UnmarshalBinary(b []byte) error {
	var res ClusterCreateNetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
