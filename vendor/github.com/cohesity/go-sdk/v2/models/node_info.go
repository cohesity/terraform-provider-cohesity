// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NodeInfo Node Information
//
// Specifies general information of a node.
//
// swagger:model NodeInfo
type NodeInfo struct {

	// Specifies the Id of the node.
	NodeID int64 `json:"nodeId,omitempty"`

	// Specifies the Id of the cluster to which the node belongs.
	ClusterID int64 `json:"clusterId,omitempty"`

	// Specifies the cluster incarnation Id.
	IncarnationID int64 `json:"incarnationId,omitempty"`

	// List of interfaces in node.
	InterfaceList []*EndPoint `json:"interfaceList"`

	// Version of the Cohesity software running on the node.
	SoftwareVersion string `json:"softwareVersion,omitempty"`

	// Chassis serial number programmed by cohesity software.
	CohesityChassisSerial string `json:"cohesityChassisSerial,omitempty"`

	// Chassis serial number programmed by manufacturer.
	ChassisSerial string `json:"chassisSerial,omitempty"`

	// Node serial number programmed by cohesity software.
	CohesityNodeSerial string `json:"cohesityNodeSerial,omitempty"`

	// Node serial number programmed by manufacturer.
	NodeSerial string `json:"nodeSerial,omitempty"`

	// Chassis model.
	ChassisModel string `json:"chassisModel,omitempty"`

	// Node model.
	NodeModel string `json:"nodeModel,omitempty"`

	// Slot number of the node in the chassis.
	SlotNumber string `json:"slotNumber,omitempty"`

	// Host name of the node reported by the kernel.
	Hostname string `json:"hostname,omitempty"`

	// Ipmi IpAddress
	IpmiIP string `json:"ipmiIp,omitempty"`

	// Product Model
	ProductModel string `json:"productModel,omitempty"`

	// System Memory in bytes
	SystemMemoryBytes int64 `json:"systemMemoryBytes,omitempty"`

	// Number of CPUs
	CPU int32 `json:"cpu,omitempty"`

	// Specifies the version information of the cohesity services.
	ServicesVersionInfo []*ServiceVersionInfo `json:"servicesVersionInfo,omitempty"`
}

// Validate validates this node info
func (m *NodeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterfaceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicesVersionInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeInfo) validateInterfaceList(formats strfmt.Registry) error {
	if swag.IsZero(m.InterfaceList) { // not required
		return nil
	}

	for i := 0; i < len(m.InterfaceList); i++ {
		if swag.IsZero(m.InterfaceList[i]) { // not required
			continue
		}

		if m.InterfaceList[i] != nil {
			if err := m.InterfaceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeInfo) validateServicesVersionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ServicesVersionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ServicesVersionInfo); i++ {
		if swag.IsZero(m.ServicesVersionInfo[i]) { // not required
			continue
		}

		if m.ServicesVersionInfo[i] != nil {
			if err := m.ServicesVersionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servicesVersionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servicesVersionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this node info based on the context it is used
func (m *NodeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInterfaceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServicesVersionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeInfo) contextValidateInterfaceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InterfaceList); i++ {

		if m.InterfaceList[i] != nil {

			if swag.IsZero(m.InterfaceList[i]) { // not required
				return nil
			}

			if err := m.InterfaceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeInfo) contextValidateServicesVersionInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServicesVersionInfo); i++ {

		if m.ServicesVersionInfo[i] != nil {

			if swag.IsZero(m.ServicesVersionInfo[i]) { // not required
				return nil
			}

			if err := m.ServicesVersionInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servicesVersionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servicesVersionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeInfo) UnmarshalBinary(b []byte) error {
	var res NodeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
