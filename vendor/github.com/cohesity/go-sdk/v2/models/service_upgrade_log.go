// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceUpgradeLog Upgrade Logs for a Service.
//
// swagger:model ServiceUpgradeLog
type ServiceUpgradeLog struct {

	// The name of the service.
	ServiceName string `json:"serviceName,omitempty"`

	// "The upgrade status of services"
	// "(e.g., Success, InProgress, Failed, Pending)."
	//
	// Enum: ["Success","Failed","InProgress","Pending"]
	ServiceUpgradeStatus string `json:"serviceUpgradeStatus,omitempty"`

	// Messages related to the upgrade.
	Message string `json:"message,omitempty"`
}

// Validate validates this service upgrade log
func (m *ServiceUpgradeLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceUpgradeStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceUpgradeLogTypeServiceUpgradeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Failed","InProgress","Pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceUpgradeLogTypeServiceUpgradeStatusPropEnum = append(serviceUpgradeLogTypeServiceUpgradeStatusPropEnum, v)
	}
}

const (

	// ServiceUpgradeLogServiceUpgradeStatusSuccess captures enum value "Success"
	ServiceUpgradeLogServiceUpgradeStatusSuccess string = "Success"

	// ServiceUpgradeLogServiceUpgradeStatusFailed captures enum value "Failed"
	ServiceUpgradeLogServiceUpgradeStatusFailed string = "Failed"

	// ServiceUpgradeLogServiceUpgradeStatusInProgress captures enum value "InProgress"
	ServiceUpgradeLogServiceUpgradeStatusInProgress string = "InProgress"

	// ServiceUpgradeLogServiceUpgradeStatusPending captures enum value "Pending"
	ServiceUpgradeLogServiceUpgradeStatusPending string = "Pending"
)

// prop value enum
func (m *ServiceUpgradeLog) validateServiceUpgradeStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceUpgradeLogTypeServiceUpgradeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceUpgradeLog) validateServiceUpgradeStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceUpgradeStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceUpgradeStatusEnum("serviceUpgradeStatus", "body", m.ServiceUpgradeStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service upgrade log based on context it is used
func (m *ServiceUpgradeLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceUpgradeLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceUpgradeLog) UnmarshalBinary(b []byte) error {
	var res ServiceUpgradeLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
