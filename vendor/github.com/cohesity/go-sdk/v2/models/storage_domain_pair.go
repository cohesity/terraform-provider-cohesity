// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageDomainPair Specifies a Storage Domain pair.
//
// swagger:model StorageDomainPair
type StorageDomainPair struct {

	// Specifies the local Storage Domain id.
	// Required: true
	LocalStorageDomainID *int64 `json:"localStorageDomainId"`

	// Specifies the remote Storage Domain id.
	// Required: true
	RemoteStorageDomainID *int64 `json:"remoteStorageDomainId"`

	// Specifies the local Storage Domain name.
	// Read Only: true
	LocalStorageDomainName *string `json:"localStorageDomainName,omitempty"`

	// Specifies the remote Storage Domain name.
	// Read Only: true
	RemoteStorageDomainName *string `json:"remoteStorageDomainName,omitempty"`
}

// Validate validates this storage domain pair
func (m *StorageDomainPair) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalStorageDomainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteStorageDomainID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageDomainPair) validateLocalStorageDomainID(formats strfmt.Registry) error {

	if err := validate.Required("localStorageDomainId", "body", m.LocalStorageDomainID); err != nil {
		return err
	}

	return nil
}

func (m *StorageDomainPair) validateRemoteStorageDomainID(formats strfmt.Registry) error {

	if err := validate.Required("remoteStorageDomainId", "body", m.RemoteStorageDomainID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage domain pair based on the context it is used
func (m *StorageDomainPair) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocalStorageDomainName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteStorageDomainName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageDomainPair) contextValidateLocalStorageDomainName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "localStorageDomainName", "body", m.LocalStorageDomainName); err != nil {
		return err
	}

	return nil
}

func (m *StorageDomainPair) contextValidateRemoteStorageDomainName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "remoteStorageDomainName", "body", m.RemoteStorageDomainName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageDomainPair) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageDomainPair) UnmarshalBinary(b []byte) error {
	var res StorageDomainPair
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
