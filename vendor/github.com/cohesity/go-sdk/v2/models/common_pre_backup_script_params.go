// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonPreBackupScriptParams Common PreBackup Script Params
//
// Specifies the common params for PreBackup scripts.
//
// swagger:model CommonPreBackupScriptParams
type CommonPreBackupScriptParams struct {
	CommonPrePostScriptParams

	// Specifies if the script needs to continue even if there is an occurence of an error. If this flag is set to true, then Backup Run will start even if the pre backup script fails. If not specified or false, then backup run will not start when script fails.
	ContinueOnError *bool `json:"continueOnError,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CommonPreBackupScriptParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonPrePostScriptParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonPrePostScriptParams = aO0

	// AO1
	var dataAO1 struct {
		ContinueOnError *bool `json:"continueOnError,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ContinueOnError = dataAO1.ContinueOnError

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CommonPreBackupScriptParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonPrePostScriptParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ContinueOnError *bool `json:"continueOnError,omitempty"`
	}

	dataAO1.ContinueOnError = m.ContinueOnError

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this common pre backup script params
func (m *CommonPreBackupScriptParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonPrePostScriptParams
	if err := m.CommonPrePostScriptParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this common pre backup script params based on the context it is used
func (m *CommonPreBackupScriptParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonPrePostScriptParams
	if err := m.CommonPrePostScriptParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CommonPreBackupScriptParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonPreBackupScriptParams) UnmarshalBinary(b []byte) error {
	var res CommonPreBackupScriptParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
