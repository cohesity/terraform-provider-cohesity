// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TargetSchedule Schedule
//
// Specifies a schedule fregquency and schedule unit for copying Snapshots to backup targets.
//
// swagger:model TargetSchedule
type TargetSchedule struct {

	// Specifies the frequency that Snapshots should be copied to the specified target. Used in combination with multiplier. <br>'Runs' means that the Snapshot copy occurs after the number of Protection Group Runs equals the number specified in the frequency. <br>'Hours' means that the Snapshot copy occurs hourly at the frequency set in the frequency, for example if scheduleFrequency is 2, the copy occurs every 2 hours. <br>'Days' means that the Snapshot copy occurs daily at the frequency set in the frequency. <br>'Weeks' means that the Snapshot copy occurs weekly at the frequency set in the frequency. <br>'Months' means that the Snapshot copy occurs monthly at the frequency set in the Frequency. <br>'Years' means that the Snapshot copy occurs yearly at the frequency set in the scheduleFrequency.
	// Required: true
	// Enum: ["Runs","Hours","Days","Weeks","Months","Years"]
	Unit *string `json:"unit"`

	// Specifies a factor to multiply the unit by, to determine the copy schedule.
	// For example if set to 2 and the unit is hourly, then Snapshots from the first eligible Job Run for every 2 hour period is copied.
	// Minimum: 1
	Frequency *int32 `json:"frequency,omitempty"`
}

// Validate validates this target schedule
func (m *TargetSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var targetScheduleTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Runs","Hours","Days","Weeks","Months","Years"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		targetScheduleTypeUnitPropEnum = append(targetScheduleTypeUnitPropEnum, v)
	}
}

const (

	// TargetScheduleUnitRuns captures enum value "Runs"
	TargetScheduleUnitRuns string = "Runs"

	// TargetScheduleUnitHours captures enum value "Hours"
	TargetScheduleUnitHours string = "Hours"

	// TargetScheduleUnitDays captures enum value "Days"
	TargetScheduleUnitDays string = "Days"

	// TargetScheduleUnitWeeks captures enum value "Weeks"
	TargetScheduleUnitWeeks string = "Weeks"

	// TargetScheduleUnitMonths captures enum value "Months"
	TargetScheduleUnitMonths string = "Months"

	// TargetScheduleUnitYears captures enum value "Years"
	TargetScheduleUnitYears string = "Years"
)

// prop value enum
func (m *TargetSchedule) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, targetScheduleTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TargetSchedule) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", *m.Unit); err != nil {
		return err
	}

	return nil
}

func (m *TargetSchedule) validateFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	if err := validate.MinimumInt("frequency", "body", int64(*m.Frequency), 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this target schedule based on context it is used
func (m *TargetSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TargetSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetSchedule) UnmarshalBinary(b []byte) error {
	var res TargetSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
