// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HyperVSourceRegistrationParams Specifies the paramaters to register a HyperV source.
//
// swagger:model HyperVSourceRegistrationParams
type HyperVSourceRegistrationParams struct {

	// Specifies the HyperV Source type.
	// Required: true
	// Enum: ["kSCVMMServer","kStandaloneHost","kStandaloneCluster"]
	Type *string `json:"type"`

	// Specifies the parameters to register a HyperV SCVMM.
	ScvmmParams *ScvmmRegistrationParams `json:"scvmmParams,omitempty"`

	// Specifies the parameters to register a standalone HyperV host.
	StandaloneHostParams *StandaloneHostRegistrationParams `json:"standaloneHostParams,omitempty"`

	// Specifies the parameters to register a failover cluster.
	StandaloneClusterParams *StandaloneClusterRegistrationParams `json:"standaloneClusterParams,omitempty"`
}

// Validate validates this hyper v source registration params
func (m *HyperVSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScvmmParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandaloneHostParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandaloneClusterParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hyperVSourceRegistrationParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSCVMMServer","kStandaloneHost","kStandaloneCluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hyperVSourceRegistrationParamsTypeTypePropEnum = append(hyperVSourceRegistrationParamsTypeTypePropEnum, v)
	}
}

const (

	// HyperVSourceRegistrationParamsTypeKSCVMMServer captures enum value "kSCVMMServer"
	HyperVSourceRegistrationParamsTypeKSCVMMServer string = "kSCVMMServer"

	// HyperVSourceRegistrationParamsTypeKStandaloneHost captures enum value "kStandaloneHost"
	HyperVSourceRegistrationParamsTypeKStandaloneHost string = "kStandaloneHost"

	// HyperVSourceRegistrationParamsTypeKStandaloneCluster captures enum value "kStandaloneCluster"
	HyperVSourceRegistrationParamsTypeKStandaloneCluster string = "kStandaloneCluster"
)

// prop value enum
func (m *HyperVSourceRegistrationParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hyperVSourceRegistrationParamsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HyperVSourceRegistrationParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *HyperVSourceRegistrationParams) validateScvmmParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ScvmmParams) { // not required
		return nil
	}

	if m.ScvmmParams != nil {
		if err := m.ScvmmParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scvmmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scvmmParams")
			}
			return err
		}
	}

	return nil
}

func (m *HyperVSourceRegistrationParams) validateStandaloneHostParams(formats strfmt.Registry) error {
	if swag.IsZero(m.StandaloneHostParams) { // not required
		return nil
	}

	if m.StandaloneHostParams != nil {
		if err := m.StandaloneHostParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneHostParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneHostParams")
			}
			return err
		}
	}

	return nil
}

func (m *HyperVSourceRegistrationParams) validateStandaloneClusterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.StandaloneClusterParams) { // not required
		return nil
	}

	if m.StandaloneClusterParams != nil {
		if err := m.StandaloneClusterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneClusterParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hyper v source registration params based on the context it is used
func (m *HyperVSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScvmmParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandaloneHostParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandaloneClusterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperVSourceRegistrationParams) contextValidateScvmmParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ScvmmParams != nil {

		if swag.IsZero(m.ScvmmParams) { // not required
			return nil
		}

		if err := m.ScvmmParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scvmmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scvmmParams")
			}
			return err
		}
	}

	return nil
}

func (m *HyperVSourceRegistrationParams) contextValidateStandaloneHostParams(ctx context.Context, formats strfmt.Registry) error {

	if m.StandaloneHostParams != nil {

		if swag.IsZero(m.StandaloneHostParams) { // not required
			return nil
		}

		if err := m.StandaloneHostParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneHostParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneHostParams")
			}
			return err
		}
	}

	return nil
}

func (m *HyperVSourceRegistrationParams) contextValidateStandaloneClusterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.StandaloneClusterParams != nil {

		if swag.IsZero(m.StandaloneClusterParams) { // not required
			return nil
		}

		if err := m.StandaloneClusterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneClusterParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperVSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperVSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res HyperVSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
