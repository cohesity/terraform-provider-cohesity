// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosOnPremSSHConfig HeliosOnPremSSHConfig
//
// Params for a HeliosOnPremVM SSH access.
//
// swagger:model HeliosOnPremSSHConfig
type HeliosOnPremSSHConfig struct {

	// Specifies if SSH password is set for support user.
	// Read Only: true
	SSHSupportUserPasswordSet *bool `json:"sshSupportUserPasswordSet,omitempty"`

	// Specifies if SSH sudo access is set for support user.
	// Read Only: true
	SSHSupportUserSudoEnabled *bool `json:"sshSupportUserSudoEnabled,omitempty"`
}

// Validate validates this helios on prem SSH config
func (m *HeliosOnPremSSHConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this helios on prem SSH config based on the context it is used
func (m *HeliosOnPremSSHConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSSHSupportUserPasswordSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHSupportUserSudoEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosOnPremSSHConfig) contextValidateSSHSupportUserPasswordSet(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sshSupportUserPasswordSet", "body", m.SSHSupportUserPasswordSet); err != nil {
		return err
	}

	return nil
}

func (m *HeliosOnPremSSHConfig) contextValidateSSHSupportUserSudoEnabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sshSupportUserSudoEnabled", "body", m.SSHSupportUserSudoEnabled); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosOnPremSSHConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosOnPremSSHConfig) UnmarshalBinary(b []byte) error {
	var res HeliosOnPremSSHConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
