// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchPublicFolderRequestParams Search Public Folder request params.
//
// Specifies the request parameters to search for Public Folder items.
//
// swagger:model SearchPublicFolderRequestParams
type SearchPublicFolderRequestParams struct {

	// Specifies the search string to filter the items. User can specify a wildcard character '*' as a suffix to a string where all item names are matched with the prefix string.
	SearchString *string `json:"searchString,omitempty"`

	// Specifies a list of public folder item types. Only items within the given types will be returned.
	// Unique: true
	Types []string `json:"types"`

	// Filters the public folder items which have attachment.
	HasAttachment *bool `json:"hasAttachment,omitempty"`

	// Filters the public folder items which are received from specified user's email address.
	// Pattern: ^\S+@\S+.\S+$
	SenderAddress *string `json:"senderAddress,omitempty"`

	// Filters the public folder items which are sent to specified email addresses.
	RecipientAddresses []string `json:"recipientAddresses"`

	// Filters the public folder items which are sent to specified email addresses in CC.
	CcRecipientAddresses []string `json:"ccRecipientAddresses"`

	// Filters the public folder items which are sent to specified email addresses in BCC.
	BccRecipientAddresses []string `json:"bccRecipientAddresses"`

	// Specifies the start time in Unix timestamp epoch in seconds where the received time of the public folder item is more than specified value.
	ReceivedStartTimeSecs *int64 `json:"receivedStartTimeSecs,omitempty"`

	// Specifies the end time in Unix timestamp epoch in seconds where the received time of the public folder items is less than specified value.
	ReceivedEndTimeSecs *int64 `json:"receivedEndTimeSecs,omitempty"`
}

// Validate validates this search public folder request params
func (m *SearchPublicFolderRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipientAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcRecipientAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBccRecipientAddresses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var searchPublicFolderRequestParamsTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Calendar","Contact","Post","Folder","Task","Journal","Note"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchPublicFolderRequestParamsTypesItemsEnum = append(searchPublicFolderRequestParamsTypesItemsEnum, v)
	}
}

func (m *SearchPublicFolderRequestParams) validateTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchPublicFolderRequestParamsTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchPublicFolderRequestParams) validateTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.Types) { // not required
		return nil
	}

	if err := validate.UniqueItems("types", "body", m.Types); err != nil {
		return err
	}

	for i := 0; i < len(m.Types); i++ {

		// value enum
		if err := m.validateTypesItemsEnum("types"+"."+strconv.Itoa(i), "body", m.Types[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *SearchPublicFolderRequestParams) validateSenderAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.SenderAddress) { // not required
		return nil
	}

	if err := validate.Pattern("senderAddress", "body", *m.SenderAddress, `^\S+@\S+.\S+$`); err != nil {
		return err
	}

	return nil
}

func (m *SearchPublicFolderRequestParams) validateRecipientAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.RecipientAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.RecipientAddresses); i++ {

		if err := validate.Pattern("recipientAddresses"+"."+strconv.Itoa(i), "body", m.RecipientAddresses[i], `^\S+@\S+.\S+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *SearchPublicFolderRequestParams) validateCcRecipientAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.CcRecipientAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.CcRecipientAddresses); i++ {

		if err := validate.Pattern("ccRecipientAddresses"+"."+strconv.Itoa(i), "body", m.CcRecipientAddresses[i], `^\S+@\S+.\S+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *SearchPublicFolderRequestParams) validateBccRecipientAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.BccRecipientAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.BccRecipientAddresses); i++ {

		if err := validate.Pattern("bccRecipientAddresses"+"."+strconv.Itoa(i), "body", m.BccRecipientAddresses[i], `^\S+@\S+.\S+$`); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this search public folder request params based on context it is used
func (m *SearchPublicFolderRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchPublicFolderRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchPublicFolderRequestParams) UnmarshalBinary(b []byte) error {
	var res SearchPublicFolderRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
