// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FilerAuditLogConfigs Specifies the filer audit log configs.
//
// swagger:model FilerAuditLogConfigs
type FilerAuditLogConfigs struct {

	// Specifies a list of share level permissions.
	SharePermissions []*SmbPermission `json:"sharePermissions"`

	// Specifies a list of Subnets with IP addresses that have permissions to access a Cohesity View containing filer audit logs.
	SubnetWhitelist []*Subnet `json:"subnetWhitelist"`

	// Specifies whether view level client subnet whitelist overrides cluster and global setting.
	OverrideGlobalSubnetWhitelist *bool `json:"overrideGlobalSubnetWhitelist,omitempty"`

	// Specifies a list of SMB mount paths of a Cohesity View containing filer audit logs.
	// Read Only: true
	SmbMountPaths []string `json:"smbMountPaths"`

	// This field is currently deprecated. Please use NFS MountPaths which would be an array of strings.
	// Read Only: true
	NfsMountPath *string `json:"nfsMountPath,omitempty"`

	// Specifies a list of NFS mount paths of a Cohesity View containing filer audit logs.
	// Read Only: true
	NfsMountPaths []string `json:"nfsMountPaths"`
}

// Validate validates this filer audit log configs
func (m *FilerAuditLogConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSharePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilerAuditLogConfigs) validateSharePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.SharePermissions) { // not required
		return nil
	}

	for i := 0; i < len(m.SharePermissions); i++ {
		if swag.IsZero(m.SharePermissions[i]) { // not required
			continue
		}

		if m.SharePermissions[i] != nil {
			if err := m.SharePermissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sharePermissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sharePermissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FilerAuditLogConfigs) validateSubnetWhitelist(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetWhitelist) { // not required
		return nil
	}

	for i := 0; i < len(m.SubnetWhitelist); i++ {
		if swag.IsZero(m.SubnetWhitelist[i]) { // not required
			continue
		}

		if m.SubnetWhitelist[i] != nil {
			if err := m.SubnetWhitelist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnetWhitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnetWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this filer audit log configs based on the context it is used
func (m *FilerAuditLogConfigs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSharePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetWhitelist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbMountPaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsMountPath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsMountPaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilerAuditLogConfigs) contextValidateSharePermissions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SharePermissions); i++ {

		if m.SharePermissions[i] != nil {

			if swag.IsZero(m.SharePermissions[i]) { // not required
				return nil
			}

			if err := m.SharePermissions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sharePermissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sharePermissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FilerAuditLogConfigs) contextValidateSubnetWhitelist(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubnetWhitelist); i++ {

		if m.SubnetWhitelist[i] != nil {

			if swag.IsZero(m.SubnetWhitelist[i]) { // not required
				return nil
			}

			if err := m.SubnetWhitelist[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnetWhitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnetWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FilerAuditLogConfigs) contextValidateSmbMountPaths(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "smbMountPaths", "body", []string(m.SmbMountPaths)); err != nil {
		return err
	}

	return nil
}

func (m *FilerAuditLogConfigs) contextValidateNfsMountPath(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "nfsMountPath", "body", m.NfsMountPath); err != nil {
		return err
	}

	return nil
}

func (m *FilerAuditLogConfigs) contextValidateNfsMountPaths(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "nfsMountPaths", "body", []string(m.NfsMountPaths)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FilerAuditLogConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilerAuditLogConfigs) UnmarshalBinary(b []byte) error {
	var res FilerAuditLogConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
