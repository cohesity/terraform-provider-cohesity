// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosTagInfo Specifies the helios tag info for an object.
//
// swagger:model HeliosTagInfo
type HeliosTagInfo struct {

	// Specifies Uuid of tag applied to the object.
	// Required: true
	UUID *string `json:"uuid"`

	// Specifies name of tag applied to the object.
	Name *string `json:"name,omitempty"`

	// Specifies the type (ex custom, thirdparty, system) of tag applied to the object.
	// Enum: ["System","Custom","ThirdParty"]
	Type *string `json:"type,omitempty"`

	// Specifies thirdPartyName of tag applied to the object.
	ThirdPartyName *string `json:"thirdPartyName,omitempty"`

	// Specifies category of tag applied to the object.
	// Enum: ["Security"]
	Category *string `json:"category,omitempty"`

	// Specifies subCategory of tag applied to the object.
	// Enum: ["Classification","Threats","Anomalies","Dspm"]
	SubCategory *string `json:"subCategory,omitempty"`

	// Specifies the color of tag applied to the object.
	UIColor *string `json:"uiColor,omitempty"`

	// Specifies update time of tag applied to the object.
	UpdatedTimeUsecs *int64 `json:"updatedTimeUsecs,omitempty"`
}

// Validate validates this helios tag info
func (m *HeliosTagInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosTagInfo) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

var heliosTagInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["System","Custom","ThirdParty"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heliosTagInfoTypeTypePropEnum = append(heliosTagInfoTypeTypePropEnum, v)
	}
}

const (

	// HeliosTagInfoTypeSystem captures enum value "System"
	HeliosTagInfoTypeSystem string = "System"

	// HeliosTagInfoTypeCustom captures enum value "Custom"
	HeliosTagInfoTypeCustom string = "Custom"

	// HeliosTagInfoTypeThirdParty captures enum value "ThirdParty"
	HeliosTagInfoTypeThirdParty string = "ThirdParty"
)

// prop value enum
func (m *HeliosTagInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, heliosTagInfoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HeliosTagInfo) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var heliosTagInfoTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Security"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heliosTagInfoTypeCategoryPropEnum = append(heliosTagInfoTypeCategoryPropEnum, v)
	}
}

const (

	// HeliosTagInfoCategorySecurity captures enum value "Security"
	HeliosTagInfoCategorySecurity string = "Security"
)

// prop value enum
func (m *HeliosTagInfo) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, heliosTagInfoTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HeliosTagInfo) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

var heliosTagInfoTypeSubCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Classification","Threats","Anomalies","Dspm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heliosTagInfoTypeSubCategoryPropEnum = append(heliosTagInfoTypeSubCategoryPropEnum, v)
	}
}

const (

	// HeliosTagInfoSubCategoryClassification captures enum value "Classification"
	HeliosTagInfoSubCategoryClassification string = "Classification"

	// HeliosTagInfoSubCategoryThreats captures enum value "Threats"
	HeliosTagInfoSubCategoryThreats string = "Threats"

	// HeliosTagInfoSubCategoryAnomalies captures enum value "Anomalies"
	HeliosTagInfoSubCategoryAnomalies string = "Anomalies"

	// HeliosTagInfoSubCategoryDspm captures enum value "Dspm"
	HeliosTagInfoSubCategoryDspm string = "Dspm"
)

// prop value enum
func (m *HeliosTagInfo) validateSubCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, heliosTagInfoTypeSubCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HeliosTagInfo) validateSubCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.SubCategory) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubCategoryEnum("subCategory", "body", *m.SubCategory); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this helios tag info based on context it is used
func (m *HeliosTagInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HeliosTagInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosTagInfo) UnmarshalBinary(b []byte) error {
	var res HeliosTagInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
