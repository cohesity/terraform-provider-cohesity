// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchDetail Detail of a patch. It gives the service and version information of the the patch.
//
// swagger:model PatchDetail
type PatchDetail struct {

	// Specifies the name of the service.
	Service *string `json:"service,omitempty"`

	// Specifies the user friendly name of the service.
	Component *string `json:"component,omitempty"`

	// Specifies the existing version of the service. This is the available service patch version if exists. If there is no patch available, then it is the applied patch version if applied. If both don't exist, it is the base version of the service.
	Version *string `json:"version,omitempty"`

	// Specifies the version of the imported service patch.
	ImportVersion *string `json:"import_version,omitempty"`

	// Specifies the status of the patch whether it is accepted or rejected. A patch is rejected if it is older than the version available or applied on the cluster.
	Status *string `json:"status,omitempty"`
}

// Validate validates this patch detail
func (m *PatchDetail) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch detail based on context it is used
func (m *PatchDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchDetail) UnmarshalBinary(b []byte) error {
	var res PatchDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
