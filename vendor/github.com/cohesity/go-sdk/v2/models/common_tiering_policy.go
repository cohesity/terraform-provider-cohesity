// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonTieringPolicy Specifies the common tiering params between uptiering and downtiering.
//
// swagger:model CommonTieringPolicy
type CommonTieringPolicy struct {

	// Specifies whether to audit log the file tiering activity.
	EnableAuditLogging *bool `json:"enableAuditLogging,omitempty"`

	// file size
	FileSize *FileSizePolicy `json:"fileSize,omitempty"`

	// file path
	FilePath *FileFilteringPolicy `json:"filePath,omitempty"`
}

// Validate validates this common tiering policy
func (m *CommonTieringPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonTieringPolicy) validateFileSize(formats strfmt.Registry) error {
	if swag.IsZero(m.FileSize) { // not required
		return nil
	}

	if m.FileSize != nil {
		if err := m.FileSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileSize")
			}
			return err
		}
	}

	return nil
}

func (m *CommonTieringPolicy) validateFilePath(formats strfmt.Registry) error {
	if swag.IsZero(m.FilePath) { // not required
		return nil
	}

	if m.FilePath != nil {
		if err := m.FilePath.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filePath")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filePath")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common tiering policy based on the context it is used
func (m *CommonTieringPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilePath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonTieringPolicy) contextValidateFileSize(ctx context.Context, formats strfmt.Registry) error {

	if m.FileSize != nil {

		if swag.IsZero(m.FileSize) { // not required
			return nil
		}

		if err := m.FileSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileSize")
			}
			return err
		}
	}

	return nil
}

func (m *CommonTieringPolicy) contextValidateFilePath(ctx context.Context, formats strfmt.Registry) error {

	if m.FilePath != nil {

		if swag.IsZero(m.FilePath) { // not required
			return nil
		}

		if err := m.FilePath.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filePath")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filePath")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonTieringPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonTieringPolicy) UnmarshalBinary(b []byte) error {
	var res CommonTieringPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
