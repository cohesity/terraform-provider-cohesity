// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileLockStatus Specified the information about the lock status of a file.
//
// swagger:model FileLockStatus
type FileLockStatus struct {

	// Specifies the lock state of the file.
	// A lock state of a file in a view can be in one of the following:
	// Unconfigured: File does not belong to data lock enabled view.
	// Unlocked: A file created in a file lock enabled view. It will remain in
	//   this state until auto-lock timer expires or user manually locks the file.
	// Locked: A locked file has a set retention period that prevents users from
	//   modifying the file data or extending, deleting, or renaming the file.
	//   A locked file remain in this state untill retention period expires.
	// Expired: When retention period ends, the file transition from the locked
	//   state to the expired state. User can not modify or rename a file in expired
	//   state, but can delete a file.
	// Hold: Expired file is kept in hold for administrator specified retention
	//   periods and deny any mutable or remove operation on locked files until a
	//   specific date.
	// Enum: ["Unconfigured","Unlocked","Locked","Expired","Hold"]
	State *string `json:"state,omitempty"`

	// Specifies the timestamp at which the file was locked.
	LockTimestampMsecs *int64 `json:"lockTimestampMsecs,omitempty"`

	// Specifies a expiry timestamp in milliseconds until the file is locked.
	ExpiryTimestampMsecs *int64 `json:"expiryTimestampMsecs,omitempty"`

	// Specifies a override timestamp in milliseconds when an expired file is kept on hold.
	HoldTimestampMsecs *int64 `json:"holdTimestampMsecs,omitempty"`

	// Specifies the mode of the file lock.
	// A lock mode of a file in a view can be in one of the following:
	// Compliance: Default mode of datalock, in this mode,
	//   Data Security Admin cannot modify/delete this view when datalock
	//   is in effect. Data Security Admin can delete this view
	//   when datalock is expired.
	// Enterprise: In this mode, Data Security Admin can change view name or
	//   delete view when datalock is in effect. Datalock in this mode can
	//   be upgraded to 'Compliance' mode.
	// Enum: ["Compliance","Enterprise"]
	Mode *string `json:"mode,omitempty"`
}

// Validate validates this file lock status
func (m *FileLockStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fileLockStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unconfigured","Unlocked","Locked","Expired","Hold"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileLockStatusTypeStatePropEnum = append(fileLockStatusTypeStatePropEnum, v)
	}
}

const (

	// FileLockStatusStateUnconfigured captures enum value "Unconfigured"
	FileLockStatusStateUnconfigured string = "Unconfigured"

	// FileLockStatusStateUnlocked captures enum value "Unlocked"
	FileLockStatusStateUnlocked string = "Unlocked"

	// FileLockStatusStateLocked captures enum value "Locked"
	FileLockStatusStateLocked string = "Locked"

	// FileLockStatusStateExpired captures enum value "Expired"
	FileLockStatusStateExpired string = "Expired"

	// FileLockStatusStateHold captures enum value "Hold"
	FileLockStatusStateHold string = "Hold"
)

// prop value enum
func (m *FileLockStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fileLockStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FileLockStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

var fileLockStatusTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Compliance","Enterprise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileLockStatusTypeModePropEnum = append(fileLockStatusTypeModePropEnum, v)
	}
}

const (

	// FileLockStatusModeCompliance captures enum value "Compliance"
	FileLockStatusModeCompliance string = "Compliance"

	// FileLockStatusModeEnterprise captures enum value "Enterprise"
	FileLockStatusModeEnterprise string = "Enterprise"
)

// prop value enum
func (m *FileLockStatus) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fileLockStatusTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FileLockStatus) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this file lock status based on context it is used
func (m *FileLockStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FileLockStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileLockStatus) UnmarshalBinary(b []byte) error {
	var res FileLockStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
