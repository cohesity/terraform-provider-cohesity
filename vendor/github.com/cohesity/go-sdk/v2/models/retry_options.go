// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RetryOptions Retry Options of a Protection Policy when a Protection Group run fails.
//
// swagger:model RetryOptions
type RetryOptions struct {

	// Specifies the number of times to retry capturing Snapshots before
	// the Protection Group Run fails.
	// Minimum: 0
	Retries *int32 `json:"retries,omitempty"`

	// Specifies the number of minutes before retrying a failed Protection Group.
	// Minimum: 1
	RetryIntervalMins *int32 `json:"retryIntervalMins,omitempty"`
}

// Validate validates this retry options
func (m *RetryOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRetries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryIntervalMins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetryOptions) validateRetries(formats strfmt.Registry) error {
	if swag.IsZero(m.Retries) { // not required
		return nil
	}

	if err := validate.MinimumInt("retries", "body", int64(*m.Retries), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *RetryOptions) validateRetryIntervalMins(formats strfmt.Registry) error {
	if swag.IsZero(m.RetryIntervalMins) { // not required
		return nil
	}

	if err := validate.MinimumInt("retryIntervalMins", "body", int64(*m.RetryIntervalMins), 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this retry options based on context it is used
func (m *RetryOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RetryOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetryOptions) UnmarshalBinary(b []byte) error {
	var res RetryOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
