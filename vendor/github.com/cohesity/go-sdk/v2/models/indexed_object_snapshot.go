// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IndexedObjectSnapshot Specifies a snapshot containing the indexed object.
//
// swagger:model IndexedObjectSnapshot
type IndexedObjectSnapshot struct {

	// Specifies the indexed object name.
	IndexedObjectName *string `json:"indexedObjectName,omitempty"`

	// Specifies snapshot id of the object containing this indexed object.
	ObjectSnapshotid *string `json:"objectSnapshotid,omitempty"`

	// Specifies a unix timestamp when the object snapshot was taken in micro seconds.
	SnapshotTimestampUsecs *int64 `json:"snapshotTimestampUsecs,omitempty"`

	// Specifies the type of protection run created this snapshot.
	// Enum: ["kRegular","kFull","kLog","kSystem","kHydrateCDP","kStorageArraySnapshot"]
	RunType *string `json:"runType,omitempty"`

	// Specifies the protection group id which contains this snapshot.
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// Specifies the protection group name which contains this snapshot.
	ProtectionGroupName *string `json:"protectionGroupName,omitempty"`

	// Specifies the storage domain id containing this snapshot.
	StorageDomainID *int64 `json:"storageDomainId,omitempty"`

	// Specifies the number of runs have been executed before the run completed successfully.
	Attempts *int64 `json:"attempts,omitempty"`

	// Specifies the indexed object size in bytes.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`

	// Specifies the source inode number of the file being recovered.
	// Read Only: true
	InodeID *int64 `json:"inodeId,omitempty"`

	// Specifies the last time file was modified in unix timestamp.
	LastModifiedTimeUsecs *int64 `json:"lastModifiedTimeUsecs,omitempty"`

	// Specifies the unique identifier from the source of the item associated with this particular snapshot. It can get changed between the snapshots and therefore will be required for recovery.
	IndexedObjectSourceUUID *string `json:"indexedObjectSourceUuid,omitempty"`

	// Specifies the external target information if this is an archival snapshot.
	ExternalTargetInfo *ArchivalTargetSummaryInfo `json:"externalTargetInfo,omitempty"`
}

// Validate validates this indexed object snapshot
func (m *IndexedObjectSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalTargetInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var indexedObjectSnapshotTypeRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kFull","kLog","kSystem","kHydrateCDP","kStorageArraySnapshot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		indexedObjectSnapshotTypeRunTypePropEnum = append(indexedObjectSnapshotTypeRunTypePropEnum, v)
	}
}

const (

	// IndexedObjectSnapshotRunTypeKRegular captures enum value "kRegular"
	IndexedObjectSnapshotRunTypeKRegular string = "kRegular"

	// IndexedObjectSnapshotRunTypeKFull captures enum value "kFull"
	IndexedObjectSnapshotRunTypeKFull string = "kFull"

	// IndexedObjectSnapshotRunTypeKLog captures enum value "kLog"
	IndexedObjectSnapshotRunTypeKLog string = "kLog"

	// IndexedObjectSnapshotRunTypeKSystem captures enum value "kSystem"
	IndexedObjectSnapshotRunTypeKSystem string = "kSystem"

	// IndexedObjectSnapshotRunTypeKHydrateCDP captures enum value "kHydrateCDP"
	IndexedObjectSnapshotRunTypeKHydrateCDP string = "kHydrateCDP"

	// IndexedObjectSnapshotRunTypeKStorageArraySnapshot captures enum value "kStorageArraySnapshot"
	IndexedObjectSnapshotRunTypeKStorageArraySnapshot string = "kStorageArraySnapshot"
)

// prop value enum
func (m *IndexedObjectSnapshot) validateRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, indexedObjectSnapshotTypeRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IndexedObjectSnapshot) validateRunType(formats strfmt.Registry) error {
	if swag.IsZero(m.RunType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunTypeEnum("runType", "body", *m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *IndexedObjectSnapshot) validateExternalTargetInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalTargetInfo) { // not required
		return nil
	}

	if m.ExternalTargetInfo != nil {
		if err := m.ExternalTargetInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalTargetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalTargetInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this indexed object snapshot based on the context it is used
func (m *IndexedObjectSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInodeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalTargetInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndexedObjectSnapshot) contextValidateInodeID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "inodeId", "body", m.InodeID); err != nil {
		return err
	}

	return nil
}

func (m *IndexedObjectSnapshot) contextValidateExternalTargetInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalTargetInfo != nil {

		if swag.IsZero(m.ExternalTargetInfo) { // not required
			return nil
		}

		if err := m.ExternalTargetInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalTargetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalTargetInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IndexedObjectSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IndexedObjectSnapshot) UnmarshalBinary(b []byte) error {
	var res IndexedObjectSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
