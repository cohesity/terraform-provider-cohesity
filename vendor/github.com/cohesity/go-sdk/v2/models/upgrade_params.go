// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpgradeParams Parameters to upgrade the cluster software
// One of `packageUrl` or `versionName` must be specified.
//
// swagger:model UpgradeParams
type UpgradeParams struct {

	// The URL where the package can be downloaded from.
	// Applicable for operations:
	// * `DownloadUpgradePackage`
	// * `DownloadUpgradeAndPatchPackages`
	// * `DownloadAndUpgrade`
	// * `DownloadAndUpgradeWithPatch`
	//
	PackageURL *ArtifactURL `json:"packageUrl,omitempty"`

	// Version name of the package if the package is already downloaded.
	// Example: 6.3.1h_release-20210714_0fad884e.
	// Applicable for operations:
	// * `Upgrade`
	// * `UpgradeAndPatch`
	//
	VersionName string `json:"versionName,omitempty"`

	// Specifies if healthchecks failure will cause
	// upgrade to be aborted. By default we abort upgrade if there are
	// healthchecks failures .Cluster will stop the upgrade.and present the
	// failures which need to be resolved before proceeding with upgrade.
	// If set to false upgrade will not be aborted on healthchecks failure.
	//
	AbortOnPreChecksFailure *bool `json:"abortOnPreChecksFailure,omitempty"`

	// Upgrade Cohesity agents on servers of registered sources.
	//
	AutoAgentUpgrade bool `json:"autoAgentUpgrade,omitempty"`

	// If set to true, upgrade will run in parallel on all nodes.
	// Applicable for operations:
	// * `DownloadAndUpgradeWithPatch`
	// * `DownloadAndUpgrade`
	// * `Upgrade`
	// * `UpgradeAndPatch`
	//
	RunUpgradeInParallel *bool `json:"runUpgradeInParallel,omitempty"`

	// md5Sum of the upgrade package.
	// Applicable for operations:
	// * `DownloadAndUpgradeWithPatch`
	// * `DownloadAndUpgrade`
	// * `Upgrade`
	// * `UpgradeAndPatch`
	//
	Md5Sum string `json:"md5Sum,omitempty"`

	// If set to true, software incomaptibility checks are ignored.
	// Applicable for operations:
	// * `DownloadAndUpgradeWithPatch`
	// * `DownloadAndUpgrade`
	// * `Upgrade`
	// * `UpgradeAndPatch`
	//
	IgnoreSwIncompatibility *bool `json:"ignoreSwIncompatibility,omitempty"`
}

// Validate validates this upgrade params
func (m *UpgradeParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeParams) validatePackageURL(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageURL) { // not required
		return nil
	}

	if m.PackageURL != nil {
		if err := m.PackageURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageUrl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageUrl")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this upgrade params based on the context it is used
func (m *UpgradeParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackageURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeParams) contextValidatePackageURL(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageURL != nil {

		if swag.IsZero(m.PackageURL) { // not required
			return nil
		}

		if err := m.PackageURL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageUrl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageUrl")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeParams) UnmarshalBinary(b []byte) error {
	var res UpgradeParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
