// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityConfigPasswordReuse Specifies security config for password reuse.
//
// swagger:model SecurityConfigPasswordReuse
type SecurityConfigPasswordReuse struct {

	// Specifies the minimum number of old passwords that are not allowed for changing the password.
	// Minimum: 0
	NumDisallowedOldPasswords *int32 `json:"numDisallowedOldPasswords,omitempty"`

	// Specifies the number of characters in the new password that needs to be different from the old password (only applicable when changing the user's own password).
	// Minimum: 0
	NumDifferentChars *int32 `json:"numDifferentChars,omitempty"`
}

// Validate validates this security config password reuse
func (m *SecurityConfigPasswordReuse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNumDisallowedOldPasswords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumDifferentChars(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfigPasswordReuse) validateNumDisallowedOldPasswords(formats strfmt.Registry) error {
	if swag.IsZero(m.NumDisallowedOldPasswords) { // not required
		return nil
	}

	if err := validate.MinimumInt("numDisallowedOldPasswords", "body", int64(*m.NumDisallowedOldPasswords), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfigPasswordReuse) validateNumDifferentChars(formats strfmt.Registry) error {
	if swag.IsZero(m.NumDifferentChars) { // not required
		return nil
	}

	if err := validate.MinimumInt("numDifferentChars", "body", int64(*m.NumDifferentChars), 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this security config password reuse based on context it is used
func (m *SecurityConfigPasswordReuse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfigPasswordReuse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfigPasswordReuse) UnmarshalBinary(b []byte) error {
	var res SecurityConfigPasswordReuse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
