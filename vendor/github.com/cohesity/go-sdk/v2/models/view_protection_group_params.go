// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewProtectionGroupParams View Protection Group Parameters
//
// Specifies the parameters which are specific to view related Protection Groups.
//
// swagger:model ViewProtectionGroupParams
type ViewProtectionGroupParams struct {

	// Specifies the objects to be included in the Protection Group.
	// Required: true
	// Min Items: 1
	// Unique: true
	Objects []*ViewProtectionGroupObjectParams `json:"objects"`

	// Specifies the paramters for view replication.
	ReplicationParams *ViewProtectionGroupReplicationParams `json:"replicationParams,omitempty"`

	// Specifies settings for indexing files found in the View so these files can be searched and recovered. This also specifies inclusion and exclusion rules that determine the directories to index.
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`

	// Specifies the externally triggered job paramters.
	ExternallyTriggeredJobParams *ExternallyTriggeredJobParams `json:"externallyTriggeredJobParams,omitempty"`
}

// Validate validates this view protection group params
func (m *ViewProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndexingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternallyTriggeredJobParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewProtectionGroupParams) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	iObjectsSize := int64(len(m.Objects))

	if err := validate.MinItems("objects", "body", iObjectsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("objects", "body", m.Objects); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewProtectionGroupParams) validateReplicationParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationParams) { // not required
		return nil
	}

	if m.ReplicationParams != nil {
		if err := m.ReplicationParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationParams")
			}
			return err
		}
	}

	return nil
}

func (m *ViewProtectionGroupParams) validateIndexingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.IndexingPolicy) { // not required
		return nil
	}

	if m.IndexingPolicy != nil {
		if err := m.IndexingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indexingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indexingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *ViewProtectionGroupParams) validateExternallyTriggeredJobParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternallyTriggeredJobParams) { // not required
		return nil
	}

	if m.ExternallyTriggeredJobParams != nil {
		if err := m.ExternallyTriggeredJobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externallyTriggeredJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externallyTriggeredJobParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this view protection group params based on the context it is used
func (m *ViewProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIndexingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternallyTriggeredJobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewProtectionGroupParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ViewProtectionGroupParams) contextValidateReplicationParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationParams != nil {

		if swag.IsZero(m.ReplicationParams) { // not required
			return nil
		}

		if err := m.ReplicationParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationParams")
			}
			return err
		}
	}

	return nil
}

func (m *ViewProtectionGroupParams) contextValidateIndexingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.IndexingPolicy != nil {

		if swag.IsZero(m.IndexingPolicy) { // not required
			return nil
		}

		if err := m.IndexingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indexingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indexingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *ViewProtectionGroupParams) contextValidateExternallyTriggeredJobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternallyTriggeredJobParams != nil {

		if swag.IsZero(m.ExternallyTriggeredJobParams) { // not required
			return nil
		}

		if err := m.ExternallyTriggeredJobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externallyTriggeredJobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externallyTriggeredJobParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res ViewProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
