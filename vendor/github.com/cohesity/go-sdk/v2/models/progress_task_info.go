// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProgressTaskInfo Progress Task
//
// Specifies the details about a Progress Task.
//
// swagger:model ProgressTaskInfo
type ProgressTaskInfo struct {

	// Specifies the current status of the progress task.
	// Enum: ["Active","Finished","FinishedWithError","Canceled","FinishedGarbageCollected"]
	Status *string `json:"status,omitempty"`

	// Specifies the current completed percentage of the progress task.
	PercentageCompleted *float32 `json:"percentageCompleted,omitempty"`

	// Specifies the start time of the progress task in Unix epoch Timestamp(in microseconds).
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the end time of the progress task in Unix epoch Timestamp(in microseconds).
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the expected remaining time of the progress task in Unix epoch Timestamp(in microseconds).
	ExpectedRemainingTimeUsecs *int64 `json:"expectedRemainingTimeUsecs,omitempty"`

	// Specifies the event log created for progress Task.
	Events []*ProgressTaskEvent `json:"events"`

	// Specifies the stats within the progress.
	Stats *ProgressStats `json:"stats,omitempty"`
}

// Validate validates this progress task info
func (m *ProgressTaskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var progressTaskInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Finished","FinishedWithError","Canceled","FinishedGarbageCollected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		progressTaskInfoTypeStatusPropEnum = append(progressTaskInfoTypeStatusPropEnum, v)
	}
}

const (

	// ProgressTaskInfoStatusActive captures enum value "Active"
	ProgressTaskInfoStatusActive string = "Active"

	// ProgressTaskInfoStatusFinished captures enum value "Finished"
	ProgressTaskInfoStatusFinished string = "Finished"

	// ProgressTaskInfoStatusFinishedWithError captures enum value "FinishedWithError"
	ProgressTaskInfoStatusFinishedWithError string = "FinishedWithError"

	// ProgressTaskInfoStatusCanceled captures enum value "Canceled"
	ProgressTaskInfoStatusCanceled string = "Canceled"

	// ProgressTaskInfoStatusFinishedGarbageCollected captures enum value "FinishedGarbageCollected"
	ProgressTaskInfoStatusFinishedGarbageCollected string = "FinishedGarbageCollected"
)

// prop value enum
func (m *ProgressTaskInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, progressTaskInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProgressTaskInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ProgressTaskInfo) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProgressTaskInfo) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this progress task info based on the context it is used
func (m *ProgressTaskInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProgressTaskInfo) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {

			if swag.IsZero(m.Events[i]) { // not required
				return nil
			}

			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProgressTaskInfo) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProgressTaskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProgressTaskInfo) UnmarshalBinary(b []byte) error {
	var res ProgressTaskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
