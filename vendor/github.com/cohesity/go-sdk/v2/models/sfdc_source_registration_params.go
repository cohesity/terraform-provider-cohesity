// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SfdcSourceRegistrationParams Register SFDC Source request parameters.
//
// Specifies parameters to register an SFDC Protection Source.
//
// swagger:model SfdcSourceRegistrationParams
type SfdcSourceRegistrationParams struct {

	// Specifies the SFDC endpoint URL.
	// Required: true
	Endpoint *string `json:"endpoint"`

	// SFDC Endpoint type.
	// Required: true
	// Enum: ["PROD","SANDBOX","OTHER"]
	EndpointType *string `json:"endpointType"`

	// Specifies Consumer key from the connected app in SFDC.
	// Required: true
	ConsumerKey *string `json:"consumerKey"`

	// Specifies Consumer secret from the connected app in SFDC.
	// Required: true
	ConsumerSecret *string `json:"consumerSecret"`

	// Specifies the username to access salesforce.
	Username *string `json:"username,omitempty"`

	// Specifies the password to access salesforce.
	Password *string `json:"password,omitempty"`

	// Specifies the url to access salesforce soap requests.
	// Read Only: true
	SoapEndpointURL *string `json:"soapEndpointUrl,omitempty"`

	// Specifies the url to access salesforce metadata requests.
	// Read Only: true
	MetadataEndpointURL *string `json:"metadataEndpointUrl,omitempty"`

	// Specifies the maximum number of daily API requests allowed for salesforce.
	// Required: true
	// Minimum: 0
	DailyAPILimit *int64 `json:"dailyApiLimit"`

	// Specifies the maximum number of concurrent API requests allowed for salesforce.
	// Required: true
	ConcurrentAPIRequestsLimit *int64 `json:"concurrentApiRequestsLimit"`

	// Specifies the token that will be used for fetching oAuth tokens from salesforce.
	// Required: true
	AuthToken *string `json:"authToken"`

	// Specifies the URL added in the connected apps Callback URL field. You can find this URL on the connected apps Manage Connected Apps page or from the connected apps definition. This value must be URL encoded.
	CallbackURL *string `json:"callbackUrl,omitempty"`
}

// Validate validates this sfdc source registration params
func (m *SfdcSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpointType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsumerKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsumerSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailyAPILimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConcurrentAPIRequestsLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcSourceRegistrationParams) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

var sfdcSourceRegistrationParamsTypeEndpointTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROD","SANDBOX","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sfdcSourceRegistrationParamsTypeEndpointTypePropEnum = append(sfdcSourceRegistrationParamsTypeEndpointTypePropEnum, v)
	}
}

const (

	// SfdcSourceRegistrationParamsEndpointTypePROD captures enum value "PROD"
	SfdcSourceRegistrationParamsEndpointTypePROD string = "PROD"

	// SfdcSourceRegistrationParamsEndpointTypeSANDBOX captures enum value "SANDBOX"
	SfdcSourceRegistrationParamsEndpointTypeSANDBOX string = "SANDBOX"

	// SfdcSourceRegistrationParamsEndpointTypeOTHER captures enum value "OTHER"
	SfdcSourceRegistrationParamsEndpointTypeOTHER string = "OTHER"
)

// prop value enum
func (m *SfdcSourceRegistrationParams) validateEndpointTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sfdcSourceRegistrationParamsTypeEndpointTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SfdcSourceRegistrationParams) validateEndpointType(formats strfmt.Registry) error {

	if err := validate.Required("endpointType", "body", m.EndpointType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEndpointTypeEnum("endpointType", "body", *m.EndpointType); err != nil {
		return err
	}

	return nil
}

func (m *SfdcSourceRegistrationParams) validateConsumerKey(formats strfmt.Registry) error {

	if err := validate.Required("consumerKey", "body", m.ConsumerKey); err != nil {
		return err
	}

	return nil
}

func (m *SfdcSourceRegistrationParams) validateConsumerSecret(formats strfmt.Registry) error {

	if err := validate.Required("consumerSecret", "body", m.ConsumerSecret); err != nil {
		return err
	}

	return nil
}

func (m *SfdcSourceRegistrationParams) validateDailyAPILimit(formats strfmt.Registry) error {

	if err := validate.Required("dailyApiLimit", "body", m.DailyAPILimit); err != nil {
		return err
	}

	if err := validate.MinimumInt("dailyApiLimit", "body", *m.DailyAPILimit, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SfdcSourceRegistrationParams) validateConcurrentAPIRequestsLimit(formats strfmt.Registry) error {

	if err := validate.Required("concurrentApiRequestsLimit", "body", m.ConcurrentAPIRequestsLimit); err != nil {
		return err
	}

	return nil
}

func (m *SfdcSourceRegistrationParams) validateAuthToken(formats strfmt.Registry) error {

	if err := validate.Required("authToken", "body", m.AuthToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sfdc source registration params based on the context it is used
func (m *SfdcSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSoapEndpointURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadataEndpointURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcSourceRegistrationParams) contextValidateSoapEndpointURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "soapEndpointUrl", "body", m.SoapEndpointURL); err != nil {
		return err
	}

	return nil
}

func (m *SfdcSourceRegistrationParams) contextValidateMetadataEndpointURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "metadataEndpointUrl", "body", m.MetadataEndpointURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SfdcSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res SfdcSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
