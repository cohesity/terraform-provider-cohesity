// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterDocsMetadata ClusterDocsMetadata
//
// Specifies the docs related metadata specific to the cluster. This metadata mainly consists of any external hyperlinks to service provider's documentation.
//
// swagger:model ClusterDocsMetadata
type ClusterDocsMetadata struct {

	// Specifies the purpose for having external hyperlink to documentation.
	// Enum: ["APIDocs","BackupServiceConnectionDocs","HelpDocs","SupportDocs","LicenseDocs","CreateVPEGateway"]
	Purpose *string `json:"purpose,omitempty"`

	// Specifies the URL to access the endpoint for the given documentation purpose.
	URL *string `json:"url,omitempty"`
}

// Validate validates this cluster docs metadata
func (m *ClusterDocsMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePurpose(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterDocsMetadataTypePurposePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APIDocs","BackupServiceConnectionDocs","HelpDocs","SupportDocs","LicenseDocs","CreateVPEGateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterDocsMetadataTypePurposePropEnum = append(clusterDocsMetadataTypePurposePropEnum, v)
	}
}

const (

	// ClusterDocsMetadataPurposeAPIDocs captures enum value "APIDocs"
	ClusterDocsMetadataPurposeAPIDocs string = "APIDocs"

	// ClusterDocsMetadataPurposeBackupServiceConnectionDocs captures enum value "BackupServiceConnectionDocs"
	ClusterDocsMetadataPurposeBackupServiceConnectionDocs string = "BackupServiceConnectionDocs"

	// ClusterDocsMetadataPurposeHelpDocs captures enum value "HelpDocs"
	ClusterDocsMetadataPurposeHelpDocs string = "HelpDocs"

	// ClusterDocsMetadataPurposeSupportDocs captures enum value "SupportDocs"
	ClusterDocsMetadataPurposeSupportDocs string = "SupportDocs"

	// ClusterDocsMetadataPurposeLicenseDocs captures enum value "LicenseDocs"
	ClusterDocsMetadataPurposeLicenseDocs string = "LicenseDocs"

	// ClusterDocsMetadataPurposeCreateVPEGateway captures enum value "CreateVPEGateway"
	ClusterDocsMetadataPurposeCreateVPEGateway string = "CreateVPEGateway"
)

// prop value enum
func (m *ClusterDocsMetadata) validatePurposeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterDocsMetadataTypePurposePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterDocsMetadata) validatePurpose(formats strfmt.Registry) error {
	if swag.IsZero(m.Purpose) { // not required
		return nil
	}

	// value enum
	if err := m.validatePurposeEnum("purpose", "body", *m.Purpose); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster docs metadata based on context it is used
func (m *ClusterDocsMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDocsMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDocsMetadata) UnmarshalBinary(b []byte) error {
	var res ClusterDocsMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
