// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverOracleNewTargetViewConfig Recover Oracle App New View Target Config.
//
// Specifies recovery parameters when recovering to a view.
//
// swagger:model RecoverOracleNewTargetViewConfig
type RecoverOracleNewTargetViewConfig struct {
	CommonOracleAppSourceConfig

	// Specifies the directory where cohesity view for app recovery will be mounted.
	ViewMountPath *string `json:"viewMountPath,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RecoverOracleNewTargetViewConfig) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonOracleAppSourceConfig
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonOracleAppSourceConfig = aO0

	// now for regular properties
	var propsRecoverOracleNewTargetViewConfig struct {
		ViewMountPath *string `json:"viewMountPath,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsRecoverOracleNewTargetViewConfig); err != nil {
		return err
	}
	m.ViewMountPath = propsRecoverOracleNewTargetViewConfig.ViewMountPath

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RecoverOracleNewTargetViewConfig) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.CommonOracleAppSourceConfig)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRecoverOracleNewTargetViewConfig struct {
		ViewMountPath *string `json:"viewMountPath,omitempty"`
	}
	propsRecoverOracleNewTargetViewConfig.ViewMountPath = m.ViewMountPath

	jsonDataPropsRecoverOracleNewTargetViewConfig, errRecoverOracleNewTargetViewConfig := swag.WriteJSON(propsRecoverOracleNewTargetViewConfig)
	if errRecoverOracleNewTargetViewConfig != nil {
		return nil, errRecoverOracleNewTargetViewConfig
	}
	_parts = append(_parts, jsonDataPropsRecoverOracleNewTargetViewConfig)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recover oracle new target view config
func (m *RecoverOracleNewTargetViewConfig) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonOracleAppSourceConfig
	if err := m.CommonOracleAppSourceConfig.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this recover oracle new target view config based on the context it is used
func (m *RecoverOracleNewTargetViewConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonOracleAppSourceConfig
	if err := m.CommonOracleAppSourceConfig.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *RecoverOracleNewTargetViewConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverOracleNewTargetViewConfig) UnmarshalBinary(b []byte) error {
	var res RecoverOracleNewTargetViewConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
