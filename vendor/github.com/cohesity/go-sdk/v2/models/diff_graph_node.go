// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiffGraphNode Definition of graph node difference between two snapshots.
//
// swagger:model DiffGraphNode
type DiffGraphNode struct {

	// Specifies the diff type for the base node.
	// Enum: ["Unused","Added","Modified","Deleted","Unmodified"]
	DiffType *string `json:"diffType,omitempty"`

	// Specifies the information about the node from base snapshot.
	BaseGraphNode struct {
		GraphNode
	} `json:"baseGraphNode,omitempty"`

	// Specifies the information about the graph node from current snapshot. If the same node is deleted in live view, this could be empty.
	CurrentGraphNode struct {
		GraphNode
	} `json:"currentGraphNode,omitempty"`
}

// Validate validates this diff graph node
func (m *DiffGraphNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiffType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseGraphNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentGraphNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var diffGraphNodeTypeDiffTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unused","Added","Modified","Deleted","Unmodified"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diffGraphNodeTypeDiffTypePropEnum = append(diffGraphNodeTypeDiffTypePropEnum, v)
	}
}

const (

	// DiffGraphNodeDiffTypeUnused captures enum value "Unused"
	DiffGraphNodeDiffTypeUnused string = "Unused"

	// DiffGraphNodeDiffTypeAdded captures enum value "Added"
	DiffGraphNodeDiffTypeAdded string = "Added"

	// DiffGraphNodeDiffTypeModified captures enum value "Modified"
	DiffGraphNodeDiffTypeModified string = "Modified"

	// DiffGraphNodeDiffTypeDeleted captures enum value "Deleted"
	DiffGraphNodeDiffTypeDeleted string = "Deleted"

	// DiffGraphNodeDiffTypeUnmodified captures enum value "Unmodified"
	DiffGraphNodeDiffTypeUnmodified string = "Unmodified"
)

// prop value enum
func (m *DiffGraphNode) validateDiffTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, diffGraphNodeTypeDiffTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DiffGraphNode) validateDiffType(formats strfmt.Registry) error {
	if swag.IsZero(m.DiffType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDiffTypeEnum("diffType", "body", *m.DiffType); err != nil {
		return err
	}

	return nil
}

func (m *DiffGraphNode) validateBaseGraphNode(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseGraphNode) { // not required
		return nil
	}

	return nil
}

func (m *DiffGraphNode) validateCurrentGraphNode(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentGraphNode) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this diff graph node based on the context it is used
func (m *DiffGraphNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseGraphNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentGraphNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiffGraphNode) contextValidateBaseGraphNode(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DiffGraphNode) contextValidateCurrentGraphNode(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DiffGraphNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiffGraphNode) UnmarshalBinary(b []byte) error {
	var res DiffGraphNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
