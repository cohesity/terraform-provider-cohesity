// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverPureSanVolumeNewSourceConfig Recover Pure Volume New Source Config.
//
// Specifies the new destination Source configuration where the Pure volume will be recovered.
//
// swagger:model RecoverPureSanVolumeNewSourceConfig
type RecoverPureSanVolumeNewSourceConfig struct {

	// Specifies params to rename the recovered SAN volumes. If not specified, the original names of the volumes are preserved.
	RenameRecoveredVolumeParams *RecoveredOrClonedVmsRenameConfig `json:"renameRecoveredVolumeParams,omitempty"`

	// Specifies the id of the resource pool to recover the Pure SAN Volume to. This field must be specified if recoverToNewSource is true.
	ResourcePool *RecoveryObjectIdentifier `json:"resourcePool,omitempty"`

	// Specifies the id of the new target parent source to recover the Pure SAN Volume to. This field must be specified if recoverToNewSource is true.
	// Required: true
	Source *RecoveryObjectIdentifier `json:"source"`
}

// Validate validates this recover pure san volume new source config
func (m *RecoverPureSanVolumeNewSourceConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRenameRecoveredVolumeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverPureSanVolumeNewSourceConfig) validateRenameRecoveredVolumeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRecoveredVolumeParams) { // not required
		return nil
	}

	if m.RenameRecoveredVolumeParams != nil {
		if err := m.RenameRecoveredVolumeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRecoveredVolumeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRecoveredVolumeParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverPureSanVolumeNewSourceConfig) validateResourcePool(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePool) { // not required
		return nil
	}

	if m.ResourcePool != nil {
		if err := m.ResourcePool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePool")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverPureSanVolumeNewSourceConfig) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover pure san volume new source config based on the context it is used
func (m *RecoverPureSanVolumeNewSourceConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRenameRecoveredVolumeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourcePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverPureSanVolumeNewSourceConfig) contextValidateRenameRecoveredVolumeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRecoveredVolumeParams != nil {

		if swag.IsZero(m.RenameRecoveredVolumeParams) { // not required
			return nil
		}

		if err := m.RenameRecoveredVolumeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRecoveredVolumeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRecoveredVolumeParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverPureSanVolumeNewSourceConfig) contextValidateResourcePool(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourcePool != nil {

		if swag.IsZero(m.ResourcePool) { // not required
			return nil
		}

		if err := m.ResourcePool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePool")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverPureSanVolumeNewSourceConfig) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverPureSanVolumeNewSourceConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverPureSanVolumeNewSourceConfig) UnmarshalBinary(b []byte) error {
	var res RecoverPureSanVolumeNewSourceConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
