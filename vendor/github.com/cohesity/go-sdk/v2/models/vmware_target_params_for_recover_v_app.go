// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareTargetParamsForRecoverVApp VMware Target Params.
//
// Specifies the parameters for a VMware recovery target.
//
// swagger:model VmwareTargetParamsForRecoverVApp
type VmwareTargetParamsForRecoverVApp struct {

	// Specifies whether to power on vms after recovery. If not specified, or false, recovered vms will be in powered off state.
	PowerOnVms *bool `json:"powerOnVms,omitempty"`

	// Specifies whether to continue recovering other vms if one of vms failed to recover. Default value is false.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies type of Recovery Process to be used. InstantRecovery/CopyRecovery etc... Default value is InstantRecovery.
	// Enum: ["InstantRecovery","CopyRecovery"]
	RecoveryProcessType string `json:"recoveryProcessType,omitempty"`

	// Specifies whether to attempt differential restore.
	AttemptDifferentialRestore *bool `json:"attemptDifferentialRestore,omitempty"`

	// Specifies whether to enable SAN transport for copy recovery or not
	LeverageSanTransport *bool `json:"leverageSanTransport,omitempty"`

	// Specifies the Virtual Disk Provisioning Policies for Vmware VM
	// Enum: ["kThickLazyZeroed","kThickEagerZero","kThin","kBackedUpDiskType","originalBackUpDisk"]
	DiskProvisionType *string `json:"diskProvisionType,omitempty"`

	// If this field is set to true and SAN transport recovery fails, then recovery will fallback to use NBDSSL transport. This field only applies if 'leverageSanTransport' is set to true.
	EnableNBDSSLFallback *bool `json:"enableNBDSSLFallback,omitempty"`

	// Specifies the recovery target configuration if recovery has to be done to a different location which is different from original source or to original Source with different configuration. If not specified, then the recovery of the vms will be performed to original location with all configuration parameters retained.
	RecoveryTargetConfig *VmwareVAppRecoveryTargetConfig `json:"recoveryTargetConfig,omitempty"`

	// Specifies params to rename the vApps that are recovered. If not specified, the original names of the vApps are preserved.
	RenameRecoveredVAppsParams *RecoveredOrClonedVmsRenameConfig `json:"renameRecoveredVAppsParams,omitempty"`

	// Specifies params to rename the VMs that are recovered. If not specified, the original names of the VMs are preserved.
	RenameRecoveredVmsParams *RecoveredOrClonedVmsRenameConfig `json:"renameRecoveredVmsParams,omitempty"`

	// Specifies VLAN Params associated with the recovered. If this is not specified, then the VLAN settings will be automatically selected from one of the below options: a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be automatically based on the client's (e.g. ESXI host) IP address. b. If VLANs are not configured on Cohesity, then the partition hostname or VIPs will be used for Recovery.
	VlanConfig *RecoveryVlanConfig `json:"vlanConfig,omitempty"`
}

// Validate validates this vmware target params for recover v app
func (m *VmwareTargetParamsForRecoverVApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoveryProcessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskProvisionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryTargetConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRecoveredVAppsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRecoveredVmsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmwareTargetParamsForRecoverVAppTypeRecoveryProcessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InstantRecovery","CopyRecovery"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmwareTargetParamsForRecoverVAppTypeRecoveryProcessTypePropEnum = append(vmwareTargetParamsForRecoverVAppTypeRecoveryProcessTypePropEnum, v)
	}
}

const (

	// VmwareTargetParamsForRecoverVAppRecoveryProcessTypeInstantRecovery captures enum value "InstantRecovery"
	VmwareTargetParamsForRecoverVAppRecoveryProcessTypeInstantRecovery string = "InstantRecovery"

	// VmwareTargetParamsForRecoverVAppRecoveryProcessTypeCopyRecovery captures enum value "CopyRecovery"
	VmwareTargetParamsForRecoverVAppRecoveryProcessTypeCopyRecovery string = "CopyRecovery"
)

// prop value enum
func (m *VmwareTargetParamsForRecoverVApp) validateRecoveryProcessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmwareTargetParamsForRecoverVAppTypeRecoveryProcessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VmwareTargetParamsForRecoverVApp) validateRecoveryProcessType(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryProcessType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRecoveryProcessTypeEnum("recoveryProcessType", "body", m.RecoveryProcessType); err != nil {
		return err
	}

	return nil
}

var vmwareTargetParamsForRecoverVAppTypeDiskProvisionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kThickLazyZeroed","kThickEagerZero","kThin","kBackedUpDiskType","originalBackUpDisk"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmwareTargetParamsForRecoverVAppTypeDiskProvisionTypePropEnum = append(vmwareTargetParamsForRecoverVAppTypeDiskProvisionTypePropEnum, v)
	}
}

const (

	// VmwareTargetParamsForRecoverVAppDiskProvisionTypeKThickLazyZeroed captures enum value "kThickLazyZeroed"
	VmwareTargetParamsForRecoverVAppDiskProvisionTypeKThickLazyZeroed string = "kThickLazyZeroed"

	// VmwareTargetParamsForRecoverVAppDiskProvisionTypeKThickEagerZero captures enum value "kThickEagerZero"
	VmwareTargetParamsForRecoverVAppDiskProvisionTypeKThickEagerZero string = "kThickEagerZero"

	// VmwareTargetParamsForRecoverVAppDiskProvisionTypeKThin captures enum value "kThin"
	VmwareTargetParamsForRecoverVAppDiskProvisionTypeKThin string = "kThin"

	// VmwareTargetParamsForRecoverVAppDiskProvisionTypeKBackedUpDiskType captures enum value "kBackedUpDiskType"
	VmwareTargetParamsForRecoverVAppDiskProvisionTypeKBackedUpDiskType string = "kBackedUpDiskType"

	// VmwareTargetParamsForRecoverVAppDiskProvisionTypeOriginalBackUpDisk captures enum value "originalBackUpDisk"
	VmwareTargetParamsForRecoverVAppDiskProvisionTypeOriginalBackUpDisk string = "originalBackUpDisk"
)

// prop value enum
func (m *VmwareTargetParamsForRecoverVApp) validateDiskProvisionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmwareTargetParamsForRecoverVAppTypeDiskProvisionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VmwareTargetParamsForRecoverVApp) validateDiskProvisionType(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskProvisionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDiskProvisionTypeEnum("diskProvisionType", "body", *m.DiskProvisionType); err != nil {
		return err
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverVApp) validateRecoveryTargetConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryTargetConfig) { // not required
		return nil
	}

	if m.RecoveryTargetConfig != nil {
		if err := m.RecoveryTargetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveryTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveryTargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverVApp) validateRenameRecoveredVAppsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRecoveredVAppsParams) { // not required
		return nil
	}

	if m.RenameRecoveredVAppsParams != nil {
		if err := m.RenameRecoveredVAppsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRecoveredVAppsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRecoveredVAppsParams")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverVApp) validateRenameRecoveredVmsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRecoveredVmsParams) { // not required
		return nil
	}

	if m.RenameRecoveredVmsParams != nil {
		if err := m.RenameRecoveredVmsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRecoveredVmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRecoveredVmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverVApp) validateVlanConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanConfig) { // not required
		return nil
	}

	if m.VlanConfig != nil {
		if err := m.VlanConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware target params for recover v app based on the context it is used
func (m *VmwareTargetParamsForRecoverVApp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecoveryTargetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRecoveredVAppsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRecoveredVmsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareTargetParamsForRecoverVApp) contextValidateRecoveryTargetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoveryTargetConfig != nil {

		if swag.IsZero(m.RecoveryTargetConfig) { // not required
			return nil
		}

		if err := m.RecoveryTargetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveryTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveryTargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverVApp) contextValidateRenameRecoveredVAppsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRecoveredVAppsParams != nil {

		if swag.IsZero(m.RenameRecoveredVAppsParams) { // not required
			return nil
		}

		if err := m.RenameRecoveredVAppsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRecoveredVAppsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRecoveredVAppsParams")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverVApp) contextValidateRenameRecoveredVmsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRecoveredVmsParams != nil {

		if swag.IsZero(m.RenameRecoveredVmsParams) { // not required
			return nil
		}

		if err := m.RenameRecoveredVmsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRecoveredVmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRecoveredVmsParams")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverVApp) contextValidateVlanConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanConfig != nil {

		if swag.IsZero(m.VlanConfig) { // not required
			return nil
		}

		if err := m.VlanConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareTargetParamsForRecoverVApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTargetParamsForRecoverVApp) UnmarshalBinary(b []byte) error {
	var res VmwareTargetParamsForRecoverVApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
