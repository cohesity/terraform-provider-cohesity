// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoteDisk Remote disk
//
// Specifies the configuration of a remote disk.
//
// swagger:model RemoteDisk
type RemoteDisk struct {

	// Specifies the disk id.
	// Read Only: true
	ID *int64 `json:"id,omitempty"`

	// Specifies the NFS mount path of the remote disk.
	// Required: true
	MountPath *string `json:"mountPath"`

	// Specifies the node id of the disk. If not specified, the disk will be evenly distributed across all the nodes.
	NodeID *int64 `json:"nodeId,omitempty"`

	// Specifies the tier of the disk
	// Required: true
	// Enum: ["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]
	Tier *string `json:"tier"`

	// Specifies the logical capacity of the disk in bytes.
	// Read Only: true
	CapacityBytes *int64 `json:"capacityBytes,omitempty"`

	// Specifies the logical used capacity of remote disk in bytes.
	// Read Only: true
	UsedCapacityBytes *int64 `json:"usedCapacityBytes,omitempty"`

	// Specifies the status of a remote disk.
	// Read Only: true
	// Enum: ["Active","Offline","Deleting","Deleted","DataVipNotReachable","FileSystemNotAccessible","FileSystemDeleted","Mounting","Migrating","Unknown"]
	Status *string `json:"status,omitempty"`

	// Specifies the name of filesystem on remote storage.
	FileSystemName *string `json:"fileSystemName,omitempty"`

	// Specifies the data vip used to mount the filesystem.
	DataVip *string `json:"dataVip,omitempty"`

	// Specifies ip address of the node that this remote disk is mounted on.
	NodeIP *string `json:"nodeIp,omitempty"`

	// Specifies the physical used capacity of remote disk in bytes.
	// Read Only: true
	UsedCapacityBytesPhysical *int64 `json:"usedCapacityBytesPhysical,omitempty"`

	// Specifies the physical capacity of the disk in bytes.
	// Read Only: true
	CapacityBytesPhysical *int64 `json:"capacityBytesPhysical,omitempty"`
}

// Validate validates this remote disk
func (m *RemoteDisk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteDisk) validateMountPath(formats strfmt.Registry) error {

	if err := validate.Required("mountPath", "body", m.MountPath); err != nil {
		return err
	}

	return nil
}

var remoteDiskTypeTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remoteDiskTypeTierPropEnum = append(remoteDiskTypeTierPropEnum, v)
	}
}

const (

	// RemoteDiskTierPCIeSSD captures enum value "PCIeSSD"
	RemoteDiskTierPCIeSSD string = "PCIeSSD"

	// RemoteDiskTierSATADashSSD captures enum value "SATA-SSD"
	RemoteDiskTierSATADashSSD string = "SATA-SSD"

	// RemoteDiskTierSATADashHDD captures enum value "SATA-HDD"
	RemoteDiskTierSATADashHDD string = "SATA-HDD"

	// RemoteDiskTierCLOUD captures enum value "CLOUD"
	RemoteDiskTierCLOUD string = "CLOUD"
)

// prop value enum
func (m *RemoteDisk) validateTierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remoteDiskTypeTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RemoteDisk) validateTier(formats strfmt.Registry) error {

	if err := validate.Required("tier", "body", m.Tier); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierEnum("tier", "body", *m.Tier); err != nil {
		return err
	}

	return nil
}

var remoteDiskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Offline","Deleting","Deleted","DataVipNotReachable","FileSystemNotAccessible","FileSystemDeleted","Mounting","Migrating","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remoteDiskTypeStatusPropEnum = append(remoteDiskTypeStatusPropEnum, v)
	}
}

const (

	// RemoteDiskStatusActive captures enum value "Active"
	RemoteDiskStatusActive string = "Active"

	// RemoteDiskStatusOffline captures enum value "Offline"
	RemoteDiskStatusOffline string = "Offline"

	// RemoteDiskStatusDeleting captures enum value "Deleting"
	RemoteDiskStatusDeleting string = "Deleting"

	// RemoteDiskStatusDeleted captures enum value "Deleted"
	RemoteDiskStatusDeleted string = "Deleted"

	// RemoteDiskStatusDataVipNotReachable captures enum value "DataVipNotReachable"
	RemoteDiskStatusDataVipNotReachable string = "DataVipNotReachable"

	// RemoteDiskStatusFileSystemNotAccessible captures enum value "FileSystemNotAccessible"
	RemoteDiskStatusFileSystemNotAccessible string = "FileSystemNotAccessible"

	// RemoteDiskStatusFileSystemDeleted captures enum value "FileSystemDeleted"
	RemoteDiskStatusFileSystemDeleted string = "FileSystemDeleted"

	// RemoteDiskStatusMounting captures enum value "Mounting"
	RemoteDiskStatusMounting string = "Mounting"

	// RemoteDiskStatusMigrating captures enum value "Migrating"
	RemoteDiskStatusMigrating string = "Migrating"

	// RemoteDiskStatusUnknown captures enum value "Unknown"
	RemoteDiskStatusUnknown string = "Unknown"
)

// prop value enum
func (m *RemoteDisk) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remoteDiskTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RemoteDisk) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this remote disk based on the context it is used
func (m *RemoteDisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCapacityBytes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsedCapacityBytes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsedCapacityBytesPhysical(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCapacityBytesPhysical(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteDisk) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RemoteDisk) contextValidateCapacityBytes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "capacityBytes", "body", m.CapacityBytes); err != nil {
		return err
	}

	return nil
}

func (m *RemoteDisk) contextValidateUsedCapacityBytes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "usedCapacityBytes", "body", m.UsedCapacityBytes); err != nil {
		return err
	}

	return nil
}

func (m *RemoteDisk) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RemoteDisk) contextValidateUsedCapacityBytesPhysical(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "usedCapacityBytesPhysical", "body", m.UsedCapacityBytesPhysical); err != nil {
		return err
	}

	return nil
}

func (m *RemoteDisk) contextValidateCapacityBytesPhysical(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "capacityBytesPhysical", "body", m.CapacityBytesPhysical); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteDisk) UnmarshalBinary(b []byte) error {
	var res RemoteDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
