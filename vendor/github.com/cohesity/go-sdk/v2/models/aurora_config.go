// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuroraConfig Recover AWS Aurora params.
//
// Specifies the parameters to recover AWS Aurora.
//
// swagger:model AuroraConfig
type AuroraConfig struct {

	// Specifies the port to use for the DB in the restored Aurora instance.
	// Required: true
	DbPort *int32 `json:"dbPort"`

	// Specifies the DB instance identifier to use for the restored DB.
	// Required: true
	DbInstanceID *string `json:"dbInstanceId"`

	// Specifies whether this is a multi-az deployment or not.
	// Required: true
	IsMultiAzDeployment *bool `json:"isMultiAzDeployment"`

	// Specifies whether this DB will be publicly accessible or not.
	EnablePublicAccessibility *bool `json:"enablePublicAccessibility,omitempty"`

	// Specifies whether to enable IAM authentication for the DB.
	// Required: true
	EnableIamDbAuthentication *bool `json:"enableIamDbAuthentication"`

	// Specifies whether to enable copying of tags to snapshots of the DB.
	// Required: true
	EnableCopyTagsToSnapshots *bool `json:"enableCopyTagsToSnapshots"`

	// Specifies whether to enable auto minor version upgrade in the restored DB.
	// Required: true
	EnableAutoMinorVersionUpgrade *bool `json:"enableAutoMinorVersionUpgrade"`

	// Specifies a point in time for recovery in microseconds.
	PointInTimeUsecs *int64 `json:"pointInTimeUsecs,omitempty"`

	// Specifies entity representing the Aurora option group to use while restoring the DB.
	DbOptionGroup *RecoveryObjectIdentifier `json:"dbOptionGroup,omitempty"`

	// Specifies the entity representing the Aurora parameter group to use while restoring the DB.
	DbParameterGroup *RecoveryObjectIdentifier `json:"dbParameterGroup,omitempty"`
}

// Validate validates this aurora config
func (m *AuroraConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsMultiAzDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableIamDbAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableCopyTagsToSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableAutoMinorVersionUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbOptionGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbParameterGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuroraConfig) validateDbPort(formats strfmt.Registry) error {

	if err := validate.Required("dbPort", "body", m.DbPort); err != nil {
		return err
	}

	return nil
}

func (m *AuroraConfig) validateDbInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("dbInstanceId", "body", m.DbInstanceID); err != nil {
		return err
	}

	return nil
}

func (m *AuroraConfig) validateIsMultiAzDeployment(formats strfmt.Registry) error {

	if err := validate.Required("isMultiAzDeployment", "body", m.IsMultiAzDeployment); err != nil {
		return err
	}

	return nil
}

func (m *AuroraConfig) validateEnableIamDbAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("enableIamDbAuthentication", "body", m.EnableIamDbAuthentication); err != nil {
		return err
	}

	return nil
}

func (m *AuroraConfig) validateEnableCopyTagsToSnapshots(formats strfmt.Registry) error {

	if err := validate.Required("enableCopyTagsToSnapshots", "body", m.EnableCopyTagsToSnapshots); err != nil {
		return err
	}

	return nil
}

func (m *AuroraConfig) validateEnableAutoMinorVersionUpgrade(formats strfmt.Registry) error {

	if err := validate.Required("enableAutoMinorVersionUpgrade", "body", m.EnableAutoMinorVersionUpgrade); err != nil {
		return err
	}

	return nil
}

func (m *AuroraConfig) validateDbOptionGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.DbOptionGroup) { // not required
		return nil
	}

	if m.DbOptionGroup != nil {
		if err := m.DbOptionGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbOptionGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbOptionGroup")
			}
			return err
		}
	}

	return nil
}

func (m *AuroraConfig) validateDbParameterGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.DbParameterGroup) { // not required
		return nil
	}

	if m.DbParameterGroup != nil {
		if err := m.DbParameterGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbParameterGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbParameterGroup")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aurora config based on the context it is used
func (m *AuroraConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDbOptionGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDbParameterGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuroraConfig) contextValidateDbOptionGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.DbOptionGroup != nil {

		if swag.IsZero(m.DbOptionGroup) { // not required
			return nil
		}

		if err := m.DbOptionGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbOptionGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbOptionGroup")
			}
			return err
		}
	}

	return nil
}

func (m *AuroraConfig) contextValidateDbParameterGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.DbParameterGroup != nil {

		if swag.IsZero(m.DbParameterGroup) { // not required
			return nil
		}

		if err := m.DbParameterGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbParameterGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbParameterGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuroraConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuroraConfig) UnmarshalBinary(b []byte) error {
	var res AuroraConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
