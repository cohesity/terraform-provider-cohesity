// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiskIdentify Disk identify params.
//
// Specifies the parameters needed to identify disk.
//
// swagger:model DiskIdentify
type DiskIdentify struct {

	// Specifies the disk id of the disk. This parameter is incompatible with 'nodeId' and 'serialNumber'.
	DiskID *int64 `json:"diskId,omitempty"`

	// Specifies the node id of node that disk belongs to. This parameter is incompatible with 'diskId'. Must be used together with 'serialNumber'.
	NodeID *int64 `json:"nodeId,omitempty"`

	// Specifies serial number of disk. This parameter is incompatible with 'diskId'. Must be used together with 'nodeId'.
	SerialNumber *string `json:"serialNumber,omitempty"`

	// Turn on/off led light if it is set to true/false
	// Required: true
	Identify *bool `json:"identify"`
}

// Validate validates this disk identify
func (m *DiskIdentify) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentify(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskIdentify) validateIdentify(formats strfmt.Registry) error {

	if err := validate.Required("identify", "body", m.Identify); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this disk identify based on context it is used
func (m *DiskIdentify) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DiskIdentify) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskIdentify) UnmarshalBinary(b []byte) error {
	var res DiskIdentify
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
