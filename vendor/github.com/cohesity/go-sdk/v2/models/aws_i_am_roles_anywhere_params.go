// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsIAmRolesAnywhereParams AWS IAmRolesAnywhere params.
//
// Specifies the parameters which are specific to IAmRolesAnywhere Authentication Method for AWS External Target.
//
// swagger:model AwsIAmRolesAnywhereParams
type AwsIAmRolesAnywhereParams struct {

	// The certificate the customer obtains from the CA.
	// Required: true
	Certificate *string `json:"certificate"`

	// The encrypted private key generated by the CA. Using the CA private key, we can sign client certificates on customers behalf and use them to gain access to customer's AWS account.
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// Trust anchor to use for authentication. A trust anchor is a reference to either AWS Private CA or an external CA.
	// Required: true
	TrustAnchor *string `json:"trustAnchor"`

	// A profile defined with IAM policies, to specify what operations are allowed with the temporary credentials.
	// Required: true
	Profile *string `json:"profile"`

	// IAM role which trusts the IAM Roles Anywhere service principal.
	// Required: true
	Role *string `json:"role"`
}

// Validate validates this aws i am roles anywhere params
func (m *AwsIAmRolesAnywhereParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustAnchor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsIAmRolesAnywhereParams) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	return nil
}

func (m *AwsIAmRolesAnywhereParams) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *AwsIAmRolesAnywhereParams) validateTrustAnchor(formats strfmt.Registry) error {

	if err := validate.Required("trustAnchor", "body", m.TrustAnchor); err != nil {
		return err
	}

	return nil
}

func (m *AwsIAmRolesAnywhereParams) validateProfile(formats strfmt.Registry) error {

	if err := validate.Required("profile", "body", m.Profile); err != nil {
		return err
	}

	return nil
}

func (m *AwsIAmRolesAnywhereParams) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aws i am roles anywhere params based on context it is used
func (m *AwsIAmRolesAnywhereParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AwsIAmRolesAnywhereParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsIAmRolesAnywhereParams) UnmarshalBinary(b []byte) error {
	var res AwsIAmRolesAnywhereParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
