// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MongoDBOpsManagerProtectionGroupParams Specifies parameters related to the Mongodb Physical Protection job.
//
// swagger:model MongoDBOpsManagerProtectionGroupParams
type MongoDBOpsManagerProtectionGroupParams struct {

	// Specifies the list of objects to be protected.
	// Min Items: 1
	Objects []*MongoDBOpsManagerProtectionGroupObjectParams `json:"objects"`

	// Specifies the objects to be excluded in the Protection Group.
	// Unique: true
	ExcludeObjectIds []int64 `json:"excludeObjectIds"`

	// Specifies the flag to convert incremental backup to full backup on node failure.
	ConvertToFullOnFailure *bool `json:"convertToFullOnFailure,omitempty"`

	// Specifies the preferred node for backup.
	// Enum: ["PrimaryPreferred","SecondaryPreferred","SecondaryOnly"]
	PreferredNode *string `json:"preferredNode,omitempty"`
}

// Validate validates this mongo d b ops manager protection group params
func (m *MongoDBOpsManagerProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeObjectIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MongoDBOpsManagerProtectionGroupParams) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	iObjectsSize := int64(len(m.Objects))

	if err := validate.MinItems("objects", "body", iObjectsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MongoDBOpsManagerProtectionGroupParams) validateExcludeObjectIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeObjectIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludeObjectIds", "body", m.ExcludeObjectIds); err != nil {
		return err
	}

	return nil
}

var mongoDBOpsManagerProtectionGroupParamsTypePreferredNodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PrimaryPreferred","SecondaryPreferred","SecondaryOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mongoDBOpsManagerProtectionGroupParamsTypePreferredNodePropEnum = append(mongoDBOpsManagerProtectionGroupParamsTypePreferredNodePropEnum, v)
	}
}

const (

	// MongoDBOpsManagerProtectionGroupParamsPreferredNodePrimaryPreferred captures enum value "PrimaryPreferred"
	MongoDBOpsManagerProtectionGroupParamsPreferredNodePrimaryPreferred string = "PrimaryPreferred"

	// MongoDBOpsManagerProtectionGroupParamsPreferredNodeSecondaryPreferred captures enum value "SecondaryPreferred"
	MongoDBOpsManagerProtectionGroupParamsPreferredNodeSecondaryPreferred string = "SecondaryPreferred"

	// MongoDBOpsManagerProtectionGroupParamsPreferredNodeSecondaryOnly captures enum value "SecondaryOnly"
	MongoDBOpsManagerProtectionGroupParamsPreferredNodeSecondaryOnly string = "SecondaryOnly"
)

// prop value enum
func (m *MongoDBOpsManagerProtectionGroupParams) validatePreferredNodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mongoDBOpsManagerProtectionGroupParamsTypePreferredNodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MongoDBOpsManagerProtectionGroupParams) validatePreferredNode(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredNode) { // not required
		return nil
	}

	// value enum
	if err := m.validatePreferredNodeEnum("preferredNode", "body", *m.PreferredNode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this mongo d b ops manager protection group params based on the context it is used
func (m *MongoDBOpsManagerProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MongoDBOpsManagerProtectionGroupParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MongoDBOpsManagerProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MongoDBOpsManagerProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res MongoDBOpsManagerProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
