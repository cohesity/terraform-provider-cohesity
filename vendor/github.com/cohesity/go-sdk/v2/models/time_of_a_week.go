// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeOfAWeek Specifies a time period by specifying a single daily time period and one or more days of the week, for example 9 AM - 5 PM on Monday, Wednesday or Friday. If different time periods are required on different days, then multiple instances of this Weekly Time Period must be specified.
//
// swagger:model TimeOfAWeek
type TimeOfAWeek struct {

	// Array of Week Days. Specifies a list of days of a week (such as 'Sunday') when the time period should be applied. If not set, the time range applies to all days of the week. Specifies a day in a week such as 'Sunday', 'Monday', etc.
	Days []string `json:"days"`

	// Specifies the start time for the daily time period.
	StartTime *TimeOfDay `json:"startTime,omitempty"`

	// Specifies the end time for the daily time period.
	EndTime *TimeOfDay `json:"endTime,omitempty"`

	// All Day. Specifies that bandwidth limit is applied for entire day.
	IsAllDay *bool `json:"isAllDay,omitempty"`
}

// Validate validates this time of a week
func (m *TimeOfAWeek) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var timeOfAWeekDaysItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeOfAWeekDaysItemsEnum = append(timeOfAWeekDaysItemsEnum, v)
	}
}

func (m *TimeOfAWeek) validateDaysItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeOfAWeekDaysItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeOfAWeek) validateDays(formats strfmt.Registry) error {
	if swag.IsZero(m.Days) { // not required
		return nil
	}

	for i := 0; i < len(m.Days); i++ {

		// value enum
		if err := m.validateDaysItemsEnum("days"+"."+strconv.Itoa(i), "body", m.Days[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *TimeOfAWeek) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if m.StartTime != nil {
		if err := m.StartTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

func (m *TimeOfAWeek) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if m.EndTime != nil {
		if err := m.EndTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endTime")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this time of a week based on the context it is used
func (m *TimeOfAWeek) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeOfAWeek) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if m.StartTime != nil {

		if swag.IsZero(m.StartTime) { // not required
			return nil
		}

		if err := m.StartTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

func (m *TimeOfAWeek) contextValidateEndTime(ctx context.Context, formats strfmt.Registry) error {

	if m.EndTime != nil {

		if swag.IsZero(m.EndTime) { // not required
			return nil
		}

		if err := m.EndTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeOfAWeek) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeOfAWeek) UnmarshalBinary(b []byte) error {
	var res TimeOfAWeek
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
