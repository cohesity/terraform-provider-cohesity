// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityConfigPasswordStrength Specifies security config for password strength.
//
// swagger:model SecurityConfigPasswordStrength
type SecurityConfigPasswordStrength struct {

	// Specifies the password minimum length.
	// Minimum: 0
	MinLength *int32 `json:"minLength,omitempty"`

	// Specifies if the password needs to have at least one uppercase letter.
	IncludeUpperLetter *bool `json:"includeUpperLetter,omitempty"`

	// Specifies if the password needs to have at least one lowercase letter.
	IncludeLowerLetter *bool `json:"includeLowerLetter,omitempty"`

	// Specifies if the password needs to have at least one number.
	IncludeNumber *bool `json:"includeNumber,omitempty"`

	// Specifies if the password needs to have at least one special character.
	IncludeSpecialChar *bool `json:"includeSpecialChar,omitempty"`
}

// Validate validates this security config password strength
func (m *SecurityConfigPasswordStrength) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMinLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfigPasswordStrength) validateMinLength(formats strfmt.Registry) error {
	if swag.IsZero(m.MinLength) { // not required
		return nil
	}

	if err := validate.MinimumInt("minLength", "body", int64(*m.MinLength), 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this security config password strength based on context it is used
func (m *SecurityConfigPasswordStrength) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfigPasswordStrength) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfigPasswordStrength) UnmarshalBinary(b []byte) error {
	var res SecurityConfigPasswordStrength
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
