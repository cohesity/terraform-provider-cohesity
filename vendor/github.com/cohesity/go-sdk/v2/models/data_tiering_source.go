// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataTieringSource Specifies the source data tiering details.
//
// swagger:model DataTieringSource
type DataTieringSource struct {

	// Specifies the environment type of the data tiering source.
	// Enum: ["kGenericNas","kIsilon","kNetapp"]
	Environment *string `json:"environment,omitempty"`

	// Specifies the parameters which are specific to data tiering generic
	// NAS source.
	GenericNasParams *GenericNasDataTieringParams `json:"genericNasParams,omitempty"`

	// Specifies the parameters which are specific to data tiering Isilon
	// NAS source.
	IsilonParams *IsilonDataTieringParams `json:"isilonParams,omitempty"`

	// Specifies the parameters which are specific to data tiering Netapp
	// NAS source.
	NetappParams *NetappDataTieringParams `json:"netappParams,omitempty"`
}

// Validate validates this data tiering source
func (m *DataTieringSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericNasParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataTieringSourceTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kGenericNas","kIsilon","kNetapp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataTieringSourceTypeEnvironmentPropEnum = append(dataTieringSourceTypeEnvironmentPropEnum, v)
	}
}

const (

	// DataTieringSourceEnvironmentKGenericNas captures enum value "kGenericNas"
	DataTieringSourceEnvironmentKGenericNas string = "kGenericNas"

	// DataTieringSourceEnvironmentKIsilon captures enum value "kIsilon"
	DataTieringSourceEnvironmentKIsilon string = "kIsilon"

	// DataTieringSourceEnvironmentKNetapp captures enum value "kNetapp"
	DataTieringSourceEnvironmentKNetapp string = "kNetapp"
)

// prop value enum
func (m *DataTieringSource) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataTieringSourceTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataTieringSource) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *DataTieringSource) validateGenericNasParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GenericNasParams) { // not required
		return nil
	}

	if m.GenericNasParams != nil {
		if err := m.GenericNasParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *DataTieringSource) validateIsilonParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *DataTieringSource) validateNetappParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NetappParams) { // not required
		return nil
	}

	if m.NetappParams != nil {
		if err := m.NetappParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data tiering source based on the context it is used
func (m *DataTieringSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGenericNasParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringSource) contextValidateGenericNasParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericNasParams != nil {

		if swag.IsZero(m.GenericNasParams) { // not required
			return nil
		}

		if err := m.GenericNasParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *DataTieringSource) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *DataTieringSource) contextValidateNetappParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NetappParams != nil {

		if swag.IsZero(m.NetappParams) { // not required
			return nil
		}

		if err := m.NetappParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTieringSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTieringSource) UnmarshalBinary(b []byte) error {
	var res DataTieringSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
