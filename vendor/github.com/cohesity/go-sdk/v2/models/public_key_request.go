// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicKeyRequest Specifies the parameters required to retrieve SSH public key
//
// swagger:model PublicKeyRequest
type PublicKeyRequest struct {

	// Specifies the workflow initiating the SSH connection.
	// Required: true
	// Enum: ["DataProtection"]
	WorkflowType *string `json:"workflowType"`
}

// Validate validates this public key request
func (m *PublicKeyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkflowType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var publicKeyRequestTypeWorkflowTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DataProtection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicKeyRequestTypeWorkflowTypePropEnum = append(publicKeyRequestTypeWorkflowTypePropEnum, v)
	}
}

const (

	// PublicKeyRequestWorkflowTypeDataProtection captures enum value "DataProtection"
	PublicKeyRequestWorkflowTypeDataProtection string = "DataProtection"
)

// prop value enum
func (m *PublicKeyRequest) validateWorkflowTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicKeyRequestTypeWorkflowTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicKeyRequest) validateWorkflowType(formats strfmt.Registry) error {

	if err := validate.Required("workflowType", "body", m.WorkflowType); err != nil {
		return err
	}

	// value enum
	if err := m.validateWorkflowTypeEnum("workflowType", "body", *m.WorkflowType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this public key request based on context it is used
func (m *PublicKeyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublicKeyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicKeyRequest) UnmarshalBinary(b []byte) error {
	var res PublicKeyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
