// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataTieringAnalysisInfo Specifies the data tiering analysis details.
//
// swagger:model DataTieringAnalysisInfo
type DataTieringAnalysisInfo struct {

	// Array of Tag objects.
	TagsInfo []*DataTieringTagObject `json:"tagsInfo"`

	// progress
	Progress *ProgressSummary `json:"progress,omitempty"`

	// Status of the analysis run.
	// 'Running' indicates that the run is still running.
	// 'Canceled' indicates that the run has been canceled.
	// 'Canceling' indicates that the run is in the process of being
	//  canceled.
	// 'Failed' indicates that the run has failed.
	// 'Missed' indicates that the run was unable to take place at the
	//  scheduled time because the previous run was still happening.
	// 'Succeeded' indicates that the run has finished successfully.
	// 'SucceededWithWarning' indicates that the run finished
	//  successfully, but there were some warning messages.
	// 'OnHold' indicates that the run has On hold.
	// 'Skipped' indicates that the run was skipped.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]
	Status *string `json:"status,omitempty"`

	// message from the last analysis run stating the error message in case of error in analysis run or warning message if the run finished successfully, but there were some warning messages.
	Message *string `json:"message,omitempty"`
}

// Validate validates this data tiering analysis info
func (m *DataTieringAnalysisInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTagsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringAnalysisInfo) validateTagsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TagsInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.TagsInfo); i++ {
		if swag.IsZero(m.TagsInfo[i]) { // not required
			continue
		}

		if m.TagsInfo[i] != nil {
			if err := m.TagsInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataTieringAnalysisInfo) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if m.Progress != nil {
		if err := m.Progress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

var dataTieringAnalysisInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataTieringAnalysisInfoTypeStatusPropEnum = append(dataTieringAnalysisInfoTypeStatusPropEnum, v)
	}
}

const (

	// DataTieringAnalysisInfoStatusAccepted captures enum value "Accepted"
	DataTieringAnalysisInfoStatusAccepted string = "Accepted"

	// DataTieringAnalysisInfoStatusRunning captures enum value "Running"
	DataTieringAnalysisInfoStatusRunning string = "Running"

	// DataTieringAnalysisInfoStatusCanceled captures enum value "Canceled"
	DataTieringAnalysisInfoStatusCanceled string = "Canceled"

	// DataTieringAnalysisInfoStatusCanceling captures enum value "Canceling"
	DataTieringAnalysisInfoStatusCanceling string = "Canceling"

	// DataTieringAnalysisInfoStatusFailed captures enum value "Failed"
	DataTieringAnalysisInfoStatusFailed string = "Failed"

	// DataTieringAnalysisInfoStatusMissed captures enum value "Missed"
	DataTieringAnalysisInfoStatusMissed string = "Missed"

	// DataTieringAnalysisInfoStatusSucceeded captures enum value "Succeeded"
	DataTieringAnalysisInfoStatusSucceeded string = "Succeeded"

	// DataTieringAnalysisInfoStatusSucceededWithWarning captures enum value "SucceededWithWarning"
	DataTieringAnalysisInfoStatusSucceededWithWarning string = "SucceededWithWarning"

	// DataTieringAnalysisInfoStatusOnHold captures enum value "OnHold"
	DataTieringAnalysisInfoStatusOnHold string = "OnHold"

	// DataTieringAnalysisInfoStatusFinalizing captures enum value "Finalizing"
	DataTieringAnalysisInfoStatusFinalizing string = "Finalizing"

	// DataTieringAnalysisInfoStatusSkipped captures enum value "Skipped"
	DataTieringAnalysisInfoStatusSkipped string = "Skipped"

	// DataTieringAnalysisInfoStatusLegalHold captures enum value "LegalHold"
	DataTieringAnalysisInfoStatusLegalHold string = "LegalHold"
)

// prop value enum
func (m *DataTieringAnalysisInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataTieringAnalysisInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataTieringAnalysisInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data tiering analysis info based on the context it is used
func (m *DataTieringAnalysisInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTagsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringAnalysisInfo) contextValidateTagsInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagsInfo); i++ {

		if m.TagsInfo[i] != nil {

			if swag.IsZero(m.TagsInfo[i]) { // not required
				return nil
			}

			if err := m.TagsInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataTieringAnalysisInfo) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	if m.Progress != nil {

		if swag.IsZero(m.Progress) { // not required
			return nil
		}

		if err := m.Progress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTieringAnalysisInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTieringAnalysisInfo) UnmarshalBinary(b []byte) error {
	var res DataTieringAnalysisInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
