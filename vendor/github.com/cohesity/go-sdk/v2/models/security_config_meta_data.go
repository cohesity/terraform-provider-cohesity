// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityConfigMetaData Specifies the meta data related to security config.
//
// swagger:model SecurityConfigMetaData
type SecurityConfigMetaData struct {

	// Specifies whether session management is enabled.  When true,
	// sessionConfiguration from SecurityConfig will be used for
	// for managing user sessions.
	// Read Only: true
	SessionManagementEnabled *bool `json:"sessionManagementEnabled,omitempty"`
}

// Validate validates this security config meta data
func (m *SecurityConfigMetaData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this security config meta data based on the context it is used
func (m *SecurityConfigMetaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSessionManagementEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfigMetaData) contextValidateSessionManagementEnabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sessionManagementEnabled", "body", m.SessionManagementEnabled); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfigMetaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfigMetaData) UnmarshalBinary(b []byte) error {
	var res SecurityConfigMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
