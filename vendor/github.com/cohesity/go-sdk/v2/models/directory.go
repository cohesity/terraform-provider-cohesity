// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Directory Directory is the struct to represent a file or a folder on a VM.
//
// swagger:model Directory
type Directory struct {

	// Specifies the file type.
	// Enum: ["File","Directory","Symlink"]
	Type *string `json:"type,omitempty"`

	// Name is the name of the file or folder. For /test/file.txt, name will be file.txt.
	Name *string `json:"name,omitempty"`

	// Path of the file/directory.
	FullPath *string `json:"fullPath,omitempty"`

	// Stat information for the file.
	FileStatInfo *FileStatInfo `json:"fileStatInfo,omitempty"`

	// ItemId is the id of the file/directory. Currently only used in case of OneDrive files/directories.
	ItemID *string `json:"itemId,omitempty"`
}

// Validate validates this directory
func (m *Directory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileStatInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var directoryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["File","Directory","Symlink"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		directoryTypeTypePropEnum = append(directoryTypeTypePropEnum, v)
	}
}

const (

	// DirectoryTypeFile captures enum value "File"
	DirectoryTypeFile string = "File"

	// DirectoryTypeDirectory captures enum value "Directory"
	DirectoryTypeDirectory string = "Directory"

	// DirectoryTypeSymlink captures enum value "Symlink"
	DirectoryTypeSymlink string = "Symlink"
)

// prop value enum
func (m *Directory) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, directoryTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Directory) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Directory) validateFileStatInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FileStatInfo) { // not required
		return nil
	}

	if m.FileStatInfo != nil {
		if err := m.FileStatInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileStatInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileStatInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this directory based on the context it is used
func (m *Directory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileStatInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Directory) contextValidateFileStatInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FileStatInfo != nil {

		if swag.IsZero(m.FileStatInfo) { // not required
			return nil
		}

		if err := m.FileStatInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileStatInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileStatInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Directory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Directory) UnmarshalBinary(b []byte) error {
	var res Directory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
