// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ActiveSessionsCountParams Specifies the number of sessions.
//
// swagger:model ActiveSessionsCountParams
type ActiveSessionsCountParams struct {

	// Specifies the aggregated sessions count for the user sessions returned. If sids are not given this returns the total system wide sessions count and if the sids are given, this returns the total sessions count for the given sids.
	TotalSessionsCount int64 `json:"totalSessionsCount,omitempty"`

	// Specifies the sessions count per user.
	SessionsPerUser []*UserSessionsCount `json:"sessionsPerUser,omitempty"`
}

// Validate validates this active sessions count params
func (m *ActiveSessionsCountParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSessionsPerUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActiveSessionsCountParams) validateSessionsPerUser(formats strfmt.Registry) error {
	if swag.IsZero(m.SessionsPerUser) { // not required
		return nil
	}

	for i := 0; i < len(m.SessionsPerUser); i++ {
		if swag.IsZero(m.SessionsPerUser[i]) { // not required
			continue
		}

		if m.SessionsPerUser[i] != nil {
			if err := m.SessionsPerUser[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sessionsPerUser" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sessionsPerUser" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this active sessions count params based on the context it is used
func (m *ActiveSessionsCountParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSessionsPerUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActiveSessionsCountParams) contextValidateSessionsPerUser(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SessionsPerUser); i++ {

		if m.SessionsPerUser[i] != nil {

			if swag.IsZero(m.SessionsPerUser[i]) { // not required
				return nil
			}

			if err := m.SessionsPerUser[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sessionsPerUser" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sessionsPerUser" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActiveSessionsCountParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActiveSessionsCountParams) UnmarshalBinary(b []byte) error {
	var res ActiveSessionsCountParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
