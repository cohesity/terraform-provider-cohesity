// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverSQLAppParams Recover Sql DB params.
//
// Specifies the parameters to recover Sql databases.
//
// swagger:model RecoverSqlAppParams
type RecoverSQLAppParams struct {
	CommonRecoverObjectSnapshotParams

	MssqlObjectEntityParams

	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	// Required: true
	// Enum: ["kSQL"]
	TargetEnvironment *string `json:"targetEnvironment"`

	// Specifies the params for recovering to a sql host. Provided sql backup should be recovered to same type of target host. For Example: If you have sql backup taken from a physical host then that should be recovered to physical host only.
	SQLTargetParams *SQLTargetParamsForRecoverSQLApp `json:"sqlTargetParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RecoverSQLAppParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonRecoverObjectSnapshotParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonRecoverObjectSnapshotParams = aO0

	// AO1
	var aO1 MssqlObjectEntityParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.MssqlObjectEntityParams = aO1

	// AO2
	var dataAO2 struct {
		TargetEnvironment *string `json:"targetEnvironment"`

		SQLTargetParams *SQLTargetParamsForRecoverSQLApp `json:"sqlTargetParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.TargetEnvironment = dataAO2.TargetEnvironment

	m.SQLTargetParams = dataAO2.SQLTargetParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RecoverSQLAppParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.CommonRecoverObjectSnapshotParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.MssqlObjectEntityParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		TargetEnvironment *string `json:"targetEnvironment"`

		SQLTargetParams *SQLTargetParamsForRecoverSQLApp `json:"sqlTargetParams,omitempty"`
	}

	dataAO2.TargetEnvironment = m.TargetEnvironment

	dataAO2.SQLTargetParams = m.SQLTargetParams

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recover Sql app params
func (m *RecoverSQLAppParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonRecoverObjectSnapshotParams
	if err := m.CommonRecoverObjectSnapshotParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with MssqlObjectEntityParams
	if err := m.MssqlObjectEntityParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recoverSqlAppParamsTypeTargetEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSQL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverSqlAppParamsTypeTargetEnvironmentPropEnum = append(recoverSqlAppParamsTypeTargetEnvironmentPropEnum, v)
	}
}

// property enum
func (m *RecoverSQLAppParams) validateTargetEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverSqlAppParamsTypeTargetEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverSQLAppParams) validateTargetEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("targetEnvironment", "body", m.TargetEnvironment); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetEnvironmentEnum("targetEnvironment", "body", *m.TargetEnvironment); err != nil {
		return err
	}

	return nil
}

func (m *RecoverSQLAppParams) validateSQLTargetParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SQLTargetParams) { // not required
		return nil
	}

	if m.SQLTargetParams != nil {
		if err := m.SQLTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlTargetParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover Sql app params based on the context it is used
func (m *RecoverSQLAppParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonRecoverObjectSnapshotParams
	if err := m.CommonRecoverObjectSnapshotParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with MssqlObjectEntityParams
	if err := m.MssqlObjectEntityParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverSQLAppParams) contextValidateSQLTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLTargetParams != nil {

		if swag.IsZero(m.SQLTargetParams) { // not required
			return nil
		}

		if err := m.SQLTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlTargetParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverSQLAppParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverSQLAppParams) UnmarshalBinary(b []byte) error {
	var res RecoverSQLAppParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
