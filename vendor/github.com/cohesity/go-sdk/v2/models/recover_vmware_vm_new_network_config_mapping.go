// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverVmwareVMNewNetworkConfigMapping NIC to network mapping for the VMware VMs.
//
// Specifies source VMs NIC to target network mapping for the VMware VMs being recovered.
//
// swagger:model RecoverVmwareVmNewNetworkConfigMapping
type RecoverVmwareVMNewNetworkConfigMapping struct {

	// Name of the VM's network adapter name.
	NetworkAdapterName *string `json:"networkAdapterName,omitempty"`

	// Specifies whether the attached network should be left in disabled state for this mapping. Default is false.
	DisableNetwork *bool `json:"disableNetwork,omitempty"`

	// Specifies whether to preserve the MAC address of the source network entity while attaching to the new target network. Default is false.
	PreserveMacAddress *bool `json:"preserveMacAddress,omitempty"`

	// Specifies the VDC organization network that will be attached to the recovered VM for the given network adapter and source network entity.
	OrgVdcNetwork *OrgVDCNetwork `json:"orgVdcNetwork,omitempty"`

	// Specifies the source VM's network port group (i.e, either a standard switch port group or a distributed port group or an opaque network) which is associated with specified network adapter name for which mapping is selected.
	SourceNetworkEntity *RecoveryObjectIdentifier `json:"sourceNetworkEntity,omitempty"`

	// Specifies the network port group (i.e, either a standard switch port group or a distributed port group or an opaque network) that will attached as backing device on the recovered object for the given network adapter name and source network entity.
	TargetNetworkEntity *RecoveryObjectIdentifier `json:"targetNetworkEntity,omitempty"`
}

// Validate validates this recover vmware Vm new network config mapping
func (m *RecoverVmwareVMNewNetworkConfigMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrgVdcNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceNetworkEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetNetworkEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVmwareVMNewNetworkConfigMapping) validateOrgVdcNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.OrgVdcNetwork) { // not required
		return nil
	}

	if m.OrgVdcNetwork != nil {
		if err := m.OrgVdcNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orgVdcNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orgVdcNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareVMNewNetworkConfigMapping) validateSourceNetworkEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceNetworkEntity) { // not required
		return nil
	}

	if m.SourceNetworkEntity != nil {
		if err := m.SourceNetworkEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceNetworkEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceNetworkEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareVMNewNetworkConfigMapping) validateTargetNetworkEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetNetworkEntity) { // not required
		return nil
	}

	if m.TargetNetworkEntity != nil {
		if err := m.TargetNetworkEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetNetworkEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetNetworkEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover vmware Vm new network config mapping based on the context it is used
func (m *RecoverVmwareVMNewNetworkConfigMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrgVdcNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceNetworkEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetNetworkEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVmwareVMNewNetworkConfigMapping) contextValidateOrgVdcNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.OrgVdcNetwork != nil {

		if swag.IsZero(m.OrgVdcNetwork) { // not required
			return nil
		}

		if err := m.OrgVdcNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orgVdcNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orgVdcNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareVMNewNetworkConfigMapping) contextValidateSourceNetworkEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceNetworkEntity != nil {

		if swag.IsZero(m.SourceNetworkEntity) { // not required
			return nil
		}

		if err := m.SourceNetworkEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceNetworkEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceNetworkEntity")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverVmwareVMNewNetworkConfigMapping) contextValidateTargetNetworkEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetNetworkEntity != nil {

		if swag.IsZero(m.TargetNetworkEntity) { // not required
			return nil
		}

		if err := m.TargetNetworkEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetNetworkEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetNetworkEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverVmwareVMNewNetworkConfigMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverVmwareVMNewNetworkConfigMapping) UnmarshalBinary(b []byte) error {
	var res RecoverVmwareVMNewNetworkConfigMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
