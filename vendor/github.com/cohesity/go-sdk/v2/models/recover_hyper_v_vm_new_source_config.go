// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverHyperVVMNewSourceConfig Recover HyperV VMs New Source Config.
//
// Specifies the new destination Source configuration where the VMs will be recovered.
//
// swagger:model RecoverHyperVVmNewSourceConfig
type RecoverHyperVVMNewSourceConfig struct {

	// Specifies the type of HyperV source to which the VMs are being restored.
	// Required: true
	// Enum: ["kSCVMMServer","kStandaloneHost","kStandaloneCluster"]
	SourceType *string `json:"sourceType"`

	// scvmm server params
	ScvmmServerParams *RecoverHyperVVMSCVMMSourceConfig `json:"scvmmServerParams,omitempty"`

	// standalone host params
	StandaloneHostParams *RecoverHyperVVMStandaloneHostSourceConfig `json:"standaloneHostParams,omitempty"`

	// standalone cluster params
	StandaloneClusterParams *RecoverHyperVVMStandaloneClusterSourceConfig `json:"standaloneClusterParams,omitempty"`
}

// Validate validates this recover hyper v Vm new source config
func (m *RecoverHyperVVMNewSourceConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScvmmServerParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandaloneHostParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandaloneClusterParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recoverHyperVVmNewSourceConfigTypeSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSCVMMServer","kStandaloneHost","kStandaloneCluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverHyperVVmNewSourceConfigTypeSourceTypePropEnum = append(recoverHyperVVmNewSourceConfigTypeSourceTypePropEnum, v)
	}
}

const (

	// RecoverHyperVVMNewSourceConfigSourceTypeKSCVMMServer captures enum value "kSCVMMServer"
	RecoverHyperVVMNewSourceConfigSourceTypeKSCVMMServer string = "kSCVMMServer"

	// RecoverHyperVVMNewSourceConfigSourceTypeKStandaloneHost captures enum value "kStandaloneHost"
	RecoverHyperVVMNewSourceConfigSourceTypeKStandaloneHost string = "kStandaloneHost"

	// RecoverHyperVVMNewSourceConfigSourceTypeKStandaloneCluster captures enum value "kStandaloneCluster"
	RecoverHyperVVMNewSourceConfigSourceTypeKStandaloneCluster string = "kStandaloneCluster"
)

// prop value enum
func (m *RecoverHyperVVMNewSourceConfig) validateSourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverHyperVVmNewSourceConfigTypeSourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverHyperVVMNewSourceConfig) validateSourceType(formats strfmt.Registry) error {

	if err := validate.Required("sourceType", "body", m.SourceType); err != nil {
		return err
	}

	// value enum
	if err := m.validateSourceTypeEnum("sourceType", "body", *m.SourceType); err != nil {
		return err
	}

	return nil
}

func (m *RecoverHyperVVMNewSourceConfig) validateScvmmServerParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ScvmmServerParams) { // not required
		return nil
	}

	if m.ScvmmServerParams != nil {
		if err := m.ScvmmServerParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scvmmServerParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scvmmServerParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverHyperVVMNewSourceConfig) validateStandaloneHostParams(formats strfmt.Registry) error {
	if swag.IsZero(m.StandaloneHostParams) { // not required
		return nil
	}

	if m.StandaloneHostParams != nil {
		if err := m.StandaloneHostParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneHostParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneHostParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverHyperVVMNewSourceConfig) validateStandaloneClusterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.StandaloneClusterParams) { // not required
		return nil
	}

	if m.StandaloneClusterParams != nil {
		if err := m.StandaloneClusterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneClusterParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover hyper v Vm new source config based on the context it is used
func (m *RecoverHyperVVMNewSourceConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScvmmServerParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandaloneHostParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandaloneClusterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverHyperVVMNewSourceConfig) contextValidateScvmmServerParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ScvmmServerParams != nil {

		if swag.IsZero(m.ScvmmServerParams) { // not required
			return nil
		}

		if err := m.ScvmmServerParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scvmmServerParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scvmmServerParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverHyperVVMNewSourceConfig) contextValidateStandaloneHostParams(ctx context.Context, formats strfmt.Registry) error {

	if m.StandaloneHostParams != nil {

		if swag.IsZero(m.StandaloneHostParams) { // not required
			return nil
		}

		if err := m.StandaloneHostParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneHostParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneHostParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverHyperVVMNewSourceConfig) contextValidateStandaloneClusterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.StandaloneClusterParams != nil {

		if swag.IsZero(m.StandaloneClusterParams) { // not required
			return nil
		}

		if err := m.StandaloneClusterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standaloneClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standaloneClusterParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverHyperVVMNewSourceConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverHyperVVMNewSourceConfig) UnmarshalBinary(b []byte) error {
	var res RecoverHyperVVMNewSourceConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
