// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StandardParams Register AWS Commercial request parameters.
//
// # Specifies the parameters to register a commercial AWS
//
// swagger:model StandardParams
type StandardParams struct {

	// Specifies the Authentication method(IamArn/IamRole) used by api
	// Required: true
	// Enum: ["kUseIAMUser","kUseIAMRole","kUseInstanceProfile","kStandardCredentials","kKerberos"]
	AuthMethodType *string `json:"authMethodType"`

	// Specifies the credentials required to register as AWS source.
	IamUserAwsCredentials *IamUserAwsCredentials `json:"iamUserAwsCredentials,omitempty"`

	// Specifies the credentials required to register as AWS source.
	IamRoleAwsCredentials *IamRoleAwsCredentials `json:"iamRoleAwsCredentials,omitempty"`
}

// Validate validates this standard params
func (m *StandardParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthMethodType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamUserAwsCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamRoleAwsCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var standardParamsTypeAuthMethodTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kUseIAMUser","kUseIAMRole","kUseInstanceProfile","kStandardCredentials","kKerberos"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		standardParamsTypeAuthMethodTypePropEnum = append(standardParamsTypeAuthMethodTypePropEnum, v)
	}
}

const (

	// StandardParamsAuthMethodTypeKUseIAMUser captures enum value "kUseIAMUser"
	StandardParamsAuthMethodTypeKUseIAMUser string = "kUseIAMUser"

	// StandardParamsAuthMethodTypeKUseIAMRole captures enum value "kUseIAMRole"
	StandardParamsAuthMethodTypeKUseIAMRole string = "kUseIAMRole"

	// StandardParamsAuthMethodTypeKUseInstanceProfile captures enum value "kUseInstanceProfile"
	StandardParamsAuthMethodTypeKUseInstanceProfile string = "kUseInstanceProfile"

	// StandardParamsAuthMethodTypeKStandardCredentials captures enum value "kStandardCredentials"
	StandardParamsAuthMethodTypeKStandardCredentials string = "kStandardCredentials"

	// StandardParamsAuthMethodTypeKKerberos captures enum value "kKerberos"
	StandardParamsAuthMethodTypeKKerberos string = "kKerberos"
)

// prop value enum
func (m *StandardParams) validateAuthMethodTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, standardParamsTypeAuthMethodTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StandardParams) validateAuthMethodType(formats strfmt.Registry) error {

	if err := validate.Required("authMethodType", "body", m.AuthMethodType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthMethodTypeEnum("authMethodType", "body", *m.AuthMethodType); err != nil {
		return err
	}

	return nil
}

func (m *StandardParams) validateIamUserAwsCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.IamUserAwsCredentials) { // not required
		return nil
	}

	if m.IamUserAwsCredentials != nil {
		if err := m.IamUserAwsCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamUserAwsCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamUserAwsCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *StandardParams) validateIamRoleAwsCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.IamRoleAwsCredentials) { // not required
		return nil
	}

	if m.IamRoleAwsCredentials != nil {
		if err := m.IamRoleAwsCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamRoleAwsCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamRoleAwsCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this standard params based on the context it is used
func (m *StandardParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIamUserAwsCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIamRoleAwsCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardParams) contextValidateIamUserAwsCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.IamUserAwsCredentials != nil {

		if swag.IsZero(m.IamUserAwsCredentials) { // not required
			return nil
		}

		if err := m.IamUserAwsCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamUserAwsCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamUserAwsCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *StandardParams) contextValidateIamRoleAwsCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.IamRoleAwsCredentials != nil {

		if swag.IsZero(m.IamRoleAwsCredentials) { // not required
			return nil
		}

		if err := m.IamRoleAwsCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamRoleAwsCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamRoleAwsCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandardParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandardParams) UnmarshalBinary(b []byte) error {
	var res StandardParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
