// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterDhcpNetworkConfig Cluster Network Config.
//
// Specifies all of the parameters needed for network configuration of the new Cluster using DHCP.
//
// swagger:model ClusterDhcpNetworkConfig
type ClusterDhcpNetworkConfig struct {

	// Specifies the gateway of the new cluster network.
	// Read Only: true
	Gateway *string `json:"gateway,omitempty"`

	// Specifies the ip subnet ip of the cluster network.
	// Read Only: true
	SubnetIP *string `json:"subnetIp,omitempty"`

	// Specifies the ip subnet mask of the cluster network.
	// Read Only: true
	SubnetMask *string `json:"subnetMask,omitempty"`

	// Specifies the list of Dns Servers new cluster should be configured with.
	// Required: true
	DNSServers []string `json:"dnsServers"`
}

// Validate validates this cluster dhcp network config
func (m *ClusterDhcpNetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDhcpNetworkConfig) validateDNSServers(formats strfmt.Registry) error {

	if err := validate.Required("dnsServers", "body", m.DNSServers); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cluster dhcp network config based on the context it is used
func (m *ClusterDhcpNetworkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetMask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDhcpNetworkConfig) contextValidateGateway(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *ClusterDhcpNetworkConfig) contextValidateSubnetIP(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "subnetIp", "body", m.SubnetIP); err != nil {
		return err
	}

	return nil
}

func (m *ClusterDhcpNetworkConfig) contextValidateSubnetMask(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "subnetMask", "body", m.SubnetMask); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDhcpNetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDhcpNetworkConfig) UnmarshalBinary(b []byte) error {
	var res ClusterDhcpNetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
