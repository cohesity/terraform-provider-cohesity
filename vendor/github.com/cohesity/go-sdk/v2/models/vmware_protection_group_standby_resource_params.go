// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VmwareProtectionGroupStandbyResourceParams VMware protection group standby resource params which will be used to create standby VM entity for backup entity.
//
// swagger:model VmwareProtectionGroupStandbyResourceParams
type VmwareProtectionGroupStandbyResourceParams struct {
	CommonStandbyResourceParams

	// Specifies the object id for parent vCenter source where this standby resource should be created.
	ParentObjectID *int64 `json:"parentObjectId,omitempty"`

	// Specifies the object id for target vm folder where this standby resource should be created.
	TargetFolderObjectID *int64 `json:"targetFolderObjectId,omitempty"`

	// Specifies the object id for target datastore folder where disks for this standby resource should be placed.
	TargetDatastoreFolderObjectID *int64 `json:"targetDatastoreFolderObjectId,omitempty"`

	// Specifies the object id for resource pool where this standby resource should be created.
	ResourcePoolObjectID *int64 `json:"resourcePoolObjectId,omitempty"`

	// Specifies the list of IDs of the datastore objects where this standby resource should be created.
	DatastoreObjectIds []*int64 `json:"datastoreObjectIds"`

	// Specifies the networking configuration to be applied to this standby resource.
	NetworkConfig *RecoverVmwareVMNewSourceNetworkConfig `json:"networkConfig,omitempty"`

	// Specifies params to rename the standby resource.
	RenameRestoredObjectParams *RecoveredOrClonedVmsRenameConfig `json:"renameRestoredObjectParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VmwareProtectionGroupStandbyResourceParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonStandbyResourceParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonStandbyResourceParams = aO0

	// AO1
	var dataAO1 struct {
		ParentObjectID *int64 `json:"parentObjectId,omitempty"`

		TargetFolderObjectID *int64 `json:"targetFolderObjectId,omitempty"`

		TargetDatastoreFolderObjectID *int64 `json:"targetDatastoreFolderObjectId,omitempty"`

		ResourcePoolObjectID *int64 `json:"resourcePoolObjectId,omitempty"`

		DatastoreObjectIds []*int64 `json:"datastoreObjectIds"`

		NetworkConfig *RecoverVmwareVMNewSourceNetworkConfig `json:"networkConfig,omitempty"`

		RenameRestoredObjectParams *RecoveredOrClonedVmsRenameConfig `json:"renameRestoredObjectParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ParentObjectID = dataAO1.ParentObjectID

	m.TargetFolderObjectID = dataAO1.TargetFolderObjectID

	m.TargetDatastoreFolderObjectID = dataAO1.TargetDatastoreFolderObjectID

	m.ResourcePoolObjectID = dataAO1.ResourcePoolObjectID

	m.DatastoreObjectIds = dataAO1.DatastoreObjectIds

	m.NetworkConfig = dataAO1.NetworkConfig

	m.RenameRestoredObjectParams = dataAO1.RenameRestoredObjectParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VmwareProtectionGroupStandbyResourceParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonStandbyResourceParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ParentObjectID *int64 `json:"parentObjectId,omitempty"`

		TargetFolderObjectID *int64 `json:"targetFolderObjectId,omitempty"`

		TargetDatastoreFolderObjectID *int64 `json:"targetDatastoreFolderObjectId,omitempty"`

		ResourcePoolObjectID *int64 `json:"resourcePoolObjectId,omitempty"`

		DatastoreObjectIds []*int64 `json:"datastoreObjectIds"`

		NetworkConfig *RecoverVmwareVMNewSourceNetworkConfig `json:"networkConfig,omitempty"`

		RenameRestoredObjectParams *RecoveredOrClonedVmsRenameConfig `json:"renameRestoredObjectParams,omitempty"`
	}

	dataAO1.ParentObjectID = m.ParentObjectID

	dataAO1.TargetFolderObjectID = m.TargetFolderObjectID

	dataAO1.TargetDatastoreFolderObjectID = m.TargetDatastoreFolderObjectID

	dataAO1.ResourcePoolObjectID = m.ResourcePoolObjectID

	dataAO1.DatastoreObjectIds = m.DatastoreObjectIds

	dataAO1.NetworkConfig = m.NetworkConfig

	dataAO1.RenameRestoredObjectParams = m.RenameRestoredObjectParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vmware protection group standby resource params
func (m *VmwareProtectionGroupStandbyResourceParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonStandbyResourceParams
	if err := m.CommonStandbyResourceParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRestoredObjectParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareProtectionGroupStandbyResourceParams) validateNetworkConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkConfig) { // not required
		return nil
	}

	if m.NetworkConfig != nil {
		if err := m.NetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareProtectionGroupStandbyResourceParams) validateRenameRestoredObjectParams(formats strfmt.Registry) error {

	if swag.IsZero(m.RenameRestoredObjectParams) { // not required
		return nil
	}

	if m.RenameRestoredObjectParams != nil {
		if err := m.RenameRestoredObjectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware protection group standby resource params based on the context it is used
func (m *VmwareProtectionGroupStandbyResourceParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonStandbyResourceParams
	if err := m.CommonStandbyResourceParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRestoredObjectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareProtectionGroupStandbyResourceParams) contextValidateNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkConfig != nil {

		if swag.IsZero(m.NetworkConfig) { // not required
			return nil
		}

		if err := m.NetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareProtectionGroupStandbyResourceParams) contextValidateRenameRestoredObjectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRestoredObjectParams != nil {

		if swag.IsZero(m.RenameRestoredObjectParams) { // not required
			return nil
		}

		if err := m.RenameRestoredObjectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRestoredObjectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRestoredObjectParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareProtectionGroupStandbyResourceParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareProtectionGroupStandbyResourceParams) UnmarshalBinary(b []byte) error {
	var res VmwareProtectionGroupStandbyResourceParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
