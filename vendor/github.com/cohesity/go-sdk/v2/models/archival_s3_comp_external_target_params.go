// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArchivalS3CompExternalTargetParams S3 Compatible Common External Target Request Common Params for archival purpose type.
//
// Specifies the parameters which are specific to S3 Compatible related External Targets of archival purpose type.
//
// swagger:model ArchivalS3CompExternalTargetParams
type ArchivalS3CompExternalTargetParams struct {
	CommonS3CompExternalTargetParams

	// Specifies the S3Compatible External Target storage class.
	// Enum: ["S3CompatibleRegular","S3CompatibleTapeBased"]
	StorageClass *string `json:"storageClass,omitempty"`

	// Specifies the Source Side Deduplication setting for the S3 Compatible external target
	SourceSideDeduplication *bool `json:"sourceSideDeduplication,omitempty"`

	// Specifies if Incremental Archival setting is enabled or not.
	IsIncrementalArchivalEnabled *bool `json:"isIncrementalArchivalEnabled,omitempty"`

	// Specifies if Forever Incremental Archival setting is enabled or not.
	IsForeverIncrementalArchivalEnabled *bool `json:"isForeverIncrementalArchivalEnabled,omitempty"`

	// Specifies the account Id of the S3 bucket owner.
	BucketOwnerAccountID *string `json:"bucketOwnerAccountId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ArchivalS3CompExternalTargetParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonS3CompExternalTargetParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonS3CompExternalTargetParams = aO0

	// AO1
	var dataAO1 struct {
		StorageClass *string `json:"storageClass,omitempty"`

		SourceSideDeduplication *bool `json:"sourceSideDeduplication,omitempty"`

		IsIncrementalArchivalEnabled *bool `json:"isIncrementalArchivalEnabled,omitempty"`

		IsForeverIncrementalArchivalEnabled *bool `json:"isForeverIncrementalArchivalEnabled,omitempty"`

		BucketOwnerAccountID *string `json:"bucketOwnerAccountId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.StorageClass = dataAO1.StorageClass

	m.SourceSideDeduplication = dataAO1.SourceSideDeduplication

	m.IsIncrementalArchivalEnabled = dataAO1.IsIncrementalArchivalEnabled

	m.IsForeverIncrementalArchivalEnabled = dataAO1.IsForeverIncrementalArchivalEnabled

	m.BucketOwnerAccountID = dataAO1.BucketOwnerAccountID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ArchivalS3CompExternalTargetParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonS3CompExternalTargetParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		StorageClass *string `json:"storageClass,omitempty"`

		SourceSideDeduplication *bool `json:"sourceSideDeduplication,omitempty"`

		IsIncrementalArchivalEnabled *bool `json:"isIncrementalArchivalEnabled,omitempty"`

		IsForeverIncrementalArchivalEnabled *bool `json:"isForeverIncrementalArchivalEnabled,omitempty"`

		BucketOwnerAccountID *string `json:"bucketOwnerAccountId,omitempty"`
	}

	dataAO1.StorageClass = m.StorageClass

	dataAO1.SourceSideDeduplication = m.SourceSideDeduplication

	dataAO1.IsIncrementalArchivalEnabled = m.IsIncrementalArchivalEnabled

	dataAO1.IsForeverIncrementalArchivalEnabled = m.IsForeverIncrementalArchivalEnabled

	dataAO1.BucketOwnerAccountID = m.BucketOwnerAccountID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this archival s3 comp external target params
func (m *ArchivalS3CompExternalTargetParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonS3CompExternalTargetParams
	if err := m.CommonS3CompExternalTargetParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageClass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var archivalS3CompExternalTargetParamsTypeStorageClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["S3CompatibleRegular","S3CompatibleTapeBased"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		archivalS3CompExternalTargetParamsTypeStorageClassPropEnum = append(archivalS3CompExternalTargetParamsTypeStorageClassPropEnum, v)
	}
}

// property enum
func (m *ArchivalS3CompExternalTargetParams) validateStorageClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, archivalS3CompExternalTargetParamsTypeStorageClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArchivalS3CompExternalTargetParams) validateStorageClass(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageClass) { // not required
		return nil
	}

	// value enum
	if err := m.validateStorageClassEnum("storageClass", "body", *m.StorageClass); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this archival s3 comp external target params based on the context it is used
func (m *ArchivalS3CompExternalTargetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonS3CompExternalTargetParams
	if err := m.CommonS3CompExternalTargetParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ArchivalS3CompExternalTargetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchivalS3CompExternalTargetParams) UnmarshalBinary(b []byte) error {
	var res ArchivalS3CompExternalTargetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
