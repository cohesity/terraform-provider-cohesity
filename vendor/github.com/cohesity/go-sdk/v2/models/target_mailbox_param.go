// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TargetMailboxParam Specifies the target Mailbox to recover to.
//
// swagger:model TargetMailboxParam
type TargetMailboxParam struct {

	// Specifies the id of the target mailbox. Atleast one of id or primarySMTPAddress need to be defined. In case both id and primarySMTPAddress are defined then id takes precedence.
	ID *int64 `json:"id,omitempty"`

	// Specifies the name of the object.
	// Read Only: true
	Name *string `json:"name,omitempty"`

	// Specifies the path to the target folder.
	TargetFolderPath *string `json:"targetFolderPath,omitempty"`

	// Specifies the id of the domain for alternate domain recovery.
	ParentSourceID *int64 `json:"parentSourceId,omitempty"`

	// Specifies the primary SMTP address of the target mailbox. Atleast one of id or primarySMTPAddress needs to be defined. In case both id and primarySMTPAddress are defined then id takes precedence.
	PrimarySMTPAddress *string `json:"primarySmtpAddress,omitempty"`
}

// Validate validates this target mailbox param
func (m *TargetMailboxParam) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this target mailbox param based on the context it is used
func (m *TargetMailboxParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetMailboxParam) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetMailboxParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetMailboxParam) UnmarshalBinary(b []byte) error {
	var res TargetMailboxParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
