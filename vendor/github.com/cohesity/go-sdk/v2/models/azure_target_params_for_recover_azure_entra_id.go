// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureTargetParamsForRecoverAzureEntraID Azure Recovery Target Params for Entra ID
//
// Specifies the parameters for an Azure recovery target.
//
// swagger:model AzureTargetParamsForRecoverAzureEntraId
type AzureTargetParamsForRecoverAzureEntraID struct {

	// Specifies the recovery type for the selected azure entra id recoverable object.
	// Required: true
	// Enum: ["PropertyAndRelation","PropertyOnly","RelationOnly"]
	RecoveryType *string `json:"recoveryType"`

	// If true, relationships are restored in overwrite mode (i.e. any relationship created *after* restore point is deleted). For example, if user U1 is member of G1 and G2 in restore point (in selected snapshot), but the same user is member of G1 and G3 in live AAD, membership of G2 is restored and membership of G3 is removed in overwrite-mode while restoring U1. If this field is false, relationship is restored in merge-mode. In merge-mode, membership of G2 is restored but membership of G3 is not removed.
	IsRelationOverwrite *bool `json:"isRelationOverwrite,omitempty"`

	// Specifies whether recovery should recover all the members of a selected object. Applies for Admin Unit, Group and Dir Roles
	IsContainerMemberRecovery *bool `json:"isContainerMemberRecovery,omitempty"`

	// Specifies the default password to be set in case users are recovered.
	DefaultPassword *string `json:"defaultPassword,omitempty"`

	// Specifies Whether to force changing password on next sign in. Applies for only user type
	ChangePasswordOnSignIn *bool `json:"changePasswordOnSignIn,omitempty"`
}

// Validate validates this azure target params for recover azure entra Id
func (m *AzureTargetParamsForRecoverAzureEntraID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoveryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var azureTargetParamsForRecoverAzureEntraIdTypeRecoveryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PropertyAndRelation","PropertyOnly","RelationOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureTargetParamsForRecoverAzureEntraIdTypeRecoveryTypePropEnum = append(azureTargetParamsForRecoverAzureEntraIdTypeRecoveryTypePropEnum, v)
	}
}

const (

	// AzureTargetParamsForRecoverAzureEntraIDRecoveryTypePropertyAndRelation captures enum value "PropertyAndRelation"
	AzureTargetParamsForRecoverAzureEntraIDRecoveryTypePropertyAndRelation string = "PropertyAndRelation"

	// AzureTargetParamsForRecoverAzureEntraIDRecoveryTypePropertyOnly captures enum value "PropertyOnly"
	AzureTargetParamsForRecoverAzureEntraIDRecoveryTypePropertyOnly string = "PropertyOnly"

	// AzureTargetParamsForRecoverAzureEntraIDRecoveryTypeRelationOnly captures enum value "RelationOnly"
	AzureTargetParamsForRecoverAzureEntraIDRecoveryTypeRelationOnly string = "RelationOnly"
)

// prop value enum
func (m *AzureTargetParamsForRecoverAzureEntraID) validateRecoveryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureTargetParamsForRecoverAzureEntraIdTypeRecoveryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureTargetParamsForRecoverAzureEntraID) validateRecoveryType(formats strfmt.Registry) error {

	if err := validate.Required("recoveryType", "body", m.RecoveryType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRecoveryTypeEnum("recoveryType", "body", *m.RecoveryType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure target params for recover azure entra Id based on context it is used
func (m *AzureTargetParamsForRecoverAzureEntraID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureTargetParamsForRecoverAzureEntraID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureTargetParamsForRecoverAzureEntraID) UnmarshalBinary(b []byte) error {
	var res AzureTargetParamsForRecoverAzureEntraID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
