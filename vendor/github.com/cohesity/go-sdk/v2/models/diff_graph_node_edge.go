// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiffGraphNodeEdge Represents the pair of edges and destination node which are either modified, added, deleted or unmodified compared to base snapshot.
//
// swagger:model DiffGraphNodeEdge
type DiffGraphNodeEdge struct {

	// Specifies the diff type for the base node.
	// Enum: ["Unused","Added","Modified","Deleted","Unmodified"]
	DiffType *string `json:"diffType,omitempty"`

	// This will be present if either the pair of edge relation and destination node is modified or deleted. If diff type is unmodified this field will not be present.
	BaseRelation struct {
		GraphEdge
	} `json:"baseRelation,omitempty"`

	// This will be present if either the pair of edge relation and destination node is added, modified or unmodified.
	CurrentRelation struct {
		GraphEdge
	} `json:"currentRelation,omitempty"`
}

// Validate validates this diff graph node edge
func (m *DiffGraphNodeEdge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiffType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseRelation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentRelation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var diffGraphNodeEdgeTypeDiffTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unused","Added","Modified","Deleted","Unmodified"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diffGraphNodeEdgeTypeDiffTypePropEnum = append(diffGraphNodeEdgeTypeDiffTypePropEnum, v)
	}
}

const (

	// DiffGraphNodeEdgeDiffTypeUnused captures enum value "Unused"
	DiffGraphNodeEdgeDiffTypeUnused string = "Unused"

	// DiffGraphNodeEdgeDiffTypeAdded captures enum value "Added"
	DiffGraphNodeEdgeDiffTypeAdded string = "Added"

	// DiffGraphNodeEdgeDiffTypeModified captures enum value "Modified"
	DiffGraphNodeEdgeDiffTypeModified string = "Modified"

	// DiffGraphNodeEdgeDiffTypeDeleted captures enum value "Deleted"
	DiffGraphNodeEdgeDiffTypeDeleted string = "Deleted"

	// DiffGraphNodeEdgeDiffTypeUnmodified captures enum value "Unmodified"
	DiffGraphNodeEdgeDiffTypeUnmodified string = "Unmodified"
)

// prop value enum
func (m *DiffGraphNodeEdge) validateDiffTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, diffGraphNodeEdgeTypeDiffTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DiffGraphNodeEdge) validateDiffType(formats strfmt.Registry) error {
	if swag.IsZero(m.DiffType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDiffTypeEnum("diffType", "body", *m.DiffType); err != nil {
		return err
	}

	return nil
}

func (m *DiffGraphNodeEdge) validateBaseRelation(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseRelation) { // not required
		return nil
	}

	return nil
}

func (m *DiffGraphNodeEdge) validateCurrentRelation(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentRelation) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this diff graph node edge based on the context it is used
func (m *DiffGraphNodeEdge) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseRelation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentRelation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiffGraphNodeEdge) contextValidateBaseRelation(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DiffGraphNodeEdge) contextValidateCurrentRelation(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DiffGraphNodeEdge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiffGraphNodeEdge) UnmarshalBinary(b []byte) error {
	var res DiffGraphNodeEdge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
