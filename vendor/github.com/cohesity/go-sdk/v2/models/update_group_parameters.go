// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateGroupParameters Specifies group properties to update.
//
// swagger:model UpdateGroupParameters
type UpdateGroupParameters struct {

	// Specifies the description of the group.
	Description *string `json:"description,omitempty"`

	// Specifies the Cohesity roles to associate with the group. The Cohesity roles determine privileges on the Cohesity Cluster for this group.
	Roles []string `json:"roles,omitempty"`

	// Specifies whether the Group is restricted. A restricted group can only view & manage the objects it has permissions to.
	Restricted *bool `json:"restricted,omitempty"`

	// Specifies a list of tenant ids who can access this group.
	TenantIds []string `json:"tenantIds,omitempty"`

	// Specifies the LOCAL group properties.
	LocalGroupParams *LocalGroupParams `json:"localGroupParams,omitempty"`
}

// Validate validates this update group parameters
func (m *UpdateGroupParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalGroupParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateGroupParameters) validateLocalGroupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalGroupParams) { // not required
		return nil
	}

	if m.LocalGroupParams != nil {
		if err := m.LocalGroupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localGroupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localGroupParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update group parameters based on the context it is used
func (m *UpdateGroupParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocalGroupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateGroupParameters) contextValidateLocalGroupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalGroupParams != nil {

		if swag.IsZero(m.LocalGroupParams) { // not required
			return nil
		}

		if err := m.LocalGroupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localGroupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localGroupParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateGroupParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateGroupParameters) UnmarshalBinary(b []byte) error {
	var res UpdateGroupParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
