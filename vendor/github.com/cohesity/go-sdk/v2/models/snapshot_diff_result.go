// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotDiffResult snapshot diff result
//
// swagger:model SnapshotDiffResult
type SnapshotDiffResult struct {

	// status
	// Required: true
	// Enum: ["kRunning","kCompleted","kError","kSnapshotExpired","kSnapshotNotFound","kObjectNotFound"]
	Status *string `json:"status"`

	// file operations
	FileOperations []*FileOperation `json:"fileOperations"`
}

// Validate validates this snapshot diff result
func (m *SnapshotDiffResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileOperations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snapshotDiffResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRunning","kCompleted","kError","kSnapshotExpired","kSnapshotNotFound","kObjectNotFound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotDiffResultTypeStatusPropEnum = append(snapshotDiffResultTypeStatusPropEnum, v)
	}
}

const (

	// SnapshotDiffResultStatusKRunning captures enum value "kRunning"
	SnapshotDiffResultStatusKRunning string = "kRunning"

	// SnapshotDiffResultStatusKCompleted captures enum value "kCompleted"
	SnapshotDiffResultStatusKCompleted string = "kCompleted"

	// SnapshotDiffResultStatusKError captures enum value "kError"
	SnapshotDiffResultStatusKError string = "kError"

	// SnapshotDiffResultStatusKSnapshotExpired captures enum value "kSnapshotExpired"
	SnapshotDiffResultStatusKSnapshotExpired string = "kSnapshotExpired"

	// SnapshotDiffResultStatusKSnapshotNotFound captures enum value "kSnapshotNotFound"
	SnapshotDiffResultStatusKSnapshotNotFound string = "kSnapshotNotFound"

	// SnapshotDiffResultStatusKObjectNotFound captures enum value "kObjectNotFound"
	SnapshotDiffResultStatusKObjectNotFound string = "kObjectNotFound"
)

// prop value enum
func (m *SnapshotDiffResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapshotDiffResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapshotDiffResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotDiffResult) validateFileOperations(formats strfmt.Registry) error {
	if swag.IsZero(m.FileOperations) { // not required
		return nil
	}

	for i := 0; i < len(m.FileOperations); i++ {
		if swag.IsZero(m.FileOperations[i]) { // not required
			continue
		}

		if m.FileOperations[i] != nil {
			if err := m.FileOperations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fileOperations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fileOperations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this snapshot diff result based on the context it is used
func (m *SnapshotDiffResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileOperations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotDiffResult) contextValidateFileOperations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FileOperations); i++ {

		if m.FileOperations[i] != nil {

			if swag.IsZero(m.FileOperations[i]) { // not required
				return nil
			}

			if err := m.FileOperations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fileOperations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fileOperations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotDiffResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotDiffResult) UnmarshalBinary(b []byte) error {
	var res SnapshotDiffResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
