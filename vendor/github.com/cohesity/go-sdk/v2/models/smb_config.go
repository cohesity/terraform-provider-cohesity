// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SmbConfig Specifies the SMB config settings for this View.
//
// swagger:model SmbConfig
type SmbConfig struct {

	// If set, it enables discovery of view for SMB.
	EnableSmbViewDiscovery *bool `json:"enableSmbViewDiscovery,omitempty"`

	// Specifies if access-based enumeration should be enabled.
	// If 'true', only files and folders that the user has permissions to
	// access are visible on the SMB share for that user.
	EnableSmbAccessBasedEnumeration *bool `json:"enableSmbAccessBasedEnumeration,omitempty"`

	// Specifies the SMB encryption for the View. If set, it enables the SMB
	// encryption for the View. Encryption is supported only by SMB 3.x dialects.
	// Dialects that do not support would still access data in unencrypted
	// format.
	EnableSmbEncryption *bool `json:"enableSmbEncryption,omitempty"`

	// Specifies the SMB encryption for all the sessions for the View.
	// If set, encryption is enforced for all the sessions for the View. When
	// enabled all future and existing unencrypted sessions are disallowed.
	EnforceSmbEncryption *bool `json:"enforceSmbEncryption,omitempty"`

	// Specifies whether fast durable handle is enabled. If enabled, view open
	// handle will be kept in memory, which results in a higher performance. But
	// the handles cannot be recovered if node or service crashes.
	EnableFastDurableHandle *bool `json:"enableFastDurableHandle,omitempty"`

	// Specifies whether SMB opportunistic lock is enabled.
	EnableSmbOplock *bool `json:"enableSmbOplock,omitempty"`

	// Specifies share level permissions of the view.
	SharePermissions *ViewSharePermissions `json:"sharePermissions,omitempty"`

	// Specifies the SMB permissions for the View.
	SmbPermissionsInfo *SmbPermissionsInfo `json:"smbPermissionsInfo,omitempty"`
}

// Validate validates this smb config
func (m *SmbConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSharePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbPermissionsInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmbConfig) validateSharePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.SharePermissions) { // not required
		return nil
	}

	if m.SharePermissions != nil {
		if err := m.SharePermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharePermissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharePermissions")
			}
			return err
		}
	}

	return nil
}

func (m *SmbConfig) validateSmbPermissionsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SmbPermissionsInfo) { // not required
		return nil
	}

	if m.SmbPermissionsInfo != nil {
		if err := m.SmbPermissionsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smbPermissionsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smbPermissionsInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this smb config based on the context it is used
func (m *SmbConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSharePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbPermissionsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmbConfig) contextValidateSharePermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.SharePermissions != nil {

		if swag.IsZero(m.SharePermissions) { // not required
			return nil
		}

		if err := m.SharePermissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharePermissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharePermissions")
			}
			return err
		}
	}

	return nil
}

func (m *SmbConfig) contextValidateSmbPermissionsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SmbPermissionsInfo != nil {

		if swag.IsZero(m.SmbPermissionsInfo) { // not required
			return nil
		}

		if err := m.SmbPermissionsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smbPermissionsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smbPermissionsInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmbConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbConfig) UnmarshalBinary(b []byte) error {
	var res SmbConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
