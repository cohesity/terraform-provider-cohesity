// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetRestorePointsInTimeRangeResponse Specifies the model for the response returned by RestorePointsForTimeRange API
//
// swagger:model GetRestorePointsInTimeRangeResponse
type GetRestorePointsInTimeRangeResponse struct {

	// Specifies the time ranges of the restore object between full snapshots.
	TimeRangeInfo *TimeRangeInfo `json:"timeRangeInfo,omitempty"`

	// Specifies the info related to the recovery object.
	FullSnapshotInfo []*FullSnapshotInfo `json:"fullSnapshotInfo"`
}

// Validate validates this get restore points in time range response
func (m *GetRestorePointsInTimeRangeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimeRangeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullSnapshotInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetRestorePointsInTimeRangeResponse) validateTimeRangeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRangeInfo) { // not required
		return nil
	}

	if m.TimeRangeInfo != nil {
		if err := m.TimeRangeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeRangeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeRangeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *GetRestorePointsInTimeRangeResponse) validateFullSnapshotInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FullSnapshotInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.FullSnapshotInfo); i++ {
		if swag.IsZero(m.FullSnapshotInfo[i]) { // not required
			continue
		}

		if m.FullSnapshotInfo[i] != nil {
			if err := m.FullSnapshotInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fullSnapshotInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fullSnapshotInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get restore points in time range response based on the context it is used
func (m *GetRestorePointsInTimeRangeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimeRangeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullSnapshotInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetRestorePointsInTimeRangeResponse) contextValidateTimeRangeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeRangeInfo != nil {

		if swag.IsZero(m.TimeRangeInfo) { // not required
			return nil
		}

		if err := m.TimeRangeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeRangeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeRangeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *GetRestorePointsInTimeRangeResponse) contextValidateFullSnapshotInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FullSnapshotInfo); i++ {

		if m.FullSnapshotInfo[i] != nil {

			if swag.IsZero(m.FullSnapshotInfo[i]) { // not required
				return nil
			}

			if err := m.FullSnapshotInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fullSnapshotInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fullSnapshotInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetRestorePointsInTimeRangeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetRestorePointsInTimeRangeResponse) UnmarshalBinary(b []byte) error {
	var res GetRestorePointsInTimeRangeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
