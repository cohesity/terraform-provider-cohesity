// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HbaseParams Recover Hbase environment params.
//
// Specifies the recovery options specific to Hbase environment.
//
// swagger:model HbaseParams
type HbaseParams struct {

	// Specifies the type of recover action to be performed.
	// Required: true
	// Enum: ["RecoverObjects"]
	RecoveryAction *string `json:"recoveryAction"`

	// Specifies the parameters to recover Hbase objects.
	// Required: true
	RecoverHbaseParams *RecoverHbaseParams `json:"recoverHbaseParams"`
}

// Validate validates this hbase params
func (m *HbaseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoveryAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverHbaseParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hbaseParamsTypeRecoveryActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RecoverObjects"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hbaseParamsTypeRecoveryActionPropEnum = append(hbaseParamsTypeRecoveryActionPropEnum, v)
	}
}

const (

	// HbaseParamsRecoveryActionRecoverObjects captures enum value "RecoverObjects"
	HbaseParamsRecoveryActionRecoverObjects string = "RecoverObjects"
)

// prop value enum
func (m *HbaseParams) validateRecoveryActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hbaseParamsTypeRecoveryActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HbaseParams) validateRecoveryAction(formats strfmt.Registry) error {

	if err := validate.Required("recoveryAction", "body", m.RecoveryAction); err != nil {
		return err
	}

	// value enum
	if err := m.validateRecoveryActionEnum("recoveryAction", "body", *m.RecoveryAction); err != nil {
		return err
	}

	return nil
}

func (m *HbaseParams) validateRecoverHbaseParams(formats strfmt.Registry) error {

	if err := validate.Required("recoverHbaseParams", "body", m.RecoverHbaseParams); err != nil {
		return err
	}

	if m.RecoverHbaseParams != nil {
		if err := m.RecoverHbaseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverHbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverHbaseParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hbase params based on the context it is used
func (m *HbaseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecoverHbaseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HbaseParams) contextValidateRecoverHbaseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverHbaseParams != nil {

		if err := m.RecoverHbaseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverHbaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverHbaseParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HbaseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HbaseParams) UnmarshalBinary(b []byte) error {
	var res HbaseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
