// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverElastifileNasVolumeParams Recover Elastifile NAS Volume Params.
//
// Specifies the parameters to recover Elastifile NAS volumes.
//
// swagger:model RecoverElastifileNasVolumeParams
type RecoverElastifileNasVolumeParams struct {

	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	// Required: true
	// Enum: ["kElastifile","kFlashBlade","kGenericNas","kGPFS","kIsilon","kNetapp","kView"]
	TargetEnvironment *string `json:"targetEnvironment"`

	// Specifies the params for a Elastifile recovery target.
	ElastifileTargetParams *RecoverElastifileToElastifileVolumeTargetParams `json:"elastifileTargetParams,omitempty"`

	// Specifies the params for a Flashblade recovery target.
	FlashbladeTargetParams *RecoverOtherNasToFlashbladeVolumeTargetParams `json:"flashbladeTargetParams,omitempty"`

	// Specifies the params for a Generic NAS recovery target.
	GenericNasTargetParams *RecoverOtherNasToGenericNasVolumeTargetParams `json:"genericNasTargetParams,omitempty"`

	// Specifies the params for a GPFS recovery target.
	GpfsTargetParams *RecoverOtherNasToGpfsVolumeTargetParams `json:"gpfsTargetParams,omitempty"`

	// Specifies the params for an Isilon recovery target.
	IsilonTargetParams *RecoverOtherNasToIsilonVolumeTargetParams `json:"isilonTargetParams,omitempty"`

	// Specifies the params for an Netapp recovery target.
	NetappTargetParams *RecoverOtherNasToNetappVolumeTargetParams `json:"netappTargetParams,omitempty"`

	// Specifies the params for a Cohesity view recovery target.
	ViewTargetParams *RecoverNasVolumeToViewParams `json:"viewTargetParams,omitempty"`
}

// Validate validates this recover elastifile nas volume params
func (m *RecoverElastifileNasVolumeParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElastifileTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlashbladeTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericNasTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpfsTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recoverElastifileNasVolumeParamsTypeTargetEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kElastifile","kFlashBlade","kGenericNas","kGPFS","kIsilon","kNetapp","kView"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverElastifileNasVolumeParamsTypeTargetEnvironmentPropEnum = append(recoverElastifileNasVolumeParamsTypeTargetEnvironmentPropEnum, v)
	}
}

const (

	// RecoverElastifileNasVolumeParamsTargetEnvironmentKElastifile captures enum value "kElastifile"
	RecoverElastifileNasVolumeParamsTargetEnvironmentKElastifile string = "kElastifile"

	// RecoverElastifileNasVolumeParamsTargetEnvironmentKFlashBlade captures enum value "kFlashBlade"
	RecoverElastifileNasVolumeParamsTargetEnvironmentKFlashBlade string = "kFlashBlade"

	// RecoverElastifileNasVolumeParamsTargetEnvironmentKGenericNas captures enum value "kGenericNas"
	RecoverElastifileNasVolumeParamsTargetEnvironmentKGenericNas string = "kGenericNas"

	// RecoverElastifileNasVolumeParamsTargetEnvironmentKGPFS captures enum value "kGPFS"
	RecoverElastifileNasVolumeParamsTargetEnvironmentKGPFS string = "kGPFS"

	// RecoverElastifileNasVolumeParamsTargetEnvironmentKIsilon captures enum value "kIsilon"
	RecoverElastifileNasVolumeParamsTargetEnvironmentKIsilon string = "kIsilon"

	// RecoverElastifileNasVolumeParamsTargetEnvironmentKNetapp captures enum value "kNetapp"
	RecoverElastifileNasVolumeParamsTargetEnvironmentKNetapp string = "kNetapp"

	// RecoverElastifileNasVolumeParamsTargetEnvironmentKView captures enum value "kView"
	RecoverElastifileNasVolumeParamsTargetEnvironmentKView string = "kView"
)

// prop value enum
func (m *RecoverElastifileNasVolumeParams) validateTargetEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverElastifileNasVolumeParamsTypeTargetEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverElastifileNasVolumeParams) validateTargetEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("targetEnvironment", "body", m.TargetEnvironment); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetEnvironmentEnum("targetEnvironment", "body", *m.TargetEnvironment); err != nil {
		return err
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) validateElastifileTargetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ElastifileTargetParams) { // not required
		return nil
	}

	if m.ElastifileTargetParams != nil {
		if err := m.ElastifileTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) validateFlashbladeTargetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FlashbladeTargetParams) { // not required
		return nil
	}

	if m.FlashbladeTargetParams != nil {
		if err := m.FlashbladeTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) validateGenericNasTargetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GenericNasTargetParams) { // not required
		return nil
	}

	if m.GenericNasTargetParams != nil {
		if err := m.GenericNasTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) validateGpfsTargetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.GpfsTargetParams) { // not required
		return nil
	}

	if m.GpfsTargetParams != nil {
		if err := m.GpfsTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) validateIsilonTargetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonTargetParams) { // not required
		return nil
	}

	if m.IsilonTargetParams != nil {
		if err := m.IsilonTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) validateNetappTargetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NetappTargetParams) { // not required
		return nil
	}

	if m.NetappTargetParams != nil {
		if err := m.NetappTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) validateViewTargetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewTargetParams) { // not required
		return nil
	}

	if m.ViewTargetParams != nil {
		if err := m.ViewTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewTargetParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover elastifile nas volume params based on the context it is used
func (m *RecoverElastifileNasVolumeParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateElastifileTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlashbladeTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenericNasTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpfsTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverElastifileNasVolumeParams) contextValidateElastifileTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ElastifileTargetParams != nil {

		if swag.IsZero(m.ElastifileTargetParams) { // not required
			return nil
		}

		if err := m.ElastifileTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) contextValidateFlashbladeTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FlashbladeTargetParams != nil {

		if swag.IsZero(m.FlashbladeTargetParams) { // not required
			return nil
		}

		if err := m.FlashbladeTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) contextValidateGenericNasTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericNasTargetParams != nil {

		if swag.IsZero(m.GenericNasTargetParams) { // not required
			return nil
		}

		if err := m.GenericNasTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) contextValidateGpfsTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GpfsTargetParams != nil {

		if swag.IsZero(m.GpfsTargetParams) { // not required
			return nil
		}

		if err := m.GpfsTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) contextValidateIsilonTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonTargetParams != nil {

		if swag.IsZero(m.IsilonTargetParams) { // not required
			return nil
		}

		if err := m.IsilonTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) contextValidateNetappTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NetappTargetParams != nil {

		if swag.IsZero(m.NetappTargetParams) { // not required
			return nil
		}

		if err := m.NetappTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappTargetParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverElastifileNasVolumeParams) contextValidateViewTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewTargetParams != nil {

		if swag.IsZero(m.ViewTargetParams) { // not required
			return nil
		}

		if err := m.ViewTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewTargetParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverElastifileNasVolumeParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverElastifileNasVolumeParams) UnmarshalBinary(b []byte) error {
	var res RecoverElastifileNasVolumeParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
