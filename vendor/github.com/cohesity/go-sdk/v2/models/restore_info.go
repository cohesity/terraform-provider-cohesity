// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreInfo Specifies the info regarding a snapshot
//
// swagger:model RestoreInfo
type RestoreInfo struct {

	// Specifies the start time specified as a Unix epoch Timestamp (in microseconds).
	RunStartTimeUsecs *int64 `json:"runStartTimeUsecs,omitempty"`

	// Specifies the protection group id of the run responsible for the snapshot
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// Specifies the archival target information if the snapshot is an archival snapshot.
	ArchivalTargetInfo *ArchivalTargetSummaryInfo `json:"archivalTargetInfo,omitempty"`

	// Specifies the details about CloudSpin target where backup snapshots may be converted and stored.
	CloudDeployTarget *CloudSpinTarget `json:"cloudDeployTarget,omitempty"`

	// Specifies the details about CloudSpin target where backup snapshots may be converted and stored.
	CloudReplicationTarget *CloudSpinTarget `json:"cloudReplicationTarget,omitempty"`

	// Specifies the entity summary information.
	ObjectInfo *Object `json:"objectInfo,omitempty"`

	// Specifies the entity summary information.
	ParentObjectInfo *Object `json:"parentObjectInfo,omitempty"`

	// Specifies the attempt number of the job run to restore from.
	AttemptNumber *int32 `json:"attemptNumber,omitempty"`

	// Specifies the relative path to the directory containing the entity's snapshot.
	SnapshotRelativeDirPath *string `json:"snapshotRelativeDirPath,omitempty"`

	// Specifies this is applicable only to VMs and is set to true when the VM being recovered or cloned contained independent disks when it was backed up.
	VMHadIndependentDisks *bool `json:"vmHadIndependentDisks,omitempty"`

	// The name of the view where the object's snapshot is located.
	ViewName *string `json:"viewName,omitempty"`
}

// Validate validates this restore info
func (m *RestoreInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchivalTargetInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudDeployTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudReplicationTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentObjectInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreInfo) validateArchivalTargetInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalTargetInfo) { // not required
		return nil
	}

	if m.ArchivalTargetInfo != nil {
		if err := m.ArchivalTargetInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTargetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTargetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) validateCloudDeployTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudDeployTarget) { // not required
		return nil
	}

	if m.CloudDeployTarget != nil {
		if err := m.CloudDeployTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDeployTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudDeployTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) validateCloudReplicationTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudReplicationTarget) { // not required
		return nil
	}

	if m.CloudReplicationTarget != nil {
		if err := m.CloudReplicationTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudReplicationTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudReplicationTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) validateObjectInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectInfo) { // not required
		return nil
	}

	if m.ObjectInfo != nil {
		if err := m.ObjectInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) validateParentObjectInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentObjectInfo) { // not required
		return nil
	}

	if m.ParentObjectInfo != nil {
		if err := m.ParentObjectInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentObjectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentObjectInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this restore info based on the context it is used
func (m *RestoreInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchivalTargetInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudDeployTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudReplicationTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentObjectInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreInfo) contextValidateArchivalTargetInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchivalTargetInfo != nil {

		if swag.IsZero(m.ArchivalTargetInfo) { // not required
			return nil
		}

		if err := m.ArchivalTargetInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTargetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTargetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) contextValidateCloudDeployTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudDeployTarget != nil {

		if swag.IsZero(m.CloudDeployTarget) { // not required
			return nil
		}

		if err := m.CloudDeployTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDeployTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudDeployTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) contextValidateCloudReplicationTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudReplicationTarget != nil {

		if swag.IsZero(m.CloudReplicationTarget) { // not required
			return nil
		}

		if err := m.CloudReplicationTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudReplicationTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudReplicationTarget")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) contextValidateObjectInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectInfo != nil {

		if swag.IsZero(m.ObjectInfo) { // not required
			return nil
		}

		if err := m.ObjectInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreInfo) contextValidateParentObjectInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentObjectInfo != nil {

		if swag.IsZero(m.ParentObjectInfo) { // not required
			return nil
		}

		if err := m.ParentObjectInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentObjectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentObjectInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreInfo) UnmarshalBinary(b []byte) error {
	var res RestoreInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
