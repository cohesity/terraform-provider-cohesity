// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SapHanaParams Recover Sap Hana environment params.
//
// Specifies the recovery options specific to SAP HANA environment.
//
// swagger:model SapHanaParams
type SapHanaParams struct {

	// Specifies the type of recover action to be performed.
	// Required: true
	// Enum: ["RecoverObjects"]
	RecoveryAction *string `json:"recoveryAction"`

	// Specifies the parameters to recover SAP HANA objects.
	// Required: true
	RecoverSapHanaParams *RecoverSapHanaParams `json:"recoverSapHanaParams"`
}

// Validate validates this sap hana params
func (m *SapHanaParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoveryAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverSapHanaParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sapHanaParamsTypeRecoveryActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RecoverObjects"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sapHanaParamsTypeRecoveryActionPropEnum = append(sapHanaParamsTypeRecoveryActionPropEnum, v)
	}
}

const (

	// SapHanaParamsRecoveryActionRecoverObjects captures enum value "RecoverObjects"
	SapHanaParamsRecoveryActionRecoverObjects string = "RecoverObjects"
)

// prop value enum
func (m *SapHanaParams) validateRecoveryActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sapHanaParamsTypeRecoveryActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SapHanaParams) validateRecoveryAction(formats strfmt.Registry) error {

	if err := validate.Required("recoveryAction", "body", m.RecoveryAction); err != nil {
		return err
	}

	// value enum
	if err := m.validateRecoveryActionEnum("recoveryAction", "body", *m.RecoveryAction); err != nil {
		return err
	}

	return nil
}

func (m *SapHanaParams) validateRecoverSapHanaParams(formats strfmt.Registry) error {

	if err := validate.Required("recoverSapHanaParams", "body", m.RecoverSapHanaParams); err != nil {
		return err
	}

	if m.RecoverSapHanaParams != nil {
		if err := m.RecoverSapHanaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverSapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverSapHanaParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sap hana params based on the context it is used
func (m *SapHanaParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecoverSapHanaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SapHanaParams) contextValidateRecoverSapHanaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverSapHanaParams != nil {

		if err := m.RecoverSapHanaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverSapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverSapHanaParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SapHanaParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SapHanaParams) UnmarshalBinary(b []byte) error {
	var res SapHanaParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
