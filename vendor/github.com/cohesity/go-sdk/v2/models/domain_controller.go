// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainController Specifies a domain controller.
//
// swagger:model DomainController
type DomainController struct {

	// Specifies the domain controller name.
	// Required: true
	Name *string `json:"name"`

	// Specifies the connection status.
	// Read Only: true
	// Enum: ["Reachable","Flapping","Incompatible","ClockSkew"]
	Status *string `json:"status,omitempty"`
}

// Validate validates this domain controller
func (m *DomainController) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainController) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var domainControllerTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Reachable","Flapping","Incompatible","ClockSkew"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainControllerTypeStatusPropEnum = append(domainControllerTypeStatusPropEnum, v)
	}
}

const (

	// DomainControllerStatusReachable captures enum value "Reachable"
	DomainControllerStatusReachable string = "Reachable"

	// DomainControllerStatusFlapping captures enum value "Flapping"
	DomainControllerStatusFlapping string = "Flapping"

	// DomainControllerStatusIncompatible captures enum value "Incompatible"
	DomainControllerStatusIncompatible string = "Incompatible"

	// DomainControllerStatusClockSkew captures enum value "ClockSkew"
	DomainControllerStatusClockSkew string = "ClockSkew"
)

// prop value enum
func (m *DomainController) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainControllerTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainController) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain controller based on the context it is used
func (m *DomainController) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainController) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainController) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainController) UnmarshalBinary(b []byte) error {
	var res DomainController
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
