// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectPolicy Protection Policy
//
// Specifies the protection policy for protecting an object.
//
// swagger:model ObjectPolicy
type ObjectPolicy struct {

	// Specifies the id of protection policy.
	// Required: true
	ID *string `json:"id"`

	// Specifies the protection type.
	// Required: true
	// Enum: ["kNative","kSnapshotManager","kPhysical","kSQL","kOracle","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsAuroraPostgres","kAwsRDSPostgres"]
	ProtectionType *string `json:"protectionType"`
}

// Validate validates this object policy
func (m *ObjectPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var objectPolicyTypeProtectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNative","kSnapshotManager","kPhysical","kSQL","kOracle","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsAuroraPostgres","kAwsRDSPostgres"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectPolicyTypeProtectionTypePropEnum = append(objectPolicyTypeProtectionTypePropEnum, v)
	}
}

const (

	// ObjectPolicyProtectionTypeKNative captures enum value "kNative"
	ObjectPolicyProtectionTypeKNative string = "kNative"

	// ObjectPolicyProtectionTypeKSnapshotManager captures enum value "kSnapshotManager"
	ObjectPolicyProtectionTypeKSnapshotManager string = "kSnapshotManager"

	// ObjectPolicyProtectionTypeKPhysical captures enum value "kPhysical"
	ObjectPolicyProtectionTypeKPhysical string = "kPhysical"

	// ObjectPolicyProtectionTypeKSQL captures enum value "kSQL"
	ObjectPolicyProtectionTypeKSQL string = "kSQL"

	// ObjectPolicyProtectionTypeKOracle captures enum value "kOracle"
	ObjectPolicyProtectionTypeKOracle string = "kOracle"

	// ObjectPolicyProtectionTypeKRDSSnapshotManager captures enum value "kRDSSnapshotManager"
	ObjectPolicyProtectionTypeKRDSSnapshotManager string = "kRDSSnapshotManager"

	// ObjectPolicyProtectionTypeKAuroraSnapshotManager captures enum value "kAuroraSnapshotManager"
	ObjectPolicyProtectionTypeKAuroraSnapshotManager string = "kAuroraSnapshotManager"

	// ObjectPolicyProtectionTypeKAwsRDSPostgresBackup captures enum value "kAwsRDSPostgresBackup"
	ObjectPolicyProtectionTypeKAwsRDSPostgresBackup string = "kAwsRDSPostgresBackup"

	// ObjectPolicyProtectionTypeKAwsAuroraPostgres captures enum value "kAwsAuroraPostgres"
	ObjectPolicyProtectionTypeKAwsAuroraPostgres string = "kAwsAuroraPostgres"

	// ObjectPolicyProtectionTypeKAwsRDSPostgres captures enum value "kAwsRDSPostgres"
	ObjectPolicyProtectionTypeKAwsRDSPostgres string = "kAwsRDSPostgres"
)

// prop value enum
func (m *ObjectPolicy) validateProtectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectPolicyTypeProtectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectPolicy) validateProtectionType(formats strfmt.Registry) error {

	if err := validate.Required("protectionType", "body", m.ProtectionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtectionTypeEnum("protectionType", "body", *m.ProtectionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this object policy based on context it is used
func (m *ObjectPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ObjectPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectPolicy) UnmarshalBinary(b []byte) error {
	var res ObjectPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
