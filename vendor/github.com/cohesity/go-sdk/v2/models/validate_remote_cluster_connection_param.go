// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidateRemoteClusterConnectionParam Specifies the parameters to update a Remote Cluster config.
//
// swagger:model ValidateRemoteClusterConnectionParam
type ValidateRemoteClusterConnectionParam struct {

	// Specifies the Cohesity user name used to connect to the Remote Cluster.
	// Required: true
	Username string `json:"username"`

	// Specifies the password for Cohesity user to use when connecting to the Remote Cluster.
	// Required: true
	Password string `json:"password"`

	// Specifies the VIP or IP addresses of the Nodes on the Remote Cluster to connect with. Hostnames are not supported.
	// Required: true
	// Min Items: 1
	NodeAddresses []string `json:"nodeAddresses"`
}

// Validate validates this validate remote cluster connection param
func (m *ValidateRemoteClusterConnectionParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeAddresses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidateRemoteClusterConnectionParam) validateUsername(formats strfmt.Registry) error {

	if err := validate.RequiredString("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *ValidateRemoteClusterConnectionParam) validatePassword(formats strfmt.Registry) error {

	if err := validate.RequiredString("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *ValidateRemoteClusterConnectionParam) validateNodeAddresses(formats strfmt.Registry) error {

	if err := validate.Required("nodeAddresses", "body", m.NodeAddresses); err != nil {
		return err
	}

	iNodeAddressesSize := int64(len(m.NodeAddresses))

	if err := validate.MinItems("nodeAddresses", "body", iNodeAddressesSize, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this validate remote cluster connection param based on context it is used
func (m *ValidateRemoteClusterConnectionParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ValidateRemoteClusterConnectionParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidateRemoteClusterConnectionParam) UnmarshalBinary(b []byte) error {
	var res ValidateRemoteClusterConnectionParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
