// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IbmVPCAPIMetadata IbmVPCAPIMetadata
//
// Specifies the API configuration for individual endpoint in IBM VPC cloud service.
//
// swagger:model IbmVPCAPIMetadata
type IbmVPCAPIMetadata struct {

	// Specifies the suffix of the API endpoint. The suffx part must be the unique endpoint which does not conttain the FQDN part and only containes the reamining part of URL. This value along with FQDN will be used to form a URL by internal services to communicate with IBM VPC service. Example: /instance_identity/v1/iam_token
	EndpointSuffix *string `json:"endpointSuffix,omitempty"`

	// Specifies the version for the above API that need to be sent from cluster to IBM VPC service. The version must be specified in YYYY-MM-DD format.
	// Pattern: ^\d{4}-\d{2}-\d{2}$
	Version *string `json:"version,omitempty"`
}

// Validate validates this ibm v p c API metadata
func (m *IbmVPCAPIMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbmVPCAPIMetadata) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.Pattern("version", "body", *m.Version, `^\d{4}-\d{2}-\d{2}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ibm v p c API metadata based on context it is used
func (m *IbmVPCAPIMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbmVPCAPIMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbmVPCAPIMetadata) UnmarshalBinary(b []byte) error {
	var res IbmVPCAPIMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
