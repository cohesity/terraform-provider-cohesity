// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonCsrRequestParams Specifies the parameters of a CSR.
//
// swagger:model CommonCsrRequestParams
type CommonCsrRequestParams struct {

	// Specifies the organization attribute, which is part of the distinguished name definition. It is used to specify the name of the company.
	// Required: true
	Organization *string `json:"organization"`

	// Specifies the organization unit attribute, which is part of the distinguished name definition. It is used to identify the specific department or business unit in the company that is owning the Cluster.
	// Required: true
	OrganizationUnit *string `json:"organizationUnit"`

	// Specifies the country attribute, which is part of the distinguished name definition. It is used to identify the country where the state is located. It is specified as two letter code defined by the ISO standard.
	// Required: true
	CountryCode *string `json:"countryCode"`

	// Specifies the state attribute, which is part of the distinguished name definition. It is used to identify the state where the city is located.
	// Required: true
	State *string `json:"state"`

	// Specifies the locality attribute, which is part of the distinguished name definition. It is used to identify the city where the company is located or the Cluster is installed.
	// Required: true
	City *string `json:"city"`

	// Specifies the algorithm to be used to generate the key pair. RSA is the default value.
	// Enum: ["rsa","ecdsa"]
	KeyType *string `json:"keyType,omitempty"`

	// Specifies the size of the keys in bits. The default is 2048 bits for the RSA keys and 256 bits for ECDSA.
	KeySizeBits *int64 `json:"keySizeBits,omitempty"`

	// Specifies the common name attribute, which is part of the distinguished name definition. Common name is used to specify a context for the certificate, for example, the name of the Cluster to which the certificate is to be assigned. Default value is the name of the Cluster.
	CommonName *string `json:"commonName,omitempty"`

	// Specifies an alternative subject name component to be included in the certificate. It is used to identify the ways the Cluster will be accessed. It is given as a comma separated list of FQDNs. The default value is the Cluster's VIP hostname.
	DNSNames []string `json:"dnsNames"`

	// Specifies an alternative subject name component to be included in the certificate. It is used to identify the ways the Cluster will be accessed. It is given as a comma separated list of IP addresses. The default value is the Cluster's VIP addresses.
	HostIps []string `json:"hostIps"`

	// Specifies an alternative subject name component to be included in the certificate. Format is a standard e-mail address, for example joe@company.com.
	EmailAddress *string `json:"emailAddress,omitempty"`

	// Specifies the Cohesity service name for which the CSR is generated. Default service name is iris.
	// Enum: ["iris"]
	ServiceName *string `json:"serviceName,omitempty"`
}

// Validate validates this common csr request params
func (m *CommonCsrRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonCsrRequestParams) validateOrganization(formats strfmt.Registry) error {

	if err := validate.Required("organization", "body", m.Organization); err != nil {
		return err
	}

	return nil
}

func (m *CommonCsrRequestParams) validateOrganizationUnit(formats strfmt.Registry) error {

	if err := validate.Required("organizationUnit", "body", m.OrganizationUnit); err != nil {
		return err
	}

	return nil
}

func (m *CommonCsrRequestParams) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *CommonCsrRequestParams) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *CommonCsrRequestParams) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

var commonCsrRequestParamsTypeKeyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rsa","ecdsa"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonCsrRequestParamsTypeKeyTypePropEnum = append(commonCsrRequestParamsTypeKeyTypePropEnum, v)
	}
}

const (

	// CommonCsrRequestParamsKeyTypeRsa captures enum value "rsa"
	CommonCsrRequestParamsKeyTypeRsa string = "rsa"

	// CommonCsrRequestParamsKeyTypeEcdsa captures enum value "ecdsa"
	CommonCsrRequestParamsKeyTypeEcdsa string = "ecdsa"
)

// prop value enum
func (m *CommonCsrRequestParams) validateKeyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonCsrRequestParamsTypeKeyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonCsrRequestParams) validateKeyType(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyType) { // not required
		return nil
	}

	// value enum
	if err := m.validateKeyTypeEnum("keyType", "body", *m.KeyType); err != nil {
		return err
	}

	return nil
}

var commonCsrRequestParamsTypeServiceNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["iris"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonCsrRequestParamsTypeServiceNamePropEnum = append(commonCsrRequestParamsTypeServiceNamePropEnum, v)
	}
}

const (

	// CommonCsrRequestParamsServiceNameIris captures enum value "iris"
	CommonCsrRequestParamsServiceNameIris string = "iris"
)

// prop value enum
func (m *CommonCsrRequestParams) validateServiceNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonCsrRequestParamsTypeServiceNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonCsrRequestParams) validateServiceName(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceName) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceNameEnum("serviceName", "body", *m.ServiceName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common csr request params based on context it is used
func (m *CommonCsrRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonCsrRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonCsrRequestParams) UnmarshalBinary(b []byte) error {
	var res CommonCsrRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
