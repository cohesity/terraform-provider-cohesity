// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpgradeConfig Upgrade config
//
// Specifies the config for upgrading connections.
//
// swagger:model UpgradeConfig
type UpgradeConfig struct {

	// Specifies the default upgrade package url for the connections unless an override is specified for a tenant or connection. All connections will be upgraded using this URL if specified.
	DefaultUpgradePackageURL *string `json:"defaultUpgradePackageUrl,omitempty"`

	// Specifies the patch package url for the connections. If no overrides below are mentioned, this URL will be used. This URL will be used to download the package by connector. Can be http or https and must be IPv4 address or hostname (must be resolvable by the connector).
	DefaultPatchPackageURL *string `json:"defaultPatchPackageUrl,omitempty"`

	// Specifies the upgrade config of tenants for which the connections
	// would be upgraded. If this is provided, it will override
	// defaultUpgradePackageUrl for the tenant.
	TenantUpgradeConfigsOverride []*TenantUpgradeConfig `json:"tenantUpgradeConfigsOverride"`

	// Specifies the upgrade config of connections to be upgraded. If the
	// tenantUpgradeConfigs is provided, connections in the
	// tenantUpgradeConfigs would be upgraded along with the connections in
	// connectionUpgradeConfigs. If this is
	// provided, it will override upgradePackageUrl and
	// tenantUpgradeConfigsOverride for the connection.
	ConnectionUpgradeConfigsOverride []*ConnectionUpgradeConfig `json:"connectionUpgradeConfigsOverride"`
}

// Validate validates this upgrade config
func (m *UpgradeConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTenantUpgradeConfigsOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionUpgradeConfigsOverride(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeConfig) validateTenantUpgradeConfigsOverride(formats strfmt.Registry) error {
	if swag.IsZero(m.TenantUpgradeConfigsOverride) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantUpgradeConfigsOverride); i++ {
		if swag.IsZero(m.TenantUpgradeConfigsOverride[i]) { // not required
			continue
		}

		if m.TenantUpgradeConfigsOverride[i] != nil {
			if err := m.TenantUpgradeConfigsOverride[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenantUpgradeConfigsOverride" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tenantUpgradeConfigsOverride" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradeConfig) validateConnectionUpgradeConfigsOverride(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionUpgradeConfigsOverride) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectionUpgradeConfigsOverride); i++ {
		if swag.IsZero(m.ConnectionUpgradeConfigsOverride[i]) { // not required
			continue
		}

		if m.ConnectionUpgradeConfigsOverride[i] != nil {
			if err := m.ConnectionUpgradeConfigsOverride[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectionUpgradeConfigsOverride" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connectionUpgradeConfigsOverride" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this upgrade config based on the context it is used
func (m *UpgradeConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTenantUpgradeConfigsOverride(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectionUpgradeConfigsOverride(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeConfig) contextValidateTenantUpgradeConfigsOverride(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TenantUpgradeConfigsOverride); i++ {

		if m.TenantUpgradeConfigsOverride[i] != nil {

			if swag.IsZero(m.TenantUpgradeConfigsOverride[i]) { // not required
				return nil
			}

			if err := m.TenantUpgradeConfigsOverride[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenantUpgradeConfigsOverride" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tenantUpgradeConfigsOverride" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradeConfig) contextValidateConnectionUpgradeConfigsOverride(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConnectionUpgradeConfigsOverride); i++ {

		if m.ConnectionUpgradeConfigsOverride[i] != nil {

			if swag.IsZero(m.ConnectionUpgradeConfigsOverride[i]) { // not required
				return nil
			}

			if err := m.ConnectionUpgradeConfigsOverride[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectionUpgradeConfigsOverride" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connectionUpgradeConfigsOverride" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeConfig) UnmarshalBinary(b []byte) error {
	var res UpgradeConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
