// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtectedObjectInfo Specifies the details of a protected object.
//
// swagger:model ProtectedObjectInfo
type ProtectedObjectInfo struct {
	ObjectSummary

	// Specifies the list of tenants that have permissions for this accessing given protected object.
	Permissions []*Tenant `json:"permissions"`

	// Specifies the object based protection info associated with this object.
	ObjectBackupConfiguration *ProtectedObjectBackupConfig `json:"objectBackupConfiguration,omitempty"`

	// Specifies the protection info associated with every object. There can be multiple instances of protection info since the same object can be protected in multiple protection groups.
	ProtectionGroupConfigurations []*ProtectedObjectGroupBackupConfig `json:"protectionGroupConfigurations"`

	// Specifies the last run information for a given object. This is the most recent run across all protection groups and object backup config.
	LastRun *ObjectProtectionRunSummary `json:"lastRun,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ProtectedObjectInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ObjectSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ObjectSummary = aO0

	// AO1
	var dataAO1 struct {
		Permissions []*Tenant `json:"permissions"`

		ObjectBackupConfiguration *ProtectedObjectBackupConfig `json:"objectBackupConfiguration,omitempty"`

		ProtectionGroupConfigurations []*ProtectedObjectGroupBackupConfig `json:"protectionGroupConfigurations"`

		LastRun *ObjectProtectionRunSummary `json:"lastRun,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Permissions = dataAO1.Permissions

	m.ObjectBackupConfiguration = dataAO1.ObjectBackupConfiguration

	m.ProtectionGroupConfigurations = dataAO1.ProtectionGroupConfigurations

	m.LastRun = dataAO1.LastRun

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ProtectedObjectInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ObjectSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Permissions []*Tenant `json:"permissions"`

		ObjectBackupConfiguration *ProtectedObjectBackupConfig `json:"objectBackupConfiguration,omitempty"`

		ProtectionGroupConfigurations []*ProtectedObjectGroupBackupConfig `json:"protectionGroupConfigurations"`

		LastRun *ObjectProtectionRunSummary `json:"lastRun,omitempty"`
	}

	dataAO1.Permissions = m.Permissions

	dataAO1.ObjectBackupConfiguration = m.ObjectBackupConfiguration

	dataAO1.ProtectionGroupConfigurations = m.ProtectionGroupConfigurations

	dataAO1.LastRun = m.LastRun

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this protected object info
func (m *ProtectedObjectInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectSummary
	if err := m.ObjectSummary.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectBackupConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionGroupConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRun(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectedObjectInfo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedObjectInfo) validateObjectBackupConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectBackupConfiguration) { // not required
		return nil
	}

	if m.ObjectBackupConfiguration != nil {
		if err := m.ObjectBackupConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectBackupConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectBackupConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectedObjectInfo) validateProtectionGroupConfigurations(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtectionGroupConfigurations) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionGroupConfigurations); i++ {
		if swag.IsZero(m.ProtectionGroupConfigurations[i]) { // not required
			continue
		}

		if m.ProtectionGroupConfigurations[i] != nil {
			if err := m.ProtectionGroupConfigurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionGroupConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionGroupConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedObjectInfo) validateLastRun(formats strfmt.Registry) error {

	if swag.IsZero(m.LastRun) { // not required
		return nil
	}

	if m.LastRun != nil {
		if err := m.LastRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastRun")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this protected object info based on the context it is used
func (m *ProtectedObjectInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectSummary
	if err := m.ObjectSummary.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectBackupConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionGroupConfigurations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectedObjectInfo) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Permissions); i++ {

		if m.Permissions[i] != nil {

			if swag.IsZero(m.Permissions[i]) { // not required
				return nil
			}

			if err := m.Permissions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedObjectInfo) contextValidateObjectBackupConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectBackupConfiguration != nil {

		if swag.IsZero(m.ObjectBackupConfiguration) { // not required
			return nil
		}

		if err := m.ObjectBackupConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectBackupConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectBackupConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectedObjectInfo) contextValidateProtectionGroupConfigurations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionGroupConfigurations); i++ {

		if m.ProtectionGroupConfigurations[i] != nil {

			if swag.IsZero(m.ProtectionGroupConfigurations[i]) { // not required
				return nil
			}

			if err := m.ProtectionGroupConfigurations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionGroupConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionGroupConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProtectedObjectInfo) contextValidateLastRun(ctx context.Context, formats strfmt.Registry) error {

	if m.LastRun != nil {

		if swag.IsZero(m.LastRun) { // not required
			return nil
		}

		if err := m.LastRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastRun")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectedObjectInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectedObjectInfo) UnmarshalBinary(b []byte) error {
	var res ProtectedObjectInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
