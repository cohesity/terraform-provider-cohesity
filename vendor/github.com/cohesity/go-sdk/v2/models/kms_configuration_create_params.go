// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KmsConfigurationCreateParams Parameters to add key management system(KMS) on the cluster.
//
// swagger:model KmsConfigurationCreateParams
type KmsConfigurationCreateParams struct {

	// Type of KMS. 'InternalKms' indicates the internal cluster KMS. 'AwsKms' indicates AWS KMS. 'KmipKms' indicates any KMIP compliant KMS.
	// Required: true
	// Enum: ["InternalKms","AwsKms","KmipKms"]
	Type *string `json:"type"`

	// Specifies the usage type of the kms config. 'kArchival' indicates this is used for regular archival. 'kRpaasArchival' indicates this is used for RPaaS only.
	// Enum: ["kArchival","kRpaasArchival"]
	UsageType *string `json:"usageType,omitempty"`

	// Specifies the ownership context of the kms config. 'Local' indicates this is used for regular archival. 'FortKnox' indicates this is used for FortKnox only.
	// Enum: ["Local","FortKnox"]
	OwnershipContext *string `json:"ownershipContext,omitempty"`

	// AWS KMS configuration.
	AwsKmsParams *AwsKmsConfiguration `json:"awsKmsParams,omitempty"`

	KmsConfigurationAddUpdateParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *KmsConfigurationCreateParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Type *string `json:"type"`

		UsageType *string `json:"usageType,omitempty"`

		OwnershipContext *string `json:"ownershipContext,omitempty"`

		AwsKmsParams *AwsKmsConfiguration `json:"awsKmsParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Type = dataAO0.Type

	m.UsageType = dataAO0.UsageType

	m.OwnershipContext = dataAO0.OwnershipContext

	m.AwsKmsParams = dataAO0.AwsKmsParams

	// AO1
	var aO1 KmsConfigurationAddUpdateParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.KmsConfigurationAddUpdateParams = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m KmsConfigurationCreateParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Type *string `json:"type"`

		UsageType *string `json:"usageType,omitempty"`

		OwnershipContext *string `json:"ownershipContext,omitempty"`

		AwsKmsParams *AwsKmsConfiguration `json:"awsKmsParams,omitempty"`
	}

	dataAO0.Type = m.Type

	dataAO0.UsageType = m.UsageType

	dataAO0.OwnershipContext = m.OwnershipContext

	dataAO0.AwsKmsParams = m.AwsKmsParams

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.KmsConfigurationAddUpdateParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this kms configuration create params
func (m *KmsConfigurationCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnershipContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsKmsParams(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with KmsConfigurationAddUpdateParams
	if err := m.KmsConfigurationAddUpdateParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var kmsConfigurationCreateParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InternalKms","AwsKms","KmipKms"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kmsConfigurationCreateParamsTypeTypePropEnum = append(kmsConfigurationCreateParamsTypeTypePropEnum, v)
	}
}

// property enum
func (m *KmsConfigurationCreateParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kmsConfigurationCreateParamsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KmsConfigurationCreateParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var kmsConfigurationCreateParamsTypeUsageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kArchival","kRpaasArchival"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kmsConfigurationCreateParamsTypeUsageTypePropEnum = append(kmsConfigurationCreateParamsTypeUsageTypePropEnum, v)
	}
}

// property enum
func (m *KmsConfigurationCreateParams) validateUsageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kmsConfigurationCreateParamsTypeUsageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KmsConfigurationCreateParams) validateUsageType(formats strfmt.Registry) error {

	if swag.IsZero(m.UsageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsageTypeEnum("usageType", "body", *m.UsageType); err != nil {
		return err
	}

	return nil
}

var kmsConfigurationCreateParamsTypeOwnershipContextPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Local","FortKnox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kmsConfigurationCreateParamsTypeOwnershipContextPropEnum = append(kmsConfigurationCreateParamsTypeOwnershipContextPropEnum, v)
	}
}

// property enum
func (m *KmsConfigurationCreateParams) validateOwnershipContextEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kmsConfigurationCreateParamsTypeOwnershipContextPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KmsConfigurationCreateParams) validateOwnershipContext(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnershipContext) { // not required
		return nil
	}

	// value enum
	if err := m.validateOwnershipContextEnum("ownershipContext", "body", *m.OwnershipContext); err != nil {
		return err
	}

	return nil
}

func (m *KmsConfigurationCreateParams) validateAwsKmsParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsKmsParams) { // not required
		return nil
	}

	if m.AwsKmsParams != nil {
		if err := m.AwsKmsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsKmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsKmsParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kms configuration create params based on the context it is used
func (m *KmsConfigurationCreateParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsKmsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with KmsConfigurationAddUpdateParams
	if err := m.KmsConfigurationAddUpdateParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmsConfigurationCreateParams) contextValidateAwsKmsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsKmsParams != nil {

		if swag.IsZero(m.AwsKmsParams) { // not required
			return nil
		}

		if err := m.AwsKmsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsKmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsKmsParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KmsConfigurationCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KmsConfigurationCreateParams) UnmarshalBinary(b []byte) error {
	var res KmsConfigurationCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
