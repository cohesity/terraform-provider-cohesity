// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityConfigAccountLockout Specifies security config for account lockout.
//
// swagger:model SecurityConfigAccountLockout
type SecurityConfigAccountLockout struct {

	// Specifies the maximum number of consecutive fail login attempts.
	// Minimum: 1
	MaxFailedLoginAttempts *int32 `json:"maxFailedLoginAttempts,omitempty"`

	// Specifies the time duration within which the consecutive failed login attempts causes a local user account to be locked and the lockout duration time due to that.
	// Minimum: 1
	FailedLoginLockTimeDurationMins *int32 `json:"failedLoginLockTimeDurationMins,omitempty"`

	// Specifies the lockout inactivity time range in days.
	// Maximum: 365
	// Minimum: 1
	InactivityTimeDays *int32 `json:"inactivityTimeDays,omitempty"`
}

// Validate validates this security config account lockout
func (m *SecurityConfigAccountLockout) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxFailedLoginAttempts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedLoginLockTimeDurationMins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInactivityTimeDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfigAccountLockout) validateMaxFailedLoginAttempts(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxFailedLoginAttempts) { // not required
		return nil
	}

	if err := validate.MinimumInt("maxFailedLoginAttempts", "body", int64(*m.MaxFailedLoginAttempts), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfigAccountLockout) validateFailedLoginLockTimeDurationMins(formats strfmt.Registry) error {
	if swag.IsZero(m.FailedLoginLockTimeDurationMins) { // not required
		return nil
	}

	if err := validate.MinimumInt("failedLoginLockTimeDurationMins", "body", int64(*m.FailedLoginLockTimeDurationMins), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfigAccountLockout) validateInactivityTimeDays(formats strfmt.Registry) error {
	if swag.IsZero(m.InactivityTimeDays) { // not required
		return nil
	}

	if err := validate.MinimumInt("inactivityTimeDays", "body", int64(*m.InactivityTimeDays), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("inactivityTimeDays", "body", int64(*m.InactivityTimeDays), 365, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this security config account lockout based on context it is used
func (m *SecurityConfigAccountLockout) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfigAccountLockout) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfigAccountLockout) UnmarshalBinary(b []byte) error {
	var res SecurityConfigAccountLockout
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
