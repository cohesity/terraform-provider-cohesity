// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NasThrottlingConfig Nas Source and Protection Throttling Configuration
//
// Specifies the source throttling parameters to be used during full or incremental backup of the NAS source.
//
// swagger:model NasThrottlingConfig
type NasThrottlingConfig struct {

	// Specifies the throttling configuration during full backup run.
	FullBackupConfig *NasFullThrottlingConfig `json:"fullBackupConfig,omitempty"`

	// Specifies the throttling configuration during incremental backup run.
	IncrementalBackupConfig *NasIncrementalThrottlingConfig `json:"incrementalBackupConfig,omitempty"`
}

// Validate validates this nas throttling config
func (m *NasThrottlingConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFullBackupConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalBackupConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NasThrottlingConfig) validateFullBackupConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.FullBackupConfig) { // not required
		return nil
	}

	if m.FullBackupConfig != nil {
		if err := m.FullBackupConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullBackupConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullBackupConfig")
			}
			return err
		}
	}

	return nil
}

func (m *NasThrottlingConfig) validateIncrementalBackupConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalBackupConfig) { // not required
		return nil
	}

	if m.IncrementalBackupConfig != nil {
		if err := m.IncrementalBackupConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incrementalBackupConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incrementalBackupConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nas throttling config based on the context it is used
func (m *NasThrottlingConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFullBackupConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalBackupConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NasThrottlingConfig) contextValidateFullBackupConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.FullBackupConfig != nil {

		if swag.IsZero(m.FullBackupConfig) { // not required
			return nil
		}

		if err := m.FullBackupConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullBackupConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullBackupConfig")
			}
			return err
		}
	}

	return nil
}

func (m *NasThrottlingConfig) contextValidateIncrementalBackupConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.IncrementalBackupConfig != nil {

		if swag.IsZero(m.IncrementalBackupConfig) { // not required
			return nil
		}

		if err := m.IncrementalBackupConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incrementalBackupConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incrementalBackupConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NasThrottlingConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NasThrottlingConfig) UnmarshalBinary(b []byte) error {
	var res NasThrottlingConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
