// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArchivalAzureExternalTargetParams Azure External Target Request Params for archival purpose type.
//
// Specifies the common parameters which are specific to Azure related External Targets.
//
// swagger:model ArchivalAzureExternalTargetParams
type ArchivalAzureExternalTargetParams struct {
	CommonArchivalAzureExternalTargetParams

	// cool blob params
	CoolBlobParams *AzureCoolBlobParams `json:"coolBlobParams,omitempty"`

	// hot blob params
	HotBlobParams *AzureHotBlobParams `json:"hotBlobParams,omitempty"`

	// archive blob params
	ArchiveBlobParams *AzureArchiveBlobParams `json:"archiveBlobParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ArchivalAzureExternalTargetParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonArchivalAzureExternalTargetParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonArchivalAzureExternalTargetParams = aO0

	// AO1
	var dataAO1 struct {
		CoolBlobParams *AzureCoolBlobParams `json:"coolBlobParams,omitempty"`

		HotBlobParams *AzureHotBlobParams `json:"hotBlobParams,omitempty"`

		ArchiveBlobParams *AzureArchiveBlobParams `json:"archiveBlobParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CoolBlobParams = dataAO1.CoolBlobParams

	m.HotBlobParams = dataAO1.HotBlobParams

	m.ArchiveBlobParams = dataAO1.ArchiveBlobParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ArchivalAzureExternalTargetParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonArchivalAzureExternalTargetParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CoolBlobParams *AzureCoolBlobParams `json:"coolBlobParams,omitempty"`

		HotBlobParams *AzureHotBlobParams `json:"hotBlobParams,omitempty"`

		ArchiveBlobParams *AzureArchiveBlobParams `json:"archiveBlobParams,omitempty"`
	}

	dataAO1.CoolBlobParams = m.CoolBlobParams

	dataAO1.HotBlobParams = m.HotBlobParams

	dataAO1.ArchiveBlobParams = m.ArchiveBlobParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this archival azure external target params
func (m *ArchivalAzureExternalTargetParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonArchivalAzureExternalTargetParams
	if err := m.CommonArchivalAzureExternalTargetParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoolBlobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHotBlobParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchiveBlobParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivalAzureExternalTargetParams) validateCoolBlobParams(formats strfmt.Registry) error {

	if swag.IsZero(m.CoolBlobParams) { // not required
		return nil
	}

	if m.CoolBlobParams != nil {
		if err := m.CoolBlobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coolBlobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coolBlobParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAzureExternalTargetParams) validateHotBlobParams(formats strfmt.Registry) error {

	if swag.IsZero(m.HotBlobParams) { // not required
		return nil
	}

	if m.HotBlobParams != nil {
		if err := m.HotBlobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hotBlobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hotBlobParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAzureExternalTargetParams) validateArchiveBlobParams(formats strfmt.Registry) error {

	if swag.IsZero(m.ArchiveBlobParams) { // not required
		return nil
	}

	if m.ArchiveBlobParams != nil {
		if err := m.ArchiveBlobParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveBlobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archiveBlobParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this archival azure external target params based on the context it is used
func (m *ArchivalAzureExternalTargetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonArchivalAzureExternalTargetParams
	if err := m.CommonArchivalAzureExternalTargetParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCoolBlobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHotBlobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchiveBlobParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivalAzureExternalTargetParams) contextValidateCoolBlobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CoolBlobParams != nil {

		if swag.IsZero(m.CoolBlobParams) { // not required
			return nil
		}

		if err := m.CoolBlobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coolBlobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coolBlobParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAzureExternalTargetParams) contextValidateHotBlobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HotBlobParams != nil {

		if swag.IsZero(m.HotBlobParams) { // not required
			return nil
		}

		if err := m.HotBlobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hotBlobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hotBlobParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAzureExternalTargetParams) contextValidateArchiveBlobParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchiveBlobParams != nil {

		if swag.IsZero(m.ArchiveBlobParams) { // not required
			return nil
		}

		if err := m.ArchiveBlobParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveBlobParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archiveBlobParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArchivalAzureExternalTargetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchivalAzureExternalTargetParams) UnmarshalBinary(b []byte) error {
	var res ArchivalAzureExternalTargetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
