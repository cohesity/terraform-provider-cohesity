// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TenantAssignmentProperties TenantAssignmentProperties
//
// List of all the assigned properties to a Tenant.
//
// swagger:model TenantAssignmentProperties
type TenantAssignmentProperties struct {

	// storage domains
	StorageDomains *StorageDomains `json:"storageDomains,omitempty"`

	// objects
	Objects TenantAssignmentTypeIntegerID `json:"objects,omitempty"`

	// vlans
	Vlans TenantAssignmentTypeStringID `json:"vlans,omitempty"`

	// views
	Views *GetViewsResult `json:"views,omitempty"`

	// policies
	Policies *ProtectionPolicyResponseWithPagination `json:"policies,omitempty"`
}

// Validate validates this tenant assignment properties
func (m *TenantAssignmentProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViews(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantAssignmentProperties) validateStorageDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageDomains) { // not required
		return nil
	}

	if m.StorageDomains != nil {
		if err := m.StorageDomains.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageDomains")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageDomains")
			}
			return err
		}
	}

	return nil
}

func (m *TenantAssignmentProperties) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	if err := m.Objects.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("objects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("objects")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentProperties) validateVlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlans) { // not required
		return nil
	}

	if err := m.Vlans.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vlans")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vlans")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentProperties) validateViews(formats strfmt.Registry) error {
	if swag.IsZero(m.Views) { // not required
		return nil
	}

	if m.Views != nil {
		if err := m.Views.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("views")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("views")
			}
			return err
		}
	}

	return nil
}

func (m *TenantAssignmentProperties) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	if m.Policies != nil {
		if err := m.Policies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policies")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tenant assignment properties based on the context it is used
func (m *TenantAssignmentProperties) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViews(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantAssignmentProperties) contextValidateStorageDomains(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageDomains != nil {

		if swag.IsZero(m.StorageDomains) { // not required
			return nil
		}

		if err := m.StorageDomains.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageDomains")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageDomains")
			}
			return err
		}
	}

	return nil
}

func (m *TenantAssignmentProperties) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Objects.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("objects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("objects")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentProperties) contextValidateVlans(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Vlans.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vlans")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vlans")
		}
		return err
	}

	return nil
}

func (m *TenantAssignmentProperties) contextValidateViews(ctx context.Context, formats strfmt.Registry) error {

	if m.Views != nil {

		if swag.IsZero(m.Views) { // not required
			return nil
		}

		if err := m.Views.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("views")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("views")
			}
			return err
		}
	}

	return nil
}

func (m *TenantAssignmentProperties) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	if m.Policies != nil {

		if swag.IsZero(m.Policies) { // not required
			return nil
		}

		if err := m.Policies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policies")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenantAssignmentProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantAssignmentProperties) UnmarshalBinary(b []byte) error {
	var res TenantAssignmentProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
