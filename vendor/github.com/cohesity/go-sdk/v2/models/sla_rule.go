// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SLARule Specifies an SLA rule for a specific Protection Group run type.
//
// swagger:model SlaRule
type SLARule struct {

	// Specifies the type of run this rule should apply to.
	// Enum: ["kIncremental","kFull","kLog"]
	BackupRunType *string `json:"backupRunType,omitempty"`

	// Specifies the number of minutes allotted to a run of the specified type before SLA is considered violated.
	// Minimum: 1
	SLAMinutes *int64 `json:"slaMinutes,omitempty"`
}

// Validate validates this Sla rule
func (m *SLARule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSLAMinutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var slaRuleTypeBackupRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kIncremental","kFull","kLog"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		slaRuleTypeBackupRunTypePropEnum = append(slaRuleTypeBackupRunTypePropEnum, v)
	}
}

const (

	// SLARuleBackupRunTypeKIncremental captures enum value "kIncremental"
	SLARuleBackupRunTypeKIncremental string = "kIncremental"

	// SLARuleBackupRunTypeKFull captures enum value "kFull"
	SLARuleBackupRunTypeKFull string = "kFull"

	// SLARuleBackupRunTypeKLog captures enum value "kLog"
	SLARuleBackupRunTypeKLog string = "kLog"
)

// prop value enum
func (m *SLARule) validateBackupRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, slaRuleTypeBackupRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SLARule) validateBackupRunType(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRunType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackupRunTypeEnum("backupRunType", "body", *m.BackupRunType); err != nil {
		return err
	}

	return nil
}

func (m *SLARule) validateSLAMinutes(formats strfmt.Registry) error {
	if swag.IsZero(m.SLAMinutes) { // not required
		return nil
	}

	if err := validate.MinimumInt("slaMinutes", "body", *m.SLAMinutes, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Sla rule based on context it is used
func (m *SLARule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SLARule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SLARule) UnmarshalBinary(b []byte) error {
	var res SLARule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
