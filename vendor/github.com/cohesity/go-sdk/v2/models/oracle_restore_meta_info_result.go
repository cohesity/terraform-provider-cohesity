// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleRestoreMetaInfoResult OracleRestoreMetaInfoResult
//
// Result to store oracle meta-info from snapshot id and other oracle params.
//
// swagger:model OracleRestoreMetaInfoResult
type OracleRestoreMetaInfoResult struct {

	// Specifies map for restricted pfile params.
	RestrictedPfileParamMap []*KeyValuePair `json:"restrictedPfileParamMap"`

	// Specifies map for inherited pfile params.
	InheritedPfileParamMap []*KeyValuePair `json:"inheritedPfileParamMap"`

	// Specifies map for cohesity controlled pfile params.
	CohesityPfileParamMap []*KeyValuePair `json:"cohesityPfileParamMap"`
}

// Validate validates this oracle restore meta info result
func (m *OracleRestoreMetaInfoResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestrictedPfileParamMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInheritedPfileParamMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCohesityPfileParamMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRestoreMetaInfoResult) validateRestrictedPfileParamMap(formats strfmt.Registry) error {
	if swag.IsZero(m.RestrictedPfileParamMap) { // not required
		return nil
	}

	for i := 0; i < len(m.RestrictedPfileParamMap); i++ {
		if swag.IsZero(m.RestrictedPfileParamMap[i]) { // not required
			continue
		}

		if m.RestrictedPfileParamMap[i] != nil {
			if err := m.RestrictedPfileParamMap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restrictedPfileParamMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restrictedPfileParamMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRestoreMetaInfoResult) validateInheritedPfileParamMap(formats strfmt.Registry) error {
	if swag.IsZero(m.InheritedPfileParamMap) { // not required
		return nil
	}

	for i := 0; i < len(m.InheritedPfileParamMap); i++ {
		if swag.IsZero(m.InheritedPfileParamMap[i]) { // not required
			continue
		}

		if m.InheritedPfileParamMap[i] != nil {
			if err := m.InheritedPfileParamMap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inheritedPfileParamMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inheritedPfileParamMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRestoreMetaInfoResult) validateCohesityPfileParamMap(formats strfmt.Registry) error {
	if swag.IsZero(m.CohesityPfileParamMap) { // not required
		return nil
	}

	for i := 0; i < len(m.CohesityPfileParamMap); i++ {
		if swag.IsZero(m.CohesityPfileParamMap[i]) { // not required
			continue
		}

		if m.CohesityPfileParamMap[i] != nil {
			if err := m.CohesityPfileParamMap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cohesityPfileParamMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cohesityPfileParamMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this oracle restore meta info result based on the context it is used
func (m *OracleRestoreMetaInfoResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRestrictedPfileParamMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInheritedPfileParamMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCohesityPfileParamMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRestoreMetaInfoResult) contextValidateRestrictedPfileParamMap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestrictedPfileParamMap); i++ {

		if m.RestrictedPfileParamMap[i] != nil {

			if swag.IsZero(m.RestrictedPfileParamMap[i]) { // not required
				return nil
			}

			if err := m.RestrictedPfileParamMap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restrictedPfileParamMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restrictedPfileParamMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRestoreMetaInfoResult) contextValidateInheritedPfileParamMap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InheritedPfileParamMap); i++ {

		if m.InheritedPfileParamMap[i] != nil {

			if swag.IsZero(m.InheritedPfileParamMap[i]) { // not required
				return nil
			}

			if err := m.InheritedPfileParamMap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inheritedPfileParamMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inheritedPfileParamMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRestoreMetaInfoResult) contextValidateCohesityPfileParamMap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CohesityPfileParamMap); i++ {

		if m.CohesityPfileParamMap[i] != nil {

			if swag.IsZero(m.CohesityPfileParamMap[i]) { // not required
				return nil
			}

			if err := m.CohesityPfileParamMap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cohesityPfileParamMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cohesityPfileParamMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRestoreMetaInfoResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRestoreMetaInfoResult) UnmarshalBinary(b []byte) error {
	var res OracleRestoreMetaInfoResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
