// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HyperVDiskInfo HyperV Disk Information
//
// Specifies information about a disk to be filtered.
//
// swagger:model HyperVDiskInfo
type HyperVDiskInfo struct {

	// Specifies the disk controller type.
	// Required: true
	// Enum: ["scsi","ide"]
	ControllerType *string `json:"controllerType"`

	// Specifies the disk controller number.
	// Required: true
	ControllerNumber *int64 `json:"controllerNumber"`

	// Specifies the disk index number.
	// Required: true
	UnitNumber *int64 `json:"unitNumber"`
}

// Validate validates this hyper v disk info
func (m *HyperVDiskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hyperVDiskInfoTypeControllerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["scsi","ide"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hyperVDiskInfoTypeControllerTypePropEnum = append(hyperVDiskInfoTypeControllerTypePropEnum, v)
	}
}

const (

	// HyperVDiskInfoControllerTypeScsi captures enum value "scsi"
	HyperVDiskInfoControllerTypeScsi string = "scsi"

	// HyperVDiskInfoControllerTypeIde captures enum value "ide"
	HyperVDiskInfoControllerTypeIde string = "ide"
)

// prop value enum
func (m *HyperVDiskInfo) validateControllerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hyperVDiskInfoTypeControllerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HyperVDiskInfo) validateControllerType(formats strfmt.Registry) error {

	if err := validate.Required("controllerType", "body", m.ControllerType); err != nil {
		return err
	}

	// value enum
	if err := m.validateControllerTypeEnum("controllerType", "body", *m.ControllerType); err != nil {
		return err
	}

	return nil
}

func (m *HyperVDiskInfo) validateControllerNumber(formats strfmt.Registry) error {

	if err := validate.Required("controllerNumber", "body", m.ControllerNumber); err != nil {
		return err
	}

	return nil
}

func (m *HyperVDiskInfo) validateUnitNumber(formats strfmt.Registry) error {

	if err := validate.Required("unitNumber", "body", m.UnitNumber); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hyper v disk info based on context it is used
func (m *HyperVDiskInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HyperVDiskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperVDiskInfo) UnmarshalBinary(b []byte) error {
	var res HyperVDiskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
