// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReplicationParams Specifies the replication config for a Remote Cluster.
//
// swagger:model ReplicationParams
type ReplicationParams struct {

	// Specifies a list of Storage Domain pairs.
	StorageDomainPairs []*StorageDomainPair `json:"storageDomainPairs,omitempty"`

	// Specifies if all endpoints on Remote Cluster are reachable.
	AllEndpointsReachable *bool `json:"allEndpointsReachable,omitempty"`

	// Specifies whether to compress the outbound data when transferring the replication data over the network to the Remote Cluster.
	CompressionEnabled *bool `json:"compressionEnabled,omitempty"`

	// Specifies the encryption key used for encrypting the replication data from a local Cluster to a Remote Cluster. If a key is not specified, replication traffic encryption is disabled. When Snapshots are replicated from a local Cluster to a Remote Cluster, the encryption key specified on the local Cluster must be the same as the key specified on the Remote Cluster.
	EncryptionKey *string `json:"encryptionKey,omitempty"`

	// Specifies settings for limiting the data transfer rate between the local and Remote Clusters.
	BandwidthLimit *BandwidthThrottling `json:"bandwidthLimit,omitempty"`
}

// Validate validates this replication params
func (m *ReplicationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageDomainPairs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBandwidthLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationParams) validateStorageDomainPairs(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageDomainPairs) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageDomainPairs); i++ {
		if swag.IsZero(m.StorageDomainPairs[i]) { // not required
			continue
		}

		if m.StorageDomainPairs[i] != nil {
			if err := m.StorageDomainPairs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageDomainPairs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageDomainPairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationParams) validateBandwidthLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.BandwidthLimit) { // not required
		return nil
	}

	if m.BandwidthLimit != nil {
		if err := m.BandwidthLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bandwidthLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bandwidthLimit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replication params based on the context it is used
func (m *ReplicationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageDomainPairs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBandwidthLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationParams) contextValidateStorageDomainPairs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageDomainPairs); i++ {

		if m.StorageDomainPairs[i] != nil {

			if swag.IsZero(m.StorageDomainPairs[i]) { // not required
				return nil
			}

			if err := m.StorageDomainPairs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageDomainPairs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageDomainPairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationParams) contextValidateBandwidthLimit(ctx context.Context, formats strfmt.Registry) error {

	if m.BandwidthLimit != nil {

		if swag.IsZero(m.BandwidthLimit) { // not required
			return nil
		}

		if err := m.BandwidthLimit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bandwidthLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bandwidthLimit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationParams) UnmarshalBinary(b []byte) error {
	var res ReplicationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
