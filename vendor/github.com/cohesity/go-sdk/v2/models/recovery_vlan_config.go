// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryVlanConfig Recovery VLAN config.
//
// Specifies the VLAN configuration for Recovery.
//
// swagger:model RecoveryVlanConfig
type RecoveryVlanConfig struct {

	// If this is set, then the Cohesity host name or the IP address associated with this vlan is used for mounting Cohesity's view on the remote host.
	ID *int32 `json:"id,omitempty"`

	// If this is set to true, then even if VLANs are configured on the system, the partition VIPs will be used for the Recovery.
	DisableVlan *bool `json:"disableVlan,omitempty"`

	// Interface group to use for Recovery.
	// Read Only: true
	InterfaceName *string `json:"interfaceName,omitempty"`
}

// Validate validates this recovery vlan config
func (m *RecoveryVlanConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this recovery vlan config based on the context it is used
func (m *RecoveryVlanConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInterfaceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryVlanConfig) contextValidateInterfaceName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "interfaceName", "body", m.InterfaceName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryVlanConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryVlanConfig) UnmarshalBinary(b []byte) error {
	var res RecoveryVlanConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
