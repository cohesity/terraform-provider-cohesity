// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradeLogsResponse "Response containing upgrade logs for services."
//
// swagger:model UpgradeLogsResponse
type UpgradeLogsResponse struct {

	// Helios upgrade version.
	HeliosUpgradeVersion string `json:"heliosUpgradeVersion,omitempty"`

	// "The overall upgrade status"
	// "(e.g., Success, InProgress, Failed, Pending)."
	//
	// Enum: ["Success","Failed","InProgress","Pending"]
	HeliosUpgradeStatus string `json:"heliosUpgradeStatus,omitempty"`

	// List of service upgrade logs.
	Services []*ServiceUpgradeLog `json:"services"`
}

// Validate validates this upgrade logs response
func (m *UpgradeLogsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeliosUpgradeStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradeLogsResponseTypeHeliosUpgradeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Failed","InProgress","Pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeLogsResponseTypeHeliosUpgradeStatusPropEnum = append(upgradeLogsResponseTypeHeliosUpgradeStatusPropEnum, v)
	}
}

const (

	// UpgradeLogsResponseHeliosUpgradeStatusSuccess captures enum value "Success"
	UpgradeLogsResponseHeliosUpgradeStatusSuccess string = "Success"

	// UpgradeLogsResponseHeliosUpgradeStatusFailed captures enum value "Failed"
	UpgradeLogsResponseHeliosUpgradeStatusFailed string = "Failed"

	// UpgradeLogsResponseHeliosUpgradeStatusInProgress captures enum value "InProgress"
	UpgradeLogsResponseHeliosUpgradeStatusInProgress string = "InProgress"

	// UpgradeLogsResponseHeliosUpgradeStatusPending captures enum value "Pending"
	UpgradeLogsResponseHeliosUpgradeStatusPending string = "Pending"
)

// prop value enum
func (m *UpgradeLogsResponse) validateHeliosUpgradeStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeLogsResponseTypeHeliosUpgradeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeLogsResponse) validateHeliosUpgradeStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HeliosUpgradeStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateHeliosUpgradeStatusEnum("heliosUpgradeStatus", "body", m.HeliosUpgradeStatus); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeLogsResponse) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this upgrade logs response based on the context it is used
func (m *UpgradeLogsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeLogsResponse) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {

			if swag.IsZero(m.Services[i]) { // not required
				return nil
			}

			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeLogsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeLogsResponse) UnmarshalBinary(b []byte) error {
	var res UpgradeLogsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
