// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SourceRegistrationPatchRequestParams Specifies the parameters to partially update the registration.
//
// swagger:model SourceRegistrationPatchRequestParams
type SourceRegistrationPatchRequestParams struct {

	// Specifies the environment type of the Protection Source to be patched. Currently the only environment supported is kCassandra
	// Required: true
	// Enum: ["kVMware","kHyperV","kAcropolis","kKVM","kAWS","kGCP","kAzure","kPhysical","kPure","kIbmFlashSystem","kNimble","kNetapp","kGenericNas","kIsilon","kFlashBlade","kGPFS","kElastifile","kO365","kHyperFlex","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSQL","kOracle","kSfdc"]
	Environment *string `json:"environment"`

	// Specifies the parameters to patch the registration of a Cassandra Protection Source.
	CassandraParams *CassandraSourceRegistrationPatchParams `json:"cassandraParams,omitempty"`
}

// Validate validates this source registration patch request params
func (m *SourceRegistrationPatchRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sourceRegistrationPatchRequestParamsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kAcropolis","kKVM","kAWS","kGCP","kAzure","kPhysical","kPure","kIbmFlashSystem","kNimble","kNetapp","kGenericNas","kIsilon","kFlashBlade","kGPFS","kElastifile","kO365","kHyperFlex","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSQL","kOracle","kSfdc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sourceRegistrationPatchRequestParamsTypeEnvironmentPropEnum = append(sourceRegistrationPatchRequestParamsTypeEnvironmentPropEnum, v)
	}
}

const (

	// SourceRegistrationPatchRequestParamsEnvironmentKVMware captures enum value "kVMware"
	SourceRegistrationPatchRequestParamsEnvironmentKVMware string = "kVMware"

	// SourceRegistrationPatchRequestParamsEnvironmentKHyperV captures enum value "kHyperV"
	SourceRegistrationPatchRequestParamsEnvironmentKHyperV string = "kHyperV"

	// SourceRegistrationPatchRequestParamsEnvironmentKAcropolis captures enum value "kAcropolis"
	SourceRegistrationPatchRequestParamsEnvironmentKAcropolis string = "kAcropolis"

	// SourceRegistrationPatchRequestParamsEnvironmentKKVM captures enum value "kKVM"
	SourceRegistrationPatchRequestParamsEnvironmentKKVM string = "kKVM"

	// SourceRegistrationPatchRequestParamsEnvironmentKAWS captures enum value "kAWS"
	SourceRegistrationPatchRequestParamsEnvironmentKAWS string = "kAWS"

	// SourceRegistrationPatchRequestParamsEnvironmentKGCP captures enum value "kGCP"
	SourceRegistrationPatchRequestParamsEnvironmentKGCP string = "kGCP"

	// SourceRegistrationPatchRequestParamsEnvironmentKAzure captures enum value "kAzure"
	SourceRegistrationPatchRequestParamsEnvironmentKAzure string = "kAzure"

	// SourceRegistrationPatchRequestParamsEnvironmentKPhysical captures enum value "kPhysical"
	SourceRegistrationPatchRequestParamsEnvironmentKPhysical string = "kPhysical"

	// SourceRegistrationPatchRequestParamsEnvironmentKPure captures enum value "kPure"
	SourceRegistrationPatchRequestParamsEnvironmentKPure string = "kPure"

	// SourceRegistrationPatchRequestParamsEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	SourceRegistrationPatchRequestParamsEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// SourceRegistrationPatchRequestParamsEnvironmentKNimble captures enum value "kNimble"
	SourceRegistrationPatchRequestParamsEnvironmentKNimble string = "kNimble"

	// SourceRegistrationPatchRequestParamsEnvironmentKNetapp captures enum value "kNetapp"
	SourceRegistrationPatchRequestParamsEnvironmentKNetapp string = "kNetapp"

	// SourceRegistrationPatchRequestParamsEnvironmentKGenericNas captures enum value "kGenericNas"
	SourceRegistrationPatchRequestParamsEnvironmentKGenericNas string = "kGenericNas"

	// SourceRegistrationPatchRequestParamsEnvironmentKIsilon captures enum value "kIsilon"
	SourceRegistrationPatchRequestParamsEnvironmentKIsilon string = "kIsilon"

	// SourceRegistrationPatchRequestParamsEnvironmentKFlashBlade captures enum value "kFlashBlade"
	SourceRegistrationPatchRequestParamsEnvironmentKFlashBlade string = "kFlashBlade"

	// SourceRegistrationPatchRequestParamsEnvironmentKGPFS captures enum value "kGPFS"
	SourceRegistrationPatchRequestParamsEnvironmentKGPFS string = "kGPFS"

	// SourceRegistrationPatchRequestParamsEnvironmentKElastifile captures enum value "kElastifile"
	SourceRegistrationPatchRequestParamsEnvironmentKElastifile string = "kElastifile"

	// SourceRegistrationPatchRequestParamsEnvironmentKO365 captures enum value "kO365"
	SourceRegistrationPatchRequestParamsEnvironmentKO365 string = "kO365"

	// SourceRegistrationPatchRequestParamsEnvironmentKHyperFlex captures enum value "kHyperFlex"
	SourceRegistrationPatchRequestParamsEnvironmentKHyperFlex string = "kHyperFlex"

	// SourceRegistrationPatchRequestParamsEnvironmentKKubernetes captures enum value "kKubernetes"
	SourceRegistrationPatchRequestParamsEnvironmentKKubernetes string = "kKubernetes"

	// SourceRegistrationPatchRequestParamsEnvironmentKCassandra captures enum value "kCassandra"
	SourceRegistrationPatchRequestParamsEnvironmentKCassandra string = "kCassandra"

	// SourceRegistrationPatchRequestParamsEnvironmentKMongoDB captures enum value "kMongoDB"
	SourceRegistrationPatchRequestParamsEnvironmentKMongoDB string = "kMongoDB"

	// SourceRegistrationPatchRequestParamsEnvironmentKCouchbase captures enum value "kCouchbase"
	SourceRegistrationPatchRequestParamsEnvironmentKCouchbase string = "kCouchbase"

	// SourceRegistrationPatchRequestParamsEnvironmentKHdfs captures enum value "kHdfs"
	SourceRegistrationPatchRequestParamsEnvironmentKHdfs string = "kHdfs"

	// SourceRegistrationPatchRequestParamsEnvironmentKHive captures enum value "kHive"
	SourceRegistrationPatchRequestParamsEnvironmentKHive string = "kHive"

	// SourceRegistrationPatchRequestParamsEnvironmentKHBase captures enum value "kHBase"
	SourceRegistrationPatchRequestParamsEnvironmentKHBase string = "kHBase"

	// SourceRegistrationPatchRequestParamsEnvironmentKSAPHANA captures enum value "kSAPHANA"
	SourceRegistrationPatchRequestParamsEnvironmentKSAPHANA string = "kSAPHANA"

	// SourceRegistrationPatchRequestParamsEnvironmentKUDA captures enum value "kUDA"
	SourceRegistrationPatchRequestParamsEnvironmentKUDA string = "kUDA"

	// SourceRegistrationPatchRequestParamsEnvironmentKSQL captures enum value "kSQL"
	SourceRegistrationPatchRequestParamsEnvironmentKSQL string = "kSQL"

	// SourceRegistrationPatchRequestParamsEnvironmentKOracle captures enum value "kOracle"
	SourceRegistrationPatchRequestParamsEnvironmentKOracle string = "kOracle"

	// SourceRegistrationPatchRequestParamsEnvironmentKSfdc captures enum value "kSfdc"
	SourceRegistrationPatchRequestParamsEnvironmentKSfdc string = "kSfdc"
)

// prop value enum
func (m *SourceRegistrationPatchRequestParams) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sourceRegistrationPatchRequestParamsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SourceRegistrationPatchRequestParams) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *SourceRegistrationPatchRequestParams) validateCassandraParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraParams) { // not required
		return nil
	}

	if m.CassandraParams != nil {
		if err := m.CassandraParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this source registration patch request params based on the context it is used
func (m *SourceRegistrationPatchRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCassandraParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceRegistrationPatchRequestParams) contextValidateCassandraParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraParams != nil {

		if swag.IsZero(m.CassandraParams) { // not required
			return nil
		}

		if err := m.CassandraParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SourceRegistrationPatchRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceRegistrationPatchRequestParams) UnmarshalBinary(b []byte) error {
	var res SourceRegistrationPatchRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
