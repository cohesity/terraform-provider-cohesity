// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AwsSnapshotManagerParams Specifies job parameters applicable for all 'kVMware' Environment type Protection Sources in a Protection Job.
//
// swagger:model AwsSnapshotManagerParams
type AwsSnapshotManagerParams struct {

	// If true, creates an AMI after taking snapshots of the instance. It should be set only while backing up EC2 instances. CreateAmi creates AMI for the protection job.
	CreateAmi *bool `json:"createAmi,omitempty"`

	// Specifies the frequency of AMI creation. This should be set if the option to create AMI is set. A value of n creates an AMI from the snapshots after every n runs. eg. n = 2 implies every alternate backup run starting from the first will create an AMI.
	AmiCreationFrequency *int32 `json:"amiCreationFrequency,omitempty"`

	// Specifies the paramaters to exclude volumes attached to EC2 instances at global level.
	VolumeExclusionParams *EbsVolumeExclusionParams `json:"volumeExclusionParams,omitempty"`
}

// Validate validates this aws snapshot manager params
func (m *AwsSnapshotManagerParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVolumeExclusionParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsSnapshotManagerParams) validateVolumeExclusionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeExclusionParams) { // not required
		return nil
	}

	if m.VolumeExclusionParams != nil {
		if err := m.VolumeExclusionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeExclusionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeExclusionParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws snapshot manager params based on the context it is used
func (m *AwsSnapshotManagerParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVolumeExclusionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsSnapshotManagerParams) contextValidateVolumeExclusionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeExclusionParams != nil {

		if swag.IsZero(m.VolumeExclusionParams) { // not required
			return nil
		}

		if err := m.VolumeExclusionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeExclusionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeExclusionParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsSnapshotManagerParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsSnapshotManagerParams) UnmarshalBinary(b []byte) error {
	var res AwsSnapshotManagerParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
