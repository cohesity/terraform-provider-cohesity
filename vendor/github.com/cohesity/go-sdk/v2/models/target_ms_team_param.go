// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TargetMsTeamParam Specifies the target Microsoft 365 Team to recover to.
//
// swagger:model TargetMsTeamParam
type TargetMsTeamParam struct {

	// Specifies the selected existing target team info.
	TargetTeam struct {
		RecoveryObjectIdentifier
	} `json:"targetTeam,omitempty"`

	// Specifies the id of the domain during alternate domain recovery.
	ParentSourceID *int64 `json:"parentSourceId,omitempty"`

	// Specifies the ms team target channel parameters in case of granular restore to alternate location.
	TargetTeamsChannelParam *TargetTeamsChannelParam `json:"targetTeamsChannelParam,omitempty"`
}

// Validate validates this target ms team param
func (m *TargetMsTeamParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetTeamsChannelParam(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetMsTeamParam) validateTargetTeam(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetTeam) { // not required
		return nil
	}

	return nil
}

func (m *TargetMsTeamParam) validateTargetTeamsChannelParam(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetTeamsChannelParam) { // not required
		return nil
	}

	if m.TargetTeamsChannelParam != nil {
		if err := m.TargetTeamsChannelParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetTeamsChannelParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetTeamsChannelParam")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this target ms team param based on the context it is used
func (m *TargetMsTeamParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetTeam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetTeamsChannelParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetMsTeamParam) contextValidateTargetTeam(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *TargetMsTeamParam) contextValidateTargetTeamsChannelParam(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetTeamsChannelParam != nil {

		if swag.IsZero(m.TargetTeamsChannelParam) { // not required
			return nil
		}

		if err := m.TargetTeamsChannelParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetTeamsChannelParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetTeamsChannelParam")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetMsTeamParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetMsTeamParam) UnmarshalBinary(b []byte) error {
	var res TargetMsTeamParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
