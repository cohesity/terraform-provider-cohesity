// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverMsTeamParams Specifies the parameters to recover Microsoft 365 Teams.
//
// swagger:model RecoverMsTeamParams
type RecoverMsTeamParams struct {

	// Specifies a list of Microsoft 365 Teams params associated with objects to recover.
	// Required: true
	Objects []*ObjectMsTeamParam `json:"objects"`

	// This field is deprecated. Specifies target team nickname in case restoreToOriginal is false.
	TargetTeamNickName *string `json:"targetTeamNickName,omitempty"`

	// This field is deprecated. Specifies target team name in case restoreToOriginal is false. This will be ignored if restoring to alternate existing team (i.e. to a team the nickname of which is same as the one supplied by the end user).
	TargetTeamFullName *string `json:"targetTeamFullName,omitempty"`

	// Specifies whether or not all Microsoft 365 Teams are restored to original location.
	RestoreToOriginal *bool `json:"restoreToOriginal,omitempty"`

	// Specifies to create new team in case the target team doesn't exists in case restoreToOriginal is false.
	CreateNewTeam *bool `json:"createNewTeam,omitempty"`

	// Specifies the target team name in case restoreToOriginal is false.
	TargetTeamName *string `json:"targetTeamName,omitempty"`

	// Specifies if the original members/owners should be part of the newly created target team or not.
	RestoreOriginalOwners *bool `json:"restoreOriginalOwners,omitempty"`

	// Specifies whether to continue recovering other teams, if some of the teams fail to recover. Default value is false.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// This field is deprecated. Use targetTeamNickName and targetTeamFullName instead.
	TargetMsTeam *TargetMsTeamParam `json:"targetMsTeam,omitempty"`

	// Specifies the ms team target parameters in case of restoreToOriginal is false.
	TargetMsTeamParam *TargetMsTeamParam `json:"targetMsTeamParam,omitempty"`

	// Specifies the additional owner entity info for the selected target team.
	TargetTeamOwner *RecoveryObjectIdentifier `json:"targetTeamOwner,omitempty"`
}

// Validate validates this recover ms team params
func (m *RecoverMsTeamParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetMsTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetMsTeamParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetTeamOwner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverMsTeamParams) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverMsTeamParams) validateTargetMsTeam(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetMsTeam) { // not required
		return nil
	}

	if m.TargetMsTeam != nil {
		if err := m.TargetMsTeam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetMsTeam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetMsTeam")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverMsTeamParams) validateTargetMsTeamParam(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetMsTeamParam) { // not required
		return nil
	}

	if m.TargetMsTeamParam != nil {
		if err := m.TargetMsTeamParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetMsTeamParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetMsTeamParam")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverMsTeamParams) validateTargetTeamOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetTeamOwner) { // not required
		return nil
	}

	if m.TargetTeamOwner != nil {
		if err := m.TargetTeamOwner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetTeamOwner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetTeamOwner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover ms team params based on the context it is used
func (m *RecoverMsTeamParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetMsTeam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetMsTeamParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetTeamOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverMsTeamParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverMsTeamParams) contextValidateTargetMsTeam(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetMsTeam != nil {

		if swag.IsZero(m.TargetMsTeam) { // not required
			return nil
		}

		if err := m.TargetMsTeam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetMsTeam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetMsTeam")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverMsTeamParams) contextValidateTargetMsTeamParam(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetMsTeamParam != nil {

		if swag.IsZero(m.TargetMsTeamParam) { // not required
			return nil
		}

		if err := m.TargetMsTeamParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetMsTeamParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetMsTeamParam")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverMsTeamParams) contextValidateTargetTeamOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetTeamOwner != nil {

		if swag.IsZero(m.TargetTeamOwner) { // not required
			return nil
		}

		if err := m.TargetTeamOwner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetTeamOwner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetTeamOwner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverMsTeamParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverMsTeamParams) UnmarshalBinary(b []byte) error {
	var res RecoverMsTeamParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
