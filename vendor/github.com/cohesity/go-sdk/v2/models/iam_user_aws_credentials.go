// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IamUserAwsCredentials AWS IAM User credentials request parameters.
//
// # Specifies the credentials to register a commercial AWS
//
// swagger:model IamUserAwsCredentials
type IamUserAwsCredentials struct {

	// Specifies Access key of the AWS account.
	// Required: true
	AccessKey *string `json:"accessKey"`

	// Specifies Secret Access key of the AWS account.
	// Required: true
	SecretAccessKey *string `json:"secretAccessKey"`

	// Specifies Amazon Resource Name (owner ID) of the IAM user, acts as an unique identifier of as AWS entity.
	// Required: true
	Arn *string `json:"arn"`
}

// Validate validates this iam user aws credentials
func (m *IamUserAwsCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretAccessKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamUserAwsCredentials) validateAccessKey(formats strfmt.Registry) error {

	if err := validate.Required("accessKey", "body", m.AccessKey); err != nil {
		return err
	}

	return nil
}

func (m *IamUserAwsCredentials) validateSecretAccessKey(formats strfmt.Registry) error {

	if err := validate.Required("secretAccessKey", "body", m.SecretAccessKey); err != nil {
		return err
	}

	return nil
}

func (m *IamUserAwsCredentials) validateArn(formats strfmt.Registry) error {

	if err := validate.Required("arn", "body", m.Arn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this iam user aws credentials based on context it is used
func (m *IamUserAwsCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IamUserAwsCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamUserAwsCredentials) UnmarshalBinary(b []byte) error {
	var res IamUserAwsCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
