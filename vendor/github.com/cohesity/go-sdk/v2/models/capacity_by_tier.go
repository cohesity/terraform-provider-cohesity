// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CapacityByTier Capacity By Tier.
//
// CapacityByTier provides the physical capacity in bytes of each storage
// tier.
//
// swagger:model CapacityByTier
type CapacityByTier struct {

	// StorageTier is the type of StorageTier.
	// StorageTierType represents the various values for the Storage Tier.
	// 'kPCIeSSD' indicates storage tier type of Pci Solid State Drive.
	// 'kSATAHDD' indicates storage tier type of SATA Solid State Drive.
	// 'kSATAHDD' indicates storage tier type of SATA Hard Disk Drive.
	// 'kCLOUD' indicates storage tier type of Cloud.
	// Enum: ["PCIeSSD","SATASSD","SATAHDD","CLOUD","INVALID"]
	StorageTier *string `json:"storageTier,omitempty"`

	// maxPhysicalCapacityBytesTier is the maximum physical capacity in bytes of the storage tier.
	MaxPhysicalCapacityBytesTier *int64 `json:"maxPhysicalCapacityBytesTier,omitempty"`
}

// Validate validates this capacity by tier
func (m *CapacityByTier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var capacityByTierTypeStorageTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATASSD","SATAHDD","CLOUD","INVALID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		capacityByTierTypeStorageTierPropEnum = append(capacityByTierTypeStorageTierPropEnum, v)
	}
}

const (

	// CapacityByTierStorageTierPCIeSSD captures enum value "PCIeSSD"
	CapacityByTierStorageTierPCIeSSD string = "PCIeSSD"

	// CapacityByTierStorageTierSATASSD captures enum value "SATASSD"
	CapacityByTierStorageTierSATASSD string = "SATASSD"

	// CapacityByTierStorageTierSATAHDD captures enum value "SATAHDD"
	CapacityByTierStorageTierSATAHDD string = "SATAHDD"

	// CapacityByTierStorageTierCLOUD captures enum value "CLOUD"
	CapacityByTierStorageTierCLOUD string = "CLOUD"

	// CapacityByTierStorageTierINVALID captures enum value "INVALID"
	CapacityByTierStorageTierINVALID string = "INVALID"
)

// prop value enum
func (m *CapacityByTier) validateStorageTierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, capacityByTierTypeStorageTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CapacityByTier) validateStorageTier(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageTier) { // not required
		return nil
	}

	// value enum
	if err := m.validateStorageTierEnum("storageTier", "body", *m.StorageTier); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this capacity by tier based on context it is used
func (m *CapacityByTier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CapacityByTier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapacityByTier) UnmarshalBinary(b []byte) error {
	var res CapacityByTier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
