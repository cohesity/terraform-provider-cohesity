// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchEmailRequestParamsBase Search emails request params.
//
// Specifies the request parameters to search for mailbox items and folders.
//
// swagger:model SearchEmailRequestParamsBase
type SearchEmailRequestParamsBase struct {

	// Specifies a list of mailbox item types. Only items within the given types will be returned.
	// Unique: true
	Types []string `json:"types"`

	// Filters the emails which have attachment.
	HasAttachment *bool `json:"hasAttachment,omitempty"`

	// Filters the emails which are received from specified User's email address.
	SenderAddress *string `json:"senderAddress,omitempty"`

	// Filters the emails which are sent to specified email addresses.
	RecipientAddresses []string `json:"recipientAddresses"`

	// Filters the emails which are sent to specified email addresses in CC.
	CcRecipientAddresses []string `json:"ccRecipientAddresses"`

	// Filters the emails which are sent to specified email addresses in BCC.
	BccRecipientAddresses []string `json:"bccRecipientAddresses"`

	// Specifies the start time in Unix timestamp epoch in seconds where the received time of the email is more than specified value.
	ReceivedStartTimeSecs *int64 `json:"receivedStartTimeSecs,omitempty"`

	// Specifies the end time in Unix timestamp epoch in seconds where the received time of the email is less than specified value.
	ReceivedEndTimeSecs *int64 `json:"receivedEndTimeSecs,omitempty"`

	// Filters the emails which have the specified text in its subject.
	EmailSubject *string `json:"emailSubject,omitempty"`

	// Filters the emails which are categorized to specified folders.
	FolderNames []string `json:"folderNames"`

	// Specifies the source environment.
	// Enum: ["kO365"]
	SourceEnvironment *string `json:"sourceEnvironment,omitempty"`

	// Specifies the start time in Unix timestamp epoch in seconds where the created time of the email/item is more than specified value.
	CreatedStartTimeSecs *int64 `json:"createdStartTimeSecs,omitempty"`

	// Specifies the end time in Unix timestamp epoch in seconds where the created time of the email/item is less than specified value.
	CreatedEndTimeSecs *int64 `json:"createdEndTimeSecs,omitempty"`

	// Specifies the start time in Unix timestamp epoch in seconds where the last modification time of the email/item is more than specified value.
	LastModifiedStartTimeSecs *int64 `json:"lastModifiedStartTimeSecs,omitempty"`

	// Specifies the end time in Unix timestamp epoch in seconds where the last modification time of the email/item is less than specified value.
	LastModifiedEndTimeSecs *int64 `json:"lastModifiedEndTimeSecs,omitempty"`

	// Filters the calendar items which are organized by specified User's email address.
	OrganizerAddress *string `json:"organizerAddress,omitempty"`

	// Filters the calendar items which have specified email addresses as attendees.
	AttendeesAddresses []string `json:"attendeesAddresses"`

	// Filters the contacts with specified text in first name.
	FirstName *string `json:"firstName,omitempty"`

	// Filters the contacts with specified text in middle name.
	MiddleName *string `json:"middleName,omitempty"`

	// Filters the contacts with specified text in last name.
	LastName *string `json:"lastName,omitempty"`

	// Filters the contact items which have specified text in email address.
	EmailAddress *string `json:"emailAddress,omitempty"`

	// Specifies the start time in Unix timestamp epoch in seconds where the last modification time of the email/item is more than specified value.
	DueDateStartTimeSecs *int64 `json:"dueDateStartTimeSecs,omitempty"`

	// Specifies the end time in Unix timestamp epoch in seconds where the last modification time of the email/item is less than specified value.
	DueDateEndTimeSecs *int64 `json:"dueDateEndTimeSecs,omitempty"`

	// Specifies a list of task item status types. Task items having status within the given types will be returned.
	// Unique: true
	TaskStatusTypes []string `json:"taskStatusTypes"`
}

// Validate validates this search email request params base
func (m *SearchEmailRequestParamsBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskStatusTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var searchEmailRequestParamsBaseTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Email","Folder","Calendar","Contact","Task","Note"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchEmailRequestParamsBaseTypesItemsEnum = append(searchEmailRequestParamsBaseTypesItemsEnum, v)
	}
}

func (m *SearchEmailRequestParamsBase) validateTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchEmailRequestParamsBaseTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchEmailRequestParamsBase) validateTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.Types) { // not required
		return nil
	}

	if err := validate.UniqueItems("types", "body", m.Types); err != nil {
		return err
	}

	for i := 0; i < len(m.Types); i++ {

		// value enum
		if err := m.validateTypesItemsEnum("types"+"."+strconv.Itoa(i), "body", m.Types[i]); err != nil {
			return err
		}

	}

	return nil
}

var searchEmailRequestParamsBaseTypeSourceEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kO365"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchEmailRequestParamsBaseTypeSourceEnvironmentPropEnum = append(searchEmailRequestParamsBaseTypeSourceEnvironmentPropEnum, v)
	}
}

const (

	// SearchEmailRequestParamsBaseSourceEnvironmentKO365 captures enum value "kO365"
	SearchEmailRequestParamsBaseSourceEnvironmentKO365 string = "kO365"
)

// prop value enum
func (m *SearchEmailRequestParamsBase) validateSourceEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchEmailRequestParamsBaseTypeSourceEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchEmailRequestParamsBase) validateSourceEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceEnvironment) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnvironmentEnum("sourceEnvironment", "body", *m.SourceEnvironment); err != nil {
		return err
	}

	return nil
}

var searchEmailRequestParamsBaseTaskStatusTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotStarted","InProgress","Completed","WaitingOnOthers","Deferred"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchEmailRequestParamsBaseTaskStatusTypesItemsEnum = append(searchEmailRequestParamsBaseTaskStatusTypesItemsEnum, v)
	}
}

func (m *SearchEmailRequestParamsBase) validateTaskStatusTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchEmailRequestParamsBaseTaskStatusTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchEmailRequestParamsBase) validateTaskStatusTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskStatusTypes) { // not required
		return nil
	}

	if err := validate.UniqueItems("taskStatusTypes", "body", m.TaskStatusTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.TaskStatusTypes); i++ {

		// value enum
		if err := m.validateTaskStatusTypesItemsEnum("taskStatusTypes"+"."+strconv.Itoa(i), "body", m.TaskStatusTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this search email request params base based on context it is used
func (m *SearchEmailRequestParamsBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchEmailRequestParamsBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchEmailRequestParamsBase) UnmarshalBinary(b []byte) error {
	var res SearchEmailRequestParamsBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
