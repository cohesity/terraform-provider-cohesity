// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectProtectionSummary Specifies the summary of a protected object.
//
// swagger:model ObjectProtectionSummary
type ObjectProtectionSummary struct {
	ObjectSummary

	// Specifies the type of error which occurred during creation of the object protection.
	// Enum: ["InternalError","AlreadyExistsError"]
	ErrorType *string `json:"errorType,omitempty"`

	// Specifies the error message if an error occurred during creation of the object protection.
	Error *string `json:"error,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ObjectProtectionSummary) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ObjectSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ObjectSummary = aO0

	// AO1
	var dataAO1 struct {
		ErrorType *string `json:"errorType,omitempty"`

		Error *string `json:"error,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ErrorType = dataAO1.ErrorType

	m.Error = dataAO1.Error

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ObjectProtectionSummary) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ObjectSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ErrorType *string `json:"errorType,omitempty"`

		Error *string `json:"error,omitempty"`
	}

	dataAO1.ErrorType = m.ErrorType

	dataAO1.Error = m.Error

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this object protection summary
func (m *ObjectProtectionSummary) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectSummary
	if err := m.ObjectSummary.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var objectProtectionSummaryTypeErrorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InternalError","AlreadyExistsError"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectProtectionSummaryTypeErrorTypePropEnum = append(objectProtectionSummaryTypeErrorTypePropEnum, v)
	}
}

// property enum
func (m *ObjectProtectionSummary) validateErrorTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectProtectionSummaryTypeErrorTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectProtectionSummary) validateErrorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorTypeEnum("errorType", "body", *m.ErrorType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this object protection summary based on the context it is used
func (m *ObjectProtectionSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectSummary
	if err := m.ObjectSummary.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ObjectProtectionSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectProtectionSummary) UnmarshalBinary(b []byte) error {
	var res ObjectProtectionSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
