// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareStandbyObject Specifies the VMware specific standby object details.
//
// swagger:model VmwareStandbyObject
type VmwareStandbyObject struct {
	StandbyObject

	// Specifies the current status of the standby object protected using continuous data protection policy.
	// Enum: ["Init","VMCreationInProgress","VMCreated","LogStreamingInProgress","ReHydrationRequired","ReHydrationInProgress","Steady","Disabled","RestoreComplete"]
	CdpStandbyStatus *string `json:"CdpStandbyStatus,omitempty"`

	// Specifies the guest ID(OS) of the standby VM for the corresponding backup object.
	// Read Only: true
	GuestID *string `json:"guestId,omitempty"`

	// Specifies the MORef of the standby VM created on VMware environments.
	StandbyMOref *MOref `json:"standbyMOref,omitempty"`

	// Specifies the time till which the standby object has been hydrated for the corresponding backup object.
	StandbyTime *int64 `json:"standbyTime,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VmwareStandbyObject) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StandbyObject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StandbyObject = aO0

	// AO1
	var dataAO1 struct {
		CdpStandbyStatus *string `json:"CdpStandbyStatus,omitempty"`

		GuestID *string `json:"guestId,omitempty"`

		StandbyMOref *MOref `json:"standbyMOref,omitempty"`

		StandbyTime *int64 `json:"standbyTime,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CdpStandbyStatus = dataAO1.CdpStandbyStatus

	m.GuestID = dataAO1.GuestID

	m.StandbyMOref = dataAO1.StandbyMOref

	m.StandbyTime = dataAO1.StandbyTime

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VmwareStandbyObject) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.StandbyObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CdpStandbyStatus *string `json:"CdpStandbyStatus,omitempty"`

		GuestID *string `json:"guestId,omitempty"`

		StandbyMOref *MOref `json:"standbyMOref,omitempty"`

		StandbyTime *int64 `json:"standbyTime,omitempty"`
	}

	dataAO1.CdpStandbyStatus = m.CdpStandbyStatus

	dataAO1.GuestID = m.GuestID

	dataAO1.StandbyMOref = m.StandbyMOref

	dataAO1.StandbyTime = m.StandbyTime

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vmware standby object
func (m *VmwareStandbyObject) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StandbyObject
	if err := m.StandbyObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdpStandbyStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandbyMOref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmwareStandbyObjectTypeCdpStandbyStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Init","VMCreationInProgress","VMCreated","LogStreamingInProgress","ReHydrationRequired","ReHydrationInProgress","Steady","Disabled","RestoreComplete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmwareStandbyObjectTypeCdpStandbyStatusPropEnum = append(vmwareStandbyObjectTypeCdpStandbyStatusPropEnum, v)
	}
}

// property enum
func (m *VmwareStandbyObject) validateCdpStandbyStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmwareStandbyObjectTypeCdpStandbyStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VmwareStandbyObject) validateCdpStandbyStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.CdpStandbyStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateCdpStandbyStatusEnum("CdpStandbyStatus", "body", *m.CdpStandbyStatus); err != nil {
		return err
	}

	return nil
}

func (m *VmwareStandbyObject) validateStandbyMOref(formats strfmt.Registry) error {

	if swag.IsZero(m.StandbyMOref) { // not required
		return nil
	}

	if m.StandbyMOref != nil {
		if err := m.StandbyMOref.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standbyMOref")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standbyMOref")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware standby object based on the context it is used
func (m *VmwareStandbyObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StandbyObject
	if err := m.StandbyObject.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuestID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandbyMOref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareStandbyObject) contextValidateGuestID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "guestId", "body", m.GuestID); err != nil {
		return err
	}

	return nil
}

func (m *VmwareStandbyObject) contextValidateStandbyMOref(ctx context.Context, formats strfmt.Registry) error {

	if m.StandbyMOref != nil {

		if swag.IsZero(m.StandbyMOref) { // not required
			return nil
		}

		if err := m.StandbyMOref.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standbyMOref")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standbyMOref")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareStandbyObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareStandbyObject) UnmarshalBinary(b []byte) error {
	var res VmwareStandbyObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
