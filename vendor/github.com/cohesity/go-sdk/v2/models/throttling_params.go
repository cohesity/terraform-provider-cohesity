// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ThrottlingParams Throttling Params.
//
// Specifies throttling params.
//
// swagger:model ThrottlingParams
type ThrottlingParams struct {

	// If the latency of a datastore is above this value, then a new backup task that uses the datastore won't be started.
	NewTaskLatencyThresholdMsecs *int64 `json:"newTaskLatencyThresholdMsecs,omitempty"`

	// If the latency of a datastore is above this value, then an existing backup task that uses the datastore will start getting throttled.
	ActiveTaskLatencyThresholdMsecs *int64 `json:"activeTaskLatencyThresholdMsecs,omitempty"`

	// If this value is > 0 and the number of streams concurrently active on a datastore is equal to it, then any further requests to access the datastore would be denied until the number of active streams reduces. This applies for all the datastores in the specified host.
	MaxConcurrentStreams *int32 `json:"maxConcurrentStreams,omitempty"`

	// Specifies datastore specific parameters.
	DataStoreParams []*DatastoreParams `json:"dataStoreParams"`
}

// Validate validates this throttling params
func (m *ThrottlingParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataStoreParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThrottlingParams) validateDataStoreParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DataStoreParams) { // not required
		return nil
	}

	for i := 0; i < len(m.DataStoreParams); i++ {
		if swag.IsZero(m.DataStoreParams[i]) { // not required
			continue
		}

		if m.DataStoreParams[i] != nil {
			if err := m.DataStoreParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataStoreParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataStoreParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this throttling params based on the context it is used
func (m *ThrottlingParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataStoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThrottlingParams) contextValidateDataStoreParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataStoreParams); i++ {

		if m.DataStoreParams[i] != nil {

			if swag.IsZero(m.DataStoreParams[i]) { // not required
				return nil
			}

			if err := m.DataStoreParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataStoreParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataStoreParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThrottlingParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThrottlingParams) UnmarshalBinary(b []byte) error {
	var res ThrottlingParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
