// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HdfsSourceRegistrationParams Register HDFS source request parameters.
//
// Specifies parameters to register an HDFS source.
//
// swagger:model HdfsSourceRegistrationParams
type HdfsSourceRegistrationParams struct {
	HdfsAdditionalParams

	// IP or hostname of any host from which the HDFS configuration files core-site.xml and hdfs-site.xml can be read.
	// Required: true
	Host *string `json:"host"`

	// The directory containing the core-site.xml and hdfs-site.xml configuration files.
	// Required: true
	ConfigurationDirectory *string `json:"configurationDirectory"`

	// The kerberos principal to be used to connect to this HDFS source.
	KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

	// The hadoop distribution for this cluster. This can be either 'CDH' or 'HDP'
	// Required: true
	// Enum: ["CDH","HDP"]
	HadoopDistribution *string `json:"hadoopDistribution"`

	// The hadoop version for this cluster.
	// Required: true
	HadoopVersion *string `json:"hadoopVersion"`

	// ssh password credentials
	SSHPasswordCredentials *HdfsSourceRegistrationParamsAO1SSHPasswordCredentials `json:"sshPasswordCredentials,omitempty"`

	// ssh private key credentials
	SSHPrivateKeyCredentials *HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HdfsSourceRegistrationParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 HdfsAdditionalParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.HdfsAdditionalParams = aO0

	// AO1
	var dataAO1 struct {
		Host *string `json:"host"`

		ConfigurationDirectory *string `json:"configurationDirectory"`

		KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

		HadoopDistribution *string `json:"hadoopDistribution"`

		HadoopVersion *string `json:"hadoopVersion"`

		SSHPasswordCredentials *HdfsSourceRegistrationParamsAO1SSHPasswordCredentials `json:"sshPasswordCredentials,omitempty"`

		SSHPrivateKeyCredentials *HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Host = dataAO1.Host

	m.ConfigurationDirectory = dataAO1.ConfigurationDirectory

	m.KerberosPrincipal = dataAO1.KerberosPrincipal

	m.HadoopDistribution = dataAO1.HadoopDistribution

	m.HadoopVersion = dataAO1.HadoopVersion

	m.SSHPasswordCredentials = dataAO1.SSHPasswordCredentials

	m.SSHPrivateKeyCredentials = dataAO1.SSHPrivateKeyCredentials

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HdfsSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.HdfsAdditionalParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Host *string `json:"host"`

		ConfigurationDirectory *string `json:"configurationDirectory"`

		KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

		HadoopDistribution *string `json:"hadoopDistribution"`

		HadoopVersion *string `json:"hadoopVersion"`

		SSHPasswordCredentials *HdfsSourceRegistrationParamsAO1SSHPasswordCredentials `json:"sshPasswordCredentials,omitempty"`

		SSHPrivateKeyCredentials *HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
	}

	dataAO1.Host = m.Host

	dataAO1.ConfigurationDirectory = m.ConfigurationDirectory

	dataAO1.KerberosPrincipal = m.KerberosPrincipal

	dataAO1.HadoopDistribution = m.HadoopDistribution

	dataAO1.HadoopVersion = m.HadoopVersion

	dataAO1.SSHPasswordCredentials = m.SSHPasswordCredentials

	dataAO1.SSHPrivateKeyCredentials = m.SSHPrivateKeyCredentials

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hdfs source registration params
func (m *HdfsSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HdfsAdditionalParams
	if err := m.HdfsAdditionalParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurationDirectory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHadoopDistribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHadoopVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPasswordCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPrivateKeyCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HdfsSourceRegistrationParams) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *HdfsSourceRegistrationParams) validateConfigurationDirectory(formats strfmt.Registry) error {

	if err := validate.Required("configurationDirectory", "body", m.ConfigurationDirectory); err != nil {
		return err
	}

	return nil
}

var hdfsSourceRegistrationParamsTypeHadoopDistributionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CDH","HDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hdfsSourceRegistrationParamsTypeHadoopDistributionPropEnum = append(hdfsSourceRegistrationParamsTypeHadoopDistributionPropEnum, v)
	}
}

// property enum
func (m *HdfsSourceRegistrationParams) validateHadoopDistributionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hdfsSourceRegistrationParamsTypeHadoopDistributionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HdfsSourceRegistrationParams) validateHadoopDistribution(formats strfmt.Registry) error {

	if err := validate.Required("hadoopDistribution", "body", m.HadoopDistribution); err != nil {
		return err
	}

	// value enum
	if err := m.validateHadoopDistributionEnum("hadoopDistribution", "body", *m.HadoopDistribution); err != nil {
		return err
	}

	return nil
}

func (m *HdfsSourceRegistrationParams) validateHadoopVersion(formats strfmt.Registry) error {

	if err := validate.Required("hadoopVersion", "body", m.HadoopVersion); err != nil {
		return err
	}

	return nil
}

func (m *HdfsSourceRegistrationParams) validateSSHPasswordCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHPasswordCredentials) { // not required
		return nil
	}

	if m.SSHPasswordCredentials != nil {
		if err := m.SSHPasswordCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPasswordCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPasswordCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *HdfsSourceRegistrationParams) validateSSHPrivateKeyCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHPrivateKeyCredentials) { // not required
		return nil
	}

	if m.SSHPrivateKeyCredentials != nil {
		if err := m.SSHPrivateKeyCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPrivateKeyCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPrivateKeyCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hdfs source registration params based on the context it is used
func (m *HdfsSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HdfsAdditionalParams
	if err := m.HdfsAdditionalParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHPasswordCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHPrivateKeyCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HdfsSourceRegistrationParams) contextValidateSSHPasswordCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHPasswordCredentials != nil {

		if swag.IsZero(m.SSHPasswordCredentials) { // not required
			return nil
		}

		if err := m.SSHPasswordCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPasswordCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPasswordCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *HdfsSourceRegistrationParams) contextValidateSSHPrivateKeyCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHPrivateKeyCredentials != nil {

		if swag.IsZero(m.SSHPrivateKeyCredentials) { // not required
			return nil
		}

		if err := m.SSHPrivateKeyCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPrivateKeyCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPrivateKeyCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HdfsSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HdfsSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res HdfsSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HdfsSourceRegistrationParamsAO1SSHPasswordCredentials SSH username + password required for reading configuration file. Either 'sshPasswordCredentials' or 'sshPrivateKeyCredentials' are required.
//
// swagger:model HdfsSourceRegistrationParamsAO1SSHPasswordCredentials
type HdfsSourceRegistrationParamsAO1SSHPasswordCredentials struct {

	// SSH password.
	// Required: true
	Password *string `json:"password"`

	// SSH username.
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this hdfs source registration params a o1 SSH password credentials
func (m *HdfsSourceRegistrationParamsAO1SSHPasswordCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HdfsSourceRegistrationParamsAO1SSHPasswordCredentials) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("sshPasswordCredentials"+"."+"password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *HdfsSourceRegistrationParamsAO1SSHPasswordCredentials) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("sshPasswordCredentials"+"."+"username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hdfs source registration params a o1 SSH password credentials based on context it is used
func (m *HdfsSourceRegistrationParamsAO1SSHPasswordCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HdfsSourceRegistrationParamsAO1SSHPasswordCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HdfsSourceRegistrationParamsAO1SSHPasswordCredentials) UnmarshalBinary(b []byte) error {
	var res HdfsSourceRegistrationParamsAO1SSHPasswordCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials SSH  userID + privateKey required for reading configuration file.
//
// swagger:model HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials
type HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials struct {

	// Passphrase for the private key.
	Passphrase string `json:"passphrase,omitempty"`

	// The private key.
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// userId for PrivateKey credentials.
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this hdfs source registration params a o1 SSH private key credentials
func (m *HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("sshPrivateKeyCredentials"+"."+"privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("sshPrivateKeyCredentials"+"."+"userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hdfs source registration params a o1 SSH private key credentials based on context it is used
func (m *HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials) UnmarshalBinary(b []byte) error {
	var res HdfsSourceRegistrationParamsAO1SSHPrivateKeyCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
