// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AAGGroup Specifies the details of a AAG Group.
//
// swagger:model AAGGroup
type AAGGroup struct {

	// Specifies the unique identifier of the AGGGroup.
	ID *string `json:"id,omitempty"`

	// Specifies the name of the AAG Group.
	Name *string `json:"name,omitempty"`

	// Specifies the resource information about the AAG Group.
	ResourceInfo *AppResource `json:"resourceInfo,omitempty"`

	// Specifies the list of SQL servers which belongs to the given AAG Group.
	Servers []*SQLServer `json:"servers"`

	// Specifies the list of FCI clusters which belongs to the given AAG Group.
	FciClusters []*FCICluster `json:"fciClusters"`
}

// Validate validates this a a g group
func (m *AAGGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFciClusters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAGGroup) validateResourceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceInfo) { // not required
		return nil
	}

	if m.ResourceInfo != nil {
		if err := m.ResourceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AAGGroup) validateServers(formats strfmt.Registry) error {
	if swag.IsZero(m.Servers) { // not required
		return nil
	}

	for i := 0; i < len(m.Servers); i++ {
		if swag.IsZero(m.Servers[i]) { // not required
			continue
		}

		if m.Servers[i] != nil {
			if err := m.Servers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AAGGroup) validateFciClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.FciClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.FciClusters); i++ {
		if swag.IsZero(m.FciClusters[i]) { // not required
			continue
		}

		if m.FciClusters[i] != nil {
			if err := m.FciClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fciClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fciClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this a a g group based on the context it is used
func (m *AAGGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFciClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAGGroup) contextValidateResourceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceInfo != nil {

		if swag.IsZero(m.ResourceInfo) { // not required
			return nil
		}

		if err := m.ResourceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AAGGroup) contextValidateServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Servers); i++ {

		if m.Servers[i] != nil {

			if swag.IsZero(m.Servers[i]) { // not required
				return nil
			}

			if err := m.Servers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AAGGroup) contextValidateFciClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FciClusters); i++ {

		if m.FciClusters[i] != nil {

			if swag.IsZero(m.FciClusters[i]) { // not required
				return nil
			}

			if err := m.FciClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fciClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fciClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AAGGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AAGGroup) UnmarshalBinary(b []byte) error {
	var res AAGGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
