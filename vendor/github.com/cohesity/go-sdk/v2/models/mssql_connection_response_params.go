// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MssqlConnectionResponseParams Specifies the response parameters after connecting to a SQL node/cluster using given IP or hostname FQDN.
//
// swagger:model MssqlConnectionResponseParams
type MssqlConnectionResponseParams struct {
	MsSQLCommonConnectionParams

	// Specifies the error information if any associated with the app topology response.
	Error *Error `json:"error,omitempty"`

	// Specifies whether to skip the discovery phase of all SQL servers, AAG groups etc during registration process.
	SkipConnectionDiscovery *bool `json:"skipConnectionDiscovery,omitempty"`

	// Specifies the list of SQL servers. If SQL server is a part of avalibility group then it will be returned in aagServers field. This will include the list of all standalone SQL servers and servers belonging to any FCI enviournment.
	Servers []*SQLServer `json:"servers"`

	// Specifies the list of FCI (Failover Cluster Instaces) Clusters. This will contain the list of all failover pools under a windows cluster. FCI clusters which are part of AAG, will be returned seperatly under aagServers field.
	FciClusters []*FCICluster `json:"fciClusters"`

	// Specifies the list of AAG (Always on Avalibility) groups.
	AagGroups []*AAGGroup `json:"aagGroups"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MssqlConnectionResponseParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MsSQLCommonConnectionParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MsSQLCommonConnectionParams = aO0

	// AO1
	var dataAO1 struct {
		Error *Error `json:"error,omitempty"`

		SkipConnectionDiscovery *bool `json:"skipConnectionDiscovery,omitempty"`

		Servers []*SQLServer `json:"servers"`

		FciClusters []*FCICluster `json:"fciClusters"`

		AagGroups []*AAGGroup `json:"aagGroups"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Error = dataAO1.Error

	m.SkipConnectionDiscovery = dataAO1.SkipConnectionDiscovery

	m.Servers = dataAO1.Servers

	m.FciClusters = dataAO1.FciClusters

	m.AagGroups = dataAO1.AagGroups

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MssqlConnectionResponseParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MsSQLCommonConnectionParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Error *Error `json:"error,omitempty"`

		SkipConnectionDiscovery *bool `json:"skipConnectionDiscovery,omitempty"`

		Servers []*SQLServer `json:"servers"`

		FciClusters []*FCICluster `json:"fciClusters"`

		AagGroups []*AAGGroup `json:"aagGroups"`
	}

	dataAO1.Error = m.Error

	dataAO1.SkipConnectionDiscovery = m.SkipConnectionDiscovery

	dataAO1.Servers = m.Servers

	dataAO1.FciClusters = m.FciClusters

	dataAO1.AagGroups = m.AagGroups

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this mssql connection response params
func (m *MssqlConnectionResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MsSQLCommonConnectionParams
	if err := m.MsSQLCommonConnectionParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFciClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAagGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MssqlConnectionResponseParams) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *MssqlConnectionResponseParams) validateServers(formats strfmt.Registry) error {

	if swag.IsZero(m.Servers) { // not required
		return nil
	}

	for i := 0; i < len(m.Servers); i++ {
		if swag.IsZero(m.Servers[i]) { // not required
			continue
		}

		if m.Servers[i] != nil {
			if err := m.Servers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MssqlConnectionResponseParams) validateFciClusters(formats strfmt.Registry) error {

	if swag.IsZero(m.FciClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.FciClusters); i++ {
		if swag.IsZero(m.FciClusters[i]) { // not required
			continue
		}

		if m.FciClusters[i] != nil {
			if err := m.FciClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fciClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fciClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MssqlConnectionResponseParams) validateAagGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.AagGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.AagGroups); i++ {
		if swag.IsZero(m.AagGroups[i]) { // not required
			continue
		}

		if m.AagGroups[i] != nil {
			if err := m.AagGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aagGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aagGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mssql connection response params based on the context it is used
func (m *MssqlConnectionResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MsSQLCommonConnectionParams
	if err := m.MsSQLCommonConnectionParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFciClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAagGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MssqlConnectionResponseParams) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *MssqlConnectionResponseParams) contextValidateServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Servers); i++ {

		if m.Servers[i] != nil {

			if swag.IsZero(m.Servers[i]) { // not required
				return nil
			}

			if err := m.Servers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MssqlConnectionResponseParams) contextValidateFciClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FciClusters); i++ {

		if m.FciClusters[i] != nil {

			if swag.IsZero(m.FciClusters[i]) { // not required
				return nil
			}

			if err := m.FciClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fciClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fciClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MssqlConnectionResponseParams) contextValidateAagGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AagGroups); i++ {

		if m.AagGroups[i] != nil {

			if swag.IsZero(m.AagGroups[i]) { // not required
				return nil
			}

			if err := m.AagGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aagGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aagGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MssqlConnectionResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MssqlConnectionResponseParams) UnmarshalBinary(b []byte) error {
	var res MssqlConnectionResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
