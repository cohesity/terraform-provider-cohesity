// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IbmKmsConfiguration IBM KMS configuration parameters.
//
// swagger:model IbmKmsConfiguration
type IbmKmsConfiguration struct {

	// CRN of the root key.
	KmsKeyCRN *string `json:"kmsKeyCRN,omitempty"`

	// Specifies the authentication method for IBMCOS APIs. target.
	AuthenticationMethod *AuthenticationMethod `json:"authenticationMethod,omitempty"`

	// API key, will be set iff authentication type is APIKey.
	APIKey *string `json:"apiKey,omitempty"`

	// Specifies the trusted profile ID if the authentication type is TrustedProfile.
	TrustedProfileID *string `json:"trustedProfileId,omitempty"`

	// Specifies the tenant CRN if the authentication type is TrustedProfileWithS2SPolicy.
	TenantCRN *string `json:"tenantCRN,omitempty"`

	// Specifies the unique IBM cloud instance ID.
	InstanceID *string `json:"instanceId,omitempty"`

	// Specifies the unique identifier for the root key.
	RootKeyID *string `json:"rootKeyId,omitempty"`

	// Specifies ID fo the key ring the specified key is a part of.
	KmsKeyRing *string `json:"kmsKeyRing,omitempty"`

	// Specifies the region abbreviation where the Key Protect instance resides.
	Region *string `json:"region,omitempty"`

	// Specifies the IBM KMS type used - Key Protect or HPCS.
	// Enum: ["KeyProtect","HPCS"]
	KmsType string `json:"kmsType,omitempty"`
}

// Validate validates this ibm kms configuration
func (m *IbmKmsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKmsType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbmKmsConfiguration) validateAuthenticationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationMethod) { // not required
		return nil
	}

	if m.AuthenticationMethod != nil {
		if err := m.AuthenticationMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authenticationMethod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authenticationMethod")
			}
			return err
		}
	}

	return nil
}

var ibmKmsConfigurationTypeKmsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["KeyProtect","HPCS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ibmKmsConfigurationTypeKmsTypePropEnum = append(ibmKmsConfigurationTypeKmsTypePropEnum, v)
	}
}

const (

	// IbmKmsConfigurationKmsTypeKeyProtect captures enum value "KeyProtect"
	IbmKmsConfigurationKmsTypeKeyProtect string = "KeyProtect"

	// IbmKmsConfigurationKmsTypeHPCS captures enum value "HPCS"
	IbmKmsConfigurationKmsTypeHPCS string = "HPCS"
)

// prop value enum
func (m *IbmKmsConfiguration) validateKmsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ibmKmsConfigurationTypeKmsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IbmKmsConfiguration) validateKmsType(formats strfmt.Registry) error {
	if swag.IsZero(m.KmsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateKmsTypeEnum("kmsType", "body", m.KmsType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ibm kms configuration based on the context it is used
func (m *IbmKmsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthenticationMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbmKmsConfiguration) contextValidateAuthenticationMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthenticationMethod != nil {

		if swag.IsZero(m.AuthenticationMethod) { // not required
			return nil
		}

		if err := m.AuthenticationMethod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authenticationMethod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authenticationMethod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IbmKmsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbmKmsConfiguration) UnmarshalBinary(b []byte) error {
	var res IbmKmsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
