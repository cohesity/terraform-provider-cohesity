// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChangeServicesStatesParams Change Services States params struct
//
// # Describes the parameters for changing services states of cluster
//
// swagger:model ChangeServicesStatesParams
type ChangeServicesStatesParams struct {

	// Specifies the action to take on the specified service
	// Enum: ["kStart","kStop","kRestart"]
	Action *string `json:"action,omitempty"`

	// Specifies the list of services to take the specified action on. If none are specified, all Cluster services will be affected.
	Services []*string `json:"services"`
}

// Validate validates this change services states params
func (m *ChangeServicesStatesParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var changeServicesStatesParamsTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kStart","kStop","kRestart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		changeServicesStatesParamsTypeActionPropEnum = append(changeServicesStatesParamsTypeActionPropEnum, v)
	}
}

const (

	// ChangeServicesStatesParamsActionKStart captures enum value "kStart"
	ChangeServicesStatesParamsActionKStart string = "kStart"

	// ChangeServicesStatesParamsActionKStop captures enum value "kStop"
	ChangeServicesStatesParamsActionKStop string = "kStop"

	// ChangeServicesStatesParamsActionKRestart captures enum value "kRestart"
	ChangeServicesStatesParamsActionKRestart string = "kRestart"
)

// prop value enum
func (m *ChangeServicesStatesParams) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, changeServicesStatesParamsTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChangeServicesStatesParams) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

var changeServicesStatesParamsServicesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kInvalidService","kApollo","kBridge","kGenie","kGenieGofer","kMagneto","kIris","kIrisProxy","kNewScribe","kStats","kYoda","kAlerts","kKeychain","kLogWatcher","kStatsCollector","kGandalf","kNexus","kNexusProxy","kStorageProxy","kRtClient","kVaultProxy","kSmbProxy","kBridgeProxy","kLibrarian","kGroot","kEagleAgent","kAthena","kBifrostBroker","kAtom","kYodaAgent","kSmb2Proxy","kThrottler","kElrond","kHeimdall","kBifrost","kIcebox","kNodeExporter","kCompass","kPatch","kEtlServer","kUpgrader","kOs","kPushproxClient","kPushClient","kAegis","kNfsProxy","kElixirWorkerservice","kArgusApp","kMetadataservice","kSpireServer","kSpireAgent","kLicensing","kShelteredHarborApp","kShelteredHarborUda","kCohesityCa","kInfraoperator","kMarketplaceoperator","kCohesion","kSpireApp","kGaia","kStargate","kAdaptx","kNosql"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		changeServicesStatesParamsServicesItemsEnum = append(changeServicesStatesParamsServicesItemsEnum, v)
	}
}

func (m *ChangeServicesStatesParams) validateServicesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, changeServicesStatesParamsServicesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChangeServicesStatesParams) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		// value enum
		if err := m.validateServicesItemsEnum("services"+"."+strconv.Itoa(i), "body", *m.Services[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this change services states params based on context it is used
func (m *ChangeServicesStatesParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChangeServicesStatesParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangeServicesStatesParams) UnmarshalBinary(b []byte) error {
	var res ChangeServicesStatesParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
