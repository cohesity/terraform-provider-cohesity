// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectorConnectivityStatus Data-Source connector connectivity status
//
// Specifies connectvity status information for the data-source connector. For example if it's currently connected to the cluster, when it last connected to the cluster successfully, etc.
//
// swagger:model ConnectorConnectivityStatus
type ConnectorConnectivityStatus struct {

	// Specifies whether the connector is currently connected to the cluster.
	// Required: true
	IsConnected *bool `json:"isConnected"`

	// Specifies error message when the connector is unable to connect to the cluster.
	Message *string `json:"message,omitempty"`

	// This denotes the timestamp in UNIX seconds since which this connector has been connected to its cluster without any interruptions. This property will NOT be present if this connector is not currently connected to its cluster.
	ConnectedSinceTimestampSecs *int64 `json:"connectedSinceTimestampSecs,omitempty"`

	// Same as the property 'connectedSinceTimestampSecs'. This is deprecated and will be removed eventually. Use 'connectedSinceTimestampSecs' instead.
	LastConnectedTimestampSecs *int64 `json:"lastConnectedTimestampSecs,omitempty"`

	// Specifies the most recent known timestamp in UNIX seconds at which this connector passed the health checks. This property can be present even if this connector is not currently connected to its cluster.
	LastKnownHealthOkTimestampSecs *int64 `json:"lastKnownHealthOkTimestampSecs,omitempty"`
}

// Validate validates this connector connectivity status
func (m *ConnectorConnectivityStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsConnected(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectorConnectivityStatus) validateIsConnected(formats strfmt.Registry) error {

	if err := validate.Required("isConnected", "body", m.IsConnected); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this connector connectivity status based on context it is used
func (m *ConnectorConnectivityStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorConnectivityStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorConnectivityStatus) UnmarshalBinary(b []byte) error {
	var res ConnectorConnectivityStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
