// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterStatus Cluster Status struct.
//
// Describes the cluster status.
//
// swagger:model ClusterStatus
type ClusterStatus struct {

	// Specifies the id of the cluster.
	ClusterID *int64 `json:"clusterId,omitempty"`

	// Specifies the cluster incarnation id.
	ClusterIncarnationID *int64 `json:"clusterIncarnationId,omitempty"`

	// Specifies the name of the cluster.
	Name *string `json:"name,omitempty"`

	// Specifies the software version of the cluster.
	SoftwareVersion *string `json:"softwareVersion,omitempty"`

	// Specifies the service name.
	StoppedServices []string `json:"stoppedServices"`

	// Specifies the current operation of the cluster.
	// Enum: ["Destroy","Create","NodeAddition","NodeRemoval","DownloadUpgradePackage","DownloadPatchPackage","DownloadUpgradeAndPatchPackages","DownloadAndUpgrade","DownloadAndApplyPatch","DownloadAndUpgradeWithPatch","Upgrade","ApplyPatch","RevertPatch","UpgradeAndPatch","AssessSoftwareUpdate","AbortApplyPatch","AbortUpgrade"]
	CurrentOperation *string `json:"currentOperation,omitempty"`

	// Specifies the status of each node on the cluster.
	NodeStatuses []*NodeStatusResult `json:"nodeStatuses"`

	// Specifies the status of each system app on the cluster.
	SystemAppStatus []*SystemAppStatusParams `json:"systemAppStatus"`

	// Specifies an optional message describing details of the cluster status.
	Message *string `json:"message,omitempty"`

	// Specifies whether or not the services are synced with the list of stopped services.
	ServicesSynced *bool `json:"servicesSynced,omitempty"`

	// RemovalState specifies the possible states for removal operations happening on the cluster.
	// Enum: ["kNodeRemoval","kDiskRemoval","kNoRemoval","kNodeAndDiskRemoval"]
	RemovalState *string `json:"removalState,omitempty"`

	// airgap config stats
	AirgapConfigStats *AirgapConfig `json:"airgapConfigStats,omitempty"`
}

// Validate validates this cluster status
func (m *ClusterStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStoppedServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemAppStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovalState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirgapConfigStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterStatusStoppedServicesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kInvalidService","kApollo","kBridge","kGenie","kGenieGofer","kMagneto","kIris","kIrisProxy","kNewScribe","kStats","kYoda","kAlerts","kKeychain","kLogWatcher","kStatsCollector","kGandalf","kNexus","kNexusProxy","kStorageProxy","kRtClient","kVaultProxy","kSmbProxy","kBridgeProxy","kLibrarian","kGroot","kEagleAgent","kAthena","kBifrostBroker","kAtom","kYodaAgent","kSmb2Proxy","kThrottler","kElrond","kHeimdall","kBifrost","kIcebox","kNodeExporter","kCompass","kPatch","kEtlServer","kUpgrader","kOs","kPushproxClient","kPushClient","kAegis","kNfsProxy","kElixirWorkerservice","kArgusApp","kMetadataservice","kSpireServer","kSpireAgent","kLicensing","kShelteredHarborApp","kShelteredHarborUda","kCohesityCa","kInfraoperator","kMarketplaceoperator","kCohesion","kSpireApp","kGaia","kStargate","kAdaptx","kNosql"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterStatusStoppedServicesItemsEnum = append(clusterStatusStoppedServicesItemsEnum, v)
	}
}

func (m *ClusterStatus) validateStoppedServicesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterStatusStoppedServicesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterStatus) validateStoppedServices(formats strfmt.Registry) error {
	if swag.IsZero(m.StoppedServices) { // not required
		return nil
	}

	for i := 0; i < len(m.StoppedServices); i++ {

		// value enum
		if err := m.validateStoppedServicesItemsEnum("stoppedServices"+"."+strconv.Itoa(i), "body", m.StoppedServices[i]); err != nil {
			return err
		}

	}

	return nil
}

var clusterStatusTypeCurrentOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Destroy","Create","NodeAddition","NodeRemoval","DownloadUpgradePackage","DownloadPatchPackage","DownloadUpgradeAndPatchPackages","DownloadAndUpgrade","DownloadAndApplyPatch","DownloadAndUpgradeWithPatch","Upgrade","ApplyPatch","RevertPatch","UpgradeAndPatch","AssessSoftwareUpdate","AbortApplyPatch","AbortUpgrade"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterStatusTypeCurrentOperationPropEnum = append(clusterStatusTypeCurrentOperationPropEnum, v)
	}
}

const (

	// ClusterStatusCurrentOperationDestroy captures enum value "Destroy"
	ClusterStatusCurrentOperationDestroy string = "Destroy"

	// ClusterStatusCurrentOperationCreate captures enum value "Create"
	ClusterStatusCurrentOperationCreate string = "Create"

	// ClusterStatusCurrentOperationNodeAddition captures enum value "NodeAddition"
	ClusterStatusCurrentOperationNodeAddition string = "NodeAddition"

	// ClusterStatusCurrentOperationNodeRemoval captures enum value "NodeRemoval"
	ClusterStatusCurrentOperationNodeRemoval string = "NodeRemoval"

	// ClusterStatusCurrentOperationDownloadUpgradePackage captures enum value "DownloadUpgradePackage"
	ClusterStatusCurrentOperationDownloadUpgradePackage string = "DownloadUpgradePackage"

	// ClusterStatusCurrentOperationDownloadPatchPackage captures enum value "DownloadPatchPackage"
	ClusterStatusCurrentOperationDownloadPatchPackage string = "DownloadPatchPackage"

	// ClusterStatusCurrentOperationDownloadUpgradeAndPatchPackages captures enum value "DownloadUpgradeAndPatchPackages"
	ClusterStatusCurrentOperationDownloadUpgradeAndPatchPackages string = "DownloadUpgradeAndPatchPackages"

	// ClusterStatusCurrentOperationDownloadAndUpgrade captures enum value "DownloadAndUpgrade"
	ClusterStatusCurrentOperationDownloadAndUpgrade string = "DownloadAndUpgrade"

	// ClusterStatusCurrentOperationDownloadAndApplyPatch captures enum value "DownloadAndApplyPatch"
	ClusterStatusCurrentOperationDownloadAndApplyPatch string = "DownloadAndApplyPatch"

	// ClusterStatusCurrentOperationDownloadAndUpgradeWithPatch captures enum value "DownloadAndUpgradeWithPatch"
	ClusterStatusCurrentOperationDownloadAndUpgradeWithPatch string = "DownloadAndUpgradeWithPatch"

	// ClusterStatusCurrentOperationUpgrade captures enum value "Upgrade"
	ClusterStatusCurrentOperationUpgrade string = "Upgrade"

	// ClusterStatusCurrentOperationApplyPatch captures enum value "ApplyPatch"
	ClusterStatusCurrentOperationApplyPatch string = "ApplyPatch"

	// ClusterStatusCurrentOperationRevertPatch captures enum value "RevertPatch"
	ClusterStatusCurrentOperationRevertPatch string = "RevertPatch"

	// ClusterStatusCurrentOperationUpgradeAndPatch captures enum value "UpgradeAndPatch"
	ClusterStatusCurrentOperationUpgradeAndPatch string = "UpgradeAndPatch"

	// ClusterStatusCurrentOperationAssessSoftwareUpdate captures enum value "AssessSoftwareUpdate"
	ClusterStatusCurrentOperationAssessSoftwareUpdate string = "AssessSoftwareUpdate"

	// ClusterStatusCurrentOperationAbortApplyPatch captures enum value "AbortApplyPatch"
	ClusterStatusCurrentOperationAbortApplyPatch string = "AbortApplyPatch"

	// ClusterStatusCurrentOperationAbortUpgrade captures enum value "AbortUpgrade"
	ClusterStatusCurrentOperationAbortUpgrade string = "AbortUpgrade"
)

// prop value enum
func (m *ClusterStatus) validateCurrentOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterStatusTypeCurrentOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterStatus) validateCurrentOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentOperation) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentOperationEnum("currentOperation", "body", *m.CurrentOperation); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatus) validateNodeStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeStatuses); i++ {
		if swag.IsZero(m.NodeStatuses[i]) { // not required
			continue
		}

		if m.NodeStatuses[i] != nil {
			if err := m.NodeStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStatus) validateSystemAppStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemAppStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.SystemAppStatus); i++ {
		if swag.IsZero(m.SystemAppStatus[i]) { // not required
			continue
		}

		if m.SystemAppStatus[i] != nil {
			if err := m.SystemAppStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemAppStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("systemAppStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var clusterStatusTypeRemovalStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNodeRemoval","kDiskRemoval","kNoRemoval","kNodeAndDiskRemoval"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterStatusTypeRemovalStatePropEnum = append(clusterStatusTypeRemovalStatePropEnum, v)
	}
}

const (

	// ClusterStatusRemovalStateKNodeRemoval captures enum value "kNodeRemoval"
	ClusterStatusRemovalStateKNodeRemoval string = "kNodeRemoval"

	// ClusterStatusRemovalStateKDiskRemoval captures enum value "kDiskRemoval"
	ClusterStatusRemovalStateKDiskRemoval string = "kDiskRemoval"

	// ClusterStatusRemovalStateKNoRemoval captures enum value "kNoRemoval"
	ClusterStatusRemovalStateKNoRemoval string = "kNoRemoval"

	// ClusterStatusRemovalStateKNodeAndDiskRemoval captures enum value "kNodeAndDiskRemoval"
	ClusterStatusRemovalStateKNodeAndDiskRemoval string = "kNodeAndDiskRemoval"
)

// prop value enum
func (m *ClusterStatus) validateRemovalStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterStatusTypeRemovalStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterStatus) validateRemovalState(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovalState) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemovalStateEnum("removalState", "body", *m.RemovalState); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatus) validateAirgapConfigStats(formats strfmt.Registry) error {
	if swag.IsZero(m.AirgapConfigStats) { // not required
		return nil
	}

	if m.AirgapConfigStats != nil {
		if err := m.AirgapConfigStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("airgapConfigStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("airgapConfigStats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster status based on the context it is used
func (m *ClusterStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemAppStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAirgapConfigStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStatus) contextValidateNodeStatuses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeStatuses); i++ {

		if m.NodeStatuses[i] != nil {

			if swag.IsZero(m.NodeStatuses[i]) { // not required
				return nil
			}

			if err := m.NodeStatuses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStatus) contextValidateSystemAppStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SystemAppStatus); i++ {

		if m.SystemAppStatus[i] != nil {

			if swag.IsZero(m.SystemAppStatus[i]) { // not required
				return nil
			}

			if err := m.SystemAppStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemAppStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("systemAppStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStatus) contextValidateAirgapConfigStats(ctx context.Context, formats strfmt.Registry) error {

	if m.AirgapConfigStats != nil {

		if swag.IsZero(m.AirgapConfigStats) { // not required
			return nil
		}

		if err := m.AirgapConfigStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("airgapConfigStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("airgapConfigStats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterStatus) UnmarshalBinary(b []byte) error {
	var res ClusterStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
