// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverAwsAuroraNewSourceNetworkConfig Recover AWS Aurora New Source Network configuration.
//
// Specifies the network config parameters to be applied for AWS Aurora if recovering to new Source.
//
// swagger:model RecoverAwsAuroraNewSourceNetworkConfig
type RecoverAwsAuroraNewSourceNetworkConfig struct {

	// Specifies the network security groups within above VPC.
	SecurityGroups []*RecoveryObjectIdentifier `json:"securityGroups"`

	// Specifies the entity representing the availability zone to use while restoring the DB.
	AvailabilityZone *RecoveryObjectIdentifier `json:"availabilityZone,omitempty"`

	// Specifies the subnet within above VPC.
	// Required: true
	Subnet *RecoveryObjectIdentifier `json:"subnet"`

	// Specifies the Virtual Private Cloud to choose for the instance type.
	// Required: true
	Vpc *RecoveryObjectIdentifier `json:"vpc"`
}

// Validate validates this recover aws aurora new source network config
func (m *RecoverAwsAuroraNewSourceNetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailabilityZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverAwsAuroraNewSourceNetworkConfig) validateSecurityGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityGroups); i++ {
		if swag.IsZero(m.SecurityGroups[i]) { // not required
			continue
		}

		if m.SecurityGroups[i] != nil {
			if err := m.SecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("securityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("securityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverAwsAuroraNewSourceNetworkConfig) validateAvailabilityZone(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailabilityZone) { // not required
		return nil
	}

	if m.AvailabilityZone != nil {
		if err := m.AvailabilityZone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilityZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilityZone")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsAuroraNewSourceNetworkConfig) validateSubnet(formats strfmt.Registry) error {

	if err := validate.Required("subnet", "body", m.Subnet); err != nil {
		return err
	}

	if m.Subnet != nil {
		if err := m.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsAuroraNewSourceNetworkConfig) validateVpc(formats strfmt.Registry) error {

	if err := validate.Required("vpc", "body", m.Vpc); err != nil {
		return err
	}

	if m.Vpc != nil {
		if err := m.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover aws aurora new source network config based on the context it is used
func (m *RecoverAwsAuroraNewSourceNetworkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecurityGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailabilityZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverAwsAuroraNewSourceNetworkConfig) contextValidateSecurityGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityGroups); i++ {

		if m.SecurityGroups[i] != nil {

			if swag.IsZero(m.SecurityGroups[i]) { // not required
				return nil
			}

			if err := m.SecurityGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("securityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("securityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverAwsAuroraNewSourceNetworkConfig) contextValidateAvailabilityZone(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailabilityZone != nil {

		if swag.IsZero(m.AvailabilityZone) { // not required
			return nil
		}

		if err := m.AvailabilityZone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilityZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilityZone")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsAuroraNewSourceNetworkConfig) contextValidateSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.Subnet != nil {

		if err := m.Subnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsAuroraNewSourceNetworkConfig) contextValidateVpc(ctx context.Context, formats strfmt.Registry) error {

	if m.Vpc != nil {

		if err := m.Vpc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverAwsAuroraNewSourceNetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverAwsAuroraNewSourceNetworkConfig) UnmarshalBinary(b []byte) error {
	var res RecoverAwsAuroraNewSourceNetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
