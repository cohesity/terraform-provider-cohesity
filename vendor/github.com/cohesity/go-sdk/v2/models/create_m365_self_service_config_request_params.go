// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateM365SelfServiceConfigRequestParams Create or Update Microsoft365 Self-Service Configuration
//
// Specifies the request parameters to enable Self-Service for a given Microsoft365 source. The Self-Service workflow includes search & recovery of granular items within Mailbox & OneDrive workloads only.
//
// swagger:model CreateM365SelfServiceConfigRequestParams
type CreateM365SelfServiceConfigRequestParams struct {

	// Specifies the UUID of the Microsoft365 Source.
	// Required: true
	UUID *string `json:"uuid"`

	// Specifies the Cohesity Tenant ID for the Microsoft365 source owner.
	// Required: true
	TenantID *string `json:"tenantId"`

	// Specifies the configuration for enabling Self-Service workflows for Mailbox workload. If this is not specified, Self-Service will be disabled for Mailbox.
	MailboxParams *M365SelfServiceWorkloadParams `json:"mailboxParams,omitempty"`

	// Specifies the configuration for enabling Self-Service workflows for OneDrive workload. If this is not specified, Self-Service will be disabled for OneDrive.
	OneDriveParams *M365SelfServiceWorkloadParams `json:"oneDriveParams,omitempty"`
}

// Validate validates this create m365 self service config request params
func (m *CreateM365SelfServiceConfigRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailboxParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneDriveParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateM365SelfServiceConfigRequestParams) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

func (m *CreateM365SelfServiceConfigRequestParams) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *CreateM365SelfServiceConfigRequestParams) validateMailboxParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MailboxParams) { // not required
		return nil
	}

	if m.MailboxParams != nil {
		if err := m.MailboxParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailboxParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailboxParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateM365SelfServiceConfigRequestParams) validateOneDriveParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OneDriveParams) { // not required
		return nil
	}

	if m.OneDriveParams != nil {
		if err := m.OneDriveParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create m365 self service config request params based on the context it is used
func (m *CreateM365SelfServiceConfigRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMailboxParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneDriveParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateM365SelfServiceConfigRequestParams) contextValidateMailboxParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MailboxParams != nil {

		if swag.IsZero(m.MailboxParams) { // not required
			return nil
		}

		if err := m.MailboxParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailboxParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailboxParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateM365SelfServiceConfigRequestParams) contextValidateOneDriveParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OneDriveParams != nil {

		if swag.IsZero(m.OneDriveParams) { // not required
			return nil
		}

		if err := m.OneDriveParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateM365SelfServiceConfigRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateM365SelfServiceConfigRequestParams) UnmarshalBinary(b []byte) error {
	var res CreateM365SelfServiceConfigRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
