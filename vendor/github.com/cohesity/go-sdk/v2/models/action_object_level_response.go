// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ActionObjectLevelResponse Specifies the object level response params after performing an action on a protected object.
//
// swagger:model ActionObjectLevelResponse
type ActionObjectLevelResponse struct {
	ProtectionObjectInput

	// Specifies the infomration about status of resume action.
	ResumeStatus *ResumeActionObjectLevelResponse `json:"resumeStatus,omitempty"`

	// Specifies the infomration about status of pause action.
	PauseStatus *PauseActionObjectLevelResponse `json:"pauseStatus,omitempty"`

	// Specifies the infomration about status of run now action.
	RunNowStatus *RunNowActionObjectLevelResponse `json:"runNowStatus,omitempty"`

	// Specifies the infomration about status of Unprotect action.
	UnProtectStatus *UnprotectActionObjectLevelResponse `json:"unProtectStatus,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ActionObjectLevelResponse) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ProtectionObjectInput
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ProtectionObjectInput = aO0

	// AO1
	var dataAO1 struct {
		ResumeStatus *ResumeActionObjectLevelResponse `json:"resumeStatus,omitempty"`

		PauseStatus *PauseActionObjectLevelResponse `json:"pauseStatus,omitempty"`

		RunNowStatus *RunNowActionObjectLevelResponse `json:"runNowStatus,omitempty"`

		UnProtectStatus *UnprotectActionObjectLevelResponse `json:"unProtectStatus,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ResumeStatus = dataAO1.ResumeStatus

	m.PauseStatus = dataAO1.PauseStatus

	m.RunNowStatus = dataAO1.RunNowStatus

	m.UnProtectStatus = dataAO1.UnProtectStatus

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ActionObjectLevelResponse) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ProtectionObjectInput)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ResumeStatus *ResumeActionObjectLevelResponse `json:"resumeStatus,omitempty"`

		PauseStatus *PauseActionObjectLevelResponse `json:"pauseStatus,omitempty"`

		RunNowStatus *RunNowActionObjectLevelResponse `json:"runNowStatus,omitempty"`

		UnProtectStatus *UnprotectActionObjectLevelResponse `json:"unProtectStatus,omitempty"`
	}

	dataAO1.ResumeStatus = m.ResumeStatus

	dataAO1.PauseStatus = m.PauseStatus

	dataAO1.RunNowStatus = m.RunNowStatus

	dataAO1.UnProtectStatus = m.UnProtectStatus

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this action object level response
func (m *ActionObjectLevelResponse) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ProtectionObjectInput
	if err := m.ProtectionObjectInput.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResumeStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePauseStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunNowStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnProtectStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionObjectLevelResponse) validateResumeStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ResumeStatus) { // not required
		return nil
	}

	if m.ResumeStatus != nil {
		if err := m.ResumeStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resumeStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resumeStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ActionObjectLevelResponse) validatePauseStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.PauseStatus) { // not required
		return nil
	}

	if m.PauseStatus != nil {
		if err := m.PauseStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pauseStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pauseStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ActionObjectLevelResponse) validateRunNowStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RunNowStatus) { // not required
		return nil
	}

	if m.RunNowStatus != nil {
		if err := m.RunNowStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runNowStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runNowStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ActionObjectLevelResponse) validateUnProtectStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.UnProtectStatus) { // not required
		return nil
	}

	if m.UnProtectStatus != nil {
		if err := m.UnProtectStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unProtectStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unProtectStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this action object level response based on the context it is used
func (m *ActionObjectLevelResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ProtectionObjectInput
	if err := m.ProtectionObjectInput.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResumeStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePauseStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunNowStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnProtectStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionObjectLevelResponse) contextValidateResumeStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ResumeStatus != nil {

		if swag.IsZero(m.ResumeStatus) { // not required
			return nil
		}

		if err := m.ResumeStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resumeStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resumeStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ActionObjectLevelResponse) contextValidatePauseStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.PauseStatus != nil {

		if swag.IsZero(m.PauseStatus) { // not required
			return nil
		}

		if err := m.PauseStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pauseStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pauseStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ActionObjectLevelResponse) contextValidateRunNowStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.RunNowStatus != nil {

		if swag.IsZero(m.RunNowStatus) { // not required
			return nil
		}

		if err := m.RunNowStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runNowStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runNowStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ActionObjectLevelResponse) contextValidateUnProtectStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.UnProtectStatus != nil {

		if swag.IsZero(m.UnProtectStatus) { // not required
			return nil
		}

		if err := m.UnProtectStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unProtectStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unProtectStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionObjectLevelResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionObjectLevelResponse) UnmarshalBinary(b []byte) error {
	var res ActionObjectLevelResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
