// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Object Object information
//
// Specifies information about an object.
//
// swagger:model Object
type Object struct {
	CommonObjectSummary

	// Specifies the parameters which are specific to VMware objects.
	VmwareParams *VmwareObjectEntityParams `json:"vmwareParams,omitempty"`

	// Specifies the parameters for Elastifile object.
	ElastifileParams *CommonNasObjectParams `json:"elastifileParams,omitempty"`

	// Specifies the parameters for Flashblade object.
	FlashbladeParams *FlashbladeObjectParams `json:"flashbladeParams,omitempty"`

	// Specifies the parameters for GenericNas object.
	GenericNasParams *CommonNasObjectParams `json:"genericNasParams,omitempty"`

	// Specifies the parameters for GPFS object.
	GpfsParams *CommonNasObjectParams `json:"gpfsParams,omitempty"`

	// Specifies the parameters for M365 Group object.
	GroupParams *GroupObjectEntityParams `json:"groupParams,omitempty"`

	// Specifies the parameters for Isilon object.
	IsilonParams *IsilonObjectParams `json:"isilonParams,omitempty"`

	// Specifies the parameters for Msssql object.
	MssqlParams *MssqlObjectEntityParams `json:"mssqlParams,omitempty"`

	// Specifies the parameters for NetApp object.
	NetappParams *NetappObjectParams `json:"netappParams,omitempty"`

	// Specifies the parameters for Oracle object.
	OracleParams *OracleObjectEntityParams `json:"oracleParams,omitempty"`

	// Specifies the parameters for Physical object.
	PhysicalParams *PhysicalObjectEntityParams `json:"physicalParams,omitempty"`

	// Specifies the parameters for Sharepoint object.
	SharepointParams *SharepointObjectEntityParams `json:"sharepointParams,omitempty"`

	// Specifies the parameters for UDA object.
	UdaParams *UdaObjectParams `json:"udaParams,omitempty"`

	// Specifies the parameters for a View.
	ViewParams *ViewObjectParams `json:"viewParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Object) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonObjectSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonObjectSummary = aO0

	// AO1
	var dataAO1 struct {
		VmwareParams *VmwareObjectEntityParams `json:"vmwareParams,omitempty"`

		ElastifileParams *CommonNasObjectParams `json:"elastifileParams,omitempty"`

		FlashbladeParams *FlashbladeObjectParams `json:"flashbladeParams,omitempty"`

		GenericNasParams *CommonNasObjectParams `json:"genericNasParams,omitempty"`

		GpfsParams *CommonNasObjectParams `json:"gpfsParams,omitempty"`

		GroupParams *GroupObjectEntityParams `json:"groupParams,omitempty"`

		IsilonParams *IsilonObjectParams `json:"isilonParams,omitempty"`

		MssqlParams *MssqlObjectEntityParams `json:"mssqlParams,omitempty"`

		NetappParams *NetappObjectParams `json:"netappParams,omitempty"`

		OracleParams *OracleObjectEntityParams `json:"oracleParams,omitempty"`

		PhysicalParams *PhysicalObjectEntityParams `json:"physicalParams,omitempty"`

		SharepointParams *SharepointObjectEntityParams `json:"sharepointParams,omitempty"`

		UdaParams *UdaObjectParams `json:"udaParams,omitempty"`

		ViewParams *ViewObjectParams `json:"viewParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.VmwareParams = dataAO1.VmwareParams

	m.ElastifileParams = dataAO1.ElastifileParams

	m.FlashbladeParams = dataAO1.FlashbladeParams

	m.GenericNasParams = dataAO1.GenericNasParams

	m.GpfsParams = dataAO1.GpfsParams

	m.GroupParams = dataAO1.GroupParams

	m.IsilonParams = dataAO1.IsilonParams

	m.MssqlParams = dataAO1.MssqlParams

	m.NetappParams = dataAO1.NetappParams

	m.OracleParams = dataAO1.OracleParams

	m.PhysicalParams = dataAO1.PhysicalParams

	m.SharepointParams = dataAO1.SharepointParams

	m.UdaParams = dataAO1.UdaParams

	m.ViewParams = dataAO1.ViewParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Object) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonObjectSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		VmwareParams *VmwareObjectEntityParams `json:"vmwareParams,omitempty"`

		ElastifileParams *CommonNasObjectParams `json:"elastifileParams,omitempty"`

		FlashbladeParams *FlashbladeObjectParams `json:"flashbladeParams,omitempty"`

		GenericNasParams *CommonNasObjectParams `json:"genericNasParams,omitempty"`

		GpfsParams *CommonNasObjectParams `json:"gpfsParams,omitempty"`

		GroupParams *GroupObjectEntityParams `json:"groupParams,omitempty"`

		IsilonParams *IsilonObjectParams `json:"isilonParams,omitempty"`

		MssqlParams *MssqlObjectEntityParams `json:"mssqlParams,omitempty"`

		NetappParams *NetappObjectParams `json:"netappParams,omitempty"`

		OracleParams *OracleObjectEntityParams `json:"oracleParams,omitempty"`

		PhysicalParams *PhysicalObjectEntityParams `json:"physicalParams,omitempty"`

		SharepointParams *SharepointObjectEntityParams `json:"sharepointParams,omitempty"`

		UdaParams *UdaObjectParams `json:"udaParams,omitempty"`

		ViewParams *ViewObjectParams `json:"viewParams,omitempty"`
	}

	dataAO1.VmwareParams = m.VmwareParams

	dataAO1.ElastifileParams = m.ElastifileParams

	dataAO1.FlashbladeParams = m.FlashbladeParams

	dataAO1.GenericNasParams = m.GenericNasParams

	dataAO1.GpfsParams = m.GpfsParams

	dataAO1.GroupParams = m.GroupParams

	dataAO1.IsilonParams = m.IsilonParams

	dataAO1.MssqlParams = m.MssqlParams

	dataAO1.NetappParams = m.NetappParams

	dataAO1.OracleParams = m.OracleParams

	dataAO1.PhysicalParams = m.PhysicalParams

	dataAO1.SharepointParams = m.SharepointParams

	dataAO1.UdaParams = m.UdaParams

	dataAO1.ViewParams = m.ViewParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this object
func (m *Object) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonObjectSummary
	if err := m.CommonObjectSummary.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElastifileParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlashbladeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericNasParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpfsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMssqlParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharepointParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Object) validateVmwareParams(formats strfmt.Registry) error {

	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateElastifileParams(formats strfmt.Registry) error {

	if swag.IsZero(m.ElastifileParams) { // not required
		return nil
	}

	if m.ElastifileParams != nil {
		if err := m.ElastifileParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateFlashbladeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.FlashbladeParams) { // not required
		return nil
	}

	if m.FlashbladeParams != nil {
		if err := m.FlashbladeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateGenericNasParams(formats strfmt.Registry) error {

	if swag.IsZero(m.GenericNasParams) { // not required
		return nil
	}

	if m.GenericNasParams != nil {
		if err := m.GenericNasParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateGpfsParams(formats strfmt.Registry) error {

	if swag.IsZero(m.GpfsParams) { // not required
		return nil
	}

	if m.GpfsParams != nil {
		if err := m.GpfsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateGroupParams(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupParams) { // not required
		return nil
	}

	if m.GroupParams != nil {
		if err := m.GroupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groupParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateIsilonParams(formats strfmt.Registry) error {

	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateMssqlParams(formats strfmt.Registry) error {

	if swag.IsZero(m.MssqlParams) { // not required
		return nil
	}

	if m.MssqlParams != nil {
		if err := m.MssqlParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateNetappParams(formats strfmt.Registry) error {

	if swag.IsZero(m.NetappParams) { // not required
		return nil
	}

	if m.NetappParams != nil {
		if err := m.NetappParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateOracleParams(formats strfmt.Registry) error {

	if swag.IsZero(m.OracleParams) { // not required
		return nil
	}

	if m.OracleParams != nil {
		if err := m.OracleParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validatePhysicalParams(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateSharepointParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SharepointParams) { // not required
		return nil
	}

	if m.SharepointParams != nil {
		if err := m.SharepointParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharepointParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharepointParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateUdaParams(formats strfmt.Registry) error {

	if swag.IsZero(m.UdaParams) { // not required
		return nil
	}

	if m.UdaParams != nil {
		if err := m.UdaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) validateViewParams(formats strfmt.Registry) error {

	if swag.IsZero(m.ViewParams) { // not required
		return nil
	}

	if m.ViewParams != nil {
		if err := m.ViewParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this object based on the context it is used
func (m *Object) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonObjectSummary
	if err := m.CommonObjectSummary.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElastifileParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlashbladeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenericNasParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpfsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMssqlParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharepointParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Object) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateElastifileParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ElastifileParams != nil {

		if swag.IsZero(m.ElastifileParams) { // not required
			return nil
		}

		if err := m.ElastifileParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateFlashbladeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FlashbladeParams != nil {

		if swag.IsZero(m.FlashbladeParams) { // not required
			return nil
		}

		if err := m.FlashbladeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateGenericNasParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericNasParams != nil {

		if swag.IsZero(m.GenericNasParams) { // not required
			return nil
		}

		if err := m.GenericNasParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateGpfsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GpfsParams != nil {

		if swag.IsZero(m.GpfsParams) { // not required
			return nil
		}

		if err := m.GpfsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateGroupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GroupParams != nil {

		if swag.IsZero(m.GroupParams) { // not required
			return nil
		}

		if err := m.GroupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groupParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateMssqlParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MssqlParams != nil {

		if swag.IsZero(m.MssqlParams) { // not required
			return nil
		}

		if err := m.MssqlParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateNetappParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NetappParams != nil {

		if swag.IsZero(m.NetappParams) { // not required
			return nil
		}

		if err := m.NetappParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateOracleParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleParams != nil {

		if swag.IsZero(m.OracleParams) { // not required
			return nil
		}

		if err := m.OracleParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateSharepointParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SharepointParams != nil {

		if swag.IsZero(m.SharepointParams) { // not required
			return nil
		}

		if err := m.SharepointParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharepointParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharepointParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateUdaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaParams != nil {

		if swag.IsZero(m.UdaParams) { // not required
			return nil
		}

		if err := m.UdaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *Object) contextValidateViewParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewParams != nil {

		if swag.IsZero(m.ViewParams) { // not required
			return nil
		}

		if err := m.ViewParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Object) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Object) UnmarshalBinary(b []byte) error {
	var res Object
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
