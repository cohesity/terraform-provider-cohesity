// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeInfo Specifies info of logical volume (filesystem).
//
// swagger:model VolumeInfo
type VolumeInfo struct {

	// Specifies the volume name.
	Name *string `json:"name,omitempty"`

	// Specifies if this volume is supported.
	IsSupported *bool `json:"isSupported,omitempty"`

	// Specifies the volume type.
	// Enum: ["SimpleVolume","LVM","LDM"]
	VolumeType *string `json:"volumeType,omitempty"`

	// Specifies the filesystem type.
	FilesystemType *string `json:"filesystemType,omitempty"`

	// Specifies the filesystem uuid.
	FilesystemUUID *string `json:"filesystemUuid,omitempty"`

	// Specifies the volume guid.
	VolumeGUID *string `json:"volumeGuid,omitempty"`

	// Specifies volume size in bytes.
	VolumeSizeInBytes *int64 `json:"volumeSizeInBytes,omitempty"`

	// Specifies if this is NTFS dedupe volume
	IsDedupe *bool `json:"isDedupe,omitempty"`

	// Specifies the logical volume info. This fields is for 'LVM' and 'LDM' volume type only.
	LogicalVolumeInfo *LogicalVolumeInfo `json:"logicalVolumeInfo,omitempty"`
}

// Validate validates this volume info
func (m *VolumeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVolumeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalVolumeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var volumeInfoTypeVolumeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SimpleVolume","LVM","LDM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeInfoTypeVolumeTypePropEnum = append(volumeInfoTypeVolumeTypePropEnum, v)
	}
}

const (

	// VolumeInfoVolumeTypeSimpleVolume captures enum value "SimpleVolume"
	VolumeInfoVolumeTypeSimpleVolume string = "SimpleVolume"

	// VolumeInfoVolumeTypeLVM captures enum value "LVM"
	VolumeInfoVolumeTypeLVM string = "LVM"

	// VolumeInfoVolumeTypeLDM captures enum value "LDM"
	VolumeInfoVolumeTypeLDM string = "LDM"
)

// prop value enum
func (m *VolumeInfo) validateVolumeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, volumeInfoTypeVolumeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VolumeInfo) validateVolumeType(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVolumeTypeEnum("volumeType", "body", *m.VolumeType); err != nil {
		return err
	}

	return nil
}

func (m *VolumeInfo) validateLogicalVolumeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.LogicalVolumeInfo) { // not required
		return nil
	}

	if m.LogicalVolumeInfo != nil {
		if err := m.LogicalVolumeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logicalVolumeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logicalVolumeInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume info based on the context it is used
func (m *VolumeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLogicalVolumeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeInfo) contextValidateLogicalVolumeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.LogicalVolumeInfo != nil {

		if swag.IsZero(m.LogicalVolumeInfo) { // not required
			return nil
		}

		if err := m.LogicalVolumeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logicalVolumeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logicalVolumeInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeInfo) UnmarshalBinary(b []byte) error {
	var res VolumeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
