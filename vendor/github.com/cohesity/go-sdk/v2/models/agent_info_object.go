// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgentInfoObject Specifies the upgrade state of the agent.
//
// swagger:model AgentInfoObject
type AgentInfoObject struct {

	// Specifies the name of the source where the agent is installed.
	Name *string `json:"name,omitempty"`

	// Specifies the software version of the agent before upgrade.
	PreviousSoftwareVersion *string `json:"previousSoftwareVersion,omitempty"`

	// Specifies the upgrade status of the agent.<br> 'Scheduled' indicates that upgrade for the agent is yet to start.<br> 'Started' indicates that upgrade for the agent is started.<br> 'Succeeded' indicates that agent was upgraded successfully.<br> 'Failed' indicates that upgrade for the agent has failed.<br> 'Skipped' indicates that upgrade for the agent was skipped.
	// Enum: ["Scheduled","Started","Succeeded","Failed","Skipped"]
	Status *string `json:"status,omitempty"`

	// Specifies the time when the upgrade for an agent started as a Unix epoch Timestamp (in microseconds).
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the time when the upgrade for an agent completed as a Unix epoch Timestamp (in microseconds).
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the error during upgrade for an agent.
	Error *Error `json:"error,omitempty"`
}

// Validate validates this agent info object
func (m *AgentInfoObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentInfoObjectTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Scheduled","Started","Succeeded","Failed","Skipped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentInfoObjectTypeStatusPropEnum = append(agentInfoObjectTypeStatusPropEnum, v)
	}
}

const (

	// AgentInfoObjectStatusScheduled captures enum value "Scheduled"
	AgentInfoObjectStatusScheduled string = "Scheduled"

	// AgentInfoObjectStatusStarted captures enum value "Started"
	AgentInfoObjectStatusStarted string = "Started"

	// AgentInfoObjectStatusSucceeded captures enum value "Succeeded"
	AgentInfoObjectStatusSucceeded string = "Succeeded"

	// AgentInfoObjectStatusFailed captures enum value "Failed"
	AgentInfoObjectStatusFailed string = "Failed"

	// AgentInfoObjectStatusSkipped captures enum value "Skipped"
	AgentInfoObjectStatusSkipped string = "Skipped"
)

// prop value enum
func (m *AgentInfoObject) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentInfoObjectTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgentInfoObject) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AgentInfoObject) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this agent info object based on the context it is used
func (m *AgentInfoObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentInfoObject) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentInfoObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentInfoObject) UnmarshalBinary(b []byte) error {
	var res AgentInfoObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
