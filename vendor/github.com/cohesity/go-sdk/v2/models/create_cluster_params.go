// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateClusterParams Create Cluster Request Parameters.
//
// Specifies the parameters required to create cluster.
//
// swagger:model CreateClusterParams
type CreateClusterParams struct {

	// Specifies the name of the new cluster.
	// Required: true
	Name *string `json:"name"`

	// Specifies the type of the new cluster.
	// Required: true
	// Enum: ["Physical","Virtual","Cloud","Rigel","Cohesion","Unknown","HeliosOnPremVM"]
	Type *string `json:"type"`

	// Specifies whether or not to enable encryption. If encryption is enabled, all data on the Cluster will be encrypted. This can only be enabled at Cluster creation time and cannot be disabled later.
	// Required: true
	EnableEncryption bool `json:"enableEncryption"`

	// Specifies all of the parameters needed for network configuration of the new Cluster.
	// Required: true
	NetworkConfig *ClusterCreateNetworkConfig `json:"networkConfig"`

	// Specifies the proxy to use for external HTTP traffic.
	ProxyServerConfig *ClusterProxyServerConfig `json:"proxyServerConfig,omitempty"`

	// Specifies the parameters which are specific to creation of physical cluster. It is required if clusterType is Physical.
	PhysicalClusterParams *ClusterCreatePhysicalParams `json:"physicalClusterParams,omitempty"`

	// Specifies the parameters which are specific to creation of virtual cluster. It is required if clusterType is Virtual.
	VirtualClusterParams *ClusterCreateVirtualParams `json:"virtualClusterParams,omitempty"`

	// Specifies the parameters which are specific to creation of cloud cluster. It is required if clusterType is Cloud.
	CloudClusterParams *ClusterCreateCloudParams `json:"cloudClusterParams,omitempty"`

	// Specifies the parameters which are specific to creation of rigel cluster. It is required if clusterType is Rigel.
	RigelClusterParams *ClusterCreateRigelParams `json:"rigelClusterParams,omitempty"`
}

// Validate validates this create cluster params
func (m *CreateClusterParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableEncryption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyServerConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalClusterParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualClusterParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudClusterParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRigelClusterParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateClusterParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var createClusterParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Physical","Virtual","Cloud","Rigel","Cohesion","Unknown","HeliosOnPremVM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createClusterParamsTypeTypePropEnum = append(createClusterParamsTypeTypePropEnum, v)
	}
}

const (

	// CreateClusterParamsTypePhysical captures enum value "Physical"
	CreateClusterParamsTypePhysical string = "Physical"

	// CreateClusterParamsTypeVirtual captures enum value "Virtual"
	CreateClusterParamsTypeVirtual string = "Virtual"

	// CreateClusterParamsTypeCloud captures enum value "Cloud"
	CreateClusterParamsTypeCloud string = "Cloud"

	// CreateClusterParamsTypeRigel captures enum value "Rigel"
	CreateClusterParamsTypeRigel string = "Rigel"

	// CreateClusterParamsTypeCohesion captures enum value "Cohesion"
	CreateClusterParamsTypeCohesion string = "Cohesion"

	// CreateClusterParamsTypeUnknown captures enum value "Unknown"
	CreateClusterParamsTypeUnknown string = "Unknown"

	// CreateClusterParamsTypeHeliosOnPremVM captures enum value "HeliosOnPremVM"
	CreateClusterParamsTypeHeliosOnPremVM string = "HeliosOnPremVM"
)

// prop value enum
func (m *CreateClusterParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createClusterParamsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateClusterParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CreateClusterParams) validateEnableEncryption(formats strfmt.Registry) error {

	if err := validate.Required("enableEncryption", "body", bool(m.EnableEncryption)); err != nil {
		return err
	}

	return nil
}

func (m *CreateClusterParams) validateNetworkConfig(formats strfmt.Registry) error {

	if err := validate.Required("networkConfig", "body", m.NetworkConfig); err != nil {
		return err
	}

	if m.NetworkConfig != nil {
		if err := m.NetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreateClusterParams) validateProxyServerConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyServerConfig) { // not required
		return nil
	}

	if m.ProxyServerConfig != nil {
		if err := m.ProxyServerConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyServerConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyServerConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreateClusterParams) validatePhysicalClusterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalClusterParams) { // not required
		return nil
	}

	if m.PhysicalClusterParams != nil {
		if err := m.PhysicalClusterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalClusterParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateClusterParams) validateVirtualClusterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualClusterParams) { // not required
		return nil
	}

	if m.VirtualClusterParams != nil {
		if err := m.VirtualClusterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualClusterParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateClusterParams) validateCloudClusterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudClusterParams) { // not required
		return nil
	}

	if m.CloudClusterParams != nil {
		if err := m.CloudClusterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudClusterParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateClusterParams) validateRigelClusterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RigelClusterParams) { // not required
		return nil
	}

	if m.RigelClusterParams != nil {
		if err := m.RigelClusterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rigelClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rigelClusterParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create cluster params based on the context it is used
func (m *CreateClusterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxyServerConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalClusterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualClusterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudClusterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRigelClusterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateClusterParams) contextValidateNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkConfig != nil {

		if err := m.NetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreateClusterParams) contextValidateProxyServerConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxyServerConfig != nil {

		if swag.IsZero(m.ProxyServerConfig) { // not required
			return nil
		}

		if err := m.ProxyServerConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyServerConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyServerConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CreateClusterParams) contextValidatePhysicalClusterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalClusterParams != nil {

		if swag.IsZero(m.PhysicalClusterParams) { // not required
			return nil
		}

		if err := m.PhysicalClusterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalClusterParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateClusterParams) contextValidateVirtualClusterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VirtualClusterParams != nil {

		if swag.IsZero(m.VirtualClusterParams) { // not required
			return nil
		}

		if err := m.VirtualClusterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualClusterParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateClusterParams) contextValidateCloudClusterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudClusterParams != nil {

		if swag.IsZero(m.CloudClusterParams) { // not required
			return nil
		}

		if err := m.CloudClusterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudClusterParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateClusterParams) contextValidateRigelClusterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RigelClusterParams != nil {

		if swag.IsZero(m.RigelClusterParams) { // not required
			return nil
		}

		if err := m.RigelClusterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rigelClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rigelClusterParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateClusterParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateClusterParams) UnmarshalBinary(b []byte) error {
	var res CreateClusterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
