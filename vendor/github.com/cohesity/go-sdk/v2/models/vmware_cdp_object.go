// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareCdpObject Specifies the VMware specific CDP object details.
//
// swagger:model VmwareCdpObject
type VmwareCdpObject struct {
	CdpObjectInfo

	// Specifies the state of CDP IO filter. CDP IO filter is an agent which will be installed on the object for performing continuous backup. <br> 1. 'kNotInstalled' specifies that CDP is enabled on this object but filter is not installed. <br> 2. 'kInstallFilterInProgress' specifies that IO filter installation is triggered and in progress. <br> 3. 'kFilterInstalledIOInactive' specifies that IO filter is installed but IO streaming is disabled due to missing backup or explicitly disabled by the user. <br> 4. 'kIOActivationInProgress' specifies that IO filter is activated to start streaming. <br> 5. 'kIOActive' specifies that filter is attached to the object and started streaming. <br> 6. 'kIODeactivationInProgress' specifies that deactivation has been initiated to stop the IO streaming. <br> 7. 'kUninstallFilterInProgress' specifies that uninstallation of IO filter is in progress.
	// Enum: ["NotInstalled","InstallFilterInProgress","FilterInstalledIOInactive","FilterInstalled","IOInactive","IOActivationInProgress","IOActive","IODeactivationInProgress","UninstallFilterInProgress","UpgradeFilterInProgress","UpgradeFilterFailed","WaitingForCDPPolicyAttach"]
	IoFilterStatus *string `json:"ioFilterStatus,omitempty"`

	// Specifies the error message related to IO filter if there is any.
	IoFilterErrorMessage *string `json:"ioFilterErrorMessage,omitempty"`

	// Specifies the error message from the cdp pre-processing stage if any.
	PreProcessingErrorMessage *string `json:"preProcessingErrorMessage,omitempty"`

	// Specifies the error message from the guardrails info from cdp state if any.
	GuardrailsErrorMessage *string `json:"guardrailsErrorMessage,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VmwareCdpObject) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CdpObjectInfo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CdpObjectInfo = aO0

	// AO1
	var dataAO1 struct {
		IoFilterStatus *string `json:"ioFilterStatus,omitempty"`

		IoFilterErrorMessage *string `json:"ioFilterErrorMessage,omitempty"`

		PreProcessingErrorMessage *string `json:"preProcessingErrorMessage,omitempty"`

		GuardrailsErrorMessage *string `json:"guardrailsErrorMessage,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.IoFilterStatus = dataAO1.IoFilterStatus

	m.IoFilterErrorMessage = dataAO1.IoFilterErrorMessage

	m.PreProcessingErrorMessage = dataAO1.PreProcessingErrorMessage

	m.GuardrailsErrorMessage = dataAO1.GuardrailsErrorMessage

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VmwareCdpObject) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CdpObjectInfo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		IoFilterStatus *string `json:"ioFilterStatus,omitempty"`

		IoFilterErrorMessage *string `json:"ioFilterErrorMessage,omitempty"`

		PreProcessingErrorMessage *string `json:"preProcessingErrorMessage,omitempty"`

		GuardrailsErrorMessage *string `json:"guardrailsErrorMessage,omitempty"`
	}

	dataAO1.IoFilterStatus = m.IoFilterStatus

	dataAO1.IoFilterErrorMessage = m.IoFilterErrorMessage

	dataAO1.PreProcessingErrorMessage = m.PreProcessingErrorMessage

	dataAO1.GuardrailsErrorMessage = m.GuardrailsErrorMessage

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vmware cdp object
func (m *VmwareCdpObject) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CdpObjectInfo
	if err := m.CdpObjectInfo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoFilterStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmwareCdpObjectTypeIoFilterStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotInstalled","InstallFilterInProgress","FilterInstalledIOInactive","FilterInstalled","IOInactive","IOActivationInProgress","IOActive","IODeactivationInProgress","UninstallFilterInProgress","UpgradeFilterInProgress","UpgradeFilterFailed","WaitingForCDPPolicyAttach"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmwareCdpObjectTypeIoFilterStatusPropEnum = append(vmwareCdpObjectTypeIoFilterStatusPropEnum, v)
	}
}

// property enum
func (m *VmwareCdpObject) validateIoFilterStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmwareCdpObjectTypeIoFilterStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VmwareCdpObject) validateIoFilterStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.IoFilterStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateIoFilterStatusEnum("ioFilterStatus", "body", *m.IoFilterStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vmware cdp object based on the context it is used
func (m *VmwareCdpObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CdpObjectInfo
	if err := m.CdpObjectInfo.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VmwareCdpObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareCdpObject) UnmarshalBinary(b []byte) error {
	var res VmwareCdpObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
