// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchSfdcRecordsRequestParams Specifies the parameters which are specific for searching Salesforce records.
//
// swagger:model SearchSfdcRecordsRequestParams
type SearchSfdcRecordsRequestParams struct {

	// Specifies the query string to search records. Query string can be one or multiples clauses joined together by 'AND' or 'OR' claused.
	QueryString *string `json:"queryString,omitempty"`

	// Specifies the name of the object.
	// Required: true
	ObjectName *string `json:"objectName"`

	// Specifies a list of mutuation types for an object.
	// Required: true
	// Unique: true
	MutationTypes []string `json:"mutationTypes"`

	// Specifies the id of the snapshot for the object.
	// Required: true
	SnapshotID *string `json:"snapshotId"`
}

// Validate validates this search sfdc records request params
func (m *SearchSfdcRecordsRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMutationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchSfdcRecordsRequestParams) validateObjectName(formats strfmt.Registry) error {

	if err := validate.Required("objectName", "body", m.ObjectName); err != nil {
		return err
	}

	return nil
}

var searchSfdcRecordsRequestParamsMutationTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["All","Added","Removed","Changed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchSfdcRecordsRequestParamsMutationTypesItemsEnum = append(searchSfdcRecordsRequestParamsMutationTypesItemsEnum, v)
	}
}

func (m *SearchSfdcRecordsRequestParams) validateMutationTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchSfdcRecordsRequestParamsMutationTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchSfdcRecordsRequestParams) validateMutationTypes(formats strfmt.Registry) error {

	if err := validate.Required("mutationTypes", "body", m.MutationTypes); err != nil {
		return err
	}

	if err := validate.UniqueItems("mutationTypes", "body", m.MutationTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.MutationTypes); i++ {

		// value enum
		if err := m.validateMutationTypesItemsEnum("mutationTypes"+"."+strconv.Itoa(i), "body", m.MutationTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *SearchSfdcRecordsRequestParams) validateSnapshotID(formats strfmt.Registry) error {

	if err := validate.Required("snapshotId", "body", m.SnapshotID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search sfdc records request params based on context it is used
func (m *SearchSfdcRecordsRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchSfdcRecordsRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchSfdcRecordsRequestParams) UnmarshalBinary(b []byte) error {
	var res SearchSfdcRecordsRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
