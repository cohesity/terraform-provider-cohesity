// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenIDConnectAction Open ID Connect Action
//
// swagger:model OpenIdConnectAction
type OpenIDConnectAction struct {

	// Specifies an action to perform on an Open ID Connect Identity Provider. The following actions are currently supported: 1. 'RefreshPublicKeys': Refreshes the public keys currently stored on the cluster for the user sending the request. In order to do this, the public key URL specified in the current users Open ID configuration will be polled for a new public key.
	// Required: true
	// Enum: ["RefreshPublicKeys"]
	Action *string `json:"action"`
}

// Validate validates this open Id connect action
func (m *OpenIDConnectAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var openIdConnectActionTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RefreshPublicKeys"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openIdConnectActionTypeActionPropEnum = append(openIdConnectActionTypeActionPropEnum, v)
	}
}

const (

	// OpenIDConnectActionActionRefreshPublicKeys captures enum value "RefreshPublicKeys"
	OpenIDConnectActionActionRefreshPublicKeys string = "RefreshPublicKeys"
)

// prop value enum
func (m *OpenIDConnectAction) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openIdConnectActionTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenIDConnectAction) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this open Id connect action based on context it is used
func (m *OpenIDConnectAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenIDConnectAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenIDConnectAction) UnmarshalBinary(b []byte) error {
	var res OpenIDConnectAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
