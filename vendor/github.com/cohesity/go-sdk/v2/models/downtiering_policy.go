// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DowntieringPolicy Specifies the data downtiering policy.
//
// swagger:model DowntieringPolicy
type DowntieringPolicy struct {

	// Specifies whether the data tiering task will be written to HDD or
	// SSD.
	// Enum: ["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]
	QosPolicy *string `json:"qosPolicy,omitempty"`

	// Specifies settings for indexing files found in an Object
	// (such as a VM) so these files can be searched and recovered. This
	// also specifies inclusion and exclusion rules that determine the
	// directories to index.
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`

	// retention
	Retention *Retention `json:"retention,omitempty"`

	// Specifies whether to create a symlink for the migrated data from
	// source to target.
	SkipBackSymlink *bool `json:"skipBackSymlink,omitempty"`

	// Specifies whether to remove the orphan data from the target if the
	// symlink is removed from the source.
	AutoOrphanDataCleanup *bool `json:"autoOrphanDataCleanup,omitempty"`

	// Specifies the maximum amount of data that should be present on source
	// after downtiering.
	TieringGoal *int64 `json:"tieringGoal,omitempty"`

	// file age
	FileAge *DowntieringFileAgePolicy `json:"fileAge,omitempty"`

	// target
	Target *DowntieringTarget `json:"target,omitempty"`

	// Array of Tag objects used to represent different file based policies
	TagsInfo []*DataTieringTagObject `json:"tagsInfo"`

	CommonTieringPolicy
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DowntieringPolicy) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		QosPolicy *string `json:"qosPolicy,omitempty"`

		IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`

		Retention *Retention `json:"retention,omitempty"`

		SkipBackSymlink *bool `json:"skipBackSymlink,omitempty"`

		AutoOrphanDataCleanup *bool `json:"autoOrphanDataCleanup,omitempty"`

		TieringGoal *int64 `json:"tieringGoal,omitempty"`

		FileAge *DowntieringFileAgePolicy `json:"fileAge,omitempty"`

		Target *DowntieringTarget `json:"target,omitempty"`

		TagsInfo []*DataTieringTagObject `json:"tagsInfo"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.QosPolicy = dataAO0.QosPolicy

	m.IndexingPolicy = dataAO0.IndexingPolicy

	m.Retention = dataAO0.Retention

	m.SkipBackSymlink = dataAO0.SkipBackSymlink

	m.AutoOrphanDataCleanup = dataAO0.AutoOrphanDataCleanup

	m.TieringGoal = dataAO0.TieringGoal

	m.FileAge = dataAO0.FileAge

	m.Target = dataAO0.Target

	m.TagsInfo = dataAO0.TagsInfo

	// AO1
	var aO1 CommonTieringPolicy
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.CommonTieringPolicy = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DowntieringPolicy) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		QosPolicy *string `json:"qosPolicy,omitempty"`

		IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`

		Retention *Retention `json:"retention,omitempty"`

		SkipBackSymlink *bool `json:"skipBackSymlink,omitempty"`

		AutoOrphanDataCleanup *bool `json:"autoOrphanDataCleanup,omitempty"`

		TieringGoal *int64 `json:"tieringGoal,omitempty"`

		FileAge *DowntieringFileAgePolicy `json:"fileAge,omitempty"`

		Target *DowntieringTarget `json:"target,omitempty"`

		TagsInfo []*DataTieringTagObject `json:"tagsInfo"`
	}

	dataAO0.QosPolicy = m.QosPolicy

	dataAO0.IndexingPolicy = m.IndexingPolicy

	dataAO0.Retention = m.Retention

	dataAO0.SkipBackSymlink = m.SkipBackSymlink

	dataAO0.AutoOrphanDataCleanup = m.AutoOrphanDataCleanup

	dataAO0.TieringGoal = m.TieringGoal

	dataAO0.FileAge = m.FileAge

	dataAO0.Target = m.Target

	dataAO0.TagsInfo = m.TagsInfo

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.CommonTieringPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this downtiering policy
func (m *DowntieringPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQosPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndexingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileAge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagsInfo(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with CommonTieringPolicy
	if err := m.CommonTieringPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var downtieringPolicyTypeQosPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		downtieringPolicyTypeQosPolicyPropEnum = append(downtieringPolicyTypeQosPolicyPropEnum, v)
	}
}

// property enum
func (m *DowntieringPolicy) validateQosPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, downtieringPolicyTypeQosPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DowntieringPolicy) validateQosPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.QosPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateQosPolicyEnum("qosPolicy", "body", *m.QosPolicy); err != nil {
		return err
	}

	return nil
}

func (m *DowntieringPolicy) validateIndexingPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.IndexingPolicy) { // not required
		return nil
	}

	if m.IndexingPolicy != nil {
		if err := m.IndexingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indexingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indexingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *DowntieringPolicy) validateRetention(formats strfmt.Registry) error {

	if swag.IsZero(m.Retention) { // not required
		return nil
	}

	if m.Retention != nil {
		if err := m.Retention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

func (m *DowntieringPolicy) validateFileAge(formats strfmt.Registry) error {

	if swag.IsZero(m.FileAge) { // not required
		return nil
	}

	if m.FileAge != nil {
		if err := m.FileAge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileAge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileAge")
			}
			return err
		}
	}

	return nil
}

func (m *DowntieringPolicy) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

func (m *DowntieringPolicy) validateTagsInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TagsInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.TagsInfo); i++ {
		if swag.IsZero(m.TagsInfo[i]) { // not required
			continue
		}

		if m.TagsInfo[i] != nil {
			if err := m.TagsInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this downtiering policy based on the context it is used
func (m *DowntieringPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIndexingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileAge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with CommonTieringPolicy
	if err := m.CommonTieringPolicy.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DowntieringPolicy) contextValidateIndexingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.IndexingPolicy != nil {

		if swag.IsZero(m.IndexingPolicy) { // not required
			return nil
		}

		if err := m.IndexingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indexingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indexingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *DowntieringPolicy) contextValidateRetention(ctx context.Context, formats strfmt.Registry) error {

	if m.Retention != nil {

		if swag.IsZero(m.Retention) { // not required
			return nil
		}

		if err := m.Retention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

func (m *DowntieringPolicy) contextValidateFileAge(ctx context.Context, formats strfmt.Registry) error {

	if m.FileAge != nil {

		if swag.IsZero(m.FileAge) { // not required
			return nil
		}

		if err := m.FileAge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileAge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileAge")
			}
			return err
		}
	}

	return nil
}

func (m *DowntieringPolicy) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {

		if swag.IsZero(m.Target) { // not required
			return nil
		}

		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

func (m *DowntieringPolicy) contextValidateTagsInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagsInfo); i++ {

		if m.TagsInfo[i] != nil {

			if swag.IsZero(m.TagsInfo[i]) { // not required
				return nil
			}

			if err := m.TagsInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DowntieringPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DowntieringPolicy) UnmarshalBinary(b []byte) error {
	var res DowntieringPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
