// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArchivalQstarTapeExternalTargetParams QStar Tape External Target Params for archival purpose type.
//
// Specifies the parameters which are specific to QStar Tape related External Targets of archival purpose type.
//
// swagger:model ArchivalQstarTapeExternalTargetParams
type ArchivalQstarTapeExternalTargetParams struct {

	// Specifies the host of the QStar Tape external target.
	// Required: true
	Host *string `json:"host"`

	// Specifies the Web Services Port of the QStar Tape external target.
	// Required: true
	WebServicesPort *int32 `json:"webServicesPort"`

	// Specifies the Username of the QStar Tape external target.
	// Required: true
	Username *string `json:"username"`

	// Specifies the Password of the QStar Tape external target.
	Password *string `json:"password,omitempty"`

	// Specifies the share type of QStar Tape external target.
	// Enum: ["CIFS","NFS"]
	ShareType *string `json:"shareType,omitempty"`

	// Specifies whether HTTPS is used or not.
	UseHTTPS *bool `json:"useHttps,omitempty"`

	// Specifies the Integral Volume Names of the QStar Tape external target.
	IntegralVolumeNames []string `json:"integralVolumeNames"`

	// Specifies if Incremental Archival setting is enabled or not.
	IsIncrementalArchivalEnabled *bool `json:"isIncrementalArchivalEnabled,omitempty"`

	// Specifies if Forever Incremental Archival setting is enabled or not.
	IsForeverIncrementalArchivalEnabled *bool `json:"isForeverIncrementalArchivalEnabled,omitempty"`
}

// Validate validates this archival qstar tape external target params
func (m *ArchivalQstarTapeExternalTargetParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebServicesPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShareType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivalQstarTapeExternalTargetParams) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *ArchivalQstarTapeExternalTargetParams) validateWebServicesPort(formats strfmt.Registry) error {

	if err := validate.Required("webServicesPort", "body", m.WebServicesPort); err != nil {
		return err
	}

	return nil
}

func (m *ArchivalQstarTapeExternalTargetParams) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

var archivalQstarTapeExternalTargetParamsTypeShareTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CIFS","NFS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		archivalQstarTapeExternalTargetParamsTypeShareTypePropEnum = append(archivalQstarTapeExternalTargetParamsTypeShareTypePropEnum, v)
	}
}

const (

	// ArchivalQstarTapeExternalTargetParamsShareTypeCIFS captures enum value "CIFS"
	ArchivalQstarTapeExternalTargetParamsShareTypeCIFS string = "CIFS"

	// ArchivalQstarTapeExternalTargetParamsShareTypeNFS captures enum value "NFS"
	ArchivalQstarTapeExternalTargetParamsShareTypeNFS string = "NFS"
)

// prop value enum
func (m *ArchivalQstarTapeExternalTargetParams) validateShareTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, archivalQstarTapeExternalTargetParamsTypeShareTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArchivalQstarTapeExternalTargetParams) validateShareType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShareType) { // not required
		return nil
	}

	// value enum
	if err := m.validateShareTypeEnum("shareType", "body", *m.ShareType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this archival qstar tape external target params based on context it is used
func (m *ArchivalQstarTapeExternalTargetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ArchivalQstarTapeExternalTargetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchivalQstarTapeExternalTargetParams) UnmarshalBinary(b []byte) error {
	var res ArchivalQstarTapeExternalTargetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
