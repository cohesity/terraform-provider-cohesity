// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FallbackUserIDMappingParams Specifies a fallback param for Unix and Windows users mapping.
//
// swagger:model FallbackUserIdMappingParams
type FallbackUserIDMappingParams struct {

	// Specifies the type of the mapping.
	// Required: true
	// Enum: ["Rid","Fixed"]
	Type *string `json:"type"`

	// Specifies the params for Fixed mapping type mapping.
	FixedTypeParams *AdFixedTypeParams `json:"fixedTypeParams,omitempty"`
}

// Validate validates this fallback user Id mapping params
func (m *FallbackUserIDMappingParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fallbackUserIdMappingParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rid","Fixed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fallbackUserIdMappingParamsTypeTypePropEnum = append(fallbackUserIdMappingParamsTypeTypePropEnum, v)
	}
}

const (

	// FallbackUserIDMappingParamsTypeRid captures enum value "Rid"
	FallbackUserIDMappingParamsTypeRid string = "Rid"

	// FallbackUserIDMappingParamsTypeFixed captures enum value "Fixed"
	FallbackUserIDMappingParamsTypeFixed string = "Fixed"
)

// prop value enum
func (m *FallbackUserIDMappingParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fallbackUserIdMappingParamsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FallbackUserIDMappingParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *FallbackUserIDMappingParams) validateFixedTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FixedTypeParams) { // not required
		return nil
	}

	if m.FixedTypeParams != nil {
		if err := m.FixedTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixedTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fixedTypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fallback user Id mapping params based on the context it is used
func (m *FallbackUserIDMappingParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFixedTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FallbackUserIDMappingParams) contextValidateFixedTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FixedTypeParams != nil {

		if swag.IsZero(m.FixedTypeParams) { // not required
			return nil
		}

		if err := m.FixedTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixedTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fixedTypeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FallbackUserIDMappingParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FallbackUserIDMappingParams) UnmarshalBinary(b []byte) error {
	var res FallbackUserIDMappingParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
