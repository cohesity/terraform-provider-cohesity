// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicationConfig Replication Target Configuration
//
// Specifies settings for copying Snapshots to Remote Clusters. This also specifies the retention policy that should be applied to Snapshots after they have been copied to the specified target.
//
// swagger:model ReplicationConfig
type ReplicationConfig struct {
	CommonTargetConfiguration

	// Specifies the type of target to which replication need to be performed.
	// Required: true
	// Enum: ["RemoteCluster","AWS","Azure"]
	TargetType *string `json:"targetType"`

	// Specifies the required information to add remote cluster as replication target.
	RemoteTargetConfig *RemoteTargetConfig `json:"remoteTargetConfig,omitempty"`

	// Specifies the required information to add AWS as replication target.
	AwsTargetConfig *AWSTargetConfig `json:"awsTargetConfig,omitempty"`

	// Specifies the required information to add Azure as replication target.
	AzureTargetConfig *AzureTargetConfig `json:"azureTargetConfig,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ReplicationConfig) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonTargetConfiguration
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonTargetConfiguration = aO0

	// AO1
	var dataAO1 struct {
		TargetType *string `json:"targetType"`

		RemoteTargetConfig *RemoteTargetConfig `json:"remoteTargetConfig,omitempty"`

		AwsTargetConfig *AWSTargetConfig `json:"awsTargetConfig,omitempty"`

		AzureTargetConfig *AzureTargetConfig `json:"azureTargetConfig,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.TargetType = dataAO1.TargetType

	m.RemoteTargetConfig = dataAO1.RemoteTargetConfig

	m.AwsTargetConfig = dataAO1.AwsTargetConfig

	m.AzureTargetConfig = dataAO1.AzureTargetConfig

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ReplicationConfig) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonTargetConfiguration)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		TargetType *string `json:"targetType"`

		RemoteTargetConfig *RemoteTargetConfig `json:"remoteTargetConfig,omitempty"`

		AwsTargetConfig *AWSTargetConfig `json:"awsTargetConfig,omitempty"`

		AzureTargetConfig *AzureTargetConfig `json:"azureTargetConfig,omitempty"`
	}

	dataAO1.TargetType = m.TargetType

	dataAO1.RemoteTargetConfig = m.RemoteTargetConfig

	dataAO1.AwsTargetConfig = m.AwsTargetConfig

	dataAO1.AzureTargetConfig = m.AzureTargetConfig

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this replication config
func (m *ReplicationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTargetConfiguration
	if err := m.CommonTargetConfiguration.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteTargetConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsTargetConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureTargetConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var replicationConfigTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RemoteCluster","AWS","Azure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicationConfigTypeTargetTypePropEnum = append(replicationConfigTypeTargetTypePropEnum, v)
	}
}

// property enum
func (m *ReplicationConfig) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, replicationConfigTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReplicationConfig) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("targetType", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("targetType", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationConfig) validateRemoteTargetConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.RemoteTargetConfig) { // not required
		return nil
	}

	if m.RemoteTargetConfig != nil {
		if err := m.RemoteTargetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteTargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationConfig) validateAwsTargetConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsTargetConfig) { // not required
		return nil
	}

	if m.AwsTargetConfig != nil {
		if err := m.AwsTargetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsTargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationConfig) validateAzureTargetConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.AzureTargetConfig) { // not required
		return nil
	}

	if m.AzureTargetConfig != nil {
		if err := m.AzureTargetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureTargetConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replication config based on the context it is used
func (m *ReplicationConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTargetConfiguration
	if err := m.CommonTargetConfiguration.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteTargetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsTargetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureTargetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationConfig) contextValidateRemoteTargetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteTargetConfig != nil {

		if swag.IsZero(m.RemoteTargetConfig) { // not required
			return nil
		}

		if err := m.RemoteTargetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteTargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationConfig) contextValidateAwsTargetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsTargetConfig != nil {

		if swag.IsZero(m.AwsTargetConfig) { // not required
			return nil
		}

		if err := m.AwsTargetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsTargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationConfig) contextValidateAzureTargetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureTargetConfig != nil {

		if swag.IsZero(m.AzureTargetConfig) { // not required
			return nil
		}

		if err := m.AzureTargetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureTargetConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationConfig) UnmarshalBinary(b []byte) error {
	var res ReplicationConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
