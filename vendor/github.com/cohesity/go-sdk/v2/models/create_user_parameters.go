// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateUserParameters Specifies the parameters to create a new Cohesity User.
//
// swagger:model CreateUserParameters
type CreateUserParameters struct {

	// Specifies the username.
	// Required: true
	Username string `json:"username"`

	// Specifies the domain of the user. For active directories, this is the fully qualified domain name (FQDN). It is 'LOCAL' for local users on the Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
	// Required: true
	Domain string `json:"domain"`

	// Specifies the description of the User.
	Description *string `json:"description,omitempty"`

	// Specifies the Cohesity roles to associate with the user. The Cohesity roles determine privileges on the Cohesity Cluster for this user.
	Roles []string `json:"roles"`

	// Specifies the primary group of the User. Primary group is used for file access.
	// Read Only: true
	PrimaryGroup *string `json:"primaryGroup,omitempty"`

	// Specifies additional groups the User may belong to.
	// Read Only: true
	OtherGroups []string `json:"otherGroups,omitempty"`

	// Specifies whether the User is restricted. A restricted user can only view & manage the objects it has permissions to.
	Restricted *bool `json:"restricted,omitempty"`

	// Specifies the epoch time in milliseconds since when the user can login.
	EffectiveTimeMsecs *int64 `json:"effectiveTimeMsecs,omitempty"`

	// Specifies the epoch time in milliseconds when the user expires. Post expiry the user cannot access Cohesity cluster.
	ExpiryTimeMsecs *int64 `json:"expiryTimeMsecs,omitempty"`

	// Specifies whether the User is locked.
	Locked *bool `json:"locked,omitempty"`

	// Specifies whether the SMB access token is to be set for the user.
	AllowSmbAccessToken *bool `json:"allowSmbAccessToken,omitempty"`

	// Specifies the S3 Access Keys of the User.
	S3AccessKeys *S3Keys `json:"S3AccessKeys,omitempty"`

	// Specifies the LOCAL user properties. This field is required when adding a new LOCAL Cohesity User.
	LocalUserParams *LocalUserParams `json:"localUserParams,omitempty"`
}

// Validate validates this create user parameters
func (m *CreateUserParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3AccessKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalUserParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateUserParameters) validateUsername(formats strfmt.Registry) error {

	if err := validate.RequiredString("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *CreateUserParameters) validateDomain(formats strfmt.Registry) error {

	if err := validate.RequiredString("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *CreateUserParameters) validateS3AccessKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.S3AccessKeys) { // not required
		return nil
	}

	if m.S3AccessKeys != nil {
		if err := m.S3AccessKeys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("S3AccessKeys")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("S3AccessKeys")
			}
			return err
		}
	}

	return nil
}

func (m *CreateUserParameters) validateLocalUserParams(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalUserParams) { // not required
		return nil
	}

	if m.LocalUserParams != nil {
		if err := m.LocalUserParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localUserParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localUserParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create user parameters based on the context it is used
func (m *CreateUserParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrimaryGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3AccessKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalUserParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateUserParameters) contextValidatePrimaryGroup(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "primaryGroup", "body", m.PrimaryGroup); err != nil {
		return err
	}

	return nil
}

func (m *CreateUserParameters) contextValidateOtherGroups(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "otherGroups", "body", []string(m.OtherGroups)); err != nil {
		return err
	}

	return nil
}

func (m *CreateUserParameters) contextValidateS3AccessKeys(ctx context.Context, formats strfmt.Registry) error {

	if m.S3AccessKeys != nil {

		if swag.IsZero(m.S3AccessKeys) { // not required
			return nil
		}

		if err := m.S3AccessKeys.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("S3AccessKeys")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("S3AccessKeys")
			}
			return err
		}
	}

	return nil
}

func (m *CreateUserParameters) contextValidateLocalUserParams(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalUserParams != nil {

		if swag.IsZero(m.LocalUserParams) { // not required
			return nil
		}

		if err := m.LocalUserParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localUserParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localUserParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateUserParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateUserParameters) UnmarshalBinary(b []byte) error {
	var res CreateUserParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
