// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverSapHanaParams Recover SAP HANA params.
//
// Specifies the parameters to recover SAP HANA objects.
//
// swagger:model RecoverSapHanaParams
type RecoverSapHanaParams struct {

	// Specifies the 'Source Registration ID' of the source where the objects are to be recovered. If this is not specified, the recovery job will recover to the original location.
	RecoverTo *int64 `json:"recoverTo,omitempty"`

	// Specifies the maximum number of concurrent IO Streams that will be created to exchange data with the cluster. If not specified, the default value is taken as 1.
	Concurrency *int32 `json:"concurrency,omitempty"`

	// Start the database after the recovery is complete.
	StartDatabase *bool `json:"startDatabase,omitempty"`

	// Specifies the local snapshot ids and other details of the objects to be recovered.
	// Required: true
	Snapshots []*RecoverUdaSnapshotParams `json:"snapshots"`

	// This field will hold the warnings in cases where the job status is SucceededWithWarnings.
	// Read Only: true
	Warnings []string `json:"warnings"`
}

// Validate validates this recover sap hana params
func (m *RecoverSapHanaParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverSapHanaParams) validateSnapshots(formats strfmt.Registry) error {

	if err := validate.Required("snapshots", "body", m.Snapshots); err != nil {
		return err
	}

	for i := 0; i < len(m.Snapshots); i++ {
		if swag.IsZero(m.Snapshots[i]) { // not required
			continue
		}

		if m.Snapshots[i] != nil {
			if err := m.Snapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this recover sap hana params based on the context it is used
func (m *RecoverSapHanaParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverSapHanaParams) contextValidateSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Snapshots); i++ {

		if m.Snapshots[i] != nil {

			if swag.IsZero(m.Snapshots[i]) { // not required
				return nil
			}

			if err := m.Snapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverSapHanaParams) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "warnings", "body", []string(m.Warnings)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverSapHanaParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverSapHanaParams) UnmarshalBinary(b []byte) error {
	var res RecoverSapHanaParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
