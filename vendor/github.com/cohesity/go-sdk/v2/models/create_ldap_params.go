// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateLdapParams Specifies the parameters to create an LDAP.
//
// swagger:model CreateLdapParams
type CreateLdapParams struct {

	// Specifies the LDAP name.
	// Required: true
	Name *string `json:"name"`

	// Specifies a list of preferred LDAP servers. Servers should either be FQDNs or IP addresses.
	// Min Items: 1
	PreferredLdapServers []string `json:"preferredLdapServers"`

	// Specifies the name of the domain name to be used for querying LDAP servers from DNS.
	DomainName *string `json:"domainName,omitempty"`

	// Specifies the base distinguished name used as the base for LDAP search requests.
	// Required: true
	BaseDistinguishedName *string `json:"baseDistinguishedName"`

	// Specifies the LDAP authentication type.
	// Required: true
	// Enum: ["Anonymous","Simple"]
	AuthType *string `json:"authType"`

	// Specifies the LDAP server port.
	Port *int32 `json:"port,omitempty"`

	// Specifies the Active Directory id which is mapped to this LDAP.
	ActiveDirectoryID int64 `json:"activeDirectoryId,omitempty"`

	// Specifies the domain name of an Active Directory which is mapped to this LDAP provider
	AdDomainName *string `json:"adDomainName,omitempty"`

	// Specifies name of the LDAP attribute used for common name of an object.
	AttributeCommonName *string `json:"attributeCommonName,omitempty"`

	// Specifies name of the attribute used to lookup unix GID of an LDAP user.
	AttributeGid *string `json:"attributeGid,omitempty"`

	// Specifies name of the attribute used to lookup unix UID of an LDAP user.
	AttributeUID *string `json:"attributeUid,omitempty"`

	// Specifies name of the LDAP attribute used to lookup members of a group.
	AttributeMemberOf *string `json:"attributeMemberOf,omitempty"`

	// Specifies name of the LDAP attribute used to lookup a user by user ID.
	AttributeUsername *string `json:"attributeUsername,omitempty"`

	// Specifies name of the LDAP group object class for user accounts.
	ObjectClassGroup *string `json:"objectClassGroup,omitempty"`

	// Specifies name of the LDAP user object class for user accounts.
	ObjectClassUser *string `json:"objectClassUser,omitempty"`

	// Specifies the parameters for LDAP with 'Simple' authentication type.
	SimpleAuthParams *SimpleAuthParams `json:"simpleAuthParams,omitempty"`
}

// Validate validates this create ldap params
func (m *CreateLdapParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredLdapServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseDistinguishedName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimpleAuthParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateLdapParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateLdapParams) validatePreferredLdapServers(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredLdapServers) { // not required
		return nil
	}

	iPreferredLdapServersSize := int64(len(m.PreferredLdapServers))

	if err := validate.MinItems("preferredLdapServers", "body", iPreferredLdapServersSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *CreateLdapParams) validateBaseDistinguishedName(formats strfmt.Registry) error {

	if err := validate.Required("baseDistinguishedName", "body", m.BaseDistinguishedName); err != nil {
		return err
	}

	return nil
}

var createLdapParamsTypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Anonymous","Simple"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createLdapParamsTypeAuthTypePropEnum = append(createLdapParamsTypeAuthTypePropEnum, v)
	}
}

const (

	// CreateLdapParamsAuthTypeAnonymous captures enum value "Anonymous"
	CreateLdapParamsAuthTypeAnonymous string = "Anonymous"

	// CreateLdapParamsAuthTypeSimple captures enum value "Simple"
	CreateLdapParamsAuthTypeSimple string = "Simple"
)

// prop value enum
func (m *CreateLdapParams) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createLdapParamsTypeAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateLdapParams) validateAuthType(formats strfmt.Registry) error {

	if err := validate.Required("authType", "body", m.AuthType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

func (m *CreateLdapParams) validateSimpleAuthParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SimpleAuthParams) { // not required
		return nil
	}

	if m.SimpleAuthParams != nil {
		if err := m.SimpleAuthParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("simpleAuthParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("simpleAuthParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create ldap params based on the context it is used
func (m *CreateLdapParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSimpleAuthParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateLdapParams) contextValidateSimpleAuthParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SimpleAuthParams != nil {

		if swag.IsZero(m.SimpleAuthParams) { // not required
			return nil
		}

		if err := m.SimpleAuthParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("simpleAuthParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("simpleAuthParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateLdapParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateLdapParams) UnmarshalBinary(b []byte) error {
	var res CreateLdapParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
