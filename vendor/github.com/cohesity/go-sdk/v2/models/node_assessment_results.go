// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeAssessmentResults Check results for node
//
// # Results of assessment tests for a node
//
// swagger:model NodeAssessmentResults
type NodeAssessmentResults struct {

	// Specifies the ID of the node.
	ID *int64 `json:"id,omitempty"`

	// Specifies the IP address of the node.
	IP *string `json:"ip,omitempty"`

	// Specifies the test run status for node.
	// Enum: ["InProgress","Success","Failed","Skipped","Error"]
	Status string `json:"status,omitempty"`

	// Specifies the test results for node.
	Results []*AssessmentTestResult `json:"results,omitempty"`
}

// Validate validates this node assessment results
func (m *NodeAssessmentResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nodeAssessmentResultsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InProgress","Success","Failed","Skipped","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeAssessmentResultsTypeStatusPropEnum = append(nodeAssessmentResultsTypeStatusPropEnum, v)
	}
}

const (

	// NodeAssessmentResultsStatusInProgress captures enum value "InProgress"
	NodeAssessmentResultsStatusInProgress string = "InProgress"

	// NodeAssessmentResultsStatusSuccess captures enum value "Success"
	NodeAssessmentResultsStatusSuccess string = "Success"

	// NodeAssessmentResultsStatusFailed captures enum value "Failed"
	NodeAssessmentResultsStatusFailed string = "Failed"

	// NodeAssessmentResultsStatusSkipped captures enum value "Skipped"
	NodeAssessmentResultsStatusSkipped string = "Skipped"

	// NodeAssessmentResultsStatusError captures enum value "Error"
	NodeAssessmentResultsStatusError string = "Error"
)

// prop value enum
func (m *NodeAssessmentResults) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodeAssessmentResultsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NodeAssessmentResults) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *NodeAssessmentResults) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this node assessment results based on the context it is used
func (m *NodeAssessmentResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeAssessmentResults) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Results); i++ {

		if m.Results[i] != nil {

			if swag.IsZero(m.Results[i]) { // not required
				return nil
			}

			if err := m.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeAssessmentResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeAssessmentResults) UnmarshalBinary(b []byte) error {
	var res NodeAssessmentResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
