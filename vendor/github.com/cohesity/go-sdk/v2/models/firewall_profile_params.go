// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirewallProfileParams Specifies the firewall profile & their attachments.
//
// swagger:model FirewallProfileParams
type FirewallProfileParams struct {

	// Specifies the name of the profile.
	// Required: true
	Name *string `json:"name"`

	// Specifies the packet direction settings.
	// Enum: ["INPUT","OUTPUT","NAT_INPUT"]
	Direction *string `json:"direction,omitempty"`

	// Specifies the port along with the protocol settings.
	Ports []string `json:"ports,omitempty"`

	// Specifies the action.
	// Required: true
	// Enum: ["allow","deny","return"]
	Action *string `json:"action"`

	// Specifies a description for the profile attachments.
	Description *string `json:"description,omitempty"`

	// Specifies the subnets.
	Subnets []string `json:"subnets,omitempty"`

	// Specifies the network interface groups.
	InterfaceGroups []string `json:"interfaceGroups,omitempty"`
}

// Validate validates this firewall profile params
func (m *FirewallProfileParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirewallProfileParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var firewallProfileParamsTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INPUT","OUTPUT","NAT_INPUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firewallProfileParamsTypeDirectionPropEnum = append(firewallProfileParamsTypeDirectionPropEnum, v)
	}
}

const (

	// FirewallProfileParamsDirectionINPUT captures enum value "INPUT"
	FirewallProfileParamsDirectionINPUT string = "INPUT"

	// FirewallProfileParamsDirectionOUTPUT captures enum value "OUTPUT"
	FirewallProfileParamsDirectionOUTPUT string = "OUTPUT"

	// FirewallProfileParamsDirectionNATINPUT captures enum value "NAT_INPUT"
	FirewallProfileParamsDirectionNATINPUT string = "NAT_INPUT"
)

// prop value enum
func (m *FirewallProfileParams) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, firewallProfileParamsTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FirewallProfileParams) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

var firewallProfileParamsTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny","return"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firewallProfileParamsTypeActionPropEnum = append(firewallProfileParamsTypeActionPropEnum, v)
	}
}

const (

	// FirewallProfileParamsActionAllow captures enum value "allow"
	FirewallProfileParamsActionAllow string = "allow"

	// FirewallProfileParamsActionDeny captures enum value "deny"
	FirewallProfileParamsActionDeny string = "deny"

	// FirewallProfileParamsActionReturn captures enum value "return"
	FirewallProfileParamsActionReturn string = "return"
)

// prop value enum
func (m *FirewallProfileParams) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, firewallProfileParamsTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FirewallProfileParams) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this firewall profile params based on context it is used
func (m *FirewallProfileParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FirewallProfileParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirewallProfileParams) UnmarshalBinary(b []byte) error {
	var res FirewallProfileParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
