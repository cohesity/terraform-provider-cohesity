// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FilerLifecycleRule Specifies the Lifecycle configuration rule.
//
// swagger:model FilerLifecycleRule
type FilerLifecycleRule struct {

	// Specifies the Unique identifier for the rule. No 2 rules in a policy should have the same name. The value cannot be longer than 255 characters.
	// Required: true
	Name *string `json:"name"`

	// Specifies if the rule is currently being applied.
	// Required: true
	// Enum: ["Enabled","Disabled"]
	Status *string `json:"status"`

	// Specifies if the rule is Allow or Deny type.
	// Required: true
	// Enum: ["Allow","Deny"]
	Type *string `json:"type"`

	// Specifies the file's selection based on of the following: last modification time, creation time or last access time. This filed is mandatory for rules that are Allow type. Note: Both the fields days and dateInUsecs are mutually exclusive to each other.
	AgingPolicy *FilerLifecycleAgingPolicy `json:"agingPolicy,omitempty"`

	// Specifies the filter used to identify files that a Lifecycle Rule applies to.
	FileFilter *FilerLifecycleRuleFilter `json:"fileFilter,omitempty"`
}

// Validate validates this filer lifecycle rule
func (m *FilerLifecycleRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilerLifecycleRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var filerLifecycleRuleTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enabled","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filerLifecycleRuleTypeStatusPropEnum = append(filerLifecycleRuleTypeStatusPropEnum, v)
	}
}

const (

	// FilerLifecycleRuleStatusEnabled captures enum value "Enabled"
	FilerLifecycleRuleStatusEnabled string = "Enabled"

	// FilerLifecycleRuleStatusDisabled captures enum value "Disabled"
	FilerLifecycleRuleStatusDisabled string = "Disabled"
)

// prop value enum
func (m *FilerLifecycleRule) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, filerLifecycleRuleTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FilerLifecycleRule) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var filerLifecycleRuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allow","Deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filerLifecycleRuleTypeTypePropEnum = append(filerLifecycleRuleTypeTypePropEnum, v)
	}
}

const (

	// FilerLifecycleRuleTypeAllow captures enum value "Allow"
	FilerLifecycleRuleTypeAllow string = "Allow"

	// FilerLifecycleRuleTypeDeny captures enum value "Deny"
	FilerLifecycleRuleTypeDeny string = "Deny"
)

// prop value enum
func (m *FilerLifecycleRule) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, filerLifecycleRuleTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FilerLifecycleRule) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *FilerLifecycleRule) validateAgingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.AgingPolicy) { // not required
		return nil
	}

	if m.AgingPolicy != nil {
		if err := m.AgingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *FilerLifecycleRule) validateFileFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.FileFilter) { // not required
		return nil
	}

	if m.FileFilter != nil {
		if err := m.FileFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileFilter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this filer lifecycle rule based on the context it is used
func (m *FilerLifecycleRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilerLifecycleRule) contextValidateAgingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.AgingPolicy != nil {

		if swag.IsZero(m.AgingPolicy) { // not required
			return nil
		}

		if err := m.AgingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *FilerLifecycleRule) contextValidateFileFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.FileFilter != nil {

		if swag.IsZero(m.FileFilter) { // not required
			return nil
		}

		if err := m.FileFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileFilter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FilerLifecycleRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilerLifecycleRule) UnmarshalBinary(b []byte) error {
	var res FilerLifecycleRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
