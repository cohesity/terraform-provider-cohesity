// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgentUpgradeTaskState Agent upgrade task state
//
// Specifies the state of an agent upgrade task.
//
// swagger:model AgentUpgradeTaskState
type AgentUpgradeTaskState struct {

	// Specifies the name of the task.
	Name *string `json:"name,omitempty"`

	// Specifies the description of the task.
	Description *string `json:"description,omitempty"`

	// Specifies the ID of the task.
	ID *int64 `json:"id,omitempty"`

	// Specifies the time, as a Unix epoch timestamp in microseconds, when the task started execution.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the time when the upgrade task completed execution as a Unix epoch Timestamp (in microseconds).
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the status of the task.<br> 'Scheduled' indicates that the upgrade task is yet to start.<br> 'Running' indicates that the upgrade task has started execution.<br> 'Succeeded' indicates that the upgrade task completed without an error.<br> 'Failed' indicates that upgrade has failed for all agents. 'PartiallyFailed' indicates that upgrade has failed for some agents.
	// Enum: ["Scheduled","Running","Succeeded","Failed","PartiallyFailed","Canceled"]
	Status *string `json:"status,omitempty"`

	// Specifies the agents upgraded in the task.
	AgentIDs []int64 `json:"agentIDs"`

	// Specifies the version to which agents are upgraded.
	ClusterVersion *string `json:"clusterVersion,omitempty"`

	// Specifes the type of task.<br> 'Auto' indicates an auto agent upgrade task which is started after a cluster upgrade.<br> 'Manual' indicates a schedule based agent upgrade task.<br> 'Retry' indicates an agent upgrade task which was retried.
	// Enum: ["Auto","Manual","Retry"]
	Type *string `json:"type,omitempty"`

	// Specifies the time when the task should start execution as a Unix epoch Timestamp (in microseconds). If no schedule is specified, the task will start immediately.
	ScheduleTimeUsecs *int64 `json:"scheduleTimeUsecs,omitempty"`

	// Specifies the time before which the upgrade task should start execution as a Unix epoch Timestamp (in microseconds). If this is not specified the task will start anytime after scheduleTimeUsecs.
	ScheduleEndTimeUsecs *int64 `json:"scheduleEndTimeUsecs,omitempty"`

	// Specifies ID of a task which was retried if type is 'Retry'.
	RetriedTaskID *int64 `json:"retriedTaskID,omitempty"`

	// Specifies if a task can be retried.
	IsRetryable *bool `json:"isRetryable,omitempty"`

	// Specifies a task level error.
	Error *Error `json:"error,omitempty"`

	// Specifies the upgrade information for each agent.
	Agents []*AgentUpgradeInfoObject `json:"agents"`
}

// Validate validates this agent upgrade task state
func (m *AgentUpgradeTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agentUpgradeTaskStateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Scheduled","Running","Succeeded","Failed","PartiallyFailed","Canceled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentUpgradeTaskStateTypeStatusPropEnum = append(agentUpgradeTaskStateTypeStatusPropEnum, v)
	}
}

const (

	// AgentUpgradeTaskStateStatusScheduled captures enum value "Scheduled"
	AgentUpgradeTaskStateStatusScheduled string = "Scheduled"

	// AgentUpgradeTaskStateStatusRunning captures enum value "Running"
	AgentUpgradeTaskStateStatusRunning string = "Running"

	// AgentUpgradeTaskStateStatusSucceeded captures enum value "Succeeded"
	AgentUpgradeTaskStateStatusSucceeded string = "Succeeded"

	// AgentUpgradeTaskStateStatusFailed captures enum value "Failed"
	AgentUpgradeTaskStateStatusFailed string = "Failed"

	// AgentUpgradeTaskStateStatusPartiallyFailed captures enum value "PartiallyFailed"
	AgentUpgradeTaskStateStatusPartiallyFailed string = "PartiallyFailed"

	// AgentUpgradeTaskStateStatusCanceled captures enum value "Canceled"
	AgentUpgradeTaskStateStatusCanceled string = "Canceled"
)

// prop value enum
func (m *AgentUpgradeTaskState) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentUpgradeTaskStateTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgentUpgradeTaskState) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var agentUpgradeTaskStateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Auto","Manual","Retry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agentUpgradeTaskStateTypeTypePropEnum = append(agentUpgradeTaskStateTypeTypePropEnum, v)
	}
}

const (

	// AgentUpgradeTaskStateTypeAuto captures enum value "Auto"
	AgentUpgradeTaskStateTypeAuto string = "Auto"

	// AgentUpgradeTaskStateTypeManual captures enum value "Manual"
	AgentUpgradeTaskStateTypeManual string = "Manual"

	// AgentUpgradeTaskStateTypeRetry captures enum value "Retry"
	AgentUpgradeTaskStateTypeRetry string = "Retry"
)

// prop value enum
func (m *AgentUpgradeTaskState) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agentUpgradeTaskStateTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgentUpgradeTaskState) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *AgentUpgradeTaskState) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *AgentUpgradeTaskState) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	for i := 0; i < len(m.Agents); i++ {
		if swag.IsZero(m.Agents[i]) { // not required
			continue
		}

		if m.Agents[i] != nil {
			if err := m.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this agent upgrade task state based on the context it is used
func (m *AgentUpgradeTaskState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentUpgradeTaskState) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *AgentUpgradeTaskState) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Agents); i++ {

		if m.Agents[i] != nil {

			if swag.IsZero(m.Agents[i]) { // not required
				return nil
			}

			if err := m.Agents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentUpgradeTaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentUpgradeTaskState) UnmarshalBinary(b []byte) error {
	var res AgentUpgradeTaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
