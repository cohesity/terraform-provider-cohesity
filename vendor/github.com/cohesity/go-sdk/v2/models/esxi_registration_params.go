// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EsxiRegistrationParams Register VMware ESXi host request parameters.
//
// Specifies parameters to register VMware ESXi host.
//
// swagger:model EsxiRegistrationParams
type EsxiRegistrationParams struct {
	CommonSourceRegistrationParams

	// Specifies the minimum free space (in GB) expected to be available in the datastore where the virtual disks of the VM being backed up reside. If the space available is lower than the specified value, backup will be aborted.
	MinFreeDatastoreSpaceForBackupGb *int64 `json:"minFreeDatastoreSpaceForBackupGb,omitempty"`

	// Specifies the minimum free space (in percentage) expected to be available in the datastore where the virtual disks of the VM being backed up reside. If the space available is lower than the specified value, backup will be aborted.
	MinFreeDatastoreSpaceForBackupPercentage *int64 `json:"minFreeDatastoreSpaceForBackupPercentage,omitempty"`

	// If this value is > 0 and the number of streams concurrently active on a datastore is equal to it, then any further requests to access the datastore would be denied until the number of active streams reduces. This applies for all the datastores in the specified host.
	MaxConcurrentStreams *int32 `json:"maxConcurrentStreams,omitempty"`

	// Specifies the datastore specific params.
	DataStoreParams []*DatastoreParams `json:"dataStoreParams"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EsxiRegistrationParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonSourceRegistrationParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonSourceRegistrationParams = aO0

	// AO1
	var dataAO1 struct {
		MinFreeDatastoreSpaceForBackupGb *int64 `json:"minFreeDatastoreSpaceForBackupGb,omitempty"`

		MinFreeDatastoreSpaceForBackupPercentage *int64 `json:"minFreeDatastoreSpaceForBackupPercentage,omitempty"`

		MaxConcurrentStreams *int32 `json:"maxConcurrentStreams,omitempty"`

		DataStoreParams []*DatastoreParams `json:"dataStoreParams"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.MinFreeDatastoreSpaceForBackupGb = dataAO1.MinFreeDatastoreSpaceForBackupGb

	m.MinFreeDatastoreSpaceForBackupPercentage = dataAO1.MinFreeDatastoreSpaceForBackupPercentage

	m.MaxConcurrentStreams = dataAO1.MaxConcurrentStreams

	m.DataStoreParams = dataAO1.DataStoreParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EsxiRegistrationParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonSourceRegistrationParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		MinFreeDatastoreSpaceForBackupGb *int64 `json:"minFreeDatastoreSpaceForBackupGb,omitempty"`

		MinFreeDatastoreSpaceForBackupPercentage *int64 `json:"minFreeDatastoreSpaceForBackupPercentage,omitempty"`

		MaxConcurrentStreams *int32 `json:"maxConcurrentStreams,omitempty"`

		DataStoreParams []*DatastoreParams `json:"dataStoreParams"`
	}

	dataAO1.MinFreeDatastoreSpaceForBackupGb = m.MinFreeDatastoreSpaceForBackupGb

	dataAO1.MinFreeDatastoreSpaceForBackupPercentage = m.MinFreeDatastoreSpaceForBackupPercentage

	dataAO1.MaxConcurrentStreams = m.MaxConcurrentStreams

	dataAO1.DataStoreParams = m.DataStoreParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this esxi registration params
func (m *EsxiRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonSourceRegistrationParams
	if err := m.CommonSourceRegistrationParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataStoreParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EsxiRegistrationParams) validateDataStoreParams(formats strfmt.Registry) error {

	if swag.IsZero(m.DataStoreParams) { // not required
		return nil
	}

	for i := 0; i < len(m.DataStoreParams); i++ {
		if swag.IsZero(m.DataStoreParams[i]) { // not required
			continue
		}

		if m.DataStoreParams[i] != nil {
			if err := m.DataStoreParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataStoreParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataStoreParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this esxi registration params based on the context it is used
func (m *EsxiRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonSourceRegistrationParams
	if err := m.CommonSourceRegistrationParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataStoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EsxiRegistrationParams) contextValidateDataStoreParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataStoreParams); i++ {

		if m.DataStoreParams[i] != nil {

			if swag.IsZero(m.DataStoreParams[i]) { // not required
				return nil
			}

			if err := m.DataStoreParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataStoreParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataStoreParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EsxiRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EsxiRegistrationParams) UnmarshalBinary(b []byte) error {
	var res EsxiRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
