// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistrationInfo Specifies the source registration informations.
//
// swagger:model RegistrationInfo
type RegistrationInfo struct {

	// Specifies the status of the authentication during the registration of a Protection Source. 'Pending' indicates the authentication is in progress. 'Scheduled' indicates the authentication is scheduled. 'Finished' indicates the authentication is completed. 'RefreshInProgress' indicates the refresh is in progress.
	// Read Only: true
	// Enum: ["Pending","Scheduled","Finished","RefreshInProgress"]
	AuthenticationStatus *string `json:"authenticationStatus,omitempty"`

	// Specifies the time when the source was registered in milliseconds
	// Read Only: true
	RegistrationTimeMsecs *int64 `json:"registrationTimeMsecs,omitempty"`

	// Specifies the time when the source was last refreshed in milliseconds.
	// Read Only: true
	LastRefreshedTimeMsecs *int64 `json:"lastRefreshedTimeMsecs,omitempty"`
}

// Validate validates this registration info
func (m *RegistrationInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var registrationInfoTypeAuthenticationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Scheduled","Finished","RefreshInProgress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registrationInfoTypeAuthenticationStatusPropEnum = append(registrationInfoTypeAuthenticationStatusPropEnum, v)
	}
}

const (

	// RegistrationInfoAuthenticationStatusPending captures enum value "Pending"
	RegistrationInfoAuthenticationStatusPending string = "Pending"

	// RegistrationInfoAuthenticationStatusScheduled captures enum value "Scheduled"
	RegistrationInfoAuthenticationStatusScheduled string = "Scheduled"

	// RegistrationInfoAuthenticationStatusFinished captures enum value "Finished"
	RegistrationInfoAuthenticationStatusFinished string = "Finished"

	// RegistrationInfoAuthenticationStatusRefreshInProgress captures enum value "RefreshInProgress"
	RegistrationInfoAuthenticationStatusRefreshInProgress string = "RefreshInProgress"
)

// prop value enum
func (m *RegistrationInfo) validateAuthenticationStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registrationInfoTypeAuthenticationStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegistrationInfo) validateAuthenticationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationStatusEnum("authenticationStatus", "body", *m.AuthenticationStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this registration info based on the context it is used
func (m *RegistrationInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthenticationStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrationTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastRefreshedTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistrationInfo) contextValidateAuthenticationStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "authenticationStatus", "body", m.AuthenticationStatus); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationInfo) contextValidateRegistrationTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "registrationTimeMsecs", "body", m.RegistrationTimeMsecs); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationInfo) contextValidateLastRefreshedTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastRefreshedTimeMsecs", "body", m.LastRefreshedTimeMsecs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegistrationInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistrationInfo) UnmarshalBinary(b []byte) error {
	var res RegistrationInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
