// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceHealth Health Status of a Service.
//
// swagger:model ServiceHealth
type ServiceHealth struct {

	// The name of the service.
	ServiceName string `json:"serviceName,omitempty"`

	// "The health status of the service (e.g., Healthy, Degraded,"
	// " Unhealthy)."
	//
	// Enum: ["Healthy","Degraded","Unhealthy"]
	HealthStatus string `json:"healthStatus,omitempty"`
}

// Validate validates this service health
func (m *ServiceHealth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceHealthTypeHealthStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Healthy","Degraded","Unhealthy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceHealthTypeHealthStatusPropEnum = append(serviceHealthTypeHealthStatusPropEnum, v)
	}
}

const (

	// ServiceHealthHealthStatusHealthy captures enum value "Healthy"
	ServiceHealthHealthStatusHealthy string = "Healthy"

	// ServiceHealthHealthStatusDegraded captures enum value "Degraded"
	ServiceHealthHealthStatusDegraded string = "Degraded"

	// ServiceHealthHealthStatusUnhealthy captures enum value "Unhealthy"
	ServiceHealthHealthStatusUnhealthy string = "Unhealthy"
)

// prop value enum
func (m *ServiceHealth) validateHealthStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceHealthTypeHealthStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceHealth) validateHealthStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthStatusEnum("healthStatus", "body", m.HealthStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service health based on context it is used
func (m *ServiceHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceHealth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceHealth) UnmarshalBinary(b []byte) error {
	var res ServiceHealth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
