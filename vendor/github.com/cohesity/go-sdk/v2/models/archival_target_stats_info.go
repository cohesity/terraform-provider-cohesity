// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArchivalTargetStatsInfo Specifies the stats of an archival run target.
//
// swagger:model ArchivalTargetStatsInfo
type ArchivalTargetStatsInfo struct {
	ArchivalTargetSummaryInfo

	StatsTaskInfo

	// Specifies stats for objects.
	Objects []*ObjectStatsInfo `json:"objects"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ArchivalTargetStatsInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ArchivalTargetSummaryInfo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ArchivalTargetSummaryInfo = aO0

	// AO1
	var aO1 StatsTaskInfo
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.StatsTaskInfo = aO1

	// AO2
	var dataAO2 struct {
		Objects []*ObjectStatsInfo `json:"objects"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.Objects = dataAO2.Objects

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ArchivalTargetStatsInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.ArchivalTargetSummaryInfo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.StatsTaskInfo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		Objects []*ObjectStatsInfo `json:"objects"`
	}

	dataAO2.Objects = m.Objects

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this archival target stats info
func (m *ArchivalTargetStatsInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ArchivalTargetSummaryInfo
	if err := m.ArchivalTargetSummaryInfo.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with StatsTaskInfo
	if err := m.StatsTaskInfo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivalTargetStatsInfo) validateObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this archival target stats info based on the context it is used
func (m *ArchivalTargetStatsInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ArchivalTargetSummaryInfo
	if err := m.ArchivalTargetSummaryInfo.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with StatsTaskInfo
	if err := m.StatsTaskInfo.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivalTargetStatsInfo) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArchivalTargetStatsInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchivalTargetStatsInfo) UnmarshalBinary(b []byte) error {
	var res ArchivalTargetStatsInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
