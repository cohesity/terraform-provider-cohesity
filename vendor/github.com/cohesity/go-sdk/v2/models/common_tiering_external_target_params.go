// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonTieringExternalTargetParams Specifies the common parameters which are specific to Tiering purpose type External Targets.
//
// swagger:model CommonTieringExternalTargetParams
type CommonTieringExternalTargetParams struct {

	// Specifies the Storage type of the External Target.
	// Required: true
	// Enum: ["Azure","Google","AWS","Oracle","S3Compatible"]
	StorageType *string `json:"storageType"`

	// Specifies the type of encryption for the Setting.
	// Required: true
	// Enum: ["None","Weak","Strong"]
	EncryptionLevel *string `json:"encryptionLevel"`
}

// Validate validates this common tiering external target params
func (m *CommonTieringExternalTargetParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonTieringExternalTargetParamsTypeStorageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Azure","Google","AWS","Oracle","S3Compatible"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonTieringExternalTargetParamsTypeStorageTypePropEnum = append(commonTieringExternalTargetParamsTypeStorageTypePropEnum, v)
	}
}

const (

	// CommonTieringExternalTargetParamsStorageTypeAzure captures enum value "Azure"
	CommonTieringExternalTargetParamsStorageTypeAzure string = "Azure"

	// CommonTieringExternalTargetParamsStorageTypeGoogle captures enum value "Google"
	CommonTieringExternalTargetParamsStorageTypeGoogle string = "Google"

	// CommonTieringExternalTargetParamsStorageTypeAWS captures enum value "AWS"
	CommonTieringExternalTargetParamsStorageTypeAWS string = "AWS"

	// CommonTieringExternalTargetParamsStorageTypeOracle captures enum value "Oracle"
	CommonTieringExternalTargetParamsStorageTypeOracle string = "Oracle"

	// CommonTieringExternalTargetParamsStorageTypeS3Compatible captures enum value "S3Compatible"
	CommonTieringExternalTargetParamsStorageTypeS3Compatible string = "S3Compatible"
)

// prop value enum
func (m *CommonTieringExternalTargetParams) validateStorageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonTieringExternalTargetParamsTypeStorageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonTieringExternalTargetParams) validateStorageType(formats strfmt.Registry) error {

	if err := validate.Required("storageType", "body", m.StorageType); err != nil {
		return err
	}

	// value enum
	if err := m.validateStorageTypeEnum("storageType", "body", *m.StorageType); err != nil {
		return err
	}

	return nil
}

var commonTieringExternalTargetParamsTypeEncryptionLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Weak","Strong"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonTieringExternalTargetParamsTypeEncryptionLevelPropEnum = append(commonTieringExternalTargetParamsTypeEncryptionLevelPropEnum, v)
	}
}

const (

	// CommonTieringExternalTargetParamsEncryptionLevelNone captures enum value "None"
	CommonTieringExternalTargetParamsEncryptionLevelNone string = "None"

	// CommonTieringExternalTargetParamsEncryptionLevelWeak captures enum value "Weak"
	CommonTieringExternalTargetParamsEncryptionLevelWeak string = "Weak"

	// CommonTieringExternalTargetParamsEncryptionLevelStrong captures enum value "Strong"
	CommonTieringExternalTargetParamsEncryptionLevelStrong string = "Strong"
)

// prop value enum
func (m *CommonTieringExternalTargetParams) validateEncryptionLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonTieringExternalTargetParamsTypeEncryptionLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonTieringExternalTargetParams) validateEncryptionLevel(formats strfmt.Registry) error {

	if err := validate.Required("encryptionLevel", "body", m.EncryptionLevel); err != nil {
		return err
	}

	// value enum
	if err := m.validateEncryptionLevelEnum("encryptionLevel", "body", *m.EncryptionLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common tiering external target params based on context it is used
func (m *CommonTieringExternalTargetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonTieringExternalTargetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonTieringExternalTargetParams) UnmarshalBinary(b []byte) error {
	var res CommonTieringExternalTargetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
