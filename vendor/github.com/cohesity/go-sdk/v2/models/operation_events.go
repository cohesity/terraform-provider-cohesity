// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperationEvents List of events that took place during the operation.
//
// swagger:model OperationEvents
type OperationEvents struct {

	// Specifies the severity of an event.
	// Enum: ["Info","Warning","Error"]
	Severity *string `json:"severity,omitempty"`

	// Specifies the message describing the event.
	Message *string `json:"message,omitempty"`

	// Specifies the unix epoch timestamp in microseconds when this event took place.
	Timestamp int64 `json:"timestamp,omitempty"`
}

// Validate validates this operation events
func (m *OperationEvents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var operationEventsTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Info","Warning","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationEventsTypeSeverityPropEnum = append(operationEventsTypeSeverityPropEnum, v)
	}
}

const (

	// OperationEventsSeverityInfo captures enum value "Info"
	OperationEventsSeverityInfo string = "Info"

	// OperationEventsSeverityWarning captures enum value "Warning"
	OperationEventsSeverityWarning string = "Warning"

	// OperationEventsSeverityError captures enum value "Error"
	OperationEventsSeverityError string = "Error"
)

// prop value enum
func (m *OperationEvents) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, operationEventsTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OperationEvents) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", *m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this operation events based on context it is used
func (m *OperationEvents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationEvents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationEvents) UnmarshalBinary(b []byte) error {
	var res OperationEvents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
