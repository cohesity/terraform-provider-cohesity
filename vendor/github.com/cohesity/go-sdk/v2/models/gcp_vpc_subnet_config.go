// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GcpVpcSubnetConfig GCP VPC Subnet Config
//
// Specifies the group of a GCP VPC and the subnet in it.
//
// swagger:model GcpVpcSubnetConfig
type GcpVpcSubnetConfig struct {

	// Specifies the id of the subnet.
	// Required: true
	SubnetID *int64 `json:"subnetId"`

	// Specifies the name of the subnet.
	// Read Only: true
	SubnetName *string `json:"subnetName,omitempty"`

	// Specifies the name of the vpc network.
	// Read Only: true
	VpcName *string `json:"vpcName,omitempty"`
}

// Validate validates this gcp vpc subnet config
func (m *GcpVpcSubnetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubnetID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpVpcSubnetConfig) validateSubnetID(formats strfmt.Registry) error {

	if err := validate.Required("subnetId", "body", m.SubnetID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this gcp vpc subnet config based on the context it is used
func (m *GcpVpcSubnetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubnetName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpVpcSubnetConfig) contextValidateSubnetName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "subnetName", "body", m.SubnetName); err != nil {
		return err
	}

	return nil
}

func (m *GcpVpcSubnetConfig) contextValidateVpcName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "vpcName", "body", m.VpcName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GcpVpcSubnetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpVpcSubnetConfig) UnmarshalBinary(b []byte) error {
	var res GcpVpcSubnetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
