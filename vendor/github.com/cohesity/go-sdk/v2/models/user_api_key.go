// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAPIKey Specifies a user API key instance.
//
// swagger:model UserAPIKey
type UserAPIKey struct {

	// Specifies the unique id of the API key.
	// Read Only: true
	ID *string `json:"id,omitempty"`

	// Specifies the API key name.
	// Read Only: true
	Name *string `json:"name,omitempty"`

	// Specifies if the API key is active.
	// Read Only: true
	IsActive *bool `json:"isActive,omitempty"`

	// Specifies if the API key has expired.
	// Read Only: true
	IsExpired *bool `json:"isExpired,omitempty"`

	// Specifies the user who owns the API key.
	// Read Only: true
	UserSid *string `json:"userSid,omitempty"`

	// Specifies the user SID who created the API key.
	// Read Only: true
	CreatedByUserSid *string `json:"createdByUserSid,omitempty"`

	// Specifies the time in milliseconds when the API key was created.
	// Read Only: true
	CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

	// Specifies the time in milliseconds when the API key was last rotated.
	// Read Only: true
	LastRotatedTimeMsecs *int64 `json:"lastRotatedTimeMsecs,omitempty"`

	// Specifies the time in milliseconds when the API key will expire. null signifies no-expiry.
	// Read Only: true
	ExpiryTimeMsecs *int64 `json:"expiryTimeMsecs,omitempty"`
}

// Validate validates this user API key
func (m *UserAPIKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this user API key based on the context it is used
func (m *UserAPIKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsExpired(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserSid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedByUserSid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastRotatedTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpiryTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAPIKey) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *UserAPIKey) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UserAPIKey) contextValidateIsActive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isActive", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *UserAPIKey) contextValidateIsExpired(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isExpired", "body", m.IsExpired); err != nil {
		return err
	}

	return nil
}

func (m *UserAPIKey) contextValidateUserSid(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "userSid", "body", m.UserSid); err != nil {
		return err
	}

	return nil
}

func (m *UserAPIKey) contextValidateCreatedByUserSid(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdByUserSid", "body", m.CreatedByUserSid); err != nil {
		return err
	}

	return nil
}

func (m *UserAPIKey) contextValidateCreatedTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdTimeMsecs", "body", m.CreatedTimeMsecs); err != nil {
		return err
	}

	return nil
}

func (m *UserAPIKey) contextValidateLastRotatedTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastRotatedTimeMsecs", "body", m.LastRotatedTimeMsecs); err != nil {
		return err
	}

	return nil
}

func (m *UserAPIKey) contextValidateExpiryTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "expiryTimeMsecs", "body", m.ExpiryTimeMsecs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAPIKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAPIKey) UnmarshalBinary(b []byte) error {
	var res UserAPIKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
