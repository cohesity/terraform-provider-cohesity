// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonProtectionGroupRunResponseParameters Common Protection Group run response parameters.
//
// Specifies the parameters which are common between Protection Group runs of all Protection Groups.
//
// swagger:model CommonProtectionGroupRunResponseParameters
type CommonProtectionGroupRunResponseParameters struct {

	// Specifies the ID of the Protection Group run.
	ID *string `json:"id,omitempty"`

	// Protection Group instance Id. This field will be removed later.
	ProtectionGroupInstanceID *int64 `json:"protectionGroupInstanceId,omitempty"`

	// ProtectionGroupId to which this run belongs.
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// Specifies if this protection run is a replication run.
	IsReplicationRun *bool `json:"isReplicationRun,omitempty"`

	// Specifies the information of the primary cluster if this run is a replication run.
	OriginClusterIdentifier *ClusterIdentifier `json:"originClusterIdentifier,omitempty"`

	// ProtectionGroupId to which this run belongs on the primary cluster if this run is a replication run.
	OriginProtectionGroupID *string `json:"originProtectionGroupId,omitempty"`

	// Name of the Protection Group to which this run belongs.
	ProtectionGroupName *string `json:"protectionGroupName,omitempty"`

	// Specifies if snapshots for this run has been deleted.
	IsLocalSnapshotsDeleted *bool `json:"isLocalSnapshotsDeleted,omitempty"`

	// Snapahot, replication, archival results for each object.
	Objects []*ObjectRunResult `json:"objects"`

	// Summary information about local snapshot run across all objects.
	LocalBackupInfo *BackupRunSummary `json:"localBackupInfo,omitempty"`

	// Summary information about snapshot run on the original cluster. This only applies to replication run.
	OriginalBackupInfo *BackupRunSummary `json:"originalBackupInfo,omitempty"`

	// Summary information about replication run across all objects.
	ReplicationInfo *ReplicationRunSummary `json:"replicationInfo,omitempty"`

	// Summary information about archival run.
	ArchivalInfo *ArchivalRunSummary `json:"archivalInfo,omitempty"`

	// Summary information about cloud spin run.
	CloudSpinInfo *CloudSpinRunSummary `json:"cloudSpinInfo,omitempty"`

	// Specifies if the Protection Run is on legal hold.
	OnLegalHold *bool `json:"onLegalHold,omitempty"`

	// Specifies the list of tenants that have permissions for this protection group run.
	Permissions []*Tenant `json:"permissions"`

	// Specifies whether the run is a CAD run if cloud archive direct feature is enabled. If this field is true, the primary backup copy will only be available at the given archived location.
	IsCloudArchivalDirect *bool `json:"isCloudArchivalDirect,omitempty"`

	// Specifies whether the run has a local snapshot. For cloud retrieved runs there may not be local snapshots.
	HasLocalSnapshot *bool `json:"hasLocalSnapshot,omitempty"`

	// Specifies the environment of the Protection Group.
	Environment *string `json:"environment,omitempty"`

	// The tag of externally triggered backup job.
	ExternallyTriggeredBackupTag *string `json:"externallyTriggeredBackupTag,omitempty"`
}

// Validate validates this common protection group run response parameters
func (m *CommonProtectionGroupRunResponseParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginClusterIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalBackupInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalBackupInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudSpinInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) validateOriginClusterIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginClusterIdentifier) { // not required
		return nil
	}

	if m.OriginClusterIdentifier != nil {
		if err := m.OriginClusterIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originClusterIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originClusterIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) validateLocalBackupInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalBackupInfo) { // not required
		return nil
	}

	if m.LocalBackupInfo != nil {
		if err := m.LocalBackupInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localBackupInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localBackupInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) validateOriginalBackupInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalBackupInfo) { // not required
		return nil
	}

	if m.OriginalBackupInfo != nil {
		if err := m.OriginalBackupInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalBackupInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalBackupInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) validateReplicationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationInfo) { // not required
		return nil
	}

	if m.ReplicationInfo != nil {
		if err := m.ReplicationInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) validateArchivalInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalInfo) { // not required
		return nil
	}

	if m.ArchivalInfo != nil {
		if err := m.ArchivalInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) validateCloudSpinInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudSpinInfo) { // not required
		return nil
	}

	if m.CloudSpinInfo != nil {
		if err := m.CloudSpinInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudSpinInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudSpinInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this common protection group run response parameters based on the context it is used
func (m *CommonProtectionGroupRunResponseParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOriginClusterIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalBackupInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginalBackupInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchivalInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudSpinInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) contextValidateOriginClusterIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginClusterIdentifier != nil {

		if swag.IsZero(m.OriginClusterIdentifier) { // not required
			return nil
		}

		if err := m.OriginClusterIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originClusterIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originClusterIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) contextValidateLocalBackupInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalBackupInfo != nil {

		if swag.IsZero(m.LocalBackupInfo) { // not required
			return nil
		}

		if err := m.LocalBackupInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localBackupInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localBackupInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) contextValidateOriginalBackupInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalBackupInfo != nil {

		if swag.IsZero(m.OriginalBackupInfo) { // not required
			return nil
		}

		if err := m.OriginalBackupInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalBackupInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalBackupInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) contextValidateReplicationInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationInfo != nil {

		if swag.IsZero(m.ReplicationInfo) { // not required
			return nil
		}

		if err := m.ReplicationInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) contextValidateArchivalInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchivalInfo != nil {

		if swag.IsZero(m.ArchivalInfo) { // not required
			return nil
		}

		if err := m.ArchivalInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) contextValidateCloudSpinInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudSpinInfo != nil {

		if swag.IsZero(m.CloudSpinInfo) { // not required
			return nil
		}

		if err := m.CloudSpinInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudSpinInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudSpinInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRunResponseParameters) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Permissions); i++ {

		if m.Permissions[i] != nil {

			if swag.IsZero(m.Permissions[i]) { // not required
				return nil
			}

			if err := m.Permissions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonProtectionGroupRunResponseParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonProtectionGroupRunResponseParameters) UnmarshalBinary(b []byte) error {
	var res CommonProtectionGroupRunResponseParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
