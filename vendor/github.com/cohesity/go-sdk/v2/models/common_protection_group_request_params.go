// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonProtectionGroupRequestParams Specifies the parameters which are common between all Protection Group requests.
//
// swagger:model CommonProtectionGroupRequestParams
type CommonProtectionGroupRequestParams struct {

	// Specifies the name of the Protection Group.
	// Required: true
	Name *string `json:"name"`

	// Specifies the unique id of the Protection Policy associated with the Protection Group. The Policy provides retry settings Protection Schedules, Priority, SLA, etc.
	// Required: true
	PolicyID *string `json:"policyId"`

	// Specifies the priority of the Protection Group.
	// Enum: ["kLow","kMedium","kHigh"]
	Priority *string `json:"priority,omitempty"`

	// Specifies the Storage Domain (View Box) ID where this Protection Group writes data.
	StorageDomainID *int64 `json:"storageDomainId,omitempty"`

	// Specifies a description of the Protection Group.
	Description *string `json:"description,omitempty"`

	// Specifies the start time for this Protection Group. If no start time is specified, the start time will default to 2am. This field is only used if the policy has a daily or monthly schedule.
	StartTime *TimeOfDay `json:"startTime,omitempty"`

	// Specifies the end time in micro seconds for this Protection Group. If this is not specified, the Protection Group won't be ended.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the last time this protection group was updated. If this is passed into a PUT request, then the backend will validate that the timestamp passed in matches the time that the protection group was actually last modified. If the two timestamps do not match, then the request will be rejected with a stale error.
	LastModifiedTimestampUsecs *int64 `json:"lastModifiedTimestampUsecs,omitempty"`

	// Specifies the alerting policy for this Protection Group.
	AlertPolicy *ProtectionGroupAlertingPolicy `json:"alertPolicy,omitempty"`

	// Specifies the SLA parameters for this Protection Group.
	SLA []*SLARule `json:"sla"`

	// Specifies whether the Protection Group will be written to HDD or SSD.
	// Enum: ["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]
	QosPolicy *string `json:"qosPolicy,omitempty"`

	// Specifies whether currently executing jobs should abort if a blackout period specified by a policy starts. Available only if the selected policy has at least one blackout period. Default value is false. This field should not be set to true if 'pauseInBlackouts' is set to true.
	AbortInBlackouts *bool `json:"abortInBlackouts,omitempty"`

	// Specifies whether currently executing jobs should be paused if a blackout period specified by a policy starts. Available only if the selected policy has at least one blackout period. Default value is false. This field should not be set to true if 'abortInBlackouts' is sent as true.
	PauseInBlackouts *bool `json:"pauseInBlackouts,omitempty"`

	// Specifies the environment type of the Protection Group.
	// Required: true
	// Enum: ["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsRDSPostgres","kAwsAuroraPostgres","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc","kO365ExchangeCSM","kO365OneDriveCSM","kO365SharepointCSM"]
	Environment *string `json:"environment"`

	// Specifies if the the Protection Group is paused. New runs are not scheduled for the paused Protection Groups. Active run if any is not impacted.
	IsPaused *bool `json:"isPaused,omitempty"`

	// Specifies the advanced configuration for a protection job.
	AdvancedConfigs []*KeyValuePair `json:"advancedConfigs"`
}

// Validate validates this common protection group request params
func (m *CommonProtectionGroupRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSLA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvancedConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonProtectionGroupRequestParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CommonProtectionGroupRequestParams) validatePolicyID(formats strfmt.Registry) error {

	if err := validate.Required("policyId", "body", m.PolicyID); err != nil {
		return err
	}

	return nil
}

var commonProtectionGroupRequestParamsTypePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLow","kMedium","kHigh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonProtectionGroupRequestParamsTypePriorityPropEnum = append(commonProtectionGroupRequestParamsTypePriorityPropEnum, v)
	}
}

const (

	// CommonProtectionGroupRequestParamsPriorityKLow captures enum value "kLow"
	CommonProtectionGroupRequestParamsPriorityKLow string = "kLow"

	// CommonProtectionGroupRequestParamsPriorityKMedium captures enum value "kMedium"
	CommonProtectionGroupRequestParamsPriorityKMedium string = "kMedium"

	// CommonProtectionGroupRequestParamsPriorityKHigh captures enum value "kHigh"
	CommonProtectionGroupRequestParamsPriorityKHigh string = "kHigh"
)

// prop value enum
func (m *CommonProtectionGroupRequestParams) validatePriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonProtectionGroupRequestParamsTypePriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonProtectionGroupRequestParams) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriorityEnum("priority", "body", *m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *CommonProtectionGroupRequestParams) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if m.StartTime != nil {
		if err := m.StartTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRequestParams) validateAlertPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertPolicy) { // not required
		return nil
	}

	if m.AlertPolicy != nil {
		if err := m.AlertPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRequestParams) validateSLA(formats strfmt.Registry) error {
	if swag.IsZero(m.SLA) { // not required
		return nil
	}

	for i := 0; i < len(m.SLA); i++ {
		if swag.IsZero(m.SLA[i]) { // not required
			continue
		}

		if m.SLA[i] != nil {
			if err := m.SLA[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sla" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sla" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var commonProtectionGroupRequestParamsTypeQosPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonProtectionGroupRequestParamsTypeQosPolicyPropEnum = append(commonProtectionGroupRequestParamsTypeQosPolicyPropEnum, v)
	}
}

const (

	// CommonProtectionGroupRequestParamsQosPolicyKBackupHDD captures enum value "kBackupHDD"
	CommonProtectionGroupRequestParamsQosPolicyKBackupHDD string = "kBackupHDD"

	// CommonProtectionGroupRequestParamsQosPolicyKBackupSSD captures enum value "kBackupSSD"
	CommonProtectionGroupRequestParamsQosPolicyKBackupSSD string = "kBackupSSD"

	// CommonProtectionGroupRequestParamsQosPolicyKTestAndDevHigh captures enum value "kTestAndDevHigh"
	CommonProtectionGroupRequestParamsQosPolicyKTestAndDevHigh string = "kTestAndDevHigh"

	// CommonProtectionGroupRequestParamsQosPolicyKBackupAll captures enum value "kBackupAll"
	CommonProtectionGroupRequestParamsQosPolicyKBackupAll string = "kBackupAll"
)

// prop value enum
func (m *CommonProtectionGroupRequestParams) validateQosPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonProtectionGroupRequestParamsTypeQosPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonProtectionGroupRequestParams) validateQosPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.QosPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateQosPolicyEnum("qosPolicy", "body", *m.QosPolicy); err != nil {
		return err
	}

	return nil
}

var commonProtectionGroupRequestParamsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsRDSPostgres","kAwsAuroraPostgres","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc","kO365ExchangeCSM","kO365OneDriveCSM","kO365SharepointCSM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonProtectionGroupRequestParamsTypeEnvironmentPropEnum = append(commonProtectionGroupRequestParamsTypeEnvironmentPropEnum, v)
	}
}

const (

	// CommonProtectionGroupRequestParamsEnvironmentKVMware captures enum value "kVMware"
	CommonProtectionGroupRequestParamsEnvironmentKVMware string = "kVMware"

	// CommonProtectionGroupRequestParamsEnvironmentKHyperV captures enum value "kHyperV"
	CommonProtectionGroupRequestParamsEnvironmentKHyperV string = "kHyperV"

	// CommonProtectionGroupRequestParamsEnvironmentKVCD captures enum value "kVCD"
	CommonProtectionGroupRequestParamsEnvironmentKVCD string = "kVCD"

	// CommonProtectionGroupRequestParamsEnvironmentKAzure captures enum value "kAzure"
	CommonProtectionGroupRequestParamsEnvironmentKAzure string = "kAzure"

	// CommonProtectionGroupRequestParamsEnvironmentKGCP captures enum value "kGCP"
	CommonProtectionGroupRequestParamsEnvironmentKGCP string = "kGCP"

	// CommonProtectionGroupRequestParamsEnvironmentKKVM captures enum value "kKVM"
	CommonProtectionGroupRequestParamsEnvironmentKKVM string = "kKVM"

	// CommonProtectionGroupRequestParamsEnvironmentKAcropolis captures enum value "kAcropolis"
	CommonProtectionGroupRequestParamsEnvironmentKAcropolis string = "kAcropolis"

	// CommonProtectionGroupRequestParamsEnvironmentKAWS captures enum value "kAWS"
	CommonProtectionGroupRequestParamsEnvironmentKAWS string = "kAWS"

	// CommonProtectionGroupRequestParamsEnvironmentKAWSNative captures enum value "kAWSNative"
	CommonProtectionGroupRequestParamsEnvironmentKAWSNative string = "kAWSNative"

	// CommonProtectionGroupRequestParamsEnvironmentKAwsS3 captures enum value "kAwsS3"
	CommonProtectionGroupRequestParamsEnvironmentKAwsS3 string = "kAwsS3"

	// CommonProtectionGroupRequestParamsEnvironmentKAWSSnapshotManager captures enum value "kAWSSnapshotManager"
	CommonProtectionGroupRequestParamsEnvironmentKAWSSnapshotManager string = "kAWSSnapshotManager"

	// CommonProtectionGroupRequestParamsEnvironmentKRDSSnapshotManager captures enum value "kRDSSnapshotManager"
	CommonProtectionGroupRequestParamsEnvironmentKRDSSnapshotManager string = "kRDSSnapshotManager"

	// CommonProtectionGroupRequestParamsEnvironmentKAuroraSnapshotManager captures enum value "kAuroraSnapshotManager"
	CommonProtectionGroupRequestParamsEnvironmentKAuroraSnapshotManager string = "kAuroraSnapshotManager"

	// CommonProtectionGroupRequestParamsEnvironmentKAwsRDSPostgresBackup captures enum value "kAwsRDSPostgresBackup"
	CommonProtectionGroupRequestParamsEnvironmentKAwsRDSPostgresBackup string = "kAwsRDSPostgresBackup"

	// CommonProtectionGroupRequestParamsEnvironmentKAwsRDSPostgres captures enum value "kAwsRDSPostgres"
	CommonProtectionGroupRequestParamsEnvironmentKAwsRDSPostgres string = "kAwsRDSPostgres"

	// CommonProtectionGroupRequestParamsEnvironmentKAwsAuroraPostgres captures enum value "kAwsAuroraPostgres"
	CommonProtectionGroupRequestParamsEnvironmentKAwsAuroraPostgres string = "kAwsAuroraPostgres"

	// CommonProtectionGroupRequestParamsEnvironmentKAzureNative captures enum value "kAzureNative"
	CommonProtectionGroupRequestParamsEnvironmentKAzureNative string = "kAzureNative"

	// CommonProtectionGroupRequestParamsEnvironmentKAzureSQL captures enum value "kAzureSQL"
	CommonProtectionGroupRequestParamsEnvironmentKAzureSQL string = "kAzureSQL"

	// CommonProtectionGroupRequestParamsEnvironmentKAzureSnapshotManager captures enum value "kAzureSnapshotManager"
	CommonProtectionGroupRequestParamsEnvironmentKAzureSnapshotManager string = "kAzureSnapshotManager"

	// CommonProtectionGroupRequestParamsEnvironmentKPhysical captures enum value "kPhysical"
	CommonProtectionGroupRequestParamsEnvironmentKPhysical string = "kPhysical"

	// CommonProtectionGroupRequestParamsEnvironmentKPhysicalFiles captures enum value "kPhysicalFiles"
	CommonProtectionGroupRequestParamsEnvironmentKPhysicalFiles string = "kPhysicalFiles"

	// CommonProtectionGroupRequestParamsEnvironmentKGPFS captures enum value "kGPFS"
	CommonProtectionGroupRequestParamsEnvironmentKGPFS string = "kGPFS"

	// CommonProtectionGroupRequestParamsEnvironmentKElastifile captures enum value "kElastifile"
	CommonProtectionGroupRequestParamsEnvironmentKElastifile string = "kElastifile"

	// CommonProtectionGroupRequestParamsEnvironmentKNetapp captures enum value "kNetapp"
	CommonProtectionGroupRequestParamsEnvironmentKNetapp string = "kNetapp"

	// CommonProtectionGroupRequestParamsEnvironmentKGenericNas captures enum value "kGenericNas"
	CommonProtectionGroupRequestParamsEnvironmentKGenericNas string = "kGenericNas"

	// CommonProtectionGroupRequestParamsEnvironmentKIsilon captures enum value "kIsilon"
	CommonProtectionGroupRequestParamsEnvironmentKIsilon string = "kIsilon"

	// CommonProtectionGroupRequestParamsEnvironmentKFlashBlade captures enum value "kFlashBlade"
	CommonProtectionGroupRequestParamsEnvironmentKFlashBlade string = "kFlashBlade"

	// CommonProtectionGroupRequestParamsEnvironmentKPure captures enum value "kPure"
	CommonProtectionGroupRequestParamsEnvironmentKPure string = "kPure"

	// CommonProtectionGroupRequestParamsEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	CommonProtectionGroupRequestParamsEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// CommonProtectionGroupRequestParamsEnvironmentKSQL captures enum value "kSQL"
	CommonProtectionGroupRequestParamsEnvironmentKSQL string = "kSQL"

	// CommonProtectionGroupRequestParamsEnvironmentKExchange captures enum value "kExchange"
	CommonProtectionGroupRequestParamsEnvironmentKExchange string = "kExchange"

	// CommonProtectionGroupRequestParamsEnvironmentKAD captures enum value "kAD"
	CommonProtectionGroupRequestParamsEnvironmentKAD string = "kAD"

	// CommonProtectionGroupRequestParamsEnvironmentKOracle captures enum value "kOracle"
	CommonProtectionGroupRequestParamsEnvironmentKOracle string = "kOracle"

	// CommonProtectionGroupRequestParamsEnvironmentKView captures enum value "kView"
	CommonProtectionGroupRequestParamsEnvironmentKView string = "kView"

	// CommonProtectionGroupRequestParamsEnvironmentKRemoteAdapter captures enum value "kRemoteAdapter"
	CommonProtectionGroupRequestParamsEnvironmentKRemoteAdapter string = "kRemoteAdapter"

	// CommonProtectionGroupRequestParamsEnvironmentKO365 captures enum value "kO365"
	CommonProtectionGroupRequestParamsEnvironmentKO365 string = "kO365"

	// CommonProtectionGroupRequestParamsEnvironmentKO365PublicFolders captures enum value "kO365PublicFolders"
	CommonProtectionGroupRequestParamsEnvironmentKO365PublicFolders string = "kO365PublicFolders"

	// CommonProtectionGroupRequestParamsEnvironmentKO365Teams captures enum value "kO365Teams"
	CommonProtectionGroupRequestParamsEnvironmentKO365Teams string = "kO365Teams"

	// CommonProtectionGroupRequestParamsEnvironmentKO365Group captures enum value "kO365Group"
	CommonProtectionGroupRequestParamsEnvironmentKO365Group string = "kO365Group"

	// CommonProtectionGroupRequestParamsEnvironmentKO365Exchange captures enum value "kO365Exchange"
	CommonProtectionGroupRequestParamsEnvironmentKO365Exchange string = "kO365Exchange"

	// CommonProtectionGroupRequestParamsEnvironmentKO365OneDrive captures enum value "kO365OneDrive"
	CommonProtectionGroupRequestParamsEnvironmentKO365OneDrive string = "kO365OneDrive"

	// CommonProtectionGroupRequestParamsEnvironmentKO365Sharepoint captures enum value "kO365Sharepoint"
	CommonProtectionGroupRequestParamsEnvironmentKO365Sharepoint string = "kO365Sharepoint"

	// CommonProtectionGroupRequestParamsEnvironmentKKubernetes captures enum value "kKubernetes"
	CommonProtectionGroupRequestParamsEnvironmentKKubernetes string = "kKubernetes"

	// CommonProtectionGroupRequestParamsEnvironmentKCassandra captures enum value "kCassandra"
	CommonProtectionGroupRequestParamsEnvironmentKCassandra string = "kCassandra"

	// CommonProtectionGroupRequestParamsEnvironmentKMongoDB captures enum value "kMongoDB"
	CommonProtectionGroupRequestParamsEnvironmentKMongoDB string = "kMongoDB"

	// CommonProtectionGroupRequestParamsEnvironmentKCouchbase captures enum value "kCouchbase"
	CommonProtectionGroupRequestParamsEnvironmentKCouchbase string = "kCouchbase"

	// CommonProtectionGroupRequestParamsEnvironmentKHdfs captures enum value "kHdfs"
	CommonProtectionGroupRequestParamsEnvironmentKHdfs string = "kHdfs"

	// CommonProtectionGroupRequestParamsEnvironmentKHive captures enum value "kHive"
	CommonProtectionGroupRequestParamsEnvironmentKHive string = "kHive"

	// CommonProtectionGroupRequestParamsEnvironmentKHBase captures enum value "kHBase"
	CommonProtectionGroupRequestParamsEnvironmentKHBase string = "kHBase"

	// CommonProtectionGroupRequestParamsEnvironmentKSAPHANA captures enum value "kSAPHANA"
	CommonProtectionGroupRequestParamsEnvironmentKSAPHANA string = "kSAPHANA"

	// CommonProtectionGroupRequestParamsEnvironmentKUDA captures enum value "kUDA"
	CommonProtectionGroupRequestParamsEnvironmentKUDA string = "kUDA"

	// CommonProtectionGroupRequestParamsEnvironmentKSfdc captures enum value "kSfdc"
	CommonProtectionGroupRequestParamsEnvironmentKSfdc string = "kSfdc"

	// CommonProtectionGroupRequestParamsEnvironmentKO365ExchangeCSM captures enum value "kO365ExchangeCSM"
	CommonProtectionGroupRequestParamsEnvironmentKO365ExchangeCSM string = "kO365ExchangeCSM"

	// CommonProtectionGroupRequestParamsEnvironmentKO365OneDriveCSM captures enum value "kO365OneDriveCSM"
	CommonProtectionGroupRequestParamsEnvironmentKO365OneDriveCSM string = "kO365OneDriveCSM"

	// CommonProtectionGroupRequestParamsEnvironmentKO365SharepointCSM captures enum value "kO365SharepointCSM"
	CommonProtectionGroupRequestParamsEnvironmentKO365SharepointCSM string = "kO365SharepointCSM"
)

// prop value enum
func (m *CommonProtectionGroupRequestParams) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonProtectionGroupRequestParamsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonProtectionGroupRequestParams) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *CommonProtectionGroupRequestParams) validateAdvancedConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvancedConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.AdvancedConfigs); i++ {
		if swag.IsZero(m.AdvancedConfigs[i]) { // not required
			continue
		}

		if m.AdvancedConfigs[i] != nil {
			if err := m.AdvancedConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this common protection group request params based on the context it is used
func (m *CommonProtectionGroupRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlertPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSLA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdvancedConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonProtectionGroupRequestParams) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if m.StartTime != nil {

		if swag.IsZero(m.StartTime) { // not required
			return nil
		}

		if err := m.StartTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRequestParams) contextValidateAlertPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertPolicy != nil {

		if swag.IsZero(m.AlertPolicy) { // not required
			return nil
		}

		if err := m.AlertPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *CommonProtectionGroupRequestParams) contextValidateSLA(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SLA); i++ {

		if m.SLA[i] != nil {

			if swag.IsZero(m.SLA[i]) { // not required
				return nil
			}

			if err := m.SLA[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sla" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sla" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonProtectionGroupRequestParams) contextValidateAdvancedConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdvancedConfigs); i++ {

		if m.AdvancedConfigs[i] != nil {

			if swag.IsZero(m.AdvancedConfigs[i]) { // not required
				return nil
			}

			if err := m.AdvancedConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonProtectionGroupRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonProtectionGroupRequestParams) UnmarshalBinary(b []byte) error {
	var res CommonProtectionGroupRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
