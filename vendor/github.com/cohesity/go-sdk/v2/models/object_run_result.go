// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectRunResult Snapshot, replication, archival results for an object.
//
// Snapshot, replication, archival results for an object.
//
// swagger:model ObjectRunResult
type ObjectRunResult struct {

	// Summary information about the object.
	Object *ObjectSummary `json:"object,omitempty"`

	// Information about local snapshot run for this object.
	LocalSnapshotInfo *BackupRun `json:"localSnapshotInfo,omitempty"`

	// Information about snapshot run on the original cluster. This only applies to replication run.
	OriginalBackupInfo *BackupRun `json:"originalBackupInfo,omitempty"`

	// Information about replication run for this object.
	ReplicationInfo *ReplicationRun `json:"replicationInfo,omitempty"`

	// Information about archival run for this object.
	ArchivalInfo *ArchivalRun `json:"archivalInfo,omitempty"`

	// Information about Cloud Spin run for this object.
	CloudSpinInfo *CloudSpinRun `json:"cloudSpinInfo,omitempty"`

	// Specifies if object's snapshot is on legal hold.
	OnLegalHold *bool `json:"onLegalHold,omitempty"`
}

// Validate validates this object run result
func (m *ObjectRunResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalSnapshotInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalBackupInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudSpinInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectRunResult) validateObject(formats strfmt.Registry) error {
	if swag.IsZero(m.Object) { // not required
		return nil
	}

	if m.Object != nil {
		if err := m.Object.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectRunResult) validateLocalSnapshotInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalSnapshotInfo) { // not required
		return nil
	}

	if m.LocalSnapshotInfo != nil {
		if err := m.LocalSnapshotInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localSnapshotInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localSnapshotInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectRunResult) validateOriginalBackupInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalBackupInfo) { // not required
		return nil
	}

	if m.OriginalBackupInfo != nil {
		if err := m.OriginalBackupInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalBackupInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalBackupInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectRunResult) validateReplicationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationInfo) { // not required
		return nil
	}

	if m.ReplicationInfo != nil {
		if err := m.ReplicationInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectRunResult) validateArchivalInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalInfo) { // not required
		return nil
	}

	if m.ArchivalInfo != nil {
		if err := m.ArchivalInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectRunResult) validateCloudSpinInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudSpinInfo) { // not required
		return nil
	}

	if m.CloudSpinInfo != nil {
		if err := m.CloudSpinInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudSpinInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudSpinInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this object run result based on the context it is used
func (m *ObjectRunResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalSnapshotInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginalBackupInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchivalInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudSpinInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectRunResult) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if m.Object != nil {

		if swag.IsZero(m.Object) { // not required
			return nil
		}

		if err := m.Object.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectRunResult) contextValidateLocalSnapshotInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalSnapshotInfo != nil {

		if swag.IsZero(m.LocalSnapshotInfo) { // not required
			return nil
		}

		if err := m.LocalSnapshotInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localSnapshotInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localSnapshotInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectRunResult) contextValidateOriginalBackupInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalBackupInfo != nil {

		if swag.IsZero(m.OriginalBackupInfo) { // not required
			return nil
		}

		if err := m.OriginalBackupInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalBackupInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalBackupInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectRunResult) contextValidateReplicationInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationInfo != nil {

		if swag.IsZero(m.ReplicationInfo) { // not required
			return nil
		}

		if err := m.ReplicationInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectRunResult) contextValidateArchivalInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchivalInfo != nil {

		if swag.IsZero(m.ArchivalInfo) { // not required
			return nil
		}

		if err := m.ArchivalInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectRunResult) contextValidateCloudSpinInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudSpinInfo != nil {

		if swag.IsZero(m.CloudSpinInfo) { // not required
			return nil
		}

		if err := m.CloudSpinInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudSpinInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudSpinInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectRunResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectRunResult) UnmarshalBinary(b []byte) error {
	var res ObjectRunResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
