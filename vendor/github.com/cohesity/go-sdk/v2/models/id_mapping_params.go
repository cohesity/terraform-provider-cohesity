// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IDMappingParams Specifies the params of the user id mapping info of an Active Directory.
//
// swagger:model IdMappingParams
type IDMappingParams struct {

	// Specifies the sid of an Active Directory domain user mapping to unix root user.
	// Required: true
	SidMappedToUnixRootUser *string `json:"sidMappedToUnixRootUser"`

	// Specifies the information about how the Unix and Windows users are mapped for this domain.
	// Required: true
	UserIDMappingParams *UserIDMappingParams `json:"userIdMappingParams"`
}

// Validate validates this Id mapping params
func (m *IDMappingParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSidMappedToUnixRootUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIDMappingParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IDMappingParams) validateSidMappedToUnixRootUser(formats strfmt.Registry) error {

	if err := validate.Required("sidMappedToUnixRootUser", "body", m.SidMappedToUnixRootUser); err != nil {
		return err
	}

	return nil
}

func (m *IDMappingParams) validateUserIDMappingParams(formats strfmt.Registry) error {

	if err := validate.Required("userIdMappingParams", "body", m.UserIDMappingParams); err != nil {
		return err
	}

	if m.UserIDMappingParams != nil {
		if err := m.UserIDMappingParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userIdMappingParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userIdMappingParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Id mapping params based on the context it is used
func (m *IDMappingParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserIDMappingParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IDMappingParams) contextValidateUserIDMappingParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UserIDMappingParams != nil {

		if err := m.UserIDMappingParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userIdMappingParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userIdMappingParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IDMappingParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IDMappingParams) UnmarshalBinary(b []byte) error {
	var res IDMappingParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
