// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterAuthMethodsMetadata ClusterAuthMethodsMetadata
//
// Specifies the metadata for various authentication methods that can be used to validate the cluster access.
//
// swagger:model ClusterAuthMethodsMetadata
type ClusterAuthMethodsMetadata struct {

	// Specifies the authentication metadata for fetching roles from external provider.
	// Required: true
	FetchRolesAuthentication *ClusterRolesAuthMetadata `json:"fetchRolesAuthentication"`

	// Specifies the authentication metadata for fetching KMS from external provider.
	KmsAuthentication *KmsAuthMetadata `json:"kmsAuthentication,omitempty"`

	// Specifies the authentication metadata for fetching external target information from external provider.
	ExternalTargetAuthentication *ExternalTargetAuthMetadata `json:"externalTargetAuthentication,omitempty"`
}

// Validate validates this cluster auth methods metadata
func (m *ClusterAuthMethodsMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFetchRolesAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKmsAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalTargetAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterAuthMethodsMetadata) validateFetchRolesAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("fetchRolesAuthentication", "body", m.FetchRolesAuthentication); err != nil {
		return err
	}

	if m.FetchRolesAuthentication != nil {
		if err := m.FetchRolesAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fetchRolesAuthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fetchRolesAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterAuthMethodsMetadata) validateKmsAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.KmsAuthentication) { // not required
		return nil
	}

	if m.KmsAuthentication != nil {
		if err := m.KmsAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kmsAuthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kmsAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterAuthMethodsMetadata) validateExternalTargetAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalTargetAuthentication) { // not required
		return nil
	}

	if m.ExternalTargetAuthentication != nil {
		if err := m.ExternalTargetAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalTargetAuthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalTargetAuthentication")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster auth methods metadata based on the context it is used
func (m *ClusterAuthMethodsMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFetchRolesAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKmsAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalTargetAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterAuthMethodsMetadata) contextValidateFetchRolesAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if m.FetchRolesAuthentication != nil {

		if err := m.FetchRolesAuthentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fetchRolesAuthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fetchRolesAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterAuthMethodsMetadata) contextValidateKmsAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if m.KmsAuthentication != nil {

		if swag.IsZero(m.KmsAuthentication) { // not required
			return nil
		}

		if err := m.KmsAuthentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kmsAuthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kmsAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterAuthMethodsMetadata) contextValidateExternalTargetAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalTargetAuthentication != nil {

		if swag.IsZero(m.ExternalTargetAuthentication) { // not required
			return nil
		}

		if err := m.ExternalTargetAuthentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalTargetAuthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalTargetAuthentication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterAuthMethodsMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterAuthMethodsMetadata) UnmarshalBinary(b []byte) error {
	var res ClusterAuthMethodsMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
