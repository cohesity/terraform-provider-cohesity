// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// View View.
//
// Specifies settings for defining a storage location (called a View)
// with NFS and SMB mount paths in a Storage Domain (View Box) on the Cohesity
// Cluster.
//
// swagger:model View
type View struct {

	// Specifies an id of the View assigned by the Cohesity Cluster.
	// Read Only: true
	ViewID *int64 `json:"viewId,omitempty"`

	// If True, category in response is not set by user but inferred by
	// Iris because none is set. Category can only be none when view was
	// created by v1 API or cloned from a view created by v1 API.
	//
	// Inference Logic is as follows:
	// 1. Object Services if only S3 or Swift protocol is selected.
	// 2. Backup Target only if one read-write protocol is selected and
	//    QoS is "Backup Target Commvault" or "Backup Target SSD".
	// 3. File Services if there are more than 1 read-write protocol or
	//    it doesn't fit any other category.
	// Read Only: true
	IsCategoryInferred *bool `json:"isCategoryInferred,omitempty"`

	// DataLock (Write Once Read Many) lock expiry epoch time in microseconds. If
	// a view is marked as a DataLock view, only a Data Security Officer (a user
	// having Data Security Privilege) can delete the view until the lock expiry
	// time.
	DataLockExpiryUsecs *int64 `json:"dataLockExpiryUsecs,omitempty"`

	// Specifies the Object Services key mapping config of the view. This parameter can only
	// be set during create and cannot be changed.
	// Configuration of Object Services key mapping.
	// Specifies the type of Object Services key mapping config.
	// Read Only: true
	// Enum: ["Random","Short","Long","Hierarchical","ObjectId"]
	ObjectServicesMappingConfig *string `json:"objectServicesMappingConfig,omitempty"`

	// Specifies the id of the Storage Domain (View Box) where the View is
	// stored.
	// Read Only: true
	StorageDomainID *int64 `json:"storageDomainId,omitempty"`

	// Specifies the name of the Storage Domain (View Box) where the View is
	// stored.
	// Read Only: true
	StorageDomainName *string `json:"storageDomainName,omitempty"`

	// Specifies whether to support case insensitive file/folder names. This
	// parameter can only be set during create and cannot be changed.
	// Read Only: true
	CaseInsensitiveNamesEnabled *bool `json:"caseInsensitiveNamesEnabled,omitempty"`

	// Specifies the time that the View was created in milliseconds.
	// Read Only: true
	CreateTimeMsecs *int64 `json:"createTimeMsecs,omitempty"`

	// Specifies the NFS mount path of the View (without the hostname
	// information).
	// This path is used to support NFS mounting of the paths specified in the
	// nfsExportPathList on Windows systems.
	// Read Only: true
	BasicMountPath *string `json:"basicMountPath,omitempty"`

	// This field is currently deprecated. Please use NFS MountPaths
	// which would be an array of strings.
	// Read Only: true
	NfsMountPath *string `json:"nfsMountPath,omitempty"`

	// Array of NFS Paths.
	// Specifies the path for mounting this View as an NFS share. If
	// Kerberos Provider has multiple hostaliases, each host alias has
	//  its own path.
	// Read Only: true
	NfsMountPaths []string `json:"nfsMountPaths"`

	// Array of SMB Paths.
	// Specifies the possible paths that can be used to mount this View
	// as a SMB share. If Active Directory has multiple account names;
	// each machine account has its own path.
	// Read Only: true
	SmbMountPaths []string `json:"smbMountPaths"`

	// Aliases created for the view. A view alias allows a directory path inside
	// a view to be mounted using the alias name.
	// Read Only: true
	Aliases []*ViewAliasInfo `json:"aliases"`

	// Specifies if a view contains migrated data.
	// Read Only: true
	IsTargetForMigratedData *bool `json:"isTargetForMigratedData,omitempty"`

	// Specifies the file count by size for the View.
	FileCountBySize []*FileCount `json:"fileCountBySize"`

	// Specifies the sid of the view owner.
	OwnerSid *string `json:"ownerSid,omitempty"`

	// Specifies whether to support s3 folder support feature. This
	// parameter can only be set during create and cannot be changed.
	// Read Only: true
	S3FolderSupportEnabled *bool `json:"s3FolderSupportEnabled,omitempty"`

	// Specifies the intent of the View.
	Intent *ViewIntent `json:"intent,omitempty"`

	// Specifies statistics about the View.
	// Read Only: true
	Stats *ViewStats `json:"stats,omitempty"`

	// Specifies the information about the failover of the
	// view.
	// Read Only: true
	ViewFailover *ViewFailover `json:"viewFailover,omitempty"`

	// view protection
	// Read Only: true
	ViewProtection *ViewProtection `json:"viewProtection,omitempty"`

	UpdateViewParam
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *View) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ViewID *int64 `json:"viewId,omitempty"`

		IsCategoryInferred *bool `json:"isCategoryInferred,omitempty"`

		DataLockExpiryUsecs *int64 `json:"dataLockExpiryUsecs,omitempty"`

		ObjectServicesMappingConfig *string `json:"objectServicesMappingConfig,omitempty"`

		StorageDomainID *int64 `json:"storageDomainId,omitempty"`

		StorageDomainName *string `json:"storageDomainName,omitempty"`

		CaseInsensitiveNamesEnabled *bool `json:"caseInsensitiveNamesEnabled,omitempty"`

		CreateTimeMsecs *int64 `json:"createTimeMsecs,omitempty"`

		BasicMountPath *string `json:"basicMountPath,omitempty"`

		NfsMountPath *string `json:"nfsMountPath,omitempty"`

		NfsMountPaths []string `json:"nfsMountPaths"`

		SmbMountPaths []string `json:"smbMountPaths"`

		Aliases []*ViewAliasInfo `json:"aliases"`

		IsTargetForMigratedData *bool `json:"isTargetForMigratedData,omitempty"`

		FileCountBySize []*FileCount `json:"fileCountBySize"`

		OwnerSid *string `json:"ownerSid,omitempty"`

		S3FolderSupportEnabled *bool `json:"s3FolderSupportEnabled,omitempty"`

		Intent *ViewIntent `json:"intent,omitempty"`

		Stats *ViewStats `json:"stats,omitempty"`

		ViewFailover *ViewFailover `json:"viewFailover,omitempty"`

		ViewProtection *ViewProtection `json:"viewProtection,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ViewID = dataAO0.ViewID

	m.IsCategoryInferred = dataAO0.IsCategoryInferred

	m.DataLockExpiryUsecs = dataAO0.DataLockExpiryUsecs

	m.ObjectServicesMappingConfig = dataAO0.ObjectServicesMappingConfig

	m.StorageDomainID = dataAO0.StorageDomainID

	m.StorageDomainName = dataAO0.StorageDomainName

	m.CaseInsensitiveNamesEnabled = dataAO0.CaseInsensitiveNamesEnabled

	m.CreateTimeMsecs = dataAO0.CreateTimeMsecs

	m.BasicMountPath = dataAO0.BasicMountPath

	m.NfsMountPath = dataAO0.NfsMountPath

	m.NfsMountPaths = dataAO0.NfsMountPaths

	m.SmbMountPaths = dataAO0.SmbMountPaths

	m.Aliases = dataAO0.Aliases

	m.IsTargetForMigratedData = dataAO0.IsTargetForMigratedData

	m.FileCountBySize = dataAO0.FileCountBySize

	m.OwnerSid = dataAO0.OwnerSid

	m.S3FolderSupportEnabled = dataAO0.S3FolderSupportEnabled

	m.Intent = dataAO0.Intent

	m.Stats = dataAO0.Stats

	m.ViewFailover = dataAO0.ViewFailover

	m.ViewProtection = dataAO0.ViewProtection

	// AO1
	var aO1 UpdateViewParam
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.UpdateViewParam = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m View) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ViewID *int64 `json:"viewId,omitempty"`

		IsCategoryInferred *bool `json:"isCategoryInferred,omitempty"`

		DataLockExpiryUsecs *int64 `json:"dataLockExpiryUsecs,omitempty"`

		ObjectServicesMappingConfig *string `json:"objectServicesMappingConfig,omitempty"`

		StorageDomainID *int64 `json:"storageDomainId,omitempty"`

		StorageDomainName *string `json:"storageDomainName,omitempty"`

		CaseInsensitiveNamesEnabled *bool `json:"caseInsensitiveNamesEnabled,omitempty"`

		CreateTimeMsecs *int64 `json:"createTimeMsecs,omitempty"`

		BasicMountPath *string `json:"basicMountPath,omitempty"`

		NfsMountPath *string `json:"nfsMountPath,omitempty"`

		NfsMountPaths []string `json:"nfsMountPaths"`

		SmbMountPaths []string `json:"smbMountPaths"`

		Aliases []*ViewAliasInfo `json:"aliases"`

		IsTargetForMigratedData *bool `json:"isTargetForMigratedData,omitempty"`

		FileCountBySize []*FileCount `json:"fileCountBySize"`

		OwnerSid *string `json:"ownerSid,omitempty"`

		S3FolderSupportEnabled *bool `json:"s3FolderSupportEnabled,omitempty"`

		Intent *ViewIntent `json:"intent,omitempty"`

		Stats *ViewStats `json:"stats,omitempty"`

		ViewFailover *ViewFailover `json:"viewFailover,omitempty"`

		ViewProtection *ViewProtection `json:"viewProtection,omitempty"`
	}

	dataAO0.ViewID = m.ViewID

	dataAO0.IsCategoryInferred = m.IsCategoryInferred

	dataAO0.DataLockExpiryUsecs = m.DataLockExpiryUsecs

	dataAO0.ObjectServicesMappingConfig = m.ObjectServicesMappingConfig

	dataAO0.StorageDomainID = m.StorageDomainID

	dataAO0.StorageDomainName = m.StorageDomainName

	dataAO0.CaseInsensitiveNamesEnabled = m.CaseInsensitiveNamesEnabled

	dataAO0.CreateTimeMsecs = m.CreateTimeMsecs

	dataAO0.BasicMountPath = m.BasicMountPath

	dataAO0.NfsMountPath = m.NfsMountPath

	dataAO0.NfsMountPaths = m.NfsMountPaths

	dataAO0.SmbMountPaths = m.SmbMountPaths

	dataAO0.Aliases = m.Aliases

	dataAO0.IsTargetForMigratedData = m.IsTargetForMigratedData

	dataAO0.FileCountBySize = m.FileCountBySize

	dataAO0.OwnerSid = m.OwnerSid

	dataAO0.S3FolderSupportEnabled = m.S3FolderSupportEnabled

	dataAO0.Intent = m.Intent

	dataAO0.Stats = m.Stats

	dataAO0.ViewFailover = m.ViewFailover

	dataAO0.ViewProtection = m.ViewProtection

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.UpdateViewParam)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this view
func (m *View) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectServicesMappingConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAliases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileCountBySize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewFailover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewProtection(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with UpdateViewParam
	if err := m.UpdateViewParam.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var viewTypeObjectServicesMappingConfigPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Random","Short","Long","Hierarchical","ObjectId"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewTypeObjectServicesMappingConfigPropEnum = append(viewTypeObjectServicesMappingConfigPropEnum, v)
	}
}

// property enum
func (m *View) validateObjectServicesMappingConfigEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewTypeObjectServicesMappingConfigPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *View) validateObjectServicesMappingConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectServicesMappingConfig) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectServicesMappingConfigEnum("objectServicesMappingConfig", "body", *m.ObjectServicesMappingConfig); err != nil {
		return err
	}

	return nil
}

func (m *View) validateAliases(formats strfmt.Registry) error {

	if swag.IsZero(m.Aliases) { // not required
		return nil
	}

	for i := 0; i < len(m.Aliases); i++ {
		if swag.IsZero(m.Aliases[i]) { // not required
			continue
		}

		if m.Aliases[i] != nil {
			if err := m.Aliases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aliases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aliases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *View) validateFileCountBySize(formats strfmt.Registry) error {

	if swag.IsZero(m.FileCountBySize) { // not required
		return nil
	}

	for i := 0; i < len(m.FileCountBySize); i++ {
		if swag.IsZero(m.FileCountBySize[i]) { // not required
			continue
		}

		if m.FileCountBySize[i] != nil {
			if err := m.FileCountBySize[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fileCountBySize" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fileCountBySize" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *View) validateIntent(formats strfmt.Registry) error {

	if swag.IsZero(m.Intent) { // not required
		return nil
	}

	if m.Intent != nil {
		if err := m.Intent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intent")
			}
			return err
		}
	}

	return nil
}

func (m *View) validateStats(formats strfmt.Registry) error {

	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *View) validateViewFailover(formats strfmt.Registry) error {

	if swag.IsZero(m.ViewFailover) { // not required
		return nil
	}

	if m.ViewFailover != nil {
		if err := m.ViewFailover.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewFailover")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewFailover")
			}
			return err
		}
	}

	return nil
}

func (m *View) validateViewProtection(formats strfmt.Registry) error {

	if swag.IsZero(m.ViewProtection) { // not required
		return nil
	}

	if m.ViewProtection != nil {
		if err := m.ViewProtection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewProtection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewProtection")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this view based on the context it is used
func (m *View) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateViewID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsCategoryInferred(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectServicesMappingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageDomainID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageDomainName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCaseInsensitiveNamesEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBasicMountPath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsMountPath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsMountPaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbMountPaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAliases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsTargetForMigratedData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileCountBySize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3FolderSupportEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewFailover(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewProtection(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with UpdateViewParam
	if err := m.UpdateViewParam.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *View) contextValidateViewID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "viewId", "body", m.ViewID); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateIsCategoryInferred(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isCategoryInferred", "body", m.IsCategoryInferred); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateObjectServicesMappingConfig(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "objectServicesMappingConfig", "body", m.ObjectServicesMappingConfig); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateStorageDomainID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageDomainId", "body", m.StorageDomainID); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateStorageDomainName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageDomainName", "body", m.StorageDomainName); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateCaseInsensitiveNamesEnabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "caseInsensitiveNamesEnabled", "body", m.CaseInsensitiveNamesEnabled); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateCreateTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createTimeMsecs", "body", m.CreateTimeMsecs); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateBasicMountPath(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "basicMountPath", "body", m.BasicMountPath); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateNfsMountPath(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "nfsMountPath", "body", m.NfsMountPath); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateNfsMountPaths(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "nfsMountPaths", "body", []string(m.NfsMountPaths)); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateSmbMountPaths(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "smbMountPaths", "body", []string(m.SmbMountPaths)); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateAliases(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "aliases", "body", []*ViewAliasInfo(m.Aliases)); err != nil {
		return err
	}

	for i := 0; i < len(m.Aliases); i++ {

		if m.Aliases[i] != nil {

			if swag.IsZero(m.Aliases[i]) { // not required
				return nil
			}

			if err := m.Aliases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aliases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aliases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *View) contextValidateIsTargetForMigratedData(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isTargetForMigratedData", "body", m.IsTargetForMigratedData); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateFileCountBySize(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FileCountBySize); i++ {

		if m.FileCountBySize[i] != nil {

			if swag.IsZero(m.FileCountBySize[i]) { // not required
				return nil
			}

			if err := m.FileCountBySize[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fileCountBySize" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fileCountBySize" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *View) contextValidateS3FolderSupportEnabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "s3FolderSupportEnabled", "body", m.S3FolderSupportEnabled); err != nil {
		return err
	}

	return nil
}

func (m *View) contextValidateIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.Intent != nil {

		if swag.IsZero(m.Intent) { // not required
			return nil
		}

		if err := m.Intent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intent")
			}
			return err
		}
	}

	return nil
}

func (m *View) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *View) contextValidateViewFailover(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewFailover != nil {

		if swag.IsZero(m.ViewFailover) { // not required
			return nil
		}

		if err := m.ViewFailover.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewFailover")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewFailover")
			}
			return err
		}
	}

	return nil
}

func (m *View) contextValidateViewProtection(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewProtection != nil {

		if swag.IsZero(m.ViewProtection) { // not required
			return nil
		}

		if err := m.ViewProtection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewProtection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewProtection")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *View) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *View) UnmarshalBinary(b []byte) error {
	var res View
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
