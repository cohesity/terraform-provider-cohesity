// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExperimentalAdapterProtectionGroupParams Specifies parameters related to the Experimental Adapter Protection job.
//
// swagger:model ExperimentalAdapterProtectionGroupParams
type ExperimentalAdapterProtectionGroupParams struct {

	// Specifies a list of fully qualified names of the objects to be protected.
	// Min Items: 1
	Objects []*ExperimentalAdapaterProtectionGroupObjectParams `json:"objects"`

	// Specifies the maximum number of concurrent IO streams that will be created to exchange data with the cluster. If not specified, the default value is taken as 1.
	Concurrency *int32 `json:"concurrency,omitempty"`

	// Specifies the objects to be excluded in the Protection Group.
	// Unique: true
	ExcludedObjectIds []int32 `json:"excludedObjectIds"`

	// Specifies the discover source workflow parameters. This is a stringified JSON representation of the parameters.
	WorkflowParams *string `json:"workflowParams,omitempty"`
}

// Validate validates this experimental adapter protection group params
func (m *ExperimentalAdapterProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludedObjectIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExperimentalAdapterProtectionGroupParams) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	iObjectsSize := int64(len(m.Objects))

	if err := validate.MinItems("objects", "body", iObjectsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExperimentalAdapterProtectionGroupParams) validateExcludedObjectIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludedObjectIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludedObjectIds", "body", m.ExcludedObjectIds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this experimental adapter protection group params based on the context it is used
func (m *ExperimentalAdapterProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExperimentalAdapterProtectionGroupParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExperimentalAdapterProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExperimentalAdapterProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res ExperimentalAdapterProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
