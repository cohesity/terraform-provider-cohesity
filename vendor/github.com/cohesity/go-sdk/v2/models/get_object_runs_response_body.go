// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetObjectRunsResponseBody Get Object Run Response Body.
//
// Specifies the response body of the get object run request.
//
// swagger:model GetObjectRunsResponseBody
type GetObjectRunsResponseBody struct {

	// Specifies the protection runs of the given object.
	ProtectionRuns []*ObjectProtectionRunSummary `json:"protectionRuns"`

	// Specifies the information needed in order to support pagination. This will not be included for the last page of results.
	PaginationInfo *PaginationInfo `json:"paginationInfo,omitempty"`
}

// Validate validates this get object runs response body
func (m *GetObjectRunsResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionRuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaginationInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetObjectRunsResponseBody) validateProtectionRuns(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionRuns) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectionRuns); i++ {
		if swag.IsZero(m.ProtectionRuns[i]) { // not required
			continue
		}

		if m.ProtectionRuns[i] != nil {
			if err := m.ProtectionRuns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionRuns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionRuns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetObjectRunsResponseBody) validatePaginationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.PaginationInfo) { // not required
		return nil
	}

	if m.PaginationInfo != nil {
		if err := m.PaginationInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paginationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paginationInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get object runs response body based on the context it is used
func (m *GetObjectRunsResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtectionRuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaginationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetObjectRunsResponseBody) contextValidateProtectionRuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectionRuns); i++ {

		if m.ProtectionRuns[i] != nil {

			if swag.IsZero(m.ProtectionRuns[i]) { // not required
				return nil
			}

			if err := m.ProtectionRuns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectionRuns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectionRuns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetObjectRunsResponseBody) contextValidatePaginationInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PaginationInfo != nil {

		if swag.IsZero(m.PaginationInfo) { // not required
			return nil
		}

		if err := m.PaginationInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paginationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paginationInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetObjectRunsResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetObjectRunsResponseBody) UnmarshalBinary(b []byte) error {
	var res GetObjectRunsResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
