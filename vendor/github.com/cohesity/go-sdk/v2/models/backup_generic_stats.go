// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupGenericStats Specifies the stats which are generic for all adapters.
//
// swagger:model BackupGenericStats
type BackupGenericStats struct {

	// Specifies the number of errors for this run.
	NumErrors *int64 `json:"numErrors,omitempty"`

	// Specifies the amount of data which has to be ingested in bytes.
	RemainingDataIngested *int64 `json:"remainingDataIngested,omitempty"`

	// Specifies the amount of data which has been ingested in bytes.
	DataIngested *int64 `json:"dataIngested,omitempty"`

	// Specifies the rate at which data is being ingested in bytes per minute.
	DataIngestionRate *int64 `json:"dataIngestionRate,omitempty"`

	// Specifies the time in which backup should finish in minutes.
	EstimatedBackupTime *int64 `json:"estimatedBackupTime,omitempty"`

	// Divides the errors into classes for better understanding for the user.
	ErrorClasses []*ErrorClass `json:"errorClasses"`
}

// Validate validates this backup generic stats
func (m *BackupGenericStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorClasses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupGenericStats) validateErrorClasses(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorClasses) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrorClasses); i++ {
		if swag.IsZero(m.ErrorClasses[i]) { // not required
			continue
		}

		if m.ErrorClasses[i] != nil {
			if err := m.ErrorClasses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorClasses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorClasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this backup generic stats based on the context it is used
func (m *BackupGenericStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorClasses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupGenericStats) contextValidateErrorClasses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ErrorClasses); i++ {

		if m.ErrorClasses[i] != nil {

			if swag.IsZero(m.ErrorClasses[i]) { // not required
				return nil
			}

			if err := m.ErrorClasses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorClasses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorClasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupGenericStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupGenericStats) UnmarshalBinary(b []byte) error {
	var res BackupGenericStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
