// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsSnapshotParams Specifies parameters of AWS type snapshots.
//
// swagger:model AwsSnapshotParams
type AwsSnapshotParams struct {

	// Specifies the protection type of AWS snapshots.
	// Enum: ["kAgent","kNative","kSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsS3","kAwsRDSPostgresBackup","kAwsAuroraPostgres","kAwsRDSPostgres"]
	ProtectionType *string `json:"protectionType,omitempty"`
}

// Validate validates this aws snapshot params
func (m *AwsSnapshotParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var awsSnapshotParamsTypeProtectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAgent","kNative","kSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsS3","kAwsRDSPostgresBackup","kAwsAuroraPostgres","kAwsRDSPostgres"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsSnapshotParamsTypeProtectionTypePropEnum = append(awsSnapshotParamsTypeProtectionTypePropEnum, v)
	}
}

const (

	// AwsSnapshotParamsProtectionTypeKAgent captures enum value "kAgent"
	AwsSnapshotParamsProtectionTypeKAgent string = "kAgent"

	// AwsSnapshotParamsProtectionTypeKNative captures enum value "kNative"
	AwsSnapshotParamsProtectionTypeKNative string = "kNative"

	// AwsSnapshotParamsProtectionTypeKSnapshotManager captures enum value "kSnapshotManager"
	AwsSnapshotParamsProtectionTypeKSnapshotManager string = "kSnapshotManager"

	// AwsSnapshotParamsProtectionTypeKRDSSnapshotManager captures enum value "kRDSSnapshotManager"
	AwsSnapshotParamsProtectionTypeKRDSSnapshotManager string = "kRDSSnapshotManager"

	// AwsSnapshotParamsProtectionTypeKAuroraSnapshotManager captures enum value "kAuroraSnapshotManager"
	AwsSnapshotParamsProtectionTypeKAuroraSnapshotManager string = "kAuroraSnapshotManager"

	// AwsSnapshotParamsProtectionTypeKAwsS3 captures enum value "kAwsS3"
	AwsSnapshotParamsProtectionTypeKAwsS3 string = "kAwsS3"

	// AwsSnapshotParamsProtectionTypeKAwsRDSPostgresBackup captures enum value "kAwsRDSPostgresBackup"
	AwsSnapshotParamsProtectionTypeKAwsRDSPostgresBackup string = "kAwsRDSPostgresBackup"

	// AwsSnapshotParamsProtectionTypeKAwsAuroraPostgres captures enum value "kAwsAuroraPostgres"
	AwsSnapshotParamsProtectionTypeKAwsAuroraPostgres string = "kAwsAuroraPostgres"

	// AwsSnapshotParamsProtectionTypeKAwsRDSPostgres captures enum value "kAwsRDSPostgres"
	AwsSnapshotParamsProtectionTypeKAwsRDSPostgres string = "kAwsRDSPostgres"
)

// prop value enum
func (m *AwsSnapshotParams) validateProtectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, awsSnapshotParamsTypeProtectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AwsSnapshotParams) validateProtectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtectionTypeEnum("protectionType", "body", *m.ProtectionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aws snapshot params based on context it is used
func (m *AwsSnapshotParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AwsSnapshotParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsSnapshotParams) UnmarshalBinary(b []byte) error {
	var res AwsSnapshotParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
