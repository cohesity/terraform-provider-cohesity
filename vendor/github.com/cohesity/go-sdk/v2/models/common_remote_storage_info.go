// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonRemoteStorageInfo Common Remote Storage Info
//
// Specifies the details of common remote storage info.
//
// swagger:model CommonRemoteStorageInfo
type CommonRemoteStorageInfo struct {

	// Specifies unique id of the registered remote storage.
	// Read Only: true
	ID *int64 `json:"id,omitempty"`

	// Specifies the product type of the remote storage.
	// Required: true
	// Enum: ["FlashBlade"]
	Product *string `json:"product"`
}

// Validate validates this common remote storage info
func (m *CommonRemoteStorageInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonRemoteStorageInfoTypeProductPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FlashBlade"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonRemoteStorageInfoTypeProductPropEnum = append(commonRemoteStorageInfoTypeProductPropEnum, v)
	}
}

const (

	// CommonRemoteStorageInfoProductFlashBlade captures enum value "FlashBlade"
	CommonRemoteStorageInfoProductFlashBlade string = "FlashBlade"
)

// prop value enum
func (m *CommonRemoteStorageInfo) validateProductEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonRemoteStorageInfoTypeProductPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonRemoteStorageInfo) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("product", "body", m.Product); err != nil {
		return err
	}

	// value enum
	if err := m.validateProductEnum("product", "body", *m.Product); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this common remote storage info based on the context it is used
func (m *CommonRemoteStorageInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonRemoteStorageInfo) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonRemoteStorageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonRemoteStorageInfo) UnmarshalBinary(b []byte) error {
	var res CommonRemoteStorageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
