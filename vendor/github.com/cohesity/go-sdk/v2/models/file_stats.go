// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileStats Specifies the file stats.
//
// swagger:model FileStats
type FileStats struct {

	// Specifies the file type.
	// Enum: ["TextFile","AudioFile","VideoFile","CompressedFile","DatabaseFile","ImageFile","ExecutableFile","LogFile","OtherFile"]
	Type *string `json:"type,omitempty"`

	// Specifies the number of files.
	FilesCount *int64 `json:"filesCount,omitempty"`

	// Specifies the size of all the files in bytes.
	FilesSizeBytes *int64 `json:"filesSizeBytes,omitempty"`
}

// Validate validates this file stats
func (m *FileStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fileStatsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TextFile","AudioFile","VideoFile","CompressedFile","DatabaseFile","ImageFile","ExecutableFile","LogFile","OtherFile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileStatsTypeTypePropEnum = append(fileStatsTypeTypePropEnum, v)
	}
}

const (

	// FileStatsTypeTextFile captures enum value "TextFile"
	FileStatsTypeTextFile string = "TextFile"

	// FileStatsTypeAudioFile captures enum value "AudioFile"
	FileStatsTypeAudioFile string = "AudioFile"

	// FileStatsTypeVideoFile captures enum value "VideoFile"
	FileStatsTypeVideoFile string = "VideoFile"

	// FileStatsTypeCompressedFile captures enum value "CompressedFile"
	FileStatsTypeCompressedFile string = "CompressedFile"

	// FileStatsTypeDatabaseFile captures enum value "DatabaseFile"
	FileStatsTypeDatabaseFile string = "DatabaseFile"

	// FileStatsTypeImageFile captures enum value "ImageFile"
	FileStatsTypeImageFile string = "ImageFile"

	// FileStatsTypeExecutableFile captures enum value "ExecutableFile"
	FileStatsTypeExecutableFile string = "ExecutableFile"

	// FileStatsTypeLogFile captures enum value "LogFile"
	FileStatsTypeLogFile string = "LogFile"

	// FileStatsTypeOtherFile captures enum value "OtherFile"
	FileStatsTypeOtherFile string = "OtherFile"
)

// prop value enum
func (m *FileStats) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fileStatsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FileStats) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this file stats based on context it is used
func (m *FileStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FileStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileStats) UnmarshalBinary(b []byte) error {
	var res FileStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
