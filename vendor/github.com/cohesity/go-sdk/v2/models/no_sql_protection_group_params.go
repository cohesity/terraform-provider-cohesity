// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NoSQLProtectionGroupParams Specifies the source specific parameters for this Protection Group.
//
// swagger:model NoSqlProtectionGroupParams
type NoSQLProtectionGroupParams struct {

	// Specifies the objects to be included in the Protection Group.
	// Min Items: 1
	// Unique: true
	Objects []*NoSQLProtectionGroupObjectParams `json:"objects"`

	// Specifies the maximum number of concurrent IO Streams that will be created to exchange data with the cluster.
	Concurrency *int32 `json:"concurrency,omitempty"`

	// Specifies the maximum network bandwidth that each concurrent IO Stream can use for exchanging data with the cluster.
	BandwidthMBPS *int64 `json:"bandwidthMBPS,omitempty"`

	// Specifies the objects to be excluded in the Protection Group.
	// Unique: true
	ExcludeObjectIds []int64 `json:"excludeObjectIds"`

	// Object ID of the Source on which this protection was run .
	// Read Only: true
	SourceID *int64 `json:"sourceId,omitempty"`

	// Specifies the name of the Source on which this protection was run.
	// Read Only: true
	SourceName *string `json:"sourceName,omitempty"`

	// The user specified name for the Source on which this protection was run.
	// Read Only: true
	CustomSourceName *string `json:"customSourceName,omitempty"`

	// Specifies the list of fully qualified name of the entities to include for protection.
	// Unique: true
	IncludeObjectlist []string `json:"includeObjectlist"`

	// Specifies the list of fully qualified name of the entities to exclude for protection.
	// Unique: true
	ExcludeObjectlist []string `json:"excludeObjectlist"`

	// Specifies the flag to automatically scale number of concurrent IO Streams that will be created to exchange data with the cluster.
	AutoScaleConcurrency *bool `json:"autoScaleConcurrency,omitempty"`
}

// Validate validates this no Sql protection group params
func (m *NoSQLProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeObjectIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludeObjectlist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeObjectlist(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLProtectionGroupParams) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	iObjectsSize := int64(len(m.Objects))

	if err := validate.MinItems("objects", "body", iObjectsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("objects", "body", m.Objects); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NoSQLProtectionGroupParams) validateExcludeObjectIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeObjectIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludeObjectIds", "body", m.ExcludeObjectIds); err != nil {
		return err
	}

	return nil
}

func (m *NoSQLProtectionGroupParams) validateIncludeObjectlist(formats strfmt.Registry) error {
	if swag.IsZero(m.IncludeObjectlist) { // not required
		return nil
	}

	if err := validate.UniqueItems("includeObjectlist", "body", m.IncludeObjectlist); err != nil {
		return err
	}

	return nil
}

func (m *NoSQLProtectionGroupParams) validateExcludeObjectlist(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeObjectlist) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludeObjectlist", "body", m.ExcludeObjectlist); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this no Sql protection group params based on the context it is used
func (m *NoSQLProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomSourceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NoSQLProtectionGroupParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NoSQLProtectionGroupParams) contextValidateSourceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceId", "body", m.SourceID); err != nil {
		return err
	}

	return nil
}

func (m *NoSQLProtectionGroupParams) contextValidateSourceName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceName", "body", m.SourceName); err != nil {
		return err
	}

	return nil
}

func (m *NoSQLProtectionGroupParams) contextValidateCustomSourceName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customSourceName", "body", m.CustomSourceName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NoSQLProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NoSQLProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res NoSQLProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
