// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MongoIndexedObject MongoIndexedObject
//
// Specifies a Mongo indexed object.
//
// swagger:model MongoIndexedObject
type MongoIndexedObject struct {
	CommonIndexedObjectParams

	// Specifies the Mongo Object Type.
	// Enum: ["MongoDatabases","MongoCollections"]
	Type *string `json:"type,omitempty"`

	// Specifies the id of the indexed object.
	ID *string `json:"id,omitempty"`

	// Specifies the Continuous Data Protection (CDP) details about this object. This is only available if this object if protected by a CDP enabled policy.
	CdpInfo *CdpObjectInfo `json:"cdpInfo,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MongoIndexedObject) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonIndexedObjectParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonIndexedObjectParams = aO0

	// AO1
	var dataAO1 struct {
		Type *string `json:"type,omitempty"`

		ID *string `json:"id,omitempty"`

		CdpInfo *CdpObjectInfo `json:"cdpInfo,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Type = dataAO1.Type

	m.ID = dataAO1.ID

	m.CdpInfo = dataAO1.CdpInfo

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MongoIndexedObject) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonIndexedObjectParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Type *string `json:"type,omitempty"`

		ID *string `json:"id,omitempty"`

		CdpInfo *CdpObjectInfo `json:"cdpInfo,omitempty"`
	}

	dataAO1.Type = m.Type

	dataAO1.ID = m.ID

	dataAO1.CdpInfo = m.CdpInfo

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this mongo indexed object
func (m *MongoIndexedObject) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonIndexedObjectParams
	if err := m.CommonIndexedObjectParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdpInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mongoIndexedObjectTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MongoDatabases","MongoCollections"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mongoIndexedObjectTypeTypePropEnum = append(mongoIndexedObjectTypeTypePropEnum, v)
	}
}

// property enum
func (m *MongoIndexedObject) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mongoIndexedObjectTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MongoIndexedObject) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *MongoIndexedObject) validateCdpInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CdpInfo) { // not required
		return nil
	}

	if m.CdpInfo != nil {
		if err := m.CdpInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mongo indexed object based on the context it is used
func (m *MongoIndexedObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonIndexedObjectParams
	if err := m.CommonIndexedObjectParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCdpInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MongoIndexedObject) contextValidateCdpInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CdpInfo != nil {

		if swag.IsZero(m.CdpInfo) { // not required
			return nil
		}

		if err := m.CdpInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MongoIndexedObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MongoIndexedObject) UnmarshalBinary(b []byte) error {
	var res MongoIndexedObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
