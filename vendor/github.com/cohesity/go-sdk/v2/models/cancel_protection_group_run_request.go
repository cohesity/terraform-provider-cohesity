// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CancelProtectionGroupRunRequest Cancel protection run request.
//
// Specifies the request to cancel a protection run.
//
// swagger:model CancelProtectionGroupRunRequest
type CancelProtectionGroupRunRequest struct {

	// Specifies a unique run id of the Protection Group run.
	// Required: true
	// Pattern: ^\d+:\d+$
	RunID *string `json:"runId"`

	// Specifies the task id of the local run.
	// Pattern: ^\d+:\d+:\d+$
	LocalTaskID *string `json:"localTaskId,omitempty"`

	// List of entity ids for which we need to cancel the backup tasks. If this is provided it will not cancel the complete run but will cancel only subset of backup tasks (if backup tasks are cancelled correspoding copy task will also get cancelled). If the backup tasks are completed successfully it will not cancel those backup tasks.
	ObjectIds []int64 `json:"objectIds"`

	// Specifies the task id of the replication run.
	ReplicationTaskID []string `json:"replicationTaskId"`

	// Specifies the task id of the archival run.
	ArchivalTaskID []string `json:"archivalTaskId"`

	// Specifies the task id of the cloudSpin run.
	CloudSpinTaskID []string `json:"cloudSpinTaskId"`
}

// Validate validates this cancel protection group run request
func (m *CancelProtectionGroupRunRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivalTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudSpinTaskID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelProtectionGroupRunRequest) validateRunID(formats strfmt.Registry) error {

	if err := validate.Required("runId", "body", m.RunID); err != nil {
		return err
	}

	if err := validate.Pattern("runId", "body", *m.RunID, `^\d+:\d+$`); err != nil {
		return err
	}

	return nil
}

func (m *CancelProtectionGroupRunRequest) validateLocalTaskID(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalTaskID) { // not required
		return nil
	}

	if err := validate.Pattern("localTaskId", "body", *m.LocalTaskID, `^\d+:\d+:\d+$`); err != nil {
		return err
	}

	return nil
}

func (m *CancelProtectionGroupRunRequest) validateReplicationTaskID(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTaskID) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationTaskID); i++ {

		if err := validate.Pattern("replicationTaskId"+"."+strconv.Itoa(i), "body", m.ReplicationTaskID[i], `^\d+:\d+:\d+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *CancelProtectionGroupRunRequest) validateArchivalTaskID(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalTaskID) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchivalTaskID); i++ {

		if err := validate.Pattern("archivalTaskId"+"."+strconv.Itoa(i), "body", m.ArchivalTaskID[i], `^\d+:\d+:\d+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *CancelProtectionGroupRunRequest) validateCloudSpinTaskID(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudSpinTaskID) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudSpinTaskID); i++ {

		if err := validate.Pattern("cloudSpinTaskId"+"."+strconv.Itoa(i), "body", m.CloudSpinTaskID[i], `^\d+:\d+:\d+$`); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this cancel protection group run request based on context it is used
func (m *CancelProtectionGroupRunRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CancelProtectionGroupRunRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CancelProtectionGroupRunRequest) UnmarshalBinary(b []byte) error {
	var res CancelProtectionGroupRunRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
