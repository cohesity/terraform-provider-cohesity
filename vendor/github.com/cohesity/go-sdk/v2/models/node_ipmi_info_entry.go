// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NodeIpmiInfoEntry Specifies the ipmi info for each node.
//
// swagger:model NodeIpmiInfoEntry
type NodeIpmiInfoEntry struct {

	// Specifies the ip address of the node.
	NodeIP *string `json:"nodeIp,omitempty"`

	// Specifies the ipmi ip address of the node.
	NodeIpmiIP *string `json:"nodeIpmiIp,omitempty"`

	// Specifies the subnet mask for the given node ipmi.
	NodeIpmiSubnetMask *string `json:"nodeIpmiSubnetMask,omitempty"`

	// Specifies the gateway for the given node ipmi.
	NodeIpmiGateway *string `json:"nodeIpmiGateway,omitempty"`
}

// Validate validates this node ipmi info entry
func (m *NodeIpmiInfoEntry) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this node ipmi info entry based on context it is used
func (m *NodeIpmiInfoEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeIpmiInfoEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeIpmiInfoEntry) UnmarshalBinary(b []byte) error {
	var res NodeIpmiInfoEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
