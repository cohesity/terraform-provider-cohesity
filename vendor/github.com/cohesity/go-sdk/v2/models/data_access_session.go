// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataAccessSession Determines information about a specific data access session.
//
// swagger:model DataAccessSession
type DataAccessSession struct {
	CommonDataAccessSessionInformation

	// Specifies information about the backup snapshot and object whose data/metadata needs to be accessed.
	CurrentSnapshotInfo struct {
		DataAccessSnapshotResponseParams
	} `json:"currentSnapshotInfo,omitempty"`

	// Specifies information about the base snapshot of an object.
	BaseSnapshotInfo struct {
		DataAccessSnapshotResponseParams
	} `json:"baseSnapshotInfo,omitempty"`

	// Specifies registered source id.
	SourceID *int64 `json:"sourceId,omitempty"`

	// Specifies the error information when there is session related error.
	Error *Error `json:"error,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DataAccessSession) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonDataAccessSessionInformation
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonDataAccessSessionInformation = aO0

	// AO1
	var dataAO1 struct {
		CurrentSnapshotInfo struct {
			DataAccessSnapshotResponseParams
		} `json:"currentSnapshotInfo,omitempty"`

		BaseSnapshotInfo struct {
			DataAccessSnapshotResponseParams
		} `json:"baseSnapshotInfo,omitempty"`

		SourceID *int64 `json:"sourceId,omitempty"`

		Error *Error `json:"error,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CurrentSnapshotInfo = dataAO1.CurrentSnapshotInfo

	m.BaseSnapshotInfo = dataAO1.BaseSnapshotInfo

	m.SourceID = dataAO1.SourceID

	m.Error = dataAO1.Error

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DataAccessSession) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonDataAccessSessionInformation)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CurrentSnapshotInfo struct {
			DataAccessSnapshotResponseParams
		} `json:"currentSnapshotInfo,omitempty"`

		BaseSnapshotInfo struct {
			DataAccessSnapshotResponseParams
		} `json:"baseSnapshotInfo,omitempty"`

		SourceID *int64 `json:"sourceId,omitempty"`

		Error *Error `json:"error,omitempty"`
	}

	dataAO1.CurrentSnapshotInfo = m.CurrentSnapshotInfo

	dataAO1.BaseSnapshotInfo = m.BaseSnapshotInfo

	dataAO1.SourceID = m.SourceID

	dataAO1.Error = m.Error

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data access session
func (m *DataAccessSession) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonDataAccessSessionInformation
	if err := m.CommonDataAccessSessionInformation.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentSnapshotInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseSnapshotInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataAccessSession) validateCurrentSnapshotInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentSnapshotInfo) { // not required
		return nil
	}

	return nil
}

func (m *DataAccessSession) validateBaseSnapshotInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseSnapshotInfo) { // not required
		return nil
	}

	return nil
}

func (m *DataAccessSession) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data access session based on the context it is used
func (m *DataAccessSession) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonDataAccessSessionInformation
	if err := m.CommonDataAccessSessionInformation.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentSnapshotInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBaseSnapshotInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataAccessSession) contextValidateCurrentSnapshotInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DataAccessSession) contextValidateBaseSnapshotInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DataAccessSession) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataAccessSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataAccessSession) UnmarshalBinary(b []byte) error {
	var res DataAccessSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
