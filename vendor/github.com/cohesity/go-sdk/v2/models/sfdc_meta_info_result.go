// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SfdcMetaInfoResult SfdcMetaInfoResult
//
// Specifies the meta info params for salesforce object.
//
// swagger:model SfdcMetaInfoResult
type SfdcMetaInfoResult struct {

	// Specifies the list of parent objects.
	ParentObjects []*SfdcDependentObject `json:"parentObjects"`

	// Specifies the list of child objects.
	ChildObjects []*SfdcDependentObject `json:"childObjects"`
}

// Validate validates this sfdc meta info result
func (m *SfdcMetaInfoResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParentObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildObjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcMetaInfoResult) validateParentObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.ParentObjects); i++ {
		if swag.IsZero(m.ParentObjects[i]) { // not required
			continue
		}

		if m.ParentObjects[i] != nil {
			if err := m.ParentObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parentObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parentObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SfdcMetaInfoResult) validateChildObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildObjects); i++ {
		if swag.IsZero(m.ChildObjects[i]) { // not required
			continue
		}

		if m.ChildObjects[i] != nil {
			if err := m.ChildObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sfdc meta info result based on the context it is used
func (m *SfdcMetaInfoResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParentObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChildObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcMetaInfoResult) contextValidateParentObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ParentObjects); i++ {

		if m.ParentObjects[i] != nil {

			if swag.IsZero(m.ParentObjects[i]) { // not required
				return nil
			}

			if err := m.ParentObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parentObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parentObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SfdcMetaInfoResult) contextValidateChildObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChildObjects); i++ {

		if m.ChildObjects[i] != nil {

			if swag.IsZero(m.ChildObjects[i]) { // not required
				return nil
			}

			if err := m.ChildObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("childObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SfdcMetaInfoResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcMetaInfoResult) UnmarshalBinary(b []byte) error {
	var res SfdcMetaInfoResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
