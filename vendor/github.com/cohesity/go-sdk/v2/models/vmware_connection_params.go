// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareConnectionParams Parameters to connect and query VMware config file.
//
// Specifies the parameters to connect to a seed node and fetch information from its config file.
//
// swagger:model VmwareConnectionParams
type VmwareConnectionParams struct {

	// Specifies the VMware Source type.
	// Required: true
	// Enum: ["kVCenter","kStandaloneHost","kvCloudDirector"]
	Type *string `json:"type"`

	// Specifies the parameters to register a VCD.
	VcdParams *VcdConnectionParams `json:"vcdParams,omitempty"`
}

// Validate validates this vmware connection params
func (m *VmwareConnectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcdParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmwareConnectionParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVCenter","kStandaloneHost","kvCloudDirector"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmwareConnectionParamsTypeTypePropEnum = append(vmwareConnectionParamsTypeTypePropEnum, v)
	}
}

const (

	// VmwareConnectionParamsTypeKVCenter captures enum value "kVCenter"
	VmwareConnectionParamsTypeKVCenter string = "kVCenter"

	// VmwareConnectionParamsTypeKStandaloneHost captures enum value "kStandaloneHost"
	VmwareConnectionParamsTypeKStandaloneHost string = "kStandaloneHost"

	// VmwareConnectionParamsTypeKvCloudDirector captures enum value "kvCloudDirector"
	VmwareConnectionParamsTypeKvCloudDirector string = "kvCloudDirector"
)

// prop value enum
func (m *VmwareConnectionParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmwareConnectionParamsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VmwareConnectionParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *VmwareConnectionParams) validateVcdParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VcdParams) { // not required
		return nil
	}

	if m.VcdParams != nil {
		if err := m.VcdParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware connection params based on the context it is used
func (m *VmwareConnectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVcdParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareConnectionParams) contextValidateVcdParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VcdParams != nil {

		if swag.IsZero(m.VcdParams) { // not required
			return nil
		}

		if err := m.VcdParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcdParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcdParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareConnectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareConnectionParams) UnmarshalBinary(b []byte) error {
	var res VmwareConnectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
