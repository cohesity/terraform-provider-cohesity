// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MachineAccount Specifies a machine account.
//
// swagger:model MachineAccount
type MachineAccount struct {

	// Specifies the machine account name.
	// Required: true
	// Pattern: ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,13}[a-zA-Z0-9])$
	Name *string `json:"name"`

	// Specifies the DNS host name of the machine account.
	DNSHostName *string `json:"dnsHostName,omitempty"`

	// Specifies a list of encryption types apply to the machine account.
	// Unique: true
	Encryption []string `json:"encryption"`

	// Specifies the customized Service Principal Names of the Machine Account. Service Principal Name should be unique across the Active Directory forest.
	ServicePrincipalNames []string `json:"servicePrincipalNames"`
}

// Validate validates this machine account
func (m *MachineAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MachineAccount) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,13}[a-zA-Z0-9])$`); err != nil {
		return err
	}

	return nil
}

var machineAccountEncryptionItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DES-CBC-CRC","DES-CBC-MD5","RC4-HMAC","AES128-CTS-HMAC-SHA1-96","AES256-CTS-HMAC-SHA1-96"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		machineAccountEncryptionItemsEnum = append(machineAccountEncryptionItemsEnum, v)
	}
}

func (m *MachineAccount) validateEncryptionItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, machineAccountEncryptionItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MachineAccount) validateEncryption(formats strfmt.Registry) error {
	if swag.IsZero(m.Encryption) { // not required
		return nil
	}

	if err := validate.UniqueItems("encryption", "body", m.Encryption); err != nil {
		return err
	}

	for i := 0; i < len(m.Encryption); i++ {

		// value enum
		if err := m.validateEncryptionItemsEnum("encryption"+"."+strconv.Itoa(i), "body", m.Encryption[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this machine account based on context it is used
func (m *MachineAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MachineAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MachineAccount) UnmarshalBinary(b []byte) error {
	var res MachineAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
