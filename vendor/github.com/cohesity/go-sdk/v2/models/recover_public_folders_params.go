// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverPublicFoldersParams Specifies the parameters to recover Office 365 Public Folders.
//
// swagger:model RecoverPublicFoldersParams
type RecoverPublicFoldersParams struct {

	// Specifies a list of RootPublicFolder params associated with the objects to recover.
	// Required: true
	// Min Items: 1
	RootPublicFolders []*RootPublicFolderParam `json:"rootPublicFolders"`

	// Specifies the path to the target folder.
	TargetFolderPath *string `json:"targetFolderPath,omitempty"`

	// Specifies whether to continue recovering other Public Folders if one of Public Folder failed to recover. Default value is false.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies the target RootPublicFolder to recover to. If not specified, the objects will be recovered to original location.
	TargetRootPublicFolder *RecoveryObjectIdentifier `json:"targetRootPublicFolder,omitempty"`
}

// Validate validates this recover public folders params
func (m *RecoverPublicFoldersParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRootPublicFolders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetRootPublicFolder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverPublicFoldersParams) validateRootPublicFolders(formats strfmt.Registry) error {

	if err := validate.Required("rootPublicFolders", "body", m.RootPublicFolders); err != nil {
		return err
	}

	iRootPublicFoldersSize := int64(len(m.RootPublicFolders))

	if err := validate.MinItems("rootPublicFolders", "body", iRootPublicFoldersSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.RootPublicFolders); i++ {
		if swag.IsZero(m.RootPublicFolders[i]) { // not required
			continue
		}

		if m.RootPublicFolders[i] != nil {
			if err := m.RootPublicFolders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootPublicFolders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootPublicFolders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverPublicFoldersParams) validateTargetRootPublicFolder(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetRootPublicFolder) { // not required
		return nil
	}

	if m.TargetRootPublicFolder != nil {
		if err := m.TargetRootPublicFolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetRootPublicFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetRootPublicFolder")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover public folders params based on the context it is used
func (m *RecoverPublicFoldersParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRootPublicFolders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetRootPublicFolder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverPublicFoldersParams) contextValidateRootPublicFolders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RootPublicFolders); i++ {

		if m.RootPublicFolders[i] != nil {

			if swag.IsZero(m.RootPublicFolders[i]) { // not required
				return nil
			}

			if err := m.RootPublicFolders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootPublicFolders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootPublicFolders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverPublicFoldersParams) contextValidateTargetRootPublicFolder(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetRootPublicFolder != nil {

		if swag.IsZero(m.TargetRootPublicFolder) { // not required
			return nil
		}

		if err := m.TargetRootPublicFolder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetRootPublicFolder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetRootPublicFolder")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverPublicFoldersParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverPublicFoldersParams) UnmarshalBinary(b []byte) error {
	var res RecoverPublicFoldersParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
