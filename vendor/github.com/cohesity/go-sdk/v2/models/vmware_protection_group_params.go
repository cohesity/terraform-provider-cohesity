// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VmwareProtectionGroupParams Specifies the parameters which are specific to VMware related Protection Groups.
//
// swagger:model VmwareProtectionGroupParams
type VmwareProtectionGroupParams struct {

	// Specifies the objects to include in the backup.
	Objects []*VmwareProtectionGroupObjectParams `json:"objects"`

	// Specifies a list of disks to exclude from the backup.
	GlobalExcludeDisks []*DiskInfo `json:"globalExcludeDisks"`

	// Specifies the standby resource objects for this backup.
	StandbyResourceObjects []*VmwareProtectionGroupStandbyResourceParams `json:"standbyResourceObjects"`

	CommonVmwareProtectionParams

	VmwareProtectionGroupExtraParams

	CommonCdpParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VmwareProtectionGroupParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Objects []*VmwareProtectionGroupObjectParams `json:"objects"`

		GlobalExcludeDisks []*DiskInfo `json:"globalExcludeDisks"`

		StandbyResourceObjects []*VmwareProtectionGroupStandbyResourceParams `json:"standbyResourceObjects"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Objects = dataAO0.Objects

	m.GlobalExcludeDisks = dataAO0.GlobalExcludeDisks

	m.StandbyResourceObjects = dataAO0.StandbyResourceObjects

	// AO1
	var aO1 CommonVmwareProtectionParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.CommonVmwareProtectionParams = aO1

	// AO2
	var aO2 VmwareProtectionGroupExtraParams
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.VmwareProtectionGroupExtraParams = aO2

	// AO3
	var aO3 CommonCdpParams
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.CommonCdpParams = aO3

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VmwareProtectionGroupParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	var dataAO0 struct {
		Objects []*VmwareProtectionGroupObjectParams `json:"objects"`

		GlobalExcludeDisks []*DiskInfo `json:"globalExcludeDisks"`

		StandbyResourceObjects []*VmwareProtectionGroupStandbyResourceParams `json:"standbyResourceObjects"`
	}

	dataAO0.Objects = m.Objects

	dataAO0.GlobalExcludeDisks = m.GlobalExcludeDisks

	dataAO0.StandbyResourceObjects = m.StandbyResourceObjects

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.CommonVmwareProtectionParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.VmwareProtectionGroupExtraParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.CommonCdpParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vmware protection group params
func (m *VmwareProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalExcludeDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandbyResourceObjects(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with CommonVmwareProtectionParams
	if err := m.CommonVmwareProtectionParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with VmwareProtectionGroupExtraParams
	if err := m.VmwareProtectionGroupExtraParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with CommonCdpParams
	if err := m.CommonCdpParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareProtectionGroupParams) validateObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VmwareProtectionGroupParams) validateGlobalExcludeDisks(formats strfmt.Registry) error {

	if swag.IsZero(m.GlobalExcludeDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.GlobalExcludeDisks); i++ {
		if swag.IsZero(m.GlobalExcludeDisks[i]) { // not required
			continue
		}

		if m.GlobalExcludeDisks[i] != nil {
			if err := m.GlobalExcludeDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("globalExcludeDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("globalExcludeDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VmwareProtectionGroupParams) validateStandbyResourceObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.StandbyResourceObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.StandbyResourceObjects); i++ {
		if swag.IsZero(m.StandbyResourceObjects[i]) { // not required
			continue
		}

		if m.StandbyResourceObjects[i] != nil {
			if err := m.StandbyResourceObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standbyResourceObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standbyResourceObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vmware protection group params based on the context it is used
func (m *VmwareProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlobalExcludeDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandbyResourceObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with CommonVmwareProtectionParams
	if err := m.CommonVmwareProtectionParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with VmwareProtectionGroupExtraParams
	if err := m.VmwareProtectionGroupExtraParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with CommonCdpParams
	if err := m.CommonCdpParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareProtectionGroupParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VmwareProtectionGroupParams) contextValidateGlobalExcludeDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GlobalExcludeDisks); i++ {

		if m.GlobalExcludeDisks[i] != nil {

			if swag.IsZero(m.GlobalExcludeDisks[i]) { // not required
				return nil
			}

			if err := m.GlobalExcludeDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("globalExcludeDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("globalExcludeDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VmwareProtectionGroupParams) contextValidateStandbyResourceObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StandbyResourceObjects); i++ {

		if m.StandbyResourceObjects[i] != nil {

			if swag.IsZero(m.StandbyResourceObjects[i]) { // not required
				return nil
			}

			if err := m.StandbyResourceObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standbyResourceObjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standbyResourceObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res VmwareProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
