// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicationBackupActivation Specifies the request parmeters to activate the backup of failover entities on replication cluster.
//
// swagger:model ReplicationBackupActivation
type ReplicationBackupActivation struct {

	// Specifies the list of failover object that need to be protected on replication cluster. If the object set that was sent earlier is provided again then API will return an error. If this objects list is not specified then internally it will be inferred if '/objectLinkage' API has been called previously.
	Objects []*FailoverObject `json:"objects"`

	// Specifies the protection group id that will be used for backing up the failover entities on replication cluster. This is a optional argument and only need to be passed if user wants to use the existing job for the backup. If specified then Orchastrator should enusre that protection group is compatible to handle all provided failover objects.
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// If this is specifed as true, then reverse replication of failover objects will be enabled from replication cluster to source cluster. If source cluster is not reachable, then replications will fail until source cluster comes up again. Here orchastrator should also ensure that storage domain on replication cluster is correctly mapped to the same storage domain on the source cluster.
	EnableReverseReplication *bool `json:"enableReverseReplication,omitempty"`

	// Whether to skip protecting the failed over entities previously specified via Initiate Failover API.
	DoNotProtect *bool `json:"doNotProtect,omitempty"`

	// If set to true then object based backups will be created for the failed over VMs.
	CreateObjectBackup *bool `json:"createObjectBackup,omitempty"`

	// Policy which will be used in the protection of the failed over objects.
	TargetFailoverPolicyID *string `json:"targetFailoverPolicyId,omitempty"`

	// If this is specified, then the protection environment of the failed over objects will be set to this. Otherwise, the protection environment of the failed over objects is determined by the objects' environment.
	// Enum: ["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsRDSPostgres","kAwsAuroraPostgres","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc","kO365ExchangeCSM","kO365OneDriveCSM","kO365SharepointCSM"]
	TargetFailoverEnvironment *string `json:"targetFailoverEnvironment,omitempty"`
}

// Validate validates this replication backup activation
func (m *ReplicationBackupActivation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetFailoverEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationBackupActivation) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var replicationBackupActivationTypeTargetFailoverEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAwsRDSPostgres","kAwsAuroraPostgres","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc","kO365ExchangeCSM","kO365OneDriveCSM","kO365SharepointCSM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicationBackupActivationTypeTargetFailoverEnvironmentPropEnum = append(replicationBackupActivationTypeTargetFailoverEnvironmentPropEnum, v)
	}
}

const (

	// ReplicationBackupActivationTargetFailoverEnvironmentKVMware captures enum value "kVMware"
	ReplicationBackupActivationTargetFailoverEnvironmentKVMware string = "kVMware"

	// ReplicationBackupActivationTargetFailoverEnvironmentKHyperV captures enum value "kHyperV"
	ReplicationBackupActivationTargetFailoverEnvironmentKHyperV string = "kHyperV"

	// ReplicationBackupActivationTargetFailoverEnvironmentKVCD captures enum value "kVCD"
	ReplicationBackupActivationTargetFailoverEnvironmentKVCD string = "kVCD"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAzure captures enum value "kAzure"
	ReplicationBackupActivationTargetFailoverEnvironmentKAzure string = "kAzure"

	// ReplicationBackupActivationTargetFailoverEnvironmentKGCP captures enum value "kGCP"
	ReplicationBackupActivationTargetFailoverEnvironmentKGCP string = "kGCP"

	// ReplicationBackupActivationTargetFailoverEnvironmentKKVM captures enum value "kKVM"
	ReplicationBackupActivationTargetFailoverEnvironmentKKVM string = "kKVM"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAcropolis captures enum value "kAcropolis"
	ReplicationBackupActivationTargetFailoverEnvironmentKAcropolis string = "kAcropolis"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAWS captures enum value "kAWS"
	ReplicationBackupActivationTargetFailoverEnvironmentKAWS string = "kAWS"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAWSNative captures enum value "kAWSNative"
	ReplicationBackupActivationTargetFailoverEnvironmentKAWSNative string = "kAWSNative"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAwsS3 captures enum value "kAwsS3"
	ReplicationBackupActivationTargetFailoverEnvironmentKAwsS3 string = "kAwsS3"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAWSSnapshotManager captures enum value "kAWSSnapshotManager"
	ReplicationBackupActivationTargetFailoverEnvironmentKAWSSnapshotManager string = "kAWSSnapshotManager"

	// ReplicationBackupActivationTargetFailoverEnvironmentKRDSSnapshotManager captures enum value "kRDSSnapshotManager"
	ReplicationBackupActivationTargetFailoverEnvironmentKRDSSnapshotManager string = "kRDSSnapshotManager"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAuroraSnapshotManager captures enum value "kAuroraSnapshotManager"
	ReplicationBackupActivationTargetFailoverEnvironmentKAuroraSnapshotManager string = "kAuroraSnapshotManager"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAwsRDSPostgresBackup captures enum value "kAwsRDSPostgresBackup"
	ReplicationBackupActivationTargetFailoverEnvironmentKAwsRDSPostgresBackup string = "kAwsRDSPostgresBackup"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAwsRDSPostgres captures enum value "kAwsRDSPostgres"
	ReplicationBackupActivationTargetFailoverEnvironmentKAwsRDSPostgres string = "kAwsRDSPostgres"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAwsAuroraPostgres captures enum value "kAwsAuroraPostgres"
	ReplicationBackupActivationTargetFailoverEnvironmentKAwsAuroraPostgres string = "kAwsAuroraPostgres"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAzureNative captures enum value "kAzureNative"
	ReplicationBackupActivationTargetFailoverEnvironmentKAzureNative string = "kAzureNative"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAzureSQL captures enum value "kAzureSQL"
	ReplicationBackupActivationTargetFailoverEnvironmentKAzureSQL string = "kAzureSQL"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAzureSnapshotManager captures enum value "kAzureSnapshotManager"
	ReplicationBackupActivationTargetFailoverEnvironmentKAzureSnapshotManager string = "kAzureSnapshotManager"

	// ReplicationBackupActivationTargetFailoverEnvironmentKPhysical captures enum value "kPhysical"
	ReplicationBackupActivationTargetFailoverEnvironmentKPhysical string = "kPhysical"

	// ReplicationBackupActivationTargetFailoverEnvironmentKPhysicalFiles captures enum value "kPhysicalFiles"
	ReplicationBackupActivationTargetFailoverEnvironmentKPhysicalFiles string = "kPhysicalFiles"

	// ReplicationBackupActivationTargetFailoverEnvironmentKGPFS captures enum value "kGPFS"
	ReplicationBackupActivationTargetFailoverEnvironmentKGPFS string = "kGPFS"

	// ReplicationBackupActivationTargetFailoverEnvironmentKElastifile captures enum value "kElastifile"
	ReplicationBackupActivationTargetFailoverEnvironmentKElastifile string = "kElastifile"

	// ReplicationBackupActivationTargetFailoverEnvironmentKNetapp captures enum value "kNetapp"
	ReplicationBackupActivationTargetFailoverEnvironmentKNetapp string = "kNetapp"

	// ReplicationBackupActivationTargetFailoverEnvironmentKGenericNas captures enum value "kGenericNas"
	ReplicationBackupActivationTargetFailoverEnvironmentKGenericNas string = "kGenericNas"

	// ReplicationBackupActivationTargetFailoverEnvironmentKIsilon captures enum value "kIsilon"
	ReplicationBackupActivationTargetFailoverEnvironmentKIsilon string = "kIsilon"

	// ReplicationBackupActivationTargetFailoverEnvironmentKFlashBlade captures enum value "kFlashBlade"
	ReplicationBackupActivationTargetFailoverEnvironmentKFlashBlade string = "kFlashBlade"

	// ReplicationBackupActivationTargetFailoverEnvironmentKPure captures enum value "kPure"
	ReplicationBackupActivationTargetFailoverEnvironmentKPure string = "kPure"

	// ReplicationBackupActivationTargetFailoverEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	ReplicationBackupActivationTargetFailoverEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// ReplicationBackupActivationTargetFailoverEnvironmentKSQL captures enum value "kSQL"
	ReplicationBackupActivationTargetFailoverEnvironmentKSQL string = "kSQL"

	// ReplicationBackupActivationTargetFailoverEnvironmentKExchange captures enum value "kExchange"
	ReplicationBackupActivationTargetFailoverEnvironmentKExchange string = "kExchange"

	// ReplicationBackupActivationTargetFailoverEnvironmentKAD captures enum value "kAD"
	ReplicationBackupActivationTargetFailoverEnvironmentKAD string = "kAD"

	// ReplicationBackupActivationTargetFailoverEnvironmentKOracle captures enum value "kOracle"
	ReplicationBackupActivationTargetFailoverEnvironmentKOracle string = "kOracle"

	// ReplicationBackupActivationTargetFailoverEnvironmentKView captures enum value "kView"
	ReplicationBackupActivationTargetFailoverEnvironmentKView string = "kView"

	// ReplicationBackupActivationTargetFailoverEnvironmentKRemoteAdapter captures enum value "kRemoteAdapter"
	ReplicationBackupActivationTargetFailoverEnvironmentKRemoteAdapter string = "kRemoteAdapter"

	// ReplicationBackupActivationTargetFailoverEnvironmentKO365 captures enum value "kO365"
	ReplicationBackupActivationTargetFailoverEnvironmentKO365 string = "kO365"

	// ReplicationBackupActivationTargetFailoverEnvironmentKO365PublicFolders captures enum value "kO365PublicFolders"
	ReplicationBackupActivationTargetFailoverEnvironmentKO365PublicFolders string = "kO365PublicFolders"

	// ReplicationBackupActivationTargetFailoverEnvironmentKO365Teams captures enum value "kO365Teams"
	ReplicationBackupActivationTargetFailoverEnvironmentKO365Teams string = "kO365Teams"

	// ReplicationBackupActivationTargetFailoverEnvironmentKO365Group captures enum value "kO365Group"
	ReplicationBackupActivationTargetFailoverEnvironmentKO365Group string = "kO365Group"

	// ReplicationBackupActivationTargetFailoverEnvironmentKO365Exchange captures enum value "kO365Exchange"
	ReplicationBackupActivationTargetFailoverEnvironmentKO365Exchange string = "kO365Exchange"

	// ReplicationBackupActivationTargetFailoverEnvironmentKO365OneDrive captures enum value "kO365OneDrive"
	ReplicationBackupActivationTargetFailoverEnvironmentKO365OneDrive string = "kO365OneDrive"

	// ReplicationBackupActivationTargetFailoverEnvironmentKO365Sharepoint captures enum value "kO365Sharepoint"
	ReplicationBackupActivationTargetFailoverEnvironmentKO365Sharepoint string = "kO365Sharepoint"

	// ReplicationBackupActivationTargetFailoverEnvironmentKKubernetes captures enum value "kKubernetes"
	ReplicationBackupActivationTargetFailoverEnvironmentKKubernetes string = "kKubernetes"

	// ReplicationBackupActivationTargetFailoverEnvironmentKCassandra captures enum value "kCassandra"
	ReplicationBackupActivationTargetFailoverEnvironmentKCassandra string = "kCassandra"

	// ReplicationBackupActivationTargetFailoverEnvironmentKMongoDB captures enum value "kMongoDB"
	ReplicationBackupActivationTargetFailoverEnvironmentKMongoDB string = "kMongoDB"

	// ReplicationBackupActivationTargetFailoverEnvironmentKCouchbase captures enum value "kCouchbase"
	ReplicationBackupActivationTargetFailoverEnvironmentKCouchbase string = "kCouchbase"

	// ReplicationBackupActivationTargetFailoverEnvironmentKHdfs captures enum value "kHdfs"
	ReplicationBackupActivationTargetFailoverEnvironmentKHdfs string = "kHdfs"

	// ReplicationBackupActivationTargetFailoverEnvironmentKHive captures enum value "kHive"
	ReplicationBackupActivationTargetFailoverEnvironmentKHive string = "kHive"

	// ReplicationBackupActivationTargetFailoverEnvironmentKHBase captures enum value "kHBase"
	ReplicationBackupActivationTargetFailoverEnvironmentKHBase string = "kHBase"

	// ReplicationBackupActivationTargetFailoverEnvironmentKSAPHANA captures enum value "kSAPHANA"
	ReplicationBackupActivationTargetFailoverEnvironmentKSAPHANA string = "kSAPHANA"

	// ReplicationBackupActivationTargetFailoverEnvironmentKUDA captures enum value "kUDA"
	ReplicationBackupActivationTargetFailoverEnvironmentKUDA string = "kUDA"

	// ReplicationBackupActivationTargetFailoverEnvironmentKSfdc captures enum value "kSfdc"
	ReplicationBackupActivationTargetFailoverEnvironmentKSfdc string = "kSfdc"

	// ReplicationBackupActivationTargetFailoverEnvironmentKO365ExchangeCSM captures enum value "kO365ExchangeCSM"
	ReplicationBackupActivationTargetFailoverEnvironmentKO365ExchangeCSM string = "kO365ExchangeCSM"

	// ReplicationBackupActivationTargetFailoverEnvironmentKO365OneDriveCSM captures enum value "kO365OneDriveCSM"
	ReplicationBackupActivationTargetFailoverEnvironmentKO365OneDriveCSM string = "kO365OneDriveCSM"

	// ReplicationBackupActivationTargetFailoverEnvironmentKO365SharepointCSM captures enum value "kO365SharepointCSM"
	ReplicationBackupActivationTargetFailoverEnvironmentKO365SharepointCSM string = "kO365SharepointCSM"
)

// prop value enum
func (m *ReplicationBackupActivation) validateTargetFailoverEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, replicationBackupActivationTypeTargetFailoverEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReplicationBackupActivation) validateTargetFailoverEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetFailoverEnvironment) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetFailoverEnvironmentEnum("targetFailoverEnvironment", "body", *m.TargetFailoverEnvironment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this replication backup activation based on the context it is used
func (m *ReplicationBackupActivation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationBackupActivation) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationBackupActivation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationBackupActivation) UnmarshalBinary(b []byte) error {
	var res ReplicationBackupActivation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
