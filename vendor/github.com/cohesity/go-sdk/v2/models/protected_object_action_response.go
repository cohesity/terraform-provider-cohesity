// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtectedObjectActionResponse Specifies the response upon performing an action on protected objects.
//
// swagger:model ProtectedObjectActionResponse
type ProtectedObjectActionResponse struct {

	// Specifies the action type to be performed on object getting protected. Based on selected action, provide the action params.
	// Enum: ["Pause","Resume","UnProtect","ProtectNow"]
	Action string `json:"action,omitempty"`

	// Specifies the list of objects on which the provided action was performed.
	Objects []*ActionObjectLevelResponse `json:"objects"`
}

// Validate validates this protected object action response
func (m *ProtectedObjectActionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var protectedObjectActionResponseTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pause","Resume","UnProtect","ProtectNow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protectedObjectActionResponseTypeActionPropEnum = append(protectedObjectActionResponseTypeActionPropEnum, v)
	}
}

const (

	// ProtectedObjectActionResponseActionPause captures enum value "Pause"
	ProtectedObjectActionResponseActionPause string = "Pause"

	// ProtectedObjectActionResponseActionResume captures enum value "Resume"
	ProtectedObjectActionResponseActionResume string = "Resume"

	// ProtectedObjectActionResponseActionUnProtect captures enum value "UnProtect"
	ProtectedObjectActionResponseActionUnProtect string = "UnProtect"

	// ProtectedObjectActionResponseActionProtectNow captures enum value "ProtectNow"
	ProtectedObjectActionResponseActionProtectNow string = "ProtectNow"
)

// prop value enum
func (m *ProtectedObjectActionResponse) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, protectedObjectActionResponseTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProtectedObjectActionResponse) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *ProtectedObjectActionResponse) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this protected object action response based on the context it is used
func (m *ProtectedObjectActionResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectedObjectActionResponse) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectedObjectActionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectedObjectActionResponse) UnmarshalBinary(b []byte) error {
	var res ProtectedObjectActionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
