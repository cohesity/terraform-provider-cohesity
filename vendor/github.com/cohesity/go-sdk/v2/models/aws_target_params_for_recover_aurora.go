// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AwsTargetParamsForRecoverAurora AWS Aurora Recovery Target Params
//
// Specifies the parameters for an AWS recovery target.
//
// swagger:model AwsTargetParamsForRecoverAurora
type AwsTargetParamsForRecoverAurora struct {

	// Specifies the Aurora params.
	AuroraConfig *AuroraConfig `json:"auroraConfig,omitempty"`

	// Specifies the recovery target configuration if recovery has to be done to a different location which is different from original source or to original Source with different configuration. If not specified, then the recovery of the vms will be performed to original location with all configuration parameters retained.
	RecoveryTargetConfig *AwsAuroraRecoveryTargetConfig `json:"recoveryTargetConfig,omitempty"`
}

// Validate validates this aws target params for recover aurora
func (m *AwsTargetParamsForRecoverAurora) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuroraConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryTargetConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsTargetParamsForRecoverAurora) validateAuroraConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AuroraConfig) { // not required
		return nil
	}

	if m.AuroraConfig != nil {
		if err := m.AuroraConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AwsTargetParamsForRecoverAurora) validateRecoveryTargetConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryTargetConfig) { // not required
		return nil
	}

	if m.RecoveryTargetConfig != nil {
		if err := m.RecoveryTargetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveryTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveryTargetConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws target params for recover aurora based on the context it is used
func (m *AwsTargetParamsForRecoverAurora) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuroraConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveryTargetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsTargetParamsForRecoverAurora) contextValidateAuroraConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AuroraConfig != nil {

		if swag.IsZero(m.AuroraConfig) { // not required
			return nil
		}

		if err := m.AuroraConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AwsTargetParamsForRecoverAurora) contextValidateRecoveryTargetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoveryTargetConfig != nil {

		if swag.IsZero(m.RecoveryTargetConfig) { // not required
			return nil
		}

		if err := m.RecoveryTargetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveryTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveryTargetConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsTargetParamsForRecoverAurora) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsTargetParamsForRecoverAurora) UnmarshalBinary(b []byte) error {
	var res AwsTargetParamsForRecoverAurora
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
