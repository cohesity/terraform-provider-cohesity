// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelParam Specifies the parameters to recover a Microsoft 365 Teams Channel.
//
// swagger:model ChannelParam
type ChannelParam struct {

	// Specifies the Channel id.
	// Required: true
	ID *string `json:"id"`

	// Specifies the Channel name.
	Name *string `json:"name,omitempty"`

	// Specifies the type of channel public or private
	// Enum: ["Private","Public"]
	Type string `json:"type,omitempty"`

	// Specifies whether to recover the whole Microsoft 365 Channel.
	// Required: true
	RecoverEntireChannel *bool `json:"recoverEntireChannel"`

	// Specifies the list of doclibs of the Channel to recover. It is populated iff recoverEntireChannel is false.
	DocumentLibraryParams []*OneDriveParam `json:"documentLibraryParams"`
}

// Validate validates this channel param
func (m *ChannelParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverEntireChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentLibraryParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelParam) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var channelParamTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Private","Public"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		channelParamTypeTypePropEnum = append(channelParamTypeTypePropEnum, v)
	}
}

const (

	// ChannelParamTypePrivate captures enum value "Private"
	ChannelParamTypePrivate string = "Private"

	// ChannelParamTypePublic captures enum value "Public"
	ChannelParamTypePublic string = "Public"
)

// prop value enum
func (m *ChannelParam) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, channelParamTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChannelParam) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ChannelParam) validateRecoverEntireChannel(formats strfmt.Registry) error {

	if err := validate.Required("recoverEntireChannel", "body", m.RecoverEntireChannel); err != nil {
		return err
	}

	return nil
}

func (m *ChannelParam) validateDocumentLibraryParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DocumentLibraryParams) { // not required
		return nil
	}

	for i := 0; i < len(m.DocumentLibraryParams); i++ {
		if swag.IsZero(m.DocumentLibraryParams[i]) { // not required
			continue
		}

		if m.DocumentLibraryParams[i] != nil {
			if err := m.DocumentLibraryParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documentLibraryParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("documentLibraryParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this channel param based on the context it is used
func (m *ChannelParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDocumentLibraryParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelParam) contextValidateDocumentLibraryParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DocumentLibraryParams); i++ {

		if m.DocumentLibraryParams[i] != nil {

			if swag.IsZero(m.DocumentLibraryParams[i]) { // not required
				return nil
			}

			if err := m.DocumentLibraryParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documentLibraryParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("documentLibraryParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelParam) UnmarshalBinary(b []byte) error {
	var res ChannelParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
