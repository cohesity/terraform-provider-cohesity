// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodePowerOperation NodePowerOperation
//
// swagger:model NodePowerOperation
type NodePowerOperation struct {

	// The operation clould be poweroff, reboot.
	// Required: true
	// Enum: ["poweroff","reboot"]
	Operation *string `json:"operation"`

	// Id of the node to do the specified operation.
	NodeID *int64 `json:"nodeId,omitempty"`
}

// Validate validates this node power operation
func (m *NodePowerOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nodePowerOperationTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["poweroff","reboot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodePowerOperationTypeOperationPropEnum = append(nodePowerOperationTypeOperationPropEnum, v)
	}
}

const (

	// NodePowerOperationOperationPoweroff captures enum value "poweroff"
	NodePowerOperationOperationPoweroff string = "poweroff"

	// NodePowerOperationOperationReboot captures enum value "reboot"
	NodePowerOperationOperationReboot string = "reboot"
)

// prop value enum
func (m *NodePowerOperation) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodePowerOperationTypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NodePowerOperation) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", *m.Operation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this node power operation based on context it is used
func (m *NodePowerOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodePowerOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodePowerOperation) UnmarshalBinary(b []byte) error {
	var res NodePowerOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
