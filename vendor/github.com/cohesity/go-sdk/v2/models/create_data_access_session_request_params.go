// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDataAccessSessionRequestParams Create Data Access Session request params.
//
// Specifies the request parameters to create a data access session.
//
// swagger:model CreateDataAccessSessionRequestParams
type CreateDataAccessSessionRequestParams struct {

	// Specifies the entity id of the source.
	// Required: true
	SourceID *int64 `json:"sourceId"`

	// Specifies information about the backup snapshot and object whose data/metadata needs to be accessed.
	// Required: true
	CurrentSnapshotInfo struct {
		DataAccessSnapshotInfo
	} `json:"currentSnapshotInfo"`

	// Specifies information about the base snapshot of an object.
	BaseSnapshotInfo struct {
		DataAccessSnapshotInfo
	} `json:"baseSnapshotInfo,omitempty"`

	// Specifies a user friendly name of the data access session to be created.
	// Required: true
	SessionName *string `json:"sessionName"`
}

// Validate validates this create data access session request params
func (m *CreateDataAccessSessionRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentSnapshotInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseSnapshotInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDataAccessSessionRequestParams) validateSourceID(formats strfmt.Registry) error {

	if err := validate.Required("sourceId", "body", m.SourceID); err != nil {
		return err
	}

	return nil
}

func (m *CreateDataAccessSessionRequestParams) validateCurrentSnapshotInfo(formats strfmt.Registry) error {

	return nil
}

func (m *CreateDataAccessSessionRequestParams) validateBaseSnapshotInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseSnapshotInfo) { // not required
		return nil
	}

	return nil
}

func (m *CreateDataAccessSessionRequestParams) validateSessionName(formats strfmt.Registry) error {

	if err := validate.Required("sessionName", "body", m.SessionName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create data access session request params based on the context it is used
func (m *CreateDataAccessSessionRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentSnapshotInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBaseSnapshotInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDataAccessSessionRequestParams) contextValidateCurrentSnapshotInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CreateDataAccessSessionRequestParams) contextValidateBaseSnapshotInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *CreateDataAccessSessionRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDataAccessSessionRequestParams) UnmarshalBinary(b []byte) error {
	var res CreateDataAccessSessionRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
