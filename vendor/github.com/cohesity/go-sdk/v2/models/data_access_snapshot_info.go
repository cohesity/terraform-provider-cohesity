// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataAccessSnapshotInfo Snapshot Information
//
// Specifies the snapshot information.
//
// swagger:model DataAccessSnapshotInfo
type DataAccessSnapshotInfo struct {

	// Specifies the id of the object snapshot.
	// Required: true
	SnapshotID *string `json:"snapshotId"`

	// Specifies the environment of the source.
	// Required: true
	Environment *string `json:"environment"`

	// Specifies the time to which the object needs to be restored. If this is not specified the object is restore from the base snapshot identified by the run_start_time_usecs.
	RestoreTimeUsecs *int64 `json:"restoreTimeUsecs,omitempty"`
}

// Validate validates this data access snapshot info
func (m *DataAccessSnapshotInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnapshotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataAccessSnapshotInfo) validateSnapshotID(formats strfmt.Registry) error {

	if err := validate.Required("snapshotId", "body", m.SnapshotID); err != nil {
		return err
	}

	return nil
}

func (m *DataAccessSnapshotInfo) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data access snapshot info based on context it is used
func (m *DataAccessSnapshotInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataAccessSnapshotInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataAccessSnapshotInfo) UnmarshalBinary(b []byte) error {
	var res DataAccessSnapshotInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
