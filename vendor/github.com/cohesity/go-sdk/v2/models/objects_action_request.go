// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectsActionRequest Specifies the type of the action need to be performed on given set of objects.
//
// swagger:model ObjectsActionRequest
type ObjectsActionRequest struct {

	// Specifies the action type that need to be performed.
	// Enum: ["Link","UnLink"]
	Action *string `json:"action,omitempty"`

	// Specifies the link type for the link/unlink action.
	// Enum: ["Replication","FailoverRestore","VmMigration"]
	LinkType *string `json:"linkType,omitempty"`

	// Specifies the parameters for object linking.
	LinkParams *ObjectLinkingParams `json:"linkParams,omitempty"`

	// Specifies the parameters for object unlinking.
	UnLinkParams *ObjectUnLinkingParams `json:"unLinkParams,omitempty"`
}

// Validate validates this objects action request
func (m *ObjectsActionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnLinkParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var objectsActionRequestTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Link","UnLink"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectsActionRequestTypeActionPropEnum = append(objectsActionRequestTypeActionPropEnum, v)
	}
}

const (

	// ObjectsActionRequestActionLink captures enum value "Link"
	ObjectsActionRequestActionLink string = "Link"

	// ObjectsActionRequestActionUnLink captures enum value "UnLink"
	ObjectsActionRequestActionUnLink string = "UnLink"
)

// prop value enum
func (m *ObjectsActionRequest) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectsActionRequestTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectsActionRequest) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

var objectsActionRequestTypeLinkTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Replication","FailoverRestore","VmMigration"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectsActionRequestTypeLinkTypePropEnum = append(objectsActionRequestTypeLinkTypePropEnum, v)
	}
}

const (

	// ObjectsActionRequestLinkTypeReplication captures enum value "Replication"
	ObjectsActionRequestLinkTypeReplication string = "Replication"

	// ObjectsActionRequestLinkTypeFailoverRestore captures enum value "FailoverRestore"
	ObjectsActionRequestLinkTypeFailoverRestore string = "FailoverRestore"

	// ObjectsActionRequestLinkTypeVMMigration captures enum value "VmMigration"
	ObjectsActionRequestLinkTypeVMMigration string = "VmMigration"
)

// prop value enum
func (m *ObjectsActionRequest) validateLinkTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectsActionRequestTypeLinkTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectsActionRequest) validateLinkType(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLinkTypeEnum("linkType", "body", *m.LinkType); err != nil {
		return err
	}

	return nil
}

func (m *ObjectsActionRequest) validateLinkParams(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkParams) { // not required
		return nil
	}

	if m.LinkParams != nil {
		if err := m.LinkParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linkParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linkParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectsActionRequest) validateUnLinkParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UnLinkParams) { // not required
		return nil
	}

	if m.UnLinkParams != nil {
		if err := m.UnLinkParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unLinkParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unLinkParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this objects action request based on the context it is used
func (m *ObjectsActionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinkParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnLinkParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectsActionRequest) contextValidateLinkParams(ctx context.Context, formats strfmt.Registry) error {

	if m.LinkParams != nil {

		if swag.IsZero(m.LinkParams) { // not required
			return nil
		}

		if err := m.LinkParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linkParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linkParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectsActionRequest) contextValidateUnLinkParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UnLinkParams != nil {

		if swag.IsZero(m.UnLinkParams) { // not required
			return nil
		}

		if err := m.UnLinkParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unLinkParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unLinkParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectsActionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectsActionRequest) UnmarshalBinary(b []byte) error {
	var res ObjectsActionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
