// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MfaConfigInfo Holds the MFA configuration to be returned or stored.
//
// swagger:model MfaConfigInfo
type MfaConfigInfo struct {

	// Specifies whether MFA is enabled on a cluster level.
	Enabled *bool `json:"enabled,omitempty"`

	// Specifies the list of mechanism to receive the OTP code.
	AuthenticationTypes []string `json:"authenticationTypes"`

	// Specifies whether user MFA setting needs to be retained.
	RetainUserMfaSettings *bool `json:"retainUserMfaSettings,omitempty"`
}

// Validate validates this mfa config info
func (m *MfaConfigInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mfaConfigInfoAuthenticationTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","totp","salesforce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mfaConfigInfoAuthenticationTypesItemsEnum = append(mfaConfigInfoAuthenticationTypesItemsEnum, v)
	}
}

func (m *MfaConfigInfo) validateAuthenticationTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mfaConfigInfoAuthenticationTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MfaConfigInfo) validateAuthenticationTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.AuthenticationTypes); i++ {

		// value enum
		if err := m.validateAuthenticationTypesItemsEnum("authenticationTypes"+"."+strconv.Itoa(i), "body", m.AuthenticationTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this mfa config info based on context it is used
func (m *MfaConfigInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MfaConfigInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MfaConfigInfo) UnmarshalBinary(b []byte) error {
	var res MfaConfigInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
