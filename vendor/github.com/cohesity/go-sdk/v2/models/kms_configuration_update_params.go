// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KmsConfigurationUpdateParams Parameters to update key management system(KMS) on the cluster.
//
// swagger:model KmsConfigurationUpdateParams
type KmsConfigurationUpdateParams struct {

	// AWS KMS configuration.
	AwsKmsParams *AwsKmsConfigurationUpdateParams `json:"awsKmsParams,omitempty"`

	KmsConfigurationAddUpdateParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *KmsConfigurationUpdateParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AwsKmsParams *AwsKmsConfigurationUpdateParams `json:"awsKmsParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AwsKmsParams = dataAO0.AwsKmsParams

	// AO1
	var aO1 KmsConfigurationAddUpdateParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.KmsConfigurationAddUpdateParams = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m KmsConfigurationUpdateParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		AwsKmsParams *AwsKmsConfigurationUpdateParams `json:"awsKmsParams,omitempty"`
	}

	dataAO0.AwsKmsParams = m.AwsKmsParams

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.KmsConfigurationAddUpdateParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this kms configuration update params
func (m *KmsConfigurationUpdateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsKmsParams(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with KmsConfigurationAddUpdateParams
	if err := m.KmsConfigurationAddUpdateParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmsConfigurationUpdateParams) validateAwsKmsParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsKmsParams) { // not required
		return nil
	}

	if m.AwsKmsParams != nil {
		if err := m.AwsKmsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsKmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsKmsParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kms configuration update params based on the context it is used
func (m *KmsConfigurationUpdateParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsKmsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with KmsConfigurationAddUpdateParams
	if err := m.KmsConfigurationAddUpdateParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmsConfigurationUpdateParams) contextValidateAwsKmsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsKmsParams != nil {

		if swag.IsZero(m.AwsKmsParams) { // not required
			return nil
		}

		if err := m.AwsKmsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsKmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsKmsParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KmsConfigurationUpdateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KmsConfigurationUpdateParams) UnmarshalBinary(b []byte) error {
	var res KmsConfigurationUpdateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
