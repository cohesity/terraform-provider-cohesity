// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverAzureFileAndFolderParams Recover Azure Files and Folders Params.
//
// Specifies the parameters to recover Azure files and folders.
//
// swagger:model RecoverAzureFileAndFolderParams
type RecoverAzureFileAndFolderParams struct {

	// Specifies the info about the files and folders to be recovered.
	// Required: true
	FilesAndFolders []*CommonRecoverFileAndFolderInfo `json:"filesAndFolders"`

	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	// Required: true
	// Enum: ["kAzure"]
	TargetEnvironment *string `json:"targetEnvironment"`

	// Specifies the params for recovering to an Azure target.
	AzureTargetParams *AzureTargetParamsForRecoverFileAndFolder `json:"azureTargetParams,omitempty"`
}

// Validate validates this recover azure file and folder params
func (m *RecoverAzureFileAndFolderParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilesAndFolders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverAzureFileAndFolderParams) validateFilesAndFolders(formats strfmt.Registry) error {

	if err := validate.Required("filesAndFolders", "body", m.FilesAndFolders); err != nil {
		return err
	}

	for i := 0; i < len(m.FilesAndFolders); i++ {
		if swag.IsZero(m.FilesAndFolders[i]) { // not required
			continue
		}

		if m.FilesAndFolders[i] != nil {
			if err := m.FilesAndFolders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filesAndFolders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filesAndFolders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var recoverAzureFileAndFolderParamsTypeTargetEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAzure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverAzureFileAndFolderParamsTypeTargetEnvironmentPropEnum = append(recoverAzureFileAndFolderParamsTypeTargetEnvironmentPropEnum, v)
	}
}

const (

	// RecoverAzureFileAndFolderParamsTargetEnvironmentKAzure captures enum value "kAzure"
	RecoverAzureFileAndFolderParamsTargetEnvironmentKAzure string = "kAzure"
)

// prop value enum
func (m *RecoverAzureFileAndFolderParams) validateTargetEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverAzureFileAndFolderParamsTypeTargetEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverAzureFileAndFolderParams) validateTargetEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("targetEnvironment", "body", m.TargetEnvironment); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetEnvironmentEnum("targetEnvironment", "body", *m.TargetEnvironment); err != nil {
		return err
	}

	return nil
}

func (m *RecoverAzureFileAndFolderParams) validateAzureTargetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureTargetParams) { // not required
		return nil
	}

	if m.AzureTargetParams != nil {
		if err := m.AzureTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureTargetParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover azure file and folder params based on the context it is used
func (m *RecoverAzureFileAndFolderParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilesAndFolders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverAzureFileAndFolderParams) contextValidateFilesAndFolders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilesAndFolders); i++ {

		if m.FilesAndFolders[i] != nil {

			if swag.IsZero(m.FilesAndFolders[i]) { // not required
				return nil
			}

			if err := m.FilesAndFolders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filesAndFolders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("filesAndFolders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverAzureFileAndFolderParams) contextValidateAzureTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureTargetParams != nil {

		if swag.IsZero(m.AzureTargetParams) { // not required
			return nil
		}

		if err := m.AzureTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureTargetParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverAzureFileAndFolderParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverAzureFileAndFolderParams) UnmarshalBinary(b []byte) error {
	var res RecoverAzureFileAndFolderParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
