// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FilerLifecycleRuleFilter Specifies the filter used to identify files that a Lifecycle Rule applies to.
//
// swagger:model FilerLifecycleRuleFilter
type FilerLifecycleRuleFilter struct {

	// Specifies the file's selection based on their extension. Eg: .pdf, .txt, etc. Note: Provide extensions here with the initial '.' character, example .pdf and not pdf. Extensions are case-insensitive, i.e. .pdf extension in filter will delete all files have .pdf, .PDF, .pDF, etc.
	FileExtensions []string `json:"fileExtensions"`

	// Specifies the file's selection based on their size.
	FileSize *FilerLifecycleSizeFilter `json:"fileSize,omitempty"`
}

// Validate validates this filer lifecycle rule filter
func (m *FilerLifecycleRuleFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilerLifecycleRuleFilter) validateFileSize(formats strfmt.Registry) error {
	if swag.IsZero(m.FileSize) { // not required
		return nil
	}

	if m.FileSize != nil {
		if err := m.FileSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileSize")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this filer lifecycle rule filter based on the context it is used
func (m *FilerLifecycleRuleFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilerLifecycleRuleFilter) contextValidateFileSize(ctx context.Context, formats strfmt.Registry) error {

	if m.FileSize != nil {

		if swag.IsZero(m.FileSize) { // not required
			return nil
		}

		if err := m.FileSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fileSize")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FilerLifecycleRuleFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilerLifecycleRuleFilter) UnmarshalBinary(b []byte) error {
	var res FilerLifecycleRuleFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
