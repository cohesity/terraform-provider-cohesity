// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Role Specifies a Role.
//
// swagger:model Role
type Role struct {
	CreateRoleParameters

	// Specifies the Role label.
	Label *string `json:"label,omitempty"`

	// Specifies the timestamp when the Role is created in milliseconds.
	CreatedTimestampMsecs *int64 `json:"createdTimestampMsecs,omitempty"`

	// Specifies the timestamp when the Role is last updated in milliseconds.
	LastUpdatedTimestampMsecs *int64 `json:"lastUpdatedTimestampMsecs,omitempty"`

	// Specifies if the Role is created by user.
	IsUserCreatedRole *bool `json:"isUserCreatedRole,omitempty"`

	// Specifies the list of tenant ids who have access to this Role.
	TenantIds []string `json:"tenantIds"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Role) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CreateRoleParameters
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CreateRoleParameters = aO0

	// AO1
	var dataAO1 struct {
		Label *string `json:"label,omitempty"`

		CreatedTimestampMsecs *int64 `json:"createdTimestampMsecs,omitempty"`

		LastUpdatedTimestampMsecs *int64 `json:"lastUpdatedTimestampMsecs,omitempty"`

		IsUserCreatedRole *bool `json:"isUserCreatedRole,omitempty"`

		TenantIds []string `json:"tenantIds"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Label = dataAO1.Label

	m.CreatedTimestampMsecs = dataAO1.CreatedTimestampMsecs

	m.LastUpdatedTimestampMsecs = dataAO1.LastUpdatedTimestampMsecs

	m.IsUserCreatedRole = dataAO1.IsUserCreatedRole

	m.TenantIds = dataAO1.TenantIds

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Role) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CreateRoleParameters)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Label *string `json:"label,omitempty"`

		CreatedTimestampMsecs *int64 `json:"createdTimestampMsecs,omitempty"`

		LastUpdatedTimestampMsecs *int64 `json:"lastUpdatedTimestampMsecs,omitempty"`

		IsUserCreatedRole *bool `json:"isUserCreatedRole,omitempty"`

		TenantIds []string `json:"tenantIds"`
	}

	dataAO1.Label = m.Label

	dataAO1.CreatedTimestampMsecs = m.CreatedTimestampMsecs

	dataAO1.LastUpdatedTimestampMsecs = m.LastUpdatedTimestampMsecs

	dataAO1.IsUserCreatedRole = m.IsUserCreatedRole

	dataAO1.TenantIds = m.TenantIds

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this role
func (m *Role) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CreateRoleParameters
	if err := m.CreateRoleParameters.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this role based on the context it is used
func (m *Role) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CreateRoleParameters
	if err := m.CreateRoleParameters.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Role) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Role) UnmarshalBinary(b []byte) error {
	var res Role
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
