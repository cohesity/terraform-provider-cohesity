// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeGroup Node Group
//
// Specifies common fields required to define Node Group.
//
// swagger:model NodeGroup
type NodeGroup struct {

	// Specifies the name of the Node Group.
	// Required: true
	Name *string `json:"name"`

	// Node Ids
	//
	// List of Node Ids that are part of this node group.
	NodeIds []int64 `json:"node-ids"`

	// Id of the node group.
	ID *int32 `json:"id,omitempty"`

	// Type of the node group.
	Type *int32 `json:"type,omitempty"`

	// BGP config information.
	BgpInstance *BgpInstance `json:"bgpInstance,omitempty"`

	// Subnet information in node group.
	SubnetInfo *SubnetInfo `json:"subnetInfo,omitempty"`

	// DNS servers information in node group.
	DNSServersInfo *DNSServersInfo `json:"dnsServersInfo,omitempty"`
}

// Validate validates this node group
func (m *NodeGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBgpInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSServersInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NodeGroup) validateBgpInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.BgpInstance) { // not required
		return nil
	}

	if m.BgpInstance != nil {
		if err := m.BgpInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bgpInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bgpInstance")
			}
			return err
		}
	}

	return nil
}

func (m *NodeGroup) validateSubnetInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetInfo) { // not required
		return nil
	}

	if m.SubnetInfo != nil {
		if err := m.SubnetInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *NodeGroup) validateDNSServersInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSServersInfo) { // not required
		return nil
	}

	if m.DNSServersInfo != nil {
		if err := m.DNSServersInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsServersInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsServersInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this node group based on the context it is used
func (m *NodeGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBgpInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNSServersInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeGroup) contextValidateBgpInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.BgpInstance != nil {

		if swag.IsZero(m.BgpInstance) { // not required
			return nil
		}

		if err := m.BgpInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bgpInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bgpInstance")
			}
			return err
		}
	}

	return nil
}

func (m *NodeGroup) contextValidateSubnetInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SubnetInfo != nil {

		if swag.IsZero(m.SubnetInfo) { // not required
			return nil
		}

		if err := m.SubnetInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *NodeGroup) contextValidateDNSServersInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DNSServersInfo != nil {

		if swag.IsZero(m.DNSServersInfo) { // not required
			return nil
		}

		if err := m.DNSServersInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsServersInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsServersInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeGroup) UnmarshalBinary(b []byte) error {
	var res NodeGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
