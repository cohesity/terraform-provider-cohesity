// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetappObjectProtectionParams Specifies the parameters which are specific to Netapp object protection.
//
// swagger:model NetappObjectProtectionParams
type NetappObjectProtectionParams struct {

	// Specifies the protocol of the NAS device being backed up.
	// Enum: ["kNoProtocol","kNfs3","kNfs4_1","kCifs1","kCifs2","kCifs3"]
	Protocol *string `json:"protocol,omitempty"`

	// Specifies the objects to be excluded in the Protection.
	// Unique: true
	ExcludeObjectIds []int64 `json:"excludeObjectIds"`

	// Specifies the incremental and full snapshot label for Data-Protect Netapp Volumes backup. If field is set , incremental and full snapshot label has to be provided. If field is not set, the snapshot label will be automatically set using timestamp.
	SnapshotLabel *SnapshotLabel `json:"snapshotLabel,omitempty"`

	// Specifies that snapshot label is not set for Data-Protect Netapp Volumes backup. If field is set to true, existing oldest snapshot is used for backup and subsequent incremental will be selected in ascending order of snapshot create time on the source. If snapshot label is set, this field is set to false.
	BackupExistingSnapshot *bool `json:"backupExistingSnapshot,omitempty"`

	// Specifies the source snapshots to be taken even if there is a pending run in a protection group.
	ContinuousSnapshots *ContinuousSnapshotParams `json:"continuousSnapshots,omitempty"`
}

// Validate validates this netapp object protection params
func (m *NetappObjectProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeObjectIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContinuousSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var netappObjectProtectionParamsTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNoProtocol","kNfs3","kNfs4_1","kCifs1","kCifs2","kCifs3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netappObjectProtectionParamsTypeProtocolPropEnum = append(netappObjectProtectionParamsTypeProtocolPropEnum, v)
	}
}

const (

	// NetappObjectProtectionParamsProtocolKNoProtocol captures enum value "kNoProtocol"
	NetappObjectProtectionParamsProtocolKNoProtocol string = "kNoProtocol"

	// NetappObjectProtectionParamsProtocolKNfs3 captures enum value "kNfs3"
	NetappObjectProtectionParamsProtocolKNfs3 string = "kNfs3"

	// NetappObjectProtectionParamsProtocolKNfs41 captures enum value "kNfs4_1"
	NetappObjectProtectionParamsProtocolKNfs41 string = "kNfs4_1"

	// NetappObjectProtectionParamsProtocolKCifs1 captures enum value "kCifs1"
	NetappObjectProtectionParamsProtocolKCifs1 string = "kCifs1"

	// NetappObjectProtectionParamsProtocolKCifs2 captures enum value "kCifs2"
	NetappObjectProtectionParamsProtocolKCifs2 string = "kCifs2"

	// NetappObjectProtectionParamsProtocolKCifs3 captures enum value "kCifs3"
	NetappObjectProtectionParamsProtocolKCifs3 string = "kCifs3"
)

// prop value enum
func (m *NetappObjectProtectionParams) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, netappObjectProtectionParamsTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetappObjectProtectionParams) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *NetappObjectProtectionParams) validateExcludeObjectIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeObjectIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludeObjectIds", "body", m.ExcludeObjectIds); err != nil {
		return err
	}

	return nil
}

func (m *NetappObjectProtectionParams) validateSnapshotLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotLabel) { // not required
		return nil
	}

	if m.SnapshotLabel != nil {
		if err := m.SnapshotLabel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotLabel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotLabel")
			}
			return err
		}
	}

	return nil
}

func (m *NetappObjectProtectionParams) validateContinuousSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.ContinuousSnapshots) { // not required
		return nil
	}

	if m.ContinuousSnapshots != nil {
		if err := m.ContinuousSnapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuousSnapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("continuousSnapshots")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this netapp object protection params based on the context it is used
func (m *NetappObjectProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSnapshotLabel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContinuousSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetappObjectProtectionParams) contextValidateSnapshotLabel(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotLabel != nil {

		if swag.IsZero(m.SnapshotLabel) { // not required
			return nil
		}

		if err := m.SnapshotLabel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotLabel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotLabel")
			}
			return err
		}
	}

	return nil
}

func (m *NetappObjectProtectionParams) contextValidateContinuousSnapshots(ctx context.Context, formats strfmt.Registry) error {

	if m.ContinuousSnapshots != nil {

		if swag.IsZero(m.ContinuousSnapshots) { // not required
			return nil
		}

		if err := m.ContinuousSnapshots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuousSnapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("continuousSnapshots")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetappObjectProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetappObjectProtectionParams) UnmarshalBinary(b []byte) error {
	var res NetappObjectProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
