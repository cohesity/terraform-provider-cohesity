// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageArraySnapshotConfig Storage Snapshot Mgmt throttling Policy Config.
//
// Specifies the storage array snapshot config for individual volume/lun.
//
// swagger:model StorageArraySnapshotConfig
type StorageArraySnapshotConfig struct {

	// Specifies whether we will use storage snapshot managmement max snapshots config to all volumes/luns that are part of the registered entity.
	MaxSnapshotsConfigEnabled *bool `json:"maxSnapshotsConfigEnabled,omitempty"`

	// Specifies whether we will use storage snapshot managmement max space config to all volumes/luns that are part of the registered entity.
	MaxSpaceConfigEnabled *bool `json:"maxSpaceConfigEnabled,omitempty"`

	// Specifies the max space threshold configuration for storage snapshots.
	MaxSpaceConfig *StorageArraySnapshotMaxSpaceConfig `json:"maxSpaceConfig,omitempty"`

	// Specifies the max snapshots threshold configuration taken for storage snapshots.
	MaxSnapshotConfig *StorageArraySnapshotMaxSnapshotConfig `json:"maxSnapshotConfig,omitempty"`

	// Specifies the list of storage array snapshot management throttling policies for individual volume/lun.
	StorageArraySnapshotThrottlingPolicies []*StorageArraySnapshotThrottlingPolicy `json:"storageArraySnapshotThrottlingPolicies"`
}

// Validate validates this storage array snapshot config
func (m *StorageArraySnapshotConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxSpaceConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSnapshotConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageArraySnapshotThrottlingPolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageArraySnapshotConfig) validateMaxSpaceConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxSpaceConfig) { // not required
		return nil
	}

	if m.MaxSpaceConfig != nil {
		if err := m.MaxSpaceConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSpaceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSpaceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *StorageArraySnapshotConfig) validateMaxSnapshotConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxSnapshotConfig) { // not required
		return nil
	}

	if m.MaxSnapshotConfig != nil {
		if err := m.MaxSnapshotConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

func (m *StorageArraySnapshotConfig) validateStorageArraySnapshotThrottlingPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageArraySnapshotThrottlingPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageArraySnapshotThrottlingPolicies); i++ {
		if swag.IsZero(m.StorageArraySnapshotThrottlingPolicies[i]) { // not required
			continue
		}

		if m.StorageArraySnapshotThrottlingPolicies[i] != nil {
			if err := m.StorageArraySnapshotThrottlingPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageArraySnapshotThrottlingPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageArraySnapshotThrottlingPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this storage array snapshot config based on the context it is used
func (m *StorageArraySnapshotConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaxSpaceConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxSnapshotConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageArraySnapshotThrottlingPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageArraySnapshotConfig) contextValidateMaxSpaceConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxSpaceConfig != nil {

		if swag.IsZero(m.MaxSpaceConfig) { // not required
			return nil
		}

		if err := m.MaxSpaceConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSpaceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSpaceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *StorageArraySnapshotConfig) contextValidateMaxSnapshotConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxSnapshotConfig != nil {

		if swag.IsZero(m.MaxSnapshotConfig) { // not required
			return nil
		}

		if err := m.MaxSnapshotConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxSnapshotConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxSnapshotConfig")
			}
			return err
		}
	}

	return nil
}

func (m *StorageArraySnapshotConfig) contextValidateStorageArraySnapshotThrottlingPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageArraySnapshotThrottlingPolicies); i++ {

		if m.StorageArraySnapshotThrottlingPolicies[i] != nil {

			if swag.IsZero(m.StorageArraySnapshotThrottlingPolicies[i]) { // not required
				return nil
			}

			if err := m.StorageArraySnapshotThrottlingPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageArraySnapshotThrottlingPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageArraySnapshotThrottlingPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageArraySnapshotConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageArraySnapshotConfig) UnmarshalBinary(b []byte) error {
	var res StorageArraySnapshotConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
