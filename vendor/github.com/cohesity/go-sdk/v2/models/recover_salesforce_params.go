// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverSalesforceParams Recover Salesforce environment params.
//
// Specifies the recovery options specific to Salesforce environment.
//
// swagger:model RecoverSalesforceParams
type RecoverSalesforceParams struct {

	// Specifies the list of recover Object parameters.
	// Required: true
	Objects []*CommonRecoverObjectSnapshotParams `json:"objects"`

	// Specifies the type of recover action to be performed.
	// Required: true
	// Enum: ["RecoverSfdcObjects","RecoverSfdcOrg","RecoverSfdcRecords"]
	RecoveryAction *string `json:"recoveryAction"`

	// Specifies whether to continue recovering other salesforce objects if one of Object failed to recover. Default value is false.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies the id of registered source where the objects are to be recovered. If this is not specified, the recovery job will recover to the original location.
	RecoverTo *int64 `json:"recoverTo,omitempty"`

	// Recover Salesforce object params.
	//
	// Specifies the parameters to recover Salesforce objects.
	RecoverSfdcObjectParams *RecoverSfdcObjectParams `json:"recoverSfdcObjectParams,omitempty"`
}

// Validate validates this recover salesforce params
func (m *RecoverSalesforceParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverSfdcObjectParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverSalesforceParams) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var recoverSalesforceParamsTypeRecoveryActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RecoverSfdcObjects","RecoverSfdcOrg","RecoverSfdcRecords"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverSalesforceParamsTypeRecoveryActionPropEnum = append(recoverSalesforceParamsTypeRecoveryActionPropEnum, v)
	}
}

const (

	// RecoverSalesforceParamsRecoveryActionRecoverSfdcObjects captures enum value "RecoverSfdcObjects"
	RecoverSalesforceParamsRecoveryActionRecoverSfdcObjects string = "RecoverSfdcObjects"

	// RecoverSalesforceParamsRecoveryActionRecoverSfdcOrg captures enum value "RecoverSfdcOrg"
	RecoverSalesforceParamsRecoveryActionRecoverSfdcOrg string = "RecoverSfdcOrg"

	// RecoverSalesforceParamsRecoveryActionRecoverSfdcRecords captures enum value "RecoverSfdcRecords"
	RecoverSalesforceParamsRecoveryActionRecoverSfdcRecords string = "RecoverSfdcRecords"
)

// prop value enum
func (m *RecoverSalesforceParams) validateRecoveryActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverSalesforceParamsTypeRecoveryActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverSalesforceParams) validateRecoveryAction(formats strfmt.Registry) error {

	if err := validate.Required("recoveryAction", "body", m.RecoveryAction); err != nil {
		return err
	}

	// value enum
	if err := m.validateRecoveryActionEnum("recoveryAction", "body", *m.RecoveryAction); err != nil {
		return err
	}

	return nil
}

func (m *RecoverSalesforceParams) validateRecoverSfdcObjectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverSfdcObjectParams) { // not required
		return nil
	}

	if m.RecoverSfdcObjectParams != nil {
		if err := m.RecoverSfdcObjectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverSfdcObjectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverSfdcObjectParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover salesforce params based on the context it is used
func (m *RecoverSalesforceParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverSfdcObjectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverSalesforceParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverSalesforceParams) contextValidateRecoverSfdcObjectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverSfdcObjectParams != nil {

		if swag.IsZero(m.RecoverSfdcObjectParams) { // not required
			return nil
		}

		if err := m.RecoverSfdcObjectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverSfdcObjectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverSfdcObjectParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverSalesforceParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverSalesforceParams) UnmarshalBinary(b []byte) error {
	var res RecoverSalesforceParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
