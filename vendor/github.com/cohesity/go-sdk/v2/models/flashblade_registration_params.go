// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlashbladeRegistrationParams Flashblade Protection Source.
//
// Specifies parameters to register an Flashblade Source.
//
// swagger:model FlashbladeRegistrationParams
type FlashbladeRegistrationParams struct {

	// Specifies the Hostname or IP Address Endpoint for the Flashblade Source.
	// Required: true
	Endpoint *string `json:"endpoint"`

	// Specifies the API Token of the Flashblade Source
	// Required: true
	APIToken *string `json:"apiToken"`

	// Specifies whether or not to back up SMB Volumes.
	BackUpSMBVolumes *bool `json:"backUpSMBVolumes,omitempty"`

	// Specifies the credentials for SMB Volumes. Must be specified if backUpSMBVolumes is set to true.
	SmbCredentials *SmbMountCredentials `json:"smbCredentials,omitempty"`

	// Specifies the source throttling parameters to be used during registration of the NAS source.
	ThrottlingConfig *NasThrottlingConfig `json:"throttlingConfig,omitempty"`
}

// Validate validates this flashblade registration params
func (m *FlashbladeRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlashbladeRegistrationParams) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

func (m *FlashbladeRegistrationParams) validateAPIToken(formats strfmt.Registry) error {

	if err := validate.Required("apiToken", "body", m.APIToken); err != nil {
		return err
	}

	return nil
}

func (m *FlashbladeRegistrationParams) validateSmbCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.SmbCredentials) { // not required
		return nil
	}

	if m.SmbCredentials != nil {
		if err := m.SmbCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smbCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smbCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *FlashbladeRegistrationParams) validateThrottlingConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingConfig) { // not required
		return nil
	}

	if m.ThrottlingConfig != nil {
		if err := m.ThrottlingConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this flashblade registration params based on the context it is used
func (m *FlashbladeRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSmbCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlashbladeRegistrationParams) contextValidateSmbCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SmbCredentials != nil {

		if swag.IsZero(m.SmbCredentials) { // not required
			return nil
		}

		if err := m.SmbCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smbCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smbCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *FlashbladeRegistrationParams) contextValidateThrottlingConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ThrottlingConfig != nil {

		if swag.IsZero(m.ThrottlingConfig) { // not required
			return nil
		}

		if err := m.ThrottlingConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throttlingConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlashbladeRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlashbladeRegistrationParams) UnmarshalBinary(b []byte) error {
	var res FlashbladeRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
