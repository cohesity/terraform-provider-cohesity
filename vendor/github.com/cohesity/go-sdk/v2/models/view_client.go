// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewClient Specifies a View Client.
//
// swagger:model ViewClient
type ViewClient struct {

	// Specifies the client ip.
	IP *string `json:"ip,omitempty"`

	// Specifies the protocol the client uses.
	// Enum: ["NFS","SMB"]
	Protocol *string `json:"protocol,omitempty"`

	// Specifies the node ip which the client is connected to.
	NodeIP *string `json:"nodeIp,omitempty"`

	// Specifies the server ip which the client is connected to.
	ServerIP *string `json:"serverIp,omitempty"`

	// Specifies the name of the View which the client is connected to.
	ViewName *string `json:"viewName,omitempty"`

	// Specifies the id of the View which the client is connected to.
	ViewID *int64 `json:"viewId,omitempty"`

	// Specifies the path of the View which the client is connected to.
	ViewPath *string `json:"viewPath,omitempty"`

	// Specifies the UID of the client user.
	UID *int32 `json:"uid,omitempty"`

	// Specifies the GID of the client user.
	Gid *int32 `json:"gid,omitempty"`

	// Specifies the username of the client.
	Username *string `json:"username,omitempty"`

	// Specifies the user domain of the client.
	UserDomain *string `json:"userDomain,omitempty"`

	// Specifies the time how long the client has connected to the server.
	ConnectedTimeUsecs *int64 `json:"connectedTimeUsecs,omitempty"`

	// Specifies the dialect version for SMB client.
	SmbDialectVersion *int32 `json:"smbDialectVersion,omitempty"`
}

// Validate validates this view client
func (m *ViewClient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var viewClientTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NFS","SMB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewClientTypeProtocolPropEnum = append(viewClientTypeProtocolPropEnum, v)
	}
}

const (

	// ViewClientProtocolNFS captures enum value "NFS"
	ViewClientProtocolNFS string = "NFS"

	// ViewClientProtocolSMB captures enum value "SMB"
	ViewClientProtocolSMB string = "SMB"
)

// prop value enum
func (m *ViewClient) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewClientTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewClient) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this view client based on context it is used
func (m *ViewClient) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ViewClient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewClient) UnmarshalBinary(b []byte) error {
	var res ViewClient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
