// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowInterventionSpec Specifies the intervention for each workflow type.
//
// swagger:model WorkflowInterventionSpec
type WorkflowInterventionSpec struct {

	// Specifies the workflow type for which an intervention would be needed when maintenance mode begins
	// Required: true
	// Enum: ["BackupRun"]
	WorkflowType *string `json:"workflowType"`

	// Specifies the intervention type for ongoing tasks.
	// Required: true
	// Enum: ["NoIntervention","Cancel"]
	Intervention *string `json:"intervention"`
}

// Validate validates this workflow intervention spec
func (m *WorkflowInterventionSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkflowType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntervention(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workflowInterventionSpecTypeWorkflowTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BackupRun"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowInterventionSpecTypeWorkflowTypePropEnum = append(workflowInterventionSpecTypeWorkflowTypePropEnum, v)
	}
}

const (

	// WorkflowInterventionSpecWorkflowTypeBackupRun captures enum value "BackupRun"
	WorkflowInterventionSpecWorkflowTypeBackupRun string = "BackupRun"
)

// prop value enum
func (m *WorkflowInterventionSpec) validateWorkflowTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workflowInterventionSpecTypeWorkflowTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowInterventionSpec) validateWorkflowType(formats strfmt.Registry) error {

	if err := validate.Required("workflowType", "body", m.WorkflowType); err != nil {
		return err
	}

	// value enum
	if err := m.validateWorkflowTypeEnum("workflowType", "body", *m.WorkflowType); err != nil {
		return err
	}

	return nil
}

var workflowInterventionSpecTypeInterventionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoIntervention","Cancel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowInterventionSpecTypeInterventionPropEnum = append(workflowInterventionSpecTypeInterventionPropEnum, v)
	}
}

const (

	// WorkflowInterventionSpecInterventionNoIntervention captures enum value "NoIntervention"
	WorkflowInterventionSpecInterventionNoIntervention string = "NoIntervention"

	// WorkflowInterventionSpecInterventionCancel captures enum value "Cancel"
	WorkflowInterventionSpecInterventionCancel string = "Cancel"
)

// prop value enum
func (m *WorkflowInterventionSpec) validateInterventionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workflowInterventionSpecTypeInterventionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowInterventionSpec) validateIntervention(formats strfmt.Registry) error {

	if err := validate.Required("intervention", "body", m.Intervention); err != nil {
		return err
	}

	// value enum
	if err := m.validateInterventionEnum("intervention", "body", *m.Intervention); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workflow intervention spec based on context it is used
func (m *WorkflowInterventionSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowInterventionSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowInterventionSpec) UnmarshalBinary(b []byte) error {
	var res WorkflowInterventionSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
