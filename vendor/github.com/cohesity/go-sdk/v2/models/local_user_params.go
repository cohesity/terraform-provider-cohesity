// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocalUserParams Specifies properties for LOCAL cohesity user.
//
// swagger:model LocalUserParams
type LocalUserParams struct {
	LocalUserResponseParams

	// Specifies the password of the User.
	Password *string `json:"password,omitempty"`

	// Specifies the primary group of the User. Primary group is used for file access.
	// Read Only: true
	PrimaryGroup *string `json:"primaryGroup,omitempty"`

	// Specifies additional groups the User may belong to.
	// Read Only: true
	Groups []string `json:"groups,omitempty"`

	LocalUserParamsAllOf2
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LocalUserParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 LocalUserResponseParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.LocalUserResponseParams = aO0

	// AO1
	var dataAO1 struct {
		Password *string `json:"password,omitempty"`

		PrimaryGroup *string `json:"primaryGroup,omitempty"`

		Groups []string `json:"groups,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Password = dataAO1.Password

	m.PrimaryGroup = dataAO1.PrimaryGroup

	m.Groups = dataAO1.Groups

	// AO2
	var aO2 LocalUserParamsAllOf2
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.LocalUserParamsAllOf2 = aO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LocalUserParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.LocalUserResponseParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Password *string `json:"password,omitempty"`

		PrimaryGroup *string `json:"primaryGroup,omitempty"`

		Groups []string `json:"groups,omitempty"`
	}

	dataAO1.Password = m.Password

	dataAO1.PrimaryGroup = m.PrimaryGroup

	dataAO1.Groups = m.Groups

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	aO2, err := swag.WriteJSON(m.LocalUserParamsAllOf2)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this local user params
func (m *LocalUserParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with LocalUserResponseParams
	if err := m.LocalUserResponseParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with LocalUserParamsAllOf2

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this local user params based on the context it is used
func (m *LocalUserParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with LocalUserResponseParams
	if err := m.LocalUserResponseParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrimaryGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with LocalUserParamsAllOf2

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocalUserParams) contextValidatePrimaryGroup(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "primaryGroup", "body", m.PrimaryGroup); err != nil {
		return err
	}

	return nil
}

func (m *LocalUserParams) contextValidateGroups(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "groups", "body", []string(m.Groups)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocalUserParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocalUserParams) UnmarshalBinary(b []byte) error {
	var res LocalUserParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LocalUserParamsAllOf2 local user params all of2
//
// swagger:model LocalUserParamsAllOf2
type LocalUserParamsAllOf2 interface{}
