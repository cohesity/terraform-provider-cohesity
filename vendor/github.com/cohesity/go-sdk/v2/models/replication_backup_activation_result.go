// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReplicationBackupActivationResult Specifies the result returned after creating a protection group for backing up failover objects on replication cluster.
//
// swagger:model ReplicationBackupActivationResult
type ReplicationBackupActivationResult struct {

	// Specifies the protection group id that will be returned upon creation of new group or existing group for backing up failover entities.
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// Specifies the reverse replication result.
	ReverseReplicationResult *ReverseReplicationResult `json:"reverseReplicationResult,omitempty"`

	// Specifies the list of failover object that are going to be protected on replication cluster.
	Objects []*FailoverObject `json:"objects"`

	// Specifies the protection errors, if any, pertaining to each object specified in 'objects'.
	ObjectErrors []*Error `json:"objectErrors"`
}

// Validate validates this replication backup activation result
func (m *ReplicationBackupActivationResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReverseReplicationResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationBackupActivationResult) validateReverseReplicationResult(formats strfmt.Registry) error {
	if swag.IsZero(m.ReverseReplicationResult) { // not required
		return nil
	}

	if m.ReverseReplicationResult != nil {
		if err := m.ReverseReplicationResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reverseReplicationResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reverseReplicationResult")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationBackupActivationResult) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationBackupActivationResult) validateObjectErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.ObjectErrors); i++ {
		if swag.IsZero(m.ObjectErrors[i]) { // not required
			continue
		}

		if m.ObjectErrors[i] != nil {
			if err := m.ObjectErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this replication backup activation result based on the context it is used
func (m *ReplicationBackupActivationResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReverseReplicationResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationBackupActivationResult) contextValidateReverseReplicationResult(ctx context.Context, formats strfmt.Registry) error {

	if m.ReverseReplicationResult != nil {

		if swag.IsZero(m.ReverseReplicationResult) { // not required
			return nil
		}

		if err := m.ReverseReplicationResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reverseReplicationResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reverseReplicationResult")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationBackupActivationResult) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationBackupActivationResult) contextValidateObjectErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ObjectErrors); i++ {

		if m.ObjectErrors[i] != nil {

			if swag.IsZero(m.ObjectErrors[i]) { // not required
				return nil
			}

			if err := m.ObjectErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationBackupActivationResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationBackupActivationResult) UnmarshalBinary(b []byte) error {
	var res ReplicationBackupActivationResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
