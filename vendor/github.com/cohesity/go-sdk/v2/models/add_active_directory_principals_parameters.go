// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddActiveDirectoryPrincipalsParameters Specifies the parameters for adding Active Directory users and groups to the Cohesity Cluster. You cannot create users and groups in the default Cohesity domain called 'LOCAL' using this operation.
//
// swagger:model AddActiveDirectoryPrincipalsParameters
type AddActiveDirectoryPrincipalsParameters struct {

	// Specifies a description about the user or group.
	Description *string `json:"description,omitempty"`

	// Specifies the domain of the Active Directory where the referenced principal is stored.
	// Required: true
	// Pattern: ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9]))*$
	DomainName *string `json:"domainName"`

	// Specifies the type of Active Directory principal.<br> 'User' specifies a user object class.<br> 'Group' specifies a group object class.<br> 'ServiceAccount' specifies a service account object class.
	// Required: true
	// Enum: ["User","Group","Computer","WellKnownPrincipal","ServiceAccount"]
	ObjectClass *string `json:"objectClass"`

	// Specifies the name of the Active Directory principal, that will be referenced by the group or user. The name of the Active Directory principal is used for naming the new group or user on the Cohesity Cluster.
	// Required: true
	Name *string `json:"name"`

	// Whether the principal is a restricted principal. A restricted principal can only view the objects he has permissions to.
	Restricted *bool `json:"restricted,omitempty"`

	// Specifies the Cohesity roles to associate with this user or group such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for this group or user. For example if the 'joe' user is added form the Active Directory and is associated with the Cohesity 'View' role,'joe' can log in to the Cohesity Dashboard and has a read-only view of the data on the Cohesity Cluster.
	Roles []string `json:"roles"`
}

// Validate validates this add active directory principals parameters
func (m *AddActiveDirectoryPrincipalsParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomainName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddActiveDirectoryPrincipalsParameters) validateDomainName(formats strfmt.Registry) error {

	if err := validate.Required("domainName", "body", m.DomainName); err != nil {
		return err
	}

	if err := validate.Pattern("domainName", "body", *m.DomainName, `^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9]))*$`); err != nil {
		return err
	}

	return nil
}

var addActiveDirectoryPrincipalsParametersTypeObjectClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["User","Group","Computer","WellKnownPrincipal","ServiceAccount"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addActiveDirectoryPrincipalsParametersTypeObjectClassPropEnum = append(addActiveDirectoryPrincipalsParametersTypeObjectClassPropEnum, v)
	}
}

const (

	// AddActiveDirectoryPrincipalsParametersObjectClassUser captures enum value "User"
	AddActiveDirectoryPrincipalsParametersObjectClassUser string = "User"

	// AddActiveDirectoryPrincipalsParametersObjectClassGroup captures enum value "Group"
	AddActiveDirectoryPrincipalsParametersObjectClassGroup string = "Group"

	// AddActiveDirectoryPrincipalsParametersObjectClassComputer captures enum value "Computer"
	AddActiveDirectoryPrincipalsParametersObjectClassComputer string = "Computer"

	// AddActiveDirectoryPrincipalsParametersObjectClassWellKnownPrincipal captures enum value "WellKnownPrincipal"
	AddActiveDirectoryPrincipalsParametersObjectClassWellKnownPrincipal string = "WellKnownPrincipal"

	// AddActiveDirectoryPrincipalsParametersObjectClassServiceAccount captures enum value "ServiceAccount"
	AddActiveDirectoryPrincipalsParametersObjectClassServiceAccount string = "ServiceAccount"
)

// prop value enum
func (m *AddActiveDirectoryPrincipalsParameters) validateObjectClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addActiveDirectoryPrincipalsParametersTypeObjectClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddActiveDirectoryPrincipalsParameters) validateObjectClass(formats strfmt.Registry) error {

	if err := validate.Required("objectClass", "body", m.ObjectClass); err != nil {
		return err
	}

	// value enum
	if err := m.validateObjectClassEnum("objectClass", "body", *m.ObjectClass); err != nil {
		return err
	}

	return nil
}

func (m *AddActiveDirectoryPrincipalsParameters) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add active directory principals parameters based on context it is used
func (m *AddActiveDirectoryPrincipalsParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddActiveDirectoryPrincipalsParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddActiveDirectoryPrincipalsParameters) UnmarshalBinary(b []byte) error {
	var res AddActiveDirectoryPrincipalsParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
