// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Template Template.
//
// Description of the view template.
//
// swagger:model Template
type Template struct {

	// Specifies an id of the view template.
	// Read Only: true
	ID *int64 `json:"id,omitempty"`

	// Specifies the name of the view template.
	Name *string `json:"name,omitempty"`

	// Specifies whether to enable dedup in storage domain.
	Dedup *bool `json:"dedup,omitempty"`

	// Specifies whether to enable compression in storage domain.
	Compress *bool `json:"compress,omitempty"`

	// Specifies if the tempate is custom or static.
	// Read Only: true
	IsDefault *bool `json:"isDefault,omitempty"`

	// Used for uniquely indentifying a default template.
	// Read Only: true
	// Enum: ["Unknown","BackupGeneral","BackupCommvault","BackupVeeam","FileServiceVideos","FileServiceMultimedia","FileServiceArchive","ObjectServiceContainer","ZDLRA","SAPHANA","TSM","ApplicationsDump","FileServiceGeneral","DigitalArchive","ObjectServiceGeneral","SplunkSmartStore","Hadoop"]
	DefaultTemplateName *string `json:"defaultTemplateName,omitempty"`

	// Specifies the parameters which is used to create the view.
	// No field is required.
	ViewParams *CreateView `json:"viewParams,omitempty"`
}

// Validate validates this template
func (m *Template) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultTemplateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var templateTypeDefaultTemplateNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","BackupGeneral","BackupCommvault","BackupVeeam","FileServiceVideos","FileServiceMultimedia","FileServiceArchive","ObjectServiceContainer","ZDLRA","SAPHANA","TSM","ApplicationsDump","FileServiceGeneral","DigitalArchive","ObjectServiceGeneral","SplunkSmartStore","Hadoop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		templateTypeDefaultTemplateNamePropEnum = append(templateTypeDefaultTemplateNamePropEnum, v)
	}
}

const (

	// TemplateDefaultTemplateNameUnknown captures enum value "Unknown"
	TemplateDefaultTemplateNameUnknown string = "Unknown"

	// TemplateDefaultTemplateNameBackupGeneral captures enum value "BackupGeneral"
	TemplateDefaultTemplateNameBackupGeneral string = "BackupGeneral"

	// TemplateDefaultTemplateNameBackupCommvault captures enum value "BackupCommvault"
	TemplateDefaultTemplateNameBackupCommvault string = "BackupCommvault"

	// TemplateDefaultTemplateNameBackupVeeam captures enum value "BackupVeeam"
	TemplateDefaultTemplateNameBackupVeeam string = "BackupVeeam"

	// TemplateDefaultTemplateNameFileServiceVideos captures enum value "FileServiceVideos"
	TemplateDefaultTemplateNameFileServiceVideos string = "FileServiceVideos"

	// TemplateDefaultTemplateNameFileServiceMultimedia captures enum value "FileServiceMultimedia"
	TemplateDefaultTemplateNameFileServiceMultimedia string = "FileServiceMultimedia"

	// TemplateDefaultTemplateNameFileServiceArchive captures enum value "FileServiceArchive"
	TemplateDefaultTemplateNameFileServiceArchive string = "FileServiceArchive"

	// TemplateDefaultTemplateNameObjectServiceContainer captures enum value "ObjectServiceContainer"
	TemplateDefaultTemplateNameObjectServiceContainer string = "ObjectServiceContainer"

	// TemplateDefaultTemplateNameZDLRA captures enum value "ZDLRA"
	TemplateDefaultTemplateNameZDLRA string = "ZDLRA"

	// TemplateDefaultTemplateNameSAPHANA captures enum value "SAPHANA"
	TemplateDefaultTemplateNameSAPHANA string = "SAPHANA"

	// TemplateDefaultTemplateNameTSM captures enum value "TSM"
	TemplateDefaultTemplateNameTSM string = "TSM"

	// TemplateDefaultTemplateNameApplicationsDump captures enum value "ApplicationsDump"
	TemplateDefaultTemplateNameApplicationsDump string = "ApplicationsDump"

	// TemplateDefaultTemplateNameFileServiceGeneral captures enum value "FileServiceGeneral"
	TemplateDefaultTemplateNameFileServiceGeneral string = "FileServiceGeneral"

	// TemplateDefaultTemplateNameDigitalArchive captures enum value "DigitalArchive"
	TemplateDefaultTemplateNameDigitalArchive string = "DigitalArchive"

	// TemplateDefaultTemplateNameObjectServiceGeneral captures enum value "ObjectServiceGeneral"
	TemplateDefaultTemplateNameObjectServiceGeneral string = "ObjectServiceGeneral"

	// TemplateDefaultTemplateNameSplunkSmartStore captures enum value "SplunkSmartStore"
	TemplateDefaultTemplateNameSplunkSmartStore string = "SplunkSmartStore"

	// TemplateDefaultTemplateNameHadoop captures enum value "Hadoop"
	TemplateDefaultTemplateNameHadoop string = "Hadoop"
)

// prop value enum
func (m *Template) validateDefaultTemplateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, templateTypeDefaultTemplateNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Template) validateDefaultTemplateName(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultTemplateName) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultTemplateNameEnum("defaultTemplateName", "body", *m.DefaultTemplateName); err != nil {
		return err
	}

	return nil
}

func (m *Template) validateViewParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewParams) { // not required
		return nil
	}

	if m.ViewParams != nil {
		if err := m.ViewParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this template based on the context it is used
func (m *Template) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsDefault(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultTemplateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Template) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Template) contextValidateIsDefault(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isDefault", "body", m.IsDefault); err != nil {
		return err
	}

	return nil
}

func (m *Template) contextValidateDefaultTemplateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "defaultTemplateName", "body", m.DefaultTemplateName); err != nil {
		return err
	}

	return nil
}

func (m *Template) contextValidateViewParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewParams != nil {

		if swag.IsZero(m.ViewParams) { // not required
			return nil
		}

		if err := m.ViewParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Template) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Template) UnmarshalBinary(b []byte) error {
	var res Template
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
