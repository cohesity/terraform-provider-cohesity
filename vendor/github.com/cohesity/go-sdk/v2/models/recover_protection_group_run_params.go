// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverProtectionGroupRunParams Recover Protection Group Run Params.
//
// Specifies the Protection Group Run params to recover. All the VM's that are successfully backed up by specified Runs will be recovered.
//
// swagger:model RecoverProtectionGroupRunParams
type RecoverProtectionGroupRunParams struct {

	// Specifies the Protection Group Run id from which to recover VMs. All the VM's that are successfully protected by this Run will be recovered.
	// Required: true
	// Pattern: ^\d+:\d+$
	ProtectionGroupRunID *string `json:"protectionGroupRunId"`

	// Specifies the Protection Group Instance id.
	// Required: true
	ProtectionGroupInstanceID *int64 `json:"protectionGroupInstanceId"`

	// Specifies the archival target id. If specified and Protection Group run has an archival snapshot then VMs are recovered from the specified archival snapshot. If not specified (default), VMs are recovered from local snapshot.
	ArchivalTargetID *int64 `json:"archivalTargetId,omitempty"`

	// Specifies the local Protection Group id. In case of recovering a replication Run, this field should be provided with local Protection Group id.
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`
}

// Validate validates this recover protection group run params
func (m *RecoverProtectionGroupRunParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionGroupRunID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionGroupInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverProtectionGroupRunParams) validateProtectionGroupRunID(formats strfmt.Registry) error {

	if err := validate.Required("protectionGroupRunId", "body", m.ProtectionGroupRunID); err != nil {
		return err
	}

	if err := validate.Pattern("protectionGroupRunId", "body", *m.ProtectionGroupRunID, `^\d+:\d+$`); err != nil {
		return err
	}

	return nil
}

func (m *RecoverProtectionGroupRunParams) validateProtectionGroupInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("protectionGroupInstanceId", "body", m.ProtectionGroupInstanceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this recover protection group run params based on context it is used
func (m *RecoverProtectionGroupRunParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RecoverProtectionGroupRunParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverProtectionGroupRunParams) UnmarshalBinary(b []byte) error {
	var res RecoverProtectionGroupRunParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
