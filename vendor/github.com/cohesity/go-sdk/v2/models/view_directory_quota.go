// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewDirectoryQuota Specifies a View directory quota.
//
// swagger:model ViewDirectoryQuota
type ViewDirectoryQuota struct {

	// Specifies the directory path.
	// Required: true
	DirectoryPath *string `json:"directoryPath"`

	// Specifies the directory usage in bytes.
	// Read Only: true
	UsageBytes *int64 `json:"usageBytes,omitempty"`

	// Specifies whether directory quota walk is pending.
	// Read Only: true
	DirectoryWalkPending *bool `json:"directoryWalkPending,omitempty"`

	// Specifies the directory quota policy.
	// Required: true
	QuotaPolicy *ViewDirectoryQuotaPolicy `json:"quotaPolicy"`
}

// Validate validates this view directory quota
func (m *ViewDirectoryQuota) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirectoryPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewDirectoryQuota) validateDirectoryPath(formats strfmt.Registry) error {

	if err := validate.Required("directoryPath", "body", m.DirectoryPath); err != nil {
		return err
	}

	return nil
}

func (m *ViewDirectoryQuota) validateQuotaPolicy(formats strfmt.Registry) error {

	if err := validate.Required("quotaPolicy", "body", m.QuotaPolicy); err != nil {
		return err
	}

	if m.QuotaPolicy != nil {
		if err := m.QuotaPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quotaPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quotaPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this view directory quota based on the context it is used
func (m *ViewDirectoryQuota) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUsageBytes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDirectoryWalkPending(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuotaPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewDirectoryQuota) contextValidateUsageBytes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "usageBytes", "body", m.UsageBytes); err != nil {
		return err
	}

	return nil
}

func (m *ViewDirectoryQuota) contextValidateDirectoryWalkPending(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "directoryWalkPending", "body", m.DirectoryWalkPending); err != nil {
		return err
	}

	return nil
}

func (m *ViewDirectoryQuota) contextValidateQuotaPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.QuotaPolicy != nil {

		if err := m.QuotaPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quotaPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quotaPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewDirectoryQuota) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewDirectoryQuota) UnmarshalBinary(b []byte) error {
	var res ViewDirectoryQuota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
