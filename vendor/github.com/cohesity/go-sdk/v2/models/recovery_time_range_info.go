// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryTimeRangeInfo Time range.
//
// Specifies a valid time range to which this object can be recovered.
//
// swagger:model RecoveryTimeRangeInfo
type RecoveryTimeRangeInfo struct {

	// Specifies the start time of this time range.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the end time of this time range.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies id of the Protection Group corresponding to this time range.
	// Pattern: ^\d+:\d+:\d+$
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`
}

// Validate validates this recovery time range info
func (m *RecoveryTimeRangeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionGroupID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryTimeRangeInfo) validateProtectionGroupID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionGroupID) { // not required
		return nil
	}

	if err := validate.Pattern("protectionGroupId", "body", *m.ProtectionGroupID, `^\d+:\d+:\d+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this recovery time range info based on context it is used
func (m *RecoveryTimeRangeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryTimeRangeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryTimeRangeInfo) UnmarshalBinary(b []byte) error {
	var res RecoveryTimeRangeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
