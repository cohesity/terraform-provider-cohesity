// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeWindow Specifies a a time range within a day.
//
// swagger:model TimeWindow
type TimeWindow struct {

	// Specifies the week day.
	// Enum: ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]
	DayOfTheWeek *string `json:"dayOfTheWeek,omitempty"`

	// Specifies the start time of this time range.
	StartTime *Time `json:"startTime,omitempty"`

	// Specifies the end time of this time range.
	EndTime *Time `json:"endTime,omitempty"`
}

// Validate validates this time window
func (m *TimeWindow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayOfTheWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var timeWindowTypeDayOfTheWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeWindowTypeDayOfTheWeekPropEnum = append(timeWindowTypeDayOfTheWeekPropEnum, v)
	}
}

const (

	// TimeWindowDayOfTheWeekSunday captures enum value "Sunday"
	TimeWindowDayOfTheWeekSunday string = "Sunday"

	// TimeWindowDayOfTheWeekMonday captures enum value "Monday"
	TimeWindowDayOfTheWeekMonday string = "Monday"

	// TimeWindowDayOfTheWeekTuesday captures enum value "Tuesday"
	TimeWindowDayOfTheWeekTuesday string = "Tuesday"

	// TimeWindowDayOfTheWeekWednesday captures enum value "Wednesday"
	TimeWindowDayOfTheWeekWednesday string = "Wednesday"

	// TimeWindowDayOfTheWeekThursday captures enum value "Thursday"
	TimeWindowDayOfTheWeekThursday string = "Thursday"

	// TimeWindowDayOfTheWeekFriday captures enum value "Friday"
	TimeWindowDayOfTheWeekFriday string = "Friday"

	// TimeWindowDayOfTheWeekSaturday captures enum value "Saturday"
	TimeWindowDayOfTheWeekSaturday string = "Saturday"
)

// prop value enum
func (m *TimeWindow) validateDayOfTheWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeWindowTypeDayOfTheWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeWindow) validateDayOfTheWeek(formats strfmt.Registry) error {
	if swag.IsZero(m.DayOfTheWeek) { // not required
		return nil
	}

	// value enum
	if err := m.validateDayOfTheWeekEnum("dayOfTheWeek", "body", *m.DayOfTheWeek); err != nil {
		return err
	}

	return nil
}

func (m *TimeWindow) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if m.StartTime != nil {
		if err := m.StartTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

func (m *TimeWindow) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if m.EndTime != nil {
		if err := m.EndTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endTime")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this time window based on the context it is used
func (m *TimeWindow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeWindow) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if m.StartTime != nil {

		if swag.IsZero(m.StartTime) { // not required
			return nil
		}

		if err := m.StartTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

func (m *TimeWindow) contextValidateEndTime(ctx context.Context, formats strfmt.Registry) error {

	if m.EndTime != nil {

		if swag.IsZero(m.EndTime) { // not required
			return nil
		}

		if err := m.EndTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeWindow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeWindow) UnmarshalBinary(b []byte) error {
	var res TimeWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
