// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataTieringAnalysisGroup Specifies the data tiering analysis group.
//
// swagger:model DataTieringAnalysisGroup
type DataTieringAnalysisGroup struct {
	CommonDataTieringAnalysisGroupParams

	// Specifies the ID of the data tiering analysis group.
	ID *string `json:"id,omitempty"`

	// Specifies the last run information.
	// Read Only: true
	LastRun *DataTieringAnalysisGroupRun `json:"lastRun,omitempty"`

	// Specifies the last successful run information. If no successful
	// run has occurred, this will be nil.
	// Read Only: true
	LastSuccessfulRun *DataTieringAnalysisGroupRun `json:"lastSuccessfulRun,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DataTieringAnalysisGroup) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonDataTieringAnalysisGroupParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonDataTieringAnalysisGroupParams = aO0

	// AO1
	var dataAO1 struct {
		ID *string `json:"id,omitempty"`

		LastRun *DataTieringAnalysisGroupRun `json:"lastRun,omitempty"`

		LastSuccessfulRun *DataTieringAnalysisGroupRun `json:"lastSuccessfulRun,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ID = dataAO1.ID

	m.LastRun = dataAO1.LastRun

	m.LastSuccessfulRun = dataAO1.LastSuccessfulRun

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DataTieringAnalysisGroup) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonDataTieringAnalysisGroupParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ID *string `json:"id,omitempty"`

		LastRun *DataTieringAnalysisGroupRun `json:"lastRun,omitempty"`

		LastSuccessfulRun *DataTieringAnalysisGroupRun `json:"lastSuccessfulRun,omitempty"`
	}

	dataAO1.ID = m.ID

	dataAO1.LastRun = m.LastRun

	dataAO1.LastSuccessfulRun = m.LastSuccessfulRun

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data tiering analysis group
func (m *DataTieringAnalysisGroup) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonDataTieringAnalysisGroupParams
	if err := m.CommonDataTieringAnalysisGroupParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSuccessfulRun(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringAnalysisGroup) validateLastRun(formats strfmt.Registry) error {

	if swag.IsZero(m.LastRun) { // not required
		return nil
	}

	if m.LastRun != nil {
		if err := m.LastRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastRun")
			}
			return err
		}
	}

	return nil
}

func (m *DataTieringAnalysisGroup) validateLastSuccessfulRun(formats strfmt.Registry) error {

	if swag.IsZero(m.LastSuccessfulRun) { // not required
		return nil
	}

	if m.LastSuccessfulRun != nil {
		if err := m.LastSuccessfulRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastSuccessfulRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastSuccessfulRun")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data tiering analysis group based on the context it is used
func (m *DataTieringAnalysisGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonDataTieringAnalysisGroupParams
	if err := m.CommonDataTieringAnalysisGroupParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastSuccessfulRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTieringAnalysisGroup) contextValidateLastRun(ctx context.Context, formats strfmt.Registry) error {

	if m.LastRun != nil {

		if swag.IsZero(m.LastRun) { // not required
			return nil
		}

		if err := m.LastRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastRun")
			}
			return err
		}
	}

	return nil
}

func (m *DataTieringAnalysisGroup) contextValidateLastSuccessfulRun(ctx context.Context, formats strfmt.Registry) error {

	if m.LastSuccessfulRun != nil {

		if swag.IsZero(m.LastSuccessfulRun) { // not required
			return nil
		}

		if err := m.LastSuccessfulRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastSuccessfulRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastSuccessfulRun")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTieringAnalysisGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTieringAnalysisGroup) UnmarshalBinary(b []byte) error {
	var res DataTieringAnalysisGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
