// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Office365ProtectionGroupParams Office 365(o365) Protection Group Parameters.
//
// Specifies the parameters which are specific to Office 365 related Protection Groups.
//
// swagger:model Office365ProtectionGroupParams
type Office365ProtectionGroupParams struct {

	// Specifies the objects to be included in the Protection Group.
	// Required: true
	// Min Items: 1
	// Unique: true
	Objects []*Office365ProtectionGroupObjectParams `json:"objects"`

	// Specifies the objects to be excluded in the Protection Group.
	// Unique: true
	ExcludeObjectIds []int64 `json:"excludeObjectIds"`

	// Specifies the fields required to enable indexing of the protected objects such as files and directories.
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`

	// Specifies the Office 365 Protection Group types.
	// Required: true
	// Min Items: 1
	ProtectionTypes []string `json:"protectionTypes"`

	// Specifies the parameters specific to Outlook Protection Group type.
	OutlookProtectionTypeParams *Office365OutlookProtectionGroupParams `json:"outlookProtectionTypeParams,omitempty"`

	// Specifies the parameters specific to OneDrive Protection Group type.
	OneDriveProtectionTypeParams *Office365OneDriveProtectionGroupParams `json:"oneDriveProtectionTypeParams,omitempty"`

	// Specifies the parameters specific to SharePoint Protection Group type.
	SharePointProtectionTypeParams *Office365SharePointProtectionGroupParams `json:"sharePointProtectionTypeParams,omitempty"`

	// Specifies the parameters specific to PublicFolders Protection Group type.
	PublicFoldersProtectionTypeParams *Office365PublicFoldersProtectionGroupParams `json:"publicFoldersProtectionTypeParams,omitempty"`

	// Specifies the id of the parent of the objects.
	// Read Only: true
	SourceID *int64 `json:"sourceId,omitempty"`

	// Specifies the name of the parent of the objects.
	// Read Only: true
	SourceName *string `json:"sourceName,omitempty"`
}

// Validate validates this office365 protection group params
func (m *Office365ProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeObjectIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndexingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutlookProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneDriveProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharePointProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicFoldersProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Office365ProtectionGroupParams) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	iObjectsSize := int64(len(m.Objects))

	if err := validate.MinItems("objects", "body", iObjectsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("objects", "body", m.Objects); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Office365ProtectionGroupParams) validateExcludeObjectIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeObjectIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludeObjectIds", "body", m.ExcludeObjectIds); err != nil {
		return err
	}

	return nil
}

func (m *Office365ProtectionGroupParams) validateIndexingPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.IndexingPolicy) { // not required
		return nil
	}

	if m.IndexingPolicy != nil {
		if err := m.IndexingPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indexingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indexingPolicy")
			}
			return err
		}
	}

	return nil
}

var office365ProtectionGroupParamsProtectionTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kMailbox","kOneDrive","kSharePoint","kPublicFolders","kGroups","kTeams","kMailboxCSM","kOneDriveCSM","kSharePointCSM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		office365ProtectionGroupParamsProtectionTypesItemsEnum = append(office365ProtectionGroupParamsProtectionTypesItemsEnum, v)
	}
}

func (m *Office365ProtectionGroupParams) validateProtectionTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, office365ProtectionGroupParamsProtectionTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Office365ProtectionGroupParams) validateProtectionTypes(formats strfmt.Registry) error {

	if err := validate.Required("protectionTypes", "body", m.ProtectionTypes); err != nil {
		return err
	}

	iProtectionTypesSize := int64(len(m.ProtectionTypes))

	if err := validate.MinItems("protectionTypes", "body", iProtectionTypesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.ProtectionTypes); i++ {

		// value enum
		if err := m.validateProtectionTypesItemsEnum("protectionTypes"+"."+strconv.Itoa(i), "body", m.ProtectionTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *Office365ProtectionGroupParams) validateOutlookProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OutlookProtectionTypeParams) { // not required
		return nil
	}

	if m.OutlookProtectionTypeParams != nil {
		if err := m.OutlookProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionGroupParams) validateOneDriveProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OneDriveProtectionTypeParams) { // not required
		return nil
	}

	if m.OneDriveProtectionTypeParams != nil {
		if err := m.OneDriveProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionGroupParams) validateSharePointProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SharePointProtectionTypeParams) { // not required
		return nil
	}

	if m.SharePointProtectionTypeParams != nil {
		if err := m.SharePointProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharePointProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharePointProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionGroupParams) validatePublicFoldersProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicFoldersProtectionTypeParams) { // not required
		return nil
	}

	if m.PublicFoldersProtectionTypeParams != nil {
		if err := m.PublicFoldersProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicFoldersProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicFoldersProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this office365 protection group params based on the context it is used
func (m *Office365ProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIndexingPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutlookProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneDriveProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharePointProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicFoldersProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Office365ProtectionGroupParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Office365ProtectionGroupParams) contextValidateIndexingPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.IndexingPolicy != nil {

		if swag.IsZero(m.IndexingPolicy) { // not required
			return nil
		}

		if err := m.IndexingPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indexingPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indexingPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionGroupParams) contextValidateOutlookProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OutlookProtectionTypeParams != nil {

		if swag.IsZero(m.OutlookProtectionTypeParams) { // not required
			return nil
		}

		if err := m.OutlookProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outlookProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outlookProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionGroupParams) contextValidateOneDriveProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OneDriveProtectionTypeParams != nil {

		if swag.IsZero(m.OneDriveProtectionTypeParams) { // not required
			return nil
		}

		if err := m.OneDriveProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneDriveProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneDriveProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionGroupParams) contextValidateSharePointProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SharePointProtectionTypeParams != nil {

		if swag.IsZero(m.SharePointProtectionTypeParams) { // not required
			return nil
		}

		if err := m.SharePointProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharePointProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharePointProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionGroupParams) contextValidatePublicFoldersProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicFoldersProtectionTypeParams != nil {

		if swag.IsZero(m.PublicFoldersProtectionTypeParams) { // not required
			return nil
		}

		if err := m.PublicFoldersProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicFoldersProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicFoldersProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *Office365ProtectionGroupParams) contextValidateSourceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceId", "body", m.SourceID); err != nil {
		return err
	}

	return nil
}

func (m *Office365ProtectionGroupParams) contextValidateSourceName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceName", "body", m.SourceName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Office365ProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Office365ProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res Office365ProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
