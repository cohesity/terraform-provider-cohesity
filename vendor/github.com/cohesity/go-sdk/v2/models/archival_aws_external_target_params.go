// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArchivalAwsExternalTargetParams AWS External Target Request Params for archival purpose type.
//
// Specifies the common parameters which are specific to AWS related External Targets.
//
// swagger:model ArchivalAwsExternalTargetParams
type ArchivalAwsExternalTargetParams struct {
	CommonArchivalAwsExternalTargetParams

	// aws s3 standard params
	AwsS3StandardParams *AwsS3StandardParams `json:"awsS3StandardParams,omitempty"`

	// aws s3 standard i a params
	AwsS3StandardIAParams *AwsS3StandardIAParams `json:"awsS3StandardIAParams,omitempty"`

	// aws s3 one zone i a params
	AwsS3OneZoneIAParams *AwsS3OneZoneIAParams `json:"awsS3OneZoneIAParams,omitempty"`

	// aws s3 intelligent params
	AwsS3IntelligentParams *AwsS3IntelligentParams `json:"awsS3IntelligentParams,omitempty"`

	// aws s3 glacier params
	AwsS3GlacierParams *AwsS3GlacierParams `json:"awsS3GlacierParams,omitempty"`

	// aws s3 glacier deep archive params
	AwsS3GlacierDeepArchiveParams *AwsS3GlacierDeepArchiveParams `json:"awsS3GlacierDeepArchiveParams,omitempty"`

	// aws glacier params
	AwsGlacierParams *AwsGlacierParams `json:"awsGlacierParams,omitempty"`

	// aws s3 glacier i r params
	AwsS3GlacierIRParams *AwsS3GlacierIRParams `json:"awsS3GlacierIRParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ArchivalAwsExternalTargetParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonArchivalAwsExternalTargetParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonArchivalAwsExternalTargetParams = aO0

	// AO1
	var dataAO1 struct {
		AwsS3StandardParams *AwsS3StandardParams `json:"awsS3StandardParams,omitempty"`

		AwsS3StandardIAParams *AwsS3StandardIAParams `json:"awsS3StandardIAParams,omitempty"`

		AwsS3OneZoneIAParams *AwsS3OneZoneIAParams `json:"awsS3OneZoneIAParams,omitempty"`

		AwsS3IntelligentParams *AwsS3IntelligentParams `json:"awsS3IntelligentParams,omitempty"`

		AwsS3GlacierParams *AwsS3GlacierParams `json:"awsS3GlacierParams,omitempty"`

		AwsS3GlacierDeepArchiveParams *AwsS3GlacierDeepArchiveParams `json:"awsS3GlacierDeepArchiveParams,omitempty"`

		AwsGlacierParams *AwsGlacierParams `json:"awsGlacierParams,omitempty"`

		AwsS3GlacierIRParams *AwsS3GlacierIRParams `json:"awsS3GlacierIRParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AwsS3StandardParams = dataAO1.AwsS3StandardParams

	m.AwsS3StandardIAParams = dataAO1.AwsS3StandardIAParams

	m.AwsS3OneZoneIAParams = dataAO1.AwsS3OneZoneIAParams

	m.AwsS3IntelligentParams = dataAO1.AwsS3IntelligentParams

	m.AwsS3GlacierParams = dataAO1.AwsS3GlacierParams

	m.AwsS3GlacierDeepArchiveParams = dataAO1.AwsS3GlacierDeepArchiveParams

	m.AwsGlacierParams = dataAO1.AwsGlacierParams

	m.AwsS3GlacierIRParams = dataAO1.AwsS3GlacierIRParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ArchivalAwsExternalTargetParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonArchivalAwsExternalTargetParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AwsS3StandardParams *AwsS3StandardParams `json:"awsS3StandardParams,omitempty"`

		AwsS3StandardIAParams *AwsS3StandardIAParams `json:"awsS3StandardIAParams,omitempty"`

		AwsS3OneZoneIAParams *AwsS3OneZoneIAParams `json:"awsS3OneZoneIAParams,omitempty"`

		AwsS3IntelligentParams *AwsS3IntelligentParams `json:"awsS3IntelligentParams,omitempty"`

		AwsS3GlacierParams *AwsS3GlacierParams `json:"awsS3GlacierParams,omitempty"`

		AwsS3GlacierDeepArchiveParams *AwsS3GlacierDeepArchiveParams `json:"awsS3GlacierDeepArchiveParams,omitempty"`

		AwsGlacierParams *AwsGlacierParams `json:"awsGlacierParams,omitempty"`

		AwsS3GlacierIRParams *AwsS3GlacierIRParams `json:"awsS3GlacierIRParams,omitempty"`
	}

	dataAO1.AwsS3StandardParams = m.AwsS3StandardParams

	dataAO1.AwsS3StandardIAParams = m.AwsS3StandardIAParams

	dataAO1.AwsS3OneZoneIAParams = m.AwsS3OneZoneIAParams

	dataAO1.AwsS3IntelligentParams = m.AwsS3IntelligentParams

	dataAO1.AwsS3GlacierParams = m.AwsS3GlacierParams

	dataAO1.AwsS3GlacierDeepArchiveParams = m.AwsS3GlacierDeepArchiveParams

	dataAO1.AwsGlacierParams = m.AwsGlacierParams

	dataAO1.AwsS3GlacierIRParams = m.AwsS3GlacierIRParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this archival aws external target params
func (m *ArchivalAwsExternalTargetParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonArchivalAwsExternalTargetParams
	if err := m.CommonArchivalAwsExternalTargetParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsS3StandardParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsS3StandardIAParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsS3OneZoneIAParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsS3IntelligentParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsS3GlacierParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsS3GlacierDeepArchiveParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsGlacierParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsS3GlacierIRParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivalAwsExternalTargetParams) validateAwsS3StandardParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsS3StandardParams) { // not required
		return nil
	}

	if m.AwsS3StandardParams != nil {
		if err := m.AwsS3StandardParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3StandardParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3StandardParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) validateAwsS3StandardIAParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsS3StandardIAParams) { // not required
		return nil
	}

	if m.AwsS3StandardIAParams != nil {
		if err := m.AwsS3StandardIAParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3StandardIAParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3StandardIAParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) validateAwsS3OneZoneIAParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsS3OneZoneIAParams) { // not required
		return nil
	}

	if m.AwsS3OneZoneIAParams != nil {
		if err := m.AwsS3OneZoneIAParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3OneZoneIAParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3OneZoneIAParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) validateAwsS3IntelligentParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsS3IntelligentParams) { // not required
		return nil
	}

	if m.AwsS3IntelligentParams != nil {
		if err := m.AwsS3IntelligentParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3IntelligentParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3IntelligentParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) validateAwsS3GlacierParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsS3GlacierParams) { // not required
		return nil
	}

	if m.AwsS3GlacierParams != nil {
		if err := m.AwsS3GlacierParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3GlacierParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3GlacierParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) validateAwsS3GlacierDeepArchiveParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsS3GlacierDeepArchiveParams) { // not required
		return nil
	}

	if m.AwsS3GlacierDeepArchiveParams != nil {
		if err := m.AwsS3GlacierDeepArchiveParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3GlacierDeepArchiveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3GlacierDeepArchiveParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) validateAwsGlacierParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsGlacierParams) { // not required
		return nil
	}

	if m.AwsGlacierParams != nil {
		if err := m.AwsGlacierParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsGlacierParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsGlacierParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) validateAwsS3GlacierIRParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsS3GlacierIRParams) { // not required
		return nil
	}

	if m.AwsS3GlacierIRParams != nil {
		if err := m.AwsS3GlacierIRParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3GlacierIRParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3GlacierIRParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this archival aws external target params based on the context it is used
func (m *ArchivalAwsExternalTargetParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonArchivalAwsExternalTargetParams
	if err := m.CommonArchivalAwsExternalTargetParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsS3StandardParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsS3StandardIAParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsS3OneZoneIAParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsS3IntelligentParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsS3GlacierParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsS3GlacierDeepArchiveParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsGlacierParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsS3GlacierIRParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivalAwsExternalTargetParams) contextValidateAwsS3StandardParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsS3StandardParams != nil {

		if swag.IsZero(m.AwsS3StandardParams) { // not required
			return nil
		}

		if err := m.AwsS3StandardParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3StandardParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3StandardParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) contextValidateAwsS3StandardIAParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsS3StandardIAParams != nil {

		if swag.IsZero(m.AwsS3StandardIAParams) { // not required
			return nil
		}

		if err := m.AwsS3StandardIAParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3StandardIAParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3StandardIAParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) contextValidateAwsS3OneZoneIAParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsS3OneZoneIAParams != nil {

		if swag.IsZero(m.AwsS3OneZoneIAParams) { // not required
			return nil
		}

		if err := m.AwsS3OneZoneIAParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3OneZoneIAParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3OneZoneIAParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) contextValidateAwsS3IntelligentParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsS3IntelligentParams != nil {

		if swag.IsZero(m.AwsS3IntelligentParams) { // not required
			return nil
		}

		if err := m.AwsS3IntelligentParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3IntelligentParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3IntelligentParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) contextValidateAwsS3GlacierParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsS3GlacierParams != nil {

		if swag.IsZero(m.AwsS3GlacierParams) { // not required
			return nil
		}

		if err := m.AwsS3GlacierParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3GlacierParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3GlacierParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) contextValidateAwsS3GlacierDeepArchiveParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsS3GlacierDeepArchiveParams != nil {

		if swag.IsZero(m.AwsS3GlacierDeepArchiveParams) { // not required
			return nil
		}

		if err := m.AwsS3GlacierDeepArchiveParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3GlacierDeepArchiveParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3GlacierDeepArchiveParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) contextValidateAwsGlacierParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsGlacierParams != nil {

		if swag.IsZero(m.AwsGlacierParams) { // not required
			return nil
		}

		if err := m.AwsGlacierParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsGlacierParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsGlacierParams")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalAwsExternalTargetParams) contextValidateAwsS3GlacierIRParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsS3GlacierIRParams != nil {

		if swag.IsZero(m.AwsS3GlacierIRParams) { // not required
			return nil
		}

		if err := m.AwsS3GlacierIRParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsS3GlacierIRParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsS3GlacierIRParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArchivalAwsExternalTargetParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchivalAwsExternalTargetParams) UnmarshalBinary(b []byte) error {
	var res ArchivalAwsExternalTargetParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
