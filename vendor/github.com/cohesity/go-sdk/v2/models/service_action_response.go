// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceActionResponse Service action response.
//
// swagger:model ServiceActionResponse
type ServiceActionResponse struct {

	// Name of the service.
	ServiceName string `json:"serviceName,omitempty"`

	// Status of the service.
	ServiceStatus ServiceStatus `json:"serviceStatus,omitempty"`
}

// Validate validates this service action response
func (m *ServiceActionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceActionResponse) validateServiceStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceStatus) { // not required
		return nil
	}

	if err := m.ServiceStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceStatus")
		}
		return err
	}

	return nil
}

// ContextValidate validate this service action response based on the context it is used
func (m *ServiceActionResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceActionResponse) contextValidateServiceStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceStatus) { // not required
		return nil
	}

	if err := m.ServiceStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceActionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceActionResponse) UnmarshalBinary(b []byte) error {
	var res ServiceActionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
