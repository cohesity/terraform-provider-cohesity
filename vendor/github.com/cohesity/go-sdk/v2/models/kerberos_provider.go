// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KerberosProvider Specifies the the Kerberos Provider details.
//
// swagger:model KerberosProvider
type KerberosProvider struct {

	// Specifies the id.
	// Read Only: true
	// Pattern: ^\d+:\d+:\d+$
	ID *string `json:"id,omitempty"`

	// Specifies the realm name.
	// Required: true
	RealmName *string `json:"realmName"`

	// Specifies a list of Key distribution Centre(KDC) Severs.
	// Required: true
	KdcServers []string `json:"kdcServers"`

	// Specifies the admin server used for registration from
	// the list of KDC servers.
	// Required: true
	AdminServer *string `json:"adminServer"`

	// Specifies the LDAP provider id to be mapped
	LdapProviderID *int64 `json:"ldapProviderId,omitempty"`

	// Specifies if specified host alias should
	// overwrite existing host alias.
	OverwritehostAlias *bool `json:"overwritehostAlias,omitempty"`

	// Specifies the DNS routable host alias names.
	// Required: true
	HostAlias []string `json:"hostAlias"`
}

// Validate validates this kerberos provider
func (m *KerberosProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealmName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKdcServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostAlias(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosProvider) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", *m.ID, `^\d+:\d+:\d+$`); err != nil {
		return err
	}

	return nil
}

func (m *KerberosProvider) validateRealmName(formats strfmt.Registry) error {

	if err := validate.Required("realmName", "body", m.RealmName); err != nil {
		return err
	}

	return nil
}

func (m *KerberosProvider) validateKdcServers(formats strfmt.Registry) error {

	if err := validate.Required("kdcServers", "body", m.KdcServers); err != nil {
		return err
	}

	return nil
}

func (m *KerberosProvider) validateAdminServer(formats strfmt.Registry) error {

	if err := validate.Required("adminServer", "body", m.AdminServer); err != nil {
		return err
	}

	return nil
}

func (m *KerberosProvider) validateHostAlias(formats strfmt.Registry) error {

	if err := validate.Required("hostAlias", "body", m.HostAlias); err != nil {
		return err
	}

	for i := 0; i < len(m.HostAlias); i++ {

		if err := validate.Pattern("hostAlias"+"."+strconv.Itoa(i), "body", m.HostAlias[i], `^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]+[a-zA-Z0-9])$`); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this kerberos provider based on the context it is used
func (m *KerberosProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosProvider) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KerberosProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KerberosProvider) UnmarshalBinary(b []byte) error {
	var res KerberosProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
