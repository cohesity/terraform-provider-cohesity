// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantNetwork TenantNetwork
//
// Networking information about a Tenant on a Cluster.
//
// swagger:model TenantNetwork
type TenantNetwork struct {

	// Whether connector (hybrid extender) is enabled.
	// Required: true
	ConnectorEnabled *bool `json:"connectorEnabled"`

	// The hostname for Cohesity cluster as seen by tenants and as is routable
	// from the tenant's network. Tenant's VLAN's hostname, if available can be
	// used instead but it is mandatory to provide this value if there's no VLAN
	// hostname to use. Also, when set, this field would take precedence over
	// VLAN hostname.
	ClusterHostname *string `json:"clusterHostname,omitempty"`

	// Set of IPs as seen from the tenant's network for the Cohesity cluster.
	// Only one from 'clusterHostname' and 'clusterIps' is needed.
	ClusterIps []string `json:"clusterIps"`
}

// Validate validates this tenant network
func (m *TenantNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectorEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantNetwork) validateConnectorEnabled(formats strfmt.Registry) error {

	if err := validate.Required("connectorEnabled", "body", m.ConnectorEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tenant network based on context it is used
func (m *TenantNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TenantNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantNetwork) UnmarshalBinary(b []byte) error {
	var res TenantNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
