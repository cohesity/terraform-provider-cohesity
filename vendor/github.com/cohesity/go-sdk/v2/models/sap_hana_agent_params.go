// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SapHanaAgentParams SapHana agent parameters.
//
// swagger:model SapHanaAgentParams
type SapHanaAgentParams struct {

	// Specifies the type of installer.
	// Required: true
	// Enum: ["kScript","kRPM"]
	PackageType *string `json:"packageType"`

	// Specifies the type of agent. kJava agent type is supported only for kScript package type.
	// Required: true
	// Enum: ["kJava","kLegacy"]
	AgentType *string `json:"agentType"`
}

// Validate validates this sap hana agent params
func (m *SapHanaAgentParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sapHanaAgentParamsTypePackageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kScript","kRPM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sapHanaAgentParamsTypePackageTypePropEnum = append(sapHanaAgentParamsTypePackageTypePropEnum, v)
	}
}

const (

	// SapHanaAgentParamsPackageTypeKScript captures enum value "kScript"
	SapHanaAgentParamsPackageTypeKScript string = "kScript"

	// SapHanaAgentParamsPackageTypeKRPM captures enum value "kRPM"
	SapHanaAgentParamsPackageTypeKRPM string = "kRPM"
)

// prop value enum
func (m *SapHanaAgentParams) validatePackageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sapHanaAgentParamsTypePackageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SapHanaAgentParams) validatePackageType(formats strfmt.Registry) error {

	if err := validate.Required("packageType", "body", m.PackageType); err != nil {
		return err
	}

	// value enum
	if err := m.validatePackageTypeEnum("packageType", "body", *m.PackageType); err != nil {
		return err
	}

	return nil
}

var sapHanaAgentParamsTypeAgentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kJava","kLegacy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sapHanaAgentParamsTypeAgentTypePropEnum = append(sapHanaAgentParamsTypeAgentTypePropEnum, v)
	}
}

const (

	// SapHanaAgentParamsAgentTypeKJava captures enum value "kJava"
	SapHanaAgentParamsAgentTypeKJava string = "kJava"

	// SapHanaAgentParamsAgentTypeKLegacy captures enum value "kLegacy"
	SapHanaAgentParamsAgentTypeKLegacy string = "kLegacy"
)

// prop value enum
func (m *SapHanaAgentParams) validateAgentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sapHanaAgentParamsTypeAgentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SapHanaAgentParams) validateAgentType(formats strfmt.Registry) error {

	if err := validate.Required("agentType", "body", m.AgentType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAgentTypeEnum("agentType", "body", *m.AgentType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sap hana agent params based on context it is used
func (m *SapHanaAgentParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SapHanaAgentParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SapHanaAgentParams) UnmarshalBinary(b []byte) error {
	var res SapHanaAgentParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
