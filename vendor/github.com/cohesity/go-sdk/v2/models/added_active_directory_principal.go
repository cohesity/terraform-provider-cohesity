// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddedActiveDirectoryPrincipal Specifies a group or user added to the Cohesity Cluster for an Active Directory principal.
//
// swagger:model AddedActiveDirectoryPrincipal
type AddedActiveDirectoryPrincipal struct {
	AddActiveDirectoryPrincipalsParameters

	// Specifies the epoch time in milliseconds when the group or user was added to the Cohesity Cluster.
	CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

	// Specifies the epoch time in milliseconds when the group or user was last modified on the Cohesity Cluster.
	LastUpdatedTimeMsecs *int64 `json:"lastUpdatedTimeMsecs,omitempty"`

	// Specifies the unique Security ID (SID) of the Active Directory principal associated with this group or user.
	Sid *string `json:"sid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AddedActiveDirectoryPrincipal) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AddActiveDirectoryPrincipalsParameters
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AddActiveDirectoryPrincipalsParameters = aO0

	// AO1
	var dataAO1 struct {
		CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

		LastUpdatedTimeMsecs *int64 `json:"lastUpdatedTimeMsecs,omitempty"`

		Sid *string `json:"sid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CreatedTimeMsecs = dataAO1.CreatedTimeMsecs

	m.LastUpdatedTimeMsecs = dataAO1.LastUpdatedTimeMsecs

	m.Sid = dataAO1.Sid

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AddedActiveDirectoryPrincipal) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AddActiveDirectoryPrincipalsParameters)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

		LastUpdatedTimeMsecs *int64 `json:"lastUpdatedTimeMsecs,omitempty"`

		Sid *string `json:"sid,omitempty"`
	}

	dataAO1.CreatedTimeMsecs = m.CreatedTimeMsecs

	dataAO1.LastUpdatedTimeMsecs = m.LastUpdatedTimeMsecs

	dataAO1.Sid = m.Sid

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this added active directory principal
func (m *AddedActiveDirectoryPrincipal) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AddActiveDirectoryPrincipalsParameters
	if err := m.AddActiveDirectoryPrincipalsParameters.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this added active directory principal based on the context it is used
func (m *AddedActiveDirectoryPrincipal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AddActiveDirectoryPrincipalsParameters
	if err := m.AddActiveDirectoryPrincipalsParameters.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AddedActiveDirectoryPrincipal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddedActiveDirectoryPrincipal) UnmarshalBinary(b []byte) error {
	var res AddedActiveDirectoryPrincipal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
