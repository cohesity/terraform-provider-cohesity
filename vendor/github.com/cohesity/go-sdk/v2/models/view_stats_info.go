// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewStatsInfo Specifies the View stats.
//
// swagger:model ViewStatsInfo
type ViewStatsInfo struct {

	// Specifies the view Id.
	ViewID *int64 `json:"viewId,omitempty"`

	// Specifies the view name.
	ViewName *string `json:"viewName,omitempty"`

	// Specifies the protocols of this view.
	Protocols []string `json:"protocols"`

	// Specifies the list of View stats.
	Stats []*ViewStatsInfoDetails `json:"stats"`
}

// Validate validates this view stats info
func (m *ViewStatsInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocols(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var viewStatsInfoProtocolsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kSmb","kS3","kIscsi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewStatsInfoProtocolsItemsEnum = append(viewStatsInfoProtocolsItemsEnum, v)
	}
}

func (m *ViewStatsInfo) validateProtocolsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewStatsInfoProtocolsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewStatsInfo) validateProtocols(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocols) { // not required
		return nil
	}

	for i := 0; i < len(m.Protocols); i++ {

		// value enum
		if err := m.validateProtocolsItemsEnum("protocols"+"."+strconv.Itoa(i), "body", m.Protocols[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ViewStatsInfo) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	for i := 0; i < len(m.Stats); i++ {
		if swag.IsZero(m.Stats[i]) { // not required
			continue
		}

		if m.Stats[i] != nil {
			if err := m.Stats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this view stats info based on the context it is used
func (m *ViewStatsInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewStatsInfo) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Stats); i++ {

		if m.Stats[i] != nil {

			if swag.IsZero(m.Stats[i]) { // not required
				return nil
			}

			if err := m.Stats[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewStatsInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewStatsInfo) UnmarshalBinary(b []byte) error {
	var res ViewStatsInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
