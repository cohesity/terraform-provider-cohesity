// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArchivalTargetResult Archival result for a target.
//
// Archival result for an archival target.
//
// swagger:model ArchivalTargetResult
type ArchivalTargetResult struct {
	ArchivalTargetSummaryInfo

	// Type of Protection Group run. 'kRegular' indicates an incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates system volume backup. It produces an image for bare metal recovery.
	// Enum: ["kRegular","kFull","kLog","kSystem","kHydrateCDP","kStorageArraySnapshot"]
	RunType *string `json:"runType,omitempty"`

	// Indicated if SLA has been violated for this run.
	IsSLAViolated *bool `json:"isSlaViolated,omitempty"`

	// Snapshot id for a successful snapshot. This field will not be set if the archival Run fails to take the snapshot.
	SnapshotID *string `json:"snapshotId,omitempty"`

	// Specifies the start time of replication run in Unix epoch Timestamp(in microseconds) for an archival target.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the end time of replication run in Unix epoch Timestamp(in microseconds) for an archival target.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the time when the archival is queued for schedule in Unix epoch Timestamp(in microseconds) for a target.
	QueuedTimeUsecs *int64 `json:"queuedTimeUsecs,omitempty"`

	// Whether this is an incremental archive. If set to true, this is an incremental archive, otherwise this is a full archive.
	IsIncremental *bool `json:"isIncremental,omitempty"`

	// Whether this is forever incremental or not
	IsForeverIncremental *bool `json:"isForeverIncremental,omitempty"`

	// Whether this is CAD archive or not
	IsCadArchive *bool `json:"isCadArchive,omitempty"`

	// Status of the replication run for an archival target. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]
	Status *string `json:"status,omitempty"`

	// Message about the archival run.
	Message *string `json:"message,omitempty"`

	// Progress monitor task id for archival.
	ProgressTaskID *string `json:"progressTaskId,omitempty"`

	// Run Stats task id for archival.
	StatsTaskID *string `json:"statsTaskId,omitempty"`

	// Progress monitor task for indexing.
	IndexingTaskID *string `json:"indexingTaskId,omitempty"`

	// Specifies the count of objects for which backup was successful.
	SuccessfulObjectsCount *int64 `json:"successfulObjectsCount,omitempty"`

	// Specifies the count of objects for which backup failed.
	FailedObjectsCount *int64 `json:"failedObjectsCount,omitempty"`

	// Specifies the count of objects for which backup was cancelled.
	CancelledObjectsCount *int64 `json:"cancelledObjectsCount,omitempty"`

	// Specifies the count of app objects for which backup was successful.
	SuccessfulAppObjectsCount *int32 `json:"successfulAppObjectsCount,omitempty"`

	// Specifies the count of app objects for which backup failed.
	FailedAppObjectsCount *int32 `json:"failedAppObjectsCount,omitempty"`

	// Specifies the count of app objects for which backup was cancelled.
	CancelledAppObjectsCount *int32 `json:"cancelledAppObjectsCount,omitempty"`

	// Archival data statistics for a target.
	Stats *ArchivalDataStats `json:"stats,omitempty"`

	// Specifies whether the snapshot is deleted manually.
	IsManuallyDeleted *bool `json:"isManuallyDeleted,omitempty"`

	// Specifies the expiry time of attempt in Unix epoch Timestamp (in microseconds).
	ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

	// Specifies the dataLock constraints for the archival target.
	DataLockConstraints *DataLockConstraints `json:"dataLockConstraints,omitempty"`

	// Specifies the legal hold status for a archival target.
	OnLegalHold *bool `json:"onLegalHold,omitempty"`

	// Specifies the worm related properties for this archive.
	WormProperties *WormProperties `json:"wormProperties,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ArchivalTargetResult) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ArchivalTargetSummaryInfo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ArchivalTargetSummaryInfo = aO0

	// AO1
	var dataAO1 struct {
		RunType *string `json:"runType,omitempty"`

		IsSLAViolated *bool `json:"isSlaViolated,omitempty"`

		SnapshotID *string `json:"snapshotId,omitempty"`

		StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

		EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

		QueuedTimeUsecs *int64 `json:"queuedTimeUsecs,omitempty"`

		IsIncremental *bool `json:"isIncremental,omitempty"`

		IsForeverIncremental *bool `json:"isForeverIncremental,omitempty"`

		IsCadArchive *bool `json:"isCadArchive,omitempty"`

		Status *string `json:"status,omitempty"`

		Message *string `json:"message,omitempty"`

		ProgressTaskID *string `json:"progressTaskId,omitempty"`

		StatsTaskID *string `json:"statsTaskId,omitempty"`

		IndexingTaskID *string `json:"indexingTaskId,omitempty"`

		SuccessfulObjectsCount *int64 `json:"successfulObjectsCount,omitempty"`

		FailedObjectsCount *int64 `json:"failedObjectsCount,omitempty"`

		CancelledObjectsCount *int64 `json:"cancelledObjectsCount,omitempty"`

		SuccessfulAppObjectsCount *int32 `json:"successfulAppObjectsCount,omitempty"`

		FailedAppObjectsCount *int32 `json:"failedAppObjectsCount,omitempty"`

		CancelledAppObjectsCount *int32 `json:"cancelledAppObjectsCount,omitempty"`

		Stats *ArchivalDataStats `json:"stats,omitempty"`

		IsManuallyDeleted *bool `json:"isManuallyDeleted,omitempty"`

		ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

		DataLockConstraints *DataLockConstraints `json:"dataLockConstraints,omitempty"`

		OnLegalHold *bool `json:"onLegalHold,omitempty"`

		WormProperties *WormProperties `json:"wormProperties,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.RunType = dataAO1.RunType

	m.IsSLAViolated = dataAO1.IsSLAViolated

	m.SnapshotID = dataAO1.SnapshotID

	m.StartTimeUsecs = dataAO1.StartTimeUsecs

	m.EndTimeUsecs = dataAO1.EndTimeUsecs

	m.QueuedTimeUsecs = dataAO1.QueuedTimeUsecs

	m.IsIncremental = dataAO1.IsIncremental

	m.IsForeverIncremental = dataAO1.IsForeverIncremental

	m.IsCadArchive = dataAO1.IsCadArchive

	m.Status = dataAO1.Status

	m.Message = dataAO1.Message

	m.ProgressTaskID = dataAO1.ProgressTaskID

	m.StatsTaskID = dataAO1.StatsTaskID

	m.IndexingTaskID = dataAO1.IndexingTaskID

	m.SuccessfulObjectsCount = dataAO1.SuccessfulObjectsCount

	m.FailedObjectsCount = dataAO1.FailedObjectsCount

	m.CancelledObjectsCount = dataAO1.CancelledObjectsCount

	m.SuccessfulAppObjectsCount = dataAO1.SuccessfulAppObjectsCount

	m.FailedAppObjectsCount = dataAO1.FailedAppObjectsCount

	m.CancelledAppObjectsCount = dataAO1.CancelledAppObjectsCount

	m.Stats = dataAO1.Stats

	m.IsManuallyDeleted = dataAO1.IsManuallyDeleted

	m.ExpiryTimeUsecs = dataAO1.ExpiryTimeUsecs

	m.DataLockConstraints = dataAO1.DataLockConstraints

	m.OnLegalHold = dataAO1.OnLegalHold

	m.WormProperties = dataAO1.WormProperties

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ArchivalTargetResult) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ArchivalTargetSummaryInfo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		RunType *string `json:"runType,omitempty"`

		IsSLAViolated *bool `json:"isSlaViolated,omitempty"`

		SnapshotID *string `json:"snapshotId,omitempty"`

		StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

		EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

		QueuedTimeUsecs *int64 `json:"queuedTimeUsecs,omitempty"`

		IsIncremental *bool `json:"isIncremental,omitempty"`

		IsForeverIncremental *bool `json:"isForeverIncremental,omitempty"`

		IsCadArchive *bool `json:"isCadArchive,omitempty"`

		Status *string `json:"status,omitempty"`

		Message *string `json:"message,omitempty"`

		ProgressTaskID *string `json:"progressTaskId,omitempty"`

		StatsTaskID *string `json:"statsTaskId,omitempty"`

		IndexingTaskID *string `json:"indexingTaskId,omitempty"`

		SuccessfulObjectsCount *int64 `json:"successfulObjectsCount,omitempty"`

		FailedObjectsCount *int64 `json:"failedObjectsCount,omitempty"`

		CancelledObjectsCount *int64 `json:"cancelledObjectsCount,omitempty"`

		SuccessfulAppObjectsCount *int32 `json:"successfulAppObjectsCount,omitempty"`

		FailedAppObjectsCount *int32 `json:"failedAppObjectsCount,omitempty"`

		CancelledAppObjectsCount *int32 `json:"cancelledAppObjectsCount,omitempty"`

		Stats *ArchivalDataStats `json:"stats,omitempty"`

		IsManuallyDeleted *bool `json:"isManuallyDeleted,omitempty"`

		ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`

		DataLockConstraints *DataLockConstraints `json:"dataLockConstraints,omitempty"`

		OnLegalHold *bool `json:"onLegalHold,omitempty"`

		WormProperties *WormProperties `json:"wormProperties,omitempty"`
	}

	dataAO1.RunType = m.RunType

	dataAO1.IsSLAViolated = m.IsSLAViolated

	dataAO1.SnapshotID = m.SnapshotID

	dataAO1.StartTimeUsecs = m.StartTimeUsecs

	dataAO1.EndTimeUsecs = m.EndTimeUsecs

	dataAO1.QueuedTimeUsecs = m.QueuedTimeUsecs

	dataAO1.IsIncremental = m.IsIncremental

	dataAO1.IsForeverIncremental = m.IsForeverIncremental

	dataAO1.IsCadArchive = m.IsCadArchive

	dataAO1.Status = m.Status

	dataAO1.Message = m.Message

	dataAO1.ProgressTaskID = m.ProgressTaskID

	dataAO1.StatsTaskID = m.StatsTaskID

	dataAO1.IndexingTaskID = m.IndexingTaskID

	dataAO1.SuccessfulObjectsCount = m.SuccessfulObjectsCount

	dataAO1.FailedObjectsCount = m.FailedObjectsCount

	dataAO1.CancelledObjectsCount = m.CancelledObjectsCount

	dataAO1.SuccessfulAppObjectsCount = m.SuccessfulAppObjectsCount

	dataAO1.FailedAppObjectsCount = m.FailedAppObjectsCount

	dataAO1.CancelledAppObjectsCount = m.CancelledAppObjectsCount

	dataAO1.Stats = m.Stats

	dataAO1.IsManuallyDeleted = m.IsManuallyDeleted

	dataAO1.ExpiryTimeUsecs = m.ExpiryTimeUsecs

	dataAO1.DataLockConstraints = m.DataLockConstraints

	dataAO1.OnLegalHold = m.OnLegalHold

	dataAO1.WormProperties = m.WormProperties

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this archival target result
func (m *ArchivalTargetResult) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ArchivalTargetSummaryInfo
	if err := m.ArchivalTargetSummaryInfo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataLockConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWormProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var archivalTargetResultTypeRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kFull","kLog","kSystem","kHydrateCDP","kStorageArraySnapshot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		archivalTargetResultTypeRunTypePropEnum = append(archivalTargetResultTypeRunTypePropEnum, v)
	}
}

// property enum
func (m *ArchivalTargetResult) validateRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, archivalTargetResultTypeRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArchivalTargetResult) validateRunType(formats strfmt.Registry) error {

	if swag.IsZero(m.RunType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunTypeEnum("runType", "body", *m.RunType); err != nil {
		return err
	}

	return nil
}

var archivalTargetResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold","Paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		archivalTargetResultTypeStatusPropEnum = append(archivalTargetResultTypeStatusPropEnum, v)
	}
}

// property enum
func (m *ArchivalTargetResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, archivalTargetResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArchivalTargetResult) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ArchivalTargetResult) validateStats(formats strfmt.Registry) error {

	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalTargetResult) validateDataLockConstraints(formats strfmt.Registry) error {

	if swag.IsZero(m.DataLockConstraints) { // not required
		return nil
	}

	if m.DataLockConstraints != nil {
		if err := m.DataLockConstraints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataLockConstraints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataLockConstraints")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalTargetResult) validateWormProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.WormProperties) { // not required
		return nil
	}

	if m.WormProperties != nil {
		if err := m.WormProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wormProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wormProperties")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this archival target result based on the context it is used
func (m *ArchivalTargetResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ArchivalTargetSummaryInfo
	if err := m.ArchivalTargetSummaryInfo.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataLockConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWormProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchivalTargetResult) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalTargetResult) contextValidateDataLockConstraints(ctx context.Context, formats strfmt.Registry) error {

	if m.DataLockConstraints != nil {

		if swag.IsZero(m.DataLockConstraints) { // not required
			return nil
		}

		if err := m.DataLockConstraints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataLockConstraints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataLockConstraints")
			}
			return err
		}
	}

	return nil
}

func (m *ArchivalTargetResult) contextValidateWormProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.WormProperties != nil {

		if swag.IsZero(m.WormProperties) { // not required
			return nil
		}

		if err := m.WormProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wormProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wormProperties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArchivalTargetResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchivalTargetResult) UnmarshalBinary(b []byte) error {
	var res ArchivalTargetResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
