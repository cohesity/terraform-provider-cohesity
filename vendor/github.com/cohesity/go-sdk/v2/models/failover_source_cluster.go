// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FailoverSourceCluster Failover source cluster.
//
// Specifies the details about source cluster involved in the failover operation.
//
// swagger:model FailoverSourceCluster
type FailoverSourceCluster struct {

	// Specifies the source cluster Id involved in failover operation.
	// Required: true
	ID *int64 `json:"id"`

	// Specifies the source cluster incarnation Id involved in failover operation.
	// Read Only: true
	IncarnationID *int64 `json:"incarnationId,omitempty"`

	// Specifies the protection group Id involved in failover operation.
	// Read Only: true
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// If failover is initiated by view based orchastrator, then this field specifies the local view id of source cluster which is being failed over.
	// Read Only: true
	ViewID *int64 `json:"viewId,omitempty"`
}

// Validate validates this failover source cluster
func (m *FailoverSourceCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FailoverSourceCluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this failover source cluster based on the context it is used
func (m *FailoverSourceCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIncarnationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionGroupID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FailoverSourceCluster) contextValidateIncarnationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "incarnationId", "body", m.IncarnationID); err != nil {
		return err
	}

	return nil
}

func (m *FailoverSourceCluster) contextValidateProtectionGroupID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "protectionGroupId", "body", m.ProtectionGroupID); err != nil {
		return err
	}

	return nil
}

func (m *FailoverSourceCluster) contextValidateViewID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "viewId", "body", m.ViewID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FailoverSourceCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FailoverSourceCluster) UnmarshalBinary(b []byte) error {
	var res FailoverSourceCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
