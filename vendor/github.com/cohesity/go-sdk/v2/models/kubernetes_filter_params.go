// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KubernetesFilterParams Kubernetes Filter Params.
//
// Specifies the parameters to in/exclude objects (e.g.: volumes). An object satisfying any of these criteria will be included by this filter.
//
// swagger:model KubernetesFilterParams
type KubernetesFilterParams struct {

	// Array of objects that are to be included.
	// Unique: true
	Objects []int64 `json:"objects"`

	// Array of Object to represent Label that Specify Objects (e.g.: Persistent Volumes and Persistent Volume Claims) to Include or Exclude.It will be a two-dimensional array, where each inner array will consist of a key and value representing labels. Using this two dimensional array of Labels, the Cluster generates a list of items to include in the filter, which are derived from intersections or the union of these labels, as decided by operation parameter.
	// Unique: true
	LabelVector []*KubernetesLabel `json:"labelVector"`

	// Whether to include all the labels or any of them while performing inclusion/exclusion of objects.
	// Enum: ["AND","OR"]
	LabelCombinationMethod *string `json:"labelCombinationMethod,omitempty"`
}

// Validate validates this kubernetes filter params
func (m *KubernetesFilterParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelVector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelCombinationMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesFilterParams) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	if err := validate.UniqueItems("objects", "body", m.Objects); err != nil {
		return err
	}

	return nil
}

func (m *KubernetesFilterParams) validateLabelVector(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelVector) { // not required
		return nil
	}

	if err := validate.UniqueItems("labelVector", "body", m.LabelVector); err != nil {
		return err
	}

	for i := 0; i < len(m.LabelVector); i++ {
		if swag.IsZero(m.LabelVector[i]) { // not required
			continue
		}

		if m.LabelVector[i] != nil {
			if err := m.LabelVector[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelVector" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelVector" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var kubernetesFilterParamsTypeLabelCombinationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AND","OR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kubernetesFilterParamsTypeLabelCombinationMethodPropEnum = append(kubernetesFilterParamsTypeLabelCombinationMethodPropEnum, v)
	}
}

const (

	// KubernetesFilterParamsLabelCombinationMethodAND captures enum value "AND"
	KubernetesFilterParamsLabelCombinationMethodAND string = "AND"

	// KubernetesFilterParamsLabelCombinationMethodOR captures enum value "OR"
	KubernetesFilterParamsLabelCombinationMethodOR string = "OR"
)

// prop value enum
func (m *KubernetesFilterParams) validateLabelCombinationMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kubernetesFilterParamsTypeLabelCombinationMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KubernetesFilterParams) validateLabelCombinationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelCombinationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateLabelCombinationMethodEnum("labelCombinationMethod", "body", *m.LabelCombinationMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this kubernetes filter params based on the context it is used
func (m *KubernetesFilterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelVector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesFilterParams) contextValidateLabelVector(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelVector); i++ {

		if m.LabelVector[i] != nil {

			if swag.IsZero(m.LabelVector[i]) { // not required
				return nil
			}

			if err := m.LabelVector[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelVector" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelVector" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesFilterParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesFilterParams) UnmarshalBinary(b []byte) error {
	var res KubernetesFilterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
