// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExchangeRecoverDatabaseParams Exchange database Recovery params.
//
// Specifies the parameters to recover an Exchange database. database.
//
// swagger:model ExchangeRecoverDatabaseParams
type ExchangeRecoverDatabaseParams struct {

	// Specifies the parameter whether the recovery should be performed to a new or an existing Source Target.
	// Required: true
	RecoverToNewSource *bool `json:"recoverToNewSource"`

	// Specifies the type of exchange restore.
	// Required: true
	// Enum: ["RestoreView"]
	RestoreType *string `json:"restoreType"`

	// Specifies the parameters related to the Exchange restore of type view. This is mandatory if restore type is RestoreView.
	ViewOptions *ViewOptions `json:"viewOptions,omitempty"`

	// Specifies the source id of Exchange database which has to be recovered.
	// Required: true
	DatabaseSource *RecoveryObjectIdentifier `json:"databaseSource"`

	// Specifies the recovery target configuration if recovery has to be done to a different location which is different from original source.
	RecoveryTargetConfig *ExchangeDatabaseRecoveryTargetConfig `json:"recoveryTargetConfig,omitempty"`
}

// Validate validates this exchange recover database params
func (m *ExchangeRecoverDatabaseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoverToNewSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryTargetConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeRecoverDatabaseParams) validateRecoverToNewSource(formats strfmt.Registry) error {

	if err := validate.Required("recoverToNewSource", "body", m.RecoverToNewSource); err != nil {
		return err
	}

	return nil
}

var exchangeRecoverDatabaseParamsTypeRestoreTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RestoreView"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exchangeRecoverDatabaseParamsTypeRestoreTypePropEnum = append(exchangeRecoverDatabaseParamsTypeRestoreTypePropEnum, v)
	}
}

const (

	// ExchangeRecoverDatabaseParamsRestoreTypeRestoreView captures enum value "RestoreView"
	ExchangeRecoverDatabaseParamsRestoreTypeRestoreView string = "RestoreView"
)

// prop value enum
func (m *ExchangeRecoverDatabaseParams) validateRestoreTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exchangeRecoverDatabaseParamsTypeRestoreTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExchangeRecoverDatabaseParams) validateRestoreType(formats strfmt.Registry) error {

	if err := validate.Required("restoreType", "body", m.RestoreType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRestoreTypeEnum("restoreType", "body", *m.RestoreType); err != nil {
		return err
	}

	return nil
}

func (m *ExchangeRecoverDatabaseParams) validateViewOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewOptions) { // not required
		return nil
	}

	if m.ViewOptions != nil {
		if err := m.ViewOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeRecoverDatabaseParams) validateDatabaseSource(formats strfmt.Registry) error {

	if err := validate.Required("databaseSource", "body", m.DatabaseSource); err != nil {
		return err
	}

	if m.DatabaseSource != nil {
		if err := m.DatabaseSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("databaseSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("databaseSource")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeRecoverDatabaseParams) validateRecoveryTargetConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryTargetConfig) { // not required
		return nil
	}

	if m.RecoveryTargetConfig != nil {
		if err := m.RecoveryTargetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveryTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveryTargetConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exchange recover database params based on the context it is used
func (m *ExchangeRecoverDatabaseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateViewOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatabaseSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveryTargetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeRecoverDatabaseParams) contextValidateViewOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewOptions != nil {

		if swag.IsZero(m.ViewOptions) { // not required
			return nil
		}

		if err := m.ViewOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeRecoverDatabaseParams) contextValidateDatabaseSource(ctx context.Context, formats strfmt.Registry) error {

	if m.DatabaseSource != nil {

		if err := m.DatabaseSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("databaseSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("databaseSource")
			}
			return err
		}
	}

	return nil
}

func (m *ExchangeRecoverDatabaseParams) contextValidateRecoveryTargetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoveryTargetConfig != nil {

		if swag.IsZero(m.RecoveryTargetConfig) { // not required
			return nil
		}

		if err := m.RecoveryTargetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveryTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveryTargetConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeRecoverDatabaseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeRecoverDatabaseParams) UnmarshalBinary(b []byte) error {
	var res ExchangeRecoverDatabaseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
