// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhysicalTargetParamsForRecoverFileAndFolder Physical Target Params for Recover File And Folder
//
// Specifies the parameters for a Physical recovery target.
//
// swagger:model PhysicalTargetParamsForRecoverFileAndFolder
type PhysicalTargetParamsForRecoverFileAndFolder struct {

	// If this is true, then files will be restored to original paths.
	RestoreToOriginalPaths *bool `json:"restoreToOriginalPaths,omitempty"`

	// Specifies whether to overwrite existing file/folder during recovery.
	OverwriteExisting *bool `json:"overwriteExisting,omitempty"`

	// Specifies the directory path where restore should happen if restore_to_original_paths is set to false.
	AlternateRestoreDirectory *string `json:"alternateRestoreDirectory,omitempty"`

	// Specifies whether to preserve file/folder attributes during recovery.
	PreserveAttributes *bool `json:"preserveAttributes,omitempty"`

	// Whether to preserve the original time stamps.
	PreserveTimestamps *bool `json:"preserveTimestamps,omitempty"`

	// Whether to preserve the ACLs of the original file.
	PreserveAcls *bool `json:"preserveAcls,omitempty"`

	// Specifies whether to continue recovering other volumes if one of the volumes fails to recover. Default value is false.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies whether to save success files or not. Default value is false
	SaveSuccessFiles *bool `json:"saveSuccessFiles,omitempty"`

	// Specifies the restore type (restore everything or ACLs only) when restoring or downloading files or folders from a Physical file based or block based backup snapshot.
	// Enum: ["kRegular","kACLOnly"]
	RestoreEntityType *string `json:"restoreEntityType,omitempty"`

	// Specifies the target entity where the volumes are being mounted.
	// Required: true
	RecoverTarget *RecoverTarget `json:"recoverTarget"`

	// Specifies VLAN Params associated with the recovered. If this is not specified, then the VLAN settings will be automatically selected from one of the below options: a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be automatically based on the client's (e.g. ESXI host) IP address. b. If VLANs are not configured on Cohesity, then the partition hostname or VIPs will be used for Recovery.
	VlanConfig *RecoveryVlanConfig `json:"vlanConfig,omitempty"`
}

// Validate validates this physical target params for recover file and folder
func (m *PhysicalTargetParamsForRecoverFileAndFolder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestoreEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var physicalTargetParamsForRecoverFileAndFolderTypeRestoreEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kACLOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		physicalTargetParamsForRecoverFileAndFolderTypeRestoreEntityTypePropEnum = append(physicalTargetParamsForRecoverFileAndFolderTypeRestoreEntityTypePropEnum, v)
	}
}

const (

	// PhysicalTargetParamsForRecoverFileAndFolderRestoreEntityTypeKRegular captures enum value "kRegular"
	PhysicalTargetParamsForRecoverFileAndFolderRestoreEntityTypeKRegular string = "kRegular"

	// PhysicalTargetParamsForRecoverFileAndFolderRestoreEntityTypeKACLOnly captures enum value "kACLOnly"
	PhysicalTargetParamsForRecoverFileAndFolderRestoreEntityTypeKACLOnly string = "kACLOnly"
)

// prop value enum
func (m *PhysicalTargetParamsForRecoverFileAndFolder) validateRestoreEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, physicalTargetParamsForRecoverFileAndFolderTypeRestoreEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PhysicalTargetParamsForRecoverFileAndFolder) validateRestoreEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.RestoreEntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRestoreEntityTypeEnum("restoreEntityType", "body", *m.RestoreEntityType); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalTargetParamsForRecoverFileAndFolder) validateRecoverTarget(formats strfmt.Registry) error {

	if err := validate.Required("recoverTarget", "body", m.RecoverTarget); err != nil {
		return err
	}

	if m.RecoverTarget != nil {
		if err := m.RecoverTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverTarget")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalTargetParamsForRecoverFileAndFolder) validateVlanConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanConfig) { // not required
		return nil
	}

	if m.VlanConfig != nil {
		if err := m.VlanConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this physical target params for recover file and folder based on the context it is used
func (m *PhysicalTargetParamsForRecoverFileAndFolder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecoverTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalTargetParamsForRecoverFileAndFolder) contextValidateRecoverTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverTarget != nil {

		if err := m.RecoverTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverTarget")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalTargetParamsForRecoverFileAndFolder) contextValidateVlanConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanConfig != nil {

		if swag.IsZero(m.VlanConfig) { // not required
			return nil
		}

		if err := m.VlanConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalTargetParamsForRecoverFileAndFolder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalTargetParamsForRecoverFileAndFolder) UnmarshalBinary(b []byte) error {
	var res PhysicalTargetParamsForRecoverFileAndFolder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
