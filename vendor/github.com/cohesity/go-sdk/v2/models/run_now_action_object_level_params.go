// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RunNowActionObjectLevelParams Specifies the request parameters for RunNow action on a Protected object.
//
// swagger:model RunNowActionObjectLevelParams
type RunNowActionObjectLevelParams struct {
	ProtectionObjectInput

	// If sepcified as true then runNow will only take local snapshot ignoring all other targets such as replication, archivals etc. If not sepcified or specified as false then runNow will follow the policy settings.
	TakeLocalSnapshotOnly *bool `json:"takeLocalSnapshotOnly,omitempty"`

	// Specifies the backup type should be used for RunNow action.
	// Enum: ["kRegular","kFull","kLog","kSystem","kHydrateCDP","kStorageArraySnapshot"]
	BackupType string `json:"backupType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RunNowActionObjectLevelParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ProtectionObjectInput
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ProtectionObjectInput = aO0

	// AO1
	var dataAO1 struct {
		TakeLocalSnapshotOnly *bool `json:"takeLocalSnapshotOnly,omitempty"`

		BackupType string `json:"backupType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.TakeLocalSnapshotOnly = dataAO1.TakeLocalSnapshotOnly

	m.BackupType = dataAO1.BackupType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RunNowActionObjectLevelParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ProtectionObjectInput)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		TakeLocalSnapshotOnly *bool `json:"takeLocalSnapshotOnly,omitempty"`

		BackupType string `json:"backupType,omitempty"`
	}

	dataAO1.TakeLocalSnapshotOnly = m.TakeLocalSnapshotOnly

	dataAO1.BackupType = m.BackupType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this run now action object level params
func (m *RunNowActionObjectLevelParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ProtectionObjectInput
	if err := m.ProtectionObjectInput.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var runNowActionObjectLevelParamsTypeBackupTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kRegular","kFull","kLog","kSystem","kHydrateCDP","kStorageArraySnapshot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runNowActionObjectLevelParamsTypeBackupTypePropEnum = append(runNowActionObjectLevelParamsTypeBackupTypePropEnum, v)
	}
}

// property enum
func (m *RunNowActionObjectLevelParams) validateBackupTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, runNowActionObjectLevelParamsTypeBackupTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RunNowActionObjectLevelParams) validateBackupType(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackupTypeEnum("backupType", "body", m.BackupType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this run now action object level params based on the context it is used
func (m *RunNowActionObjectLevelParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ProtectionObjectInput
	if err := m.ProtectionObjectInput.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *RunNowActionObjectLevelParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunNowActionObjectLevelParams) UnmarshalBinary(b []byte) error {
	var res RunNowActionObjectLevelParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
