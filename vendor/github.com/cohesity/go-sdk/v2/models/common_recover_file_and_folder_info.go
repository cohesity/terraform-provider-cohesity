// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonRecoverFileAndFolderInfo Common File And Folder Info
//
// Specifies the information about the specific file or folder to recover.
//
// swagger:model CommonRecoverFileAndFolderInfo
type CommonRecoverFileAndFolderInfo struct {

	// Specifies the absolute path to the file or folder.
	// Required: true
	AbsolutePath *string `json:"absolutePath"`

	// Specifies the destination directory where the file/directory was copied.
	// Read Only: true
	DestinationDir *string `json:"destinationDir,omitempty"`

	// Specifies whether this is a directory or not.
	IsDirectory *bool `json:"isDirectory,omitempty"`

	// Specifies the recovery status for this file or folder.
	// Read Only: true
	// Enum: ["NotStarted","EstimationInProgress","EstimationDone","CopyInProgress","Finished"]
	Status *string `json:"status,omitempty"`

	// Specify error messages about the file during recovery.
	// Read Only: true
	Messages []string `json:"messages"`

	// Specify if the recovery is of type view file/folder.
	IsViewFileRecovery *bool `json:"isViewFileRecovery,omitempty"`
}

// Validate validates this common recover file and folder info
func (m *CommonRecoverFileAndFolderInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbsolutePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonRecoverFileAndFolderInfo) validateAbsolutePath(formats strfmt.Registry) error {

	if err := validate.Required("absolutePath", "body", m.AbsolutePath); err != nil {
		return err
	}

	return nil
}

var commonRecoverFileAndFolderInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotStarted","EstimationInProgress","EstimationDone","CopyInProgress","Finished"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonRecoverFileAndFolderInfoTypeStatusPropEnum = append(commonRecoverFileAndFolderInfoTypeStatusPropEnum, v)
	}
}

const (

	// CommonRecoverFileAndFolderInfoStatusNotStarted captures enum value "NotStarted"
	CommonRecoverFileAndFolderInfoStatusNotStarted string = "NotStarted"

	// CommonRecoverFileAndFolderInfoStatusEstimationInProgress captures enum value "EstimationInProgress"
	CommonRecoverFileAndFolderInfoStatusEstimationInProgress string = "EstimationInProgress"

	// CommonRecoverFileAndFolderInfoStatusEstimationDone captures enum value "EstimationDone"
	CommonRecoverFileAndFolderInfoStatusEstimationDone string = "EstimationDone"

	// CommonRecoverFileAndFolderInfoStatusCopyInProgress captures enum value "CopyInProgress"
	CommonRecoverFileAndFolderInfoStatusCopyInProgress string = "CopyInProgress"

	// CommonRecoverFileAndFolderInfoStatusFinished captures enum value "Finished"
	CommonRecoverFileAndFolderInfoStatusFinished string = "Finished"
)

// prop value enum
func (m *CommonRecoverFileAndFolderInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonRecoverFileAndFolderInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonRecoverFileAndFolderInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this common recover file and folder info based on the context it is used
func (m *CommonRecoverFileAndFolderInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationDir(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonRecoverFileAndFolderInfo) contextValidateDestinationDir(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "destinationDir", "body", m.DestinationDir); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverFileAndFolderInfo) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverFileAndFolderInfo) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "messages", "body", []string(m.Messages)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonRecoverFileAndFolderInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonRecoverFileAndFolderInfo) UnmarshalBinary(b []byte) error {
	var res CommonRecoverFileAndFolderInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
