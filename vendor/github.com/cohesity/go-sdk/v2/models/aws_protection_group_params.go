// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsProtectionGroupParams AWS Protection Group Request Params.
//
// Specifies the parameters which are specific to AWS related Protection Groups.
//
// swagger:model AwsProtectionGroupParams
type AwsProtectionGroupParams struct {

	// Specifies the AWS Protection Group type.
	// Required: true
	// Enum: ["kAgent","kNative","kSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsS3","kAwsRDSPostgresBackup","kAwsAuroraPostgres","kAwsRDSPostgres"]
	ProtectionType *string `json:"protectionType"`

	// Specifies the parameters which are specific to AWS related Protection Groups using cohesity protection-service installed on EC2 instance.
	AgentProtectionTypeParams *AwsAgentProtectionGroupParams `json:"agentProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS related Protection Groups using AWS native snapshot APIs.
	NativeProtectionTypeParams *AwsNativeProtectionGroupParams `json:"nativeProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS related Protection Groups using AWS native snapshot orchestration with snapshot manager.
	SnapshotManagerProtectionTypeParams *AwsSnapshotManagerProtectionGroupParams `json:"snapshotManagerProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS RDS related Protection Groups.
	RdsProtectionTypeParams *AwsRdsProtectionGroupParams `json:"rdsProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS Aurora related Protection Groups.
	AuroraProtectionTypeParams *AwsAuroraProtectionGroupParams `json:"auroraProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS S3 Protection.
	S3ProtectionTypeParams *AwsS3ProtectionGroupParams `json:"s3ProtectionTypeParams,omitempty"`

	// Specifies the parameters which are specific to AWS RDS Postgres related Protection Groups.
	RdsPostgresProtectionTypeParams *AwsRdsPostgresProtectionGroupParams `json:"rdsPostgresProtectionTypeParams,omitempty"`
}

// Validate validates this aws protection group params
func (m *AwsProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNativeProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotManagerProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuroraProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3ProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsPostgresProtectionTypeParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var awsProtectionGroupParamsTypeProtectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAgent","kNative","kSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsS3","kAwsRDSPostgresBackup","kAwsAuroraPostgres","kAwsRDSPostgres"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsProtectionGroupParamsTypeProtectionTypePropEnum = append(awsProtectionGroupParamsTypeProtectionTypePropEnum, v)
	}
}

const (

	// AwsProtectionGroupParamsProtectionTypeKAgent captures enum value "kAgent"
	AwsProtectionGroupParamsProtectionTypeKAgent string = "kAgent"

	// AwsProtectionGroupParamsProtectionTypeKNative captures enum value "kNative"
	AwsProtectionGroupParamsProtectionTypeKNative string = "kNative"

	// AwsProtectionGroupParamsProtectionTypeKSnapshotManager captures enum value "kSnapshotManager"
	AwsProtectionGroupParamsProtectionTypeKSnapshotManager string = "kSnapshotManager"

	// AwsProtectionGroupParamsProtectionTypeKRDSSnapshotManager captures enum value "kRDSSnapshotManager"
	AwsProtectionGroupParamsProtectionTypeKRDSSnapshotManager string = "kRDSSnapshotManager"

	// AwsProtectionGroupParamsProtectionTypeKAuroraSnapshotManager captures enum value "kAuroraSnapshotManager"
	AwsProtectionGroupParamsProtectionTypeKAuroraSnapshotManager string = "kAuroraSnapshotManager"

	// AwsProtectionGroupParamsProtectionTypeKAwsS3 captures enum value "kAwsS3"
	AwsProtectionGroupParamsProtectionTypeKAwsS3 string = "kAwsS3"

	// AwsProtectionGroupParamsProtectionTypeKAwsRDSPostgresBackup captures enum value "kAwsRDSPostgresBackup"
	AwsProtectionGroupParamsProtectionTypeKAwsRDSPostgresBackup string = "kAwsRDSPostgresBackup"

	// AwsProtectionGroupParamsProtectionTypeKAwsAuroraPostgres captures enum value "kAwsAuroraPostgres"
	AwsProtectionGroupParamsProtectionTypeKAwsAuroraPostgres string = "kAwsAuroraPostgres"

	// AwsProtectionGroupParamsProtectionTypeKAwsRDSPostgres captures enum value "kAwsRDSPostgres"
	AwsProtectionGroupParamsProtectionTypeKAwsRDSPostgres string = "kAwsRDSPostgres"
)

// prop value enum
func (m *AwsProtectionGroupParams) validateProtectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, awsProtectionGroupParamsTypeProtectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AwsProtectionGroupParams) validateProtectionType(formats strfmt.Registry) error {

	if err := validate.Required("protectionType", "body", m.ProtectionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtectionTypeEnum("protectionType", "body", *m.ProtectionType); err != nil {
		return err
	}

	return nil
}

func (m *AwsProtectionGroupParams) validateAgentProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentProtectionTypeParams) { // not required
		return nil
	}

	if m.AgentProtectionTypeParams != nil {
		if err := m.AgentProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) validateNativeProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NativeProtectionTypeParams) { // not required
		return nil
	}

	if m.NativeProtectionTypeParams != nil {
		if err := m.NativeProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nativeProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nativeProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) validateSnapshotManagerProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotManagerProtectionTypeParams) { // not required
		return nil
	}

	if m.SnapshotManagerProtectionTypeParams != nil {
		if err := m.SnapshotManagerProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotManagerProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotManagerProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) validateRdsProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RdsProtectionTypeParams) { // not required
		return nil
	}

	if m.RdsProtectionTypeParams != nil {
		if err := m.RdsProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) validateAuroraProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AuroraProtectionTypeParams) { // not required
		return nil
	}

	if m.AuroraProtectionTypeParams != nil {
		if err := m.AuroraProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) validateS3ProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.S3ProtectionTypeParams) { // not required
		return nil
	}

	if m.S3ProtectionTypeParams != nil {
		if err := m.S3ProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3ProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3ProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) validateRdsPostgresProtectionTypeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RdsPostgresProtectionTypeParams) { // not required
		return nil
	}

	if m.RdsPostgresProtectionTypeParams != nil {
		if err := m.RdsPostgresProtectionTypeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsPostgresProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsPostgresProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws protection group params based on the context it is used
func (m *AwsProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNativeProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotManagerProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRdsProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuroraProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3ProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRdsPostgresProtectionTypeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsProtectionGroupParams) contextValidateAgentProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentProtectionTypeParams != nil {

		if swag.IsZero(m.AgentProtectionTypeParams) { // not required
			return nil
		}

		if err := m.AgentProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) contextValidateNativeProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NativeProtectionTypeParams != nil {

		if swag.IsZero(m.NativeProtectionTypeParams) { // not required
			return nil
		}

		if err := m.NativeProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nativeProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nativeProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) contextValidateSnapshotManagerProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotManagerProtectionTypeParams != nil {

		if swag.IsZero(m.SnapshotManagerProtectionTypeParams) { // not required
			return nil
		}

		if err := m.SnapshotManagerProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotManagerProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotManagerProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) contextValidateRdsProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RdsProtectionTypeParams != nil {

		if swag.IsZero(m.RdsProtectionTypeParams) { // not required
			return nil
		}

		if err := m.RdsProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) contextValidateAuroraProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AuroraProtectionTypeParams != nil {

		if swag.IsZero(m.AuroraProtectionTypeParams) { // not required
			return nil
		}

		if err := m.AuroraProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) contextValidateS3ProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.S3ProtectionTypeParams != nil {

		if swag.IsZero(m.S3ProtectionTypeParams) { // not required
			return nil
		}

		if err := m.S3ProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3ProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3ProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsProtectionGroupParams) contextValidateRdsPostgresProtectionTypeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RdsPostgresProtectionTypeParams != nil {

		if swag.IsZero(m.RdsPostgresProtectionTypeParams) { // not required
			return nil
		}

		if err := m.RdsPostgresProtectionTypeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsPostgresProtectionTypeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsPostgresProtectionTypeParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res AwsProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
