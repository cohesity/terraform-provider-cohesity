// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IdentityAction Identity Action
//
// swagger:model IdentityAction
type IdentityAction struct {

	// Specifies the type of identity provider the action will be performed on.
	// Required: true
	// Enum: ["OpenIdConnect","OAuth2"]
	IdentityProviderType *string `json:"identityProviderType"`

	// open Id connect params
	OpenIDConnectParams *OpenIDConnectAction `json:"openIdConnectParams,omitempty"`

	// o auth2 params
	OAuth2Params *OAuth2Action `json:"oAuth2Params,omitempty"`
}

// Validate validates this identity action
func (m *IdentityAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentityProviderType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenIDConnectParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOAuth2Params(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var identityActionTypeIdentityProviderTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OpenIdConnect","OAuth2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		identityActionTypeIdentityProviderTypePropEnum = append(identityActionTypeIdentityProviderTypePropEnum, v)
	}
}

const (

	// IdentityActionIdentityProviderTypeOpenIDConnect captures enum value "OpenIdConnect"
	IdentityActionIdentityProviderTypeOpenIDConnect string = "OpenIdConnect"

	// IdentityActionIdentityProviderTypeOAuth2 captures enum value "OAuth2"
	IdentityActionIdentityProviderTypeOAuth2 string = "OAuth2"
)

// prop value enum
func (m *IdentityAction) validateIdentityProviderTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, identityActionTypeIdentityProviderTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IdentityAction) validateIdentityProviderType(formats strfmt.Registry) error {

	if err := validate.Required("identityProviderType", "body", m.IdentityProviderType); err != nil {
		return err
	}

	// value enum
	if err := m.validateIdentityProviderTypeEnum("identityProviderType", "body", *m.IdentityProviderType); err != nil {
		return err
	}

	return nil
}

func (m *IdentityAction) validateOpenIDConnectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenIDConnectParams) { // not required
		return nil
	}

	if m.OpenIDConnectParams != nil {
		if err := m.OpenIDConnectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openIdConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openIdConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *IdentityAction) validateOAuth2Params(formats strfmt.Registry) error {
	if swag.IsZero(m.OAuth2Params) { // not required
		return nil
	}

	if m.OAuth2Params != nil {
		if err := m.OAuth2Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oAuth2Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oAuth2Params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this identity action based on the context it is used
func (m *IdentityAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOpenIDConnectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOAuth2Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentityAction) contextValidateOpenIDConnectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OpenIDConnectParams != nil {

		if swag.IsZero(m.OpenIDConnectParams) { // not required
			return nil
		}

		if err := m.OpenIDConnectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openIdConnectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openIdConnectParams")
			}
			return err
		}
	}

	return nil
}

func (m *IdentityAction) contextValidateOAuth2Params(ctx context.Context, formats strfmt.Registry) error {

	if m.OAuth2Params != nil {

		if swag.IsZero(m.OAuth2Params) { // not required
			return nil
		}

		if err := m.OAuth2Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oAuth2Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oAuth2Params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdentityAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentityAction) UnmarshalBinary(b []byte) error {
	var res IdentityAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
