// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SyslogServer Syslog Server.
//
// Specifies information about syslog server.
//
// swagger:model SyslogServer
type SyslogServer struct {

	// The id of the syslog server.
	ID *int32 `json:"id,omitempty"`

	// Specifies the IP address or hostname of the syslog server.
	IP *string `json:"ip,omitempty"`

	// Specifies the port where the syslog server listens.
	Port *int32 `json:"port,omitempty"`

	// Specifies the protocol used to send the logs.
	Protocol *string `json:"protocol,omitempty"`

	// Specifies a unique name for the syslog server on the Cluster.
	Name *string `json:"name,omitempty"`

	// Specifies whether to enable the syslog server on the Cluster.
	Enabled *bool `json:"enabled,omitempty"`

	// Send enabled syslog facilities related logs to logging server.
	FacilityList []string `json:"facilityList"`

	// Send programes related logs to logging server.
	ProgramNameList []string `json:"programNameList"`

	// Send logs including the msg patterns to logging server.
	MsgPatternList []string `json:"msgPatternList"`

	// Send logs including the msg patterns to logging server.
	RawMsgPatternList []string `json:"rawMsgPatternList"`

	// Specify whether to enable tls support.
	IsTLSEnabled *bool `json:"isTlsEnabled,omitempty"`

	// Syslog server CA certificate.
	CaCertificate *string `json:"caCertificate,omitempty"`

	// TokenId used for filtering messages on a relay or collector
	TokenID *string `json:"tokenId,omitempty"`
}

// Validate validates this syslog server
func (m *SyslogServer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this syslog server based on context it is used
func (m *SyslogServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SyslogServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyslogServer) UnmarshalBinary(b []byte) error {
	var res SyslogServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
