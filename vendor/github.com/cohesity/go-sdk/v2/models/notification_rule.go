// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationRule Details about the Alert Notification rule.
//
// swagger:model NotificationRule
type NotificationRule struct {

	// Unique id of the notification rule
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Name of the notification rule
	// Required: true
	RuleName *string `json:"ruleName"`

	// Tenant id that this rule is applicable to
	TenantID *string `json:"tenantId,omitempty"`

	// Alert categories that this rule is applicable to
	Categories []string `json:"categories"`

	// Alert names that this rule is applicable to
	AlertNames []string `json:"alertNames"`

	// Alert severity levels this rule is applicable to
	Severities []string `json:"severities"`

	// Email configs for the alerts matching this rule
	EmailDeliveryTargets []*EmailDeliveryTarget `json:"emailDeliveryTargets"`

	// Webhook configs for the alerts matching this rule
	WebhookDeliveryTargets []*WebhookDeliveryTarget `json:"webhookDeliveryTargets"`

	// Whether syslog is enabled as part of this notification
	SyslogEnabled bool `json:"syslogEnabled,omitempty"`

	// Whether snmp is enabled as part of this notification
	SnmpEnabled bool `json:"snmpEnabled,omitempty"`
}

// Validate validates this notification rule
func (m *NotificationRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRuleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailDeliveryTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookDeliveryTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationRule) validateRuleName(formats strfmt.Registry) error {

	if err := validate.Required("ruleName", "body", m.RuleName); err != nil {
		return err
	}

	return nil
}

var notificationRuleCategoriesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDisk","kNode","kCluster","kChassis","kPowerSupply","kCPU","kMemory","kTemperature","kFan","kNIC","kFirmware","kNodeHealth","kOperatingSystem","kDataPath","kMetadata","kIndexing","kHelios","kAppMarketPlace","kSystemService","kLicense","kSecurity","kUpgrade","kClusterManagement","kAuditLog","kNetworking","kConfiguration","kStorageUsage","kFaultTolerance","kBackupRestore","kArchivalRestore","kRemoteReplication","kQuota","kCDP","kViewFailover","kDisasterRecovery","kStorageDevice","kStoragePool","kGeneralSoftwareFailure","kAgent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationRuleCategoriesItemsEnum = append(notificationRuleCategoriesItemsEnum, v)
	}
}

func (m *NotificationRule) validateCategoriesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationRuleCategoriesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NotificationRule) validateCategories(formats strfmt.Registry) error {
	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for i := 0; i < len(m.Categories); i++ {

		// value enum
		if err := m.validateCategoriesItemsEnum("categories"+"."+strconv.Itoa(i), "body", m.Categories[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *NotificationRule) validateEmailDeliveryTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailDeliveryTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailDeliveryTargets); i++ {
		if swag.IsZero(m.EmailDeliveryTargets[i]) { // not required
			continue
		}

		if m.EmailDeliveryTargets[i] != nil {
			if err := m.EmailDeliveryTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NotificationRule) validateWebhookDeliveryTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.WebhookDeliveryTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.WebhookDeliveryTargets); i++ {
		if swag.IsZero(m.WebhookDeliveryTargets[i]) { // not required
			continue
		}

		if m.WebhookDeliveryTargets[i] != nil {
			if err := m.WebhookDeliveryTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("webhookDeliveryTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("webhookDeliveryTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this notification rule based on the context it is used
func (m *NotificationRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmailDeliveryTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebhookDeliveryTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationRule) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *NotificationRule) contextValidateEmailDeliveryTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EmailDeliveryTargets); i++ {

		if m.EmailDeliveryTargets[i] != nil {

			if swag.IsZero(m.EmailDeliveryTargets[i]) { // not required
				return nil
			}

			if err := m.EmailDeliveryTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emailDeliveryTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NotificationRule) contextValidateWebhookDeliveryTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WebhookDeliveryTargets); i++ {

		if m.WebhookDeliveryTargets[i] != nil {

			if swag.IsZero(m.WebhookDeliveryTargets[i]) { // not required
				return nil
			}

			if err := m.WebhookDeliveryTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("webhookDeliveryTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("webhookDeliveryTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotificationRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationRule) UnmarshalBinary(b []byte) error {
	var res NotificationRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
