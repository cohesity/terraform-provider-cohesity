// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterSWUpdateParams Specifies the parameters to update the software on the cluster.
//
// swagger:model ClusterSWUpdateParams
type ClusterSWUpdateParams struct {

	// The operation type.
	// * `DownloadUpgradePackage` - Operation to download upgrade package.
	// * `DownloadPatchPackage` - Operation to download patch package.
	// * `DownloadUpgradeAndPatchPackages` - Operation to download upgrade
	//    and patch packages.
	// * `DownloadAndUpgrade` - Operation to download package and
	//    and then upgrade the cluster.
	// * `DownloadAndApplyPatch` - Operation to download package and
	//    and then apply the patch.
	// * `DownloadAndUpgradeWithPatch` - Operation to download upgrade
	//   and patch packages, and then, upgrade the cluster and immediately
	//   patch it
	// * `Upgrade` - Operation to upgrade the software on the cluster.
	// * `ApplyPatch` - Operation to apply the patch.
	// * `RevertPatch` - Operation to revert the patch.
	// * `UpgradeAndPatch` - Operation to upgrade the software on the
	//   cluster and apply a patch.
	// * `AssessSoftwareUpdate` - Operation to perform checks to assess
	//   the state of cluster pre/post software update (upgrade/patch).
	// * `AbortApplyPatch` - Operation to abort the patch.
	// * `AbortUpgrade` - Operation to abort the upgrade.
	//
	// Required: true
	// Enum: ["DownloadUpgradePackage","DownloadPatchPackage","DownloadUpgradeAndPatchPackages","DownloadAndUpgrade","DownloadAndApplyPatch","DownloadAndUpgradeWithPatch","Upgrade","ApplyPatch","RevertPatch","UpgradeAndPatch","AssessSoftwareUpdate","AbortApplyPatch","AbortUpgrade"]
	OperationType *string `json:"operationType"`

	// Specifies parameters for upgrade related operations. This is required
	// field for below operation types:
	// * `DownloadUpgradePackage`
	// * `DownloadUpgradeAndPatchPackages`
	// * `DownloadAndUpgrade`
	// * `DownloadAndUpgradeWithPatch`
	// * `Upgrade`
	// * `UpgradeAndPatch`
	//
	UpgradeParams *UpgradeParams `json:"upgradeParams,omitempty"`

	// Specifies parameters for patch related operations. This is required
	// field for below operation types:
	// * `DownloadPatchPackage`
	// * `DownloadUpgradeAndPatchPackages`
	// * `DownloadAndApplyPatch`
	// * `DownloadAndUpgradeWithPatch`
	// * `ApplyPatch`
	// * `RevertPatch`
	// * `UpgradeAndPatch`
	//
	PatchParams *PatchParams `json:"patchParams,omitempty"`

	// Required field for operation type `AssessSoftwareUpdate`
	//
	AssessSoftwareUpdateParams *AssessSoftwareUpdateParams `json:"assessSoftwareUpdateParams,omitempty"`
}

// Validate validates this cluster s w update params
func (m *ClusterSWUpdateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatchParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssessSoftwareUpdateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterSWUpdateParamsTypeOperationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DownloadUpgradePackage","DownloadPatchPackage","DownloadUpgradeAndPatchPackages","DownloadAndUpgrade","DownloadAndApplyPatch","DownloadAndUpgradeWithPatch","Upgrade","ApplyPatch","RevertPatch","UpgradeAndPatch","AssessSoftwareUpdate","AbortApplyPatch","AbortUpgrade"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterSWUpdateParamsTypeOperationTypePropEnum = append(clusterSWUpdateParamsTypeOperationTypePropEnum, v)
	}
}

const (

	// ClusterSWUpdateParamsOperationTypeDownloadUpgradePackage captures enum value "DownloadUpgradePackage"
	ClusterSWUpdateParamsOperationTypeDownloadUpgradePackage string = "DownloadUpgradePackage"

	// ClusterSWUpdateParamsOperationTypeDownloadPatchPackage captures enum value "DownloadPatchPackage"
	ClusterSWUpdateParamsOperationTypeDownloadPatchPackage string = "DownloadPatchPackage"

	// ClusterSWUpdateParamsOperationTypeDownloadUpgradeAndPatchPackages captures enum value "DownloadUpgradeAndPatchPackages"
	ClusterSWUpdateParamsOperationTypeDownloadUpgradeAndPatchPackages string = "DownloadUpgradeAndPatchPackages"

	// ClusterSWUpdateParamsOperationTypeDownloadAndUpgrade captures enum value "DownloadAndUpgrade"
	ClusterSWUpdateParamsOperationTypeDownloadAndUpgrade string = "DownloadAndUpgrade"

	// ClusterSWUpdateParamsOperationTypeDownloadAndApplyPatch captures enum value "DownloadAndApplyPatch"
	ClusterSWUpdateParamsOperationTypeDownloadAndApplyPatch string = "DownloadAndApplyPatch"

	// ClusterSWUpdateParamsOperationTypeDownloadAndUpgradeWithPatch captures enum value "DownloadAndUpgradeWithPatch"
	ClusterSWUpdateParamsOperationTypeDownloadAndUpgradeWithPatch string = "DownloadAndUpgradeWithPatch"

	// ClusterSWUpdateParamsOperationTypeUpgrade captures enum value "Upgrade"
	ClusterSWUpdateParamsOperationTypeUpgrade string = "Upgrade"

	// ClusterSWUpdateParamsOperationTypeApplyPatch captures enum value "ApplyPatch"
	ClusterSWUpdateParamsOperationTypeApplyPatch string = "ApplyPatch"

	// ClusterSWUpdateParamsOperationTypeRevertPatch captures enum value "RevertPatch"
	ClusterSWUpdateParamsOperationTypeRevertPatch string = "RevertPatch"

	// ClusterSWUpdateParamsOperationTypeUpgradeAndPatch captures enum value "UpgradeAndPatch"
	ClusterSWUpdateParamsOperationTypeUpgradeAndPatch string = "UpgradeAndPatch"

	// ClusterSWUpdateParamsOperationTypeAssessSoftwareUpdate captures enum value "AssessSoftwareUpdate"
	ClusterSWUpdateParamsOperationTypeAssessSoftwareUpdate string = "AssessSoftwareUpdate"

	// ClusterSWUpdateParamsOperationTypeAbortApplyPatch captures enum value "AbortApplyPatch"
	ClusterSWUpdateParamsOperationTypeAbortApplyPatch string = "AbortApplyPatch"

	// ClusterSWUpdateParamsOperationTypeAbortUpgrade captures enum value "AbortUpgrade"
	ClusterSWUpdateParamsOperationTypeAbortUpgrade string = "AbortUpgrade"
)

// prop value enum
func (m *ClusterSWUpdateParams) validateOperationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterSWUpdateParamsTypeOperationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterSWUpdateParams) validateOperationType(formats strfmt.Registry) error {

	if err := validate.Required("operationType", "body", m.OperationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperationTypeEnum("operationType", "body", *m.OperationType); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSWUpdateParams) validateUpgradeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.UpgradeParams) { // not required
		return nil
	}

	if m.UpgradeParams != nil {
		if err := m.UpgradeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgradeParams")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSWUpdateParams) validatePatchParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PatchParams) { // not required
		return nil
	}

	if m.PatchParams != nil {
		if err := m.PatchParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patchParams")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSWUpdateParams) validateAssessSoftwareUpdateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AssessSoftwareUpdateParams) { // not required
		return nil
	}

	if m.AssessSoftwareUpdateParams != nil {
		if err := m.AssessSoftwareUpdateParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assessSoftwareUpdateParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assessSoftwareUpdateParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster s w update params based on the context it is used
func (m *ClusterSWUpdateParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUpgradeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePatchParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssessSoftwareUpdateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSWUpdateParams) contextValidateUpgradeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UpgradeParams != nil {

		if swag.IsZero(m.UpgradeParams) { // not required
			return nil
		}

		if err := m.UpgradeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgradeParams")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSWUpdateParams) contextValidatePatchParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PatchParams != nil {

		if swag.IsZero(m.PatchParams) { // not required
			return nil
		}

		if err := m.PatchParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patchParams")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSWUpdateParams) contextValidateAssessSoftwareUpdateParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AssessSoftwareUpdateParams != nil {

		if swag.IsZero(m.AssessSoftwareUpdateParams) { // not required
			return nil
		}

		if err := m.AssessSoftwareUpdateParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assessSoftwareUpdateParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assessSoftwareUpdateParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSWUpdateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSWUpdateParams) UnmarshalBinary(b []byte) error {
	var res ClusterSWUpdateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
