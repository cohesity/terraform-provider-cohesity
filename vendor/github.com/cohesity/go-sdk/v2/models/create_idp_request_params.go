// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateIdpRequestParams Specifies parameters to configure identity provider
//
// swagger:model CreateIdpRequestParams
type CreateIdpRequestParams struct {
	CommonIdentityProviderConfiguration

	// Specifies the tenant id if the idp is configured for a tenant. If this is not set, this idp configuration is used for the cluster level users and for all users of tenants not having an idp configuration.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies name of the vendor providing idp service
	// Required: true
	Name *string `json:"name"`

	// Specifies domain of idp configuration
	// Required: true
	Domain *string `json:"domain"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CreateIdpRequestParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonIdentityProviderConfiguration
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonIdentityProviderConfiguration = aO0

	// AO1
	var dataAO1 struct {
		TenantID *string `json:"tenantId,omitempty"`

		Name *string `json:"name"`

		Domain *string `json:"domain"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.TenantID = dataAO1.TenantID

	m.Name = dataAO1.Name

	m.Domain = dataAO1.Domain

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CreateIdpRequestParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonIdentityProviderConfiguration)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		TenantID *string `json:"tenantId,omitempty"`

		Name *string `json:"name"`

		Domain *string `json:"domain"`
	}

	dataAO1.TenantID = m.TenantID

	dataAO1.Name = m.Name

	dataAO1.Domain = m.Domain

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create idp request params
func (m *CreateIdpRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonIdentityProviderConfiguration
	if err := m.CommonIdentityProviderConfiguration.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIdpRequestParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateIdpRequestParams) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create idp request params based on the context it is used
func (m *CreateIdpRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonIdentityProviderConfiguration
	if err := m.CommonIdentityProviderConfiguration.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CreateIdpRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateIdpRequestParams) UnmarshalBinary(b []byte) error {
	var res CreateIdpRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
