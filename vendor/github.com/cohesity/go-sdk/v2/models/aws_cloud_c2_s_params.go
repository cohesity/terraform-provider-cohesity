// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsCloudC2SParams AWS External Target C2S Cloud Type Params.
//
// Specifies the parameters which are specific to AWS related External Targets with Cloud Type C2S.
//
// swagger:model AwsCloudC2SParams
type AwsCloudC2SParams struct {

	// Specifies base url of the External Target.
	// Required: true
	BaseURL *string `json:"baseURL"`

	// Specifies agency of the External Target.
	// Required: true
	Agency *string `json:"agency"`

	// Specifies mission of the External Target
	// Required: true
	Mission *string `json:"mission"`

	// Specifies role of the External Target
	// Required: true
	Role *string `json:"role"`

	// Specifies client certificate password of the External Target
	// Required: true
	ClientCertificatePassword *string `json:"clientCertificatePassword"`

	// Specifies server CA trusted certificate of the External Target
	// Required: true
	ServerCATrustedCertificate *string `json:"serverCATrustedCertificate"`

	// Specifies client certificate of the External Target
	// Required: true
	ClientCertificate *string `json:"clientCertificate"`

	// Specifies client private key of the External Target
	// Required: true
	ClientPrivateKey *string `json:"clientPrivateKey"`
}

// Validate validates this aws cloud c2 s params
func (m *AwsCloudC2SParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientCertificatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerCATrustedCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientPrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsCloudC2SParams) validateBaseURL(formats strfmt.Registry) error {

	if err := validate.Required("baseURL", "body", m.BaseURL); err != nil {
		return err
	}

	return nil
}

func (m *AwsCloudC2SParams) validateAgency(formats strfmt.Registry) error {

	if err := validate.Required("agency", "body", m.Agency); err != nil {
		return err
	}

	return nil
}

func (m *AwsCloudC2SParams) validateMission(formats strfmt.Registry) error {

	if err := validate.Required("mission", "body", m.Mission); err != nil {
		return err
	}

	return nil
}

func (m *AwsCloudC2SParams) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *AwsCloudC2SParams) validateClientCertificatePassword(formats strfmt.Registry) error {

	if err := validate.Required("clientCertificatePassword", "body", m.ClientCertificatePassword); err != nil {
		return err
	}

	return nil
}

func (m *AwsCloudC2SParams) validateServerCATrustedCertificate(formats strfmt.Registry) error {

	if err := validate.Required("serverCATrustedCertificate", "body", m.ServerCATrustedCertificate); err != nil {
		return err
	}

	return nil
}

func (m *AwsCloudC2SParams) validateClientCertificate(formats strfmt.Registry) error {

	if err := validate.Required("clientCertificate", "body", m.ClientCertificate); err != nil {
		return err
	}

	return nil
}

func (m *AwsCloudC2SParams) validateClientPrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("clientPrivateKey", "body", m.ClientPrivateKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aws cloud c2 s params based on context it is used
func (m *AwsCloudC2SParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AwsCloudC2SParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsCloudC2SParams) UnmarshalBinary(b []byte) error {
	var res AwsCloudC2SParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
