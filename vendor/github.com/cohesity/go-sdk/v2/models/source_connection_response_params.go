// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SourceConnectionResponseParams Test Connection response parameters.
//
// Specifies the response from a test connection request.
//
// swagger:model SourceConnectionResponseParams
type SourceConnectionResponseParams struct {

	// Specifies the environment type of the Protection Source.
	// Required: true
	// Enum: ["kCassandra","kHive","kHBase","kHdfs","kSQL","kOracle"]
	Environment *string `json:"environment"`

	// Specifies the id of the connection from where this source is reachable. This should only be set for a source being registered by a tenant user.
	ConnectionID *int64 `json:"connectionId,omitempty"`

	// Specifies the parameters fetched by reading cassandra configuration on the seed node.
	CassandraConnectionResponseParams *CassandraSourceConfigParams `json:"cassandraConnectionResponseParams,omitempty"`

	// Specifies the parameters fetched by reading Hive configuration on the seed node.
	HiveConnectionResponseParams *HiveAdditionalParams `json:"hiveConnectionResponseParams,omitempty"`

	// Specifies the parameters fetched by reading HBase configuration on the seed node.
	HbaseConnectionResponseParams *HBaseAdditionalParams `json:"hbaseConnectionResponseParams,omitempty"`

	// Specifies the parameters fetched by reading Hdfs configuration on the seed node.
	HdfsConnectionResponseParams *HdfsAdditionalParams `json:"hdfsConnectionResponseParams,omitempty"`

	// Specifies the response parameters after connecting to a SQL node/cluster using given IP or hostname FQDN.
	MssqlConnectionResponseParams *MssqlConnectionResponseParams `json:"mssqlConnectionResponseParams,omitempty"`

	// Specifies the parameters fetched by reading VMware configuration on the seed node.
	VmwareConnectionResponseParams *VmwareAdditionalParams `json:"vmwareConnectionResponseParams,omitempty"`
}

// Validate validates this source connection response params
func (m *SourceConnectionResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraConnectionResponseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveConnectionResponseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseConnectionResponseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsConnectionResponseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMssqlConnectionResponseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareConnectionResponseParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sourceConnectionResponseParamsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCassandra","kHive","kHBase","kHdfs","kSQL","kOracle"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sourceConnectionResponseParamsTypeEnvironmentPropEnum = append(sourceConnectionResponseParamsTypeEnvironmentPropEnum, v)
	}
}

const (

	// SourceConnectionResponseParamsEnvironmentKCassandra captures enum value "kCassandra"
	SourceConnectionResponseParamsEnvironmentKCassandra string = "kCassandra"

	// SourceConnectionResponseParamsEnvironmentKHive captures enum value "kHive"
	SourceConnectionResponseParamsEnvironmentKHive string = "kHive"

	// SourceConnectionResponseParamsEnvironmentKHBase captures enum value "kHBase"
	SourceConnectionResponseParamsEnvironmentKHBase string = "kHBase"

	// SourceConnectionResponseParamsEnvironmentKHdfs captures enum value "kHdfs"
	SourceConnectionResponseParamsEnvironmentKHdfs string = "kHdfs"

	// SourceConnectionResponseParamsEnvironmentKSQL captures enum value "kSQL"
	SourceConnectionResponseParamsEnvironmentKSQL string = "kSQL"

	// SourceConnectionResponseParamsEnvironmentKOracle captures enum value "kOracle"
	SourceConnectionResponseParamsEnvironmentKOracle string = "kOracle"
)

// prop value enum
func (m *SourceConnectionResponseParams) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sourceConnectionResponseParamsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SourceConnectionResponseParams) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *SourceConnectionResponseParams) validateCassandraConnectionResponseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraConnectionResponseParams) { // not required
		return nil
	}

	if m.CassandraConnectionResponseParams != nil {
		if err := m.CassandraConnectionResponseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionResponseParams) validateHiveConnectionResponseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveConnectionResponseParams) { // not required
		return nil
	}

	if m.HiveConnectionResponseParams != nil {
		if err := m.HiveConnectionResponseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionResponseParams) validateHbaseConnectionResponseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseConnectionResponseParams) { // not required
		return nil
	}

	if m.HbaseConnectionResponseParams != nil {
		if err := m.HbaseConnectionResponseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionResponseParams) validateHdfsConnectionResponseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsConnectionResponseParams) { // not required
		return nil
	}

	if m.HdfsConnectionResponseParams != nil {
		if err := m.HdfsConnectionResponseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionResponseParams) validateMssqlConnectionResponseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MssqlConnectionResponseParams) { // not required
		return nil
	}

	if m.MssqlConnectionResponseParams != nil {
		if err := m.MssqlConnectionResponseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionResponseParams) validateVmwareConnectionResponseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareConnectionResponseParams) { // not required
		return nil
	}

	if m.VmwareConnectionResponseParams != nil {
		if err := m.VmwareConnectionResponseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this source connection response params based on the context it is used
func (m *SourceConnectionResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCassandraConnectionResponseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveConnectionResponseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseConnectionResponseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsConnectionResponseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMssqlConnectionResponseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareConnectionResponseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceConnectionResponseParams) contextValidateCassandraConnectionResponseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraConnectionResponseParams != nil {

		if swag.IsZero(m.CassandraConnectionResponseParams) { // not required
			return nil
		}

		if err := m.CassandraConnectionResponseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionResponseParams) contextValidateHiveConnectionResponseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveConnectionResponseParams != nil {

		if swag.IsZero(m.HiveConnectionResponseParams) { // not required
			return nil
		}

		if err := m.HiveConnectionResponseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionResponseParams) contextValidateHbaseConnectionResponseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseConnectionResponseParams != nil {

		if swag.IsZero(m.HbaseConnectionResponseParams) { // not required
			return nil
		}

		if err := m.HbaseConnectionResponseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionResponseParams) contextValidateHdfsConnectionResponseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsConnectionResponseParams != nil {

		if swag.IsZero(m.HdfsConnectionResponseParams) { // not required
			return nil
		}

		if err := m.HdfsConnectionResponseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionResponseParams) contextValidateMssqlConnectionResponseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MssqlConnectionResponseParams != nil {

		if swag.IsZero(m.MssqlConnectionResponseParams) { // not required
			return nil
		}

		if err := m.MssqlConnectionResponseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

func (m *SourceConnectionResponseParams) contextValidateVmwareConnectionResponseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareConnectionResponseParams != nil {

		if swag.IsZero(m.VmwareConnectionResponseParams) { // not required
			return nil
		}

		if err := m.VmwareConnectionResponseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareConnectionResponseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareConnectionResponseParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SourceConnectionResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceConnectionResponseParams) UnmarshalBinary(b []byte) error {
	var res SourceConnectionResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
