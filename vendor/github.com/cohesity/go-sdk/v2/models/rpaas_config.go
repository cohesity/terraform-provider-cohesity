// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RpaasConfig RPaaS Target Configuration
//
// Specifies settings for copying Snapshots to RPaaS Targets.
//
// swagger:model RpaasConfig
type RpaasConfig struct {
	CommonTargetConfiguration

	// Specifies the RPaaS target to copy the Snapshots.
	// Required: true
	TargetID *int64 `json:"targetId"`

	// Specifies the RPaaS target name where Snapshots are copied.
	// Read Only: true
	TargetName *string `json:"targetName,omitempty"`

	// Specifies the RPaaS target type where Snapshots are copied.
	// Enum: ["Tape","Cloud","Nas"]
	TargetType *string `json:"targetType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RpaasConfig) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonTargetConfiguration
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonTargetConfiguration = aO0

	// AO1
	var dataAO1 struct {
		TargetID *int64 `json:"targetId"`

		TargetName *string `json:"targetName,omitempty"`

		TargetType *string `json:"targetType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.TargetID = dataAO1.TargetID

	m.TargetName = dataAO1.TargetName

	m.TargetType = dataAO1.TargetType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RpaasConfig) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonTargetConfiguration)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		TargetID *int64 `json:"targetId"`

		TargetName *string `json:"targetName,omitempty"`

		TargetType *string `json:"targetType,omitempty"`
	}

	dataAO1.TargetID = m.TargetID

	dataAO1.TargetName = m.TargetName

	dataAO1.TargetType = m.TargetType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rpaas config
func (m *RpaasConfig) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTargetConfiguration
	if err := m.CommonTargetConfiguration.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RpaasConfig) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("targetId", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

var rpaasConfigTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tape","Cloud","Nas"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rpaasConfigTypeTargetTypePropEnum = append(rpaasConfigTypeTargetTypePropEnum, v)
	}
}

// property enum
func (m *RpaasConfig) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rpaasConfigTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RpaasConfig) validateTargetType(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetTypeEnum("targetType", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rpaas config based on the context it is used
func (m *RpaasConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTargetConfiguration
	if err := m.CommonTargetConfiguration.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RpaasConfig) contextValidateTargetName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetName", "body", m.TargetName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RpaasConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RpaasConfig) UnmarshalBinary(b []byte) error {
	var res RpaasConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
