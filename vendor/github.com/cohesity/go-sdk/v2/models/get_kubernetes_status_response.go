// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetKubernetesStatusResponse Kubernetes Infra Overall Health Information
//
// swagger:model GetKubernetesStatusResponse
type GetKubernetesStatusResponse struct {

	// Kubernetes Infra Overall State
	// Enum: ["Unknown","Pending","Initializing","Ready","Upgrading","ScalingUp","ScalingDown"]
	OverallK8SState string `json:"overallK8SState,omitempty"`

	// Kubernetes Infra Health Status
	// Enum: ["Healthy","Degraded","Unhealthy","InProgress","Error","None"]
	HealthStatus string `json:"healthStatus,omitempty"`

	// Reason Text for the Status
	StatusReason string `json:"statusReason,omitempty"`

	// specifies the current Kubernetes version
	CurrentKubernetesVersion string `json:"currentKubernetesVersion,omitempty"`
}

// Validate validates this get kubernetes status response
func (m *GetKubernetesStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOverallK8SState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getKubernetesStatusResponseTypeOverallK8SStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Pending","Initializing","Ready","Upgrading","ScalingUp","ScalingDown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getKubernetesStatusResponseTypeOverallK8SStatePropEnum = append(getKubernetesStatusResponseTypeOverallK8SStatePropEnum, v)
	}
}

const (

	// GetKubernetesStatusResponseOverallK8SStateUnknown captures enum value "Unknown"
	GetKubernetesStatusResponseOverallK8SStateUnknown string = "Unknown"

	// GetKubernetesStatusResponseOverallK8SStatePending captures enum value "Pending"
	GetKubernetesStatusResponseOverallK8SStatePending string = "Pending"

	// GetKubernetesStatusResponseOverallK8SStateInitializing captures enum value "Initializing"
	GetKubernetesStatusResponseOverallK8SStateInitializing string = "Initializing"

	// GetKubernetesStatusResponseOverallK8SStateReady captures enum value "Ready"
	GetKubernetesStatusResponseOverallK8SStateReady string = "Ready"

	// GetKubernetesStatusResponseOverallK8SStateUpgrading captures enum value "Upgrading"
	GetKubernetesStatusResponseOverallK8SStateUpgrading string = "Upgrading"

	// GetKubernetesStatusResponseOverallK8SStateScalingUp captures enum value "ScalingUp"
	GetKubernetesStatusResponseOverallK8SStateScalingUp string = "ScalingUp"

	// GetKubernetesStatusResponseOverallK8SStateScalingDown captures enum value "ScalingDown"
	GetKubernetesStatusResponseOverallK8SStateScalingDown string = "ScalingDown"
)

// prop value enum
func (m *GetKubernetesStatusResponse) validateOverallK8SStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getKubernetesStatusResponseTypeOverallK8SStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetKubernetesStatusResponse) validateOverallK8SState(formats strfmt.Registry) error {
	if swag.IsZero(m.OverallK8SState) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverallK8SStateEnum("overallK8SState", "body", m.OverallK8SState); err != nil {
		return err
	}

	return nil
}

var getKubernetesStatusResponseTypeHealthStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Healthy","Degraded","Unhealthy","InProgress","Error","None"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getKubernetesStatusResponseTypeHealthStatusPropEnum = append(getKubernetesStatusResponseTypeHealthStatusPropEnum, v)
	}
}

const (

	// GetKubernetesStatusResponseHealthStatusHealthy captures enum value "Healthy"
	GetKubernetesStatusResponseHealthStatusHealthy string = "Healthy"

	// GetKubernetesStatusResponseHealthStatusDegraded captures enum value "Degraded"
	GetKubernetesStatusResponseHealthStatusDegraded string = "Degraded"

	// GetKubernetesStatusResponseHealthStatusUnhealthy captures enum value "Unhealthy"
	GetKubernetesStatusResponseHealthStatusUnhealthy string = "Unhealthy"

	// GetKubernetesStatusResponseHealthStatusInProgress captures enum value "InProgress"
	GetKubernetesStatusResponseHealthStatusInProgress string = "InProgress"

	// GetKubernetesStatusResponseHealthStatusError captures enum value "Error"
	GetKubernetesStatusResponseHealthStatusError string = "Error"

	// GetKubernetesStatusResponseHealthStatusNone captures enum value "None"
	GetKubernetesStatusResponseHealthStatusNone string = "None"
)

// prop value enum
func (m *GetKubernetesStatusResponse) validateHealthStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getKubernetesStatusResponseTypeHealthStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetKubernetesStatusResponse) validateHealthStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthStatusEnum("healthStatus", "body", m.HealthStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get kubernetes status response based on context it is used
func (m *GetKubernetesStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetKubernetesStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetKubernetesStatusResponse) UnmarshalBinary(b []byte) error {
	var res GetKubernetesStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
