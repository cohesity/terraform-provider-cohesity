// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QueryGraphNodesDiffResult Query result for Diff of nodes.
//
// swagger:model QueryGraphNodesDiffResult
type QueryGraphNodesDiffResult struct {

	// Specifies the list of all the graph node ids which are unmodified.
	UnmodifiedGraphNodes []string `json:"unmodifiedGraphNodes"`

	// Specifies the list of diff for all the nodes matching the filter
	DiffGraphNodes []*QueryGraphNodesDiffResultDiffGraphNodesItems0 `json:"diffGraphNodes"`

	// Specifies the pagination cookie with which subsequent parts of the response can be fetched.
	PaginationCookie *string `json:"paginationCookie,omitempty"`
}

// Validate validates this query graph nodes diff result
func (m *QueryGraphNodesDiffResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiffGraphNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryGraphNodesDiffResult) validateDiffGraphNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.DiffGraphNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.DiffGraphNodes); i++ {
		if swag.IsZero(m.DiffGraphNodes[i]) { // not required
			continue
		}

		if m.DiffGraphNodes[i] != nil {
			if err := m.DiffGraphNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diffGraphNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diffGraphNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this query graph nodes diff result based on the context it is used
func (m *QueryGraphNodesDiffResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiffGraphNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryGraphNodesDiffResult) contextValidateDiffGraphNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiffGraphNodes); i++ {

		if m.DiffGraphNodes[i] != nil {

			if swag.IsZero(m.DiffGraphNodes[i]) { // not required
				return nil
			}

			if err := m.DiffGraphNodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diffGraphNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diffGraphNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryGraphNodesDiffResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryGraphNodesDiffResult) UnmarshalBinary(b []byte) error {
	var res QueryGraphNodesDiffResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// QueryGraphNodesDiffResultDiffGraphNodesItems0 query graph nodes diff result diff graph nodes items0
//
// swagger:model QueryGraphNodesDiffResultDiffGraphNodesItems0
type QueryGraphNodesDiffResultDiffGraphNodesItems0 struct {

	// Error is set if there was an error in looking up information for the node either in current or base snapshot. In case of error graphNodeInfo will only have the node id.
	Error struct {
		Error
	} `json:"error,omitempty"`

	// Specifies the list of diff for all the nodes added/ deleted/modified.
	GraphNodeInfo struct {
		DiffGraphNode
	} `json:"graphNodeInfo,omitempty"`
}

// Validate validates this query graph nodes diff result diff graph nodes items0
func (m *QueryGraphNodesDiffResultDiffGraphNodesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraphNodeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryGraphNodesDiffResultDiffGraphNodesItems0) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	return nil
}

func (m *QueryGraphNodesDiffResultDiffGraphNodesItems0) validateGraphNodeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.GraphNodeInfo) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this query graph nodes diff result diff graph nodes items0 based on the context it is used
func (m *QueryGraphNodesDiffResultDiffGraphNodesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGraphNodeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryGraphNodesDiffResultDiffGraphNodesItems0) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *QueryGraphNodesDiffResultDiffGraphNodesItems0) contextValidateGraphNodeInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *QueryGraphNodesDiffResultDiffGraphNodesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryGraphNodesDiffResultDiffGraphNodesItems0) UnmarshalBinary(b []byte) error {
	var res QueryGraphNodesDiffResultDiffGraphNodesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
