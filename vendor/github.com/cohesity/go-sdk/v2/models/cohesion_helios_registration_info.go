// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CohesionHeliosRegistrationInfo Cohesion Helios registration information.
//
// Specifies the Cohesion Helios registration information.
//
// swagger:model CohesionHeliosRegistrationInfo
type CohesionHeliosRegistrationInfo struct {

	// Specifies the registration status.
	// Enum: ["NotDone","InProgress","Success","Failed"]
	Status *string `json:"status,omitempty"`

	// Specifies possible error message during registration.
	Message *string `json:"message,omitempty"`
}

// Validate validates this cohesion helios registration info
func (m *CohesionHeliosRegistrationInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cohesionHeliosRegistrationInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotDone","InProgress","Success","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cohesionHeliosRegistrationInfoTypeStatusPropEnum = append(cohesionHeliosRegistrationInfoTypeStatusPropEnum, v)
	}
}

const (

	// CohesionHeliosRegistrationInfoStatusNotDone captures enum value "NotDone"
	CohesionHeliosRegistrationInfoStatusNotDone string = "NotDone"

	// CohesionHeliosRegistrationInfoStatusInProgress captures enum value "InProgress"
	CohesionHeliosRegistrationInfoStatusInProgress string = "InProgress"

	// CohesionHeliosRegistrationInfoStatusSuccess captures enum value "Success"
	CohesionHeliosRegistrationInfoStatusSuccess string = "Success"

	// CohesionHeliosRegistrationInfoStatusFailed captures enum value "Failed"
	CohesionHeliosRegistrationInfoStatusFailed string = "Failed"
)

// prop value enum
func (m *CohesionHeliosRegistrationInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cohesionHeliosRegistrationInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CohesionHeliosRegistrationInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cohesion helios registration info based on context it is used
func (m *CohesionHeliosRegistrationInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CohesionHeliosRegistrationInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CohesionHeliosRegistrationInfo) UnmarshalBinary(b []byte) error {
	var res CohesionHeliosRegistrationInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
