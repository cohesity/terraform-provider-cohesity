// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CdpSourceObjectInfo Specifies the CDP related information for a given object. This field will only be populated when protection source having protection groups which are configured with policy having CDP retention settings.
//
// swagger:model CdpSourceObjectInfo
type CdpSourceObjectInfo struct {

	// Specifies whether CDP is currently active or not. CDP might have been active on this object before, but it might not be anymore.
	CdpEnabled *bool `json:"cdpEnabled,omitempty"`

	// Specifies the protection group ids which belong to this source object for which CDP is enabled.
	// Read Only: true
	ProtectionGroupIds []string `json:"protectionGroupIds"`
}

// Validate validates this cdp source object info
func (m *CdpSourceObjectInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this cdp source object info based on the context it is used
func (m *CdpSourceObjectInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtectionGroupIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpSourceObjectInfo) contextValidateProtectionGroupIds(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "protectionGroupIds", "body", []string(m.ProtectionGroupIds)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdpSourceObjectInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdpSourceObjectInfo) UnmarshalBinary(b []byte) error {
	var res CdpSourceObjectInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
