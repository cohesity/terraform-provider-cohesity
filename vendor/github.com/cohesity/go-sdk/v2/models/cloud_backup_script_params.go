// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudBackupScriptParams Cloud Pre Post Backup Scripts
//
// Specifies params of a pre/post scripts to be executed before and after a backup run.
//
// swagger:model CloudBackupScriptParams
type CloudBackupScriptParams struct {

	// Specifies the pre script and its params.
	PreBackupScript *CommonPrePostCloudScriptParams `json:"preBackupScript,omitempty"`

	// Specifies the post backup script and its params.
	PostBackupScript *CommonPrePostCloudScriptParams `json:"postBackupScript,omitempty"`

	// Specifies the post snapshot script and its params.
	PostSnapshotScript *CommonPrePostCloudScriptParams `json:"postSnapshotScript,omitempty"`
}

// Validate validates this cloud backup script params
func (m *CloudBackupScriptParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostSnapshotScript(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudBackupScriptParams) validatePreBackupScript(formats strfmt.Registry) error {
	if swag.IsZero(m.PreBackupScript) { // not required
		return nil
	}

	if m.PreBackupScript != nil {
		if err := m.PreBackupScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *CloudBackupScriptParams) validatePostBackupScript(formats strfmt.Registry) error {
	if swag.IsZero(m.PostBackupScript) { // not required
		return nil
	}

	if m.PostBackupScript != nil {
		if err := m.PostBackupScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *CloudBackupScriptParams) validatePostSnapshotScript(formats strfmt.Registry) error {
	if swag.IsZero(m.PostSnapshotScript) { // not required
		return nil
	}

	if m.PostSnapshotScript != nil {
		if err := m.PostSnapshotScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSnapshotScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSnapshotScript")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloud backup script params based on the context it is used
func (m *CloudBackupScriptParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePreBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostSnapshotScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudBackupScriptParams) contextValidatePreBackupScript(ctx context.Context, formats strfmt.Registry) error {

	if m.PreBackupScript != nil {

		if swag.IsZero(m.PreBackupScript) { // not required
			return nil
		}

		if err := m.PreBackupScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *CloudBackupScriptParams) contextValidatePostBackupScript(ctx context.Context, formats strfmt.Registry) error {

	if m.PostBackupScript != nil {

		if swag.IsZero(m.PostBackupScript) { // not required
			return nil
		}

		if err := m.PostBackupScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *CloudBackupScriptParams) contextValidatePostSnapshotScript(ctx context.Context, formats strfmt.Registry) error {

	if m.PostSnapshotScript != nil {

		if swag.IsZero(m.PostSnapshotScript) { // not required
			return nil
		}

		if err := m.PostSnapshotScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSnapshotScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSnapshotScript")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudBackupScriptParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudBackupScriptParams) UnmarshalBinary(b []byte) error {
	var res CloudBackupScriptParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
