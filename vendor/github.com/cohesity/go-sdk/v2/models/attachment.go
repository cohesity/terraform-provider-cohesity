// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Attachment Specifies the attachment information of a firewall profile.
//
// swagger:model Attachment
type Attachment struct {

	// Specifies the network interfaces
	Interfaces []string `json:"interfaces,omitempty"`

	// Specifies the network interface groups.
	InterfaceGroups []string `json:"interfaceGroups,omitempty"`

	// Specifies the ip sets.
	IpsetNames []string `json:"ipsetNames,omitempty"`

	// is implicit
	// Read Only: true
	IsImplicit *bool `json:"isImplicit,omitempty"`

	// Specifies a description for the attachment.
	Description *string `json:"description,omitempty"`

	// Specifies the action.
	// Enum: ["allow","deny","return"]
	Action *string `json:"action,omitempty"`

	// Specifies the firewall profile.
	Profile *string `json:"profile,omitempty"`

	// Specifies the subnets.
	Subnets []string `json:"subnets,omitempty"`
}

// Validate validates this attachment
func (m *Attachment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var attachmentTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny","return"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attachmentTypeActionPropEnum = append(attachmentTypeActionPropEnum, v)
	}
}

const (

	// AttachmentActionAllow captures enum value "allow"
	AttachmentActionAllow string = "allow"

	// AttachmentActionDeny captures enum value "deny"
	AttachmentActionDeny string = "deny"

	// AttachmentActionReturn captures enum value "return"
	AttachmentActionReturn string = "return"
)

// prop value enum
func (m *Attachment) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attachmentTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Attachment) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this attachment based on the context it is used
func (m *Attachment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIsImplicit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Attachment) contextValidateIsImplicit(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isImplicit", "body", m.IsImplicit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Attachment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Attachment) UnmarshalBinary(b []byte) error {
	var res Attachment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
