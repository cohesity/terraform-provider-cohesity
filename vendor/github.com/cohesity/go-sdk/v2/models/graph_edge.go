// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphEdge Determines information about an edge in the graph.
//
// swagger:model GraphEdge
type GraphEdge struct {

	// Specifies the type of source node.
	SrcNodeType *string `json:"srcNodeType,omitempty"`

	// Specifies the type of destination node.
	DestNodeType *string `json:"destNodeType,omitempty"`

	// Specifies Unique ID of the source node.
	// Read Only: true
	SrcNodeID string `json:"srcNodeId,omitempty"`

	// Specifies Unique ID of the destination node.
	// Read Only: true
	DestNodeID string `json:"destNodeId,omitempty"`

	// Specifies the display name to be specified for relation.
	Name *string `json:"name,omitempty"`

	// Specified type of the edge relation type with node.
	RelationType *string `json:"relationType,omitempty"`

	// Specifies the list of node relation attributes provided in key/value pair.
	RelationAttributes []*KeyValuePair `json:"relationAttributes"`
}

// Validate validates this graph edge
func (m *GraphEdge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelationAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphEdge) validateRelationAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.RelationAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.RelationAttributes); i++ {
		if swag.IsZero(m.RelationAttributes[i]) { // not required
			continue
		}

		if m.RelationAttributes[i] != nil {
			if err := m.RelationAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relationAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this graph edge based on the context it is used
func (m *GraphEdge) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSrcNodeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestNodeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphEdge) contextValidateSrcNodeID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "srcNodeId", "body", string(m.SrcNodeID)); err != nil {
		return err
	}

	return nil
}

func (m *GraphEdge) contextValidateDestNodeID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "destNodeId", "body", string(m.DestNodeID)); err != nil {
		return err
	}

	return nil
}

func (m *GraphEdge) contextValidateRelationAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RelationAttributes); i++ {

		if m.RelationAttributes[i] != nil {

			if swag.IsZero(m.RelationAttributes[i]) { // not required
				return nil
			}

			if err := m.RelationAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relationAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphEdge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphEdge) UnmarshalBinary(b []byte) error {
	var res GraphEdge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
