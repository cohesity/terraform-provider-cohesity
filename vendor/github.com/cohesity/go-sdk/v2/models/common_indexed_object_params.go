// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonIndexedObjectParams CommonIndexedObjectParams
//
// Holds parameters common to an indexed object.
//
// swagger:model CommonIndexedObjectParams
type CommonIndexedObjectParams struct {

	// Specifies the name of the object.
	Name *string `json:"name,omitempty"`

	// Specifies the path of the object.
	Path *string `json:"path,omitempty"`

	// "Specifies the protection group id which contains this object."
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// "Specifies the protection group name which contains this object."
	ProtectionGroupName *string `json:"protectionGroupName,omitempty"`

	// Specifies the protection policy id for this file.
	PolicyID *string `json:"policyId,omitempty"`

	// Specifies the protection policy name for this file.
	PolicyName *string `json:"policyName,omitempty"`

	// "Specifies the Storage Domain id where the backup data of Object
	// is present."
	StorageDomainID *int64 `json:"storageDomainId,omitempty"`

	// Specifies the Source Object information.
	SourceInfo *ObjectSummary `json:"sourceInfo,omitempty"`

	TagObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CommonIndexedObjectParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Name *string `json:"name,omitempty"`

		Path *string `json:"path,omitempty"`

		ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

		ProtectionGroupName *string `json:"protectionGroupName,omitempty"`

		PolicyID *string `json:"policyId,omitempty"`

		PolicyName *string `json:"policyName,omitempty"`

		StorageDomainID *int64 `json:"storageDomainId,omitempty"`

		SourceInfo *ObjectSummary `json:"sourceInfo,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Name = dataAO0.Name

	m.Path = dataAO0.Path

	m.ProtectionGroupID = dataAO0.ProtectionGroupID

	m.ProtectionGroupName = dataAO0.ProtectionGroupName

	m.PolicyID = dataAO0.PolicyID

	m.PolicyName = dataAO0.PolicyName

	m.StorageDomainID = dataAO0.StorageDomainID

	m.SourceInfo = dataAO0.SourceInfo

	// AO1
	var aO1 TagObject
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.TagObject = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CommonIndexedObjectParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Name *string `json:"name,omitempty"`

		Path *string `json:"path,omitempty"`

		ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

		ProtectionGroupName *string `json:"protectionGroupName,omitempty"`

		PolicyID *string `json:"policyId,omitempty"`

		PolicyName *string `json:"policyName,omitempty"`

		StorageDomainID *int64 `json:"storageDomainId,omitempty"`

		SourceInfo *ObjectSummary `json:"sourceInfo,omitempty"`
	}

	dataAO0.Name = m.Name

	dataAO0.Path = m.Path

	dataAO0.ProtectionGroupID = m.ProtectionGroupID

	dataAO0.ProtectionGroupName = m.ProtectionGroupName

	dataAO0.PolicyID = m.PolicyID

	dataAO0.PolicyName = m.PolicyName

	dataAO0.StorageDomainID = m.StorageDomainID

	dataAO0.SourceInfo = m.SourceInfo

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.TagObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this common indexed object params
func (m *CommonIndexedObjectParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceInfo(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with TagObject
	if err := m.TagObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonIndexedObjectParams) validateSourceInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceInfo) { // not required
		return nil
	}

	if m.SourceInfo != nil {
		if err := m.SourceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common indexed object params based on the context it is used
func (m *CommonIndexedObjectParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSourceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with TagObject
	if err := m.TagObject.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonIndexedObjectParams) contextValidateSourceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceInfo != nil {

		if swag.IsZero(m.SourceInfo) { // not required
			return nil
		}

		if err := m.SourceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonIndexedObjectParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonIndexedObjectParams) UnmarshalBinary(b []byte) error {
	var res CommonIndexedObjectParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
