// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsRecoverFilesNewTargetConfig AWS Recover Files New Target Config.
//
// Specifies the configuration for recovering files and folders to a new target.
//
// swagger:model AwsRecoverFilesNewTargetConfig
type AwsRecoverFilesNewTargetConfig struct {

	// Specifies the path location to recover files to.
	// Required: true
	AbsolutePath *string `json:"absolutePath"`

	// Specifies the target VM to recover files and folders to.
	// Required: true
	TargetVM *RecoverTarget `json:"targetVm"`

	// Specifies the credentials for the target VM.
	TargetVMCredentials *Credentials `json:"targetVmCredentials,omitempty"`
}

// Validate validates this aws recover files new target config
func (m *AwsRecoverFilesNewTargetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbsolutePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetVMCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsRecoverFilesNewTargetConfig) validateAbsolutePath(formats strfmt.Registry) error {

	if err := validate.Required("absolutePath", "body", m.AbsolutePath); err != nil {
		return err
	}

	return nil
}

func (m *AwsRecoverFilesNewTargetConfig) validateTargetVM(formats strfmt.Registry) error {

	if err := validate.Required("targetVm", "body", m.TargetVM); err != nil {
		return err
	}

	if m.TargetVM != nil {
		if err := m.TargetVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVm")
			}
			return err
		}
	}

	return nil
}

func (m *AwsRecoverFilesNewTargetConfig) validateTargetVMCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetVMCredentials) { // not required
		return nil
	}

	if m.TargetVMCredentials != nil {
		if err := m.TargetVMCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVmCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVmCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws recover files new target config based on the context it is used
func (m *AwsRecoverFilesNewTargetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetVMCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsRecoverFilesNewTargetConfig) contextValidateTargetVM(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetVM != nil {

		if err := m.TargetVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVm")
			}
			return err
		}
	}

	return nil
}

func (m *AwsRecoverFilesNewTargetConfig) contextValidateTargetVMCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetVMCredentials != nil {

		if swag.IsZero(m.TargetVMCredentials) { // not required
			return nil
		}

		if err := m.TargetVMCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetVmCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetVmCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsRecoverFilesNewTargetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsRecoverFilesNewTargetConfig) UnmarshalBinary(b []byte) error {
	var res AwsRecoverFilesNewTargetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
