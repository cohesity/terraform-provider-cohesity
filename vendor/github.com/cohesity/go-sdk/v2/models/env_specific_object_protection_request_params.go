// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EnvSpecificObjectProtectionRequestParams Specifies the parameters which are specific to adapter identified by environment.
//
// swagger:model EnvSpecificObjectProtectionRequestParams
type EnvSpecificObjectProtectionRequestParams struct {
	CommonEnvSpecificObjectProtectionParams

	// Specifies the parameters which are specific to VMware related Object Backup.
	VmwareParams *VmwareObjectProtectionRequestParams `json:"vmwareParams,omitempty"`

	// Specifies the parameters which are specific to Generic Nas related Object Backup.
	GenericNasParams *GenericNasObjectProtectionRequestParams `json:"genericNasParams,omitempty"`

	// Specifies the parameters which are specific to Gpfs related Object Backup.
	GpfsParams *GpfsObjectProtectionRequestParams `json:"gpfsParams,omitempty"`

	// Specifies the parameters which are specific to Elastifile related Object Backup.
	ElastifileParams *ElastifileObjectProtectionRequestParams `json:"elastifileParams,omitempty"`

	// Specifies the parameters which are specific to Netapp related Object Backup.
	NetappParams *NetappObjectProtectionRequestParams `json:"netappParams,omitempty"`

	// Specifies the parameters which are specific to Isilon related Object Backup.
	IsilonParams *IsilonObjectProtectionRequestParams `json:"isilonParams,omitempty"`

	// Specifies the parameters which are specific to Flashblade related Object Backup.
	FlashbladeParams *FlashbladeObjectProtectionRequestParams `json:"flashbladeParams,omitempty"`

	// Specifies the parameters which are specific to Mssql related Object Backup.
	MssqlParams *MssqlObjectProtectionRequestParams `json:"mssqlParams,omitempty"`

	// Specifies the parameters which are specific to Oracle related Object Backup.
	OracleParams *OracleObjectProtectionRequestParams `json:"oracleParams,omitempty"`

	// Specifies the parameters which are specific to Microsoft 365 related Object Backup.
	Office365Params *Office365ObjectProtectionRequestParams `json:"office365Params,omitempty"`

	// Specifies the parameters which are specific to Aws related Object Backup.
	AwsParams *AwsObjectProtectionRequestParams `json:"awsParams,omitempty"`

	// Specifies the parameters which are specific to HyperV related Object Backup.
	HypervParams *HyperVObjectProtectionRequestParams `json:"hypervParams,omitempty"`

	// physical params
	PhysicalParams *PhysicalObjectProtectionRequestParams `json:"physicalParams,omitempty"`

	// Specifies the parameters which are specific to Sfdc related Object Backup.
	SfdcParams *SfdcObjectProtectionRequestParams `json:"sfdcParams,omitempty"`

	// Specifies the parameters which are specific to Universal Data Adapter related Object Backup.
	UdaParams *UdaObjectProtectionRequestParams `json:"udaParams,omitempty"`

	// Specifies the parameters which are specific to SAP HANA related Object Backup.
	SapHanaParams *SapHanaObjectProtectionRequestParams `json:"sapHanaParams,omitempty"`

	// Specifies the parameters which are specific to Azure related Object Backup.
	AzureParams *AzureObjectProtectionRequestParams `json:"azureParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EnvSpecificObjectProtectionRequestParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonEnvSpecificObjectProtectionParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonEnvSpecificObjectProtectionParams = aO0

	// AO1
	var dataAO1 struct {
		VmwareParams *VmwareObjectProtectionRequestParams `json:"vmwareParams,omitempty"`

		GenericNasParams *GenericNasObjectProtectionRequestParams `json:"genericNasParams,omitempty"`

		GpfsParams *GpfsObjectProtectionRequestParams `json:"gpfsParams,omitempty"`

		ElastifileParams *ElastifileObjectProtectionRequestParams `json:"elastifileParams,omitempty"`

		NetappParams *NetappObjectProtectionRequestParams `json:"netappParams,omitempty"`

		IsilonParams *IsilonObjectProtectionRequestParams `json:"isilonParams,omitempty"`

		FlashbladeParams *FlashbladeObjectProtectionRequestParams `json:"flashbladeParams,omitempty"`

		MssqlParams *MssqlObjectProtectionRequestParams `json:"mssqlParams,omitempty"`

		OracleParams *OracleObjectProtectionRequestParams `json:"oracleParams,omitempty"`

		Office365Params *Office365ObjectProtectionRequestParams `json:"office365Params,omitempty"`

		AwsParams *AwsObjectProtectionRequestParams `json:"awsParams,omitempty"`

		HypervParams *HyperVObjectProtectionRequestParams `json:"hypervParams,omitempty"`

		PhysicalParams *PhysicalObjectProtectionRequestParams `json:"physicalParams,omitempty"`

		SfdcParams *SfdcObjectProtectionRequestParams `json:"sfdcParams,omitempty"`

		UdaParams *UdaObjectProtectionRequestParams `json:"udaParams,omitempty"`

		SapHanaParams *SapHanaObjectProtectionRequestParams `json:"sapHanaParams,omitempty"`

		AzureParams *AzureObjectProtectionRequestParams `json:"azureParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.VmwareParams = dataAO1.VmwareParams

	m.GenericNasParams = dataAO1.GenericNasParams

	m.GpfsParams = dataAO1.GpfsParams

	m.ElastifileParams = dataAO1.ElastifileParams

	m.NetappParams = dataAO1.NetappParams

	m.IsilonParams = dataAO1.IsilonParams

	m.FlashbladeParams = dataAO1.FlashbladeParams

	m.MssqlParams = dataAO1.MssqlParams

	m.OracleParams = dataAO1.OracleParams

	m.Office365Params = dataAO1.Office365Params

	m.AwsParams = dataAO1.AwsParams

	m.HypervParams = dataAO1.HypervParams

	m.PhysicalParams = dataAO1.PhysicalParams

	m.SfdcParams = dataAO1.SfdcParams

	m.UdaParams = dataAO1.UdaParams

	m.SapHanaParams = dataAO1.SapHanaParams

	m.AzureParams = dataAO1.AzureParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EnvSpecificObjectProtectionRequestParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonEnvSpecificObjectProtectionParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		VmwareParams *VmwareObjectProtectionRequestParams `json:"vmwareParams,omitempty"`

		GenericNasParams *GenericNasObjectProtectionRequestParams `json:"genericNasParams,omitempty"`

		GpfsParams *GpfsObjectProtectionRequestParams `json:"gpfsParams,omitempty"`

		ElastifileParams *ElastifileObjectProtectionRequestParams `json:"elastifileParams,omitempty"`

		NetappParams *NetappObjectProtectionRequestParams `json:"netappParams,omitempty"`

		IsilonParams *IsilonObjectProtectionRequestParams `json:"isilonParams,omitempty"`

		FlashbladeParams *FlashbladeObjectProtectionRequestParams `json:"flashbladeParams,omitempty"`

		MssqlParams *MssqlObjectProtectionRequestParams `json:"mssqlParams,omitempty"`

		OracleParams *OracleObjectProtectionRequestParams `json:"oracleParams,omitempty"`

		Office365Params *Office365ObjectProtectionRequestParams `json:"office365Params,omitempty"`

		AwsParams *AwsObjectProtectionRequestParams `json:"awsParams,omitempty"`

		HypervParams *HyperVObjectProtectionRequestParams `json:"hypervParams,omitempty"`

		PhysicalParams *PhysicalObjectProtectionRequestParams `json:"physicalParams,omitempty"`

		SfdcParams *SfdcObjectProtectionRequestParams `json:"sfdcParams,omitempty"`

		UdaParams *UdaObjectProtectionRequestParams `json:"udaParams,omitempty"`

		SapHanaParams *SapHanaObjectProtectionRequestParams `json:"sapHanaParams,omitempty"`

		AzureParams *AzureObjectProtectionRequestParams `json:"azureParams,omitempty"`
	}

	dataAO1.VmwareParams = m.VmwareParams

	dataAO1.GenericNasParams = m.GenericNasParams

	dataAO1.GpfsParams = m.GpfsParams

	dataAO1.ElastifileParams = m.ElastifileParams

	dataAO1.NetappParams = m.NetappParams

	dataAO1.IsilonParams = m.IsilonParams

	dataAO1.FlashbladeParams = m.FlashbladeParams

	dataAO1.MssqlParams = m.MssqlParams

	dataAO1.OracleParams = m.OracleParams

	dataAO1.Office365Params = m.Office365Params

	dataAO1.AwsParams = m.AwsParams

	dataAO1.HypervParams = m.HypervParams

	dataAO1.PhysicalParams = m.PhysicalParams

	dataAO1.SfdcParams = m.SfdcParams

	dataAO1.UdaParams = m.UdaParams

	dataAO1.SapHanaParams = m.SapHanaParams

	dataAO1.AzureParams = m.AzureParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this env specific object protection request params
func (m *EnvSpecificObjectProtectionRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonEnvSpecificObjectProtectionParams
	if err := m.CommonEnvSpecificObjectProtectionParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericNasParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpfsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElastifileParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlashbladeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMssqlParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365Params(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSapHanaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateVmwareParams(formats strfmt.Registry) error {

	if swag.IsZero(m.VmwareParams) { // not required
		return nil
	}

	if m.VmwareParams != nil {
		if err := m.VmwareParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateGenericNasParams(formats strfmt.Registry) error {

	if swag.IsZero(m.GenericNasParams) { // not required
		return nil
	}

	if m.GenericNasParams != nil {
		if err := m.GenericNasParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateGpfsParams(formats strfmt.Registry) error {

	if swag.IsZero(m.GpfsParams) { // not required
		return nil
	}

	if m.GpfsParams != nil {
		if err := m.GpfsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateElastifileParams(formats strfmt.Registry) error {

	if swag.IsZero(m.ElastifileParams) { // not required
		return nil
	}

	if m.ElastifileParams != nil {
		if err := m.ElastifileParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateNetappParams(formats strfmt.Registry) error {

	if swag.IsZero(m.NetappParams) { // not required
		return nil
	}

	if m.NetappParams != nil {
		if err := m.NetappParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateIsilonParams(formats strfmt.Registry) error {

	if swag.IsZero(m.IsilonParams) { // not required
		return nil
	}

	if m.IsilonParams != nil {
		if err := m.IsilonParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateFlashbladeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.FlashbladeParams) { // not required
		return nil
	}

	if m.FlashbladeParams != nil {
		if err := m.FlashbladeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateMssqlParams(formats strfmt.Registry) error {

	if swag.IsZero(m.MssqlParams) { // not required
		return nil
	}

	if m.MssqlParams != nil {
		if err := m.MssqlParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateOracleParams(formats strfmt.Registry) error {

	if swag.IsZero(m.OracleParams) { // not required
		return nil
	}

	if m.OracleParams != nil {
		if err := m.OracleParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateOffice365Params(formats strfmt.Registry) error {

	if swag.IsZero(m.Office365Params) { // not required
		return nil
	}

	if m.Office365Params != nil {
		if err := m.Office365Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Params")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateAwsParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsParams) { // not required
		return nil
	}

	if m.AwsParams != nil {
		if err := m.AwsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateHypervParams(formats strfmt.Registry) error {

	if swag.IsZero(m.HypervParams) { // not required
		return nil
	}

	if m.HypervParams != nil {
		if err := m.HypervParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validatePhysicalParams(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalParams) { // not required
		return nil
	}

	if m.PhysicalParams != nil {
		if err := m.PhysicalParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateSfdcParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SfdcParams) { // not required
		return nil
	}

	if m.SfdcParams != nil {
		if err := m.SfdcParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateUdaParams(formats strfmt.Registry) error {

	if swag.IsZero(m.UdaParams) { // not required
		return nil
	}

	if m.UdaParams != nil {
		if err := m.UdaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateSapHanaParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SapHanaParams) { // not required
		return nil
	}

	if m.SapHanaParams != nil {
		if err := m.SapHanaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapHanaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) validateAzureParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AzureParams) { // not required
		return nil
	}

	if m.AzureParams != nil {
		if err := m.AzureParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this env specific object protection request params based on the context it is used
func (m *EnvSpecificObjectProtectionRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonEnvSpecificObjectProtectionParams
	if err := m.CommonEnvSpecificObjectProtectionParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenericNasParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpfsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElastifileParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlashbladeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMssqlParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSapHanaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateVmwareParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareParams != nil {

		if swag.IsZero(m.VmwareParams) { // not required
			return nil
		}

		if err := m.VmwareParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateGenericNasParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericNasParams != nil {

		if swag.IsZero(m.GenericNasParams) { // not required
			return nil
		}

		if err := m.GenericNasParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("genericNasParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("genericNasParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateGpfsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.GpfsParams != nil {

		if swag.IsZero(m.GpfsParams) { // not required
			return nil
		}

		if err := m.GpfsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateElastifileParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ElastifileParams != nil {

		if swag.IsZero(m.ElastifileParams) { // not required
			return nil
		}

		if err := m.ElastifileParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateNetappParams(ctx context.Context, formats strfmt.Registry) error {

	if m.NetappParams != nil {

		if swag.IsZero(m.NetappParams) { // not required
			return nil
		}

		if err := m.NetappParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateIsilonParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonParams != nil {

		if swag.IsZero(m.IsilonParams) { // not required
			return nil
		}

		if err := m.IsilonParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateFlashbladeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FlashbladeParams != nil {

		if swag.IsZero(m.FlashbladeParams) { // not required
			return nil
		}

		if err := m.FlashbladeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashbladeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashbladeParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateMssqlParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MssqlParams != nil {

		if swag.IsZero(m.MssqlParams) { // not required
			return nil
		}

		if err := m.MssqlParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mssqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mssqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateOracleParams(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleParams != nil {

		if swag.IsZero(m.OracleParams) { // not required
			return nil
		}

		if err := m.OracleParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateOffice365Params(ctx context.Context, formats strfmt.Registry) error {

	if m.Office365Params != nil {

		if swag.IsZero(m.Office365Params) { // not required
			return nil
		}

		if err := m.Office365Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365Params")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateAwsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsParams != nil {

		if swag.IsZero(m.AwsParams) { // not required
			return nil
		}

		if err := m.AwsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateHypervParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervParams != nil {

		if swag.IsZero(m.HypervParams) { // not required
			return nil
		}

		if err := m.HypervParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidatePhysicalParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalParams != nil {

		if swag.IsZero(m.PhysicalParams) { // not required
			return nil
		}

		if err := m.PhysicalParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateSfdcParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcParams != nil {

		if swag.IsZero(m.SfdcParams) { // not required
			return nil
		}

		if err := m.SfdcParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateUdaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaParams != nil {

		if swag.IsZero(m.UdaParams) { // not required
			return nil
		}

		if err := m.UdaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateSapHanaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SapHanaParams != nil {

		if swag.IsZero(m.SapHanaParams) { // not required
			return nil
		}

		if err := m.SapHanaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapHanaParams")
			}
			return err
		}
	}

	return nil
}

func (m *EnvSpecificObjectProtectionRequestParams) contextValidateAzureParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureParams != nil {

		if swag.IsZero(m.AzureParams) { // not required
			return nil
		}

		if err := m.AzureParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvSpecificObjectProtectionRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvSpecificObjectProtectionRequestParams) UnmarshalBinary(b []byte) error {
	var res EnvSpecificObjectProtectionRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
