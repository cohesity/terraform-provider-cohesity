// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradeChecksResults Upgrade checks results
//
// Specifies upgrade checks results from cluster.
//
// swagger:model UpgradeChecksResults
type UpgradeChecksResults struct {

	// Specifies test run instance of upgrade checks
	TestRunInstanceID string `json:"testRunInstanceId,omitempty"`

	// type of checks(preupgrade/postupgrade)
	RequestType string `json:"requestType,omitempty"`

	// Specifies unix epoch start time of checks(in seconds).
	StartTimeSecs *int64 `json:"startTimeSecs,omitempty"`

	// Specifies unix epoch finish time of checks(in seconds).
	FinishTimeSecs *int64 `json:"finishTimeSecs,omitempty"`

	// final result (running/pass/fail) of run
	// Enum: ["Running","Passed","Failed","NotAvailable"]
	ResultStatus string `json:"resultStatus,omitempty"`

	// The healthcheck result for node
	NodeResults []*UpgradeCheckNodeResult `json:"nodeResults,omitempty"`
}

// Validate validates this upgrade checks results
func (m *UpgradeChecksResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResultStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradeChecksResultsTypeResultStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Passed","Failed","NotAvailable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeChecksResultsTypeResultStatusPropEnum = append(upgradeChecksResultsTypeResultStatusPropEnum, v)
	}
}

const (

	// UpgradeChecksResultsResultStatusRunning captures enum value "Running"
	UpgradeChecksResultsResultStatusRunning string = "Running"

	// UpgradeChecksResultsResultStatusPassed captures enum value "Passed"
	UpgradeChecksResultsResultStatusPassed string = "Passed"

	// UpgradeChecksResultsResultStatusFailed captures enum value "Failed"
	UpgradeChecksResultsResultStatusFailed string = "Failed"

	// UpgradeChecksResultsResultStatusNotAvailable captures enum value "NotAvailable"
	UpgradeChecksResultsResultStatusNotAvailable string = "NotAvailable"
)

// prop value enum
func (m *UpgradeChecksResults) validateResultStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeChecksResultsTypeResultStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeChecksResults) validateResultStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ResultStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateResultStatusEnum("resultStatus", "body", m.ResultStatus); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeChecksResults) validateNodeResults(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeResults) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeResults); i++ {
		if swag.IsZero(m.NodeResults[i]) { // not required
			continue
		}

		if m.NodeResults[i] != nil {
			if err := m.NodeResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this upgrade checks results based on the context it is used
func (m *UpgradeChecksResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeChecksResults) contextValidateNodeResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeResults); i++ {

		if m.NodeResults[i] != nil {

			if swag.IsZero(m.NodeResults[i]) { // not required
				return nil
			}

			if err := m.NodeResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeChecksResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeChecksResults) UnmarshalBinary(b []byte) error {
	var res UpgradeChecksResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
