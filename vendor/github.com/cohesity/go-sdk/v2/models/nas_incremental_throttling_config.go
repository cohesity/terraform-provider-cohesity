// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NasIncrementalThrottlingConfig NAS Full Backup Throttling Params
//
// Specifies the throttling configuration during incremental backup run.
//
// swagger:model NasIncrementalThrottlingConfig
type NasIncrementalThrottlingConfig struct {

	// Specifies the percentage value of maximum concurrent metadata to be fetched during incremental backup of the source.
	// Maximum: 100
	// Minimum: 0
	MaxMetadataFetchPercentage *int32 `json:"maxMetadataFetchPercentage,omitempty"`

	// Specifies the percentage value of maximum concurrent read/write during incremental backup of the source.
	// Maximum: 100
	// Minimum: 0
	MaxReadWritePercentage *int32 `json:"maxReadWritePercentage,omitempty"`
}

// Validate validates this nas incremental throttling config
func (m *NasIncrementalThrottlingConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxMetadataFetchPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxReadWritePercentage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NasIncrementalThrottlingConfig) validateMaxMetadataFetchPercentage(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxMetadataFetchPercentage) { // not required
		return nil
	}

	if err := validate.MinimumInt("maxMetadataFetchPercentage", "body", int64(*m.MaxMetadataFetchPercentage), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("maxMetadataFetchPercentage", "body", int64(*m.MaxMetadataFetchPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *NasIncrementalThrottlingConfig) validateMaxReadWritePercentage(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxReadWritePercentage) { // not required
		return nil
	}

	if err := validate.MinimumInt("maxReadWritePercentage", "body", int64(*m.MaxReadWritePercentage), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("maxReadWritePercentage", "body", int64(*m.MaxReadWritePercentage), 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nas incremental throttling config based on context it is used
func (m *NasIncrementalThrottlingConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NasIncrementalThrottlingConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NasIncrementalThrottlingConfig) UnmarshalBinary(b []byte) error {
	var res NasIncrementalThrottlingConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
