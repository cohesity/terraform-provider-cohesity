// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectBrowseRequest Fetch children of an object.
//
// Specifies the request to fetch children of an object.
//
// swagger:model ObjectBrowseRequest
type ObjectBrowseRequest struct {
	CommonObjectActionRequest

	// Specifies the HDFS specific parameters for fetching content (files & folders).
	HdfsParams *HdfsBrowseRequestParams `json:"hdfsParams,omitempty"`

	// Specifies the information needed in order to support pagination. This will not be included for the last page of results.
	PaginationInfo *PaginationInfo `json:"paginationInfo,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ObjectBrowseRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonObjectActionRequest
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonObjectActionRequest = aO0

	// AO1
	var dataAO1 struct {
		HdfsParams *HdfsBrowseRequestParams `json:"hdfsParams,omitempty"`

		PaginationInfo *PaginationInfo `json:"paginationInfo,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.HdfsParams = dataAO1.HdfsParams

	m.PaginationInfo = dataAO1.PaginationInfo

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ObjectBrowseRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonObjectActionRequest)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		HdfsParams *HdfsBrowseRequestParams `json:"hdfsParams,omitempty"`

		PaginationInfo *PaginationInfo `json:"paginationInfo,omitempty"`
	}

	dataAO1.HdfsParams = m.HdfsParams

	dataAO1.PaginationInfo = m.PaginationInfo

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this object browse request
func (m *ObjectBrowseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonObjectActionRequest
	if err := m.CommonObjectActionRequest.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaginationInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectBrowseRequest) validateHdfsParams(formats strfmt.Registry) error {

	if swag.IsZero(m.HdfsParams) { // not required
		return nil
	}

	if m.HdfsParams != nil {
		if err := m.HdfsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectBrowseRequest) validatePaginationInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PaginationInfo) { // not required
		return nil
	}

	if m.PaginationInfo != nil {
		if err := m.PaginationInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paginationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paginationInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this object browse request based on the context it is used
func (m *ObjectBrowseRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonObjectActionRequest
	if err := m.CommonObjectActionRequest.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaginationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectBrowseRequest) contextValidateHdfsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsParams != nil {

		if swag.IsZero(m.HdfsParams) { // not required
			return nil
		}

		if err := m.HdfsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsParams")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectBrowseRequest) contextValidatePaginationInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PaginationInfo != nil {

		if swag.IsZero(m.PaginationInfo) { // not required
			return nil
		}

		if err := m.PaginationInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paginationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paginationInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectBrowseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectBrowseRequest) UnmarshalBinary(b []byte) error {
	var res ObjectBrowseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
