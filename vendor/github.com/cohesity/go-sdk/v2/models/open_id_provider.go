// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenIDProvider Open ID provider
//
// swagger:model OpenIdProvider
type OpenIDProvider struct {

	// Specifies the audience IDs of the configuration. This is used for validation. We will check this against the 'aud' field sent in the JWT at authorization time and if they do not match against at least one of the elements in this list, then authentication will fail.
	// Required: true
	// Max Items: 50
	// Min Items: 1
	AudienceIds []string `json:"audienceIds"`

	// Specifies the URL to poll for the public key.
	// Required: true
	PublicKeyURL *string `json:"publicKeyUrl"`

	// Specifies the number of minutes the cluster should wait before polling for a new public key. Default value is 1440 (24 hours).
	// Maximum: 10080
	// Minimum: 1
	PollingFrequencyMins *int64 `json:"pollingFrequencyMins,omitempty"`
}

// Validate validates this open Id provider
func (m *OpenIDProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudienceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKeyURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePollingFrequencyMins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenIDProvider) validateAudienceIds(formats strfmt.Registry) error {

	if err := validate.Required("audienceIds", "body", m.AudienceIds); err != nil {
		return err
	}

	iAudienceIdsSize := int64(len(m.AudienceIds))

	if err := validate.MinItems("audienceIds", "body", iAudienceIdsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("audienceIds", "body", iAudienceIdsSize, 50); err != nil {
		return err
	}

	for i := 0; i < len(m.AudienceIds); i++ {

		if err := validate.MinLength("audienceIds"+"."+strconv.Itoa(i), "body", m.AudienceIds[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("audienceIds"+"."+strconv.Itoa(i), "body", m.AudienceIds[i], 255); err != nil {
			return err
		}

	}

	return nil
}

func (m *OpenIDProvider) validatePublicKeyURL(formats strfmt.Registry) error {

	if err := validate.Required("publicKeyUrl", "body", m.PublicKeyURL); err != nil {
		return err
	}

	return nil
}

func (m *OpenIDProvider) validatePollingFrequencyMins(formats strfmt.Registry) error {
	if swag.IsZero(m.PollingFrequencyMins) { // not required
		return nil
	}

	if err := validate.MinimumInt("pollingFrequencyMins", "body", *m.PollingFrequencyMins, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pollingFrequencyMins", "body", *m.PollingFrequencyMins, 10080, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this open Id provider based on context it is used
func (m *OpenIDProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenIDProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenIDProvider) UnmarshalBinary(b []byte) error {
	var res OpenIDProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
