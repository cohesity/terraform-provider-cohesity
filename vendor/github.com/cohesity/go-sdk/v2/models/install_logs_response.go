// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstallLogsResponse "Response containing install logs for services."
//
// swagger:model InstallLogsResponse
type InstallLogsResponse struct {

	// Helios install version.
	HeliosInstallVersion string `json:"heliosInstallVersion,omitempty"`

	// "The overall install status "
	// "(e.g., Success, InProgress, Failed, Pending)."
	//
	// Enum: ["Success","Failed","InProgress","Pending"]
	HeliosInstallStatus string `json:"heliosInstallStatus,omitempty"`

	// List of service install logs.
	Services []*ServiceInstallLog `json:"services"`
}

// Validate validates this install logs response
func (m *InstallLogsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeliosInstallStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var installLogsResponseTypeHeliosInstallStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Failed","InProgress","Pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		installLogsResponseTypeHeliosInstallStatusPropEnum = append(installLogsResponseTypeHeliosInstallStatusPropEnum, v)
	}
}

const (

	// InstallLogsResponseHeliosInstallStatusSuccess captures enum value "Success"
	InstallLogsResponseHeliosInstallStatusSuccess string = "Success"

	// InstallLogsResponseHeliosInstallStatusFailed captures enum value "Failed"
	InstallLogsResponseHeliosInstallStatusFailed string = "Failed"

	// InstallLogsResponseHeliosInstallStatusInProgress captures enum value "InProgress"
	InstallLogsResponseHeliosInstallStatusInProgress string = "InProgress"

	// InstallLogsResponseHeliosInstallStatusPending captures enum value "Pending"
	InstallLogsResponseHeliosInstallStatusPending string = "Pending"
)

// prop value enum
func (m *InstallLogsResponse) validateHeliosInstallStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, installLogsResponseTypeHeliosInstallStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InstallLogsResponse) validateHeliosInstallStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HeliosInstallStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateHeliosInstallStatusEnum("heliosInstallStatus", "body", m.HeliosInstallStatus); err != nil {
		return err
	}

	return nil
}

func (m *InstallLogsResponse) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this install logs response based on the context it is used
func (m *InstallLogsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstallLogsResponse) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {

			if swag.IsZero(m.Services[i]) { // not required
				return nil
			}

			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstallLogsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstallLogsResponse) UnmarshalBinary(b []byte) error {
	var res InstallLogsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
