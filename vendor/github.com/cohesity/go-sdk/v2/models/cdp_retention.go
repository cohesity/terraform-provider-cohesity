// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CdpRetention Specifies the retention of a CDP backup.
//
// swagger:model CdpRetention
type CdpRetention struct {

	// Specificies the Retention Unit of a CDP backup measured in minutes or hours.
	// Required: true
	// Enum: ["Minutes","Hours"]
	Unit *string `json:"unit"`

	// Specifies the duration for a cdp backup retention.
	// Required: true
	// Minimum: 1
	Duration *int32 `json:"duration"`

	// Specifies WORM retention type for the snapshots. When a WORM retention type is specified, the snapshots of the Protection Groups using this policy will be kept for the last N days as specified in the duration of the datalock. During that time, the snapshots cannot be deleted.
	DataLockConfig *DataLockConfig `json:"dataLockConfig,omitempty"`
}

// Validate validates this cdp retention
func (m *CdpRetention) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataLockConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cdpRetentionTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minutes","Hours"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cdpRetentionTypeUnitPropEnum = append(cdpRetentionTypeUnitPropEnum, v)
	}
}

const (

	// CdpRetentionUnitMinutes captures enum value "Minutes"
	CdpRetentionUnitMinutes string = "Minutes"

	// CdpRetentionUnitHours captures enum value "Hours"
	CdpRetentionUnitHours string = "Hours"
)

// prop value enum
func (m *CdpRetention) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cdpRetentionTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CdpRetention) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", *m.Unit); err != nil {
		return err
	}

	return nil
}

func (m *CdpRetention) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	if err := validate.MinimumInt("duration", "body", int64(*m.Duration), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CdpRetention) validateDataLockConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.DataLockConfig) { // not required
		return nil
	}

	if m.DataLockConfig != nil {
		if err := m.DataLockConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataLockConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataLockConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cdp retention based on the context it is used
func (m *CdpRetention) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataLockConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpRetention) contextValidateDataLockConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.DataLockConfig != nil {

		if swag.IsZero(m.DataLockConfig) { // not required
			return nil
		}

		if err := m.DataLockConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataLockConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataLockConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdpRetention) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdpRetention) UnmarshalBinary(b []byte) error {
	var res CdpRetention
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
