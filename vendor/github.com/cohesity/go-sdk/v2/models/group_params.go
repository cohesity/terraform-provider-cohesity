// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupParams Specifies a Group.
//
// swagger:model GroupParams
type GroupParams struct {
	CreateGroupParams

	// Specifies the sid of the Group.
	// Read Only: true
	Sid *string `json:"sid,omitempty"`

	// Specifies the SMB principals.
	SmbPrincipals []*SMBPrincipal `json:"smbPrincipals,omitempty"`

	// Specifies the epoch time in milliseconds when the group was created.
	// Read Only: true
	CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

	// Specifies the epoch time in milliseconds when the group was last modified.
	// Read Only: true
	LastUpdatedTimeMsecs *int64 `json:"lastUpdatedTimeMsecs,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *GroupParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CreateGroupParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CreateGroupParams = aO0

	// AO1
	var dataAO1 struct {
		Sid *string `json:"sid,omitempty"`

		SmbPrincipals []*SMBPrincipal `json:"smbPrincipals,omitempty"`

		CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

		LastUpdatedTimeMsecs *int64 `json:"lastUpdatedTimeMsecs,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Sid = dataAO1.Sid

	m.SmbPrincipals = dataAO1.SmbPrincipals

	m.CreatedTimeMsecs = dataAO1.CreatedTimeMsecs

	m.LastUpdatedTimeMsecs = dataAO1.LastUpdatedTimeMsecs

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m GroupParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CreateGroupParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Sid *string `json:"sid,omitempty"`

		SmbPrincipals []*SMBPrincipal `json:"smbPrincipals,omitempty"`

		CreatedTimeMsecs *int64 `json:"createdTimeMsecs,omitempty"`

		LastUpdatedTimeMsecs *int64 `json:"lastUpdatedTimeMsecs,omitempty"`
	}

	dataAO1.Sid = m.Sid

	dataAO1.SmbPrincipals = m.SmbPrincipals

	dataAO1.CreatedTimeMsecs = m.CreatedTimeMsecs

	dataAO1.LastUpdatedTimeMsecs = m.LastUpdatedTimeMsecs

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this group params
func (m *GroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CreateGroupParams
	if err := m.CreateGroupParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbPrincipals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupParams) validateSmbPrincipals(formats strfmt.Registry) error {

	if swag.IsZero(m.SmbPrincipals) { // not required
		return nil
	}

	for i := 0; i < len(m.SmbPrincipals); i++ {
		if swag.IsZero(m.SmbPrincipals[i]) { // not required
			continue
		}

		if m.SmbPrincipals[i] != nil {
			if err := m.SmbPrincipals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("smbPrincipals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("smbPrincipals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this group params based on the context it is used
func (m *GroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CreateGroupParams
	if err := m.CreateGroupParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbPrincipals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdatedTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupParams) contextValidateSid(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sid", "body", m.Sid); err != nil {
		return err
	}

	return nil
}

func (m *GroupParams) contextValidateSmbPrincipals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SmbPrincipals); i++ {

		if m.SmbPrincipals[i] != nil {

			if swag.IsZero(m.SmbPrincipals[i]) { // not required
				return nil
			}

			if err := m.SmbPrincipals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("smbPrincipals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("smbPrincipals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupParams) contextValidateCreatedTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdTimeMsecs", "body", m.CreatedTimeMsecs); err != nil {
		return err
	}

	return nil
}

func (m *GroupParams) contextValidateLastUpdatedTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastUpdatedTimeMsecs", "body", m.LastUpdatedTimeMsecs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupParams) UnmarshalBinary(b []byte) error {
	var res GroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
