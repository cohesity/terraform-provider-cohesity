// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicatedViewNameConfig Specifies an object protected by a View Protection Group.
//
// swagger:model ReplicatedViewNameConfig
type ReplicatedViewNameConfig struct {

	// Specifies the ID of the protected view.
	// Required: true
	SourceViewID *int64 `json:"sourceViewId"`

	// Specifies if the remote view name to be kept is same as the source view name. If this field is true, viewName field will be ignored.
	UseSameViewName *bool `json:"useSameViewName,omitempty"`

	// Specifies the name of the remote view. This field is only used when useSameViewName is false. If useSameViewName is true, this field is not used.
	ViewName *string `json:"viewName,omitempty"`
}

// Validate validates this replicated view name config
func (m *ReplicatedViewNameConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceViewID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicatedViewNameConfig) validateSourceViewID(formats strfmt.Registry) error {

	if err := validate.Required("sourceViewId", "body", m.SourceViewID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this replicated view name config based on context it is used
func (m *ReplicatedViewNameConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReplicatedViewNameConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicatedViewNameConfig) UnmarshalBinary(b []byte) error {
	var res ReplicatedViewNameConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
