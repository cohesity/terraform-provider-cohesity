// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OnPremTenantConfig OnPremTenantConfig
//
// All configurations related to tenants for the cluster.
//
// swagger:model OnPremTenantConfig
type OnPremTenantConfig struct {

	// Wether organizations is enabled on the cluster.
	// Required: true
	OrganizationsEnabled *bool `json:"organizationsEnabled"`

	// Wether storage domain sharing is enabled for organizations on
	// the cluster.
	// Required: true
	OrganizationsStorageDomainSharingEnabled *bool `json:"organizationsStorageDomainSharingEnabled"`
}

// Validate validates this on prem tenant config
func (m *OnPremTenantConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganizationsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationsStorageDomainSharingEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnPremTenantConfig) validateOrganizationsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("organizationsEnabled", "body", m.OrganizationsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *OnPremTenantConfig) validateOrganizationsStorageDomainSharingEnabled(formats strfmt.Registry) error {

	if err := validate.Required("organizationsStorageDomainSharingEnabled", "body", m.OrganizationsStorageDomainSharingEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this on prem tenant config based on context it is used
func (m *OnPremTenantConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OnPremTenantConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnPremTenantConfig) UnmarshalBinary(b []byte) error {
	var res OnPremTenantConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
