// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAzureApplicationRequestParams Azure Application Creation parameters
//
// # Specifies the request parameters for creating Azure Applications
//
// swagger:model CreateAzureApplicationRequestParams
type CreateAzureApplicationRequestParams struct {

	// Specifies the access token for Azure PowerShell Application access.
	// Required: true
	AccessToken *string `json:"accessToken"`

	// Specifies the username to access Microsoft365 source.
	// Required: true
	Username *string `json:"username"`

	// Specifies the region where Office 365 Exchange environment is.
	// Enum: ["Default","China","Germany","UsDoD","UsGccHigh"]
	Microsoft365Region *string `json:"microsoft365Region,omitempty"`

	// Specifies the count of Azure application to be created.
	// Required: true
	AppCount *int32 `json:"appCount"`

	// Specifies a list of Microsoft365 azure application credentials already added within the Microsoft365 source.
	ExistingMicrosoft365AppCredentialsList []*Office365AppCredentials `json:"existingMicrosoft365AppCredentialsList"`
}

// Validate validates this create azure application request params
func (m *CreateAzureApplicationRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMicrosoft365Region(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingMicrosoft365AppCredentialsList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAzureApplicationRequestParams) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("accessToken", "body", m.AccessToken); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureApplicationRequestParams) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

var createAzureApplicationRequestParamsTypeMicrosoft365RegionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","China","Germany","UsDoD","UsGccHigh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createAzureApplicationRequestParamsTypeMicrosoft365RegionPropEnum = append(createAzureApplicationRequestParamsTypeMicrosoft365RegionPropEnum, v)
	}
}

const (

	// CreateAzureApplicationRequestParamsMicrosoft365RegionDefault captures enum value "Default"
	CreateAzureApplicationRequestParamsMicrosoft365RegionDefault string = "Default"

	// CreateAzureApplicationRequestParamsMicrosoft365RegionChina captures enum value "China"
	CreateAzureApplicationRequestParamsMicrosoft365RegionChina string = "China"

	// CreateAzureApplicationRequestParamsMicrosoft365RegionGermany captures enum value "Germany"
	CreateAzureApplicationRequestParamsMicrosoft365RegionGermany string = "Germany"

	// CreateAzureApplicationRequestParamsMicrosoft365RegionUsDoD captures enum value "UsDoD"
	CreateAzureApplicationRequestParamsMicrosoft365RegionUsDoD string = "UsDoD"

	// CreateAzureApplicationRequestParamsMicrosoft365RegionUsGccHigh captures enum value "UsGccHigh"
	CreateAzureApplicationRequestParamsMicrosoft365RegionUsGccHigh string = "UsGccHigh"
)

// prop value enum
func (m *CreateAzureApplicationRequestParams) validateMicrosoft365RegionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createAzureApplicationRequestParamsTypeMicrosoft365RegionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateAzureApplicationRequestParams) validateMicrosoft365Region(formats strfmt.Registry) error {
	if swag.IsZero(m.Microsoft365Region) { // not required
		return nil
	}

	// value enum
	if err := m.validateMicrosoft365RegionEnum("microsoft365Region", "body", *m.Microsoft365Region); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureApplicationRequestParams) validateAppCount(formats strfmt.Registry) error {

	if err := validate.Required("appCount", "body", m.AppCount); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureApplicationRequestParams) validateExistingMicrosoft365AppCredentialsList(formats strfmt.Registry) error {
	if swag.IsZero(m.ExistingMicrosoft365AppCredentialsList) { // not required
		return nil
	}

	for i := 0; i < len(m.ExistingMicrosoft365AppCredentialsList); i++ {
		if swag.IsZero(m.ExistingMicrosoft365AppCredentialsList[i]) { // not required
			continue
		}

		if m.ExistingMicrosoft365AppCredentialsList[i] != nil {
			if err := m.ExistingMicrosoft365AppCredentialsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("existingMicrosoft365AppCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("existingMicrosoft365AppCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create azure application request params based on the context it is used
func (m *CreateAzureApplicationRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExistingMicrosoft365AppCredentialsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAzureApplicationRequestParams) contextValidateExistingMicrosoft365AppCredentialsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExistingMicrosoft365AppCredentialsList); i++ {

		if m.ExistingMicrosoft365AppCredentialsList[i] != nil {

			if swag.IsZero(m.ExistingMicrosoft365AppCredentialsList[i]) { // not required
				return nil
			}

			if err := m.ExistingMicrosoft365AppCredentialsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("existingMicrosoft365AppCredentialsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("existingMicrosoft365AppCredentialsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAzureApplicationRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAzureApplicationRequestParams) UnmarshalBinary(b []byte) error {
	var res CreateAzureApplicationRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
