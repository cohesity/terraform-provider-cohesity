// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DocumentLibraryItem DocumentLibraryItem
//
// Specifies a Document Library indexed item.
//
// swagger:model DocumentLibraryItem
type DocumentLibraryItem struct {
	CommonIndexedObjectParams

	// Specifies the file type.
	// Enum: ["File","Directory","Symlink"]
	FileType *string `json:"fileType,omitempty"`

	// Specifies the id of the document library item.
	ItemID *string `json:"itemId,omitempty"`

	// Specifies the size in bytes for the indexed item.
	ItemSize *int64 `json:"itemSize,omitempty"`

	// Specifies the Unix timestamp epoch in seconds at which this item is created.
	CreationTimeSecs *int64 `json:"creationTimeSecs,omitempty"`

	// Specifies the name of the owner of the document library item.
	OwnerName *string `json:"ownerName,omitempty"`

	// Specifies the email of the owner of the document library item.
	OwnerEmail *string `json:"ownerEmail,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DocumentLibraryItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonIndexedObjectParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonIndexedObjectParams = aO0

	// AO1
	var dataAO1 struct {
		FileType *string `json:"fileType,omitempty"`

		ItemID *string `json:"itemId,omitempty"`

		ItemSize *int64 `json:"itemSize,omitempty"`

		CreationTimeSecs *int64 `json:"creationTimeSecs,omitempty"`

		OwnerName *string `json:"ownerName,omitempty"`

		OwnerEmail *string `json:"ownerEmail,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.FileType = dataAO1.FileType

	m.ItemID = dataAO1.ItemID

	m.ItemSize = dataAO1.ItemSize

	m.CreationTimeSecs = dataAO1.CreationTimeSecs

	m.OwnerName = dataAO1.OwnerName

	m.OwnerEmail = dataAO1.OwnerEmail

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DocumentLibraryItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonIndexedObjectParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		FileType *string `json:"fileType,omitempty"`

		ItemID *string `json:"itemId,omitempty"`

		ItemSize *int64 `json:"itemSize,omitempty"`

		CreationTimeSecs *int64 `json:"creationTimeSecs,omitempty"`

		OwnerName *string `json:"ownerName,omitempty"`

		OwnerEmail *string `json:"ownerEmail,omitempty"`
	}

	dataAO1.FileType = m.FileType

	dataAO1.ItemID = m.ItemID

	dataAO1.ItemSize = m.ItemSize

	dataAO1.CreationTimeSecs = m.CreationTimeSecs

	dataAO1.OwnerName = m.OwnerName

	dataAO1.OwnerEmail = m.OwnerEmail

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this document library item
func (m *DocumentLibraryItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonIndexedObjectParams
	if err := m.CommonIndexedObjectParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var documentLibraryItemTypeFileTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["File","Directory","Symlink"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		documentLibraryItemTypeFileTypePropEnum = append(documentLibraryItemTypeFileTypePropEnum, v)
	}
}

// property enum
func (m *DocumentLibraryItem) validateFileTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, documentLibraryItemTypeFileTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DocumentLibraryItem) validateFileType(formats strfmt.Registry) error {

	if swag.IsZero(m.FileType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileTypeEnum("fileType", "body", *m.FileType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this document library item based on the context it is used
func (m *DocumentLibraryItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonIndexedObjectParams
	if err := m.CommonIndexedObjectParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DocumentLibraryItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocumentLibraryItem) UnmarshalBinary(b []byte) error {
	var res DocumentLibraryItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
