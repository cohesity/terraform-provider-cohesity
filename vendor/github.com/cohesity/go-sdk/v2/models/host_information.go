// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostInformation Specifies the host information for a objects. This is mainly populated in case of App objects where app object is hosted by another object such as VM or physical server.
//
// swagger:model HostInformation
type HostInformation struct {

	// Specifies the id of the host object.
	ID *string `json:"id,omitempty"`

	// Specifies the name of the host object.
	Name *string `json:"name,omitempty"`

	// Specifies the environment of the object.
	// Enum: ["kVMware","kHyperV","kAzure","kKVM","kAWS","kAcropolis","kGCP","kPhysical","kPhysicalFiles","kIsilon","kNetapp","kGenericNas","kFlashBlade","kElastifile","kGPFS","kPure","kIbmFlashSystem","kNimble","kSQL","kOracle","kExchange","kAD","kView","kO365","kHyperFlex","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc"]
	Environment *string `json:"environment,omitempty"`
}

// Validate validates this host information
func (m *HostInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hostInformationTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kAzure","kKVM","kAWS","kAcropolis","kGCP","kPhysical","kPhysicalFiles","kIsilon","kNetapp","kGenericNas","kFlashBlade","kElastifile","kGPFS","kPure","kIbmFlashSystem","kNimble","kSQL","kOracle","kExchange","kAD","kView","kO365","kHyperFlex","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSfdc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostInformationTypeEnvironmentPropEnum = append(hostInformationTypeEnvironmentPropEnum, v)
	}
}

const (

	// HostInformationEnvironmentKVMware captures enum value "kVMware"
	HostInformationEnvironmentKVMware string = "kVMware"

	// HostInformationEnvironmentKHyperV captures enum value "kHyperV"
	HostInformationEnvironmentKHyperV string = "kHyperV"

	// HostInformationEnvironmentKAzure captures enum value "kAzure"
	HostInformationEnvironmentKAzure string = "kAzure"

	// HostInformationEnvironmentKKVM captures enum value "kKVM"
	HostInformationEnvironmentKKVM string = "kKVM"

	// HostInformationEnvironmentKAWS captures enum value "kAWS"
	HostInformationEnvironmentKAWS string = "kAWS"

	// HostInformationEnvironmentKAcropolis captures enum value "kAcropolis"
	HostInformationEnvironmentKAcropolis string = "kAcropolis"

	// HostInformationEnvironmentKGCP captures enum value "kGCP"
	HostInformationEnvironmentKGCP string = "kGCP"

	// HostInformationEnvironmentKPhysical captures enum value "kPhysical"
	HostInformationEnvironmentKPhysical string = "kPhysical"

	// HostInformationEnvironmentKPhysicalFiles captures enum value "kPhysicalFiles"
	HostInformationEnvironmentKPhysicalFiles string = "kPhysicalFiles"

	// HostInformationEnvironmentKIsilon captures enum value "kIsilon"
	HostInformationEnvironmentKIsilon string = "kIsilon"

	// HostInformationEnvironmentKNetapp captures enum value "kNetapp"
	HostInformationEnvironmentKNetapp string = "kNetapp"

	// HostInformationEnvironmentKGenericNas captures enum value "kGenericNas"
	HostInformationEnvironmentKGenericNas string = "kGenericNas"

	// HostInformationEnvironmentKFlashBlade captures enum value "kFlashBlade"
	HostInformationEnvironmentKFlashBlade string = "kFlashBlade"

	// HostInformationEnvironmentKElastifile captures enum value "kElastifile"
	HostInformationEnvironmentKElastifile string = "kElastifile"

	// HostInformationEnvironmentKGPFS captures enum value "kGPFS"
	HostInformationEnvironmentKGPFS string = "kGPFS"

	// HostInformationEnvironmentKPure captures enum value "kPure"
	HostInformationEnvironmentKPure string = "kPure"

	// HostInformationEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	HostInformationEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// HostInformationEnvironmentKNimble captures enum value "kNimble"
	HostInformationEnvironmentKNimble string = "kNimble"

	// HostInformationEnvironmentKSQL captures enum value "kSQL"
	HostInformationEnvironmentKSQL string = "kSQL"

	// HostInformationEnvironmentKOracle captures enum value "kOracle"
	HostInformationEnvironmentKOracle string = "kOracle"

	// HostInformationEnvironmentKExchange captures enum value "kExchange"
	HostInformationEnvironmentKExchange string = "kExchange"

	// HostInformationEnvironmentKAD captures enum value "kAD"
	HostInformationEnvironmentKAD string = "kAD"

	// HostInformationEnvironmentKView captures enum value "kView"
	HostInformationEnvironmentKView string = "kView"

	// HostInformationEnvironmentKO365 captures enum value "kO365"
	HostInformationEnvironmentKO365 string = "kO365"

	// HostInformationEnvironmentKHyperFlex captures enum value "kHyperFlex"
	HostInformationEnvironmentKHyperFlex string = "kHyperFlex"

	// HostInformationEnvironmentKKubernetes captures enum value "kKubernetes"
	HostInformationEnvironmentKKubernetes string = "kKubernetes"

	// HostInformationEnvironmentKCassandra captures enum value "kCassandra"
	HostInformationEnvironmentKCassandra string = "kCassandra"

	// HostInformationEnvironmentKMongoDB captures enum value "kMongoDB"
	HostInformationEnvironmentKMongoDB string = "kMongoDB"

	// HostInformationEnvironmentKCouchbase captures enum value "kCouchbase"
	HostInformationEnvironmentKCouchbase string = "kCouchbase"

	// HostInformationEnvironmentKHdfs captures enum value "kHdfs"
	HostInformationEnvironmentKHdfs string = "kHdfs"

	// HostInformationEnvironmentKHive captures enum value "kHive"
	HostInformationEnvironmentKHive string = "kHive"

	// HostInformationEnvironmentKHBase captures enum value "kHBase"
	HostInformationEnvironmentKHBase string = "kHBase"

	// HostInformationEnvironmentKSAPHANA captures enum value "kSAPHANA"
	HostInformationEnvironmentKSAPHANA string = "kSAPHANA"

	// HostInformationEnvironmentKUDA captures enum value "kUDA"
	HostInformationEnvironmentKUDA string = "kUDA"

	// HostInformationEnvironmentKSfdc captures enum value "kSfdc"
	HostInformationEnvironmentKSfdc string = "kSfdc"
)

// prop value enum
func (m *HostInformation) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hostInformationTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HostInformation) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this host information based on context it is used
func (m *HostInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HostInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostInformation) UnmarshalBinary(b []byte) error {
	var res HostInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
