// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SQLServer Specifies the details of a SQL server.
//
// swagger:model SQLServer
type SQLServer struct {

	// Specifies the unique identifier of the SQL server host.
	ID *string `json:"id,omitempty"`

	// Specifies the resource information about the SQL server host.
	ResourceInfo *AppResource `json:"resourceInfo,omitempty"`

	// Specifies the information related to agent running on the SQL server.
	AgentInfo *AgentInformation `json:"agentInfo,omitempty"`

	// Specifies the error information if any associated with SQL server host.
	Error *Error `json:"error,omitempty"`

	// Indicates whether this is a active node of a FCI cluster or hosts primary replica of a AAG group.
	IsPrimary *bool `json:"isPrimary,omitempty"`

	// Specifies the list of all sql instances running inside the current SQL host.
	Instances []*SQLServerInstance `json:"instances"`

	// Indicates to the UI whether this server should be selected by default
	IsSelectedByDefault *bool `json:"isSelectedByDefault,omitempty"`
}

// Validate validates this SQL server
func (m *SQLServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SQLServer) validateResourceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceInfo) { // not required
		return nil
	}

	if m.ResourceInfo != nil {
		if err := m.ResourceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SQLServer) validateAgentInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentInfo) { // not required
		return nil
	}

	if m.AgentInfo != nil {
		if err := m.AgentInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SQLServer) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *SQLServer) validateInstances(formats strfmt.Registry) error {
	if swag.IsZero(m.Instances) { // not required
		return nil
	}

	for i := 0; i < len(m.Instances); i++ {
		if swag.IsZero(m.Instances[i]) { // not required
			continue
		}

		if m.Instances[i] != nil {
			if err := m.Instances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this SQL server based on the context it is used
func (m *SQLServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SQLServer) contextValidateResourceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceInfo != nil {

		if swag.IsZero(m.ResourceInfo) { // not required
			return nil
		}

		if err := m.ResourceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SQLServer) contextValidateAgentInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentInfo != nil {

		if swag.IsZero(m.AgentInfo) { // not required
			return nil
		}

		if err := m.AgentInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SQLServer) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *SQLServer) contextValidateInstances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Instances); i++ {

		if m.Instances[i] != nil {

			if swag.IsZero(m.Instances[i]) { // not required
				return nil
			}

			if err := m.Instances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SQLServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SQLServer) UnmarshalBinary(b []byte) error {
	var res SQLServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
