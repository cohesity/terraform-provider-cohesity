// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SapHanaSourceRegistrationParams Register SAP HANA source registration request parameters.
//
// Specifies parameters to register a SAP HANA source.
//
// swagger:model SapHanaSourceRegistrationParams
type SapHanaSourceRegistrationParams struct {

	// Specifies the IPs/hostnames for the nodes forming the SAP HANA source cluster.
	// Required: true
	// Min Items: 1
	// Unique: true
	Hosts []string `json:"hosts"`

	// Specifies the absolute path of scripts used to interact with the SAP HANA source.
	// Required: true
	ScriptDir *string `json:"scriptDir"`

	// Specifies user friendly name for the source.
	// Required: true
	SourceName *string `json:"sourceName"`
}

// Validate validates this sap hana source registration params
func (m *SapHanaSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptDir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SapHanaSourceRegistrationParams) validateHosts(formats strfmt.Registry) error {

	if err := validate.Required("hosts", "body", m.Hosts); err != nil {
		return err
	}

	iHostsSize := int64(len(m.Hosts))

	if err := validate.MinItems("hosts", "body", iHostsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("hosts", "body", m.Hosts); err != nil {
		return err
	}

	return nil
}

func (m *SapHanaSourceRegistrationParams) validateScriptDir(formats strfmt.Registry) error {

	if err := validate.Required("scriptDir", "body", m.ScriptDir); err != nil {
		return err
	}

	return nil
}

func (m *SapHanaSourceRegistrationParams) validateSourceName(formats strfmt.Registry) error {

	if err := validate.Required("sourceName", "body", m.SourceName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sap hana source registration params based on context it is used
func (m *SapHanaSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SapHanaSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SapHanaSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res SapHanaSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
