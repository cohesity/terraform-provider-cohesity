// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonSearchIndexedObjectsRequestParams Common Search Indexed Objects Params
//
// Specifies the common params to search for indexed objects.
//
// swagger:model CommonSearchIndexedObjectsRequestParams
type CommonSearchIndexedObjectsRequestParams struct {

	// Specifies a list of Protection Group ids to filter the indexed objects. If specified, the objects indexed by specified Protection Group ids will be returned.
	ProtectionGroupIds []string `json:"protectionGroupIds"`

	// Specifies the Storage Domain ids to filter indexed objects for which Protection Groups are writing data to Cohesity Views on the specified Storage Domains.
	StorageDomainIds []int64 `json:"storageDomainIds"`

	// TenantId contains id of the tenant for which objects are to be returned.
	TenantID *string `json:"tenantId,omitempty"`

	// If true, the response will include objects which belongs to all tenants which the current user has permission to see. Default value is false.
	IncludeTenants *bool `json:"includeTenants,omitempty"`

	// "This field is deprecated. Please use mightHaveTagIds."
	// Unique: true
	Tags []string `json:"tags"`

	// "This field is deprecated. Please use mightHaveSnapshotTagIds."
	SnapshotTags []string `json:"snapshotTags"`

	// Specifies tags which must be all present in the document.
	// Unique: true
	MustHaveTagIds []string `json:"mustHaveTagIds"`

	// Specifies list of tags, one or more of which might be present in the
	// document. These are OR'ed together and the resulting criteria AND'ed
	// with the rest of the query.
	// Unique: true
	MightHaveTagIds []string `json:"mightHaveTagIds"`

	// Specifies snapshot tags which must be all present in the document.
	// Unique: true
	MustHaveSnapshotTagIds []string `json:"mustHaveSnapshotTagIds"`

	// Specifies list of snapshot tags, one or more of which might be
	// present in the document. These are OR'ed together and the resulting
	// criteria AND'ed with the rest of the query.
	// Unique: true
	MightHaveSnapshotTagIds []string `json:"mightHaveSnapshotTagIds"`

	// Specifies the pagination cookie with which subsequent parts of the response can be fetched.
	PaginationCookie *string `json:"paginationCookie,omitempty"`

	// Specifies the number of indexed objects to be fetched for the specified pagination cookie.
	Count *int32 `json:"count,omitempty"`

	// Specifies the object type to be searched for.
	// Required: true
	// Enum: ["Emails","Files","CassandraObjects","CouchbaseObjects","HbaseObjects","HiveObjects","MongoObjects","HDFSObjects","ExchangeObjects","PublicFolders","GroupsObjects","TeamsObjects","SharepointObjects","OneDriveObjects","UdaObjects","SfdcRecords"]
	ObjectType *string `json:"objectType"`

	// Specifies whether we can serve the GET request from the read replica cache. There is a lag of 15 seconds between the read replica and primary data source.
	UseCachedData *bool `json:"useCachedData,omitempty"`
}

// Validate validates this common search indexed objects request params
func (m *CommonSearchIndexedObjectsRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMustHaveTagIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMightHaveTagIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMustHaveSnapshotTagIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMightHaveSnapshotTagIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonSearchIndexedObjectsRequestParams) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

func (m *CommonSearchIndexedObjectsRequestParams) validateMustHaveTagIds(formats strfmt.Registry) error {
	if swag.IsZero(m.MustHaveTagIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("mustHaveTagIds", "body", m.MustHaveTagIds); err != nil {
		return err
	}

	for i := 0; i < len(m.MustHaveTagIds); i++ {

		if err := validate.Pattern("mustHaveTagIds"+"."+strconv.Itoa(i), "body", m.MustHaveTagIds[i], `^\d+:\d+:[A-Z0-9-]+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *CommonSearchIndexedObjectsRequestParams) validateMightHaveTagIds(formats strfmt.Registry) error {
	if swag.IsZero(m.MightHaveTagIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("mightHaveTagIds", "body", m.MightHaveTagIds); err != nil {
		return err
	}

	for i := 0; i < len(m.MightHaveTagIds); i++ {

		if err := validate.Pattern("mightHaveTagIds"+"."+strconv.Itoa(i), "body", m.MightHaveTagIds[i], `^\d+:\d+:[A-Z0-9-]+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *CommonSearchIndexedObjectsRequestParams) validateMustHaveSnapshotTagIds(formats strfmt.Registry) error {
	if swag.IsZero(m.MustHaveSnapshotTagIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("mustHaveSnapshotTagIds", "body", m.MustHaveSnapshotTagIds); err != nil {
		return err
	}

	for i := 0; i < len(m.MustHaveSnapshotTagIds); i++ {

		if err := validate.Pattern("mustHaveSnapshotTagIds"+"."+strconv.Itoa(i), "body", m.MustHaveSnapshotTagIds[i], `^\d+:\d+:[A-Z0-9-]+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *CommonSearchIndexedObjectsRequestParams) validateMightHaveSnapshotTagIds(formats strfmt.Registry) error {
	if swag.IsZero(m.MightHaveSnapshotTagIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("mightHaveSnapshotTagIds", "body", m.MightHaveSnapshotTagIds); err != nil {
		return err
	}

	for i := 0; i < len(m.MightHaveSnapshotTagIds); i++ {

		if err := validate.Pattern("mightHaveSnapshotTagIds"+"."+strconv.Itoa(i), "body", m.MightHaveSnapshotTagIds[i], `^\d+:\d+:[A-Z0-9-]+$`); err != nil {
			return err
		}

	}

	return nil
}

var commonSearchIndexedObjectsRequestParamsTypeObjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Emails","Files","CassandraObjects","CouchbaseObjects","HbaseObjects","HiveObjects","MongoObjects","HDFSObjects","ExchangeObjects","PublicFolders","GroupsObjects","TeamsObjects","SharepointObjects","OneDriveObjects","UdaObjects","SfdcRecords"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonSearchIndexedObjectsRequestParamsTypeObjectTypePropEnum = append(commonSearchIndexedObjectsRequestParamsTypeObjectTypePropEnum, v)
	}
}

const (

	// CommonSearchIndexedObjectsRequestParamsObjectTypeEmails captures enum value "Emails"
	CommonSearchIndexedObjectsRequestParamsObjectTypeEmails string = "Emails"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeFiles captures enum value "Files"
	CommonSearchIndexedObjectsRequestParamsObjectTypeFiles string = "Files"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeCassandraObjects captures enum value "CassandraObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeCassandraObjects string = "CassandraObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeCouchbaseObjects captures enum value "CouchbaseObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeCouchbaseObjects string = "CouchbaseObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeHbaseObjects captures enum value "HbaseObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeHbaseObjects string = "HbaseObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeHiveObjects captures enum value "HiveObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeHiveObjects string = "HiveObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeMongoObjects captures enum value "MongoObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeMongoObjects string = "MongoObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeHDFSObjects captures enum value "HDFSObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeHDFSObjects string = "HDFSObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeExchangeObjects captures enum value "ExchangeObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeExchangeObjects string = "ExchangeObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypePublicFolders captures enum value "PublicFolders"
	CommonSearchIndexedObjectsRequestParamsObjectTypePublicFolders string = "PublicFolders"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeGroupsObjects captures enum value "GroupsObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeGroupsObjects string = "GroupsObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeTeamsObjects captures enum value "TeamsObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeTeamsObjects string = "TeamsObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeSharepointObjects captures enum value "SharepointObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeSharepointObjects string = "SharepointObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeOneDriveObjects captures enum value "OneDriveObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeOneDriveObjects string = "OneDriveObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeUdaObjects captures enum value "UdaObjects"
	CommonSearchIndexedObjectsRequestParamsObjectTypeUdaObjects string = "UdaObjects"

	// CommonSearchIndexedObjectsRequestParamsObjectTypeSfdcRecords captures enum value "SfdcRecords"
	CommonSearchIndexedObjectsRequestParamsObjectTypeSfdcRecords string = "SfdcRecords"
)

// prop value enum
func (m *CommonSearchIndexedObjectsRequestParams) validateObjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonSearchIndexedObjectsRequestParamsTypeObjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonSearchIndexedObjectsRequestParams) validateObjectType(formats strfmt.Registry) error {

	if err := validate.Required("objectType", "body", m.ObjectType); err != nil {
		return err
	}

	// value enum
	if err := m.validateObjectTypeEnum("objectType", "body", *m.ObjectType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common search indexed objects request params based on context it is used
func (m *CommonSearchIndexedObjectsRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonSearchIndexedObjectsRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonSearchIndexedObjectsRequestParams) UnmarshalBinary(b []byte) error {
	var res CommonSearchIndexedObjectsRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
