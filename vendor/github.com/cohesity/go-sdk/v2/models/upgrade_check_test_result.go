// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradeCheckTestResult :Healthcheck test result"
//
// # The healthcheck test result
//
// swagger:model UpgradeCheckTestResult
type UpgradeCheckTestResult struct {

	// The healthcheck test id
	TestID string `json:"testId,omitempty"`

	// The healthcheck test name
	TestName string `json:"testName,omitempty"`

	// The healthcheck test result
	// Enum: ["Passed","Failed","Warning","Skipped","Error","Timeout","Unknown"]
	TestResult string `json:"testResult,omitempty"`

	// The healthcheck test output
	TestOutput string `json:"testOutput,omitempty"`

	// The kb link for diagnosing test failure
	TestKbLink string `json:"testKbLink,omitempty"`
}

// Validate validates this upgrade check test result
func (m *UpgradeCheckTestResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTestResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradeCheckTestResultTypeTestResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Passed","Failed","Warning","Skipped","Error","Timeout","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeCheckTestResultTypeTestResultPropEnum = append(upgradeCheckTestResultTypeTestResultPropEnum, v)
	}
}

const (

	// UpgradeCheckTestResultTestResultPassed captures enum value "Passed"
	UpgradeCheckTestResultTestResultPassed string = "Passed"

	// UpgradeCheckTestResultTestResultFailed captures enum value "Failed"
	UpgradeCheckTestResultTestResultFailed string = "Failed"

	// UpgradeCheckTestResultTestResultWarning captures enum value "Warning"
	UpgradeCheckTestResultTestResultWarning string = "Warning"

	// UpgradeCheckTestResultTestResultSkipped captures enum value "Skipped"
	UpgradeCheckTestResultTestResultSkipped string = "Skipped"

	// UpgradeCheckTestResultTestResultError captures enum value "Error"
	UpgradeCheckTestResultTestResultError string = "Error"

	// UpgradeCheckTestResultTestResultTimeout captures enum value "Timeout"
	UpgradeCheckTestResultTestResultTimeout string = "Timeout"

	// UpgradeCheckTestResultTestResultUnknown captures enum value "Unknown"
	UpgradeCheckTestResultTestResultUnknown string = "Unknown"
)

// prop value enum
func (m *UpgradeCheckTestResult) validateTestResultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeCheckTestResultTypeTestResultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeCheckTestResult) validateTestResult(formats strfmt.Registry) error {
	if swag.IsZero(m.TestResult) { // not required
		return nil
	}

	// value enum
	if err := m.validateTestResultEnum("testResult", "body", m.TestResult); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upgrade check test result based on context it is used
func (m *UpgradeCheckTestResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeCheckTestResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeCheckTestResult) UnmarshalBinary(b []byte) error {
	var res UpgradeCheckTestResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
