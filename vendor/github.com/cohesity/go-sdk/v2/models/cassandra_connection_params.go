// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CassandraConnectionParams Parameters to connect and query cassandra config file.
//
// Specifies the parameters to connect to a Cassandra seed node and fetch information from its cassandra config file.
//
// swagger:model CassandraConnectionParams
type CassandraConnectionParams struct {

	// Any one seed node of the Cassandra cluster.
	// Required: true
	SeedNode *string `json:"seedNode"`

	// Directory path containing Cassandra configuration YAML file.
	// Required: true
	ConfigDirectory *string `json:"configDirectory"`

	// Directory from where DSE specific configuration can be read. This should be set only when you are using the DSE distribution of Cassandra.
	DseConfigurationDirectory *string `json:"dseConfigurationDirectory,omitempty"`

	// Set to true if this cluster has DSE tiered storage.
	// Required: true
	IsDseTieredStorage *bool `json:"isDseTieredStorage"`

	// Set to true if this cluster has DSE Authenticator.
	// Required: true
	IsDseAuthenticator *bool `json:"isDseAuthenticator"`

	// SSH username + password that will be used for reading configuration file and for scp backup.Either 'sshPasswordCredentials' or 'sshPrivateKeyCredentials' are required.
	SSHPasswordCredentials *SSHPasswordCredentials `json:"sshPasswordCredentials,omitempty"`

	// SSH  userID + privateKey that will be used for reading configuration file and for scp backup.
	SSHPrivateKeyCredentials *SSHPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
}

// Validate validates this cassandra connection params
func (m *CassandraConnectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeedNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigDirectory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDseTieredStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDseAuthenticator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPasswordCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPrivateKeyCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraConnectionParams) validateSeedNode(formats strfmt.Registry) error {

	if err := validate.Required("seedNode", "body", m.SeedNode); err != nil {
		return err
	}

	return nil
}

func (m *CassandraConnectionParams) validateConfigDirectory(formats strfmt.Registry) error {

	if err := validate.Required("configDirectory", "body", m.ConfigDirectory); err != nil {
		return err
	}

	return nil
}

func (m *CassandraConnectionParams) validateIsDseTieredStorage(formats strfmt.Registry) error {

	if err := validate.Required("isDseTieredStorage", "body", m.IsDseTieredStorage); err != nil {
		return err
	}

	return nil
}

func (m *CassandraConnectionParams) validateIsDseAuthenticator(formats strfmt.Registry) error {

	if err := validate.Required("isDseAuthenticator", "body", m.IsDseAuthenticator); err != nil {
		return err
	}

	return nil
}

func (m *CassandraConnectionParams) validateSSHPasswordCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHPasswordCredentials) { // not required
		return nil
	}

	if m.SSHPasswordCredentials != nil {
		if err := m.SSHPasswordCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPasswordCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPasswordCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraConnectionParams) validateSSHPrivateKeyCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHPrivateKeyCredentials) { // not required
		return nil
	}

	if m.SSHPrivateKeyCredentials != nil {
		if err := m.SSHPrivateKeyCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPrivateKeyCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPrivateKeyCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cassandra connection params based on the context it is used
func (m *CassandraConnectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSSHPasswordCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHPrivateKeyCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraConnectionParams) contextValidateSSHPasswordCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHPasswordCredentials != nil {

		if swag.IsZero(m.SSHPasswordCredentials) { // not required
			return nil
		}

		if err := m.SSHPasswordCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPasswordCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPasswordCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraConnectionParams) contextValidateSSHPrivateKeyCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHPrivateKeyCredentials != nil {

		if swag.IsZero(m.SSHPrivateKeyCredentials) { // not required
			return nil
		}

		if err := m.SSHPrivateKeyCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPrivateKeyCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPrivateKeyCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CassandraConnectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraConnectionParams) UnmarshalBinary(b []byte) error {
	var res CassandraConnectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
