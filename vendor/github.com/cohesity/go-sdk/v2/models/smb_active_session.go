// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SmbActiveSession Specifies an active session and its file opens.
//
// swagger:model SmbActiveSession
type SmbActiveSession struct {

	// Specifies the id of the session.
	SessionID *int64 `json:"sessionId,omitempty"`

	// Specifies the IP address from which the file is open.
	ClientIP *string `json:"clientIp,omitempty"`

	// Specifies the username who keeps the file open.
	UserName *string `json:"userName,omitempty"`

	// Specifies the domain of the user.
	Domain *string `json:"domain,omitempty"`

	// Specifies an active open of an SMB file, its access and sharing information.
	ActiveOpens []*SmbActiveOpen `json:"activeOpens"`
}

// Validate validates this smb active session
func (m *SmbActiveSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveOpens(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmbActiveSession) validateActiveOpens(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveOpens) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveOpens); i++ {
		if swag.IsZero(m.ActiveOpens[i]) { // not required
			continue
		}

		if m.ActiveOpens[i] != nil {
			if err := m.ActiveOpens[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeOpens" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activeOpens" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this smb active session based on the context it is used
func (m *SmbActiveSession) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveOpens(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmbActiveSession) contextValidateActiveOpens(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActiveOpens); i++ {

		if m.ActiveOpens[i] != nil {

			if swag.IsZero(m.ActiveOpens[i]) { // not required
				return nil
			}

			if err := m.ActiveOpens[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeOpens" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activeOpens" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmbActiveSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbActiveSession) UnmarshalBinary(b []byte) error {
	var res SmbActiveSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
