// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ActiveDirectory Specifies an Active Directory.
//
// swagger:model ActiveDirectory
type ActiveDirectory struct {
	CommonActiveDirectoryParams

	// Specifies the id of the task log related to this Active Directory.
	// Read Only: true
	TaskLogs *TaskLogs `json:"taskLogs,omitempty"`

	// Specifies the domain name of the Active Directory.
	DomainName *string `json:"domainName,omitempty"`

	// Specifies a list of Centrify zones.
	CentrifyZones []*CentrifyZones `json:"centrifyZones"`

	// A list of domain names with a list of it's domain controllers.
	DomainControllers []*DomainControllers `json:"domainControllers"`

	// Specifies a list of security principals.
	SecurityPrincipals []*SecurityPrincipal `json:"securityPrincipals"`

	// Specifies the list of tenants that have permissions for this Active Directory.
	Permissions []*Tenant `json:"permissions"`

	// Specifies level of transitive Active Directory trust domains to be used.
	TransitiveAdTrustLevelLimit *int32 `json:"transitiveAdTrustLevelLimit,omitempty"`

	// Specifies a partial error, if any, as part of the Active Directory Create or Update response. Supported error codes: [MachineAccountNeedFixing]
	Error *ActiveDirectoryError `json:"error,omitempty"`

	// Specifies the params of the user id mapping info of an Active Directory.
	IDMappingParams *IDMappingParams `json:"idMappingParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ActiveDirectory) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonActiveDirectoryParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonActiveDirectoryParams = aO0

	// AO1
	var dataAO1 struct {
		TaskLogs *TaskLogs `json:"taskLogs,omitempty"`

		DomainName *string `json:"domainName,omitempty"`

		CentrifyZones []*CentrifyZones `json:"centrifyZones"`

		DomainControllers []*DomainControllers `json:"domainControllers"`

		SecurityPrincipals []*SecurityPrincipal `json:"securityPrincipals"`

		Permissions []*Tenant `json:"permissions"`

		TransitiveAdTrustLevelLimit *int32 `json:"transitiveAdTrustLevelLimit,omitempty"`

		Error *ActiveDirectoryError `json:"error,omitempty"`

		IDMappingParams *IDMappingParams `json:"idMappingParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.TaskLogs = dataAO1.TaskLogs

	m.DomainName = dataAO1.DomainName

	m.CentrifyZones = dataAO1.CentrifyZones

	m.DomainControllers = dataAO1.DomainControllers

	m.SecurityPrincipals = dataAO1.SecurityPrincipals

	m.Permissions = dataAO1.Permissions

	m.TransitiveAdTrustLevelLimit = dataAO1.TransitiveAdTrustLevelLimit

	m.Error = dataAO1.Error

	m.IDMappingParams = dataAO1.IDMappingParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ActiveDirectory) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonActiveDirectoryParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		TaskLogs *TaskLogs `json:"taskLogs,omitempty"`

		DomainName *string `json:"domainName,omitempty"`

		CentrifyZones []*CentrifyZones `json:"centrifyZones"`

		DomainControllers []*DomainControllers `json:"domainControllers"`

		SecurityPrincipals []*SecurityPrincipal `json:"securityPrincipals"`

		Permissions []*Tenant `json:"permissions"`

		TransitiveAdTrustLevelLimit *int32 `json:"transitiveAdTrustLevelLimit,omitempty"`

		Error *ActiveDirectoryError `json:"error,omitempty"`

		IDMappingParams *IDMappingParams `json:"idMappingParams,omitempty"`
	}

	dataAO1.TaskLogs = m.TaskLogs

	dataAO1.DomainName = m.DomainName

	dataAO1.CentrifyZones = m.CentrifyZones

	dataAO1.DomainControllers = m.DomainControllers

	dataAO1.SecurityPrincipals = m.SecurityPrincipals

	dataAO1.Permissions = m.Permissions

	dataAO1.TransitiveAdTrustLevelLimit = m.TransitiveAdTrustLevelLimit

	dataAO1.Error = m.Error

	dataAO1.IDMappingParams = m.IDMappingParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this active directory
func (m *ActiveDirectory) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonActiveDirectoryParams
	if err := m.CommonActiveDirectoryParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCentrifyZones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainControllers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPrincipals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDMappingParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActiveDirectory) validateTaskLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskLogs) { // not required
		return nil
	}

	if m.TaskLogs != nil {
		if err := m.TaskLogs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskLogs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taskLogs")
			}
			return err
		}
	}

	return nil
}

func (m *ActiveDirectory) validateCentrifyZones(formats strfmt.Registry) error {

	if swag.IsZero(m.CentrifyZones) { // not required
		return nil
	}

	for i := 0; i < len(m.CentrifyZones); i++ {
		if swag.IsZero(m.CentrifyZones[i]) { // not required
			continue
		}

		if m.CentrifyZones[i] != nil {
			if err := m.CentrifyZones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("centrifyZones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("centrifyZones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActiveDirectory) validateDomainControllers(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainControllers) { // not required
		return nil
	}

	for i := 0; i < len(m.DomainControllers); i++ {
		if swag.IsZero(m.DomainControllers[i]) { // not required
			continue
		}

		if m.DomainControllers[i] != nil {
			if err := m.DomainControllers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domainControllers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("domainControllers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActiveDirectory) validateSecurityPrincipals(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityPrincipals) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityPrincipals); i++ {
		if swag.IsZero(m.SecurityPrincipals[i]) { // not required
			continue
		}

		if m.SecurityPrincipals[i] != nil {
			if err := m.SecurityPrincipals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("securityPrincipals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("securityPrincipals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActiveDirectory) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActiveDirectory) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *ActiveDirectory) validateIDMappingParams(formats strfmt.Registry) error {

	if swag.IsZero(m.IDMappingParams) { // not required
		return nil
	}

	if m.IDMappingParams != nil {
		if err := m.IDMappingParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("idMappingParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("idMappingParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this active directory based on the context it is used
func (m *ActiveDirectory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonActiveDirectoryParams
	if err := m.CommonActiveDirectoryParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCentrifyZones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDomainControllers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPrincipals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIDMappingParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActiveDirectory) contextValidateTaskLogs(ctx context.Context, formats strfmt.Registry) error {

	if m.TaskLogs != nil {

		if swag.IsZero(m.TaskLogs) { // not required
			return nil
		}

		if err := m.TaskLogs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskLogs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taskLogs")
			}
			return err
		}
	}

	return nil
}

func (m *ActiveDirectory) contextValidateCentrifyZones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CentrifyZones); i++ {

		if m.CentrifyZones[i] != nil {

			if swag.IsZero(m.CentrifyZones[i]) { // not required
				return nil
			}

			if err := m.CentrifyZones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("centrifyZones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("centrifyZones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActiveDirectory) contextValidateDomainControllers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DomainControllers); i++ {

		if m.DomainControllers[i] != nil {

			if swag.IsZero(m.DomainControllers[i]) { // not required
				return nil
			}

			if err := m.DomainControllers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domainControllers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("domainControllers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActiveDirectory) contextValidateSecurityPrincipals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityPrincipals); i++ {

		if m.SecurityPrincipals[i] != nil {

			if swag.IsZero(m.SecurityPrincipals[i]) { // not required
				return nil
			}

			if err := m.SecurityPrincipals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("securityPrincipals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("securityPrincipals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActiveDirectory) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Permissions); i++ {

		if m.Permissions[i] != nil {

			if swag.IsZero(m.Permissions[i]) { // not required
				return nil
			}

			if err := m.Permissions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActiveDirectory) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *ActiveDirectory) contextValidateIDMappingParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IDMappingParams != nil {

		if swag.IsZero(m.IDMappingParams) { // not required
			return nil
		}

		if err := m.IDMappingParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("idMappingParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("idMappingParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActiveDirectory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActiveDirectory) UnmarshalBinary(b []byte) error {
	var res ActiveDirectory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
