// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchMsGroupsRequestParams Search Groups request params.
//
// Specifies the request params to search for Groups items.
//
// swagger:model SearchMsGroupsRequestParams
type SearchMsGroupsRequestParams struct {

	// Specifies the params to search MS group mailbox indexed items.
	MailboxParams *SearchEmailRequestParamsBase `json:"mailboxParams,omitempty"`

	// Specifies the params to search MS group site indexed items.
	SiteParams *SearchDocumentLibraryRequestParams `json:"siteParams,omitempty"`

	// Specifies the O365 specific params to search MS group indexed items.
	O365Params *O365SearchRequestParams `json:"o365Params,omitempty"`
}

// Validate validates this search ms groups request params
func (m *SearchMsGroupsRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMailboxParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO365Params(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchMsGroupsRequestParams) validateMailboxParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MailboxParams) { // not required
		return nil
	}

	if m.MailboxParams != nil {
		if err := m.MailboxParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailboxParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailboxParams")
			}
			return err
		}
	}

	return nil
}

func (m *SearchMsGroupsRequestParams) validateSiteParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteParams) { // not required
		return nil
	}

	if m.SiteParams != nil {
		if err := m.SiteParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteParams")
			}
			return err
		}
	}

	return nil
}

func (m *SearchMsGroupsRequestParams) validateO365Params(formats strfmt.Registry) error {
	if swag.IsZero(m.O365Params) { // not required
		return nil
	}

	if m.O365Params != nil {
		if err := m.O365Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search ms groups request params based on the context it is used
func (m *SearchMsGroupsRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMailboxParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSiteParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateO365Params(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchMsGroupsRequestParams) contextValidateMailboxParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MailboxParams != nil {

		if swag.IsZero(m.MailboxParams) { // not required
			return nil
		}

		if err := m.MailboxParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailboxParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailboxParams")
			}
			return err
		}
	}

	return nil
}

func (m *SearchMsGroupsRequestParams) contextValidateSiteParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SiteParams != nil {

		if swag.IsZero(m.SiteParams) { // not required
			return nil
		}

		if err := m.SiteParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siteParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siteParams")
			}
			return err
		}
	}

	return nil
}

func (m *SearchMsGroupsRequestParams) contextValidateO365Params(ctx context.Context, formats strfmt.Registry) error {

	if m.O365Params != nil {

		if swag.IsZero(m.O365Params) { // not required
			return nil
		}

		if err := m.O365Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("o365Params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("o365Params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchMsGroupsRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchMsGroupsRequestParams) UnmarshalBinary(b []byte) error {
	var res SearchMsGroupsRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
