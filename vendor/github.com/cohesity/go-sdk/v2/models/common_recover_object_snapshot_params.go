// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonRecoverObjectSnapshotParams Common Recover Object Snapshot Params.
//
// Specifies the common snapshot parameters for a protected object.
//
// swagger:model CommonRecoverObjectSnapshotParams
type CommonRecoverObjectSnapshotParams struct {

	// Specifies the snapshot id.
	// Required: true
	SnapshotID *string `json:"snapshotId"`

	// Specifies the timestamp (in microseconds. from epoch) for recovering to a point-in-time in the past.
	PointInTimeUsecs *int64 `json:"pointInTimeUsecs,omitempty"`

	// Specifies the protection group id of the object snapshot.
	ProtectionGroupID *string `json:"protectionGroupId,omitempty"`

	// Specifies the protection group name of the object snapshot.
	ProtectionGroupName *string `json:"protectionGroupName,omitempty"`

	// Specifies the time when the snapshot is created in Unix timestamp epoch in microseconds.
	// Read Only: true
	SnapshotCreationTimeUsecs *int64 `json:"snapshotCreationTimeUsecs,omitempty"`

	// Specifies the snapshot target type.
	// Read Only: true
	// Enum: ["Local","Archival","RpaasArchival","StorageArraySnapshot","Remote"]
	SnapshotTargetType *string `json:"snapshotTargetType,omitempty"`

	// Specifies the ID of the Storage Domain where this snapshot is stored.
	// Read Only: true
	StorageDomainID *int64 `json:"storageDomainId,omitempty"`

	// Progress monitor task id for Recovery of VM.
	// Read Only: true
	ProgressTaskID *string `json:"progressTaskId,omitempty"`

	// Specifies that user wants to perform standby restore if it is enabled for this object.
	RecoverFromStandby *bool `json:"recoverFromStandby,omitempty"`

	// Status of the Recovery. 'Running' indicates that the Recovery is still running. 'Canceled' indicates that the Recovery has been cancelled. 'Canceling' indicates that the Recovery is in the process of being cancelled. 'Failed' indicates that the Recovery has failed. 'Succeeded' indicates that the Recovery has finished successfully. 'SucceededWithWarning' indicates that the Recovery finished successfully, but there were some warning messages. 'Skipped' indicates that the Recovery task was skipped.
	// Read Only: true
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]
	Status *string `json:"status,omitempty"`

	// Specifies the start time of the Recovery in Unix timestamp epoch in microseconds.
	// Read Only: true
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the end time of the Recovery in Unix timestamp epoch in microseconds. This field will be populated only after Recovery is finished.
	// Read Only: true
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specify error messages about the object.
	// Read Only: true
	Messages []string `json:"messages"`

	// Specify the total bytes restored.
	// Read Only: true
	BytesRestored *int64 `json:"bytesRestored,omitempty"`

	// Specifies the archival target information if the snapshot is an archival snapshot.
	// Read Only: true
	ArchivalTargetInfo *ArchivalTargetSummaryInfo `json:"archivalTargetInfo,omitempty"`

	// Specifies the information about the object for which the snapshot is taken.
	// Read Only: true
	ObjectInfo *ObjectSummary `json:"objectInfo,omitempty"`
}

// Validate validates this common recover object snapshot params
func (m *CommonRecoverObjectSnapshotParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnapshotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotTargetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivalTargetInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonRecoverObjectSnapshotParams) validateSnapshotID(formats strfmt.Registry) error {

	if err := validate.Required("snapshotId", "body", m.SnapshotID); err != nil {
		return err
	}

	return nil
}

var commonRecoverObjectSnapshotParamsTypeSnapshotTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Local","Archival","RpaasArchival","StorageArraySnapshot","Remote"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonRecoverObjectSnapshotParamsTypeSnapshotTargetTypePropEnum = append(commonRecoverObjectSnapshotParamsTypeSnapshotTargetTypePropEnum, v)
	}
}

const (

	// CommonRecoverObjectSnapshotParamsSnapshotTargetTypeLocal captures enum value "Local"
	CommonRecoverObjectSnapshotParamsSnapshotTargetTypeLocal string = "Local"

	// CommonRecoverObjectSnapshotParamsSnapshotTargetTypeArchival captures enum value "Archival"
	CommonRecoverObjectSnapshotParamsSnapshotTargetTypeArchival string = "Archival"

	// CommonRecoverObjectSnapshotParamsSnapshotTargetTypeRpaasArchival captures enum value "RpaasArchival"
	CommonRecoverObjectSnapshotParamsSnapshotTargetTypeRpaasArchival string = "RpaasArchival"

	// CommonRecoverObjectSnapshotParamsSnapshotTargetTypeStorageArraySnapshot captures enum value "StorageArraySnapshot"
	CommonRecoverObjectSnapshotParamsSnapshotTargetTypeStorageArraySnapshot string = "StorageArraySnapshot"

	// CommonRecoverObjectSnapshotParamsSnapshotTargetTypeRemote captures enum value "Remote"
	CommonRecoverObjectSnapshotParamsSnapshotTargetTypeRemote string = "Remote"
)

// prop value enum
func (m *CommonRecoverObjectSnapshotParams) validateSnapshotTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonRecoverObjectSnapshotParamsTypeSnapshotTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonRecoverObjectSnapshotParams) validateSnapshotTargetType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotTargetType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSnapshotTargetTypeEnum("snapshotTargetType", "body", *m.SnapshotTargetType); err != nil {
		return err
	}

	return nil
}

var commonRecoverObjectSnapshotParamsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonRecoverObjectSnapshotParamsTypeStatusPropEnum = append(commonRecoverObjectSnapshotParamsTypeStatusPropEnum, v)
	}
}

const (

	// CommonRecoverObjectSnapshotParamsStatusAccepted captures enum value "Accepted"
	CommonRecoverObjectSnapshotParamsStatusAccepted string = "Accepted"

	// CommonRecoverObjectSnapshotParamsStatusRunning captures enum value "Running"
	CommonRecoverObjectSnapshotParamsStatusRunning string = "Running"

	// CommonRecoverObjectSnapshotParamsStatusCanceled captures enum value "Canceled"
	CommonRecoverObjectSnapshotParamsStatusCanceled string = "Canceled"

	// CommonRecoverObjectSnapshotParamsStatusCanceling captures enum value "Canceling"
	CommonRecoverObjectSnapshotParamsStatusCanceling string = "Canceling"

	// CommonRecoverObjectSnapshotParamsStatusFailed captures enum value "Failed"
	CommonRecoverObjectSnapshotParamsStatusFailed string = "Failed"

	// CommonRecoverObjectSnapshotParamsStatusMissed captures enum value "Missed"
	CommonRecoverObjectSnapshotParamsStatusMissed string = "Missed"

	// CommonRecoverObjectSnapshotParamsStatusSucceeded captures enum value "Succeeded"
	CommonRecoverObjectSnapshotParamsStatusSucceeded string = "Succeeded"

	// CommonRecoverObjectSnapshotParamsStatusSucceededWithWarning captures enum value "SucceededWithWarning"
	CommonRecoverObjectSnapshotParamsStatusSucceededWithWarning string = "SucceededWithWarning"

	// CommonRecoverObjectSnapshotParamsStatusOnHold captures enum value "OnHold"
	CommonRecoverObjectSnapshotParamsStatusOnHold string = "OnHold"

	// CommonRecoverObjectSnapshotParamsStatusFinalizing captures enum value "Finalizing"
	CommonRecoverObjectSnapshotParamsStatusFinalizing string = "Finalizing"

	// CommonRecoverObjectSnapshotParamsStatusSkipped captures enum value "Skipped"
	CommonRecoverObjectSnapshotParamsStatusSkipped string = "Skipped"

	// CommonRecoverObjectSnapshotParamsStatusLegalHold captures enum value "LegalHold"
	CommonRecoverObjectSnapshotParamsStatusLegalHold string = "LegalHold"
)

// prop value enum
func (m *CommonRecoverObjectSnapshotParams) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonRecoverObjectSnapshotParamsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonRecoverObjectSnapshotParams) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) validateArchivalTargetInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalTargetInfo) { // not required
		return nil
	}

	if m.ArchivalTargetInfo != nil {
		if err := m.ArchivalTargetInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTargetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTargetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) validateObjectInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectInfo) { // not required
		return nil
	}

	if m.ObjectInfo != nil {
		if err := m.ObjectInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common recover object snapshot params based on the context it is used
func (m *CommonRecoverObjectSnapshotParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSnapshotCreationTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotTargetType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageDomainID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgressTaskID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBytesRestored(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchivalTargetInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateSnapshotCreationTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "snapshotCreationTimeUsecs", "body", m.SnapshotCreationTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateSnapshotTargetType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "snapshotTargetType", "body", m.SnapshotTargetType); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateStorageDomainID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageDomainId", "body", m.StorageDomainID); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateProgressTaskID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "progressTaskId", "body", m.ProgressTaskID); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateStartTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "startTimeUsecs", "body", m.StartTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateEndTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "endTimeUsecs", "body", m.EndTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "messages", "body", []string(m.Messages)); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateBytesRestored(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "bytesRestored", "body", m.BytesRestored); err != nil {
		return err
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateArchivalTargetInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchivalTargetInfo != nil {

		if swag.IsZero(m.ArchivalTargetInfo) { // not required
			return nil
		}

		if err := m.ArchivalTargetInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archivalTargetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archivalTargetInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonRecoverObjectSnapshotParams) contextValidateObjectInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectInfo != nil {

		if swag.IsZero(m.ObjectInfo) { // not required
			return nil
		}

		if err := m.ObjectInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonRecoverObjectSnapshotParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonRecoverObjectSnapshotParams) UnmarshalBinary(b []byte) error {
	var res CommonRecoverObjectSnapshotParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
