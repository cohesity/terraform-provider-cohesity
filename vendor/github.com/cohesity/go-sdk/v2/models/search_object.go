// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchObject Specifies an object.
//
// swagger:model SearchObject
type SearchObject struct {
	Object

	TagObject

	// Specifies the object info on each cluster.
	ObjectProtectionInfos []*ObjectProtectionInfo `json:"objectProtectionInfos"`

	// Specifies the helios tag information for the object
	HeliosTags []*HeliosTagInfo `json:"heliosTags"`

	// Specifies the helios tagged snapshots (snapshots which
	// are tagged by user or thirdparty in control plane) for the object
	TaggedSnapshots []*TaggedSnapshotInfo `json:"taggedSnapshots"`

	// Specifies secondary IDs associated to the object.
	SecondaryIds []*SecondaryID `json:"secondaryIds"`

	// Specifies the Source Object information.
	SourceInfo *Object `json:"sourceInfo,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SearchObject) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Object
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Object = aO0

	// AO1
	var aO1 TagObject
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.TagObject = aO1

	// AO2
	var dataAO2 struct {
		ObjectProtectionInfos []*ObjectProtectionInfo `json:"objectProtectionInfos"`

		HeliosTags []*HeliosTagInfo `json:"heliosTags"`

		TaggedSnapshots []*TaggedSnapshotInfo `json:"taggedSnapshots"`

		SecondaryIds []*SecondaryID `json:"secondaryIds"`

		SourceInfo *Object `json:"sourceInfo,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.ObjectProtectionInfos = dataAO2.ObjectProtectionInfos

	m.HeliosTags = dataAO2.HeliosTags

	m.TaggedSnapshots = dataAO2.TaggedSnapshots

	m.SecondaryIds = dataAO2.SecondaryIds

	m.SourceInfo = dataAO2.SourceInfo

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SearchObject) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.Object)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.TagObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		ObjectProtectionInfos []*ObjectProtectionInfo `json:"objectProtectionInfos"`

		HeliosTags []*HeliosTagInfo `json:"heliosTags"`

		TaggedSnapshots []*TaggedSnapshotInfo `json:"taggedSnapshots"`

		SecondaryIds []*SecondaryID `json:"secondaryIds"`

		SourceInfo *Object `json:"sourceInfo,omitempty"`
	}

	dataAO2.ObjectProtectionInfos = m.ObjectProtectionInfos

	dataAO2.HeliosTags = m.HeliosTags

	dataAO2.TaggedSnapshots = m.TaggedSnapshots

	dataAO2.SecondaryIds = m.SecondaryIds

	dataAO2.SourceInfo = m.SourceInfo

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search object
func (m *SearchObject) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Object
	if err := m.Object.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TagObject
	if err := m.TagObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectProtectionInfos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeliosTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaggedSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchObject) validateObjectProtectionInfos(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectProtectionInfos) { // not required
		return nil
	}

	for i := 0; i < len(m.ObjectProtectionInfos); i++ {
		if swag.IsZero(m.ObjectProtectionInfos[i]) { // not required
			continue
		}

		if m.ObjectProtectionInfos[i] != nil {
			if err := m.ObjectProtectionInfos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectProtectionInfos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectProtectionInfos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchObject) validateHeliosTags(formats strfmt.Registry) error {

	if swag.IsZero(m.HeliosTags) { // not required
		return nil
	}

	for i := 0; i < len(m.HeliosTags); i++ {
		if swag.IsZero(m.HeliosTags[i]) { // not required
			continue
		}

		if m.HeliosTags[i] != nil {
			if err := m.HeliosTags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("heliosTags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("heliosTags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchObject) validateTaggedSnapshots(formats strfmt.Registry) error {

	if swag.IsZero(m.TaggedSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.TaggedSnapshots); i++ {
		if swag.IsZero(m.TaggedSnapshots[i]) { // not required
			continue
		}

		if m.TaggedSnapshots[i] != nil {
			if err := m.TaggedSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taggedSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taggedSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchObject) validateSecondaryIds(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryIds) { // not required
		return nil
	}

	for i := 0; i < len(m.SecondaryIds); i++ {
		if swag.IsZero(m.SecondaryIds[i]) { // not required
			continue
		}

		if m.SecondaryIds[i] != nil {
			if err := m.SecondaryIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaryIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("secondaryIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchObject) validateSourceInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceInfo) { // not required
		return nil
	}

	if m.SourceInfo != nil {
		if err := m.SourceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search object based on the context it is used
func (m *SearchObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Object
	if err := m.Object.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TagObject
	if err := m.TagObject.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectProtectionInfos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeliosTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaggedSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchObject) contextValidateObjectProtectionInfos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ObjectProtectionInfos); i++ {

		if m.ObjectProtectionInfos[i] != nil {

			if swag.IsZero(m.ObjectProtectionInfos[i]) { // not required
				return nil
			}

			if err := m.ObjectProtectionInfos[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectProtectionInfos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectProtectionInfos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchObject) contextValidateHeliosTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HeliosTags); i++ {

		if m.HeliosTags[i] != nil {

			if swag.IsZero(m.HeliosTags[i]) { // not required
				return nil
			}

			if err := m.HeliosTags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("heliosTags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("heliosTags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchObject) contextValidateTaggedSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaggedSnapshots); i++ {

		if m.TaggedSnapshots[i] != nil {

			if swag.IsZero(m.TaggedSnapshots[i]) { // not required
				return nil
			}

			if err := m.TaggedSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taggedSnapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taggedSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchObject) contextValidateSecondaryIds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecondaryIds); i++ {

		if m.SecondaryIds[i] != nil {

			if swag.IsZero(m.SecondaryIds[i]) { // not required
				return nil
			}

			if err := m.SecondaryIds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaryIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("secondaryIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchObject) contextValidateSourceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceInfo != nil {

		if swag.IsZero(m.SourceInfo) { // not required
			return nil
		}

		if err := m.SourceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchObject) UnmarshalBinary(b []byte) error {
	var res SearchObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
