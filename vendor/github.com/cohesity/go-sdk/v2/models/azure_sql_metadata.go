// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureSQLMetadata Specifies the metadata types and values of azure sql.
//
// swagger:model AzureSqlMetadata
type AzureSQLMetadata struct {

	// Specifies the standard username and password type of credentials.
	StandardCredentials *Credentials `json:"standardCredentials,omitempty"`

	// Specifies the type of metadata being sent in the request.
	// Required: true
	// Enum: ["Credentials","ManagedIdentity"]
	MetadataType *string `json:"metadataType"`
}

// Validate validates this azure Sql metadata
func (m *AzureSQLMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStandardCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureSQLMetadata) validateStandardCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.StandardCredentials) { // not required
		return nil
	}

	if m.StandardCredentials != nil {
		if err := m.StandardCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standardCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standardCredentials")
			}
			return err
		}
	}

	return nil
}

var azureSqlMetadataTypeMetadataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Credentials","ManagedIdentity"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureSqlMetadataTypeMetadataTypePropEnum = append(azureSqlMetadataTypeMetadataTypePropEnum, v)
	}
}

const (

	// AzureSQLMetadataMetadataTypeCredentials captures enum value "Credentials"
	AzureSQLMetadataMetadataTypeCredentials string = "Credentials"

	// AzureSQLMetadataMetadataTypeManagedIdentity captures enum value "ManagedIdentity"
	AzureSQLMetadataMetadataTypeManagedIdentity string = "ManagedIdentity"
)

// prop value enum
func (m *AzureSQLMetadata) validateMetadataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureSqlMetadataTypeMetadataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureSQLMetadata) validateMetadataType(formats strfmt.Registry) error {

	if err := validate.Required("metadataType", "body", m.MetadataType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMetadataTypeEnum("metadataType", "body", *m.MetadataType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this azure Sql metadata based on the context it is used
func (m *AzureSQLMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStandardCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureSQLMetadata) contextValidateStandardCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.StandardCredentials != nil {

		if swag.IsZero(m.StandardCredentials) { // not required
			return nil
		}

		if err := m.StandardCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standardCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standardCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureSQLMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureSQLMetadata) UnmarshalBinary(b []byte) error {
	var res AzureSQLMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
