// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Share Share
//
// Specifies the details of a Share.
//
// swagger:model Share
type Share struct {
	UpdateShareParam

	// Specifies the Share name.
	// Required: true
	Name *string `json:"name"`

	// Specifies the View name of this Share.
	// Required: true
	ViewName *string `json:"viewName"`

	// Specifies the id of the View.
	// Read Only: true
	ViewID int64 `json:"viewId,omitempty"`

	// Specifies the View path of this Share.
	// Required: true
	ViewPath *string `json:"viewPath"`

	// Specifies the path for mounting this Share as an NFS share. If Kerberos Provider has multiple hostaliases, each host alias has its own path.
	// Read Only: true
	NfsMountPaths []string `json:"nfsMountPaths"`

	// Specifies the possible paths that can be used to mount this Share as a SMB share. If Active Directory has multiple account names, each machine account has its own path.
	// Read Only: true
	SmbMountPaths []string `json:"smbMountPaths"`

	// Specifies the path to access this Share as an S3 share.
	// Read Only: true
	S3AccessPath *string `json:"s3AccessPath,omitempty"`

	// Specifies the tenant id who has access to this Share.
	// Read Only: true
	TenantID *string `json:"tenantId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Share) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 UpdateShareParam
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.UpdateShareParam = aO0

	// AO1
	var dataAO1 struct {
		Name *string `json:"name"`

		ViewName *string `json:"viewName"`

		ViewID int64 `json:"viewId,omitempty"`

		ViewPath *string `json:"viewPath"`

		NfsMountPaths []string `json:"nfsMountPaths"`

		SmbMountPaths []string `json:"smbMountPaths"`

		S3AccessPath *string `json:"s3AccessPath,omitempty"`

		TenantID *string `json:"tenantId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Name = dataAO1.Name

	m.ViewName = dataAO1.ViewName

	m.ViewID = dataAO1.ViewID

	m.ViewPath = dataAO1.ViewPath

	m.NfsMountPaths = dataAO1.NfsMountPaths

	m.SmbMountPaths = dataAO1.SmbMountPaths

	m.S3AccessPath = dataAO1.S3AccessPath

	m.TenantID = dataAO1.TenantID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Share) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.UpdateShareParam)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Name *string `json:"name"`

		ViewName *string `json:"viewName"`

		ViewID int64 `json:"viewId,omitempty"`

		ViewPath *string `json:"viewPath"`

		NfsMountPaths []string `json:"nfsMountPaths"`

		SmbMountPaths []string `json:"smbMountPaths"`

		S3AccessPath *string `json:"s3AccessPath,omitempty"`

		TenantID *string `json:"tenantId,omitempty"`
	}

	dataAO1.Name = m.Name

	dataAO1.ViewName = m.ViewName

	dataAO1.ViewID = m.ViewID

	dataAO1.ViewPath = m.ViewPath

	dataAO1.NfsMountPaths = m.NfsMountPaths

	dataAO1.SmbMountPaths = m.SmbMountPaths

	dataAO1.S3AccessPath = m.S3AccessPath

	dataAO1.TenantID = m.TenantID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this share
func (m *Share) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with UpdateShareParam
	if err := m.UpdateShareParam.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewPath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Share) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Share) validateViewName(formats strfmt.Registry) error {

	if err := validate.Required("viewName", "body", m.ViewName); err != nil {
		return err
	}

	return nil
}

func (m *Share) validateViewPath(formats strfmt.Registry) error {

	if err := validate.Required("viewPath", "body", m.ViewPath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this share based on the context it is used
func (m *Share) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with UpdateShareParam
	if err := m.UpdateShareParam.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsMountPaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbMountPaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3AccessPath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenantID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Share) contextValidateViewID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "viewId", "body", int64(m.ViewID)); err != nil {
		return err
	}

	return nil
}

func (m *Share) contextValidateNfsMountPaths(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "nfsMountPaths", "body", []string(m.NfsMountPaths)); err != nil {
		return err
	}

	return nil
}

func (m *Share) contextValidateSmbMountPaths(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "smbMountPaths", "body", []string(m.SmbMountPaths)); err != nil {
		return err
	}

	return nil
}

func (m *Share) contextValidateS3AccessPath(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "s3AccessPath", "body", m.S3AccessPath); err != nil {
		return err
	}

	return nil
}

func (m *Share) contextValidateTenantID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Share) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Share) UnmarshalBinary(b []byte) error {
	var res Share
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
