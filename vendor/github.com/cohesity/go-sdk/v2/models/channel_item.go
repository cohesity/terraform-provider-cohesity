// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelItem ChannelItem
//
// Specifies a M365 Teams channel item.
//
// swagger:model ChannelItem
type ChannelItem struct {

	// Specifies the id of this channel.
	ChannelID *string `json:"channelId,omitempty"`

	// Specifies the channel type.
	// Enum: ["Private","Public"]
	ChannelType *string `json:"channelType,omitempty"`

	// Specifies the channel name.
	ChannelName *string `json:"channelName,omitempty"`

	// Specifies the Unix timestamp epoch in seconds at which this channel is created.
	CreationTimeSecs *int64 `json:"creationTimeSecs,omitempty"`

	// Specifies the names of owners of this channel.
	OwnerNames []string `json:"ownerNames"`

	// Specifies the email of this channel.
	ChannelEmail *string `json:"channelEmail,omitempty"`
}

// Validate validates this channel item
func (m *ChannelItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var channelItemTypeChannelTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Private","Public"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		channelItemTypeChannelTypePropEnum = append(channelItemTypeChannelTypePropEnum, v)
	}
}

const (

	// ChannelItemChannelTypePrivate captures enum value "Private"
	ChannelItemChannelTypePrivate string = "Private"

	// ChannelItemChannelTypePublic captures enum value "Public"
	ChannelItemChannelTypePublic string = "Public"
)

// prop value enum
func (m *ChannelItem) validateChannelTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, channelItemTypeChannelTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChannelItem) validateChannelType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChannelTypeEnum("channelType", "body", *m.ChannelType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this channel item based on context it is used
func (m *ChannelItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChannelItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelItem) UnmarshalBinary(b []byte) error {
	var res ChannelItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
