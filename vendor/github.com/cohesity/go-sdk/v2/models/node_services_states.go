// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NodeServicesStates Node services states struct
//
// # Lists node services states
//
// swagger:model NodeServicesStates
type NodeServicesStates struct {

	// Specifies the id of the node.
	NodeID *int64 `json:"nodeId,omitempty"`

	// If the node is not part of any cluster, it returns list of local IPs; otherwise it returns the local IP that matches the cluster subnet.
	NodeIps []string `json:"nodeIps"`

	// Specifies weather node is part of a cluster
	PartOfCluster *bool `json:"partOfCluster,omitempty"`

	// Node Software Version
	NodeSwVersion *string `json:"nodeSwVersion,omitempty"`

	// Contains node services states
	ServicesState []*ServiceState `json:"servicesState"`

	// Specifies an optional message describing details of the cluster services states.
	Message *string `json:"message,omitempty"`
}

// Validate validates this node services states
func (m *NodeServicesStates) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServicesState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeServicesStates) validateServicesState(formats strfmt.Registry) error {
	if swag.IsZero(m.ServicesState) { // not required
		return nil
	}

	for i := 0; i < len(m.ServicesState); i++ {
		if swag.IsZero(m.ServicesState[i]) { // not required
			continue
		}

		if m.ServicesState[i] != nil {
			if err := m.ServicesState[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servicesState" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servicesState" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this node services states based on the context it is used
func (m *NodeServicesStates) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServicesState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeServicesStates) contextValidateServicesState(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServicesState); i++ {

		if m.ServicesState[i] != nil {

			if swag.IsZero(m.ServicesState[i]) { // not required
				return nil
			}

			if err := m.ServicesState[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servicesState" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servicesState" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeServicesStates) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeServicesStates) UnmarshalBinary(b []byte) error {
	var res NodeServicesStates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
