// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrustedCa Specifies the basic info about CA Root Certificate.
//
// swagger:model TrustedCa
type TrustedCa struct {

	// Unique id for the certificate.
	// Read Only: true
	ID *string `json:"id,omitempty"`

	// Unique name for the certificate.
	// Read Only: true
	Name *string `json:"name,omitempty"`

	// Specifies the issuer.
	// Read Only: true
	IssuedBy *string `json:"issuedBy,omitempty"`

	// Specifies whom it was issued to.
	// Read Only: true
	IssuedTo *string `json:"issuedTo,omitempty"`

	// Specifies the timestamp epoch in microseconds when this certificate
	// will start being valid.
	// Read Only: true
	IssuedTimeUsecs *int64 `json:"issuedTimeUsecs,omitempty"`

	// Specifies the timestamp epoch in microseconds when this certificate
	// will no longer be valid.
	// Read Only: true
	ExpirationTimeUsecs *int64 `json:"expirationTimeUsecs,omitempty"`

	// description of the certificate.
	// Read Only: true
	Description *string `json:"description,omitempty"`

	// Specifies the timestamp epoch in microseconds when this certificate
	// was registered on the cluster.
	// Read Only: true
	RegistrationTimeUsecs *int64 `json:"registrationTimeUsecs,omitempty"`

	// Specifies the timestamp epoch in microseconds when this certificate
	// was last validated.
	// Read Only: true
	LastValidatedTimeUsecs *int64 `json:"lastValidatedTimeUsecs,omitempty"`

	// Validation Status of the certificate.
	// Read Only: true
	// Enum: ["Valid","Expired","Revoked","Unknown"]
	Status *string `json:"status,omitempty"`
}

// Validate validates this trusted ca
func (m *TrustedCa) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var trustedCaTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Valid","Expired","Revoked","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		trustedCaTypeStatusPropEnum = append(trustedCaTypeStatusPropEnum, v)
	}
}

const (

	// TrustedCaStatusValid captures enum value "Valid"
	TrustedCaStatusValid string = "Valid"

	// TrustedCaStatusExpired captures enum value "Expired"
	TrustedCaStatusExpired string = "Expired"

	// TrustedCaStatusRevoked captures enum value "Revoked"
	TrustedCaStatusRevoked string = "Revoked"

	// TrustedCaStatusUnknown captures enum value "Unknown"
	TrustedCaStatusUnknown string = "Unknown"
)

// prop value enum
func (m *TrustedCa) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, trustedCaTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TrustedCa) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this trusted ca based on the context it is used
func (m *TrustedCa) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIssuedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIssuedTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIssuedTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpirationTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrationTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastValidatedTimeUsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustedCa) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TrustedCa) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TrustedCa) contextValidateIssuedBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "issuedBy", "body", m.IssuedBy); err != nil {
		return err
	}

	return nil
}

func (m *TrustedCa) contextValidateIssuedTo(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "issuedTo", "body", m.IssuedTo); err != nil {
		return err
	}

	return nil
}

func (m *TrustedCa) contextValidateIssuedTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "issuedTimeUsecs", "body", m.IssuedTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *TrustedCa) contextValidateExpirationTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "expirationTimeUsecs", "body", m.ExpirationTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *TrustedCa) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *TrustedCa) contextValidateRegistrationTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "registrationTimeUsecs", "body", m.RegistrationTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *TrustedCa) contextValidateLastValidatedTimeUsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastValidatedTimeUsecs", "body", m.LastValidatedTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *TrustedCa) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrustedCa) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrustedCa) UnmarshalBinary(b []byte) error {
	var res TrustedCa
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
