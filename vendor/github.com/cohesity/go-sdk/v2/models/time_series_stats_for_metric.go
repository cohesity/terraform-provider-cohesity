// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeSeriesStatsForMetric Specifies the time series stats for a metric.
//
// swagger:model TimeSeriesStatsForMetric
type TimeSeriesStatsForMetric struct {

	// Specifies the metric name.
	MetricName *string `json:"metricName,omitempty"`

	// Specifies the type of the data points.
	// Enum: ["kInt64","kDouble","kString","kBytes"]
	Type *string `json:"type,omitempty"`

	// Specifies a list of data points.
	DataPoints []*DataPoint `json:"dataPoints"`
}

// Validate validates this time series stats for metric
func (m *TimeSeriesStatsForMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataPoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var timeSeriesStatsForMetricTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kInt64","kDouble","kString","kBytes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeSeriesStatsForMetricTypeTypePropEnum = append(timeSeriesStatsForMetricTypeTypePropEnum, v)
	}
}

const (

	// TimeSeriesStatsForMetricTypeKInt64 captures enum value "kInt64"
	TimeSeriesStatsForMetricTypeKInt64 string = "kInt64"

	// TimeSeriesStatsForMetricTypeKDouble captures enum value "kDouble"
	TimeSeriesStatsForMetricTypeKDouble string = "kDouble"

	// TimeSeriesStatsForMetricTypeKString captures enum value "kString"
	TimeSeriesStatsForMetricTypeKString string = "kString"

	// TimeSeriesStatsForMetricTypeKBytes captures enum value "kBytes"
	TimeSeriesStatsForMetricTypeKBytes string = "kBytes"
)

// prop value enum
func (m *TimeSeriesStatsForMetric) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeSeriesStatsForMetricTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeSeriesStatsForMetric) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TimeSeriesStatsForMetric) validateDataPoints(formats strfmt.Registry) error {
	if swag.IsZero(m.DataPoints) { // not required
		return nil
	}

	for i := 0; i < len(m.DataPoints); i++ {
		if swag.IsZero(m.DataPoints[i]) { // not required
			continue
		}

		if m.DataPoints[i] != nil {
			if err := m.DataPoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataPoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataPoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this time series stats for metric based on the context it is used
func (m *TimeSeriesStatsForMetric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSeriesStatsForMetric) contextValidateDataPoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataPoints); i++ {

		if m.DataPoints[i] != nil {

			if swag.IsZero(m.DataPoints[i]) { // not required
				return nil
			}

			if err := m.DataPoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataPoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataPoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeSeriesStatsForMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeSeriesStatsForMetric) UnmarshalBinary(b []byte) error {
	var res TimeSeriesStatsForMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
