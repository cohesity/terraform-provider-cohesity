// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverCouchbaseParams Recover Couchbase params.
//
// Specifies the parameters to recover Couchbase objects.
//
// swagger:model RecoverCouchbaseParams
type RecoverCouchbaseParams struct {
	CommonNoSQLRecoveryOptions

	// Specifies the local snapshot ids of the Objects to be recovered.
	// Required: true
	Snapshots []*RecoverCouchbaseSnapshotParams `json:"snapshots"`

	// A suffix that is to be applied to all recovered objects.
	Suffix *string `json:"suffix,omitempty"`

	// If set to true, docuements from the bucket being recovered will be appended into the bucket at the destination.
	AppendDocuments *bool `json:"appendDocuments,omitempty"`

	// Set to true to recover only the bucket configurations. No documents will be recovered.
	DdlOnlyRecovery *bool `json:"ddlOnlyRecovery,omitempty"`

	// If set to true existing users will be replaced with users from the bucket being recovered.
	OverwriteUsers *bool `json:"overwriteUsers,omitempty"`

	// Specifies the parameters to filter documents to be restored.
	// Required: true
	FilterDocumentsParams *FilterDocumentsParams `json:"filterDocumentsParams"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RecoverCouchbaseParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonNoSQLRecoveryOptions
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonNoSQLRecoveryOptions = aO0

	// AO1
	var dataAO1 struct {
		Snapshots []*RecoverCouchbaseSnapshotParams `json:"snapshots"`

		Suffix *string `json:"suffix,omitempty"`

		AppendDocuments *bool `json:"appendDocuments,omitempty"`

		DdlOnlyRecovery *bool `json:"ddlOnlyRecovery,omitempty"`

		OverwriteUsers *bool `json:"overwriteUsers,omitempty"`

		FilterDocumentsParams *FilterDocumentsParams `json:"filterDocumentsParams"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Snapshots = dataAO1.Snapshots

	m.Suffix = dataAO1.Suffix

	m.AppendDocuments = dataAO1.AppendDocuments

	m.DdlOnlyRecovery = dataAO1.DdlOnlyRecovery

	m.OverwriteUsers = dataAO1.OverwriteUsers

	m.FilterDocumentsParams = dataAO1.FilterDocumentsParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RecoverCouchbaseParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonNoSQLRecoveryOptions)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Snapshots []*RecoverCouchbaseSnapshotParams `json:"snapshots"`

		Suffix *string `json:"suffix,omitempty"`

		AppendDocuments *bool `json:"appendDocuments,omitempty"`

		DdlOnlyRecovery *bool `json:"ddlOnlyRecovery,omitempty"`

		OverwriteUsers *bool `json:"overwriteUsers,omitempty"`

		FilterDocumentsParams *FilterDocumentsParams `json:"filterDocumentsParams"`
	}

	dataAO1.Snapshots = m.Snapshots

	dataAO1.Suffix = m.Suffix

	dataAO1.AppendDocuments = m.AppendDocuments

	dataAO1.DdlOnlyRecovery = m.DdlOnlyRecovery

	dataAO1.OverwriteUsers = m.OverwriteUsers

	dataAO1.FilterDocumentsParams = m.FilterDocumentsParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recover couchbase params
func (m *RecoverCouchbaseParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonNoSQLRecoveryOptions
	if err := m.CommonNoSQLRecoveryOptions.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterDocumentsParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverCouchbaseParams) validateSnapshots(formats strfmt.Registry) error {

	if err := validate.Required("snapshots", "body", m.Snapshots); err != nil {
		return err
	}

	for i := 0; i < len(m.Snapshots); i++ {
		if swag.IsZero(m.Snapshots[i]) { // not required
			continue
		}

		if m.Snapshots[i] != nil {
			if err := m.Snapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverCouchbaseParams) validateFilterDocumentsParams(formats strfmt.Registry) error {

	if err := validate.Required("filterDocumentsParams", "body", m.FilterDocumentsParams); err != nil {
		return err
	}

	if m.FilterDocumentsParams != nil {
		if err := m.FilterDocumentsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterDocumentsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filterDocumentsParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover couchbase params based on the context it is used
func (m *RecoverCouchbaseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonNoSQLRecoveryOptions
	if err := m.CommonNoSQLRecoveryOptions.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterDocumentsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverCouchbaseParams) contextValidateSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Snapshots); i++ {

		if m.Snapshots[i] != nil {

			if swag.IsZero(m.Snapshots[i]) { // not required
				return nil
			}

			if err := m.Snapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverCouchbaseParams) contextValidateFilterDocumentsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FilterDocumentsParams != nil {

		if err := m.FilterDocumentsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filterDocumentsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filterDocumentsParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverCouchbaseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverCouchbaseParams) UnmarshalBinary(b []byte) error {
	var res RecoverCouchbaseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
