// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonSourceRegistrationReponseParams Specifies the parameters which are common between all Protection Source registrations.
//
// swagger:model CommonSourceRegistrationReponseParams
type CommonSourceRegistrationReponseParams struct {

	// Source Registration ID. This can be used to retrieve, edit or delete the source registration.
	// Read Only: true
	ID *int64 `json:"id,omitempty"`

	// ID of top level source object discovered after the registration.
	// Read Only: true
	SourceID *int64 `json:"sourceId,omitempty"`

	// Specifies detailed info about the source.
	SourceInfo *Object `json:"sourceInfo,omitempty"`

	// Specifies the environment type of the Protection Source.
	// Enum: ["kVMware","kHyperV","kAcropolis","kKVM","kAWS","kGCP","kAzure","kPhysical","kPure","kIbmFlashSystem","kNimble","kNetapp","kGenericNas","kIsilon","kFlashBlade","kGPFS","kElastifile","kO365","kHyperFlex","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSQL","kOracle","kSfdc"]
	Environment *string `json:"environment,omitempty"`

	// The user specified name for this source.
	Name *string `json:"name,omitempty"`

	// Specifies the id of the connection from where this source is reachable. This should only be set for a source being registered by a tenant user. This field will be depricated in future. Use connections field.
	ConnectionID *int64 `json:"connectionId,omitempty"`

	// Specfies the list of connections for the source.
	Connections []*ConnectionConfig `json:"connections"`

	// Specifies the connector group id of connector groups.
	ConnectorGroupID *int64 `json:"connectorGroupId,omitempty"`

	// Specifies the advanced configuration for a protection source.
	AdvancedConfigs []*KeyValuePair `json:"advancedConfigs"`

	RegistrationInfo
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CommonSourceRegistrationReponseParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID *int64 `json:"id,omitempty"`

		SourceID *int64 `json:"sourceId,omitempty"`

		SourceInfo *Object `json:"sourceInfo,omitempty"`

		Environment *string `json:"environment,omitempty"`

		Name *string `json:"name,omitempty"`

		ConnectionID *int64 `json:"connectionId,omitempty"`

		Connections []*ConnectionConfig `json:"connections"`

		ConnectorGroupID *int64 `json:"connectorGroupId,omitempty"`

		AdvancedConfigs []*KeyValuePair `json:"advancedConfigs"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ID = dataAO0.ID

	m.SourceID = dataAO0.SourceID

	m.SourceInfo = dataAO0.SourceInfo

	m.Environment = dataAO0.Environment

	m.Name = dataAO0.Name

	m.ConnectionID = dataAO0.ConnectionID

	m.Connections = dataAO0.Connections

	m.ConnectorGroupID = dataAO0.ConnectorGroupID

	m.AdvancedConfigs = dataAO0.AdvancedConfigs

	// AO1
	var aO1 RegistrationInfo
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.RegistrationInfo = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CommonSourceRegistrationReponseParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID *int64 `json:"id,omitempty"`

		SourceID *int64 `json:"sourceId,omitempty"`

		SourceInfo *Object `json:"sourceInfo,omitempty"`

		Environment *string `json:"environment,omitempty"`

		Name *string `json:"name,omitempty"`

		ConnectionID *int64 `json:"connectionId,omitempty"`

		Connections []*ConnectionConfig `json:"connections"`

		ConnectorGroupID *int64 `json:"connectorGroupId,omitempty"`

		AdvancedConfigs []*KeyValuePair `json:"advancedConfigs"`
	}

	dataAO0.ID = m.ID

	dataAO0.SourceID = m.SourceID

	dataAO0.SourceInfo = m.SourceInfo

	dataAO0.Environment = m.Environment

	dataAO0.Name = m.Name

	dataAO0.ConnectionID = m.ConnectionID

	dataAO0.Connections = m.Connections

	dataAO0.ConnectorGroupID = m.ConnectorGroupID

	dataAO0.AdvancedConfigs = m.AdvancedConfigs

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.RegistrationInfo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this common source registration reponse params
func (m *CommonSourceRegistrationReponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvancedConfigs(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with RegistrationInfo
	if err := m.RegistrationInfo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonSourceRegistrationReponseParams) validateSourceInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceInfo) { // not required
		return nil
	}

	if m.SourceInfo != nil {
		if err := m.SourceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceInfo")
			}
			return err
		}
	}

	return nil
}

var commonSourceRegistrationReponseParamsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kAcropolis","kKVM","kAWS","kGCP","kAzure","kPhysical","kPure","kIbmFlashSystem","kNimble","kNetapp","kGenericNas","kIsilon","kFlashBlade","kGPFS","kElastifile","kO365","kHyperFlex","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kSAPHANA","kUDA","kSQL","kOracle","kSfdc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonSourceRegistrationReponseParamsTypeEnvironmentPropEnum = append(commonSourceRegistrationReponseParamsTypeEnvironmentPropEnum, v)
	}
}

// property enum
func (m *CommonSourceRegistrationReponseParams) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonSourceRegistrationReponseParamsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonSourceRegistrationReponseParams) validateEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *CommonSourceRegistrationReponseParams) validateConnections(formats strfmt.Registry) error {

	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonSourceRegistrationReponseParams) validateAdvancedConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.AdvancedConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.AdvancedConfigs); i++ {
		if swag.IsZero(m.AdvancedConfigs[i]) { // not required
			continue
		}

		if m.AdvancedConfigs[i] != nil {
			if err := m.AdvancedConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this common source registration reponse params based on the context it is used
func (m *CommonSourceRegistrationReponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdvancedConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with RegistrationInfo
	if err := m.RegistrationInfo.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonSourceRegistrationReponseParams) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CommonSourceRegistrationReponseParams) contextValidateSourceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceId", "body", m.SourceID); err != nil {
		return err
	}

	return nil
}

func (m *CommonSourceRegistrationReponseParams) contextValidateSourceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceInfo != nil {

		if swag.IsZero(m.SourceInfo) { // not required
			return nil
		}

		if err := m.SourceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CommonSourceRegistrationReponseParams) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		if m.Connections[i] != nil {

			if swag.IsZero(m.Connections[i]) { // not required
				return nil
			}

			if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonSourceRegistrationReponseParams) contextValidateAdvancedConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdvancedConfigs); i++ {

		if m.AdvancedConfigs[i] != nil {

			if swag.IsZero(m.AdvancedConfigs[i]) { // not required
				return nil
			}

			if err := m.AdvancedConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonSourceRegistrationReponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonSourceRegistrationReponseParams) UnmarshalBinary(b []byte) error {
	var res CommonSourceRegistrationReponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
