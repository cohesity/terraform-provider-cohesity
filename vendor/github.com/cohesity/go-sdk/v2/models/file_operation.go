// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileOperation file operation
//
// swagger:model FileOperation
type FileOperation struct {

	// file path
	// Required: true
	FilePath *string `json:"filePath"`

	// operation
	// Required: true
	// Enum: ["kAdded","kDeleted"]
	Operation *string `json:"operation"`
}

// Validate validates this file operation
func (m *FileOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileOperation) validateFilePath(formats strfmt.Registry) error {

	if err := validate.Required("filePath", "body", m.FilePath); err != nil {
		return err
	}

	return nil
}

var fileOperationTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAdded","kDeleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileOperationTypeOperationPropEnum = append(fileOperationTypeOperationPropEnum, v)
	}
}

const (

	// FileOperationOperationKAdded captures enum value "kAdded"
	FileOperationOperationKAdded string = "kAdded"

	// FileOperationOperationKDeleted captures enum value "kDeleted"
	FileOperationOperationKDeleted string = "kDeleted"
)

// prop value enum
func (m *FileOperation) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fileOperationTypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FileOperation) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", *m.Operation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this file operation based on context it is used
func (m *FileOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FileOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileOperation) UnmarshalBinary(b []byte) error {
	var res FileOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
