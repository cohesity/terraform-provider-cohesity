// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExchangeRecoveryTargetConfig Exchange database Recovery Target Config.
//
// Specifies the target object parameters to recover an Exchange database.
//
// swagger:model ExchangeRecoveryTargetConfig
type ExchangeRecoveryTargetConfig struct {

	// Specifies a new name for the restored database.
	DatabaseName *string `json:"databaseName,omitempty"`

	// Specifies the directory where to put the database data files. Missing directory will be automatically created.
	DatabaseDirectoryLocation *string `json:"databaseDirectoryLocation,omitempty"`

	// Specifies the directory where to put the database log files. Missing directory will be automatically created.
	LogDirectoryLocation *string `json:"logDirectoryLocation,omitempty"`

	// Specifies whether to mount the database after successful recovery.
	MountDatabase *bool `json:"mountDatabase,omitempty"`

	// Specifies whether to restore the Database as Recovery database.
	RestoreAsRecoveryDB *bool `json:"restoreAsRecoveryDB,omitempty"`

	// Specifies whether to use the latest logs on Exchange Server to perform roll-forward recovery.
	RollForwardRecovery *bool `json:"rollForwardRecovery,omitempty"`

	// Specifies the id of the source to which the Exchange database will be recovered.
	Source *RecoveryObjectIdentifier `json:"source,omitempty"`
}

// Validate validates this exchange recovery target config
func (m *ExchangeRecoveryTargetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeRecoveryTargetConfig) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exchange recovery target config based on the context it is used
func (m *ExchangeRecoveryTargetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeRecoveryTargetConfig) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeRecoveryTargetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeRecoveryTargetConfig) UnmarshalBinary(b []byte) error {
	var res ExchangeRecoveryTargetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
