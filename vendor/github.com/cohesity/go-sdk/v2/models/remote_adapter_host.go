// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemoteAdapterHost Specifies params of the remote host.
//
// swagger:model RemoteAdapterHost
type RemoteAdapterHost struct {
	ScriptHost

	// Specifies the params of script that will be executed in a 'kRegular' type run.
	IncrementalBackupScript *CommonPreBackupScriptParams `json:"incrementalBackupScript,omitempty"`

	// Specifies the params of script that will be executed in a 'kFull' type run.
	FullBackupScript *CommonPreBackupScriptParams `json:"fullBackupScript,omitempty"`

	// Specifies the params of script that will be executed in a 'kLog' type run.
	LogBackupScript *CommonPreBackupScriptParams `json:"logBackupScript,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RemoteAdapterHost) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ScriptHost
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ScriptHost = aO0

	// AO1
	var dataAO1 struct {
		IncrementalBackupScript *CommonPreBackupScriptParams `json:"incrementalBackupScript,omitempty"`

		FullBackupScript *CommonPreBackupScriptParams `json:"fullBackupScript,omitempty"`

		LogBackupScript *CommonPreBackupScriptParams `json:"logBackupScript,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.IncrementalBackupScript = dataAO1.IncrementalBackupScript

	m.FullBackupScript = dataAO1.FullBackupScript

	m.LogBackupScript = dataAO1.LogBackupScript

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RemoteAdapterHost) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ScriptHost)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		IncrementalBackupScript *CommonPreBackupScriptParams `json:"incrementalBackupScript,omitempty"`

		FullBackupScript *CommonPreBackupScriptParams `json:"fullBackupScript,omitempty"`

		LogBackupScript *CommonPreBackupScriptParams `json:"logBackupScript,omitempty"`
	}

	dataAO1.IncrementalBackupScript = m.IncrementalBackupScript

	dataAO1.FullBackupScript = m.FullBackupScript

	dataAO1.LogBackupScript = m.LogBackupScript

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this remote adapter host
func (m *RemoteAdapterHost) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ScriptHost
	if err := m.ScriptHost.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteAdapterHost) validateIncrementalBackupScript(formats strfmt.Registry) error {

	if swag.IsZero(m.IncrementalBackupScript) { // not required
		return nil
	}

	if m.IncrementalBackupScript != nil {
		if err := m.IncrementalBackupScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incrementalBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incrementalBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteAdapterHost) validateFullBackupScript(formats strfmt.Registry) error {

	if swag.IsZero(m.FullBackupScript) { // not required
		return nil
	}

	if m.FullBackupScript != nil {
		if err := m.FullBackupScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteAdapterHost) validateLogBackupScript(formats strfmt.Registry) error {

	if swag.IsZero(m.LogBackupScript) { // not required
		return nil
	}

	if m.LogBackupScript != nil {
		if err := m.LogBackupScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logBackupScript")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this remote adapter host based on the context it is used
func (m *RemoteAdapterHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ScriptHost
	if err := m.ScriptHost.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteAdapterHost) contextValidateIncrementalBackupScript(ctx context.Context, formats strfmt.Registry) error {

	if m.IncrementalBackupScript != nil {

		if swag.IsZero(m.IncrementalBackupScript) { // not required
			return nil
		}

		if err := m.IncrementalBackupScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incrementalBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incrementalBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteAdapterHost) contextValidateFullBackupScript(ctx context.Context, formats strfmt.Registry) error {

	if m.FullBackupScript != nil {

		if swag.IsZero(m.FullBackupScript) { // not required
			return nil
		}

		if err := m.FullBackupScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteAdapterHost) contextValidateLogBackupScript(ctx context.Context, formats strfmt.Registry) error {

	if m.LogBackupScript != nil {

		if swag.IsZero(m.LogBackupScript) { // not required
			return nil
		}

		if err := m.LogBackupScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logBackupScript")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteAdapterHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteAdapterHost) UnmarshalBinary(b []byte) error {
	var res RemoteAdapterHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
