// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VmwareObjectProtectionResponse Specifies the input for a protection object in the VMware environment.
//
// swagger:model VmwareObjectProtectionResponse
type VmwareObjectProtectionResponse struct {
	CommonVmwareObjectParams

	// Specifies the list of IDs of the objects to not be protected in this backup. This field only applies if provided object id is non leaf entity such as Tag or a folder. This can be used to ignore specific objects under a parent object which has been included for protection.
	ExcludeObjectIds []*int64 `json:"excludeObjectIds"`

	// Specifies the CDP related information for a given object. This field will only be populated when protection group is configured with policy having CDP retention settings.
	CdpInfo *VmwareCdpObject `json:"cdpInfo,omitempty"`

	// Specifies the hot standby related information for a given object. This field will only be populated when protection group is configured with standby settings.
	StandbyInfo *VmwareStandbyObject `json:"standbyInfo,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VmwareObjectProtectionResponse) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonVmwareObjectParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonVmwareObjectParams = aO0

	// AO1
	var dataAO1 struct {
		ExcludeObjectIds []*int64 `json:"excludeObjectIds"`

		CdpInfo *VmwareCdpObject `json:"cdpInfo,omitempty"`

		StandbyInfo *VmwareStandbyObject `json:"standbyInfo,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ExcludeObjectIds = dataAO1.ExcludeObjectIds

	m.CdpInfo = dataAO1.CdpInfo

	m.StandbyInfo = dataAO1.StandbyInfo

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VmwareObjectProtectionResponse) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonVmwareObjectParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ExcludeObjectIds []*int64 `json:"excludeObjectIds"`

		CdpInfo *VmwareCdpObject `json:"cdpInfo,omitempty"`

		StandbyInfo *VmwareStandbyObject `json:"standbyInfo,omitempty"`
	}

	dataAO1.ExcludeObjectIds = m.ExcludeObjectIds

	dataAO1.CdpInfo = m.CdpInfo

	dataAO1.StandbyInfo = m.StandbyInfo

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vmware object protection response
func (m *VmwareObjectProtectionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonVmwareObjectParams
	if err := m.CommonVmwareObjectParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdpInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandbyInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareObjectProtectionResponse) validateCdpInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CdpInfo) { // not required
		return nil
	}

	if m.CdpInfo != nil {
		if err := m.CdpInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpInfo")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareObjectProtectionResponse) validateStandbyInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.StandbyInfo) { // not required
		return nil
	}

	if m.StandbyInfo != nil {
		if err := m.StandbyInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standbyInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standbyInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware object protection response based on the context it is used
func (m *VmwareObjectProtectionResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonVmwareObjectParams
	if err := m.CommonVmwareObjectParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCdpInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandbyInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareObjectProtectionResponse) contextValidateCdpInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CdpInfo != nil {

		if swag.IsZero(m.CdpInfo) { // not required
			return nil
		}

		if err := m.CdpInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdpInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdpInfo")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareObjectProtectionResponse) contextValidateStandbyInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.StandbyInfo != nil {

		if swag.IsZero(m.StandbyInfo) { // not required
			return nil
		}

		if err := m.StandbyInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standbyInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standbyInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareObjectProtectionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareObjectProtectionResponse) UnmarshalBinary(b []byte) error {
	var res VmwareObjectProtectionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
