// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IbmTenantMetricsConfig IbmTenantMetricsConfig
//
// Specifies the metadata for metrics configuration. The metadata defined here will be used by cluster to send the usgae metrics to IBM cloud metering service for calculating the tenant billing.
//
// swagger:model IbmTenantMetricsConfig
type IbmTenantMetricsConfig struct {

	// Specifies the details of COS resource configuration required for posting metrics and trackinb billing information for IBM tenants.
	CosResourceConfig *IbmTenantCOSResourceConfig `json:"cosResourceConfig,omitempty"`

	// Specifies the IAM configuration that will be used for accessing the billing service in IBM cloud.
	IamMetricsConfig *IbmTenantIAMMetricsConfig `json:"iamMetricsConfig,omitempty"`

	// Specifies the metering configuration that will be used for cohesity cluster to send the billing details to IBM billing service.
	MeteringConfig *IbmTenantMeteringConfig `json:"meteringConfig,omitempty"`
}

// Validate validates this ibm tenant metrics config
func (m *IbmTenantMetricsConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCosResourceConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamMetricsConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeteringConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbmTenantMetricsConfig) validateCosResourceConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.CosResourceConfig) { // not required
		return nil
	}

	if m.CosResourceConfig != nil {
		if err := m.CosResourceConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cosResourceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cosResourceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IbmTenantMetricsConfig) validateIamMetricsConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.IamMetricsConfig) { // not required
		return nil
	}

	if m.IamMetricsConfig != nil {
		if err := m.IamMetricsConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamMetricsConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamMetricsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IbmTenantMetricsConfig) validateMeteringConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MeteringConfig) { // not required
		return nil
	}

	if m.MeteringConfig != nil {
		if err := m.MeteringConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meteringConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meteringConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ibm tenant metrics config based on the context it is used
func (m *IbmTenantMetricsConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCosResourceConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIamMetricsConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeteringConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbmTenantMetricsConfig) contextValidateCosResourceConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.CosResourceConfig != nil {

		if swag.IsZero(m.CosResourceConfig) { // not required
			return nil
		}

		if err := m.CosResourceConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cosResourceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cosResourceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IbmTenantMetricsConfig) contextValidateIamMetricsConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.IamMetricsConfig != nil {

		if swag.IsZero(m.IamMetricsConfig) { // not required
			return nil
		}

		if err := m.IamMetricsConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamMetricsConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamMetricsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IbmTenantMetricsConfig) contextValidateMeteringConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MeteringConfig != nil {

		if swag.IsZero(m.MeteringConfig) { // not required
			return nil
		}

		if err := m.MeteringConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meteringConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meteringConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IbmTenantMetricsConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbmTenantMetricsConfig) UnmarshalBinary(b []byte) error {
	var res IbmTenantMetricsConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
