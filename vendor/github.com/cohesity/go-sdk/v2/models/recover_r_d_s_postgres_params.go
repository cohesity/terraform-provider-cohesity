// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverRDSPostgresParams Recover RDS Postgres params.
//
// Specifies the parameters to recover RDS Postgres.
//
// swagger:model RecoverRDSPostgresParams
type RecoverRDSPostgresParams struct {

	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	// Required: true
	// Enum: ["kAWS"]
	TargetEnvironment *string `json:"targetEnvironment"`

	// Set to true to overwrite an existing object at the destination. If set to false, and the same object exists at the destination, then recovery will fail for that object.
	OverwriteDatabase *bool `json:"overwriteDatabase,omitempty"`

	// Specifies the prefix to be prepended to the object name after the recovery.
	Prefix *string `json:"prefix,omitempty"`

	// Specifies the suffix to be appended to the object name after the recovery.
	Suffix *string `json:"suffix,omitempty"`

	// Specifies the params for recovering to an Aws target.
	AwsTargetParams *AwsTargetParamsForRecoverRDSPostgres `json:"awsTargetParams,omitempty"`
}

// Validate validates this recover r d s postgres params
func (m *RecoverRDSPostgresParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsTargetParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recoverRDSPostgresParamsTypeTargetEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAWS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverRDSPostgresParamsTypeTargetEnvironmentPropEnum = append(recoverRDSPostgresParamsTypeTargetEnvironmentPropEnum, v)
	}
}

const (

	// RecoverRDSPostgresParamsTargetEnvironmentKAWS captures enum value "kAWS"
	RecoverRDSPostgresParamsTargetEnvironmentKAWS string = "kAWS"
)

// prop value enum
func (m *RecoverRDSPostgresParams) validateTargetEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverRDSPostgresParamsTypeTargetEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverRDSPostgresParams) validateTargetEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("targetEnvironment", "body", m.TargetEnvironment); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetEnvironmentEnum("targetEnvironment", "body", *m.TargetEnvironment); err != nil {
		return err
	}

	return nil
}

func (m *RecoverRDSPostgresParams) validateAwsTargetParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsTargetParams) { // not required
		return nil
	}

	if m.AwsTargetParams != nil {
		if err := m.AwsTargetParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsTargetParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover r d s postgres params based on the context it is used
func (m *RecoverRDSPostgresParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsTargetParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverRDSPostgresParams) contextValidateAwsTargetParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsTargetParams != nil {

		if swag.IsZero(m.AwsTargetParams) { // not required
			return nil
		}

		if err := m.AwsTargetParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsTargetParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsTargetParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverRDSPostgresParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverRDSPostgresParams) UnmarshalBinary(b []byte) error {
	var res RecoverRDSPostgresParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
