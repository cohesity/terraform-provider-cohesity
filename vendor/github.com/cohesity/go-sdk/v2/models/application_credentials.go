// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationCredentials Application Credentials
//
// Specifies the application credentials for registration.
//
// swagger:model ApplicationCredentials
type ApplicationCredentials struct {

	// Specifies the application environment type such as kOracle, kSQL, etc. running on the Protection Source.
	// Required: true
	// Enum: ["kSQL","kOracle"]
	ApplicationEnvironment *string `json:"applicationEnvironment"`

	// Specifies the credentials that will be used to log into the application environment.
	Credentials *Credentials `json:"credentials,omitempty"`
}

// Validate validates this application credentials
func (m *ApplicationCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var applicationCredentialsTypeApplicationEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSQL","kOracle"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationCredentialsTypeApplicationEnvironmentPropEnum = append(applicationCredentialsTypeApplicationEnvironmentPropEnum, v)
	}
}

const (

	// ApplicationCredentialsApplicationEnvironmentKSQL captures enum value "kSQL"
	ApplicationCredentialsApplicationEnvironmentKSQL string = "kSQL"

	// ApplicationCredentialsApplicationEnvironmentKOracle captures enum value "kOracle"
	ApplicationCredentialsApplicationEnvironmentKOracle string = "kOracle"
)

// prop value enum
func (m *ApplicationCredentials) validateApplicationEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationCredentialsTypeApplicationEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationCredentials) validateApplicationEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("applicationEnvironment", "body", m.ApplicationEnvironment); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationEnvironmentEnum("applicationEnvironment", "body", *m.ApplicationEnvironment); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationCredentials) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this application credentials based on the context it is used
func (m *ApplicationCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationCredentials) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationCredentials) UnmarshalBinary(b []byte) error {
	var res ApplicationCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
