// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupNasStats Specifies the stats which are specific for NAS adapter.
//
// swagger:model BackupNasStats
type BackupNasStats struct {

	// Specifies the number of files which have already been discovered.
	FilesDiscovered *int64 `json:"filesDiscovered,omitempty"`

	// Specifies the rate at which files are being discovered in files per minute.
	FileDiscoveryRate *int64 `json:"fileDiscoveryRate,omitempty"`

	// Specifies the time taken for file discovery.
	FileDiscoveryTime *int64 `json:"fileDiscoveryTime,omitempty"`

	// Specifies the number of files which have been analyzed.
	FilesAnalyzed *int64 `json:"filesAnalyzed,omitempty"`

	// Specifies the rate at which files are being analyzed in files per minute.
	FileAnalysisRate *int64 `json:"fileAnalysisRate,omitempty"`

	// Specifies the number of files which have been ingested.
	FilesIngested *int64 `json:"filesIngested,omitempty"`

	// Specifies the rate at which files are being ingested in files per minute.
	FileIngestionRate *int64 `json:"fileIngestionRate,omitempty"`

	// Specifies the run time for directory walker in seconds.
	WalkerRunTime *int64 `json:"walkerRunTime,omitempty"`
}

// Validate validates this backup nas stats
func (m *BackupNasStats) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this backup nas stats based on context it is used
func (m *BackupNasStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupNasStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupNasStats) UnmarshalBinary(b []byte) error {
	var res BackupNasStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
