// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HardwareInfo Specifies general information about node hardware.
//
// swagger:model HardwareInfo
type HardwareInfo struct {

	// Chassis serial number programmed by manufacturer.
	ChassisType *string `json:"chassisType,omitempty"`

	// Chassis model.
	ChassisModel *string `json:"chassisModel,omitempty"`

	// Chassis serial number programmed by cohesity software.
	CohesityChassisSerial *string `json:"cohesityChassisSerial,omitempty"`

	// Chassis serial number programmed by manufacturer.
	ChassisSerial *string `json:"chassisSerial,omitempty"`

	// Node serial number programmed by cohesity software.
	CohesityNodeSerial *string `json:"cohesityNodeSerial,omitempty"`

	// Node serial number programmed by manufacturer.
	NodeSerial *string `json:"nodeSerial,omitempty"`

	// Node model.
	NodeModel *string `json:"nodeModel,omitempty"`

	// Maximum number of slots.
	MaxSlots *string `json:"maxSlots,omitempty"`

	// Slot number of the node in the chassis.
	SlotNumber *string `json:"slotNumber,omitempty"`

	// Specifies the channel through which the IPMI interface communicates on the network.
	IpmiLanChannel *string `json:"ipmiLanChannel,omitempty"`

	// Specifies the product model for the given node.
	ProductModel *string `json:"productModel,omitempty"`

	// Specifies the type of the product model for the given node.
	ProductModelType *string `json:"productModelType,omitempty"`

	// Specifies the HBA model type for the given node.
	HbaModel *string `json:"hbaModel,omitempty"`
}

// Validate validates this hardware info
func (m *HardwareInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hardware info based on context it is used
func (m *HardwareInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HardwareInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HardwareInfo) UnmarshalBinary(b []byte) error {
	var res HardwareInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
