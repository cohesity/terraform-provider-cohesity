// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RootPublicFolderParam Specifies parameters to recover a RootPublicFolder.
//
// swagger:model RootPublicFolderParam
type RootPublicFolderParam struct {

	// Specifies whether to recover the whole RootPublicFolder.
	RecoverEntireRootPublicFolder *bool `json:"recoverEntireRootPublicFolder,omitempty"`

	// Specifies a list of Public Folders to recover. This field is applicable only if 'recoverEntireRootPublicFolder' is false.
	RecoverFolders []*PublicFolder `json:"recoverFolders"`

	// Specifies the RootPublicFolder recover Object info.
	// Required: true
	RecoverObject *CommonRecoverObjectSnapshotParams `json:"recoverObject"`
}

// Validate validates this root public folder param
func (m *RootPublicFolderParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoverFolders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RootPublicFolderParam) validateRecoverFolders(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverFolders) { // not required
		return nil
	}

	for i := 0; i < len(m.RecoverFolders); i++ {
		if swag.IsZero(m.RecoverFolders[i]) { // not required
			continue
		}

		if m.RecoverFolders[i] != nil {
			if err := m.RecoverFolders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recoverFolders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recoverFolders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RootPublicFolderParam) validateRecoverObject(formats strfmt.Registry) error {

	if err := validate.Required("recoverObject", "body", m.RecoverObject); err != nil {
		return err
	}

	if m.RecoverObject != nil {
		if err := m.RecoverObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverObject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this root public folder param based on the context it is used
func (m *RootPublicFolderParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecoverFolders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RootPublicFolderParam) contextValidateRecoverFolders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecoverFolders); i++ {

		if m.RecoverFolders[i] != nil {

			if swag.IsZero(m.RecoverFolders[i]) { // not required
				return nil
			}

			if err := m.RecoverFolders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recoverFolders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recoverFolders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RootPublicFolderParam) contextValidateRecoverObject(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverObject != nil {

		if err := m.RecoverObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RootPublicFolderParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RootPublicFolderParam) UnmarshalBinary(b []byte) error {
	var res RootPublicFolderParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
