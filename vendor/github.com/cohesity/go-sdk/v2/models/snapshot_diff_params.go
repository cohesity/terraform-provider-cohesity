// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotDiffParams snapshot diff params
//
// swagger:model SnapshotDiffParams
type SnapshotDiffParams struct {

	// cluster Id
	// Required: true
	ClusterID *int64 `json:"clusterId"`

	// incarnation Id
	IncarnationID int64 `json:"incarnationId,omitempty"`

	// partition Id
	// Required: true
	PartitionID *int64 `json:"partitionId"`

	// job Id
	// Required: true
	JobID *int64 `json:"jobId"`

	// entity type
	// Required: true
	// Enum: ["kVMware","kPhysical","kView","kHyperV","kNetapp","kPure","kIsilon"]
	EntityType *string `json:"entityType"`

	// base snapshot job instance Id
	// Required: true
	BaseSnapshotJobInstanceID *int64 `json:"baseSnapshotJobInstanceId"`

	// base snapshot time usecs
	// Required: true
	BaseSnapshotTimeUsecs *int64 `json:"baseSnapshotTimeUsecs"`

	// snapshot job instance Id
	// Required: true
	SnapshotJobInstanceID *int64 `json:"snapshotJobInstanceId"`

	// snapshot time usecs
	// Required: true
	SnapshotTimeUsecs *int64 `json:"snapshotTimeUsecs"`

	// page number
	// Required: true
	PageNumber *int64 `json:"pageNumber"`

	// page size
	// Required: true
	PageSize *int64 `json:"pageSize"`
}

// Validate validates this snapshot diff params
func (m *SnapshotDiffParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseSnapshotJobInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseSnapshotTimeUsecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotJobInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotTimeUsecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotDiffParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotDiffParams) validatePartitionID(formats strfmt.Registry) error {

	if err := validate.Required("partitionId", "body", m.PartitionID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotDiffParams) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("jobId", "body", m.JobID); err != nil {
		return err
	}

	return nil
}

var snapshotDiffParamsTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kPhysical","kView","kHyperV","kNetapp","kPure","kIsilon"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotDiffParamsTypeEntityTypePropEnum = append(snapshotDiffParamsTypeEntityTypePropEnum, v)
	}
}

const (

	// SnapshotDiffParamsEntityTypeKVMware captures enum value "kVMware"
	SnapshotDiffParamsEntityTypeKVMware string = "kVMware"

	// SnapshotDiffParamsEntityTypeKPhysical captures enum value "kPhysical"
	SnapshotDiffParamsEntityTypeKPhysical string = "kPhysical"

	// SnapshotDiffParamsEntityTypeKView captures enum value "kView"
	SnapshotDiffParamsEntityTypeKView string = "kView"

	// SnapshotDiffParamsEntityTypeKHyperV captures enum value "kHyperV"
	SnapshotDiffParamsEntityTypeKHyperV string = "kHyperV"

	// SnapshotDiffParamsEntityTypeKNetapp captures enum value "kNetapp"
	SnapshotDiffParamsEntityTypeKNetapp string = "kNetapp"

	// SnapshotDiffParamsEntityTypeKPure captures enum value "kPure"
	SnapshotDiffParamsEntityTypeKPure string = "kPure"

	// SnapshotDiffParamsEntityTypeKIsilon captures enum value "kIsilon"
	SnapshotDiffParamsEntityTypeKIsilon string = "kIsilon"
)

// prop value enum
func (m *SnapshotDiffParams) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapshotDiffParamsTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapshotDiffParams) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entityType", "body", m.EntityType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", *m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotDiffParams) validateBaseSnapshotJobInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("baseSnapshotJobInstanceId", "body", m.BaseSnapshotJobInstanceID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotDiffParams) validateBaseSnapshotTimeUsecs(formats strfmt.Registry) error {

	if err := validate.Required("baseSnapshotTimeUsecs", "body", m.BaseSnapshotTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotDiffParams) validateSnapshotJobInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("snapshotJobInstanceId", "body", m.SnapshotJobInstanceID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotDiffParams) validateSnapshotTimeUsecs(formats strfmt.Registry) error {

	if err := validate.Required("snapshotTimeUsecs", "body", m.SnapshotTimeUsecs); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotDiffParams) validatePageNumber(formats strfmt.Registry) error {

	if err := validate.Required("pageNumber", "body", m.PageNumber); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotDiffParams) validatePageSize(formats strfmt.Registry) error {

	if err := validate.Required("pageSize", "body", m.PageSize); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snapshot diff params based on context it is used
func (m *SnapshotDiffParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotDiffParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotDiffParams) UnmarshalBinary(b []byte) error {
	var res SnapshotDiffParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
