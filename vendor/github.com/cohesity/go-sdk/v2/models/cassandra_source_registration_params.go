// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CassandraSourceRegistrationParams Register cassandra source request parameters.
//
// Specifies parameters to register cassandra source.
//
// swagger:model CassandraSourceRegistrationParams
type CassandraSourceRegistrationParams struct {
	CassandraConnectionParams

	// Data centers for this cluster.
	DataCenterNames []string `json:"dataCenterNames"`

	// Commit Logs backup location on cassandra nodes
	CommitLogBackupLocation *string `json:"commitLogBackupLocation,omitempty"`

	// Principal for the kerberos connection. (This is required only if your Cassandra has Kerberos authentication. Please refer to the user guide.)
	KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

	// Contains information about the DSE Solr on this cluster.
	DseSolrInfo *DSESolrInfo `json:"dseSolrInfo,omitempty"`

	// cassandra credentials
	CassandraCredentials *CassandraSourceRegistrationParamsAO1CassandraCredentials `json:"cassandraCredentials,omitempty"`

	// jmx credentials
	JmxCredentials *CassandraSourceRegistrationParamsAO1JmxCredentials `json:"jmxCredentials,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CassandraSourceRegistrationParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CassandraConnectionParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CassandraConnectionParams = aO0

	// AO1
	var dataAO1 struct {
		DataCenterNames []string `json:"dataCenterNames"`

		CommitLogBackupLocation *string `json:"commitLogBackupLocation,omitempty"`

		KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

		DseSolrInfo *DSESolrInfo `json:"dseSolrInfo,omitempty"`

		CassandraCredentials *CassandraSourceRegistrationParamsAO1CassandraCredentials `json:"cassandraCredentials,omitempty"`

		JmxCredentials *CassandraSourceRegistrationParamsAO1JmxCredentials `json:"jmxCredentials,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DataCenterNames = dataAO1.DataCenterNames

	m.CommitLogBackupLocation = dataAO1.CommitLogBackupLocation

	m.KerberosPrincipal = dataAO1.KerberosPrincipal

	m.DseSolrInfo = dataAO1.DseSolrInfo

	m.CassandraCredentials = dataAO1.CassandraCredentials

	m.JmxCredentials = dataAO1.JmxCredentials

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CassandraSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CassandraConnectionParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DataCenterNames []string `json:"dataCenterNames"`

		CommitLogBackupLocation *string `json:"commitLogBackupLocation,omitempty"`

		KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

		DseSolrInfo *DSESolrInfo `json:"dseSolrInfo,omitempty"`

		CassandraCredentials *CassandraSourceRegistrationParamsAO1CassandraCredentials `json:"cassandraCredentials,omitempty"`

		JmxCredentials *CassandraSourceRegistrationParamsAO1JmxCredentials `json:"jmxCredentials,omitempty"`
	}

	dataAO1.DataCenterNames = m.DataCenterNames

	dataAO1.CommitLogBackupLocation = m.CommitLogBackupLocation

	dataAO1.KerberosPrincipal = m.KerberosPrincipal

	dataAO1.DseSolrInfo = m.DseSolrInfo

	dataAO1.CassandraCredentials = m.CassandraCredentials

	dataAO1.JmxCredentials = m.JmxCredentials

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this cassandra source registration params
func (m *CassandraSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CassandraConnectionParams
	if err := m.CassandraConnectionParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDseSolrInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJmxCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraSourceRegistrationParams) validateDseSolrInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.DseSolrInfo) { // not required
		return nil
	}

	if m.DseSolrInfo != nil {
		if err := m.DseSolrInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dseSolrInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dseSolrInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraSourceRegistrationParams) validateCassandraCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.CassandraCredentials) { // not required
		return nil
	}

	if m.CassandraCredentials != nil {
		if err := m.CassandraCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraSourceRegistrationParams) validateJmxCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.JmxCredentials) { // not required
		return nil
	}

	if m.JmxCredentials != nil {
		if err := m.JmxCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jmxCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jmxCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cassandra source registration params based on the context it is used
func (m *CassandraSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CassandraConnectionParams
	if err := m.CassandraConnectionParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDseSolrInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJmxCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraSourceRegistrationParams) contextValidateDseSolrInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DseSolrInfo != nil {

		if swag.IsZero(m.DseSolrInfo) { // not required
			return nil
		}

		if err := m.DseSolrInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dseSolrInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dseSolrInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraSourceRegistrationParams) contextValidateCassandraCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraCredentials != nil {

		if swag.IsZero(m.CassandraCredentials) { // not required
			return nil
		}

		if err := m.CassandraCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *CassandraSourceRegistrationParams) contextValidateJmxCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.JmxCredentials != nil {

		if swag.IsZero(m.JmxCredentials) { // not required
			return nil
		}

		if err := m.JmxCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jmxCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jmxCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CassandraSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res CassandraSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CassandraSourceRegistrationParamsAO1CassandraCredentials Cassandra Credentials for this cluster.
//
// swagger:model CassandraSourceRegistrationParamsAO1CassandraCredentials
type CassandraSourceRegistrationParamsAO1CassandraCredentials struct {

	// Cassandra password.
	// Required: true
	Password *string `json:"password"`

	// Cassandra username.
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this cassandra source registration params a o1 cassandra credentials
func (m *CassandraSourceRegistrationParamsAO1CassandraCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraSourceRegistrationParamsAO1CassandraCredentials) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("cassandraCredentials"+"."+"password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *CassandraSourceRegistrationParamsAO1CassandraCredentials) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("cassandraCredentials"+"."+"username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cassandra source registration params a o1 cassandra credentials based on context it is used
func (m *CassandraSourceRegistrationParamsAO1CassandraCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CassandraSourceRegistrationParamsAO1CassandraCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraSourceRegistrationParamsAO1CassandraCredentials) UnmarshalBinary(b []byte) error {
	var res CassandraSourceRegistrationParamsAO1CassandraCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CassandraSourceRegistrationParamsAO1JmxCredentials JMX Credentials for this cluster. These should be the same for all the nodes
//
// swagger:model CassandraSourceRegistrationParamsAO1JmxCredentials
type CassandraSourceRegistrationParamsAO1JmxCredentials struct {

	// JMX password.
	// Required: true
	Password *string `json:"password"`

	// JMX username.
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this cassandra source registration params a o1 jmx credentials
func (m *CassandraSourceRegistrationParamsAO1JmxCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CassandraSourceRegistrationParamsAO1JmxCredentials) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("jmxCredentials"+"."+"password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *CassandraSourceRegistrationParamsAO1JmxCredentials) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("jmxCredentials"+"."+"username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cassandra source registration params a o1 jmx credentials based on context it is used
func (m *CassandraSourceRegistrationParamsAO1JmxCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CassandraSourceRegistrationParamsAO1JmxCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CassandraSourceRegistrationParamsAO1JmxCredentials) UnmarshalBinary(b []byte) error {
	var res CassandraSourceRegistrationParamsAO1JmxCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
