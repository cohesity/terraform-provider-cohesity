// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LinuxAgentParams Linux agent parameters.
//
// swagger:model LinuxAgentParams
type LinuxAgentParams struct {

	// Specifies the type of installer.
	// Required: true
	// Enum: ["kScript","kRPM","kSuseRPM","kDEB","kPowerPCRPM"]
	PackageType *string `json:"packageType"`
}

// Validate validates this linux agent params
func (m *LinuxAgentParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var linuxAgentParamsTypePackageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kScript","kRPM","kSuseRPM","kDEB","kPowerPCRPM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		linuxAgentParamsTypePackageTypePropEnum = append(linuxAgentParamsTypePackageTypePropEnum, v)
	}
}

const (

	// LinuxAgentParamsPackageTypeKScript captures enum value "kScript"
	LinuxAgentParamsPackageTypeKScript string = "kScript"

	// LinuxAgentParamsPackageTypeKRPM captures enum value "kRPM"
	LinuxAgentParamsPackageTypeKRPM string = "kRPM"

	// LinuxAgentParamsPackageTypeKSuseRPM captures enum value "kSuseRPM"
	LinuxAgentParamsPackageTypeKSuseRPM string = "kSuseRPM"

	// LinuxAgentParamsPackageTypeKDEB captures enum value "kDEB"
	LinuxAgentParamsPackageTypeKDEB string = "kDEB"

	// LinuxAgentParamsPackageTypeKPowerPCRPM captures enum value "kPowerPCRPM"
	LinuxAgentParamsPackageTypeKPowerPCRPM string = "kPowerPCRPM"
)

// prop value enum
func (m *LinuxAgentParams) validatePackageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, linuxAgentParamsTypePackageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LinuxAgentParams) validatePackageType(formats strfmt.Registry) error {

	if err := validate.Required("packageType", "body", m.PackageType); err != nil {
		return err
	}

	// value enum
	if err := m.validatePackageTypeEnum("packageType", "body", *m.PackageType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this linux agent params based on context it is used
func (m *LinuxAgentParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LinuxAgentParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinuxAgentParams) UnmarshalBinary(b []byte) error {
	var res LinuxAgentParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
