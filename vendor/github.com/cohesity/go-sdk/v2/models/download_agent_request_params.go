// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DownloadAgentRequestParams Specifies agent download request parameters.
//
// swagger:model DownloadAgentRequestParams
type DownloadAgentRequestParams struct {

	// Specifies the platform for which agent needs to be downloaded.
	// Required: true
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kHPUX","kVOS","kVMWareCDPFilter"]
	Platform *string `json:"platform"`

	// Specifies agent download parameters for Linux platform.
	LinuxParams *LinuxAgentParams `json:"linuxParams,omitempty"`

	// Specifies agent download parameters for Aix platform.
	AixParams *AixAgentParams `json:"aixParams,omitempty"`

	// Specifies agent download parameters for SapHana platform.
	SapHanaParams *SapHanaAgentParams `json:"sapHanaParams,omitempty"`

	// Specifies agent download parameters for SapOracle platform.
	SapOracleParams *SapOracleAgentParams `json:"sapOracleParams,omitempty"`

	// Specifies agent download parameters for MySQL platform.
	MySQLParams *MySQLAgentParams `json:"mySqlParams,omitempty"`

	// Specifies the download parameters for VMWare CDP IO Filter.
	VmwareCDPFilterParams *VMWareCDPFilterParams `json:"vmwareCDPFilterParams,omitempty"`
}

// Validate validates this download agent request params
func (m *DownloadAgentRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinuxParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAixParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSapHanaParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSapOracleParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMySQLParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmwareCDPFilterParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var downloadAgentRequestParamsTypePlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kSapOracle","kCockroachDB","kMySQL","kHPUX","kVOS","kVMWareCDPFilter"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		downloadAgentRequestParamsTypePlatformPropEnum = append(downloadAgentRequestParamsTypePlatformPropEnum, v)
	}
}

const (

	// DownloadAgentRequestParamsPlatformKLinux captures enum value "kLinux"
	DownloadAgentRequestParamsPlatformKLinux string = "kLinux"

	// DownloadAgentRequestParamsPlatformKWindows captures enum value "kWindows"
	DownloadAgentRequestParamsPlatformKWindows string = "kWindows"

	// DownloadAgentRequestParamsPlatformKAix captures enum value "kAix"
	DownloadAgentRequestParamsPlatformKAix string = "kAix"

	// DownloadAgentRequestParamsPlatformKSolaris captures enum value "kSolaris"
	DownloadAgentRequestParamsPlatformKSolaris string = "kSolaris"

	// DownloadAgentRequestParamsPlatformKSapHana captures enum value "kSapHana"
	DownloadAgentRequestParamsPlatformKSapHana string = "kSapHana"

	// DownloadAgentRequestParamsPlatformKSapOracle captures enum value "kSapOracle"
	DownloadAgentRequestParamsPlatformKSapOracle string = "kSapOracle"

	// DownloadAgentRequestParamsPlatformKCockroachDB captures enum value "kCockroachDB"
	DownloadAgentRequestParamsPlatformKCockroachDB string = "kCockroachDB"

	// DownloadAgentRequestParamsPlatformKMySQL captures enum value "kMySQL"
	DownloadAgentRequestParamsPlatformKMySQL string = "kMySQL"

	// DownloadAgentRequestParamsPlatformKHPUX captures enum value "kHPUX"
	DownloadAgentRequestParamsPlatformKHPUX string = "kHPUX"

	// DownloadAgentRequestParamsPlatformKVOS captures enum value "kVOS"
	DownloadAgentRequestParamsPlatformKVOS string = "kVOS"

	// DownloadAgentRequestParamsPlatformKVMWareCDPFilter captures enum value "kVMWareCDPFilter"
	DownloadAgentRequestParamsPlatformKVMWareCDPFilter string = "kVMWareCDPFilter"
)

// prop value enum
func (m *DownloadAgentRequestParams) validatePlatformEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, downloadAgentRequestParamsTypePlatformPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DownloadAgentRequestParams) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	// value enum
	if err := m.validatePlatformEnum("platform", "body", *m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *DownloadAgentRequestParams) validateLinuxParams(formats strfmt.Registry) error {
	if swag.IsZero(m.LinuxParams) { // not required
		return nil
	}

	if m.LinuxParams != nil {
		if err := m.LinuxParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linuxParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linuxParams")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadAgentRequestParams) validateAixParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AixParams) { // not required
		return nil
	}

	if m.AixParams != nil {
		if err := m.AixParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aixParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aixParams")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadAgentRequestParams) validateSapHanaParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SapHanaParams) { // not required
		return nil
	}

	if m.SapHanaParams != nil {
		if err := m.SapHanaParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapHanaParams")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadAgentRequestParams) validateSapOracleParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SapOracleParams) { // not required
		return nil
	}

	if m.SapOracleParams != nil {
		if err := m.SapOracleParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapOracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapOracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadAgentRequestParams) validateMySQLParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MySQLParams) { // not required
		return nil
	}

	if m.MySQLParams != nil {
		if err := m.MySQLParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mySqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mySqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadAgentRequestParams) validateVmwareCDPFilterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareCDPFilterParams) { // not required
		return nil
	}

	if m.VmwareCDPFilterParams != nil {
		if err := m.VmwareCDPFilterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareCDPFilterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareCDPFilterParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this download agent request params based on the context it is used
func (m *DownloadAgentRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinuxParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAixParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSapHanaParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSapOracleParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMySQLParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmwareCDPFilterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DownloadAgentRequestParams) contextValidateLinuxParams(ctx context.Context, formats strfmt.Registry) error {

	if m.LinuxParams != nil {

		if swag.IsZero(m.LinuxParams) { // not required
			return nil
		}

		if err := m.LinuxParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linuxParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linuxParams")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadAgentRequestParams) contextValidateAixParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AixParams != nil {

		if swag.IsZero(m.AixParams) { // not required
			return nil
		}

		if err := m.AixParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aixParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aixParams")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadAgentRequestParams) contextValidateSapHanaParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SapHanaParams != nil {

		if swag.IsZero(m.SapHanaParams) { // not required
			return nil
		}

		if err := m.SapHanaParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapHanaParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapHanaParams")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadAgentRequestParams) contextValidateSapOracleParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SapOracleParams != nil {

		if swag.IsZero(m.SapOracleParams) { // not required
			return nil
		}

		if err := m.SapOracleParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sapOracleParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sapOracleParams")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadAgentRequestParams) contextValidateMySQLParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MySQLParams != nil {

		if swag.IsZero(m.MySQLParams) { // not required
			return nil
		}

		if err := m.MySQLParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mySqlParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mySqlParams")
			}
			return err
		}
	}

	return nil
}

func (m *DownloadAgentRequestParams) contextValidateVmwareCDPFilterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VmwareCDPFilterParams != nil {

		if swag.IsZero(m.VmwareCDPFilterParams) { // not required
			return nil
		}

		if err := m.VmwareCDPFilterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmwareCDPFilterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmwareCDPFilterParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DownloadAgentRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DownloadAgentRequestParams) UnmarshalBinary(b []byte) error {
	var res DownloadAgentRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
