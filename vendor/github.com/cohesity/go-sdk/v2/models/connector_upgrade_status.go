// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectorUpgradeStatus Data-Source upgrade status
//
// Specifies upgrade status for the data-source connector. For example when the upgrade started, current status of the upgrade, errors for upgrade failure etc.
//
// swagger:model ConnectorUpgradeStatus
type ConnectorUpgradeStatus struct {

	// Specifies the last timestamp in UNIX time (milliseconds) when the connector upgrade was triggered.
	StartTimestampMSecs *int64 `json:"startTimestampMSecs,omitempty"`

	// Specifies the last timestamp in UNIX time (milliseconds) when the connector upgrade status was fetched.
	LastStatusFetchedTimestampMsecs *int64 `json:"lastStatusFetchedTimestampMsecs,omitempty"`

	// Specifies error message for upgrade failure.
	Message *string `json:"message,omitempty"`

	// Specifies the last fetched upgrade status of the connector.
	// Required: true
	// Enum: ["NotStarted","InProgress","Succeeded","Failed"]
	Status *string `json:"status"`
}

// Validate validates this connector upgrade status
func (m *ConnectorUpgradeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var connectorUpgradeStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotStarted","InProgress","Succeeded","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		connectorUpgradeStatusTypeStatusPropEnum = append(connectorUpgradeStatusTypeStatusPropEnum, v)
	}
}

const (

	// ConnectorUpgradeStatusStatusNotStarted captures enum value "NotStarted"
	ConnectorUpgradeStatusStatusNotStarted string = "NotStarted"

	// ConnectorUpgradeStatusStatusInProgress captures enum value "InProgress"
	ConnectorUpgradeStatusStatusInProgress string = "InProgress"

	// ConnectorUpgradeStatusStatusSucceeded captures enum value "Succeeded"
	ConnectorUpgradeStatusStatusSucceeded string = "Succeeded"

	// ConnectorUpgradeStatusStatusFailed captures enum value "Failed"
	ConnectorUpgradeStatusStatusFailed string = "Failed"
)

// prop value enum
func (m *ConnectorUpgradeStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, connectorUpgradeStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConnectorUpgradeStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this connector upgrade status based on context it is used
func (m *ConnectorUpgradeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorUpgradeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorUpgradeStatus) UnmarshalBinary(b []byte) error {
	var res ConnectorUpgradeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
