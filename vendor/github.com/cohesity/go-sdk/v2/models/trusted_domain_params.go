// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrustedDomainParams Specifies the params related to trusted domains.
//
// swagger:model TrustedDomainParams
type TrustedDomainParams struct {

	// Specifies if trusted domain discovery is enabled.
	// Required: true
	Enabled *bool `json:"enabled"`

	// Specifies a list of trusted domains.
	TrustedDomains []*TrustedDomain `json:"trustedDomains"`

	// Specifies a list of domains to add to blacklist. These domains will be blacklisted in trusted domain discovery.
	BlacklistedDomains []string `json:"blacklistedDomains"`

	// Specifies a list of domains to add to whitelist. Only these domains will be used for authentication if 'onlyUseWhitelistedDomains' is set.
	WhitelistedDomains []string `json:"whitelistedDomains"`

	// Specifies whether to use 'whitelistedDomains' only for authentication.
	OnlyUseWhitelistedDomains *bool `json:"onlyUseWhitelistedDomains,omitempty"`

	// Specifies the discovery status of trusted domains.
	// Read Only: true
	// Enum: ["Completed","Running","Error"]
	DiscoveryStatus *string `json:"discoveryStatus,omitempty"`

	// Specifies the identifier for the task running discovery.
	// Read Only: true
	TaskIdentifier *string `json:"taskIdentifier,omitempty"`
}

// Validate validates this trusted domain params
func (m *TrustedDomainParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustedDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhitelistedDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscoveryStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustedDomainParams) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *TrustedDomainParams) validateTrustedDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.TrustedDomains) { // not required
		return nil
	}

	for i := 0; i < len(m.TrustedDomains); i++ {
		if swag.IsZero(m.TrustedDomains[i]) { // not required
			continue
		}

		if m.TrustedDomains[i] != nil {
			if err := m.TrustedDomains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trustedDomains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trustedDomains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrustedDomainParams) validateWhitelistedDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.WhitelistedDomains) { // not required
		return nil
	}

	for i := 0; i < len(m.WhitelistedDomains); i++ {

		if err := validate.Pattern("whitelistedDomains"+"."+strconv.Itoa(i), "body", m.WhitelistedDomains[i], `^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9]))*$`); err != nil {
			return err
		}

	}

	return nil
}

var trustedDomainParamsTypeDiscoveryStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Completed","Running","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		trustedDomainParamsTypeDiscoveryStatusPropEnum = append(trustedDomainParamsTypeDiscoveryStatusPropEnum, v)
	}
}

const (

	// TrustedDomainParamsDiscoveryStatusCompleted captures enum value "Completed"
	TrustedDomainParamsDiscoveryStatusCompleted string = "Completed"

	// TrustedDomainParamsDiscoveryStatusRunning captures enum value "Running"
	TrustedDomainParamsDiscoveryStatusRunning string = "Running"

	// TrustedDomainParamsDiscoveryStatusError captures enum value "Error"
	TrustedDomainParamsDiscoveryStatusError string = "Error"
)

// prop value enum
func (m *TrustedDomainParams) validateDiscoveryStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, trustedDomainParamsTypeDiscoveryStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TrustedDomainParams) validateDiscoveryStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscoveryStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDiscoveryStatusEnum("discoveryStatus", "body", *m.DiscoveryStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this trusted domain params based on the context it is used
func (m *TrustedDomainParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTrustedDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscoveryStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustedDomainParams) contextValidateTrustedDomains(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TrustedDomains); i++ {

		if m.TrustedDomains[i] != nil {

			if swag.IsZero(m.TrustedDomains[i]) { // not required
				return nil
			}

			if err := m.TrustedDomains[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trustedDomains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trustedDomains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrustedDomainParams) contextValidateDiscoveryStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "discoveryStatus", "body", m.DiscoveryStatus); err != nil {
		return err
	}

	return nil
}

func (m *TrustedDomainParams) contextValidateTaskIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "taskIdentifier", "body", m.TaskIdentifier); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrustedDomainParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrustedDomainParams) UnmarshalBinary(b []byte) error {
	var res TrustedDomainParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
