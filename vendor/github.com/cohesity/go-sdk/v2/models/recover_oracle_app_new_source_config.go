// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverOracleAppNewSourceConfig Recover Oracle App New Source Config.
//
// Specifies the new destination Source configuration where the databases will be recovered.
//
// swagger:model RecoverOracleAppNewSourceConfig
type RecoverOracleAppNewSourceConfig struct {

	// Specifies if recovery target is a database or a view.
	// Enum: ["RecoverDatabase","RecoverView"]
	RecoveryTarget *string `json:"recoveryTarget,omitempty"`

	// Specifies the source id of target host where databases will be recovered. This source id can be a physical host or virtual machine.
	// Required: true
	Host *RecoveryObjectIdentifier `json:"host"`

	// Specifies recovery parameters when recovering to a database
	RecoverDatabaseParams *RecoverOracleNewTargetDatabaseConfig `json:"recoverDatabaseParams,omitempty"`

	// Specifies recovery parameters when recovering to a view.
	RecoverViewParams *RecoverOracleNewTargetViewConfig `json:"recoverViewParams,omitempty"`
}

// Validate validates this recover oracle app new source config
func (m *RecoverOracleAppNewSourceConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoveryTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverDatabaseParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverViewParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recoverOracleAppNewSourceConfigTypeRecoveryTargetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RecoverDatabase","RecoverView"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverOracleAppNewSourceConfigTypeRecoveryTargetPropEnum = append(recoverOracleAppNewSourceConfigTypeRecoveryTargetPropEnum, v)
	}
}

const (

	// RecoverOracleAppNewSourceConfigRecoveryTargetRecoverDatabase captures enum value "RecoverDatabase"
	RecoverOracleAppNewSourceConfigRecoveryTargetRecoverDatabase string = "RecoverDatabase"

	// RecoverOracleAppNewSourceConfigRecoveryTargetRecoverView captures enum value "RecoverView"
	RecoverOracleAppNewSourceConfigRecoveryTargetRecoverView string = "RecoverView"
)

// prop value enum
func (m *RecoverOracleAppNewSourceConfig) validateRecoveryTargetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverOracleAppNewSourceConfigTypeRecoveryTargetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverOracleAppNewSourceConfig) validateRecoveryTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryTarget) { // not required
		return nil
	}

	// value enum
	if err := m.validateRecoveryTargetEnum("recoveryTarget", "body", *m.RecoveryTarget); err != nil {
		return err
	}

	return nil
}

func (m *RecoverOracleAppNewSourceConfig) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverOracleAppNewSourceConfig) validateRecoverDatabaseParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverDatabaseParams) { // not required
		return nil
	}

	if m.RecoverDatabaseParams != nil {
		if err := m.RecoverDatabaseParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverDatabaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverDatabaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverOracleAppNewSourceConfig) validateRecoverViewParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverViewParams) { // not required
		return nil
	}

	if m.RecoverViewParams != nil {
		if err := m.RecoverViewParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverViewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverViewParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover oracle app new source config based on the context it is used
func (m *RecoverOracleAppNewSourceConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverDatabaseParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverViewParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverOracleAppNewSourceConfig) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {

		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverOracleAppNewSourceConfig) contextValidateRecoverDatabaseParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverDatabaseParams != nil {

		if swag.IsZero(m.RecoverDatabaseParams) { // not required
			return nil
		}

		if err := m.RecoverDatabaseParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverDatabaseParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverDatabaseParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverOracleAppNewSourceConfig) contextValidateRecoverViewParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverViewParams != nil {

		if swag.IsZero(m.RecoverViewParams) { // not required
			return nil
		}

		if err := m.RecoverViewParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverViewParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverViewParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverOracleAppNewSourceConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverOracleAppNewSourceConfig) UnmarshalBinary(b []byte) error {
	var res RecoverOracleAppNewSourceConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
