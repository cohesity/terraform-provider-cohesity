// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateRemoteClusterParams Specifies the parameters to update a Remote Cluster config.
//
// swagger:model UpdateRemoteClusterParams
type UpdateRemoteClusterParams struct {
	RemoteClusterParams

	// Specifies the Cohesity user name used to connect to the Remote Cluster.
	Username string `json:"username,omitempty"`

	// Specifies the password for Cohesity user to use when connecting to the Remote Cluster.
	Password *string `json:"password,omitempty"`

	// Specifies the VIP or IP addresses of the Nodes on the Remote Cluster to connect with. Hostnames are not supported.
	// Min Items: 1
	NodeAddresses []string `json:"nodeAddresses,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *UpdateRemoteClusterParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RemoteClusterParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RemoteClusterParams = aO0

	// AO1
	var dataAO1 struct {
		Username string `json:"username,omitempty"`

		Password *string `json:"password,omitempty"`

		NodeAddresses []string `json:"nodeAddresses,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Username = dataAO1.Username

	m.Password = dataAO1.Password

	m.NodeAddresses = dataAO1.NodeAddresses

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m UpdateRemoteClusterParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.RemoteClusterParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Username string `json:"username,omitempty"`

		Password *string `json:"password,omitempty"`

		NodeAddresses []string `json:"nodeAddresses,omitempty"`
	}

	dataAO1.Username = m.Username

	dataAO1.Password = m.Password

	dataAO1.NodeAddresses = m.NodeAddresses

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update remote cluster params
func (m *UpdateRemoteClusterParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RemoteClusterParams
	if err := m.RemoteClusterParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeAddresses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRemoteClusterParams) validateNodeAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeAddresses) { // not required
		return nil
	}

	iNodeAddressesSize := int64(len(m.NodeAddresses))

	if err := validate.MinItems("nodeAddresses", "body", iNodeAddressesSize, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update remote cluster params based on the context it is used
func (m *UpdateRemoteClusterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RemoteClusterParams
	if err := m.RemoteClusterParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRemoteClusterParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRemoteClusterParams) UnmarshalBinary(b []byte) error {
	var res UpdateRemoteClusterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
