// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KubernetesTargetParamsForRecoverKubernetesNamespace Kubernetes Target Params For Recover Namespace
//
// Specifies the parameters for recovering a Kubernetes namespace to a Kubernetes source.
//
// swagger:model KubernetesTargetParamsForRecoverKubernetesNamespace
type KubernetesTargetParamsForRecoverKubernetesNamespace struct {

	// Specifies the objects to be recovered.
	Objects []*CommonRecoverObjectSnapshotParams `json:"objects"`

	// Specifies the Protection Group Runs params to recover. All the VM's that are successfully backed up by specified Runs will be recovered. This can be specified along with individual snapshots of VMs. User has to make sure that specified Object snapshots and Protection Group Runs should not have any intersection. For example, user cannot specify multiple Runs which has same Object or an Object snapshot and a Run which has same Object's snapshot.
	RecoverProtectionGroupRunsParams []*RecoverProtectionGroupRunParams `json:"recoverProtectionGroupRunsParams"`

	// Specifies the list of pvc to be excluded from recovery.
	ExcludedPvcs []*KubernetesPvcInfo `json:"excludedPvcs"`

	// Specifies whether to recover PVCs only during recovery.
	RecoverPvcsOnly *bool `json:"recoverPvcsOnly,omitempty"`

	// Specifies the parameters to include objects (e.g.: volumes) attached to Kubernetes pods. If not populated, all objects are included unless specifically excluded otherwise.
	IncludeParams *KubernetesFilterParams `json:"includeParams,omitempty"`

	// Specifies the parameters to exclude objects attached to Kubernetes pods. Exclusion takes precedence over inclusion.
	ExcludeParams *KubernetesFilterParams `json:"excludeParams,omitempty"`

	// Specifies the storage class parameters for recovery of namespace.
	StorageClass *KubernetesStorageClassParams `json:"storageClass,omitempty"`

	// Specifies the recovery target configuration of the Namespace recovery.
	// Required: true
	RecoveryTargetConfig *KubernetesNamespaceRecoveryTargetConfig `json:"recoveryTargetConfig"`

	// Specifies params to rename the Namespaces that are recovered. If not specified, the original names of the Namespaces are preserved. If a name collision occurs then the Namespace being recovered will overwrite the Namespace already present on the source.
	RenameRecoveredNamespacesParams *RecoveredOrClonedVmsRenameConfig `json:"renameRecoveredNamespacesParams,omitempty"`
}

// Validate validates this kubernetes target params for recover kubernetes namespace
func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverProtectionGroupRunsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludedPvcs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryTargetConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenameRecoveredNamespacesParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) validateRecoverProtectionGroupRunsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverProtectionGroupRunsParams) { // not required
		return nil
	}

	for i := 0; i < len(m.RecoverProtectionGroupRunsParams); i++ {
		if swag.IsZero(m.RecoverProtectionGroupRunsParams[i]) { // not required
			continue
		}

		if m.RecoverProtectionGroupRunsParams[i] != nil {
			if err := m.RecoverProtectionGroupRunsParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recoverProtectionGroupRunsParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recoverProtectionGroupRunsParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) validateExcludedPvcs(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludedPvcs) { // not required
		return nil
	}

	for i := 0; i < len(m.ExcludedPvcs); i++ {
		if swag.IsZero(m.ExcludedPvcs[i]) { // not required
			continue
		}

		if m.ExcludedPvcs[i] != nil {
			if err := m.ExcludedPvcs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excludedPvcs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("excludedPvcs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) validateIncludeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IncludeParams) { // not required
		return nil
	}

	if m.IncludeParams != nil {
		if err := m.IncludeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("includeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("includeParams")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) validateExcludeParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeParams) { // not required
		return nil
	}

	if m.ExcludeParams != nil {
		if err := m.ExcludeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("excludeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("excludeParams")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) validateStorageClass(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageClass) { // not required
		return nil
	}

	if m.StorageClass != nil {
		if err := m.StorageClass.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageClass")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageClass")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) validateRecoveryTargetConfig(formats strfmt.Registry) error {

	if err := validate.Required("recoveryTargetConfig", "body", m.RecoveryTargetConfig); err != nil {
		return err
	}

	if m.RecoveryTargetConfig != nil {
		if err := m.RecoveryTargetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveryTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveryTargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) validateRenameRecoveredNamespacesParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRecoveredNamespacesParams) { // not required
		return nil
	}

	if m.RenameRecoveredNamespacesParams != nil {
		if err := m.RenameRecoveredNamespacesParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRecoveredNamespacesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRecoveredNamespacesParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kubernetes target params for recover kubernetes namespace based on the context it is used
func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverProtectionGroupRunsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExcludedPvcs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncludeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExcludeParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageClass(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveryTargetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenameRecoveredNamespacesParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) contextValidateRecoverProtectionGroupRunsParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecoverProtectionGroupRunsParams); i++ {

		if m.RecoverProtectionGroupRunsParams[i] != nil {

			if swag.IsZero(m.RecoverProtectionGroupRunsParams[i]) { // not required
				return nil
			}

			if err := m.RecoverProtectionGroupRunsParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recoverProtectionGroupRunsParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recoverProtectionGroupRunsParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) contextValidateExcludedPvcs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExcludedPvcs); i++ {

		if m.ExcludedPvcs[i] != nil {

			if swag.IsZero(m.ExcludedPvcs[i]) { // not required
				return nil
			}

			if err := m.ExcludedPvcs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excludedPvcs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("excludedPvcs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) contextValidateIncludeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IncludeParams != nil {

		if swag.IsZero(m.IncludeParams) { // not required
			return nil
		}

		if err := m.IncludeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("includeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("includeParams")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) contextValidateExcludeParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ExcludeParams != nil {

		if swag.IsZero(m.ExcludeParams) { // not required
			return nil
		}

		if err := m.ExcludeParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("excludeParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("excludeParams")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) contextValidateStorageClass(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageClass != nil {

		if swag.IsZero(m.StorageClass) { // not required
			return nil
		}

		if err := m.StorageClass.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageClass")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageClass")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) contextValidateRecoveryTargetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoveryTargetConfig != nil {

		if err := m.RecoveryTargetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoveryTargetConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoveryTargetConfig")
			}
			return err
		}
	}

	return nil
}

func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) contextValidateRenameRecoveredNamespacesParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRecoveredNamespacesParams != nil {

		if swag.IsZero(m.RenameRecoveredNamespacesParams) { // not required
			return nil
		}

		if err := m.RenameRecoveredNamespacesParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRecoveredNamespacesParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRecoveredNamespacesParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesTargetParamsForRecoverKubernetesNamespace) UnmarshalBinary(b []byte) error {
	var res KubernetesTargetParamsForRecoverKubernetesNamespace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
