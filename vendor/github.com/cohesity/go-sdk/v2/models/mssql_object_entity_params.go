// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MssqlObjectEntityParams Object details for Mssql.
//
// swagger:model MssqlObjectEntityParams
type MssqlObjectEntityParams struct {

	// Specifies the host information for the SQL object. Includes details of Host object such as VM or Physical server.
	HostInfo *HostInformation `json:"hostInfo,omitempty"`

	// Specifies the Always on Avalibility (AAG) information if associated with the SQL Object.
	AagInfo *AAGInfo `json:"aagInfo,omitempty"`

	// Specifies whether the database is TDE enabled.
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
}

// Validate validates this mssql object entity params
func (m *MssqlObjectEntityParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAagInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MssqlObjectEntityParams) validateHostInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.HostInfo) { // not required
		return nil
	}

	if m.HostInfo != nil {
		if err := m.HostInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MssqlObjectEntityParams) validateAagInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AagInfo) { // not required
		return nil
	}

	if m.AagInfo != nil {
		if err := m.AagInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aagInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aagInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mssql object entity params based on the context it is used
func (m *MssqlObjectEntityParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAagInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MssqlObjectEntityParams) contextValidateHostInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.HostInfo != nil {

		if swag.IsZero(m.HostInfo) { // not required
			return nil
		}

		if err := m.HostInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MssqlObjectEntityParams) contextValidateAagInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AagInfo != nil {

		if swag.IsZero(m.AagInfo) { // not required
			return nil
		}

		if err := m.AagInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aagInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aagInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MssqlObjectEntityParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MssqlObjectEntityParams) UnmarshalBinary(b []byte) error {
	var res MssqlObjectEntityParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
