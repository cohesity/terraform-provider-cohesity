// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OracleProtectionGroupParams Oracle Protection Group Parameters.
//
// Specifies the parameters to create Oracle Protection Group.
//
// swagger:model OracleProtectionGroupParams
type OracleProtectionGroupParams struct {

	// Specifies the list of object ids to be protected.
	// Required: true
	// Min Items: 1
	Objects []*OracleProtectionGroupObjectParams `json:"objects"`

	// Specifies whether the mountpoints created while backing up Oracle DBs should be persisted. Defaults to true if value is null to handle the backward compatibility for the upgrade case.
	PersistMountpoints *bool `json:"persistMountpoints,omitempty"`

	// Specifies the VLAN preference that is selected by the user for doing backup.
	VlanParams *VlanParams `json:"vlanParams,omitempty"`

	// Specifies the pre and post script parameters associated with a protection group.
	PrePostScript *PrePostScriptParams `json:"prePostScript,omitempty"`

	// Time in seconds after which the log backup of the database in given backup job should be auto-killed.
	LogAutoKillTimeoutSecs *int64 `json:"logAutoKillTimeoutSecs,omitempty"`

	// Time in seconds after which the incremental backup of the database in given backup job should be auto-killed.
	IncrAutoKillTimeoutSecs *int64 `json:"incrAutoKillTimeoutSecs,omitempty"`

	// Time in seconds after which the full backup of the database in given backup job should be auto-killed.
	FullAutoKillTimeoutSecs *int64 `json:"fullAutoKillTimeoutSecs,omitempty"`
}

// Validate validates this oracle protection group params
func (m *OracleProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrePostScript(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleProtectionGroupParams) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	iObjectsSize := int64(len(m.Objects))

	if err := validate.MinItems("objects", "body", iObjectsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleProtectionGroupParams) validateVlanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanParams) { // not required
		return nil
	}

	if m.VlanParams != nil {
		if err := m.VlanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *OracleProtectionGroupParams) validatePrePostScript(formats strfmt.Registry) error {
	if swag.IsZero(m.PrePostScript) { // not required
		return nil
	}

	if m.PrePostScript != nil {
		if err := m.PrePostScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prePostScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prePostScript")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle protection group params based on the context it is used
func (m *OracleProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrePostScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleProtectionGroupParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleProtectionGroupParams) contextValidateVlanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanParams != nil {

		if swag.IsZero(m.VlanParams) { // not required
			return nil
		}

		if err := m.VlanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanParams")
			}
			return err
		}
	}

	return nil
}

func (m *OracleProtectionGroupParams) contextValidatePrePostScript(ctx context.Context, formats strfmt.Registry) error {

	if m.PrePostScript != nil {

		if swag.IsZero(m.PrePostScript) { // not required
			return nil
		}

		if err := m.PrePostScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prePostScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prePostScript")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res OracleProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
