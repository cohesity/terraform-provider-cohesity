// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetProtectionRunProgressBody Specifies the progress of a protection run.
//
// swagger:model GetProtectionRunProgressBody
type GetProtectionRunProgressBody struct {

	// Progress for the local backup run.
	LocalRun *BackupRunProgressInfo `json:"localRun,omitempty"`

	// Progress for the archival run.
	ArchivalRun []*ArchivalTargetProgressInfo `json:"archivalRun"`

	// Progress for the replication run.
	ReplicationRun []*ReplicationTargetProgressInfo `json:"replicationRun"`
}

// Validate validates this get protection run progress body
func (m *GetProtectionRunProgressBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivalRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationRun(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetProtectionRunProgressBody) validateLocalRun(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalRun) { // not required
		return nil
	}

	if m.LocalRun != nil {
		if err := m.LocalRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localRun")
			}
			return err
		}
	}

	return nil
}

func (m *GetProtectionRunProgressBody) validateArchivalRun(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalRun) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchivalRun); i++ {
		if swag.IsZero(m.ArchivalRun[i]) { // not required
			continue
		}

		if m.ArchivalRun[i] != nil {
			if err := m.ArchivalRun[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("archivalRun" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("archivalRun" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetProtectionRunProgressBody) validateReplicationRun(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationRun) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationRun); i++ {
		if swag.IsZero(m.ReplicationRun[i]) { // not required
			continue
		}

		if m.ReplicationRun[i] != nil {
			if err := m.ReplicationRun[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicationRun" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicationRun" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get protection run progress body based on the context it is used
func (m *GetProtectionRunProgressBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocalRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchivalRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetProtectionRunProgressBody) contextValidateLocalRun(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalRun != nil {

		if swag.IsZero(m.LocalRun) { // not required
			return nil
		}

		if err := m.LocalRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localRun")
			}
			return err
		}
	}

	return nil
}

func (m *GetProtectionRunProgressBody) contextValidateArchivalRun(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArchivalRun); i++ {

		if m.ArchivalRun[i] != nil {

			if swag.IsZero(m.ArchivalRun[i]) { // not required
				return nil
			}

			if err := m.ArchivalRun[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("archivalRun" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("archivalRun" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetProtectionRunProgressBody) contextValidateReplicationRun(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicationRun); i++ {

		if m.ReplicationRun[i] != nil {

			if swag.IsZero(m.ReplicationRun[i]) { // not required
				return nil
			}

			if err := m.ReplicationRun[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicationRun" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicationRun" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetProtectionRunProgressBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetProtectionRunProgressBody) UnmarshalBinary(b []byte) error {
	var res GetProtectionRunProgressBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
