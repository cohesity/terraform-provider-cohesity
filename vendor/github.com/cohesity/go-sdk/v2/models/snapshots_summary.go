// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotsSummary Specifies a summary of the object snapshots.
//
// swagger:model SnapshotsSummary
type SnapshotsSummary struct {

	// Specifies the cluster id where the snapshots is stored.
	ClusterID *int64 `json:"clusterId,omitempty"`

	// Specifies the cluster incarnation id where the snapshots is stored.
	ClusterIncarnationID *int64 `json:"clusterIncarnationId,omitempty"`

	// Specifies the cluster indentifier where the snapshots is stored.
	RegionID *string `json:"regionId,omitempty"`

	// Specifies the target type where the Object's snapshot resides.
	// Enum: ["Local","Archival","RpaasArchival","StorageArraySnapshot","Remote"]
	SnapshotTargetType *string `json:"snapshotTargetType,omitempty"`

	// Specifies the number of snapshots of this type and target.
	SnapshotCount *int64 `json:"snapshotCount,omitempty"`

	// Specifies the timestamp in Unix time epoch in microseconds when the latest snapshot is taken.
	LatestSnapshotTimestampUsecs *int64 `json:"latestSnapshotTimestampUsecs,omitempty"`

	// Specifies the timestamp in Unix time epoch in microseconds when the latest run started.
	LatestRunStartTimeUsecs *int64 `json:"latestRunStartTimeUsecs,omitempty"`

	// Specifies the timestamp in Unix time epoch in microseconds representing the latest end time.
	LatestEndTimeUsecs *int64 `json:"latestEndTimeUsecs,omitempty"`

	// Specifies the status of latest run.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]
	LatestRunStatus *string `json:"latestRunStatus,omitempty"`

	// Specifies the ownership context of the snapshot target.
	// Enum: ["Local","FortKnox"]
	OwnershipContext *string `json:"ownershipContext,omitempty"`

	// Specifies the external target information if this is an archival snapshot.
	ExternalTargetInfo *ArchivalTargetSummaryInfo `json:"externalTargetInfo,omitempty"`
}

// Validate validates this snapshots summary
func (m *SnapshotsSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnapshotTargetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestRunStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnershipContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalTargetInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snapshotsSummaryTypeSnapshotTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Local","Archival","RpaasArchival","StorageArraySnapshot","Remote"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotsSummaryTypeSnapshotTargetTypePropEnum = append(snapshotsSummaryTypeSnapshotTargetTypePropEnum, v)
	}
}

const (

	// SnapshotsSummarySnapshotTargetTypeLocal captures enum value "Local"
	SnapshotsSummarySnapshotTargetTypeLocal string = "Local"

	// SnapshotsSummarySnapshotTargetTypeArchival captures enum value "Archival"
	SnapshotsSummarySnapshotTargetTypeArchival string = "Archival"

	// SnapshotsSummarySnapshotTargetTypeRpaasArchival captures enum value "RpaasArchival"
	SnapshotsSummarySnapshotTargetTypeRpaasArchival string = "RpaasArchival"

	// SnapshotsSummarySnapshotTargetTypeStorageArraySnapshot captures enum value "StorageArraySnapshot"
	SnapshotsSummarySnapshotTargetTypeStorageArraySnapshot string = "StorageArraySnapshot"

	// SnapshotsSummarySnapshotTargetTypeRemote captures enum value "Remote"
	SnapshotsSummarySnapshotTargetTypeRemote string = "Remote"
)

// prop value enum
func (m *SnapshotsSummary) validateSnapshotTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapshotsSummaryTypeSnapshotTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapshotsSummary) validateSnapshotTargetType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotTargetType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSnapshotTargetTypeEnum("snapshotTargetType", "body", *m.SnapshotTargetType); err != nil {
		return err
	}

	return nil
}

var snapshotsSummaryTypeLatestRunStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped","LegalHold"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotsSummaryTypeLatestRunStatusPropEnum = append(snapshotsSummaryTypeLatestRunStatusPropEnum, v)
	}
}

const (

	// SnapshotsSummaryLatestRunStatusAccepted captures enum value "Accepted"
	SnapshotsSummaryLatestRunStatusAccepted string = "Accepted"

	// SnapshotsSummaryLatestRunStatusRunning captures enum value "Running"
	SnapshotsSummaryLatestRunStatusRunning string = "Running"

	// SnapshotsSummaryLatestRunStatusCanceled captures enum value "Canceled"
	SnapshotsSummaryLatestRunStatusCanceled string = "Canceled"

	// SnapshotsSummaryLatestRunStatusCanceling captures enum value "Canceling"
	SnapshotsSummaryLatestRunStatusCanceling string = "Canceling"

	// SnapshotsSummaryLatestRunStatusFailed captures enum value "Failed"
	SnapshotsSummaryLatestRunStatusFailed string = "Failed"

	// SnapshotsSummaryLatestRunStatusMissed captures enum value "Missed"
	SnapshotsSummaryLatestRunStatusMissed string = "Missed"

	// SnapshotsSummaryLatestRunStatusSucceeded captures enum value "Succeeded"
	SnapshotsSummaryLatestRunStatusSucceeded string = "Succeeded"

	// SnapshotsSummaryLatestRunStatusSucceededWithWarning captures enum value "SucceededWithWarning"
	SnapshotsSummaryLatestRunStatusSucceededWithWarning string = "SucceededWithWarning"

	// SnapshotsSummaryLatestRunStatusOnHold captures enum value "OnHold"
	SnapshotsSummaryLatestRunStatusOnHold string = "OnHold"

	// SnapshotsSummaryLatestRunStatusFinalizing captures enum value "Finalizing"
	SnapshotsSummaryLatestRunStatusFinalizing string = "Finalizing"

	// SnapshotsSummaryLatestRunStatusSkipped captures enum value "Skipped"
	SnapshotsSummaryLatestRunStatusSkipped string = "Skipped"

	// SnapshotsSummaryLatestRunStatusLegalHold captures enum value "LegalHold"
	SnapshotsSummaryLatestRunStatusLegalHold string = "LegalHold"
)

// prop value enum
func (m *SnapshotsSummary) validateLatestRunStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapshotsSummaryTypeLatestRunStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapshotsSummary) validateLatestRunStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestRunStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateLatestRunStatusEnum("latestRunStatus", "body", *m.LatestRunStatus); err != nil {
		return err
	}

	return nil
}

var snapshotsSummaryTypeOwnershipContextPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Local","FortKnox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotsSummaryTypeOwnershipContextPropEnum = append(snapshotsSummaryTypeOwnershipContextPropEnum, v)
	}
}

const (

	// SnapshotsSummaryOwnershipContextLocal captures enum value "Local"
	SnapshotsSummaryOwnershipContextLocal string = "Local"

	// SnapshotsSummaryOwnershipContextFortKnox captures enum value "FortKnox"
	SnapshotsSummaryOwnershipContextFortKnox string = "FortKnox"
)

// prop value enum
func (m *SnapshotsSummary) validateOwnershipContextEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapshotsSummaryTypeOwnershipContextPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapshotsSummary) validateOwnershipContext(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnershipContext) { // not required
		return nil
	}

	// value enum
	if err := m.validateOwnershipContextEnum("ownershipContext", "body", *m.OwnershipContext); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotsSummary) validateExternalTargetInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalTargetInfo) { // not required
		return nil
	}

	if m.ExternalTargetInfo != nil {
		if err := m.ExternalTargetInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalTargetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalTargetInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapshots summary based on the context it is used
func (m *SnapshotsSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternalTargetInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotsSummary) contextValidateExternalTargetInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalTargetInfo != nil {

		if swag.IsZero(m.ExternalTargetInfo) { // not required
			return nil
		}

		if err := m.ExternalTargetInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalTargetInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalTargetInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotsSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotsSummary) UnmarshalBinary(b []byte) error {
	var res SnapshotsSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
