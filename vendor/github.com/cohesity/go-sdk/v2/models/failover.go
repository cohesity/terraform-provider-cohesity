// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Failover Specifies the details of a failover.
//
// swagger:model Failover
type Failover struct {

	// Specifies the failover id.
	ID *string `json:"id,omitempty"`

	// Specifies the failover type.
	// Enum: ["Planned","Unplanned"]
	Type *string `json:"type,omitempty"`

	// Specifies the failover status.
	// Enum: ["Running","Succeeded","Failed"]
	Status *string `json:"status,omitempty"`

	// Specifies the error details if failover status is 'Failed'.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Specifies the failover start time in micro seconds.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the failover complete time in micro seconds.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies a list of replications in this failover.
	Replications []*FailoverReplication `json:"replications"`
}

// Validate validates this failover
func (m *Failover) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var failoverTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Planned","Unplanned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		failoverTypeTypePropEnum = append(failoverTypeTypePropEnum, v)
	}
}

const (

	// FailoverTypePlanned captures enum value "Planned"
	FailoverTypePlanned string = "Planned"

	// FailoverTypeUnplanned captures enum value "Unplanned"
	FailoverTypeUnplanned string = "Unplanned"
)

// prop value enum
func (m *Failover) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, failoverTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Failover) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var failoverTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Succeeded","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		failoverTypeStatusPropEnum = append(failoverTypeStatusPropEnum, v)
	}
}

const (

	// FailoverStatusRunning captures enum value "Running"
	FailoverStatusRunning string = "Running"

	// FailoverStatusSucceeded captures enum value "Succeeded"
	FailoverStatusSucceeded string = "Succeeded"

	// FailoverStatusFailed captures enum value "Failed"
	FailoverStatusFailed string = "Failed"
)

// prop value enum
func (m *Failover) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, failoverTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Failover) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Failover) validateReplications(formats strfmt.Registry) error {
	if swag.IsZero(m.Replications) { // not required
		return nil
	}

	for i := 0; i < len(m.Replications); i++ {
		if swag.IsZero(m.Replications[i]) { // not required
			continue
		}

		if m.Replications[i] != nil {
			if err := m.Replications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this failover based on the context it is used
func (m *Failover) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Failover) contextValidateReplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Replications); i++ {

		if m.Replications[i] != nil {

			if swag.IsZero(m.Replications[i]) { // not required
				return nil
			}

			if err := m.Replications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Failover) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Failover) UnmarshalBinary(b []byte) error {
	var res Failover
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
