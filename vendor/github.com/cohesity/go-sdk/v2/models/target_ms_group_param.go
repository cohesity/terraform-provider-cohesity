// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TargetMsGroupParam Specifies the target MS group to recover to.
//
// swagger:model TargetMsGroupParam
type TargetMsGroupParam struct {

	// Specifies whether to create a new MS group to restore to or not.
	CreateNewGroup *bool `json:"createNewGroup,omitempty"`

	// Specifies the display name of the group to be newly created. This should only be specified when createNewGroup is true.
	GroupDisplayName *string `json:"groupDisplayName,omitempty"`

	// Specifies the mailbox nickname of the group to be newly created. Users must ensure this field is unique in the M365 domain the restore is targeted to. This should only be specified when createNewGroup is true.
	GroupMailNickname *string `json:"groupMailNickname,omitempty"`

	// Specifies the id of the target domain during alternate groups restore. If restore is to be done in the same domain as that of the source group, then this parameter is not required to be set.
	TargetParentSourceID *int64 `json:"targetParentSourceId,omitempty"`

	// Specifies the selected existing target group info. This should only be specified when createNewGroup is false.
	TargetMsGroupObject *TargetMsGroupObject `json:"targetMsGroupObject,omitempty"`
}

// Validate validates this target ms group param
func (m *TargetMsGroupParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetMsGroupObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetMsGroupParam) validateTargetMsGroupObject(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetMsGroupObject) { // not required
		return nil
	}

	if m.TargetMsGroupObject != nil {
		if err := m.TargetMsGroupObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetMsGroupObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetMsGroupObject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this target ms group param based on the context it is used
func (m *TargetMsGroupParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetMsGroupObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetMsGroupParam) contextValidateTargetMsGroupObject(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetMsGroupObject != nil {

		if swag.IsZero(m.TargetMsGroupObject) { // not required
			return nil
		}

		if err := m.TargetMsGroupObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetMsGroupObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetMsGroupObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetMsGroupParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetMsGroupParam) UnmarshalBinary(b []byte) error {
	var res TargetMsGroupParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
