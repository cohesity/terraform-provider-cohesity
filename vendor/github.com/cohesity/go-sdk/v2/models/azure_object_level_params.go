// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureObjectLevelParams Azure Object Level Params
//
// Specifies the Azure object level settings for object protection.
//
// swagger:model AzureObjectLevelParams
type AzureObjectLevelParams struct {

	// Specifies the id of the object being protected. This can be a leaf level or non leaf level object.
	// Required: true
	ID *int64 `json:"id"`

	// Specifies the parameters to exclude disks attached to Azure VM (this object) at object level.
	DiskExclusionParams *AzureDiskExclusionParams `json:"diskExclusionParams,omitempty"`

	// Specifies the list of IDs of the objects not to be protected in this backup. This field only applies if provided object id is non leaf entity such as Tag. This can be used to ignore specific objects (can include tags) under a parent object which has been included for protection.
	ExcludeObjectIds []*int64 `json:"excludeObjectIds"`
}

// Validate validates this azure object level params
func (m *AzureObjectLevelParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskExclusionParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureObjectLevelParams) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AzureObjectLevelParams) validateDiskExclusionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskExclusionParams) { // not required
		return nil
	}

	if m.DiskExclusionParams != nil {
		if err := m.DiskExclusionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskExclusionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskExclusionParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure object level params based on the context it is used
func (m *AzureObjectLevelParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskExclusionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureObjectLevelParams) contextValidateDiskExclusionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskExclusionParams != nil {

		if swag.IsZero(m.DiskExclusionParams) { // not required
			return nil
		}

		if err := m.DiskExclusionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskExclusionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskExclusionParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureObjectLevelParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureObjectLevelParams) UnmarshalBinary(b []byte) error {
	var res AzureObjectLevelParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
