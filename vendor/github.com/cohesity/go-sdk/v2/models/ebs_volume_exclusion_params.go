// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EbsVolumeExclusionParams EBS Volume Exclusion Params.
//
// Specifies the parameters to exclude EBS volumes attached to EC2 instances at global and object level. A volume satisfying any of these criteria will be excluded.
//
// swagger:model EbsVolumeExclusionParams
type EbsVolumeExclusionParams struct {

	// Array of volume IDs that are to be excluded. This is only for object level exclusion.
	VolumeIds []string `json:"volumeIds"`

	// Any volume larger than this size will be excluded.
	MaxVolumeSizeBytes *int64 `json:"maxVolumeSizeBytes,omitempty"`

	// Array of volume types to exclude. Eg - gp2, gp3.
	VolumeTypes []string `json:"volumeTypes"`

	// Array of device names to exclude. Eg - /dev/sda.
	DeviceNames []string `json:"deviceNames"`

	// Array of TagParams objects. Each TagParams object consists of two vectors: for exclusion and inclusion. Each TagPararms object is present as an ORed item. User can only input queries of form: (<> AND <> AND <> ..) OR (<> AND <> AND <> ..) OR (..) OR (..) OR .. There cannot be an OR operator inside the bracket. Example query: (K1 = V1 AND K2 = V2 AND K3 != V3) OR (K4 = V4 AND K6 != V6). This will lead to formation of two items in tagParamsArray. First item: {exclusionTagArray: [(K1, V1),  (K2, V2)], inclusionTagArray: [(K3, V3)]} Second item: {exclusionTagArray: [(K4, V4)], inclusionTagArray: [(K6, V6)]}.
	TagParamsArray []*TagParams `json:"tagParamsArray"`

	// Raw boolean query given as input by the user to exclude volume based on tags. In the current version, the query contains only tags. Eg. query 1 - "K1" = "V1" AND "K2" IN ("V2", "V3") AND "K4" != "V4" Eg. query 2 - "K1" != "V1" OR "K2" NOT IN ("V2", "V3") OR "K4" = "V4" All Keys and Values must be wrapped inside double quotes. Comparision Operators supported - IN, NOT IN, =, !=. Logical Operators supported - AND, OR. We cannot have AND, OR together in the query. Only one of them is allowed. The processed form for this query is stored in the above tagParamsArray.
	RawQuery *string `json:"rawQuery,omitempty"`
}

// Validate validates this ebs volume exclusion params
func (m *EbsVolumeExclusionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTagParamsArray(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EbsVolumeExclusionParams) validateTagParamsArray(formats strfmt.Registry) error {
	if swag.IsZero(m.TagParamsArray) { // not required
		return nil
	}

	for i := 0; i < len(m.TagParamsArray); i++ {
		if swag.IsZero(m.TagParamsArray[i]) { // not required
			continue
		}

		if m.TagParamsArray[i] != nil {
			if err := m.TagParamsArray[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagParamsArray" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagParamsArray" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ebs volume exclusion params based on the context it is used
func (m *EbsVolumeExclusionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTagParamsArray(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EbsVolumeExclusionParams) contextValidateTagParamsArray(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagParamsArray); i++ {

		if m.TagParamsArray[i] != nil {

			if swag.IsZero(m.TagParamsArray[i]) { // not required
				return nil
			}

			if err := m.TagParamsArray[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagParamsArray" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagParamsArray" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EbsVolumeExclusionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EbsVolumeExclusionParams) UnmarshalBinary(b []byte) error {
	var res EbsVolumeExclusionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
