// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsGroupParam Specifies parameters to recover MS group.
//
// swagger:model MsGroupParam
type MsGroupParam struct {

	// Specifies if the entire Group (mailbox + site) is to be restored.
	RecoverEntireGroup *bool `json:"recoverEntireGroup,omitempty"`

	// Specifies whether mailbox restore is full or granular.
	// Enum: ["kFull","kPartial"]
	MailboxRestoreType *string `json:"mailboxRestoreType,omitempty"`

	// Specifies whether site restore is full or granular.
	// Enum: ["kFull","kPartial"]
	SiteRestoreType *string `json:"siteRestoreType,omitempty"`

	// Specifies the parameters to recover a MSGroup site document.
	SiteRestoreParams []*OneDriveParam `json:"siteRestoreParams"`

	// Specifies parameters to recover a MSGroup Mailbox.
	MailboxRestoreParams *MailboxParam `json:"mailboxRestoreParams,omitempty"`

	// Specifies the MS group recover Object info.
	// Required: true
	RecoverObject *CommonRecoverObjectSnapshotParams `json:"recoverObject"`
}

// Validate validates this ms group param
func (m *MsGroupParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMailboxRestoreType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteRestoreType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteRestoreParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailboxRestoreParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msGroupParamTypeMailboxRestoreTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kFull","kPartial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msGroupParamTypeMailboxRestoreTypePropEnum = append(msGroupParamTypeMailboxRestoreTypePropEnum, v)
	}
}

const (

	// MsGroupParamMailboxRestoreTypeKFull captures enum value "kFull"
	MsGroupParamMailboxRestoreTypeKFull string = "kFull"

	// MsGroupParamMailboxRestoreTypeKPartial captures enum value "kPartial"
	MsGroupParamMailboxRestoreTypeKPartial string = "kPartial"
)

// prop value enum
func (m *MsGroupParam) validateMailboxRestoreTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msGroupParamTypeMailboxRestoreTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsGroupParam) validateMailboxRestoreType(formats strfmt.Registry) error {
	if swag.IsZero(m.MailboxRestoreType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMailboxRestoreTypeEnum("mailboxRestoreType", "body", *m.MailboxRestoreType); err != nil {
		return err
	}

	return nil
}

var msGroupParamTypeSiteRestoreTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kFull","kPartial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msGroupParamTypeSiteRestoreTypePropEnum = append(msGroupParamTypeSiteRestoreTypePropEnum, v)
	}
}

const (

	// MsGroupParamSiteRestoreTypeKFull captures enum value "kFull"
	MsGroupParamSiteRestoreTypeKFull string = "kFull"

	// MsGroupParamSiteRestoreTypeKPartial captures enum value "kPartial"
	MsGroupParamSiteRestoreTypeKPartial string = "kPartial"
)

// prop value enum
func (m *MsGroupParam) validateSiteRestoreTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msGroupParamTypeSiteRestoreTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsGroupParam) validateSiteRestoreType(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteRestoreType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSiteRestoreTypeEnum("siteRestoreType", "body", *m.SiteRestoreType); err != nil {
		return err
	}

	return nil
}

func (m *MsGroupParam) validateSiteRestoreParams(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteRestoreParams) { // not required
		return nil
	}

	for i := 0; i < len(m.SiteRestoreParams); i++ {
		if swag.IsZero(m.SiteRestoreParams[i]) { // not required
			continue
		}

		if m.SiteRestoreParams[i] != nil {
			if err := m.SiteRestoreParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("siteRestoreParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("siteRestoreParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MsGroupParam) validateMailboxRestoreParams(formats strfmt.Registry) error {
	if swag.IsZero(m.MailboxRestoreParams) { // not required
		return nil
	}

	if m.MailboxRestoreParams != nil {
		if err := m.MailboxRestoreParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailboxRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailboxRestoreParams")
			}
			return err
		}
	}

	return nil
}

func (m *MsGroupParam) validateRecoverObject(formats strfmt.Registry) error {

	if err := validate.Required("recoverObject", "body", m.RecoverObject); err != nil {
		return err
	}

	if m.RecoverObject != nil {
		if err := m.RecoverObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverObject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ms group param based on the context it is used
func (m *MsGroupParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSiteRestoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMailboxRestoreParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MsGroupParam) contextValidateSiteRestoreParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SiteRestoreParams); i++ {

		if m.SiteRestoreParams[i] != nil {

			if swag.IsZero(m.SiteRestoreParams[i]) { // not required
				return nil
			}

			if err := m.SiteRestoreParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("siteRestoreParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("siteRestoreParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MsGroupParam) contextValidateMailboxRestoreParams(ctx context.Context, formats strfmt.Registry) error {

	if m.MailboxRestoreParams != nil {

		if swag.IsZero(m.MailboxRestoreParams) { // not required
			return nil
		}

		if err := m.MailboxRestoreParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mailboxRestoreParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mailboxRestoreParams")
			}
			return err
		}
	}

	return nil
}

func (m *MsGroupParam) contextValidateRecoverObject(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverObject != nil {

		if err := m.RecoverObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsGroupParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsGroupParam) UnmarshalBinary(b []byte) error {
	var res MsGroupParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
