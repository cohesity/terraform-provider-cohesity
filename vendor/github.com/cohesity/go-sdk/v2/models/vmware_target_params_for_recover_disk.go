// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VmwareTargetParamsForRecoverDisk VMware Target Params.
//
// Specifies the parameters for a VMware recovery target.
//
// swagger:model VmwareTargetParamsForRecoverDisk
type VmwareTargetParamsForRecoverDisk struct {

	// Specifies the configuration for restoring a disk to the original VM from which the snapshot was taken.
	OriginalSourceConfig *VmwareRecoverDisksOriginalSourceConfig `json:"originalSourceConfig,omitempty"`

	// Specifies the configuration for restoring disks to a different VM than the one from which the snapshot was taken.
	TargetSourceConfig *VmwareRecoverDisksTargetSourceConfig `json:"targetSourceConfig,omitempty"`

	// Specifies whether or not to power off VMs before performing the recovery.
	PowerOffVms *bool `json:"powerOffVms,omitempty"`

	// Specifies whether or not to power on VMs after performing the recovery.
	PowerOnVms *bool `json:"powerOnVms,omitempty"`

	// Specifies whether or not to continue performing the recovery in the event that an error is encountered.
	ContinueOnError *bool `json:"continueOnError,omitempty"`

	// Specifies VLAN Params associated with the recovered. If this is not specified, then the VLAN settings will be automatically selected from one of the below options: a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be automatically based on the client's (e.g. ESXI host) IP address. b. If VLANs are not configured on Cohesity, then the partition hostname or VIPs will be used for Recovery.
	VlanConfig *RecoveryVlanConfig `json:"vlanConfig,omitempty"`
}

// Validate validates this vmware target params for recover disk
func (m *VmwareTargetParamsForRecoverDisk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginalSourceConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetSourceConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareTargetParamsForRecoverDisk) validateOriginalSourceConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalSourceConfig) { // not required
		return nil
	}

	if m.OriginalSourceConfig != nil {
		if err := m.OriginalSourceConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalSourceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalSourceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverDisk) validateTargetSourceConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetSourceConfig) { // not required
		return nil
	}

	if m.TargetSourceConfig != nil {
		if err := m.TargetSourceConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetSourceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetSourceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverDisk) validateVlanConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanConfig) { // not required
		return nil
	}

	if m.VlanConfig != nil {
		if err := m.VlanConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware target params for recover disk based on the context it is used
func (m *VmwareTargetParamsForRecoverDisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOriginalSourceConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetSourceConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareTargetParamsForRecoverDisk) contextValidateOriginalSourceConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalSourceConfig != nil {

		if swag.IsZero(m.OriginalSourceConfig) { // not required
			return nil
		}

		if err := m.OriginalSourceConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalSourceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalSourceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverDisk) contextValidateTargetSourceConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetSourceConfig != nil {

		if swag.IsZero(m.TargetSourceConfig) { // not required
			return nil
		}

		if err := m.TargetSourceConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetSourceConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetSourceConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTargetParamsForRecoverDisk) contextValidateVlanConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanConfig != nil {

		if swag.IsZero(m.VlanConfig) { // not required
			return nil
		}

		if err := m.VlanConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareTargetParamsForRecoverDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTargetParamsForRecoverDisk) UnmarshalBinary(b []byte) error {
	var res VmwareTargetParamsForRecoverDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
