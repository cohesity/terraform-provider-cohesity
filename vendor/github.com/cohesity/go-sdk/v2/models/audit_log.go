// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuditLog Specifies an audit log message.
//
// swagger:model AuditLog
type AuditLog struct {

	// Specifies the change details of this audit log.
	Details *string `json:"details,omitempty"`

	// Specifies the username who made this audit log.
	Username *string `json:"username,omitempty"`

	// Specifies the domain of user who made this audit log.
	Domain *string `json:"domain,omitempty"`

	// Specifies the entity name.
	EntityName *string `json:"entityName,omitempty"`

	// Specifies the entity type.
	EntityType *string `json:"entityType,omitempty"`

	// Specifies the action type of this audit log.
	Action *string `json:"action,omitempty"`

	// Specifies a unix timestamp in micro seconds when the audit log was taken.
	TimestampUsecs *int64 `json:"timestampUsecs,omitempty"`

	// Specifies the ip of user who made this audit log.
	IP *string `json:"ip,omitempty"`

	// Specifies if the action is made through impersonation.
	IsImpersonation *bool `json:"isImpersonation,omitempty"`

	// Specifies the tenant id who made this audit log.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies the tenant name who made this audit log.
	TenantName *string `json:"tenantName,omitempty"`

	// Specifies the original tenant id who made this audit log.
	OriginalTenantID *string `json:"originalTenantId,omitempty"`

	// Specifies the original tenant name who made this audit log.
	OriginalTenantName *string `json:"originalTenantName,omitempty"`

	// Specifies the record before the action is invoked. This will be returned only if verbose audit is enabled.
	PreviousRecord *string `json:"previousRecord,omitempty"`

	// Specifies the record after the action is invoked. This will be returned only if verbose audit is enabled.
	NewRecord *string `json:"newRecord,omitempty"`
}

// Validate validates this audit log
func (m *AuditLog) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this audit log based on context it is used
func (m *AuditLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuditLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditLog) UnmarshalBinary(b []byte) error {
	var res AuditLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
