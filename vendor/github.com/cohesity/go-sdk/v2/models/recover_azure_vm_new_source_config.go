// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverAzureVMNewSourceConfig Recover Azure VMs New Source Config.
//
// Specifies the new destination Source configuration where the VMs will be recovered.
//
// swagger:model RecoverAzureVmNewSourceConfig
type RecoverAzureVMNewSourceConfig struct {

	// Specifies the the details of network used in transferring the data from source account to Cohesity cluster.
	DataTransferInfo *DataTransferInfo `json:"dataTransferInfo,omitempty"`

	// Specifies the availability set.
	AvailabilitySet *RecoveryObjectIdentifier `json:"availabilitySet,omitempty"`

	// Specifies the type of VM (e.g. small, medium, large) when cloning/restoring the VM in Azure.
	ComputeOption *RecoveryObjectIdentifier `json:"computeOption,omitempty"`

	// Specifies the networking configuration to be applied to the recovered VMs.
	// Required: true
	NetworkConfig *RecoverAzureVMNewSourceNetworkConfig `json:"networkConfig"`

	// Specifies the region to recover the VMs. Applicable for Tenant based registration on DMaaS.
	Region *RecoveryObjectIdentifier `json:"region,omitempty"`

	// Specifies the Azure resource group.
	// Required: true
	ResourceGroup *RecoveryObjectIdentifier `json:"resourceGroup"`

	// Specifies the id of the parent source to recover the VMs.
	// Required: true
	Source *RecoveryObjectIdentifier `json:"source"`

	// Specifies the storage account that will contain the storage container
	StorageAccount *RecoveryObjectIdentifier `json:"storageAccount,omitempty"`

	// Specifies the storage container within the above storage account.
	StorageContainer *RecoveryObjectIdentifier `json:"storageContainer,omitempty"`

	// Specifies id of the resource group for the selected storage account.
	StorageResourceGroup *RecoveryObjectIdentifier `json:"storageResourceGroup,omitempty"`

	// Specifies the subscription id to recover the VMs. Applicable for Tenant based registration on DMaaS.
	Subscription *RecoveryObjectIdentifier `json:"subscription,omitempty"`
}

// Validate validates this recover azure Vm new source config
func (m *RecoverAzureVMNewSourceConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataTransferInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailabilitySet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputeOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateDataTransferInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DataTransferInfo) { // not required
		return nil
	}

	if m.DataTransferInfo != nil {
		if err := m.DataTransferInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataTransferInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataTransferInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateAvailabilitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailabilitySet) { // not required
		return nil
	}

	if m.AvailabilitySet != nil {
		if err := m.AvailabilitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilitySet")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateComputeOption(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputeOption) { // not required
		return nil
	}

	if m.ComputeOption != nil {
		if err := m.ComputeOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeOption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeOption")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateNetworkConfig(formats strfmt.Registry) error {

	if err := validate.Required("networkConfig", "body", m.NetworkConfig); err != nil {
		return err
	}

	if m.NetworkConfig != nil {
		if err := m.NetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateResourceGroup(formats strfmt.Registry) error {

	if err := validate.Required("resourceGroup", "body", m.ResourceGroup); err != nil {
		return err
	}

	if m.ResourceGroup != nil {
		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateStorageAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageAccount) { // not required
		return nil
	}

	if m.StorageAccount != nil {
		if err := m.StorageAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageAccount")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateStorageContainer(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageContainer) { // not required
		return nil
	}

	if m.StorageContainer != nil {
		if err := m.StorageContainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageContainer")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateStorageResourceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageResourceGroup) { // not required
		return nil
	}

	if m.StorageResourceGroup != nil {
		if err := m.StorageResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageResourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageResourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) validateSubscription(formats strfmt.Registry) error {
	if swag.IsZero(m.Subscription) { // not required
		return nil
	}

	if m.Subscription != nil {
		if err := m.Subscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover azure Vm new source config based on the context it is used
func (m *RecoverAzureVMNewSourceConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataTransferInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailabilitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComputeOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageContainer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageResourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateDataTransferInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DataTransferInfo != nil {

		if swag.IsZero(m.DataTransferInfo) { // not required
			return nil
		}

		if err := m.DataTransferInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataTransferInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataTransferInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateAvailabilitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailabilitySet != nil {

		if swag.IsZero(m.AvailabilitySet) { // not required
			return nil
		}

		if err := m.AvailabilitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilitySet")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateComputeOption(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputeOption != nil {

		if swag.IsZero(m.ComputeOption) { // not required
			return nil
		}

		if err := m.ComputeOption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeOption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeOption")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkConfig != nil {

		if err := m.NetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateResourceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceGroup != nil {

		if err := m.ResourceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateStorageAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageAccount != nil {

		if swag.IsZero(m.StorageAccount) { // not required
			return nil
		}

		if err := m.StorageAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageAccount")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateStorageContainer(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageContainer != nil {

		if swag.IsZero(m.StorageContainer) { // not required
			return nil
		}

		if err := m.StorageContainer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageContainer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageContainer")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateStorageResourceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageResourceGroup != nil {

		if swag.IsZero(m.StorageResourceGroup) { // not required
			return nil
		}

		if err := m.StorageResourceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageResourceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageResourceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAzureVMNewSourceConfig) contextValidateSubscription(ctx context.Context, formats strfmt.Registry) error {

	if m.Subscription != nil {

		if swag.IsZero(m.Subscription) { // not required
			return nil
		}

		if err := m.Subscription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverAzureVMNewSourceConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverAzureVMNewSourceConfig) UnmarshalBinary(b []byte) error {
	var res RecoverAzureVMNewSourceConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
