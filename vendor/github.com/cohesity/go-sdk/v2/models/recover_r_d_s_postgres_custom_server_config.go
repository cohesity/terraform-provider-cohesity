// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverRDSPostgresCustomServerConfig Recover RDS Postgres New Source Config.
//
// Specifies the configuration for recovering RDS Objects to the custom target.
//
// swagger:model RecoverRDSPostgresCustomServerConfig
type RecoverRDSPostgresCustomServerConfig struct {

	// Specifies the Ip in which to deploy the Rds objects.
	// Required: true
	IP *string `json:"ip"`

	// Specifies the port to use to connect to the server.
	// Required: true
	Port *int32 `json:"port"`

	// Specifies the standard username and password type of credentials.
	// Required: true
	StandardCredentials *Credentials `json:"standardCredentials"`

	// Specifies the region in which to deploy the Rds objects.
	// Required: true
	Region *RecoveryObjectIdentifier `json:"region"`

	// Specifies the parent source ID in which to recover RDS Objects.
	Source *RecoveryObjectIdentifier `json:"source,omitempty"`
}

// Validate validates this recover r d s postgres custom server config
func (m *RecoverRDSPostgresCustomServerConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandardCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverRDSPostgresCustomServerConfig) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *RecoverRDSPostgresCustomServerConfig) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *RecoverRDSPostgresCustomServerConfig) validateStandardCredentials(formats strfmt.Registry) error {

	if err := validate.Required("standardCredentials", "body", m.StandardCredentials); err != nil {
		return err
	}

	if m.StandardCredentials != nil {
		if err := m.StandardCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standardCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standardCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverRDSPostgresCustomServerConfig) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverRDSPostgresCustomServerConfig) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover r d s postgres custom server config based on the context it is used
func (m *RecoverRDSPostgresCustomServerConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStandardCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverRDSPostgresCustomServerConfig) contextValidateStandardCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.StandardCredentials != nil {

		if err := m.StandardCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standardCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standardCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverRDSPostgresCustomServerConfig) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverRDSPostgresCustomServerConfig) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {

		if swag.IsZero(m.Source) { // not required
			return nil
		}

		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverRDSPostgresCustomServerConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverRDSPostgresCustomServerConfig) UnmarshalBinary(b []byte) error {
	var res RecoverRDSPostgresCustomServerConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
