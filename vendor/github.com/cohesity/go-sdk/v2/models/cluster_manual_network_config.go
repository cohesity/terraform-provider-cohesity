// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterManualNetworkConfig Cluster Network Config.
//
// Specifies all of the parameters needed for network configuration of the new Cluster using manual configuration.
//
// swagger:model ClusterManualNetworkConfig
type ClusterManualNetworkConfig struct {

	// Specifies the gateway of the new cluster network.
	// Required: true
	Gateway *string `json:"gateway"`

	// Specifies the ip subnet ip of the cluster network.
	// Required: true
	SubnetIP *string `json:"subnetIp"`

	// Specifies the ip subnet mask of the cluster network.
	// Required: true
	SubnetMask *string `json:"subnetMask"`

	// Specifies the list of Dns Servers new cluster should be configured with.
	// Required: true
	DNSServers []string `json:"dnsServers"`
}

// Validate validates this cluster manual network config
func (m *ClusterManualNetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetMask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterManualNetworkConfig) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *ClusterManualNetworkConfig) validateSubnetIP(formats strfmt.Registry) error {

	if err := validate.Required("subnetIp", "body", m.SubnetIP); err != nil {
		return err
	}

	return nil
}

func (m *ClusterManualNetworkConfig) validateSubnetMask(formats strfmt.Registry) error {

	if err := validate.Required("subnetMask", "body", m.SubnetMask); err != nil {
		return err
	}

	return nil
}

func (m *ClusterManualNetworkConfig) validateDNSServers(formats strfmt.Registry) error {

	if err := validate.Required("dnsServers", "body", m.DNSServers); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster manual network config based on context it is used
func (m *ClusterManualNetworkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterManualNetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterManualNetworkConfig) UnmarshalBinary(b []byte) error {
	var res ClusterManualNetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
