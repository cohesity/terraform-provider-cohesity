// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DgRoleBasedBackup Control the Oracle Data Guard role based backup.
//
// swagger:model DgRoleBasedBackup
type DgRoleBasedBackup struct {

	// Specifies the Data Guard role for which backup is allowed.
	// Enum: ["kPrimary","kStandby"]
	BackupOnDgRole string `json:"backupOnDgRole,omitempty"`

	// Specifies if the archive log backup is allowed on all the roles.
	AllowBackupArchivelogOnAnyRole *bool `json:"allowBackupArchivelogOnAnyRole,omitempty"`
}

// Validate validates this dg role based backup
func (m *DgRoleBasedBackup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupOnDgRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dgRoleBasedBackupTypeBackupOnDgRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPrimary","kStandby"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dgRoleBasedBackupTypeBackupOnDgRolePropEnum = append(dgRoleBasedBackupTypeBackupOnDgRolePropEnum, v)
	}
}

const (

	// DgRoleBasedBackupBackupOnDgRoleKPrimary captures enum value "kPrimary"
	DgRoleBasedBackupBackupOnDgRoleKPrimary string = "kPrimary"

	// DgRoleBasedBackupBackupOnDgRoleKStandby captures enum value "kStandby"
	DgRoleBasedBackupBackupOnDgRoleKStandby string = "kStandby"
)

// prop value enum
func (m *DgRoleBasedBackup) validateBackupOnDgRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dgRoleBasedBackupTypeBackupOnDgRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DgRoleBasedBackup) validateBackupOnDgRole(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupOnDgRole) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackupOnDgRoleEnum("backupOnDgRole", "body", m.BackupOnDgRole); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dg role based backup based on context it is used
func (m *DgRoleBasedBackup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DgRoleBasedBackup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DgRoleBasedBackup) UnmarshalBinary(b []byte) error {
	var res DgRoleBasedBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
