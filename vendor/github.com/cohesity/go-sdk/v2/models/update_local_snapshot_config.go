// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateLocalSnapshotConfig Local Snapshot Config.
//
// Specifies the params to perform actions on local snapshot taken by a Protection Group Run.
//
// swagger:model UpdateLocalSnapshotConfig
type UpdateLocalSnapshotConfig struct {

	// Specifies whether to retain the snapshot for legal purpose. If set to true, the snapshots cannot be deleted until the retention period. Note that using this option may cause the Cluster to run out of space. If set to false explicitly, the hold is removed, and the snapshots will expire as specified in the policy of the Protection Group. If this field is not specified, there is no change to the hold of the run. This field can be set only by a User having Data Security Role.
	EnableLegalHold *bool `json:"enableLegalHold,omitempty"`

	// Specifies whether to delete the snapshot. When this is set to true, all other params will be ignored.
	DeleteSnapshot *bool `json:"deleteSnapshot,omitempty"`

	// Specifies WORM retention type for the snapshots. When a WORM retention type is specified, the snapshots of the Protection Groups using this policy will be kept until the maximum of the snapshot retention time. During that time, the snapshots cannot be deleted. <br>'Compliance' implies WORM retention is set for compliance reason. <br>'Administrative' implies WORM retention is set for administrative purposes.
	// Enum: ["Compliance","Administrative"]
	DataLock *string `json:"dataLock,omitempty"`

	// Specifies number of days to retain the snapshots. If positive, then this value is added to exisiting expiry time thereby increasing  the retention period of the snapshot. Conversly, if this value is negative, then value is subtracted to existing expiry time thereby decreasing the retention period of the snaphot. Here, by this operation if expiry time goes below current time then snapshot is immediately deleted.
	DaysToKeep *int64 `json:"daysToKeep,omitempty"`
}

// Validate validates this update local snapshot config
func (m *UpdateLocalSnapshotConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataLock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateLocalSnapshotConfigTypeDataLockPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Compliance","Administrative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateLocalSnapshotConfigTypeDataLockPropEnum = append(updateLocalSnapshotConfigTypeDataLockPropEnum, v)
	}
}

const (

	// UpdateLocalSnapshotConfigDataLockCompliance captures enum value "Compliance"
	UpdateLocalSnapshotConfigDataLockCompliance string = "Compliance"

	// UpdateLocalSnapshotConfigDataLockAdministrative captures enum value "Administrative"
	UpdateLocalSnapshotConfigDataLockAdministrative string = "Administrative"
)

// prop value enum
func (m *UpdateLocalSnapshotConfig) validateDataLockEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateLocalSnapshotConfigTypeDataLockPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateLocalSnapshotConfig) validateDataLock(formats strfmt.Registry) error {
	if swag.IsZero(m.DataLock) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataLockEnum("dataLock", "body", *m.DataLock); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update local snapshot config based on context it is used
func (m *UpdateLocalSnapshotConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateLocalSnapshotConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateLocalSnapshotConfig) UnmarshalBinary(b []byte) error {
	var res UpdateLocalSnapshotConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
