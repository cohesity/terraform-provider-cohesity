// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MongoDBSourceRegistrationParams Register MongoDB source request parameters.
//
// Specifies parameters to register MongoDB source.
//
// swagger:model MongoDBSourceRegistrationParams
type MongoDBSourceRegistrationParams struct {

	// Specify the MongoS hosts for a sharded cluster and the MongoD hosts for a non-sharded cluster. You can specify a sub-set of the hosts.
	// Required: true
	// Min Items: 1
	// Unique: true
	Hosts []string `json:"hosts"`

	// MongoDB authentication type.
	// Required: true
	// Enum: ["SCRAM","LDAP","NONE","KERBEROS"]
	AuthType *string `json:"authType"`

	// Specifies the username of the MongoDB cluster. Should be set if 'authType' is 'LDAP' or 'SCRAM'.
	Username *string `json:"username,omitempty"`

	// Specifies the principal name of the MongoDB cluster. Should be set if 'authType' is 'KERBEROS'.
	Principal *string `json:"principal,omitempty"`

	// Specifies the password for the MongoDB cluster. Should be set if 'authType' is 'LDAP' or 'SCRAM'.
	Password *string `json:"password,omitempty"`

	// Authenticating Database for this cluster. Should be set if 'authType' is 'LDAP' or 'SCRAM'.
	AuthenticatingDatabase *string `json:"authenticatingDatabase,omitempty"`

	// Set to true if connection to MongoDB has to be over SSL.
	// Required: true
	IsSslRequired *bool `json:"isSslRequired"`

	// Set this to true if you want the system to peform backups from secondary nodes.
	// Required: true
	UseSecondaryForBackup *bool `json:"useSecondaryForBackup"`

	// MongoDB Secondary node tag. Required only if 'useSecondaryForBackup' is true.The system will use this to identify the secondary nodes for reading backup data.
	SecondaryNodeTag string `json:"secondaryNodeTag,omitempty"`

	// Set this to true if you want the system to peform backups from fixed node.
	// Required: true
	UseFixedNodeForBackup *bool `json:"useFixedNodeForBackup"`
}

// Validate validates this mongo d b source registration params
func (m *MongoDBSourceRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSslRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseSecondaryForBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseFixedNodeForBackup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MongoDBSourceRegistrationParams) validateHosts(formats strfmt.Registry) error {

	if err := validate.Required("hosts", "body", m.Hosts); err != nil {
		return err
	}

	iHostsSize := int64(len(m.Hosts))

	if err := validate.MinItems("hosts", "body", iHostsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("hosts", "body", m.Hosts); err != nil {
		return err
	}

	return nil
}

var mongoDBSourceRegistrationParamsTypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SCRAM","LDAP","NONE","KERBEROS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mongoDBSourceRegistrationParamsTypeAuthTypePropEnum = append(mongoDBSourceRegistrationParamsTypeAuthTypePropEnum, v)
	}
}

const (

	// MongoDBSourceRegistrationParamsAuthTypeSCRAM captures enum value "SCRAM"
	MongoDBSourceRegistrationParamsAuthTypeSCRAM string = "SCRAM"

	// MongoDBSourceRegistrationParamsAuthTypeLDAP captures enum value "LDAP"
	MongoDBSourceRegistrationParamsAuthTypeLDAP string = "LDAP"

	// MongoDBSourceRegistrationParamsAuthTypeNONE captures enum value "NONE"
	MongoDBSourceRegistrationParamsAuthTypeNONE string = "NONE"

	// MongoDBSourceRegistrationParamsAuthTypeKERBEROS captures enum value "KERBEROS"
	MongoDBSourceRegistrationParamsAuthTypeKERBEROS string = "KERBEROS"
)

// prop value enum
func (m *MongoDBSourceRegistrationParams) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mongoDBSourceRegistrationParamsTypeAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MongoDBSourceRegistrationParams) validateAuthType(formats strfmt.Registry) error {

	if err := validate.Required("authType", "body", m.AuthType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

func (m *MongoDBSourceRegistrationParams) validateIsSslRequired(formats strfmt.Registry) error {

	if err := validate.Required("isSslRequired", "body", m.IsSslRequired); err != nil {
		return err
	}

	return nil
}

func (m *MongoDBSourceRegistrationParams) validateUseSecondaryForBackup(formats strfmt.Registry) error {

	if err := validate.Required("useSecondaryForBackup", "body", m.UseSecondaryForBackup); err != nil {
		return err
	}

	return nil
}

func (m *MongoDBSourceRegistrationParams) validateUseFixedNodeForBackup(formats strfmt.Registry) error {

	if err := validate.Required("useFixedNodeForBackup", "body", m.UseFixedNodeForBackup); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mongo d b source registration params based on context it is used
func (m *MongoDBSourceRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MongoDBSourceRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MongoDBSourceRegistrationParams) UnmarshalBinary(b []byte) error {
	var res MongoDBSourceRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
