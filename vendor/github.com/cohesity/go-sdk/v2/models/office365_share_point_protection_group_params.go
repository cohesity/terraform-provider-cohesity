// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Office365SharePointProtectionGroupParams Office 365 SharePoint Protection Group Parameters.
//
// Specifies the parameters which are specific to Office 365 SharePoint related Protection Groups.
//
// swagger:model Office365SharePointProtectionGroupParams
type Office365SharePointProtectionGroupParams struct {

	// Specifies the parameters specific to the protection of the Preservation Hold library.
	PreservationHoldLibraryParams *Office365PreservationHoldLibraryParams `json:"preservationHoldLibraryParams,omitempty"`

	// Array of paths to be excluded from backup. Specifies list of doclib/directory paths which should be excluded when backing up Office 365 source. supported exclusion: - doclib exclusion: whole doclib is excluded from backup. sample: /Doclib1 - directory exclusion: specified path in doclib will be excluded from backup. sample: /Doclib1/folderA/forderB Doclibs can be specified by either a) Doclib name - eg, Documents. b) Drive id of doclib - b!ZMSl2JRm0UeXLHfHR1m-iuD10p0CIV9qSa6TtgM Regular expressions are not supported. If not specified, all the doclibs within sharepoint site will be protected.
	ExcludePaths []string `json:"excludePaths"`
}

// Validate validates this office365 share point protection group params
func (m *Office365SharePointProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreservationHoldLibraryParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Office365SharePointProtectionGroupParams) validatePreservationHoldLibraryParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PreservationHoldLibraryParams) { // not required
		return nil
	}

	if m.PreservationHoldLibraryParams != nil {
		if err := m.PreservationHoldLibraryParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preservationHoldLibraryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preservationHoldLibraryParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this office365 share point protection group params based on the context it is used
func (m *Office365SharePointProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePreservationHoldLibraryParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Office365SharePointProtectionGroupParams) contextValidatePreservationHoldLibraryParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PreservationHoldLibraryParams != nil {

		if swag.IsZero(m.PreservationHoldLibraryParams) { // not required
			return nil
		}

		if err := m.PreservationHoldLibraryParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preservationHoldLibraryParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preservationHoldLibraryParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Office365SharePointProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Office365SharePointProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res Office365SharePointProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
