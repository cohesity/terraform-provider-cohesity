// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FilterDocumentsParams Recover Couchbase Object Params.
//
// Specifies the parameters to filter documents to be restored.
//
// swagger:model FilterDocumentsParams
type FilterDocumentsParams struct {

	// Specifies the filter type for Documents to be restored.
	// Required: true
	// Enum: ["NONE","ID","CONTENT"]
	DocumentFilterType *string `json:"documentFilterType"`

	// A regular expression to match Documents ID's to be restored.
	IDRegex *string `json:"idRegex,omitempty"`

	// A filter expression to match Documents content to be restored.
	FilterExpression *string `json:"filterExpression,omitempty"`
}

// Validate validates this filter documents params
func (m *FilterDocumentsParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocumentFilterType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var filterDocumentsParamsTypeDocumentFilterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","ID","CONTENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterDocumentsParamsTypeDocumentFilterTypePropEnum = append(filterDocumentsParamsTypeDocumentFilterTypePropEnum, v)
	}
}

const (

	// FilterDocumentsParamsDocumentFilterTypeNONE captures enum value "NONE"
	FilterDocumentsParamsDocumentFilterTypeNONE string = "NONE"

	// FilterDocumentsParamsDocumentFilterTypeID captures enum value "ID"
	FilterDocumentsParamsDocumentFilterTypeID string = "ID"

	// FilterDocumentsParamsDocumentFilterTypeCONTENT captures enum value "CONTENT"
	FilterDocumentsParamsDocumentFilterTypeCONTENT string = "CONTENT"
)

// prop value enum
func (m *FilterDocumentsParams) validateDocumentFilterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, filterDocumentsParamsTypeDocumentFilterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FilterDocumentsParams) validateDocumentFilterType(formats strfmt.Registry) error {

	if err := validate.Required("documentFilterType", "body", m.DocumentFilterType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDocumentFilterTypeEnum("documentFilterType", "body", *m.DocumentFilterType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this filter documents params based on context it is used
func (m *FilterDocumentsParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FilterDocumentsParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilterDocumentsParams) UnmarshalBinary(b []byte) error {
	var res FilterDocumentsParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
