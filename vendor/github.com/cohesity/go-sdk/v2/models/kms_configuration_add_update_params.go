// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KmsConfigurationAddUpdateParams Parameters to update or add key management system(KMS) on the cluster.
//
// swagger:model KmsConfigurationAddUpdateParams
type KmsConfigurationAddUpdateParams struct {

	// Name of the KMS.
	// Required: true
	Name *string `json:"name"`

	// Ids of storage domains used to assign the KMS for encryption. Once an external KMS (AWS KMS or KIMP KMS) is assigned to a storage domain, it cannot be changed.
	StorageDomainIds []int64 `json:"storageDomainIds"`

	// Ids of external targets used to assign the KMS for encryption. Once an external KMS (AWS KMS or KIMP KMS) is assigned to an external target, it cannot be changed.
	ExternalTargetIds []int64 `json:"externalTargetIds"`

	// KMIP compliant KMS configuration.
	KmipKmsParams *KmipKmsConfiguration `json:"kmipKmsParams,omitempty"`
}

// Validate validates this kms configuration add update params
func (m *KmsConfigurationAddUpdateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKmipKmsParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmsConfigurationAddUpdateParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *KmsConfigurationAddUpdateParams) validateKmipKmsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.KmipKmsParams) { // not required
		return nil
	}

	if m.KmipKmsParams != nil {
		if err := m.KmipKmsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kmipKmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kmipKmsParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kms configuration add update params based on the context it is used
func (m *KmsConfigurationAddUpdateParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKmipKmsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KmsConfigurationAddUpdateParams) contextValidateKmipKmsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.KmipKmsParams != nil {

		if swag.IsZero(m.KmipKmsParams) { // not required
			return nil
		}

		if err := m.KmipKmsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kmipKmsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kmipKmsParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KmsConfigurationAddUpdateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KmsConfigurationAddUpdateParams) UnmarshalBinary(b []byte) error {
	var res KmsConfigurationAddUpdateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
