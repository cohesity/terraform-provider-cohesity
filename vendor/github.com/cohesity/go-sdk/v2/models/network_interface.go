// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkInterface Network Interface
//
// Specifies the parameters of a network interface.
//
// swagger:model NetworkInterface
type NetworkInterface struct {

	// Specifies the name of the network interface.
	Name *string `json:"name,omitempty"`

	// Specifies the type of the network interface.
	// Enum: ["Physical","Bond","Bridge","Group","Vlan","VlanPhysical","VlanBond","VlanGroup","VlanBridge","Invalid"]
	Type *string `json:"type,omitempty"`

	// Specifies the static IP of the network interface.
	StaticIP *string `json:"staticIP,omitempty"`

	// Specifies the virtual IP of the network interface.
	VirtualIP *string `json:"virtualIP,omitempty"`

	// Specifies the gateway of the network interface.
	Gateway *string `json:"gateway,omitempty"`

	// Specifies the MTU of the network interface.
	Mtu *int32 `json:"mtu,omitempty"`

	// Specifies the subnet of the network interface.
	Subnet *string `json:"subnet,omitempty"`

	// Specifies whether or not the interface is up.
	IsUp *bool `json:"isUp,omitempty"`

	// Specifies the group to which this interface belongs.
	Group *string `json:"group,omitempty"`

	// Specifies the interface role.
	// Enum: ["Primary","Secondary","Undefined"]
	Role *string `json:"role,omitempty"`

	// Specifies whether or not this interface is the default route.
	DefaultRoute *bool `json:"defaultRoute,omitempty"`

	// Specifies the names of the bond slaves for this interface.
	BondSlaveNames []string `json:"bondSlaveNames"`

	// Specifies the slots of the bond slaves for this interface.
	BondSlaveSlots []string `json:"bondSlaveSlots"`

	// Specifies the bonding mode of this interface.
	// Enum: ["ActiveBackup","802_3ad","BalanceAlb","Invalid"]
	BondingMode *string `json:"bondingMode,omitempty"`

	// Specifies the MAC address of this interface.
	MacAddress *string `json:"macAddress,omitempty"`

	// Specifies whether or not this interface is connected.
	IsConnected *bool `json:"isConnected,omitempty"`

	// Specifies the speed of this interface.
	// Enum: ["1Gbit/s","10Gbit/s","25Gbit/s","40Gbit/s","100Gbit/s","Unknown"]
	Speed *string `json:"speed,omitempty"`
}

// Validate validates this network interface
func (m *NetworkInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBondingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var networkInterfaceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Physical","Bond","Bridge","Group","Vlan","VlanPhysical","VlanBond","VlanGroup","VlanBridge","Invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkInterfaceTypeTypePropEnum = append(networkInterfaceTypeTypePropEnum, v)
	}
}

const (

	// NetworkInterfaceTypePhysical captures enum value "Physical"
	NetworkInterfaceTypePhysical string = "Physical"

	// NetworkInterfaceTypeBond captures enum value "Bond"
	NetworkInterfaceTypeBond string = "Bond"

	// NetworkInterfaceTypeBridge captures enum value "Bridge"
	NetworkInterfaceTypeBridge string = "Bridge"

	// NetworkInterfaceTypeGroup captures enum value "Group"
	NetworkInterfaceTypeGroup string = "Group"

	// NetworkInterfaceTypeVlan captures enum value "Vlan"
	NetworkInterfaceTypeVlan string = "Vlan"

	// NetworkInterfaceTypeVlanPhysical captures enum value "VlanPhysical"
	NetworkInterfaceTypeVlanPhysical string = "VlanPhysical"

	// NetworkInterfaceTypeVlanBond captures enum value "VlanBond"
	NetworkInterfaceTypeVlanBond string = "VlanBond"

	// NetworkInterfaceTypeVlanGroup captures enum value "VlanGroup"
	NetworkInterfaceTypeVlanGroup string = "VlanGroup"

	// NetworkInterfaceTypeVlanBridge captures enum value "VlanBridge"
	NetworkInterfaceTypeVlanBridge string = "VlanBridge"

	// NetworkInterfaceTypeInvalid captures enum value "Invalid"
	NetworkInterfaceTypeInvalid string = "Invalid"
)

// prop value enum
func (m *NetworkInterface) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkInterfaceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkInterface) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var networkInterfaceTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Primary","Secondary","Undefined"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkInterfaceTypeRolePropEnum = append(networkInterfaceTypeRolePropEnum, v)
	}
}

const (

	// NetworkInterfaceRolePrimary captures enum value "Primary"
	NetworkInterfaceRolePrimary string = "Primary"

	// NetworkInterfaceRoleSecondary captures enum value "Secondary"
	NetworkInterfaceRoleSecondary string = "Secondary"

	// NetworkInterfaceRoleUndefined captures enum value "Undefined"
	NetworkInterfaceRoleUndefined string = "Undefined"
)

// prop value enum
func (m *NetworkInterface) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkInterfaceTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkInterface) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

var networkInterfaceTypeBondingModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ActiveBackup","802_3ad","BalanceAlb","Invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkInterfaceTypeBondingModePropEnum = append(networkInterfaceTypeBondingModePropEnum, v)
	}
}

const (

	// NetworkInterfaceBondingModeActiveBackup captures enum value "ActiveBackup"
	NetworkInterfaceBondingModeActiveBackup string = "ActiveBackup"

	// NetworkInterfaceBondingModeNr8023ad captures enum value "802_3ad"
	NetworkInterfaceBondingModeNr8023ad string = "802_3ad"

	// NetworkInterfaceBondingModeBalanceAlb captures enum value "BalanceAlb"
	NetworkInterfaceBondingModeBalanceAlb string = "BalanceAlb"

	// NetworkInterfaceBondingModeInvalid captures enum value "Invalid"
	NetworkInterfaceBondingModeInvalid string = "Invalid"
)

// prop value enum
func (m *NetworkInterface) validateBondingModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkInterfaceTypeBondingModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkInterface) validateBondingMode(formats strfmt.Registry) error {
	if swag.IsZero(m.BondingMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBondingModeEnum("bondingMode", "body", *m.BondingMode); err != nil {
		return err
	}

	return nil
}

var networkInterfaceTypeSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1Gbit/s","10Gbit/s","25Gbit/s","40Gbit/s","100Gbit/s","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkInterfaceTypeSpeedPropEnum = append(networkInterfaceTypeSpeedPropEnum, v)
	}
}

const (

	// NetworkInterfaceSpeedNr1Gbits captures enum value "1Gbit/s"
	NetworkInterfaceSpeedNr1Gbits string = "1Gbit/s"

	// NetworkInterfaceSpeedNr10Gbits captures enum value "10Gbit/s"
	NetworkInterfaceSpeedNr10Gbits string = "10Gbit/s"

	// NetworkInterfaceSpeedNr25Gbits captures enum value "25Gbit/s"
	NetworkInterfaceSpeedNr25Gbits string = "25Gbit/s"

	// NetworkInterfaceSpeedNr40Gbits captures enum value "40Gbit/s"
	NetworkInterfaceSpeedNr40Gbits string = "40Gbit/s"

	// NetworkInterfaceSpeedNr100Gbits captures enum value "100Gbit/s"
	NetworkInterfaceSpeedNr100Gbits string = "100Gbit/s"

	// NetworkInterfaceSpeedUnknown captures enum value "Unknown"
	NetworkInterfaceSpeedUnknown string = "Unknown"
)

// prop value enum
func (m *NetworkInterface) validateSpeedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkInterfaceTypeSpeedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkInterface) validateSpeed(formats strfmt.Registry) error {
	if swag.IsZero(m.Speed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSpeedEnum("speed", "body", *m.Speed); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this network interface based on context it is used
func (m *NetworkInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkInterface) UnmarshalBinary(b []byte) error {
	var res NetworkInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
