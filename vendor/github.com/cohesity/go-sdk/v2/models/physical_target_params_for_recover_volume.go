// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhysicalTargetParamsForRecoverVolume Physical Recovery Target Params
//
// Specifies the parameters for a physical recovery target.
//
// swagger:model PhysicalTargetParamsForRecoverVolume
type PhysicalTargetParamsForRecoverVolume struct {

	// Specifies the mapping from source volumes to destination volumes.
	// Required: true
	VolumeMapping []*RecoverVolumeMapping `json:"volumeMapping"`

	// Specifies whether volume would be dismounted first during LockVolume failure. If not specified, default is false.
	ForceUnmountVolume *bool `json:"forceUnmountVolume,omitempty"`

	// Specifies the target entity where the volumes are being mounted.
	// Required: true
	MountTarget *RecoveryObjectIdentifier `json:"mountTarget"`

	// Specifies VLAN Params associated with the recovered. If this is not specified, then the VLAN settings will be automatically selected from one of the below options: a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be automatically based on the client's (e.g. ESXI host) IP address. b. If VLANs are not configured on Cohesity, then the partition hostname or VIPs will be used for Recovery.
	VlanConfig *RecoveryVlanConfig `json:"vlanConfig,omitempty"`
}

// Validate validates this physical target params for recover volume
func (m *PhysicalTargetParamsForRecoverVolume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVolumeMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalTargetParamsForRecoverVolume) validateVolumeMapping(formats strfmt.Registry) error {

	if err := validate.Required("volumeMapping", "body", m.VolumeMapping); err != nil {
		return err
	}

	for i := 0; i < len(m.VolumeMapping); i++ {
		if swag.IsZero(m.VolumeMapping[i]) { // not required
			continue
		}

		if m.VolumeMapping[i] != nil {
			if err := m.VolumeMapping[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeMapping" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeMapping" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PhysicalTargetParamsForRecoverVolume) validateMountTarget(formats strfmt.Registry) error {

	if err := validate.Required("mountTarget", "body", m.MountTarget); err != nil {
		return err
	}

	if m.MountTarget != nil {
		if err := m.MountTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountTarget")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalTargetParamsForRecoverVolume) validateVlanConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanConfig) { // not required
		return nil
	}

	if m.VlanConfig != nil {
		if err := m.VlanConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this physical target params for recover volume based on the context it is used
func (m *PhysicalTargetParamsForRecoverVolume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVolumeMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalTargetParamsForRecoverVolume) contextValidateVolumeMapping(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeMapping); i++ {

		if m.VolumeMapping[i] != nil {

			if swag.IsZero(m.VolumeMapping[i]) { // not required
				return nil
			}

			if err := m.VolumeMapping[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeMapping" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeMapping" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PhysicalTargetParamsForRecoverVolume) contextValidateMountTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.MountTarget != nil {

		if err := m.MountTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountTarget")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalTargetParamsForRecoverVolume) contextValidateVlanConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanConfig != nil {

		if swag.IsZero(m.VlanConfig) { // not required
			return nil
		}

		if err := m.VlanConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalTargetParamsForRecoverVolume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalTargetParamsForRecoverVolume) UnmarshalBinary(b []byte) error {
	var res PhysicalTargetParamsForRecoverVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
