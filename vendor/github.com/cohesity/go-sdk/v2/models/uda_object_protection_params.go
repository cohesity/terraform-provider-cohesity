// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UdaObjectProtectionParams Universal Data Adapter Object Protection Parameters.
//
// Specifies the parameters that are specific to Universal Data Adapter Object Protection.
//
// swagger:model UdaObjectProtectionParams
type UdaObjectProtectionParams struct {

	// Specifies the objects to be included in the Object Protection.
	// Required: true
	// Min Items: 1
	// Unique: true
	Objects []*UdaObjectProtectionObjectParams `json:"objects"`

	// Specifies the map of custom arguments to be supplied to the various backup scripts.
	BackupJobArguments []*KeyValuePair `json:"backupJobArguments"`

	// Specifies the maximum number of concurrent IO Streams thatwill be created to exchange data with the cluster. If not specified, the default value is taken as 1.
	Concurrency *int32 `json:"concurrency,omitempty"`

	// Specifies the maximum number of view mounts per host. If not specified, the default value is taken as 1.
	Mounts *int32 `json:"mounts,omitempty"`

	// Specifies whether this Protection Group is created from a source having entity support.
	// Read Only: true
	HasEntitySupport *bool `json:"hasEntitySupport,omitempty"`

	// Specifies the custom arguments to be supplied to the full backup script when a full backup is enabled in the policy. This field is deprecated. Use backupJobArguments instead.
	FullBackupArgs *string `json:"fullBackupArgs,omitempty"`

	// Specifies the custom arguments to be supplied to the incremental backup script when an incremental backup is enabled in the policy. This field is deprecated. Use backupJobArguments instead.
	IncrBackupArgs *string `json:"incrBackupArgs,omitempty"`

	// Specifies the custom arguments to be supplied to the log backup script when a log backup is enabled in the policy. This field is deprecated. Use backupJobArguments instead.
	LogBackupArgs *string `json:"logBackupArgs,omitempty"`
}

// Validate validates this uda object protection params
func (m *UdaObjectProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupJobArguments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaObjectProtectionParams) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	iObjectsSize := int64(len(m.Objects))

	if err := validate.MinItems("objects", "body", iObjectsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("objects", "body", m.Objects); err != nil {
		return err
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaObjectProtectionParams) validateBackupJobArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupJobArguments) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupJobArguments); i++ {
		if swag.IsZero(m.BackupJobArguments[i]) { // not required
			continue
		}

		if m.BackupJobArguments[i] != nil {
			if err := m.BackupJobArguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupJobArguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupJobArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this uda object protection params based on the context it is used
func (m *UdaObjectProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupJobArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHasEntitySupport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaObjectProtectionParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaObjectProtectionParams) contextValidateBackupJobArguments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupJobArguments); i++ {

		if m.BackupJobArguments[i] != nil {

			if swag.IsZero(m.BackupJobArguments[i]) { // not required
				return nil
			}

			if err := m.BackupJobArguments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backupJobArguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backupJobArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaObjectProtectionParams) contextValidateHasEntitySupport(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "hasEntitySupport", "body", m.HasEntitySupport); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UdaObjectProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaObjectProtectionParams) UnmarshalBinary(b []byte) error {
	var res UdaObjectProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
