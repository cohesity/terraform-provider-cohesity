// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverPureSanGroupOriginalSourceConfig Recover Pure group Original Source Network configuration.
//
// Specifies the network config parameters to be applied for Pure group if recovering to original Source.
//
// swagger:model RecoverPureSanGroupOriginalSourceConfig
type RecoverPureSanGroupOriginalSourceConfig struct {

	// Specifies params to rename the recovered SAN group. If not specified, the original names of the group are preserved.
	RenameRecoveredGroupParams *RecoveredOrClonedVmsRenameConfig `json:"renameRecoveredGroupParams,omitempty"`

	// Specifies the id of the resource pool to recover the SAN Volume to. This field can be specified for cases where the resource pool can be altered on the original source.
	ResourcePool *RecoveryObjectIdentifier `json:"resourcePool,omitempty"`
}

// Validate validates this recover pure san group original source config
func (m *RecoverPureSanGroupOriginalSourceConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRenameRecoveredGroupParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverPureSanGroupOriginalSourceConfig) validateRenameRecoveredGroupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RenameRecoveredGroupParams) { // not required
		return nil
	}

	if m.RenameRecoveredGroupParams != nil {
		if err := m.RenameRecoveredGroupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRecoveredGroupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRecoveredGroupParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverPureSanGroupOriginalSourceConfig) validateResourcePool(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourcePool) { // not required
		return nil
	}

	if m.ResourcePool != nil {
		if err := m.ResourcePool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePool")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover pure san group original source config based on the context it is used
func (m *RecoverPureSanGroupOriginalSourceConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRenameRecoveredGroupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourcePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverPureSanGroupOriginalSourceConfig) contextValidateRenameRecoveredGroupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RenameRecoveredGroupParams != nil {

		if swag.IsZero(m.RenameRecoveredGroupParams) { // not required
			return nil
		}

		if err := m.RenameRecoveredGroupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renameRecoveredGroupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("renameRecoveredGroupParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverPureSanGroupOriginalSourceConfig) contextValidateResourcePool(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourcePool != nil {

		if swag.IsZero(m.ResourcePool) { // not required
			return nil
		}

		if err := m.ResourcePool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourcePool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourcePool")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverPureSanGroupOriginalSourceConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverPureSanGroupOriginalSourceConfig) UnmarshalBinary(b []byte) error {
	var res RecoverPureSanGroupOriginalSourceConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
