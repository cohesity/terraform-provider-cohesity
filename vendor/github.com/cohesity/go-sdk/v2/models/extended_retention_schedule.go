// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtendedRetentionSchedule Extended Retention Schedule
//
// Specifies a schedule frequency and schedule unit for Extended Retentions.
//
// swagger:model ExtendedRetentionSchedule
type ExtendedRetentionSchedule struct {

	// Specifies the unit interval for retention of Snapshots. <br>'Runs' means that the Snapshot copy retained after the number of Protection Group Runs equals the number specified in the frequency. <br>'Hours' means that the Snapshot copy retained hourly at the frequency set in the frequency, for example if scheduleFrequency is 2, the copy occurs every 2 hours. <br>'Days' means that the Snapshot copy gets retained daily at the frequency set in the frequency. <br>'Weeks' means that the Snapshot copy is retained weekly at the frequency set in the frequency. <br>'Months' means that the Snapshot copy is retained monthly at the frequency set in the Frequency. <br>'Years' means that the Snapshot copy is retained yearly at the frequency set in the Frequency.
	// Required: true
	// Enum: ["Runs","Hours","Days","Weeks","Months","Years"]
	Unit *string `json:"unit"`

	// Specifies a factor to multiply the unit by, to determine the retention schedule.
	// For example if set to 2 and the unit is hourly, then Snapshots from the first eligible Job Run for every 2 hour period is retained.
	// Minimum: 1
	Frequency *int32 `json:"frequency,omitempty"`
}

// Validate validates this extended retention schedule
func (m *ExtendedRetentionSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var extendedRetentionScheduleTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Runs","Hours","Days","Weeks","Months","Years"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extendedRetentionScheduleTypeUnitPropEnum = append(extendedRetentionScheduleTypeUnitPropEnum, v)
	}
}

const (

	// ExtendedRetentionScheduleUnitRuns captures enum value "Runs"
	ExtendedRetentionScheduleUnitRuns string = "Runs"

	// ExtendedRetentionScheduleUnitHours captures enum value "Hours"
	ExtendedRetentionScheduleUnitHours string = "Hours"

	// ExtendedRetentionScheduleUnitDays captures enum value "Days"
	ExtendedRetentionScheduleUnitDays string = "Days"

	// ExtendedRetentionScheduleUnitWeeks captures enum value "Weeks"
	ExtendedRetentionScheduleUnitWeeks string = "Weeks"

	// ExtendedRetentionScheduleUnitMonths captures enum value "Months"
	ExtendedRetentionScheduleUnitMonths string = "Months"

	// ExtendedRetentionScheduleUnitYears captures enum value "Years"
	ExtendedRetentionScheduleUnitYears string = "Years"
)

// prop value enum
func (m *ExtendedRetentionSchedule) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, extendedRetentionScheduleTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExtendedRetentionSchedule) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", *m.Unit); err != nil {
		return err
	}

	return nil
}

func (m *ExtendedRetentionSchedule) validateFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	if err := validate.MinimumInt("frequency", "body", int64(*m.Frequency), 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this extended retention schedule based on context it is used
func (m *ExtendedRetentionSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExtendedRetentionSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtendedRetentionSchedule) UnmarshalBinary(b []byte) error {
	var res ExtendedRetentionSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
