// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AllowedFailoverOperation Specifies the allowed failover operation.
//
// swagger:model AllowedFailoverOperation
type AllowedFailoverOperation string

func NewAllowedFailoverOperation(value AllowedFailoverOperation) *AllowedFailoverOperation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AllowedFailoverOperation.
func (m AllowedFailoverOperation) Pointer() *AllowedFailoverOperation {
	return &m
}

const (

	// AllowedFailoverOperationUnknown captures enum value "Unknown"
	AllowedFailoverOperationUnknown AllowedFailoverOperation = "Unknown"

	// AllowedFailoverOperationUnplanned captures enum value "Unplanned"
	AllowedFailoverOperationUnplanned AllowedFailoverOperation = "Unplanned"

	// AllowedFailoverOperationPrepare captures enum value "Prepare"
	AllowedFailoverOperationPrepare AllowedFailoverOperation = "Prepare"

	// AllowedFailoverOperationFinalize captures enum value "Finalize"
	AllowedFailoverOperationFinalize AllowedFailoverOperation = "Finalize"

	// AllowedFailoverOperationCancel captures enum value "Cancel"
	AllowedFailoverOperationCancel AllowedFailoverOperation = "Cancel"
)

// for schema
var allowedFailoverOperationEnum []interface{}

func init() {
	var res []AllowedFailoverOperation
	if err := json.Unmarshal([]byte(`["Unknown","Unplanned","Prepare","Finalize","Cancel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		allowedFailoverOperationEnum = append(allowedFailoverOperationEnum, v)
	}
}

func (m AllowedFailoverOperation) validateAllowedFailoverOperationEnum(path, location string, value AllowedFailoverOperation) error {
	if err := validate.EnumCase(path, location, value, allowedFailoverOperationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this allowed failover operation
func (m AllowedFailoverOperation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAllowedFailoverOperationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this allowed failover operation based on context it is used
func (m AllowedFailoverOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
