// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataLockConstraints DataLock Constraints
//
// Specifies the dataLock constraints for local or target snapshot.
//
// swagger:model DataLockConstraints
type DataLockConstraints struct {

	// Specifies the type of WORM retention type. <br>'Compliance' implies WORM retention is set for compliance reason. <br>'Administrative' implies WORM retention is set for administrative purposes.
	// Enum: ["Compliance","Administrative"]
	Mode *string `json:"mode,omitempty"`

	// Specifies the expiry time of attempt in Unix epoch Timestamp (in microseconds).
	ExpiryTimeUsecs *int64 `json:"expiryTimeUsecs,omitempty"`
}

// Validate validates this data lock constraints
func (m *DataLockConstraints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataLockConstraintsTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Compliance","Administrative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataLockConstraintsTypeModePropEnum = append(dataLockConstraintsTypeModePropEnum, v)
	}
}

const (

	// DataLockConstraintsModeCompliance captures enum value "Compliance"
	DataLockConstraintsModeCompliance string = "Compliance"

	// DataLockConstraintsModeAdministrative captures enum value "Administrative"
	DataLockConstraintsModeAdministrative string = "Administrative"
)

// prop value enum
func (m *DataLockConstraints) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataLockConstraintsTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataLockConstraints) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data lock constraints based on context it is used
func (m *DataLockConstraints) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataLockConstraints) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataLockConstraints) UnmarshalBinary(b []byte) error {
	var res DataLockConstraints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
