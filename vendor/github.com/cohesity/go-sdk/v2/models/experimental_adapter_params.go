// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExperimentalAdapterParams Recover Experimental Adapter environment params.
//
// Specifies the recovery options specific to Experimental Adapter environment.
//
// swagger:model ExperimentalAdapterParams
type ExperimentalAdapterParams struct {

	// Specifies the type of recover action to be performed.
	// Required: true
	// Enum: ["RecoverObjects"]
	RecoveryAction *string `json:"recoveryAction"`

	// Specifies the parameters to recover Experimental Adapter objects.
	// Required: true
	RecoverExperimentalAdapterParams *RecoverExperimentalAdapterParams `json:"recoverExperimentalAdapterParams"`
}

// Validate validates this experimental adapter params
func (m *ExperimentalAdapterParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecoveryAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverExperimentalAdapterParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var experimentalAdapterParamsTypeRecoveryActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RecoverObjects"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		experimentalAdapterParamsTypeRecoveryActionPropEnum = append(experimentalAdapterParamsTypeRecoveryActionPropEnum, v)
	}
}

const (

	// ExperimentalAdapterParamsRecoveryActionRecoverObjects captures enum value "RecoverObjects"
	ExperimentalAdapterParamsRecoveryActionRecoverObjects string = "RecoverObjects"
)

// prop value enum
func (m *ExperimentalAdapterParams) validateRecoveryActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, experimentalAdapterParamsTypeRecoveryActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExperimentalAdapterParams) validateRecoveryAction(formats strfmt.Registry) error {

	if err := validate.Required("recoveryAction", "body", m.RecoveryAction); err != nil {
		return err
	}

	// value enum
	if err := m.validateRecoveryActionEnum("recoveryAction", "body", *m.RecoveryAction); err != nil {
		return err
	}

	return nil
}

func (m *ExperimentalAdapterParams) validateRecoverExperimentalAdapterParams(formats strfmt.Registry) error {

	if err := validate.Required("recoverExperimentalAdapterParams", "body", m.RecoverExperimentalAdapterParams); err != nil {
		return err
	}

	if m.RecoverExperimentalAdapterParams != nil {
		if err := m.RecoverExperimentalAdapterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverExperimentalAdapterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverExperimentalAdapterParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this experimental adapter params based on the context it is used
func (m *ExperimentalAdapterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecoverExperimentalAdapterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExperimentalAdapterParams) contextValidateRecoverExperimentalAdapterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverExperimentalAdapterParams != nil {

		if err := m.RecoverExperimentalAdapterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverExperimentalAdapterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverExperimentalAdapterParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExperimentalAdapterParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExperimentalAdapterParams) UnmarshalBinary(b []byte) error {
	var res ExperimentalAdapterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
