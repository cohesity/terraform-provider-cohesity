// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceGflags Service gflags list struct.
//
// Specifies the gflags for a service.
//
// swagger:model ServiceGflags
type ServiceGflags struct {

	// Specifies the service name.
	// Enum: ["kInvalidService","kApollo","kBridge","kGenie","kGenieGofer","kMagneto","kIris","kIrisProxy","kNewScribe","kStats","kYoda","kAlerts","kKeychain","kLogWatcher","kStatsCollector","kGandalf","kNexus","kNexusProxy","kStorageProxy","kRtClient","kVaultProxy","kSmbProxy","kBridgeProxy","kLibrarian","kGroot","kEagleAgent","kAthena","kBifrostBroker","kAtom","kYodaAgent","kSmb2Proxy","kThrottler","kElrond","kHeimdall","kBifrost","kIcebox","kNodeExporter","kCompass","kPatch","kEtlServer","kUpgrader","kOs","kPushproxClient","kPushClient","kAegis","kNfsProxy","kElixirWorkerservice","kArgusApp","kMetadataservice","kSpireServer","kSpireAgent","kLicensing","kShelteredHarborApp","kShelteredHarborUda","kCohesityCa","kInfraoperator","kMarketplaceoperator","kCohesion","kSpireApp","kGaia","kStargate","kAdaptx","kNosql"]
	ServiceName *string `json:"serviceName,omitempty"`

	// Specifies a list of gflags for the service.
	Gflags []*Gflag `json:"gflags"`
}

// Validate validates this service gflags
func (m *ServiceGflags) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGflags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceGflagsTypeServiceNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kInvalidService","kApollo","kBridge","kGenie","kGenieGofer","kMagneto","kIris","kIrisProxy","kNewScribe","kStats","kYoda","kAlerts","kKeychain","kLogWatcher","kStatsCollector","kGandalf","kNexus","kNexusProxy","kStorageProxy","kRtClient","kVaultProxy","kSmbProxy","kBridgeProxy","kLibrarian","kGroot","kEagleAgent","kAthena","kBifrostBroker","kAtom","kYodaAgent","kSmb2Proxy","kThrottler","kElrond","kHeimdall","kBifrost","kIcebox","kNodeExporter","kCompass","kPatch","kEtlServer","kUpgrader","kOs","kPushproxClient","kPushClient","kAegis","kNfsProxy","kElixirWorkerservice","kArgusApp","kMetadataservice","kSpireServer","kSpireAgent","kLicensing","kShelteredHarborApp","kShelteredHarborUda","kCohesityCa","kInfraoperator","kMarketplaceoperator","kCohesion","kSpireApp","kGaia","kStargate","kAdaptx","kNosql"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceGflagsTypeServiceNamePropEnum = append(serviceGflagsTypeServiceNamePropEnum, v)
	}
}

const (

	// ServiceGflagsServiceNameKInvalidService captures enum value "kInvalidService"
	ServiceGflagsServiceNameKInvalidService string = "kInvalidService"

	// ServiceGflagsServiceNameKApollo captures enum value "kApollo"
	ServiceGflagsServiceNameKApollo string = "kApollo"

	// ServiceGflagsServiceNameKBridge captures enum value "kBridge"
	ServiceGflagsServiceNameKBridge string = "kBridge"

	// ServiceGflagsServiceNameKGenie captures enum value "kGenie"
	ServiceGflagsServiceNameKGenie string = "kGenie"

	// ServiceGflagsServiceNameKGenieGofer captures enum value "kGenieGofer"
	ServiceGflagsServiceNameKGenieGofer string = "kGenieGofer"

	// ServiceGflagsServiceNameKMagneto captures enum value "kMagneto"
	ServiceGflagsServiceNameKMagneto string = "kMagneto"

	// ServiceGflagsServiceNameKIris captures enum value "kIris"
	ServiceGflagsServiceNameKIris string = "kIris"

	// ServiceGflagsServiceNameKIrisProxy captures enum value "kIrisProxy"
	ServiceGflagsServiceNameKIrisProxy string = "kIrisProxy"

	// ServiceGflagsServiceNameKNewScribe captures enum value "kNewScribe"
	ServiceGflagsServiceNameKNewScribe string = "kNewScribe"

	// ServiceGflagsServiceNameKStats captures enum value "kStats"
	ServiceGflagsServiceNameKStats string = "kStats"

	// ServiceGflagsServiceNameKYoda captures enum value "kYoda"
	ServiceGflagsServiceNameKYoda string = "kYoda"

	// ServiceGflagsServiceNameKAlerts captures enum value "kAlerts"
	ServiceGflagsServiceNameKAlerts string = "kAlerts"

	// ServiceGflagsServiceNameKKeychain captures enum value "kKeychain"
	ServiceGflagsServiceNameKKeychain string = "kKeychain"

	// ServiceGflagsServiceNameKLogWatcher captures enum value "kLogWatcher"
	ServiceGflagsServiceNameKLogWatcher string = "kLogWatcher"

	// ServiceGflagsServiceNameKStatsCollector captures enum value "kStatsCollector"
	ServiceGflagsServiceNameKStatsCollector string = "kStatsCollector"

	// ServiceGflagsServiceNameKGandalf captures enum value "kGandalf"
	ServiceGflagsServiceNameKGandalf string = "kGandalf"

	// ServiceGflagsServiceNameKNexus captures enum value "kNexus"
	ServiceGflagsServiceNameKNexus string = "kNexus"

	// ServiceGflagsServiceNameKNexusProxy captures enum value "kNexusProxy"
	ServiceGflagsServiceNameKNexusProxy string = "kNexusProxy"

	// ServiceGflagsServiceNameKStorageProxy captures enum value "kStorageProxy"
	ServiceGflagsServiceNameKStorageProxy string = "kStorageProxy"

	// ServiceGflagsServiceNameKRtClient captures enum value "kRtClient"
	ServiceGflagsServiceNameKRtClient string = "kRtClient"

	// ServiceGflagsServiceNameKVaultProxy captures enum value "kVaultProxy"
	ServiceGflagsServiceNameKVaultProxy string = "kVaultProxy"

	// ServiceGflagsServiceNameKSmbProxy captures enum value "kSmbProxy"
	ServiceGflagsServiceNameKSmbProxy string = "kSmbProxy"

	// ServiceGflagsServiceNameKBridgeProxy captures enum value "kBridgeProxy"
	ServiceGflagsServiceNameKBridgeProxy string = "kBridgeProxy"

	// ServiceGflagsServiceNameKLibrarian captures enum value "kLibrarian"
	ServiceGflagsServiceNameKLibrarian string = "kLibrarian"

	// ServiceGflagsServiceNameKGroot captures enum value "kGroot"
	ServiceGflagsServiceNameKGroot string = "kGroot"

	// ServiceGflagsServiceNameKEagleAgent captures enum value "kEagleAgent"
	ServiceGflagsServiceNameKEagleAgent string = "kEagleAgent"

	// ServiceGflagsServiceNameKAthena captures enum value "kAthena"
	ServiceGflagsServiceNameKAthena string = "kAthena"

	// ServiceGflagsServiceNameKBifrostBroker captures enum value "kBifrostBroker"
	ServiceGflagsServiceNameKBifrostBroker string = "kBifrostBroker"

	// ServiceGflagsServiceNameKAtom captures enum value "kAtom"
	ServiceGflagsServiceNameKAtom string = "kAtom"

	// ServiceGflagsServiceNameKYodaAgent captures enum value "kYodaAgent"
	ServiceGflagsServiceNameKYodaAgent string = "kYodaAgent"

	// ServiceGflagsServiceNameKSmb2Proxy captures enum value "kSmb2Proxy"
	ServiceGflagsServiceNameKSmb2Proxy string = "kSmb2Proxy"

	// ServiceGflagsServiceNameKThrottler captures enum value "kThrottler"
	ServiceGflagsServiceNameKThrottler string = "kThrottler"

	// ServiceGflagsServiceNameKElrond captures enum value "kElrond"
	ServiceGflagsServiceNameKElrond string = "kElrond"

	// ServiceGflagsServiceNameKHeimdall captures enum value "kHeimdall"
	ServiceGflagsServiceNameKHeimdall string = "kHeimdall"

	// ServiceGflagsServiceNameKBifrost captures enum value "kBifrost"
	ServiceGflagsServiceNameKBifrost string = "kBifrost"

	// ServiceGflagsServiceNameKIcebox captures enum value "kIcebox"
	ServiceGflagsServiceNameKIcebox string = "kIcebox"

	// ServiceGflagsServiceNameKNodeExporter captures enum value "kNodeExporter"
	ServiceGflagsServiceNameKNodeExporter string = "kNodeExporter"

	// ServiceGflagsServiceNameKCompass captures enum value "kCompass"
	ServiceGflagsServiceNameKCompass string = "kCompass"

	// ServiceGflagsServiceNameKPatch captures enum value "kPatch"
	ServiceGflagsServiceNameKPatch string = "kPatch"

	// ServiceGflagsServiceNameKEtlServer captures enum value "kEtlServer"
	ServiceGflagsServiceNameKEtlServer string = "kEtlServer"

	// ServiceGflagsServiceNameKUpgrader captures enum value "kUpgrader"
	ServiceGflagsServiceNameKUpgrader string = "kUpgrader"

	// ServiceGflagsServiceNameKOs captures enum value "kOs"
	ServiceGflagsServiceNameKOs string = "kOs"

	// ServiceGflagsServiceNameKPushproxClient captures enum value "kPushproxClient"
	ServiceGflagsServiceNameKPushproxClient string = "kPushproxClient"

	// ServiceGflagsServiceNameKPushClient captures enum value "kPushClient"
	ServiceGflagsServiceNameKPushClient string = "kPushClient"

	// ServiceGflagsServiceNameKAegis captures enum value "kAegis"
	ServiceGflagsServiceNameKAegis string = "kAegis"

	// ServiceGflagsServiceNameKNfsProxy captures enum value "kNfsProxy"
	ServiceGflagsServiceNameKNfsProxy string = "kNfsProxy"

	// ServiceGflagsServiceNameKElixirWorkerservice captures enum value "kElixirWorkerservice"
	ServiceGflagsServiceNameKElixirWorkerservice string = "kElixirWorkerservice"

	// ServiceGflagsServiceNameKArgusApp captures enum value "kArgusApp"
	ServiceGflagsServiceNameKArgusApp string = "kArgusApp"

	// ServiceGflagsServiceNameKMetadataservice captures enum value "kMetadataservice"
	ServiceGflagsServiceNameKMetadataservice string = "kMetadataservice"

	// ServiceGflagsServiceNameKSpireServer captures enum value "kSpireServer"
	ServiceGflagsServiceNameKSpireServer string = "kSpireServer"

	// ServiceGflagsServiceNameKSpireAgent captures enum value "kSpireAgent"
	ServiceGflagsServiceNameKSpireAgent string = "kSpireAgent"

	// ServiceGflagsServiceNameKLicensing captures enum value "kLicensing"
	ServiceGflagsServiceNameKLicensing string = "kLicensing"

	// ServiceGflagsServiceNameKShelteredHarborApp captures enum value "kShelteredHarborApp"
	ServiceGflagsServiceNameKShelteredHarborApp string = "kShelteredHarborApp"

	// ServiceGflagsServiceNameKShelteredHarborUda captures enum value "kShelteredHarborUda"
	ServiceGflagsServiceNameKShelteredHarborUda string = "kShelteredHarborUda"

	// ServiceGflagsServiceNameKCohesityCa captures enum value "kCohesityCa"
	ServiceGflagsServiceNameKCohesityCa string = "kCohesityCa"

	// ServiceGflagsServiceNameKInfraoperator captures enum value "kInfraoperator"
	ServiceGflagsServiceNameKInfraoperator string = "kInfraoperator"

	// ServiceGflagsServiceNameKMarketplaceoperator captures enum value "kMarketplaceoperator"
	ServiceGflagsServiceNameKMarketplaceoperator string = "kMarketplaceoperator"

	// ServiceGflagsServiceNameKCohesion captures enum value "kCohesion"
	ServiceGflagsServiceNameKCohesion string = "kCohesion"

	// ServiceGflagsServiceNameKSpireApp captures enum value "kSpireApp"
	ServiceGflagsServiceNameKSpireApp string = "kSpireApp"

	// ServiceGflagsServiceNameKGaia captures enum value "kGaia"
	ServiceGflagsServiceNameKGaia string = "kGaia"

	// ServiceGflagsServiceNameKStargate captures enum value "kStargate"
	ServiceGflagsServiceNameKStargate string = "kStargate"

	// ServiceGflagsServiceNameKAdaptx captures enum value "kAdaptx"
	ServiceGflagsServiceNameKAdaptx string = "kAdaptx"

	// ServiceGflagsServiceNameKNosql captures enum value "kNosql"
	ServiceGflagsServiceNameKNosql string = "kNosql"
)

// prop value enum
func (m *ServiceGflags) validateServiceNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceGflagsTypeServiceNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceGflags) validateServiceName(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceName) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceNameEnum("serviceName", "body", *m.ServiceName); err != nil {
		return err
	}

	return nil
}

func (m *ServiceGflags) validateGflags(formats strfmt.Registry) error {
	if swag.IsZero(m.Gflags) { // not required
		return nil
	}

	for i := 0; i < len(m.Gflags); i++ {
		if swag.IsZero(m.Gflags[i]) { // not required
			continue
		}

		if m.Gflags[i] != nil {
			if err := m.Gflags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gflags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gflags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service gflags based on the context it is used
func (m *ServiceGflags) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGflags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceGflags) contextValidateGflags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Gflags); i++ {

		if m.Gflags[i] != nil {

			if swag.IsZero(m.Gflags[i]) { // not required
				return nil
			}

			if err := m.Gflags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gflags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gflags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceGflags) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceGflags) UnmarshalBinary(b []byte) error {
	var res ServiceGflags
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
