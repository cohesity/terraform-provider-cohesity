// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IBMAuthenticationMethodsParams IBM COS external targets authentication method's Params.
//
// Specifies the authentication method for IBM COS External Targets.
//
// swagger:model IBMAuthenticationMethodsParams
type IBMAuthenticationMethodsParams struct {

	// Specifies the IBM COS external target authentication type. Specific authetication parameters will be used accordingly.
	// Required: true
	// Enum: ["kAPIKey","kTrustedProfile","kTrustedProfileWithS2SPolicy"]
	AuthenticationType *string `json:"authenticationType"`

	// api key params
	APIKeyParams *APIKeyParams `json:"apiKeyParams,omitempty"`

	// trusted profile params
	TrustedProfileParams *TrustedProfileParams `json:"trustedProfileParams,omitempty"`

	// trusted profile with s2 s policy params
	TrustedProfileWithS2SPolicyParams *TrustedProfileWithS2SPolicyParams `json:"trustedProfileWithS2SPolicyParams,omitempty"`
}

// Validate validates this i b m authentication methods params
func (m *IBMAuthenticationMethodsParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIKeyParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustedProfileParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustedProfileWithS2SPolicyParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var iBMAuthenticationMethodsParamsTypeAuthenticationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAPIKey","kTrustedProfile","kTrustedProfileWithS2SPolicy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iBMAuthenticationMethodsParamsTypeAuthenticationTypePropEnum = append(iBMAuthenticationMethodsParamsTypeAuthenticationTypePropEnum, v)
	}
}

const (

	// IBMAuthenticationMethodsParamsAuthenticationTypeKAPIKey captures enum value "kAPIKey"
	IBMAuthenticationMethodsParamsAuthenticationTypeKAPIKey string = "kAPIKey"

	// IBMAuthenticationMethodsParamsAuthenticationTypeKTrustedProfile captures enum value "kTrustedProfile"
	IBMAuthenticationMethodsParamsAuthenticationTypeKTrustedProfile string = "kTrustedProfile"

	// IBMAuthenticationMethodsParamsAuthenticationTypeKTrustedProfileWithS2SPolicy captures enum value "kTrustedProfileWithS2SPolicy"
	IBMAuthenticationMethodsParamsAuthenticationTypeKTrustedProfileWithS2SPolicy string = "kTrustedProfileWithS2SPolicy"
)

// prop value enum
func (m *IBMAuthenticationMethodsParams) validateAuthenticationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, iBMAuthenticationMethodsParamsTypeAuthenticationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IBMAuthenticationMethodsParams) validateAuthenticationType(formats strfmt.Registry) error {

	if err := validate.Required("authenticationType", "body", m.AuthenticationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthenticationTypeEnum("authenticationType", "body", *m.AuthenticationType); err != nil {
		return err
	}

	return nil
}

func (m *IBMAuthenticationMethodsParams) validateAPIKeyParams(formats strfmt.Registry) error {
	if swag.IsZero(m.APIKeyParams) { // not required
		return nil
	}

	if m.APIKeyParams != nil {
		if err := m.APIKeyParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiKeyParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiKeyParams")
			}
			return err
		}
	}

	return nil
}

func (m *IBMAuthenticationMethodsParams) validateTrustedProfileParams(formats strfmt.Registry) error {
	if swag.IsZero(m.TrustedProfileParams) { // not required
		return nil
	}

	if m.TrustedProfileParams != nil {
		if err := m.TrustedProfileParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trustedProfileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trustedProfileParams")
			}
			return err
		}
	}

	return nil
}

func (m *IBMAuthenticationMethodsParams) validateTrustedProfileWithS2SPolicyParams(formats strfmt.Registry) error {
	if swag.IsZero(m.TrustedProfileWithS2SPolicyParams) { // not required
		return nil
	}

	if m.TrustedProfileWithS2SPolicyParams != nil {
		if err := m.TrustedProfileWithS2SPolicyParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trustedProfileWithS2SPolicyParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trustedProfileWithS2SPolicyParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this i b m authentication methods params based on the context it is used
func (m *IBMAuthenticationMethodsParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIKeyParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrustedProfileParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrustedProfileWithS2SPolicyParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IBMAuthenticationMethodsParams) contextValidateAPIKeyParams(ctx context.Context, formats strfmt.Registry) error {

	if m.APIKeyParams != nil {

		if swag.IsZero(m.APIKeyParams) { // not required
			return nil
		}

		if err := m.APIKeyParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiKeyParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiKeyParams")
			}
			return err
		}
	}

	return nil
}

func (m *IBMAuthenticationMethodsParams) contextValidateTrustedProfileParams(ctx context.Context, formats strfmt.Registry) error {

	if m.TrustedProfileParams != nil {

		if swag.IsZero(m.TrustedProfileParams) { // not required
			return nil
		}

		if err := m.TrustedProfileParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trustedProfileParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trustedProfileParams")
			}
			return err
		}
	}

	return nil
}

func (m *IBMAuthenticationMethodsParams) contextValidateTrustedProfileWithS2SPolicyParams(ctx context.Context, formats strfmt.Registry) error {

	if m.TrustedProfileWithS2SPolicyParams != nil {

		if swag.IsZero(m.TrustedProfileWithS2SPolicyParams) { // not required
			return nil
		}

		if err := m.TrustedProfileWithS2SPolicyParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trustedProfileWithS2SPolicyParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trustedProfileWithS2SPolicyParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IBMAuthenticationMethodsParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IBMAuthenticationMethodsParams) UnmarshalBinary(b []byte) error {
	var res IBMAuthenticationMethodsParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
