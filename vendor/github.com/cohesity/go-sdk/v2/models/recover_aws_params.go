// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverAwsParams Recover AWS environment params.
//
// Specifies the recovery options specific to AWS environment.
//
// swagger:model RecoverAwsParams
type RecoverAwsParams struct {

	// Specifies the list of recover Object parameters. This property is mandatory for all recovery action types except recover vms. While recovering VMs, a user can specify snapshots of VM's or a Protection Group Run details to recover all the VM's that are backed up by that Run. For recovering files, specifies the object contains the file to recover.
	Objects []*CommonRecoverObjectSnapshotParams `json:"objects"`

	// Specifies the type of recover action to be performed.
	// Required: true
	// Enum: ["RecoverVMs","RecoverRDS","RecoverAurora","RecoverFiles","RecoverS3Buckets","RecoverRDSPostgres"]
	RecoveryAction *string `json:"recoveryAction"`

	// Specifies the parameters to download files and folders.
	DownloadFileAndFolderParams *CommonDownloadFileAndFolderParams `json:"downloadFileAndFolderParams,omitempty"`

	// Specifies the parameters to recover AWS Aurora.
	RecoverAuroraParams *RecoverAwsAuroraParams `json:"recoverAuroraParams,omitempty"`

	// Specifies the parameters to recover files and folders.
	RecoverFileAndFolderParams *RecoverAwsFileAndFolderParams `json:"recoverFileAndFolderParams,omitempty"`

	// Specifies the parameters to recover AWS RDS Ingest.
	RecoverRdsIngestParams *RecoverRDSPostgresParams `json:"recoverRdsIngestParams,omitempty"`

	// Specifies the parameters to recover AWS RDS.
	RecoverRdsParams *RecoverAwsRdsParams `json:"recoverRdsParams,omitempty"`

	// Specifies the parameters to recover AWS S3 Buckets.
	RecoverS3BucketParams *RecoverAwsS3BucketParams `json:"recoverS3BucketParams,omitempty"`

	// Specifies the parameters to recover AWS VM.
	RecoverVMParams *RecoverAwsVMParams `json:"recoverVmParams,omitempty"`
}

// Validate validates this recover aws params
func (m *RecoverAwsParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadFileAndFolderParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverAuroraParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverFileAndFolderParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverRdsIngestParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverRdsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverS3BucketParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoverVMParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverAwsParams) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var recoverAwsParamsTypeRecoveryActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RecoverVMs","RecoverRDS","RecoverAurora","RecoverFiles","RecoverS3Buckets","RecoverRDSPostgres"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoverAwsParamsTypeRecoveryActionPropEnum = append(recoverAwsParamsTypeRecoveryActionPropEnum, v)
	}
}

const (

	// RecoverAwsParamsRecoveryActionRecoverVMs captures enum value "RecoverVMs"
	RecoverAwsParamsRecoveryActionRecoverVMs string = "RecoverVMs"

	// RecoverAwsParamsRecoveryActionRecoverRDS captures enum value "RecoverRDS"
	RecoverAwsParamsRecoveryActionRecoverRDS string = "RecoverRDS"

	// RecoverAwsParamsRecoveryActionRecoverAurora captures enum value "RecoverAurora"
	RecoverAwsParamsRecoveryActionRecoverAurora string = "RecoverAurora"

	// RecoverAwsParamsRecoveryActionRecoverFiles captures enum value "RecoverFiles"
	RecoverAwsParamsRecoveryActionRecoverFiles string = "RecoverFiles"

	// RecoverAwsParamsRecoveryActionRecoverS3Buckets captures enum value "RecoverS3Buckets"
	RecoverAwsParamsRecoveryActionRecoverS3Buckets string = "RecoverS3Buckets"

	// RecoverAwsParamsRecoveryActionRecoverRDSPostgres captures enum value "RecoverRDSPostgres"
	RecoverAwsParamsRecoveryActionRecoverRDSPostgres string = "RecoverRDSPostgres"
)

// prop value enum
func (m *RecoverAwsParams) validateRecoveryActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoverAwsParamsTypeRecoveryActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoverAwsParams) validateRecoveryAction(formats strfmt.Registry) error {

	if err := validate.Required("recoveryAction", "body", m.RecoveryAction); err != nil {
		return err
	}

	// value enum
	if err := m.validateRecoveryActionEnum("recoveryAction", "body", *m.RecoveryAction); err != nil {
		return err
	}

	return nil
}

func (m *RecoverAwsParams) validateDownloadFileAndFolderParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DownloadFileAndFolderParams) { // not required
		return nil
	}

	if m.DownloadFileAndFolderParams != nil {
		if err := m.DownloadFileAndFolderParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadFileAndFolderParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadFileAndFolderParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) validateRecoverAuroraParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverAuroraParams) { // not required
		return nil
	}

	if m.RecoverAuroraParams != nil {
		if err := m.RecoverAuroraParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverAuroraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverAuroraParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) validateRecoverFileAndFolderParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverFileAndFolderParams) { // not required
		return nil
	}

	if m.RecoverFileAndFolderParams != nil {
		if err := m.RecoverFileAndFolderParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverFileAndFolderParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverFileAndFolderParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) validateRecoverRdsIngestParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverRdsIngestParams) { // not required
		return nil
	}

	if m.RecoverRdsIngestParams != nil {
		if err := m.RecoverRdsIngestParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverRdsIngestParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverRdsIngestParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) validateRecoverRdsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverRdsParams) { // not required
		return nil
	}

	if m.RecoverRdsParams != nil {
		if err := m.RecoverRdsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverRdsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverRdsParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) validateRecoverS3BucketParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverS3BucketParams) { // not required
		return nil
	}

	if m.RecoverS3BucketParams != nil {
		if err := m.RecoverS3BucketParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverS3BucketParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverS3BucketParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) validateRecoverVMParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoverVMParams) { // not required
		return nil
	}

	if m.RecoverVMParams != nil {
		if err := m.RecoverVMParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVmParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover aws params based on the context it is used
func (m *RecoverAwsParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDownloadFileAndFolderParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverAuroraParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverFileAndFolderParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverRdsIngestParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverRdsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverS3BucketParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoverVMParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverAwsParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecoverAwsParams) contextValidateDownloadFileAndFolderParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DownloadFileAndFolderParams != nil {

		if swag.IsZero(m.DownloadFileAndFolderParams) { // not required
			return nil
		}

		if err := m.DownloadFileAndFolderParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downloadFileAndFolderParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("downloadFileAndFolderParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) contextValidateRecoverAuroraParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverAuroraParams != nil {

		if swag.IsZero(m.RecoverAuroraParams) { // not required
			return nil
		}

		if err := m.RecoverAuroraParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverAuroraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverAuroraParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) contextValidateRecoverFileAndFolderParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverFileAndFolderParams != nil {

		if swag.IsZero(m.RecoverFileAndFolderParams) { // not required
			return nil
		}

		if err := m.RecoverFileAndFolderParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverFileAndFolderParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverFileAndFolderParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) contextValidateRecoverRdsIngestParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverRdsIngestParams != nil {

		if swag.IsZero(m.RecoverRdsIngestParams) { // not required
			return nil
		}

		if err := m.RecoverRdsIngestParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverRdsIngestParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverRdsIngestParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) contextValidateRecoverRdsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverRdsParams != nil {

		if swag.IsZero(m.RecoverRdsParams) { // not required
			return nil
		}

		if err := m.RecoverRdsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverRdsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverRdsParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) contextValidateRecoverS3BucketParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverS3BucketParams != nil {

		if swag.IsZero(m.RecoverS3BucketParams) { // not required
			return nil
		}

		if err := m.RecoverS3BucketParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverS3BucketParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverS3BucketParams")
			}
			return err
		}
	}

	return nil
}

func (m *RecoverAwsParams) contextValidateRecoverVMParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoverVMParams != nil {

		if swag.IsZero(m.RecoverVMParams) { // not required
			return nil
		}

		if err := m.RecoverVMParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recoverVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recoverVmParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverAwsParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverAwsParams) UnmarshalBinary(b []byte) error {
	var res RecoverAwsParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
