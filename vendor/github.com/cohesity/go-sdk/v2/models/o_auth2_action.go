// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OAuth2Action OAuth 2 Action
//
// swagger:model OAuth2Action
type OAuth2Action struct {

	// Specifies an action to perform on an OAuth 2 Identity Provider. The following actions are currently supported: 1. 'RefreshPublicKeys': Refreshes the public keys currently stored on the cluster for the user sending the request. In order to do this, the public key URL specified in the current users OAuth configuration will be polled for a new public key.
	// Required: true
	// Enum: ["RefreshPublicKeys"]
	Action *string `json:"action"`
}

// Validate validates this o auth2 action
func (m *OAuth2Action) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oAuth2ActionTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RefreshPublicKeys"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oAuth2ActionTypeActionPropEnum = append(oAuth2ActionTypeActionPropEnum, v)
	}
}

const (

	// OAuth2ActionActionRefreshPublicKeys captures enum value "RefreshPublicKeys"
	OAuth2ActionActionRefreshPublicKeys string = "RefreshPublicKeys"
)

// prop value enum
func (m *OAuth2Action) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oAuth2ActionTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OAuth2Action) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o auth2 action based on context it is used
func (m *OAuth2Action) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OAuth2Action) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OAuth2Action) UnmarshalBinary(b []byte) error {
	var res OAuth2Action
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
