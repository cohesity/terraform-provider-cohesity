// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceInstallLog Install Logs for a Service.
//
// swagger:model ServiceInstallLog
type ServiceInstallLog struct {

	// The name of the service.
	ServiceName string `json:"serviceName,omitempty"`

	// "The install status of services"
	// "(e.g., Success, InProgress, Failed, Pending)."
	//
	// Enum: ["Success","Failed","InProgress","Pending"]
	ServiceInstallStatus string `json:"serviceInstallStatus,omitempty"`

	// Install message.
	Message string `json:"message,omitempty"`
}

// Validate validates this service install log
func (m *ServiceInstallLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceInstallStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceInstallLogTypeServiceInstallStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Failed","InProgress","Pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceInstallLogTypeServiceInstallStatusPropEnum = append(serviceInstallLogTypeServiceInstallStatusPropEnum, v)
	}
}

const (

	// ServiceInstallLogServiceInstallStatusSuccess captures enum value "Success"
	ServiceInstallLogServiceInstallStatusSuccess string = "Success"

	// ServiceInstallLogServiceInstallStatusFailed captures enum value "Failed"
	ServiceInstallLogServiceInstallStatusFailed string = "Failed"

	// ServiceInstallLogServiceInstallStatusInProgress captures enum value "InProgress"
	ServiceInstallLogServiceInstallStatusInProgress string = "InProgress"

	// ServiceInstallLogServiceInstallStatusPending captures enum value "Pending"
	ServiceInstallLogServiceInstallStatusPending string = "Pending"
)

// prop value enum
func (m *ServiceInstallLog) validateServiceInstallStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceInstallLogTypeServiceInstallStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceInstallLog) validateServiceInstallStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceInstallStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceInstallStatusEnum("serviceInstallStatus", "body", m.ServiceInstallStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service install log based on context it is used
func (m *ServiceInstallLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceInstallLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceInstallLog) UnmarshalBinary(b []byte) error {
	var res ServiceInstallLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
