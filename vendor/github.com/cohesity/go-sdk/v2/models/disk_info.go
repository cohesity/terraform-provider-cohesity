// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiskInfo Disk Information
//
// Specifies information about a disk.
//
// swagger:model DiskInfo
type DiskInfo struct {

	// Specifies the disk controller type.
	// Enum: ["kScsi","kIde","kSata"]
	ControllerType *string `json:"controllerType,omitempty"`

	// Specifies the disk file name. This is the VMDK name and not the flat file name.
	// Required: true
	UnitNumber *int64 `json:"unitNumber"`

	// Specifies the Id of the controller bus that controls the disk.
	// Required: true
	BusNumber *int64 `json:"busNumber"`
}

// Validate validates this disk info
func (m *DiskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var diskInfoTypeControllerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kScsi","kIde","kSata"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskInfoTypeControllerTypePropEnum = append(diskInfoTypeControllerTypePropEnum, v)
	}
}

const (

	// DiskInfoControllerTypeKScsi captures enum value "kScsi"
	DiskInfoControllerTypeKScsi string = "kScsi"

	// DiskInfoControllerTypeKIde captures enum value "kIde"
	DiskInfoControllerTypeKIde string = "kIde"

	// DiskInfoControllerTypeKSata captures enum value "kSata"
	DiskInfoControllerTypeKSata string = "kSata"
)

// prop value enum
func (m *DiskInfo) validateControllerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, diskInfoTypeControllerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DiskInfo) validateControllerType(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerType) { // not required
		return nil
	}

	// value enum
	if err := m.validateControllerTypeEnum("controllerType", "body", *m.ControllerType); err != nil {
		return err
	}

	return nil
}

func (m *DiskInfo) validateUnitNumber(formats strfmt.Registry) error {

	if err := validate.Required("unitNumber", "body", m.UnitNumber); err != nil {
		return err
	}

	return nil
}

func (m *DiskInfo) validateBusNumber(formats strfmt.Registry) error {

	if err := validate.Required("busNumber", "body", m.BusNumber); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this disk info based on context it is used
func (m *DiskInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DiskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskInfo) UnmarshalBinary(b []byte) error {
	var res DiskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
