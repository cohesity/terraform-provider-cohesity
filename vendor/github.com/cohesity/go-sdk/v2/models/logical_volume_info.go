// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogicalVolumeInfo Specifies the logical volume info for LVM or LDM volume.
//
// swagger:model LogicalVolumeInfo
type LogicalVolumeInfo struct {

	// Specifies the volume group uuid.
	VolumeGroupUUID *string `json:"volumeGroupUuid,omitempty"`

	// Specifies the volume group name.
	VolumeGroupName *string `json:"volumeGroupName,omitempty"`

	// Specifies the logical volume uuid.
	LogicalVolumeUUID *string `json:"logicalVolumeUuid,omitempty"`

	// Specifies the logical volume name.
	LogicalVolumeName *string `json:"logicalVolumeName,omitempty"`

	// Specifies the tree structure of the logical volume.
	DeviceTree *DeviceTreeNode `json:"deviceTree,omitempty"`
}

// Validate validates this logical volume info
func (m *LogicalVolumeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceTree(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogicalVolumeInfo) validateDeviceTree(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceTree) { // not required
		return nil
	}

	if m.DeviceTree != nil {
		if err := m.DeviceTree.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceTree")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceTree")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this logical volume info based on the context it is used
func (m *LogicalVolumeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceTree(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogicalVolumeInfo) contextValidateDeviceTree(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceTree != nil {

		if swag.IsZero(m.DeviceTree) { // not required
			return nil
		}

		if err := m.DeviceTree.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceTree")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceTree")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogicalVolumeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogicalVolumeInfo) UnmarshalBinary(b []byte) error {
	var res LogicalVolumeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
