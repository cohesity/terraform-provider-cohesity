// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureEntraIDObjectProtectionParams Azure Entra ID Object Protection Request Params.
//
// Specifies the parameters which are specific to Azure Entra ID Object Protection Groups using Azure native APIs. Atlease one of objects must be specified.
//
// swagger:model AzureEntraIDObjectProtectionParams
type AzureEntraIDObjectProtectionParams struct {

	// Specifies the objects to be protected.
	Objects []*AzureObjectLevelParams `json:"objects"`

	// Specifies the list of object types to be excluded from protection.
	// Unique: true
	ExcludedObjectTypes []string `json:"excludedObjectTypes"`
}

// Validate validates this azure entra ID object protection params
func (m *AzureEntraIDObjectProtectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludedObjectTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureEntraIDObjectProtectionParams) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Objects) { // not required
		return nil
	}

	for i := 0; i < len(m.Objects); i++ {
		if swag.IsZero(m.Objects[i]) { // not required
			continue
		}

		if m.Objects[i] != nil {
			if err := m.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var azureEntraIdObjectProtectionParamsExcludedObjectTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","AdminUnit","Application","Contact","Device","DirRole","Group","ServicePrincipal","AppRoleAssignment","User"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureEntraIdObjectProtectionParamsExcludedObjectTypesItemsEnum = append(azureEntraIdObjectProtectionParamsExcludedObjectTypesItemsEnum, v)
	}
}

func (m *AzureEntraIDObjectProtectionParams) validateExcludedObjectTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureEntraIdObjectProtectionParamsExcludedObjectTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureEntraIDObjectProtectionParams) validateExcludedObjectTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludedObjectTypes) { // not required
		return nil
	}

	if err := validate.UniqueItems("excludedObjectTypes", "body", m.ExcludedObjectTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.ExcludedObjectTypes); i++ {

		// value enum
		if err := m.validateExcludedObjectTypesItemsEnum("excludedObjectTypes"+"."+strconv.Itoa(i), "body", m.ExcludedObjectTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this azure entra ID object protection params based on the context it is used
func (m *AzureEntraIDObjectProtectionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureEntraIDObjectProtectionParams) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Objects); i++ {

		if m.Objects[i] != nil {

			if swag.IsZero(m.Objects[i]) { // not required
				return nil
			}

			if err := m.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureEntraIDObjectProtectionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureEntraIDObjectProtectionParams) UnmarshalBinary(b []byte) error {
	var res AzureEntraIDObjectProtectionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
