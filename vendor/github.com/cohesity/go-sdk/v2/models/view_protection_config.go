// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewProtectionConfig Specifies the View protection config.
//
// swagger:model ViewProtectionConfig
type ViewProtectionConfig struct {

	// Specifies the View protection group type.
	// Required: true
	// Enum: ["ExistingGroup","NewGroup"]
	ProtectionGroupType *string `json:"protectionGroupType"`

	// Specifies the parameters used for existing protection group.
	ExistingGroupParam *ExistingGroupParam `json:"existingGroupParam,omitempty"`

	// Specifies the parameters used for new protection group.
	NewGroupParam *NewGroupParam `json:"newGroupParam,omitempty"`
}

// Validate validates this view protection config
func (m *ViewProtectionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionGroupType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingGroupParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewGroupParam(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var viewProtectionConfigTypeProtectionGroupTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ExistingGroup","NewGroup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewProtectionConfigTypeProtectionGroupTypePropEnum = append(viewProtectionConfigTypeProtectionGroupTypePropEnum, v)
	}
}

const (

	// ViewProtectionConfigProtectionGroupTypeExistingGroup captures enum value "ExistingGroup"
	ViewProtectionConfigProtectionGroupTypeExistingGroup string = "ExistingGroup"

	// ViewProtectionConfigProtectionGroupTypeNewGroup captures enum value "NewGroup"
	ViewProtectionConfigProtectionGroupTypeNewGroup string = "NewGroup"
)

// prop value enum
func (m *ViewProtectionConfig) validateProtectionGroupTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewProtectionConfigTypeProtectionGroupTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewProtectionConfig) validateProtectionGroupType(formats strfmt.Registry) error {

	if err := validate.Required("protectionGroupType", "body", m.ProtectionGroupType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtectionGroupTypeEnum("protectionGroupType", "body", *m.ProtectionGroupType); err != nil {
		return err
	}

	return nil
}

func (m *ViewProtectionConfig) validateExistingGroupParam(formats strfmt.Registry) error {
	if swag.IsZero(m.ExistingGroupParam) { // not required
		return nil
	}

	if m.ExistingGroupParam != nil {
		if err := m.ExistingGroupParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("existingGroupParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("existingGroupParam")
			}
			return err
		}
	}

	return nil
}

func (m *ViewProtectionConfig) validateNewGroupParam(formats strfmt.Registry) error {
	if swag.IsZero(m.NewGroupParam) { // not required
		return nil
	}

	if m.NewGroupParam != nil {
		if err := m.NewGroupParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newGroupParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newGroupParam")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this view protection config based on the context it is used
func (m *ViewProtectionConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExistingGroupParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewGroupParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewProtectionConfig) contextValidateExistingGroupParam(ctx context.Context, formats strfmt.Registry) error {

	if m.ExistingGroupParam != nil {

		if swag.IsZero(m.ExistingGroupParam) { // not required
			return nil
		}

		if err := m.ExistingGroupParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("existingGroupParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("existingGroupParam")
			}
			return err
		}
	}

	return nil
}

func (m *ViewProtectionConfig) contextValidateNewGroupParam(ctx context.Context, formats strfmt.Registry) error {

	if m.NewGroupParam != nil {

		if swag.IsZero(m.NewGroupParam) { // not required
			return nil
		}

		if err := m.NewGroupParam.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newGroupParam")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newGroupParam")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewProtectionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewProtectionConfig) UnmarshalBinary(b []byte) error {
	var res ViewProtectionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
