// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AwsEntityChildMetadata Specifies the entity metadata of child entities of current aws entity.
//
// swagger:model AwsEntityChildMetadata
type AwsEntityChildMetadata struct {

	// Specifies the child metadata of postgres entities.
	RdsMetadata *AwsRdsEntityMetadata `json:"rdsMetadata,omitempty"`

	// Specifies the child metadata of postgres entities.
	AuroraMetadata *AwsAuroraEntityMetadata `json:"auroraMetadata,omitempty"`
}

// Validate validates this aws entity child metadata
func (m *AwsEntityChildMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRdsMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuroraMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsEntityChildMetadata) validateRdsMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.RdsMetadata) { // not required
		return nil
	}

	if m.RdsMetadata != nil {
		if err := m.RdsMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *AwsEntityChildMetadata) validateAuroraMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.AuroraMetadata) { // not required
		return nil
	}

	if m.AuroraMetadata != nil {
		if err := m.AuroraMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraMetadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws entity child metadata based on the context it is used
func (m *AwsEntityChildMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRdsMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuroraMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsEntityChildMetadata) contextValidateRdsMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.RdsMetadata != nil {

		if swag.IsZero(m.RdsMetadata) { // not required
			return nil
		}

		if err := m.RdsMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *AwsEntityChildMetadata) contextValidateAuroraMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.AuroraMetadata != nil {

		if swag.IsZero(m.AuroraMetadata) { // not required
			return nil
		}

		if err := m.AuroraMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsEntityChildMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsEntityChildMetadata) UnmarshalBinary(b []byte) error {
	var res AwsEntityChildMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
