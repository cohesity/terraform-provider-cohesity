// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtectionGroupAlertingPolicy Specifies a policy for alerting users of the status of a Protection Group.
//
// swagger:model ProtectionGroupAlertingPolicy
type ProtectionGroupAlertingPolicy struct {

	// Specifies the run status for which the user would like to receive alerts.
	// Required: true
	// Min Items: 1
	// Unique: true
	BackupRunStatus []string `json:"backupRunStatus"`

	// Specifies a list of targets to receive the alerts.
	AlertTargets []*AlertTarget `json:"alertTargets"`

	// Specifies whether object level alerts are raised for backup failures after the backup run.
	RaiseObjectLevelFailureAlert bool `json:"raiseObjectLevelFailureAlert,omitempty"`

	// Specifies whether object level alerts are raised for backup failures after last backup attempt.
	RaiseObjectLevelFailureAlertAfterLastAttempt bool `json:"raiseObjectLevelFailureAlertAfterLastAttempt,omitempty"`

	// Specifies whether object level alerts are raised for backup failures after each backup attempt.
	RaiseObjectLevelFailureAlertAfterEachAttempt bool `json:"raiseObjectLevelFailureAlertAfterEachAttempt,omitempty"`
}

// Validate validates this protection group alerting policy
func (m *ProtectionGroupAlertingPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupRunStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var protectionGroupAlertingPolicyBackupRunStatusItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSuccess","kFailure","kSlaViolation","kWarning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protectionGroupAlertingPolicyBackupRunStatusItemsEnum = append(protectionGroupAlertingPolicyBackupRunStatusItemsEnum, v)
	}
}

func (m *ProtectionGroupAlertingPolicy) validateBackupRunStatusItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, protectionGroupAlertingPolicyBackupRunStatusItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProtectionGroupAlertingPolicy) validateBackupRunStatus(formats strfmt.Registry) error {

	if err := validate.Required("backupRunStatus", "body", m.BackupRunStatus); err != nil {
		return err
	}

	iBackupRunStatusSize := int64(len(m.BackupRunStatus))

	if err := validate.MinItems("backupRunStatus", "body", iBackupRunStatusSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("backupRunStatus", "body", m.BackupRunStatus); err != nil {
		return err
	}

	for i := 0; i < len(m.BackupRunStatus); i++ {

		// value enum
		if err := m.validateBackupRunStatusItemsEnum("backupRunStatus"+"."+strconv.Itoa(i), "body", m.BackupRunStatus[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ProtectionGroupAlertingPolicy) validateAlertTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.AlertTargets); i++ {
		if swag.IsZero(m.AlertTargets[i]) { // not required
			continue
		}

		if m.AlertTargets[i] != nil {
			if err := m.AlertTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alertTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alertTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this protection group alerting policy based on the context it is used
func (m *ProtectionGroupAlertingPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionGroupAlertingPolicy) contextValidateAlertTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AlertTargets); i++ {

		if m.AlertTargets[i] != nil {

			if swag.IsZero(m.AlertTargets[i]) { // not required
				return nil
			}

			if err := m.AlertTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alertTargets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alertTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionGroupAlertingPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionGroupAlertingPolicy) UnmarshalBinary(b []byte) error {
	var res ProtectionGroupAlertingPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
