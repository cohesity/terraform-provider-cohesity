// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhysicalMountVolumesNewTargetConfig HyperV Mount Volumes New Target Config.
//
// Specifies the configuration for mounting volumes to a new target.
//
// swagger:model PhysicalMountVolumesNewTargetConfig
type PhysicalMountVolumesNewTargetConfig struct {

	// Specifies the target entity where the volumes are being mounted.
	// Required: true
	MountTarget *RecoverTarget `json:"mountTarget"`

	// Specifies credentials to access the target server. This is required if the server is of Linux OS.
	ServerCredentials *Credentials `json:"serverCredentials,omitempty"`
}

// Validate validates this physical mount volumes new target config
func (m *PhysicalMountVolumesNewTargetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalMountVolumesNewTargetConfig) validateMountTarget(formats strfmt.Registry) error {

	if err := validate.Required("mountTarget", "body", m.MountTarget); err != nil {
		return err
	}

	if m.MountTarget != nil {
		if err := m.MountTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountTarget")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalMountVolumesNewTargetConfig) validateServerCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerCredentials) { // not required
		return nil
	}

	if m.ServerCredentials != nil {
		if err := m.ServerCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serverCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serverCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this physical mount volumes new target config based on the context it is used
func (m *PhysicalMountVolumesNewTargetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMountTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalMountVolumesNewTargetConfig) contextValidateMountTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.MountTarget != nil {

		if err := m.MountTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mountTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mountTarget")
			}
			return err
		}
	}

	return nil
}

func (m *PhysicalMountVolumesNewTargetConfig) contextValidateServerCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.ServerCredentials != nil {

		if swag.IsZero(m.ServerCredentials) { // not required
			return nil
		}

		if err := m.ServerCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serverCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serverCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalMountVolumesNewTargetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalMountVolumesNewTargetConfig) UnmarshalBinary(b []byte) error {
	var res PhysicalMountVolumesNewTargetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
