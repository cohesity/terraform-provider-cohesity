// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AwsEntityMetadata Specifies the entity metadata of aws entities.
//
// swagger:model AwsEntityMetadata
type AwsEntityMetadata struct {

	// Specifies the child metadata of aws entities.
	ChildMetadata *AwsEntityChildMetadata `json:"childMetadata,omitempty"`

	// Specifies the entity metadata of postgres entities.
	PostgresParams *AwsPostgresEntityMetadata `json:"postgresParams,omitempty"`

	// Specifies the entity metadata of rds entities.
	RdsParams *AwsRdsEntityMetadata `json:"rdsParams,omitempty"`

	// Specifies the entity metadata of aurora entities.
	AuroraParams *AwsAuroraEntityMetadata `json:"auroraParams,omitempty"`
}

// Validate validates this aws entity metadata
func (m *AwsEntityMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostgresParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuroraParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsEntityMetadata) validateChildMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildMetadata) { // not required
		return nil
	}

	if m.ChildMetadata != nil {
		if err := m.ChildMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("childMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("childMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *AwsEntityMetadata) validatePostgresParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PostgresParams) { // not required
		return nil
	}

	if m.PostgresParams != nil {
		if err := m.PostgresParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postgresParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postgresParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsEntityMetadata) validateRdsParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RdsParams) { // not required
		return nil
	}

	if m.RdsParams != nil {
		if err := m.RdsParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsEntityMetadata) validateAuroraParams(formats strfmt.Registry) error {
	if swag.IsZero(m.AuroraParams) { // not required
		return nil
	}

	if m.AuroraParams != nil {
		if err := m.AuroraParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws entity metadata based on the context it is used
func (m *AwsEntityMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostgresParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRdsParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuroraParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsEntityMetadata) contextValidateChildMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ChildMetadata != nil {

		if swag.IsZero(m.ChildMetadata) { // not required
			return nil
		}

		if err := m.ChildMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("childMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("childMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *AwsEntityMetadata) contextValidatePostgresParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PostgresParams != nil {

		if swag.IsZero(m.PostgresParams) { // not required
			return nil
		}

		if err := m.PostgresParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postgresParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postgresParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsEntityMetadata) contextValidateRdsParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RdsParams != nil {

		if swag.IsZero(m.RdsParams) { // not required
			return nil
		}

		if err := m.RdsParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsParams")
			}
			return err
		}
	}

	return nil
}

func (m *AwsEntityMetadata) contextValidateAuroraParams(ctx context.Context, formats strfmt.Registry) error {

	if m.AuroraParams != nil {

		if swag.IsZero(m.AuroraParams) { // not required
			return nil
		}

		if err := m.AuroraParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auroraParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auroraParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsEntityMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsEntityMetadata) UnmarshalBinary(b []byte) error {
	var res AwsEntityMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
