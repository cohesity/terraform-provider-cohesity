// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonMSSQLProtectionGroupParams Common MSSQL Protection Group Request Params.
//
// Specifies the common params to create a MSSQL Protection Group.
//
// swagger:model CommonMSSQLProtectionGroupParams
type CommonMSSQLProtectionGroupParams struct {

	// Specifies the preference type for backing up user databases on the host.
	// Enum: ["kBackupAllDatabases","kBackupAllExceptAAGDatabases","kBackupOnlyAAGDatabases"]
	UserDbBackupPreferenceType *string `json:"userDbBackupPreferenceType,omitempty"`

	// Specifies whether to backup system databases. If not specified then parameter is set to true.
	BackupSystemDbs *bool `json:"backupSystemDbs,omitempty"`

	// Specifies whether or not the AAG backup preferences specified on the SQL Server host should be used.
	UseAagPreferencesFromServer *bool `json:"useAagPreferencesFromServer,omitempty"`

	// Specifies the preference type for backing up databases that are part of an AAG. If not specified, then default preferences of the AAG server are applied. This field wont be applicable if user DB preference is set to skip AAG databases.
	// Enum: ["kPrimaryReplicaOnly","kSecondaryReplicaOnly","kPreferSecondaryReplica","kAnyReplica"]
	AagBackupPreferenceType *string `json:"aagBackupPreferenceType,omitempty"`

	// Specifies whether full backups should be copy-only.
	FullBackupsCopyOnly *bool `json:"fullBackupsCopyOnly,omitempty"`

	// Specifies the pre and post script parameters associated with a protection group.
	PrePostScript *PrePostScriptParams `json:"prePostScript,omitempty"`

	// Specifies the list of exclusion filters applied during the group creation or edit. These exclusion filters can be wildcard supported strings or regular expressions. Objects satisfying the will filters will be excluded during backup and also auto protected objects will be ignored if filtered by any of the filters.
	ExcludeFilters []*Filter `json:"excludeFilters"`

	// Specifies the number of streams to be used for log backups.
	LogBackupNumStreams *int32 `json:"logBackupNumStreams,omitempty"`

	// Specifies the WithClause to be used for log backups.
	LogBackupWithClause *string `json:"logBackupWithClause,omitempty"`

	// This is used to regulate certain gflag values from the UI. The values passed by the user from the UI will be used for the respective gflags.
	AdvancedSettings *AdvancedSettings `json:"advancedSettings,omitempty"`
}

// Validate validates this common m s SQL protection group params
func (m *CommonMSSQLProtectionGroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserDbBackupPreferenceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAagBackupPreferenceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrePostScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvancedSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonMSSqlProtectionGroupParamsTypeUserDbBackupPreferenceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kBackupAllDatabases","kBackupAllExceptAAGDatabases","kBackupOnlyAAGDatabases"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonMSSqlProtectionGroupParamsTypeUserDbBackupPreferenceTypePropEnum = append(commonMSSqlProtectionGroupParamsTypeUserDbBackupPreferenceTypePropEnum, v)
	}
}

const (

	// CommonMSSQLProtectionGroupParamsUserDbBackupPreferenceTypeKBackupAllDatabases captures enum value "kBackupAllDatabases"
	CommonMSSQLProtectionGroupParamsUserDbBackupPreferenceTypeKBackupAllDatabases string = "kBackupAllDatabases"

	// CommonMSSQLProtectionGroupParamsUserDbBackupPreferenceTypeKBackupAllExceptAAGDatabases captures enum value "kBackupAllExceptAAGDatabases"
	CommonMSSQLProtectionGroupParamsUserDbBackupPreferenceTypeKBackupAllExceptAAGDatabases string = "kBackupAllExceptAAGDatabases"

	// CommonMSSQLProtectionGroupParamsUserDbBackupPreferenceTypeKBackupOnlyAAGDatabases captures enum value "kBackupOnlyAAGDatabases"
	CommonMSSQLProtectionGroupParamsUserDbBackupPreferenceTypeKBackupOnlyAAGDatabases string = "kBackupOnlyAAGDatabases"
)

// prop value enum
func (m *CommonMSSQLProtectionGroupParams) validateUserDbBackupPreferenceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonMSSqlProtectionGroupParamsTypeUserDbBackupPreferenceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonMSSQLProtectionGroupParams) validateUserDbBackupPreferenceType(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDbBackupPreferenceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserDbBackupPreferenceTypeEnum("userDbBackupPreferenceType", "body", *m.UserDbBackupPreferenceType); err != nil {
		return err
	}

	return nil
}

var commonMSSqlProtectionGroupParamsTypeAagBackupPreferenceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kPrimaryReplicaOnly","kSecondaryReplicaOnly","kPreferSecondaryReplica","kAnyReplica"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonMSSqlProtectionGroupParamsTypeAagBackupPreferenceTypePropEnum = append(commonMSSqlProtectionGroupParamsTypeAagBackupPreferenceTypePropEnum, v)
	}
}

const (

	// CommonMSSQLProtectionGroupParamsAagBackupPreferenceTypeKPrimaryReplicaOnly captures enum value "kPrimaryReplicaOnly"
	CommonMSSQLProtectionGroupParamsAagBackupPreferenceTypeKPrimaryReplicaOnly string = "kPrimaryReplicaOnly"

	// CommonMSSQLProtectionGroupParamsAagBackupPreferenceTypeKSecondaryReplicaOnly captures enum value "kSecondaryReplicaOnly"
	CommonMSSQLProtectionGroupParamsAagBackupPreferenceTypeKSecondaryReplicaOnly string = "kSecondaryReplicaOnly"

	// CommonMSSQLProtectionGroupParamsAagBackupPreferenceTypeKPreferSecondaryReplica captures enum value "kPreferSecondaryReplica"
	CommonMSSQLProtectionGroupParamsAagBackupPreferenceTypeKPreferSecondaryReplica string = "kPreferSecondaryReplica"

	// CommonMSSQLProtectionGroupParamsAagBackupPreferenceTypeKAnyReplica captures enum value "kAnyReplica"
	CommonMSSQLProtectionGroupParamsAagBackupPreferenceTypeKAnyReplica string = "kAnyReplica"
)

// prop value enum
func (m *CommonMSSQLProtectionGroupParams) validateAagBackupPreferenceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonMSSqlProtectionGroupParamsTypeAagBackupPreferenceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonMSSQLProtectionGroupParams) validateAagBackupPreferenceType(formats strfmt.Registry) error {
	if swag.IsZero(m.AagBackupPreferenceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAagBackupPreferenceTypeEnum("aagBackupPreferenceType", "body", *m.AagBackupPreferenceType); err != nil {
		return err
	}

	return nil
}

func (m *CommonMSSQLProtectionGroupParams) validatePrePostScript(formats strfmt.Registry) error {
	if swag.IsZero(m.PrePostScript) { // not required
		return nil
	}

	if m.PrePostScript != nil {
		if err := m.PrePostScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prePostScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prePostScript")
			}
			return err
		}
	}

	return nil
}

func (m *CommonMSSQLProtectionGroupParams) validateExcludeFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.ExcludeFilters); i++ {
		if swag.IsZero(m.ExcludeFilters[i]) { // not required
			continue
		}

		if m.ExcludeFilters[i] != nil {
			if err := m.ExcludeFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excludeFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("excludeFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonMSSQLProtectionGroupParams) validateAdvancedSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvancedSettings) { // not required
		return nil
	}

	if m.AdvancedSettings != nil {
		if err := m.AdvancedSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("advancedSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common m s SQL protection group params based on the context it is used
func (m *CommonMSSQLProtectionGroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrePostScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExcludeFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdvancedSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonMSSQLProtectionGroupParams) contextValidatePrePostScript(ctx context.Context, formats strfmt.Registry) error {

	if m.PrePostScript != nil {

		if swag.IsZero(m.PrePostScript) { // not required
			return nil
		}

		if err := m.PrePostScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prePostScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prePostScript")
			}
			return err
		}
	}

	return nil
}

func (m *CommonMSSQLProtectionGroupParams) contextValidateExcludeFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExcludeFilters); i++ {

		if m.ExcludeFilters[i] != nil {

			if swag.IsZero(m.ExcludeFilters[i]) { // not required
				return nil
			}

			if err := m.ExcludeFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excludeFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("excludeFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonMSSQLProtectionGroupParams) contextValidateAdvancedSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.AdvancedSettings != nil {

		if swag.IsZero(m.AdvancedSettings) { // not required
			return nil
		}

		if err := m.AdvancedSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("advancedSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonMSSQLProtectionGroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonMSSQLProtectionGroupParams) UnmarshalBinary(b []byte) error {
	var res CommonMSSQLProtectionGroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
