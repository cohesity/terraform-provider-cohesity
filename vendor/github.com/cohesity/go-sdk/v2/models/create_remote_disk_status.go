// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRemoteDiskStatus Specifies the status of creating remote disk.
//
// swagger:model CreateRemoteDiskStatus
type CreateRemoteDiskStatus struct {

	// Specifies the NFS mount path of the remote disk.
	MountPath *string `json:"mountPath,omitempty"`

	// Specifies the node id of the disk. If not specified, the disk will be evenly distributed across all the nodes.
	NodeID *int64 `json:"nodeId,omitempty"`

	// Specifies the tier of the disk
	// Enum: ["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]
	Tier *string `json:"tier,omitempty"`

	// Specifies the creating status of this disk.
	// Enum: ["Succeeded","Failed"]
	Status *string `json:"status,omitempty"`

	// Specifies the error message when creating remote disk fails.
	Message *string `json:"message,omitempty"`
}

// Validate validates this create remote disk status
func (m *CreateRemoteDiskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createRemoteDiskStatusTypeTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRemoteDiskStatusTypeTierPropEnum = append(createRemoteDiskStatusTypeTierPropEnum, v)
	}
}

const (

	// CreateRemoteDiskStatusTierPCIeSSD captures enum value "PCIeSSD"
	CreateRemoteDiskStatusTierPCIeSSD string = "PCIeSSD"

	// CreateRemoteDiskStatusTierSATADashSSD captures enum value "SATA-SSD"
	CreateRemoteDiskStatusTierSATADashSSD string = "SATA-SSD"

	// CreateRemoteDiskStatusTierSATADashHDD captures enum value "SATA-HDD"
	CreateRemoteDiskStatusTierSATADashHDD string = "SATA-HDD"

	// CreateRemoteDiskStatusTierCLOUD captures enum value "CLOUD"
	CreateRemoteDiskStatusTierCLOUD string = "CLOUD"
)

// prop value enum
func (m *CreateRemoteDiskStatus) validateTierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createRemoteDiskStatusTypeTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateRemoteDiskStatus) validateTier(formats strfmt.Registry) error {
	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	// value enum
	if err := m.validateTierEnum("tier", "body", *m.Tier); err != nil {
		return err
	}

	return nil
}

var createRemoteDiskStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Succeeded","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRemoteDiskStatusTypeStatusPropEnum = append(createRemoteDiskStatusTypeStatusPropEnum, v)
	}
}

const (

	// CreateRemoteDiskStatusStatusSucceeded captures enum value "Succeeded"
	CreateRemoteDiskStatusStatusSucceeded string = "Succeeded"

	// CreateRemoteDiskStatusStatusFailed captures enum value "Failed"
	CreateRemoteDiskStatusStatusFailed string = "Failed"
)

// prop value enum
func (m *CreateRemoteDiskStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createRemoteDiskStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateRemoteDiskStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create remote disk status based on context it is used
func (m *CreateRemoteDiskStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateRemoteDiskStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRemoteDiskStatus) UnmarshalBinary(b []byte) error {
	var res CreateRemoteDiskStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
