// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LifecycleRuleFilter Specifies the filter used to identify objects that a Lifecycle Rule applies to. Note: All three properties are mutually exclusive.
//
// swagger:model LifecycleRuleFilter
type LifecycleRuleFilter struct {

	// Specifies the Prefix identifying one or more objects to which the rule applies.
	Prefix *string `json:"prefix,omitempty"`

	// Specifies the Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the AND operator.
	And *LifecycleRuleFilterAnd `json:"and,omitempty"`

	// Specifies the tag in the object's tag set to which the rule applies.
	Tag *LifecycleRuleFilterTag `json:"tag,omitempty"`
}

// Validate validates this lifecycle rule filter
func (m *LifecycleRuleFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LifecycleRuleFilter) validateAnd(formats strfmt.Registry) error {
	if swag.IsZero(m.And) { // not required
		return nil
	}

	if m.And != nil {
		if err := m.And.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("and")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("and")
			}
			return err
		}
	}

	return nil
}

func (m *LifecycleRuleFilter) validateTag(formats strfmt.Registry) error {
	if swag.IsZero(m.Tag) { // not required
		return nil
	}

	if m.Tag != nil {
		if err := m.Tag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tag")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this lifecycle rule filter based on the context it is used
func (m *LifecycleRuleFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LifecycleRuleFilter) contextValidateAnd(ctx context.Context, formats strfmt.Registry) error {

	if m.And != nil {

		if swag.IsZero(m.And) { // not required
			return nil
		}

		if err := m.And.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("and")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("and")
			}
			return err
		}
	}

	return nil
}

func (m *LifecycleRuleFilter) contextValidateTag(ctx context.Context, formats strfmt.Registry) error {

	if m.Tag != nil {

		if swag.IsZero(m.Tag) { // not required
			return nil
		}

		if err := m.Tag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tag")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LifecycleRuleFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LifecycleRuleFilter) UnmarshalBinary(b []byte) error {
	var res LifecycleRuleFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
