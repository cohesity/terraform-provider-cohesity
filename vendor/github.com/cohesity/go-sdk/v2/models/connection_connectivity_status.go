// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectionConnectivityStatus Data-Source Connection Connectivity Status
//
// Specifies connectivity status information for the data-source connection. It represents information such as, if there's at least one active connector, latest time at which any connector(s) in this connection passed health checks, since how long there has been at least one active connector, etc.
//
// swagger:model ConnectionConnectivityStatus
type ConnectionConnectivityStatus struct {

	// Specifies whether the connection has any of its connectors connected.
	// Required: true
	IsConnected *bool `json:"isConnected"`

	// This denotes the timestamp in UNIX seconds since which this connection has at least one connector connected to the cluster without any interruptions. This property will NOT be present if none of the connectors in this connection are currently connected to the cluster.
	ConnectedSinceTimestampSecs *int64 `json:"connectedSinceTimestampSecs,omitempty"`

	// Specifies the most recent known timestamp in UNIX seconds at which any connector(s) in this connection passed the health checks. This property can be present even if no connectors in this connection are currently connected to the cluster.
	LastKnownHealthOkTimestampSecs *int64 `json:"lastKnownHealthOkTimestampSecs,omitempty"`
}

// Validate validates this connection connectivity status
func (m *ConnectionConnectivityStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsConnected(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionConnectivityStatus) validateIsConnected(formats strfmt.Registry) error {

	if err := validate.Required("isConnected", "body", m.IsConnected); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this connection connectivity status based on context it is used
func (m *ConnectionConnectivityStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionConnectivityStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionConnectivityStatus) UnmarshalBinary(b []byte) error {
	var res ConnectionConnectivityStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
