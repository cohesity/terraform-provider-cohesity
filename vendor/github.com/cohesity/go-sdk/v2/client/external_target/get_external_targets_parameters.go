// Code generated by go-swagger; DO NOT EDIT.

package external_target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetExternalTargetsParams creates a new GetExternalTargetsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetExternalTargetsParams() *GetExternalTargetsParams {
	return &GetExternalTargetsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetExternalTargetsParamsWithTimeout creates a new GetExternalTargetsParams object
// with the ability to set a timeout on a request.
func NewGetExternalTargetsParamsWithTimeout(timeout time.Duration) *GetExternalTargetsParams {
	return &GetExternalTargetsParams{
		timeout: timeout,
	}
}

// NewGetExternalTargetsParamsWithContext creates a new GetExternalTargetsParams object
// with the ability to set a context for a request.
func NewGetExternalTargetsParamsWithContext(ctx context.Context) *GetExternalTargetsParams {
	return &GetExternalTargetsParams{
		Context: ctx,
	}
}

// NewGetExternalTargetsParamsWithHTTPClient creates a new GetExternalTargetsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetExternalTargetsParamsWithHTTPClient(client *http.Client) *GetExternalTargetsParams {
	return &GetExternalTargetsParams{
		HTTPClient: client,
	}
}

/*
GetExternalTargetsParams contains all the parameters to send to the API endpoint

	for the get external targets operation.

	Typically these are written to a http.Request.
*/
type GetExternalTargetsParams struct {

	/* GlobalIds.

	   Filter by a list of External Target global ids.
	*/
	GlobalIds []string

	/* Ids.

	   Filter by a list of External Target ids.
	*/
	Ids []int64

	/* Names.

	   Filter by a list of External Target names.
	*/
	Names []string

	/* OwnershipContexts.

	   Specifies whether how this external target is being consumed either Local or FortKnox.
	*/
	OwnershipContexts []string

	/* PurposeTypes.

	   Filter by a list of External Target purpose types.
	*/
	PurposeTypes []string

	/* StorageClasses.

	   Filter by a list of External Target storage classes.
	*/
	StorageClasses []string

	/* StorageTypes.

	   Filter by a list of External Target storage types. Nas option in archival_target_storage_type will soon be deprecated. Please use NAS instead.
	*/
	StorageTypes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get external targets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetExternalTargetsParams) WithDefaults() *GetExternalTargetsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get external targets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetExternalTargetsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get external targets params
func (o *GetExternalTargetsParams) WithTimeout(timeout time.Duration) *GetExternalTargetsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get external targets params
func (o *GetExternalTargetsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get external targets params
func (o *GetExternalTargetsParams) WithContext(ctx context.Context) *GetExternalTargetsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get external targets params
func (o *GetExternalTargetsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get external targets params
func (o *GetExternalTargetsParams) WithHTTPClient(client *http.Client) *GetExternalTargetsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get external targets params
func (o *GetExternalTargetsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGlobalIds adds the globalIds to the get external targets params
func (o *GetExternalTargetsParams) WithGlobalIds(globalIds []string) *GetExternalTargetsParams {
	o.SetGlobalIds(globalIds)
	return o
}

// SetGlobalIds adds the globalIds to the get external targets params
func (o *GetExternalTargetsParams) SetGlobalIds(globalIds []string) {
	o.GlobalIds = globalIds
}

// WithIds adds the ids to the get external targets params
func (o *GetExternalTargetsParams) WithIds(ids []int64) *GetExternalTargetsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get external targets params
func (o *GetExternalTargetsParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithNames adds the names to the get external targets params
func (o *GetExternalTargetsParams) WithNames(names []string) *GetExternalTargetsParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the get external targets params
func (o *GetExternalTargetsParams) SetNames(names []string) {
	o.Names = names
}

// WithOwnershipContexts adds the ownershipContexts to the get external targets params
func (o *GetExternalTargetsParams) WithOwnershipContexts(ownershipContexts []string) *GetExternalTargetsParams {
	o.SetOwnershipContexts(ownershipContexts)
	return o
}

// SetOwnershipContexts adds the ownershipContexts to the get external targets params
func (o *GetExternalTargetsParams) SetOwnershipContexts(ownershipContexts []string) {
	o.OwnershipContexts = ownershipContexts
}

// WithPurposeTypes adds the purposeTypes to the get external targets params
func (o *GetExternalTargetsParams) WithPurposeTypes(purposeTypes []string) *GetExternalTargetsParams {
	o.SetPurposeTypes(purposeTypes)
	return o
}

// SetPurposeTypes adds the purposeTypes to the get external targets params
func (o *GetExternalTargetsParams) SetPurposeTypes(purposeTypes []string) {
	o.PurposeTypes = purposeTypes
}

// WithStorageClasses adds the storageClasses to the get external targets params
func (o *GetExternalTargetsParams) WithStorageClasses(storageClasses []string) *GetExternalTargetsParams {
	o.SetStorageClasses(storageClasses)
	return o
}

// SetStorageClasses adds the storageClasses to the get external targets params
func (o *GetExternalTargetsParams) SetStorageClasses(storageClasses []string) {
	o.StorageClasses = storageClasses
}

// WithStorageTypes adds the storageTypes to the get external targets params
func (o *GetExternalTargetsParams) WithStorageTypes(storageTypes []string) *GetExternalTargetsParams {
	o.SetStorageTypes(storageTypes)
	return o
}

// SetStorageTypes adds the storageTypes to the get external targets params
func (o *GetExternalTargetsParams) SetStorageTypes(storageTypes []string) {
	o.StorageTypes = storageTypes
}

// WriteToRequest writes these params to a swagger request
func (o *GetExternalTargetsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.GlobalIds != nil {

		// binding items for globalIds
		joinedGlobalIds := o.bindParamGlobalIds(reg)

		// query array param globalIds
		if err := r.SetQueryParam("globalIds", joinedGlobalIds...); err != nil {
			return err
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Names != nil {

		// binding items for names
		joinedNames := o.bindParamNames(reg)

		// query array param names
		if err := r.SetQueryParam("names", joinedNames...); err != nil {
			return err
		}
	}

	if o.OwnershipContexts != nil {

		// binding items for ownershipContexts
		joinedOwnershipContexts := o.bindParamOwnershipContexts(reg)

		// query array param ownershipContexts
		if err := r.SetQueryParam("ownershipContexts", joinedOwnershipContexts...); err != nil {
			return err
		}
	}

	if o.PurposeTypes != nil {

		// binding items for purposeTypes
		joinedPurposeTypes := o.bindParamPurposeTypes(reg)

		// query array param purposeTypes
		if err := r.SetQueryParam("purposeTypes", joinedPurposeTypes...); err != nil {
			return err
		}
	}

	if o.StorageClasses != nil {

		// binding items for storageClasses
		joinedStorageClasses := o.bindParamStorageClasses(reg)

		// query array param storageClasses
		if err := r.SetQueryParam("storageClasses", joinedStorageClasses...); err != nil {
			return err
		}
	}

	if o.StorageTypes != nil {

		// binding items for storageTypes
		joinedStorageTypes := o.bindParamStorageTypes(reg)

		// query array param storageTypes
		if err := r.SetQueryParam("storageTypes", joinedStorageTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetExternalTargets binds the parameter globalIds
func (o *GetExternalTargetsParams) bindParamGlobalIds(formats strfmt.Registry) []string {
	globalIdsIR := o.GlobalIds

	var globalIdsIC []string
	for _, globalIdsIIR := range globalIdsIR { // explode []string

		globalIdsIIV := globalIdsIIR // string as string
		globalIdsIC = append(globalIdsIC, globalIdsIIV)
	}

	// items.CollectionFormat: ""
	globalIdsIS := swag.JoinByFormat(globalIdsIC, "")

	return globalIdsIS
}

// bindParamGetExternalTargets binds the parameter ids
func (o *GetExternalTargetsParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetExternalTargets binds the parameter names
func (o *GetExternalTargetsParams) bindParamNames(formats strfmt.Registry) []string {
	namesIR := o.Names

	var namesIC []string
	for _, namesIIR := range namesIR { // explode []string

		namesIIV := namesIIR // string as string
		namesIC = append(namesIC, namesIIV)
	}

	// items.CollectionFormat: ""
	namesIS := swag.JoinByFormat(namesIC, "")

	return namesIS
}

// bindParamGetExternalTargets binds the parameter ownershipContexts
func (o *GetExternalTargetsParams) bindParamOwnershipContexts(formats strfmt.Registry) []string {
	ownershipContextsIR := o.OwnershipContexts

	var ownershipContextsIC []string
	for _, ownershipContextsIIR := range ownershipContextsIR { // explode []string

		ownershipContextsIIV := ownershipContextsIIR // string as string
		ownershipContextsIC = append(ownershipContextsIC, ownershipContextsIIV)
	}

	// items.CollectionFormat: ""
	ownershipContextsIS := swag.JoinByFormat(ownershipContextsIC, "")

	return ownershipContextsIS
}

// bindParamGetExternalTargets binds the parameter purposeTypes
func (o *GetExternalTargetsParams) bindParamPurposeTypes(formats strfmt.Registry) []string {
	purposeTypesIR := o.PurposeTypes

	var purposeTypesIC []string
	for _, purposeTypesIIR := range purposeTypesIR { // explode []string

		purposeTypesIIV := purposeTypesIIR // string as string
		purposeTypesIC = append(purposeTypesIC, purposeTypesIIV)
	}

	// items.CollectionFormat: ""
	purposeTypesIS := swag.JoinByFormat(purposeTypesIC, "")

	return purposeTypesIS
}

// bindParamGetExternalTargets binds the parameter storageClasses
func (o *GetExternalTargetsParams) bindParamStorageClasses(formats strfmt.Registry) []string {
	storageClassesIR := o.StorageClasses

	var storageClassesIC []string
	for _, storageClassesIIR := range storageClassesIR { // explode []string

		storageClassesIIV := storageClassesIIR // string as string
		storageClassesIC = append(storageClassesIC, storageClassesIIV)
	}

	// items.CollectionFormat: ""
	storageClassesIS := swag.JoinByFormat(storageClassesIC, "")

	return storageClassesIS
}

// bindParamGetExternalTargets binds the parameter storageTypes
func (o *GetExternalTargetsParams) bindParamStorageTypes(formats strfmt.Registry) []string {
	storageTypesIR := o.StorageTypes

	var storageTypesIC []string
	for _, storageTypesIIR := range storageTypesIR { // explode []string

		storageTypesIIV := storageTypesIIR // string as string
		storageTypesIC = append(storageTypesIC, storageTypesIIV)
	}

	// items.CollectionFormat: ""
	storageTypesIS := swag.JoinByFormat(storageTypesIC, "")

	return storageTypesIS
}
