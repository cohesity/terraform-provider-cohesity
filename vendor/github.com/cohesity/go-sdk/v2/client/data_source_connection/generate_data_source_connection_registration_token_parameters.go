// Code generated by go-swagger; DO NOT EDIT.

package data_source_connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGenerateDataSourceConnectionRegistrationTokenParams creates a new GenerateDataSourceConnectionRegistrationTokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGenerateDataSourceConnectionRegistrationTokenParams() *GenerateDataSourceConnectionRegistrationTokenParams {
	return &GenerateDataSourceConnectionRegistrationTokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGenerateDataSourceConnectionRegistrationTokenParamsWithTimeout creates a new GenerateDataSourceConnectionRegistrationTokenParams object
// with the ability to set a timeout on a request.
func NewGenerateDataSourceConnectionRegistrationTokenParamsWithTimeout(timeout time.Duration) *GenerateDataSourceConnectionRegistrationTokenParams {
	return &GenerateDataSourceConnectionRegistrationTokenParams{
		timeout: timeout,
	}
}

// NewGenerateDataSourceConnectionRegistrationTokenParamsWithContext creates a new GenerateDataSourceConnectionRegistrationTokenParams object
// with the ability to set a context for a request.
func NewGenerateDataSourceConnectionRegistrationTokenParamsWithContext(ctx context.Context) *GenerateDataSourceConnectionRegistrationTokenParams {
	return &GenerateDataSourceConnectionRegistrationTokenParams{
		Context: ctx,
	}
}

// NewGenerateDataSourceConnectionRegistrationTokenParamsWithHTTPClient creates a new GenerateDataSourceConnectionRegistrationTokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewGenerateDataSourceConnectionRegistrationTokenParamsWithHTTPClient(client *http.Client) *GenerateDataSourceConnectionRegistrationTokenParams {
	return &GenerateDataSourceConnectionRegistrationTokenParams{
		HTTPClient: client,
	}
}

/*
GenerateDataSourceConnectionRegistrationTokenParams contains all the parameters to send to the API endpoint

	for the generate data source connection registration token operation.

	Typically these are written to a http.Request.
*/
type GenerateDataSourceConnectionRegistrationTokenParams struct {

	/* ConnectionID.

	   Specifies the unique ID of the connection for which the registration token is to be fetched.
	*/
	ConnectionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the generate data source connection registration token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GenerateDataSourceConnectionRegistrationTokenParams) WithDefaults() *GenerateDataSourceConnectionRegistrationTokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the generate data source connection registration token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GenerateDataSourceConnectionRegistrationTokenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the generate data source connection registration token params
func (o *GenerateDataSourceConnectionRegistrationTokenParams) WithTimeout(timeout time.Duration) *GenerateDataSourceConnectionRegistrationTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the generate data source connection registration token params
func (o *GenerateDataSourceConnectionRegistrationTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the generate data source connection registration token params
func (o *GenerateDataSourceConnectionRegistrationTokenParams) WithContext(ctx context.Context) *GenerateDataSourceConnectionRegistrationTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the generate data source connection registration token params
func (o *GenerateDataSourceConnectionRegistrationTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the generate data source connection registration token params
func (o *GenerateDataSourceConnectionRegistrationTokenParams) WithHTTPClient(client *http.Client) *GenerateDataSourceConnectionRegistrationTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the generate data source connection registration token params
func (o *GenerateDataSourceConnectionRegistrationTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionID adds the connectionID to the generate data source connection registration token params
func (o *GenerateDataSourceConnectionRegistrationTokenParams) WithConnectionID(connectionID string) *GenerateDataSourceConnectionRegistrationTokenParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the generate data source connection registration token params
func (o *GenerateDataSourceConnectionRegistrationTokenParams) SetConnectionID(connectionID string) {
	o.ConnectionID = connectionID
}

// WriteToRequest writes these params to a swagger request
func (o *GenerateDataSourceConnectionRegistrationTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param connectionId
	if err := r.SetPathParam("connectionId", o.ConnectionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
