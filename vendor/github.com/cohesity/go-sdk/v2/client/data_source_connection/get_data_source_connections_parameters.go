// Code generated by go-swagger; DO NOT EDIT.

package data_source_connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDataSourceConnectionsParams creates a new GetDataSourceConnectionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDataSourceConnectionsParams() *GetDataSourceConnectionsParams {
	return &GetDataSourceConnectionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDataSourceConnectionsParamsWithTimeout creates a new GetDataSourceConnectionsParams object
// with the ability to set a timeout on a request.
func NewGetDataSourceConnectionsParamsWithTimeout(timeout time.Duration) *GetDataSourceConnectionsParams {
	return &GetDataSourceConnectionsParams{
		timeout: timeout,
	}
}

// NewGetDataSourceConnectionsParamsWithContext creates a new GetDataSourceConnectionsParams object
// with the ability to set a context for a request.
func NewGetDataSourceConnectionsParamsWithContext(ctx context.Context) *GetDataSourceConnectionsParams {
	return &GetDataSourceConnectionsParams{
		Context: ctx,
	}
}

// NewGetDataSourceConnectionsParamsWithHTTPClient creates a new GetDataSourceConnectionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDataSourceConnectionsParamsWithHTTPClient(client *http.Client) *GetDataSourceConnectionsParams {
	return &GetDataSourceConnectionsParams{
		HTTPClient: client,
	}
}

/*
GetDataSourceConnectionsParams contains all the parameters to send to the API endpoint

	for the get data source connections operation.

	Typically these are written to a http.Request.
*/
type GetDataSourceConnectionsParams struct {

	/* ConnectionIds.

	   Specifies the unique IDs of the connections which are to be fetched.
	*/
	ConnectionIds []string

	/* ConnectionNames.

	   Specifies the names of the connections which are to be fetched.
	*/
	ConnectionNames []string

	/* TenantID.

	   Specifies the ID of the tenant for which the connections are to be fetched.
	*/
	TenantID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get data source connections params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDataSourceConnectionsParams) WithDefaults() *GetDataSourceConnectionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get data source connections params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDataSourceConnectionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get data source connections params
func (o *GetDataSourceConnectionsParams) WithTimeout(timeout time.Duration) *GetDataSourceConnectionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get data source connections params
func (o *GetDataSourceConnectionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get data source connections params
func (o *GetDataSourceConnectionsParams) WithContext(ctx context.Context) *GetDataSourceConnectionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get data source connections params
func (o *GetDataSourceConnectionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get data source connections params
func (o *GetDataSourceConnectionsParams) WithHTTPClient(client *http.Client) *GetDataSourceConnectionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get data source connections params
func (o *GetDataSourceConnectionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionIds adds the connectionIds to the get data source connections params
func (o *GetDataSourceConnectionsParams) WithConnectionIds(connectionIds []string) *GetDataSourceConnectionsParams {
	o.SetConnectionIds(connectionIds)
	return o
}

// SetConnectionIds adds the connectionIds to the get data source connections params
func (o *GetDataSourceConnectionsParams) SetConnectionIds(connectionIds []string) {
	o.ConnectionIds = connectionIds
}

// WithConnectionNames adds the connectionNames to the get data source connections params
func (o *GetDataSourceConnectionsParams) WithConnectionNames(connectionNames []string) *GetDataSourceConnectionsParams {
	o.SetConnectionNames(connectionNames)
	return o
}

// SetConnectionNames adds the connectionNames to the get data source connections params
func (o *GetDataSourceConnectionsParams) SetConnectionNames(connectionNames []string) {
	o.ConnectionNames = connectionNames
}

// WithTenantID adds the tenantID to the get data source connections params
func (o *GetDataSourceConnectionsParams) WithTenantID(tenantID *string) *GetDataSourceConnectionsParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the get data source connections params
func (o *GetDataSourceConnectionsParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDataSourceConnectionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConnectionIds != nil {

		// binding items for connectionIds
		joinedConnectionIds := o.bindParamConnectionIds(reg)

		// query array param connectionIds
		if err := r.SetQueryParam("connectionIds", joinedConnectionIds...); err != nil {
			return err
		}
	}

	if o.ConnectionNames != nil {

		// binding items for connectionNames
		joinedConnectionNames := o.bindParamConnectionNames(reg)

		// query array param connectionNames
		if err := r.SetQueryParam("connectionNames", joinedConnectionNames...); err != nil {
			return err
		}
	}

	if o.TenantID != nil {

		// query param tenantId
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenantId", qTenantID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetDataSourceConnections binds the parameter connectionIds
func (o *GetDataSourceConnectionsParams) bindParamConnectionIds(formats strfmt.Registry) []string {
	connectionIdsIR := o.ConnectionIds

	var connectionIdsIC []string
	for _, connectionIdsIIR := range connectionIdsIR { // explode []string

		connectionIdsIIV := connectionIdsIIR // string as string
		connectionIdsIC = append(connectionIdsIC, connectionIdsIIV)
	}

	// items.CollectionFormat: ""
	connectionIdsIS := swag.JoinByFormat(connectionIdsIC, "")

	return connectionIdsIS
}

// bindParamGetDataSourceConnections binds the parameter connectionNames
func (o *GetDataSourceConnectionsParams) bindParamConnectionNames(formats strfmt.Registry) []string {
	connectionNamesIR := o.ConnectionNames

	var connectionNamesIC []string
	for _, connectionNamesIIR := range connectionNamesIR { // explode []string

		connectionNamesIIV := connectionNamesIIR // string as string
		connectionNamesIC = append(connectionNamesIC, connectionNamesIIV)
	}

	// items.CollectionFormat: ""
	connectionNamesIS := swag.JoinByFormat(connectionNamesIC, "")

	return connectionNamesIS
}
