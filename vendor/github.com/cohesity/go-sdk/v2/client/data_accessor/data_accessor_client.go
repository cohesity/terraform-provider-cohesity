// Code generated by go-swagger; DO NOT EDIT.

package data_accessor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new data accessor API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new data accessor API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new data accessor API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for data accessor API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDataAccessSession(params *CreateDataAccessSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessSessionCreated, error)

	DifferenceOfGraphNodes(params *DifferenceOfGraphNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DifferenceOfGraphNodesOK, error)

	GetDataAccessSessions(params *GetDataAccessSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessSessionsOK, error)

	GetGraphNodeRelationsDifferences(params *GetGraphNodeRelationsDifferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGraphNodeRelationsDifferencesOK, error)

	GetGraphNodesDetails(params *GetGraphNodesDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGraphNodesDetailsOK, error)

	SearchGraphNodes(params *SearchGraphNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchGraphNodesOK, error)

	TearDownDataAccessSession(params *TearDownDataAccessSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TearDownDataAccessSessionNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateDataAccessSession creates data access session

```No Privileges Required``` <br><br>Create data access session.
*/
func (a *Client) CreateDataAccessSession(params *CreateDataAccessSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessSessionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataAccessSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataAccessSession",
		Method:             "POST",
		PathPattern:        "/data-access/snapshots/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataAccessSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataAccessSessionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDataAccessSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DifferenceOfGraphNodes differences of graph nodes

```Unknown Privileges``` <br><br>Query for difference of graph nodes between two snapshots of a session.
*/
func (a *Client) DifferenceOfGraphNodes(params *DifferenceOfGraphNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DifferenceOfGraphNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDifferenceOfGraphNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DifferenceOfGraphNodes",
		Method:             "POST",
		PathPattern:        "/data-access/snapshots/sessions/{sessionId}/graph-nodes/differences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DifferenceOfGraphNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DifferenceOfGraphNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DifferenceOfGraphNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataAccessSessions lists all the data access sessions

```No Privileges Required``` <br><br>Lists the Data Access Sessions.
*/
func (a *Client) GetDataAccessSessions(params *GetDataAccessSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataAccessSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataAccessSessions",
		Method:             "GET",
		PathPattern:        "/data-access/snapshots/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataAccessSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataAccessSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataAccessSessionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetGraphNodeRelationsDifferences queries for difference of graph node relations

```Unknown Privileges``` <br><br>Query for difference of graph node relations between two snapshots of a session.
*/
func (a *Client) GetGraphNodeRelationsDifferences(params *GetGraphNodeRelationsDifferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGraphNodeRelationsDifferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGraphNodeRelationsDifferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGraphNodeRelationsDifferences",
		Method:             "POST",
		PathPattern:        "/data-access/snapshots/sessions/{sessionId}/graph-nodes/query-relations/{nodeId}/differences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGraphNodeRelationsDifferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGraphNodeRelationsDifferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetGraphNodeRelationsDifferencesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetGraphNodesDetails gets graph nodes details

```No Privileges Required``` <br><br>Get graph nodes details and it's relations for list of node ids.
*/
func (a *Client) GetGraphNodesDetails(params *GetGraphNodesDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGraphNodesDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGraphNodesDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGraphNodesDetails",
		Method:             "POST",
		PathPattern:        "/data-access/snapshots/sessions/{sessionId}/graph-nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGraphNodesDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGraphNodesDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetGraphNodesDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchGraphNodes searches graph nodes

```No Privileges Required``` <br><br>Search nodes in the graph for a given session id
*/
func (a *Client) SearchGraphNodes(params *SearchGraphNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchGraphNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchGraphNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchGraphNodes",
		Method:             "POST",
		PathPattern:        "/data-access/snapshots/sessions/graph-nodes/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchGraphNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchGraphNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchGraphNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TearDownDataAccessSession tears down data access session for a given id

```No Privileges Required``` <br><br>Tear down data access session for a given id.
*/
func (a *Client) TearDownDataAccessSession(params *TearDownDataAccessSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TearDownDataAccessSessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTearDownDataAccessSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TearDownDataAccessSession",
		Method:             "DELETE",
		PathPattern:        "/data-access/snapshots/sessions/{sessionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TearDownDataAccessSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TearDownDataAccessSessionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TearDownDataAccessSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
