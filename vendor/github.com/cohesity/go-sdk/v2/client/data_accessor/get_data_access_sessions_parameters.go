// Code generated by go-swagger; DO NOT EDIT.

package data_accessor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDataAccessSessionsParams creates a new GetDataAccessSessionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDataAccessSessionsParams() *GetDataAccessSessionsParams {
	return &GetDataAccessSessionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDataAccessSessionsParamsWithTimeout creates a new GetDataAccessSessionsParams object
// with the ability to set a timeout on a request.
func NewGetDataAccessSessionsParamsWithTimeout(timeout time.Duration) *GetDataAccessSessionsParams {
	return &GetDataAccessSessionsParams{
		timeout: timeout,
	}
}

// NewGetDataAccessSessionsParamsWithContext creates a new GetDataAccessSessionsParams object
// with the ability to set a context for a request.
func NewGetDataAccessSessionsParamsWithContext(ctx context.Context) *GetDataAccessSessionsParams {
	return &GetDataAccessSessionsParams{
		Context: ctx,
	}
}

// NewGetDataAccessSessionsParamsWithHTTPClient creates a new GetDataAccessSessionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDataAccessSessionsParamsWithHTTPClient(client *http.Client) *GetDataAccessSessionsParams {
	return &GetDataAccessSessionsParams{
		HTTPClient: client,
	}
}

/*
GetDataAccessSessionsParams contains all the parameters to send to the API endpoint

	for the get data access sessions operation.

	Typically these are written to a http.Request.
*/
type GetDataAccessSessionsParams struct {

	/* Count.

	   Specifies the number of objects to be fetched for the specified pagination cookie.

	   Format: int32
	*/
	Count *int32

	/* EndTimeUsecs.

	   Returns the data access sessions which are started before the specific time. This value should be in Unix timestamp epoch in microseconds.

	   Format: int64
	*/
	EndTimeUsecs *int64

	/* PaginationCookie.

	   Specifies a cookie which can be passed in by the user in order to retrieve the next page of results.
	*/
	PaginationCookie *string

	/* SessionIds.

	   Filter Data Access Sessions for given session ids.
	*/
	SessionIds []string

	/* SnapshotEnvironments.

	   Specifies the snapshot environment types to filter data access sessions.
	*/
	SnapshotEnvironments []string

	/* StartTimeUsecs.

	   Returns the data access sessions which are started after the specific time. This value should be in Unix timestamp epoch in microseconds.

	   Format: int64
	*/
	StartTimeUsecs *int64

	/* Statuses.

	   Specifies the list of session states to filter data access sessions
	*/
	Statuses []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get data access sessions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDataAccessSessionsParams) WithDefaults() *GetDataAccessSessionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get data access sessions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDataAccessSessionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get data access sessions params
func (o *GetDataAccessSessionsParams) WithTimeout(timeout time.Duration) *GetDataAccessSessionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get data access sessions params
func (o *GetDataAccessSessionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get data access sessions params
func (o *GetDataAccessSessionsParams) WithContext(ctx context.Context) *GetDataAccessSessionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get data access sessions params
func (o *GetDataAccessSessionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get data access sessions params
func (o *GetDataAccessSessionsParams) WithHTTPClient(client *http.Client) *GetDataAccessSessionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get data access sessions params
func (o *GetDataAccessSessionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get data access sessions params
func (o *GetDataAccessSessionsParams) WithCount(count *int32) *GetDataAccessSessionsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get data access sessions params
func (o *GetDataAccessSessionsParams) SetCount(count *int32) {
	o.Count = count
}

// WithEndTimeUsecs adds the endTimeUsecs to the get data access sessions params
func (o *GetDataAccessSessionsParams) WithEndTimeUsecs(endTimeUsecs *int64) *GetDataAccessSessionsParams {
	o.SetEndTimeUsecs(endTimeUsecs)
	return o
}

// SetEndTimeUsecs adds the endTimeUsecs to the get data access sessions params
func (o *GetDataAccessSessionsParams) SetEndTimeUsecs(endTimeUsecs *int64) {
	o.EndTimeUsecs = endTimeUsecs
}

// WithPaginationCookie adds the paginationCookie to the get data access sessions params
func (o *GetDataAccessSessionsParams) WithPaginationCookie(paginationCookie *string) *GetDataAccessSessionsParams {
	o.SetPaginationCookie(paginationCookie)
	return o
}

// SetPaginationCookie adds the paginationCookie to the get data access sessions params
func (o *GetDataAccessSessionsParams) SetPaginationCookie(paginationCookie *string) {
	o.PaginationCookie = paginationCookie
}

// WithSessionIds adds the sessionIds to the get data access sessions params
func (o *GetDataAccessSessionsParams) WithSessionIds(sessionIds []string) *GetDataAccessSessionsParams {
	o.SetSessionIds(sessionIds)
	return o
}

// SetSessionIds adds the sessionIds to the get data access sessions params
func (o *GetDataAccessSessionsParams) SetSessionIds(sessionIds []string) {
	o.SessionIds = sessionIds
}

// WithSnapshotEnvironments adds the snapshotEnvironments to the get data access sessions params
func (o *GetDataAccessSessionsParams) WithSnapshotEnvironments(snapshotEnvironments []string) *GetDataAccessSessionsParams {
	o.SetSnapshotEnvironments(snapshotEnvironments)
	return o
}

// SetSnapshotEnvironments adds the snapshotEnvironments to the get data access sessions params
func (o *GetDataAccessSessionsParams) SetSnapshotEnvironments(snapshotEnvironments []string) {
	o.SnapshotEnvironments = snapshotEnvironments
}

// WithStartTimeUsecs adds the startTimeUsecs to the get data access sessions params
func (o *GetDataAccessSessionsParams) WithStartTimeUsecs(startTimeUsecs *int64) *GetDataAccessSessionsParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the get data access sessions params
func (o *GetDataAccessSessionsParams) SetStartTimeUsecs(startTimeUsecs *int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WithStatuses adds the statuses to the get data access sessions params
func (o *GetDataAccessSessionsParams) WithStatuses(statuses []string) *GetDataAccessSessionsParams {
	o.SetStatuses(statuses)
	return o
}

// SetStatuses adds the statuses to the get data access sessions params
func (o *GetDataAccessSessionsParams) SetStatuses(statuses []string) {
	o.Statuses = statuses
}

// WriteToRequest writes these params to a swagger request
func (o *GetDataAccessSessionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.EndTimeUsecs != nil {

		// query param endTimeUsecs
		var qrEndTimeUsecs int64

		if o.EndTimeUsecs != nil {
			qrEndTimeUsecs = *o.EndTimeUsecs
		}
		qEndTimeUsecs := swag.FormatInt64(qrEndTimeUsecs)
		if qEndTimeUsecs != "" {

			if err := r.SetQueryParam("endTimeUsecs", qEndTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.PaginationCookie != nil {

		// query param paginationCookie
		var qrPaginationCookie string

		if o.PaginationCookie != nil {
			qrPaginationCookie = *o.PaginationCookie
		}
		qPaginationCookie := qrPaginationCookie
		if qPaginationCookie != "" {

			if err := r.SetQueryParam("paginationCookie", qPaginationCookie); err != nil {
				return err
			}
		}
	}

	if o.SessionIds != nil {

		// binding items for sessionIds
		joinedSessionIds := o.bindParamSessionIds(reg)

		// query array param sessionIds
		if err := r.SetQueryParam("sessionIds", joinedSessionIds...); err != nil {
			return err
		}
	}

	if o.SnapshotEnvironments != nil {

		// binding items for snapshotEnvironments
		joinedSnapshotEnvironments := o.bindParamSnapshotEnvironments(reg)

		// query array param snapshotEnvironments
		if err := r.SetQueryParam("snapshotEnvironments", joinedSnapshotEnvironments...); err != nil {
			return err
		}
	}

	if o.StartTimeUsecs != nil {

		// query param startTimeUsecs
		var qrStartTimeUsecs int64

		if o.StartTimeUsecs != nil {
			qrStartTimeUsecs = *o.StartTimeUsecs
		}
		qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
		if qStartTimeUsecs != "" {

			if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.Statuses != nil {

		// binding items for statuses
		joinedStatuses := o.bindParamStatuses(reg)

		// query array param statuses
		if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetDataAccessSessions binds the parameter sessionIds
func (o *GetDataAccessSessionsParams) bindParamSessionIds(formats strfmt.Registry) []string {
	sessionIdsIR := o.SessionIds

	var sessionIdsIC []string
	for _, sessionIdsIIR := range sessionIdsIR { // explode []string

		sessionIdsIIV := sessionIdsIIR // string as string
		sessionIdsIC = append(sessionIdsIC, sessionIdsIIV)
	}

	// items.CollectionFormat: ""
	sessionIdsIS := swag.JoinByFormat(sessionIdsIC, "")

	return sessionIdsIS
}

// bindParamGetDataAccessSessions binds the parameter snapshotEnvironments
func (o *GetDataAccessSessionsParams) bindParamSnapshotEnvironments(formats strfmt.Registry) []string {
	snapshotEnvironmentsIR := o.SnapshotEnvironments

	var snapshotEnvironmentsIC []string
	for _, snapshotEnvironmentsIIR := range snapshotEnvironmentsIR { // explode []string

		snapshotEnvironmentsIIV := snapshotEnvironmentsIIR // string as string
		snapshotEnvironmentsIC = append(snapshotEnvironmentsIC, snapshotEnvironmentsIIV)
	}

	// items.CollectionFormat: ""
	snapshotEnvironmentsIS := swag.JoinByFormat(snapshotEnvironmentsIC, "")

	return snapshotEnvironmentsIS
}

// bindParamGetDataAccessSessions binds the parameter statuses
func (o *GetDataAccessSessionsParams) bindParamStatuses(formats strfmt.Registry) []string {
	statusesIR := o.Statuses

	var statusesIC []string
	for _, statusesIIR := range statusesIR { // explode []string

		statusesIIV := statusesIIR // string as string
		statusesIC = append(statusesIC, statusesIIV)
	}

	// items.CollectionFormat: ""
	statusesIS := swag.JoinByFormat(statusesIC, "")

	return statusesIS
}
