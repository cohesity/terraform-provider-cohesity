// Code generated by go-swagger; DO NOT EDIT.

package data_accessor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cohesity/go-sdk/v2/models"
)

// NewGetGraphNodesDetailsParams creates a new GetGraphNodesDetailsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetGraphNodesDetailsParams() *GetGraphNodesDetailsParams {
	return &GetGraphNodesDetailsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetGraphNodesDetailsParamsWithTimeout creates a new GetGraphNodesDetailsParams object
// with the ability to set a timeout on a request.
func NewGetGraphNodesDetailsParamsWithTimeout(timeout time.Duration) *GetGraphNodesDetailsParams {
	return &GetGraphNodesDetailsParams{
		timeout: timeout,
	}
}

// NewGetGraphNodesDetailsParamsWithContext creates a new GetGraphNodesDetailsParams object
// with the ability to set a context for a request.
func NewGetGraphNodesDetailsParamsWithContext(ctx context.Context) *GetGraphNodesDetailsParams {
	return &GetGraphNodesDetailsParams{
		Context: ctx,
	}
}

// NewGetGraphNodesDetailsParamsWithHTTPClient creates a new GetGraphNodesDetailsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetGraphNodesDetailsParamsWithHTTPClient(client *http.Client) *GetGraphNodesDetailsParams {
	return &GetGraphNodesDetailsParams{
		HTTPClient: client,
	}
}

/*
GetGraphNodesDetailsParams contains all the parameters to send to the API endpoint

	for the get graph nodes details operation.

	Typically these are written to a http.Request.
*/
type GetGraphNodesDetailsParams struct {

	/* Body.

	   Specifies the parameters to get node details in the graph for given node ids.
	*/
	Body *models.GetGraphNodeDetailsRequestParams

	/* NodeIds.

	   Specifies the id of the graph node.
	*/
	NodeIds []string

	/* SessionID.

	   Specifies the id of a session.
	*/
	SessionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get graph nodes details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGraphNodesDetailsParams) WithDefaults() *GetGraphNodesDetailsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get graph nodes details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGraphNodesDetailsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) WithTimeout(timeout time.Duration) *GetGraphNodesDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) WithContext(ctx context.Context) *GetGraphNodesDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) WithHTTPClient(client *http.Client) *GetGraphNodesDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) WithBody(body *models.GetGraphNodeDetailsRequestParams) *GetGraphNodesDetailsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) SetBody(body *models.GetGraphNodeDetailsRequestParams) {
	o.Body = body
}

// WithNodeIds adds the nodeIds to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) WithNodeIds(nodeIds []string) *GetGraphNodesDetailsParams {
	o.SetNodeIds(nodeIds)
	return o
}

// SetNodeIds adds the nodeIds to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) SetNodeIds(nodeIds []string) {
	o.NodeIds = nodeIds
}

// WithSessionID adds the sessionID to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) WithSessionID(sessionID string) *GetGraphNodesDetailsParams {
	o.SetSessionID(sessionID)
	return o
}

// SetSessionID adds the sessionId to the get graph nodes details params
func (o *GetGraphNodesDetailsParams) SetSessionID(sessionID string) {
	o.SessionID = sessionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetGraphNodesDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.NodeIds != nil {

		// binding items for nodeIds
		joinedNodeIds := o.bindParamNodeIds(reg)

		// query array param nodeIds
		if err := r.SetQueryParam("nodeIds", joinedNodeIds...); err != nil {
			return err
		}
	}

	// path param sessionId
	if err := r.SetPathParam("sessionId", o.SessionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetGraphNodesDetails binds the parameter nodeIds
func (o *GetGraphNodesDetailsParams) bindParamNodeIds(formats strfmt.Registry) []string {
	nodeIdsIR := o.NodeIds

	var nodeIdsIC []string
	for _, nodeIdsIIR := range nodeIdsIR { // explode []string

		nodeIdsIIV := nodeIdsIIR // string as string
		nodeIdsIC = append(nodeIdsIC, nodeIdsIIV)
	}

	// items.CollectionFormat: ""
	nodeIdsIS := swag.JoinByFormat(nodeIdsIC, "")

	return nodeIdsIS
}
