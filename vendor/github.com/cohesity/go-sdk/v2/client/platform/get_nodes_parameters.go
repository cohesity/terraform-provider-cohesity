// Code generated by go-swagger; DO NOT EDIT.

package platform

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNodesParams creates a new GetNodesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNodesParams() *GetNodesParams {
	return &GetNodesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNodesParamsWithTimeout creates a new GetNodesParams object
// with the ability to set a timeout on a request.
func NewGetNodesParamsWithTimeout(timeout time.Duration) *GetNodesParams {
	return &GetNodesParams{
		timeout: timeout,
	}
}

// NewGetNodesParamsWithContext creates a new GetNodesParams object
// with the ability to set a context for a request.
func NewGetNodesParamsWithContext(ctx context.Context) *GetNodesParams {
	return &GetNodesParams{
		Context: ctx,
	}
}

// NewGetNodesParamsWithHTTPClient creates a new GetNodesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNodesParamsWithHTTPClient(client *http.Client) *GetNodesParams {
	return &GetNodesParams{
		HTTPClient: client,
	}
}

/*
GetNodesParams contains all the parameters to send to the API endpoint

	for the get nodes operation.

	Typically these are written to a http.Request.
*/
type GetNodesParams struct {

	/* ClusterPartitionIds.

	     ClusterPartitionIdList specifies the list of Ids used to filter the
	nodes by specified cluster partition.
	*/
	ClusterPartitionIds []int64

	/* FetchStats.

	     FetchStats is used to specify whether to call Stats service to fetch the
	stats for the nodes. Stats not displayed by default
	*/
	FetchStats *bool

	/* Ids.

	   "List of IDs to be returned. If empty, all nodes are returned."
	*/
	Ids []int64

	/* IncludeMarkedForRemoval.

	     IncludeMarkedForRemoval is used to specify whether to include nodes
	marked for removal.
	*/
	IncludeMarkedForRemoval *bool

	/* IncludeOnlyUnassignedNodes.

	     IncludeOnlyUnassignedNodes will return nodes that are not yet assigned to
	any cluster partition. If this parameter is specified as true and
	ClusterPartitionIdList is also non-empty, then no nodes will be returned.
	*/
	IncludeOnlyUnassignedNodes *bool

	/* ShowSystemDisks.

	   ShowSystemdisks is used to specify whether to display system disks for the nodes. Not populated by default.
	*/
	ShowSystemDisks *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNodesParams) WithDefaults() *GetNodesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNodesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get nodes params
func (o *GetNodesParams) WithTimeout(timeout time.Duration) *GetNodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nodes params
func (o *GetNodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nodes params
func (o *GetNodesParams) WithContext(ctx context.Context) *GetNodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nodes params
func (o *GetNodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nodes params
func (o *GetNodesParams) WithHTTPClient(client *http.Client) *GetNodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nodes params
func (o *GetNodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterPartitionIds adds the clusterPartitionIds to the get nodes params
func (o *GetNodesParams) WithClusterPartitionIds(clusterPartitionIds []int64) *GetNodesParams {
	o.SetClusterPartitionIds(clusterPartitionIds)
	return o
}

// SetClusterPartitionIds adds the clusterPartitionIds to the get nodes params
func (o *GetNodesParams) SetClusterPartitionIds(clusterPartitionIds []int64) {
	o.ClusterPartitionIds = clusterPartitionIds
}

// WithFetchStats adds the fetchStats to the get nodes params
func (o *GetNodesParams) WithFetchStats(fetchStats *bool) *GetNodesParams {
	o.SetFetchStats(fetchStats)
	return o
}

// SetFetchStats adds the fetchStats to the get nodes params
func (o *GetNodesParams) SetFetchStats(fetchStats *bool) {
	o.FetchStats = fetchStats
}

// WithIds adds the ids to the get nodes params
func (o *GetNodesParams) WithIds(ids []int64) *GetNodesParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get nodes params
func (o *GetNodesParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithIncludeMarkedForRemoval adds the includeMarkedForRemoval to the get nodes params
func (o *GetNodesParams) WithIncludeMarkedForRemoval(includeMarkedForRemoval *bool) *GetNodesParams {
	o.SetIncludeMarkedForRemoval(includeMarkedForRemoval)
	return o
}

// SetIncludeMarkedForRemoval adds the includeMarkedForRemoval to the get nodes params
func (o *GetNodesParams) SetIncludeMarkedForRemoval(includeMarkedForRemoval *bool) {
	o.IncludeMarkedForRemoval = includeMarkedForRemoval
}

// WithIncludeOnlyUnassignedNodes adds the includeOnlyUnassignedNodes to the get nodes params
func (o *GetNodesParams) WithIncludeOnlyUnassignedNodes(includeOnlyUnassignedNodes *bool) *GetNodesParams {
	o.SetIncludeOnlyUnassignedNodes(includeOnlyUnassignedNodes)
	return o
}

// SetIncludeOnlyUnassignedNodes adds the includeOnlyUnassignedNodes to the get nodes params
func (o *GetNodesParams) SetIncludeOnlyUnassignedNodes(includeOnlyUnassignedNodes *bool) {
	o.IncludeOnlyUnassignedNodes = includeOnlyUnassignedNodes
}

// WithShowSystemDisks adds the showSystemDisks to the get nodes params
func (o *GetNodesParams) WithShowSystemDisks(showSystemDisks *bool) *GetNodesParams {
	o.SetShowSystemDisks(showSystemDisks)
	return o
}

// SetShowSystemDisks adds the showSystemDisks to the get nodes params
func (o *GetNodesParams) SetShowSystemDisks(showSystemDisks *bool) {
	o.ShowSystemDisks = showSystemDisks
}

// WriteToRequest writes these params to a swagger request
func (o *GetNodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterPartitionIds != nil {

		// binding items for clusterPartitionIds
		joinedClusterPartitionIds := o.bindParamClusterPartitionIds(reg)

		// query array param clusterPartitionIds
		if err := r.SetQueryParam("clusterPartitionIds", joinedClusterPartitionIds...); err != nil {
			return err
		}
	}

	if o.FetchStats != nil {

		// query param fetchStats
		var qrFetchStats bool

		if o.FetchStats != nil {
			qrFetchStats = *o.FetchStats
		}
		qFetchStats := swag.FormatBool(qrFetchStats)
		if qFetchStats != "" {

			if err := r.SetQueryParam("fetchStats", qFetchStats); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IncludeMarkedForRemoval != nil {

		// query param includeMarkedForRemoval
		var qrIncludeMarkedForRemoval bool

		if o.IncludeMarkedForRemoval != nil {
			qrIncludeMarkedForRemoval = *o.IncludeMarkedForRemoval
		}
		qIncludeMarkedForRemoval := swag.FormatBool(qrIncludeMarkedForRemoval)
		if qIncludeMarkedForRemoval != "" {

			if err := r.SetQueryParam("includeMarkedForRemoval", qIncludeMarkedForRemoval); err != nil {
				return err
			}
		}
	}

	if o.IncludeOnlyUnassignedNodes != nil {

		// query param includeOnlyUnassignedNodes
		var qrIncludeOnlyUnassignedNodes bool

		if o.IncludeOnlyUnassignedNodes != nil {
			qrIncludeOnlyUnassignedNodes = *o.IncludeOnlyUnassignedNodes
		}
		qIncludeOnlyUnassignedNodes := swag.FormatBool(qrIncludeOnlyUnassignedNodes)
		if qIncludeOnlyUnassignedNodes != "" {

			if err := r.SetQueryParam("includeOnlyUnassignedNodes", qIncludeOnlyUnassignedNodes); err != nil {
				return err
			}
		}
	}

	if o.ShowSystemDisks != nil {

		// query param showSystemDisks
		var qrShowSystemDisks bool

		if o.ShowSystemDisks != nil {
			qrShowSystemDisks = *o.ShowSystemDisks
		}
		qShowSystemDisks := swag.FormatBool(qrShowSystemDisks)
		if qShowSystemDisks != "" {

			if err := r.SetQueryParam("showSystemDisks", qShowSystemDisks); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetNodes binds the parameter clusterPartitionIds
func (o *GetNodesParams) bindParamClusterPartitionIds(formats strfmt.Registry) []string {
	clusterPartitionIdsIR := o.ClusterPartitionIds

	var clusterPartitionIdsIC []string
	for _, clusterPartitionIdsIIR := range clusterPartitionIdsIR { // explode []int64

		clusterPartitionIdsIIV := swag.FormatInt64(clusterPartitionIdsIIR) // int64 as string
		clusterPartitionIdsIC = append(clusterPartitionIdsIC, clusterPartitionIdsIIV)
	}

	// items.CollectionFormat: ""
	clusterPartitionIdsIS := swag.JoinByFormat(clusterPartitionIdsIC, "")

	return clusterPartitionIdsIS
}

// bindParamGetNodes binds the parameter ids
func (o *GetNodesParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}
