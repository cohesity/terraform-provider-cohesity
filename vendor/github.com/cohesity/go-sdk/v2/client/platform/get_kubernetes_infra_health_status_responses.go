// Code generated by go-swagger; DO NOT EDIT.

package platform

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cohesity/go-sdk/v2/models"
)

// GetKubernetesInfraHealthStatusReader is a Reader for the GetKubernetesInfraHealthStatus structure.
type GetKubernetesInfraHealthStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKubernetesInfraHealthStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKubernetesInfraHealthStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetKubernetesInfraHealthStatusDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetKubernetesInfraHealthStatusOK creates a GetKubernetesInfraHealthStatusOK with default headers values
func NewGetKubernetesInfraHealthStatusOK() *GetKubernetesInfraHealthStatusOK {
	return &GetKubernetesInfraHealthStatusOK{}
}

/*
GetKubernetesInfraHealthStatusOK describes a response with status code 200, with default header values.

Successful response
*/
type GetKubernetesInfraHealthStatusOK struct {
	Payload *models.GetKubernetesStatusResponse
}

// IsSuccess returns true when this get kubernetes infra health status o k response has a 2xx status code
func (o *GetKubernetesInfraHealthStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get kubernetes infra health status o k response has a 3xx status code
func (o *GetKubernetesInfraHealthStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get kubernetes infra health status o k response has a 4xx status code
func (o *GetKubernetesInfraHealthStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get kubernetes infra health status o k response has a 5xx status code
func (o *GetKubernetesInfraHealthStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get kubernetes infra health status o k response a status code equal to that given
func (o *GetKubernetesInfraHealthStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get kubernetes infra health status o k response
func (o *GetKubernetesInfraHealthStatusOK) Code() int {
	return 200
}

func (o *GetKubernetesInfraHealthStatusOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kubernetes/status][%d] getKubernetesInfraHealthStatusOK %s", 200, payload)
}

func (o *GetKubernetesInfraHealthStatusOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kubernetes/status][%d] getKubernetesInfraHealthStatusOK %s", 200, payload)
}

func (o *GetKubernetesInfraHealthStatusOK) GetPayload() *models.GetKubernetesStatusResponse {
	return o.Payload
}

func (o *GetKubernetesInfraHealthStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetKubernetesStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKubernetesInfraHealthStatusDefault creates a GetKubernetesInfraHealthStatusDefault with default headers values
func NewGetKubernetesInfraHealthStatusDefault(code int) *GetKubernetesInfraHealthStatusDefault {
	return &GetKubernetesInfraHealthStatusDefault{
		_statusCode: code,
	}
}

/*
GetKubernetesInfraHealthStatusDefault describes a response with status code -1, with default header values.

Internal Server Error
*/
type GetKubernetesInfraHealthStatusDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get kubernetes infra health status default response has a 2xx status code
func (o *GetKubernetesInfraHealthStatusDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get kubernetes infra health status default response has a 3xx status code
func (o *GetKubernetesInfraHealthStatusDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get kubernetes infra health status default response has a 4xx status code
func (o *GetKubernetesInfraHealthStatusDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get kubernetes infra health status default response has a 5xx status code
func (o *GetKubernetesInfraHealthStatusDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get kubernetes infra health status default response a status code equal to that given
func (o *GetKubernetesInfraHealthStatusDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get kubernetes infra health status default response
func (o *GetKubernetesInfraHealthStatusDefault) Code() int {
	return o._statusCode
}

func (o *GetKubernetesInfraHealthStatusDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kubernetes/status][%d] GetKubernetesInfraHealthStatus default %s", o._statusCode, payload)
}

func (o *GetKubernetesInfraHealthStatusDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kubernetes/status][%d] GetKubernetesInfraHealthStatus default %s", o._statusCode, payload)
}

func (o *GetKubernetesInfraHealthStatusDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetKubernetesInfraHealthStatusDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
