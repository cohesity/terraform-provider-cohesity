// Code generated by go-swagger; DO NOT EDIT.

package platform

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUpgradeCheckGetResultsParams creates a new UpgradeCheckGetResultsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpgradeCheckGetResultsParams() *UpgradeCheckGetResultsParams {
	return &UpgradeCheckGetResultsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpgradeCheckGetResultsParamsWithTimeout creates a new UpgradeCheckGetResultsParams object
// with the ability to set a timeout on a request.
func NewUpgradeCheckGetResultsParamsWithTimeout(timeout time.Duration) *UpgradeCheckGetResultsParams {
	return &UpgradeCheckGetResultsParams{
		timeout: timeout,
	}
}

// NewUpgradeCheckGetResultsParamsWithContext creates a new UpgradeCheckGetResultsParams object
// with the ability to set a context for a request.
func NewUpgradeCheckGetResultsParamsWithContext(ctx context.Context) *UpgradeCheckGetResultsParams {
	return &UpgradeCheckGetResultsParams{
		Context: ctx,
	}
}

// NewUpgradeCheckGetResultsParamsWithHTTPClient creates a new UpgradeCheckGetResultsParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpgradeCheckGetResultsParamsWithHTTPClient(client *http.Client) *UpgradeCheckGetResultsParams {
	return &UpgradeCheckGetResultsParams{
		HTTPClient: client,
	}
}

/*
UpgradeCheckGetResultsParams contains all the parameters to send to the API endpoint

	for the upgrade check get results operation.

	Typically these are written to a http.Request.
*/
type UpgradeCheckGetResultsParams struct {

	/* TestRunInstanceID.

	   Specifies test run instance for which to fetch results

	   Format: int64
	*/
	TestRunInstanceID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upgrade check get results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpgradeCheckGetResultsParams) WithDefaults() *UpgradeCheckGetResultsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upgrade check get results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpgradeCheckGetResultsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the upgrade check get results params
func (o *UpgradeCheckGetResultsParams) WithTimeout(timeout time.Duration) *UpgradeCheckGetResultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upgrade check get results params
func (o *UpgradeCheckGetResultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upgrade check get results params
func (o *UpgradeCheckGetResultsParams) WithContext(ctx context.Context) *UpgradeCheckGetResultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upgrade check get results params
func (o *UpgradeCheckGetResultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upgrade check get results params
func (o *UpgradeCheckGetResultsParams) WithHTTPClient(client *http.Client) *UpgradeCheckGetResultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upgrade check get results params
func (o *UpgradeCheckGetResultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTestRunInstanceID adds the testRunInstanceID to the upgrade check get results params
func (o *UpgradeCheckGetResultsParams) WithTestRunInstanceID(testRunInstanceID int64) *UpgradeCheckGetResultsParams {
	o.SetTestRunInstanceID(testRunInstanceID)
	return o
}

// SetTestRunInstanceID adds the testRunInstanceId to the upgrade check get results params
func (o *UpgradeCheckGetResultsParams) SetTestRunInstanceID(testRunInstanceID int64) {
	o.TestRunInstanceID = testRunInstanceID
}

// WriteToRequest writes these params to a swagger request
func (o *UpgradeCheckGetResultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param testRunInstanceId
	if err := r.SetPathParam("testRunInstanceId", swag.FormatInt64(o.TestRunInstanceID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
