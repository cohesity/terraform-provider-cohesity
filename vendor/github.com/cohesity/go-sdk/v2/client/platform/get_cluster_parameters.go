// Code generated by go-swagger; DO NOT EDIT.

package platform

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetClusterParams creates a new GetClusterParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetClusterParams() *GetClusterParams {
	return &GetClusterParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetClusterParamsWithTimeout creates a new GetClusterParams object
// with the ability to set a timeout on a request.
func NewGetClusterParamsWithTimeout(timeout time.Duration) *GetClusterParams {
	return &GetClusterParams{
		timeout: timeout,
	}
}

// NewGetClusterParamsWithContext creates a new GetClusterParams object
// with the ability to set a context for a request.
func NewGetClusterParamsWithContext(ctx context.Context) *GetClusterParams {
	return &GetClusterParams{
		Context: ctx,
	}
}

// NewGetClusterParamsWithHTTPClient creates a new GetClusterParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetClusterParamsWithHTTPClient(client *http.Client) *GetClusterParams {
	return &GetClusterParams{
		HTTPClient: client,
	}
}

/*
GetClusterParams contains all the parameters to send to the API endpoint

	for the get cluster operation.

	Typically these are written to a http.Request.
*/
type GetClusterParams struct {

	/* FetchEncryptionInfo.

	   If 'true', return encryption information about the Cohesity Cluster.
	*/
	FetchEncryptionInfo *bool

	/* FetchLicenseInfo.

	   If 'true', return licensing information about the Cohesity Cluster.
	*/
	FetchLicenseInfo *bool

	/* FetchMetadataInfo.

	   If 'true', return metadata information about the Cohesity Cluster.
	*/
	FetchMetadataInfo *bool

	/* FetchPatchInfo.

	   If 'true', return patch information about the Cohesity Cluster.
	*/
	FetchPatchInfo *bool

	/* FetchStats.

	   If 'true', also get statistics about the Cohesity Cluster.
	*/
	FetchStats *bool

	/* FetchTimeSeriesSchema.

	   Specifies whether to get time series schema info of the cluster
	*/
	FetchTimeSeriesSchema *bool

	/* FetchUpgradeInfo.

	   If 'true', return upgrade information about the Cohesity Cluster.
	*/
	FetchUpgradeInfo *bool

	/* IncludeMinimumNodesInfo.

	   Specifies whether to include info about minimum failure domains
	*/
	IncludeMinimumNodesInfo *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetClusterParams) WithDefaults() *GetClusterParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetClusterParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get cluster params
func (o *GetClusterParams) WithTimeout(timeout time.Duration) *GetClusterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cluster params
func (o *GetClusterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cluster params
func (o *GetClusterParams) WithContext(ctx context.Context) *GetClusterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cluster params
func (o *GetClusterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cluster params
func (o *GetClusterParams) WithHTTPClient(client *http.Client) *GetClusterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cluster params
func (o *GetClusterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFetchEncryptionInfo adds the fetchEncryptionInfo to the get cluster params
func (o *GetClusterParams) WithFetchEncryptionInfo(fetchEncryptionInfo *bool) *GetClusterParams {
	o.SetFetchEncryptionInfo(fetchEncryptionInfo)
	return o
}

// SetFetchEncryptionInfo adds the fetchEncryptionInfo to the get cluster params
func (o *GetClusterParams) SetFetchEncryptionInfo(fetchEncryptionInfo *bool) {
	o.FetchEncryptionInfo = fetchEncryptionInfo
}

// WithFetchLicenseInfo adds the fetchLicenseInfo to the get cluster params
func (o *GetClusterParams) WithFetchLicenseInfo(fetchLicenseInfo *bool) *GetClusterParams {
	o.SetFetchLicenseInfo(fetchLicenseInfo)
	return o
}

// SetFetchLicenseInfo adds the fetchLicenseInfo to the get cluster params
func (o *GetClusterParams) SetFetchLicenseInfo(fetchLicenseInfo *bool) {
	o.FetchLicenseInfo = fetchLicenseInfo
}

// WithFetchMetadataInfo adds the fetchMetadataInfo to the get cluster params
func (o *GetClusterParams) WithFetchMetadataInfo(fetchMetadataInfo *bool) *GetClusterParams {
	o.SetFetchMetadataInfo(fetchMetadataInfo)
	return o
}

// SetFetchMetadataInfo adds the fetchMetadataInfo to the get cluster params
func (o *GetClusterParams) SetFetchMetadataInfo(fetchMetadataInfo *bool) {
	o.FetchMetadataInfo = fetchMetadataInfo
}

// WithFetchPatchInfo adds the fetchPatchInfo to the get cluster params
func (o *GetClusterParams) WithFetchPatchInfo(fetchPatchInfo *bool) *GetClusterParams {
	o.SetFetchPatchInfo(fetchPatchInfo)
	return o
}

// SetFetchPatchInfo adds the fetchPatchInfo to the get cluster params
func (o *GetClusterParams) SetFetchPatchInfo(fetchPatchInfo *bool) {
	o.FetchPatchInfo = fetchPatchInfo
}

// WithFetchStats adds the fetchStats to the get cluster params
func (o *GetClusterParams) WithFetchStats(fetchStats *bool) *GetClusterParams {
	o.SetFetchStats(fetchStats)
	return o
}

// SetFetchStats adds the fetchStats to the get cluster params
func (o *GetClusterParams) SetFetchStats(fetchStats *bool) {
	o.FetchStats = fetchStats
}

// WithFetchTimeSeriesSchema adds the fetchTimeSeriesSchema to the get cluster params
func (o *GetClusterParams) WithFetchTimeSeriesSchema(fetchTimeSeriesSchema *bool) *GetClusterParams {
	o.SetFetchTimeSeriesSchema(fetchTimeSeriesSchema)
	return o
}

// SetFetchTimeSeriesSchema adds the fetchTimeSeriesSchema to the get cluster params
func (o *GetClusterParams) SetFetchTimeSeriesSchema(fetchTimeSeriesSchema *bool) {
	o.FetchTimeSeriesSchema = fetchTimeSeriesSchema
}

// WithFetchUpgradeInfo adds the fetchUpgradeInfo to the get cluster params
func (o *GetClusterParams) WithFetchUpgradeInfo(fetchUpgradeInfo *bool) *GetClusterParams {
	o.SetFetchUpgradeInfo(fetchUpgradeInfo)
	return o
}

// SetFetchUpgradeInfo adds the fetchUpgradeInfo to the get cluster params
func (o *GetClusterParams) SetFetchUpgradeInfo(fetchUpgradeInfo *bool) {
	o.FetchUpgradeInfo = fetchUpgradeInfo
}

// WithIncludeMinimumNodesInfo adds the includeMinimumNodesInfo to the get cluster params
func (o *GetClusterParams) WithIncludeMinimumNodesInfo(includeMinimumNodesInfo *bool) *GetClusterParams {
	o.SetIncludeMinimumNodesInfo(includeMinimumNodesInfo)
	return o
}

// SetIncludeMinimumNodesInfo adds the includeMinimumNodesInfo to the get cluster params
func (o *GetClusterParams) SetIncludeMinimumNodesInfo(includeMinimumNodesInfo *bool) {
	o.IncludeMinimumNodesInfo = includeMinimumNodesInfo
}

// WriteToRequest writes these params to a swagger request
func (o *GetClusterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FetchEncryptionInfo != nil {

		// query param fetchEncryptionInfo
		var qrFetchEncryptionInfo bool

		if o.FetchEncryptionInfo != nil {
			qrFetchEncryptionInfo = *o.FetchEncryptionInfo
		}
		qFetchEncryptionInfo := swag.FormatBool(qrFetchEncryptionInfo)
		if qFetchEncryptionInfo != "" {

			if err := r.SetQueryParam("fetchEncryptionInfo", qFetchEncryptionInfo); err != nil {
				return err
			}
		}
	}

	if o.FetchLicenseInfo != nil {

		// query param fetchLicenseInfo
		var qrFetchLicenseInfo bool

		if o.FetchLicenseInfo != nil {
			qrFetchLicenseInfo = *o.FetchLicenseInfo
		}
		qFetchLicenseInfo := swag.FormatBool(qrFetchLicenseInfo)
		if qFetchLicenseInfo != "" {

			if err := r.SetQueryParam("fetchLicenseInfo", qFetchLicenseInfo); err != nil {
				return err
			}
		}
	}

	if o.FetchMetadataInfo != nil {

		// query param fetchMetadataInfo
		var qrFetchMetadataInfo bool

		if o.FetchMetadataInfo != nil {
			qrFetchMetadataInfo = *o.FetchMetadataInfo
		}
		qFetchMetadataInfo := swag.FormatBool(qrFetchMetadataInfo)
		if qFetchMetadataInfo != "" {

			if err := r.SetQueryParam("fetchMetadataInfo", qFetchMetadataInfo); err != nil {
				return err
			}
		}
	}

	if o.FetchPatchInfo != nil {

		// query param fetchPatchInfo
		var qrFetchPatchInfo bool

		if o.FetchPatchInfo != nil {
			qrFetchPatchInfo = *o.FetchPatchInfo
		}
		qFetchPatchInfo := swag.FormatBool(qrFetchPatchInfo)
		if qFetchPatchInfo != "" {

			if err := r.SetQueryParam("fetchPatchInfo", qFetchPatchInfo); err != nil {
				return err
			}
		}
	}

	if o.FetchStats != nil {

		// query param fetchStats
		var qrFetchStats bool

		if o.FetchStats != nil {
			qrFetchStats = *o.FetchStats
		}
		qFetchStats := swag.FormatBool(qrFetchStats)
		if qFetchStats != "" {

			if err := r.SetQueryParam("fetchStats", qFetchStats); err != nil {
				return err
			}
		}
	}

	if o.FetchTimeSeriesSchema != nil {

		// query param fetchTimeSeriesSchema
		var qrFetchTimeSeriesSchema bool

		if o.FetchTimeSeriesSchema != nil {
			qrFetchTimeSeriesSchema = *o.FetchTimeSeriesSchema
		}
		qFetchTimeSeriesSchema := swag.FormatBool(qrFetchTimeSeriesSchema)
		if qFetchTimeSeriesSchema != "" {

			if err := r.SetQueryParam("fetchTimeSeriesSchema", qFetchTimeSeriesSchema); err != nil {
				return err
			}
		}
	}

	if o.FetchUpgradeInfo != nil {

		// query param fetchUpgradeInfo
		var qrFetchUpgradeInfo bool

		if o.FetchUpgradeInfo != nil {
			qrFetchUpgradeInfo = *o.FetchUpgradeInfo
		}
		qFetchUpgradeInfo := swag.FormatBool(qrFetchUpgradeInfo)
		if qFetchUpgradeInfo != "" {

			if err := r.SetQueryParam("fetchUpgradeInfo", qFetchUpgradeInfo); err != nil {
				return err
			}
		}
	}

	if o.IncludeMinimumNodesInfo != nil {

		// query param includeMinimumNodesInfo
		var qrIncludeMinimumNodesInfo bool

		if o.IncludeMinimumNodesInfo != nil {
			qrIncludeMinimumNodesInfo = *o.IncludeMinimumNodesInfo
		}
		qIncludeMinimumNodesInfo := swag.FormatBool(qrIncludeMinimumNodesInfo)
		if qIncludeMinimumNodesInfo != "" {

			if err := r.SetQueryParam("includeMinimumNodesInfo", qIncludeMinimumNodesInfo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
