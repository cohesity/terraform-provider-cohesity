// Code generated by go-swagger; DO NOT EDIT.

package platform

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNodeInformationParams creates a new NodeInformationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNodeInformationParams() *NodeInformationParams {
	return &NodeInformationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNodeInformationParamsWithTimeout creates a new NodeInformationParams object
// with the ability to set a timeout on a request.
func NewNodeInformationParamsWithTimeout(timeout time.Duration) *NodeInformationParams {
	return &NodeInformationParams{
		timeout: timeout,
	}
}

// NewNodeInformationParamsWithContext creates a new NodeInformationParams object
// with the ability to set a context for a request.
func NewNodeInformationParamsWithContext(ctx context.Context) *NodeInformationParams {
	return &NodeInformationParams{
		Context: ctx,
	}
}

// NewNodeInformationParamsWithHTTPClient creates a new NodeInformationParams object
// with the ability to set a custom HTTPClient for a request.
func NewNodeInformationParamsWithHTTPClient(client *http.Client) *NodeInformationParams {
	return &NodeInformationParams{
		HTTPClient: client,
	}
}

/*
NodeInformationParams contains all the parameters to send to the API endpoint

	for the node information operation.

	Typically these are written to a http.Request.
*/
type NodeInformationParams struct {

	/* ShowServicesVersionInfo.

	   Specifies whether to show version info of the services running on the node.
	*/
	ShowServicesVersionInfo *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the node information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeInformationParams) WithDefaults() *NodeInformationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the node information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeInformationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the node information params
func (o *NodeInformationParams) WithTimeout(timeout time.Duration) *NodeInformationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the node information params
func (o *NodeInformationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the node information params
func (o *NodeInformationParams) WithContext(ctx context.Context) *NodeInformationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the node information params
func (o *NodeInformationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the node information params
func (o *NodeInformationParams) WithHTTPClient(client *http.Client) *NodeInformationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the node information params
func (o *NodeInformationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithShowServicesVersionInfo adds the showServicesVersionInfo to the node information params
func (o *NodeInformationParams) WithShowServicesVersionInfo(showServicesVersionInfo *bool) *NodeInformationParams {
	o.SetShowServicesVersionInfo(showServicesVersionInfo)
	return o
}

// SetShowServicesVersionInfo adds the showServicesVersionInfo to the node information params
func (o *NodeInformationParams) SetShowServicesVersionInfo(showServicesVersionInfo *bool) {
	o.ShowServicesVersionInfo = showServicesVersionInfo
}

// WriteToRequest writes these params to a swagger request
func (o *NodeInformationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ShowServicesVersionInfo != nil {

		// query param showServicesVersionInfo
		var qrShowServicesVersionInfo bool

		if o.ShowServicesVersionInfo != nil {
			qrShowServicesVersionInfo = *o.ShowServicesVersionInfo
		}
		qShowServicesVersionInfo := swag.FormatBool(qrShowServicesVersionInfo)
		if qShowServicesVersionInfo != "" {

			if err := r.SetQueryParam("showServicesVersionInfo", qShowServicesVersionInfo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
