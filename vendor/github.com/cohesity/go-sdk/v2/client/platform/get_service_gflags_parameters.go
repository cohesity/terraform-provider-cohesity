// Code generated by go-swagger; DO NOT EDIT.

package platform

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetServiceGflagsParams creates a new GetServiceGflagsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetServiceGflagsParams() *GetServiceGflagsParams {
	return &GetServiceGflagsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetServiceGflagsParamsWithTimeout creates a new GetServiceGflagsParams object
// with the ability to set a timeout on a request.
func NewGetServiceGflagsParamsWithTimeout(timeout time.Duration) *GetServiceGflagsParams {
	return &GetServiceGflagsParams{
		timeout: timeout,
	}
}

// NewGetServiceGflagsParamsWithContext creates a new GetServiceGflagsParams object
// with the ability to set a context for a request.
func NewGetServiceGflagsParamsWithContext(ctx context.Context) *GetServiceGflagsParams {
	return &GetServiceGflagsParams{
		Context: ctx,
	}
}

// NewGetServiceGflagsParamsWithHTTPClient creates a new GetServiceGflagsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetServiceGflagsParamsWithHTTPClient(client *http.Client) *GetServiceGflagsParams {
	return &GetServiceGflagsParams{
		HTTPClient: client,
	}
}

/*
GetServiceGflagsParams contains all the parameters to send to the API endpoint

	for the get service gflags operation.

	Typically these are written to a http.Request.
*/
type GetServiceGflagsParams struct {

	/* Gflags.

	   "Specifies a list of gflag names. If specified, only gflags matching the gflag name list will be returned."
	*/
	Gflags []string

	/* ServiceName.

	   Specifies the service name. If specified, only gflags matching the service name will be returned.
	*/
	ServiceName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get service gflags params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetServiceGflagsParams) WithDefaults() *GetServiceGflagsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get service gflags params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetServiceGflagsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get service gflags params
func (o *GetServiceGflagsParams) WithTimeout(timeout time.Duration) *GetServiceGflagsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get service gflags params
func (o *GetServiceGflagsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get service gflags params
func (o *GetServiceGflagsParams) WithContext(ctx context.Context) *GetServiceGflagsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get service gflags params
func (o *GetServiceGflagsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get service gflags params
func (o *GetServiceGflagsParams) WithHTTPClient(client *http.Client) *GetServiceGflagsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get service gflags params
func (o *GetServiceGflagsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGflags adds the gflags to the get service gflags params
func (o *GetServiceGflagsParams) WithGflags(gflags []string) *GetServiceGflagsParams {
	o.SetGflags(gflags)
	return o
}

// SetGflags adds the gflags to the get service gflags params
func (o *GetServiceGflagsParams) SetGflags(gflags []string) {
	o.Gflags = gflags
}

// WithServiceName adds the serviceName to the get service gflags params
func (o *GetServiceGflagsParams) WithServiceName(serviceName *string) *GetServiceGflagsParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the get service gflags params
func (o *GetServiceGflagsParams) SetServiceName(serviceName *string) {
	o.ServiceName = serviceName
}

// WriteToRequest writes these params to a swagger request
func (o *GetServiceGflagsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Gflags != nil {

		// binding items for gflags
		joinedGflags := o.bindParamGflags(reg)

		// query array param gflags
		if err := r.SetQueryParam("gflags", joinedGflags...); err != nil {
			return err
		}
	}

	if o.ServiceName != nil {

		// query param serviceName
		var qrServiceName string

		if o.ServiceName != nil {
			qrServiceName = *o.ServiceName
		}
		qServiceName := qrServiceName
		if qServiceName != "" {

			if err := r.SetQueryParam("serviceName", qServiceName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetServiceGflags binds the parameter gflags
func (o *GetServiceGflagsParams) bindParamGflags(formats strfmt.Registry) []string {
	gflagsIR := o.Gflags

	var gflagsIC []string
	for _, gflagsIIR := range gflagsIR { // explode []string

		gflagsIIV := gflagsIIR // string as string
		gflagsIC = append(gflagsIC, gflagsIIV)
	}

	// items.CollectionFormat: ""
	gflagsIS := swag.JoinByFormat(gflagsIC, "")

	return gflagsIS
}
