// Code generated by go-swagger; DO NOT EDIT.

package platform

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRemoteDisksParams creates a new GetRemoteDisksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRemoteDisksParams() *GetRemoteDisksParams {
	return &GetRemoteDisksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRemoteDisksParamsWithTimeout creates a new GetRemoteDisksParams object
// with the ability to set a timeout on a request.
func NewGetRemoteDisksParamsWithTimeout(timeout time.Duration) *GetRemoteDisksParams {
	return &GetRemoteDisksParams{
		timeout: timeout,
	}
}

// NewGetRemoteDisksParamsWithContext creates a new GetRemoteDisksParams object
// with the ability to set a context for a request.
func NewGetRemoteDisksParamsWithContext(ctx context.Context) *GetRemoteDisksParams {
	return &GetRemoteDisksParams{
		Context: ctx,
	}
}

// NewGetRemoteDisksParamsWithHTTPClient creates a new GetRemoteDisksParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRemoteDisksParamsWithHTTPClient(client *http.Client) *GetRemoteDisksParams {
	return &GetRemoteDisksParams{
		HTTPClient: client,
	}
}

/*
GetRemoteDisksParams contains all the parameters to send to the API endpoint

	for the get remote disks operation.

	Typically these are written to a http.Request.
*/
type GetRemoteDisksParams struct {

	/* DiskIds.

	   Specifies a list of disk ids, only disks having these ids will be returned.
	*/
	DiskIds []int64

	/* FileSystem.

	   Specified file system name to search. only disks with file system name that partially matches the specified name will be returned.
	*/
	FileSystem *string

	/* MountPath.

	   This field is deprecated. Providing this queryparam will not have any impact. Please use fileSystem query param to filter instead.
	*/
	MountPath *string

	/* NodeIds.

	   Specifies a list of node ids, only disks in these nodes will be returned.
	*/
	NodeIds []int64

	/* Tiers.

	   Specifies a list of disk tiers, only disks with given tiers will be returned.
	*/
	Tiers []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get remote disks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRemoteDisksParams) WithDefaults() *GetRemoteDisksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get remote disks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRemoteDisksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get remote disks params
func (o *GetRemoteDisksParams) WithTimeout(timeout time.Duration) *GetRemoteDisksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get remote disks params
func (o *GetRemoteDisksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get remote disks params
func (o *GetRemoteDisksParams) WithContext(ctx context.Context) *GetRemoteDisksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get remote disks params
func (o *GetRemoteDisksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get remote disks params
func (o *GetRemoteDisksParams) WithHTTPClient(client *http.Client) *GetRemoteDisksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get remote disks params
func (o *GetRemoteDisksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDiskIds adds the diskIds to the get remote disks params
func (o *GetRemoteDisksParams) WithDiskIds(diskIds []int64) *GetRemoteDisksParams {
	o.SetDiskIds(diskIds)
	return o
}

// SetDiskIds adds the diskIds to the get remote disks params
func (o *GetRemoteDisksParams) SetDiskIds(diskIds []int64) {
	o.DiskIds = diskIds
}

// WithFileSystem adds the fileSystem to the get remote disks params
func (o *GetRemoteDisksParams) WithFileSystem(fileSystem *string) *GetRemoteDisksParams {
	o.SetFileSystem(fileSystem)
	return o
}

// SetFileSystem adds the fileSystem to the get remote disks params
func (o *GetRemoteDisksParams) SetFileSystem(fileSystem *string) {
	o.FileSystem = fileSystem
}

// WithMountPath adds the mountPath to the get remote disks params
func (o *GetRemoteDisksParams) WithMountPath(mountPath *string) *GetRemoteDisksParams {
	o.SetMountPath(mountPath)
	return o
}

// SetMountPath adds the mountPath to the get remote disks params
func (o *GetRemoteDisksParams) SetMountPath(mountPath *string) {
	o.MountPath = mountPath
}

// WithNodeIds adds the nodeIds to the get remote disks params
func (o *GetRemoteDisksParams) WithNodeIds(nodeIds []int64) *GetRemoteDisksParams {
	o.SetNodeIds(nodeIds)
	return o
}

// SetNodeIds adds the nodeIds to the get remote disks params
func (o *GetRemoteDisksParams) SetNodeIds(nodeIds []int64) {
	o.NodeIds = nodeIds
}

// WithTiers adds the tiers to the get remote disks params
func (o *GetRemoteDisksParams) WithTiers(tiers []string) *GetRemoteDisksParams {
	o.SetTiers(tiers)
	return o
}

// SetTiers adds the tiers to the get remote disks params
func (o *GetRemoteDisksParams) SetTiers(tiers []string) {
	o.Tiers = tiers
}

// WriteToRequest writes these params to a swagger request
func (o *GetRemoteDisksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DiskIds != nil {

		// binding items for diskIds
		joinedDiskIds := o.bindParamDiskIds(reg)

		// query array param diskIds
		if err := r.SetQueryParam("diskIds", joinedDiskIds...); err != nil {
			return err
		}
	}

	if o.FileSystem != nil {

		// query param fileSystem
		var qrFileSystem string

		if o.FileSystem != nil {
			qrFileSystem = *o.FileSystem
		}
		qFileSystem := qrFileSystem
		if qFileSystem != "" {

			if err := r.SetQueryParam("fileSystem", qFileSystem); err != nil {
				return err
			}
		}
	}

	if o.MountPath != nil {

		// query param mountPath
		var qrMountPath string

		if o.MountPath != nil {
			qrMountPath = *o.MountPath
		}
		qMountPath := qrMountPath
		if qMountPath != "" {

			if err := r.SetQueryParam("mountPath", qMountPath); err != nil {
				return err
			}
		}
	}

	if o.NodeIds != nil {

		// binding items for nodeIds
		joinedNodeIds := o.bindParamNodeIds(reg)

		// query array param nodeIds
		if err := r.SetQueryParam("nodeIds", joinedNodeIds...); err != nil {
			return err
		}
	}

	if o.Tiers != nil {

		// binding items for tiers
		joinedTiers := o.bindParamTiers(reg)

		// query array param tiers
		if err := r.SetQueryParam("tiers", joinedTiers...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetRemoteDisks binds the parameter diskIds
func (o *GetRemoteDisksParams) bindParamDiskIds(formats strfmt.Registry) []string {
	diskIdsIR := o.DiskIds

	var diskIdsIC []string
	for _, diskIdsIIR := range diskIdsIR { // explode []int64

		diskIdsIIV := swag.FormatInt64(diskIdsIIR) // int64 as string
		diskIdsIC = append(diskIdsIC, diskIdsIIV)
	}

	// items.CollectionFormat: ""
	diskIdsIS := swag.JoinByFormat(diskIdsIC, "")

	return diskIdsIS
}

// bindParamGetRemoteDisks binds the parameter nodeIds
func (o *GetRemoteDisksParams) bindParamNodeIds(formats strfmt.Registry) []string {
	nodeIdsIR := o.NodeIds

	var nodeIdsIC []string
	for _, nodeIdsIIR := range nodeIdsIR { // explode []int64

		nodeIdsIIV := swag.FormatInt64(nodeIdsIIR) // int64 as string
		nodeIdsIC = append(nodeIdsIC, nodeIdsIIV)
	}

	// items.CollectionFormat: ""
	nodeIdsIS := swag.JoinByFormat(nodeIdsIC, "")

	return nodeIdsIS
}

// bindParamGetRemoteDisks binds the parameter tiers
func (o *GetRemoteDisksParams) bindParamTiers(formats strfmt.Registry) []string {
	tiersIR := o.Tiers

	var tiersIC []string
	for _, tiersIIR := range tiersIR { // explode []string

		tiersIIV := tiersIIR // string as string
		tiersIC = append(tiersIC, tiersIIV)
	}

	// items.CollectionFormat: ""
	tiersIS := swag.JoinByFormat(tiersIC, "")

	return tiersIS
}
