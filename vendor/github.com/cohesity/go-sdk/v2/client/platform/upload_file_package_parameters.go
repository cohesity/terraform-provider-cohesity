// Code generated by go-swagger; DO NOT EDIT.

package platform

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUploadFilePackageParams creates a new UploadFilePackageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadFilePackageParams() *UploadFilePackageParams {
	return &UploadFilePackageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadFilePackageParamsWithTimeout creates a new UploadFilePackageParams object
// with the ability to set a timeout on a request.
func NewUploadFilePackageParamsWithTimeout(timeout time.Duration) *UploadFilePackageParams {
	return &UploadFilePackageParams{
		timeout: timeout,
	}
}

// NewUploadFilePackageParamsWithContext creates a new UploadFilePackageParams object
// with the ability to set a context for a request.
func NewUploadFilePackageParamsWithContext(ctx context.Context) *UploadFilePackageParams {
	return &UploadFilePackageParams{
		Context: ctx,
	}
}

// NewUploadFilePackageParamsWithHTTPClient creates a new UploadFilePackageParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadFilePackageParamsWithHTTPClient(client *http.Client) *UploadFilePackageParams {
	return &UploadFilePackageParams{
		HTTPClient: client,
	}
}

/*
UploadFilePackageParams contains all the parameters to send to the API endpoint

	for the upload file package operation.

	Typically these are written to a http.Request.
*/
type UploadFilePackageParams struct {

	/* PackageFile.

	   Binary content of the file.
	*/
	PackageFile runtime.NamedReadCloser

	/* PackageType.

	   Package Type.

	   Default: "Upgrade"
	*/
	PackageType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload file package params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFilePackageParams) WithDefaults() *UploadFilePackageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload file package params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFilePackageParams) SetDefaults() {
	var (
		packageTypeDefault = string("Upgrade")
	)

	val := UploadFilePackageParams{
		PackageType: &packageTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the upload file package params
func (o *UploadFilePackageParams) WithTimeout(timeout time.Duration) *UploadFilePackageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload file package params
func (o *UploadFilePackageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload file package params
func (o *UploadFilePackageParams) WithContext(ctx context.Context) *UploadFilePackageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload file package params
func (o *UploadFilePackageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload file package params
func (o *UploadFilePackageParams) WithHTTPClient(client *http.Client) *UploadFilePackageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload file package params
func (o *UploadFilePackageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPackageFile adds the packageFile to the upload file package params
func (o *UploadFilePackageParams) WithPackageFile(packageFile runtime.NamedReadCloser) *UploadFilePackageParams {
	o.SetPackageFile(packageFile)
	return o
}

// SetPackageFile adds the packageFile to the upload file package params
func (o *UploadFilePackageParams) SetPackageFile(packageFile runtime.NamedReadCloser) {
	o.PackageFile = packageFile
}

// WithPackageType adds the packageType to the upload file package params
func (o *UploadFilePackageParams) WithPackageType(packageType *string) *UploadFilePackageParams {
	o.SetPackageType(packageType)
	return o
}

// SetPackageType adds the packageType to the upload file package params
func (o *UploadFilePackageParams) SetPackageType(packageType *string) {
	o.PackageType = packageType
}

// WriteToRequest writes these params to a swagger request
func (o *UploadFilePackageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param packageFile
	if err := r.SetFileParam("packageFile", o.PackageFile); err != nil {
		return err
	}

	if o.PackageType != nil {

		// query param packageType
		var qrPackageType string

		if o.PackageType != nil {
			qrPackageType = *o.PackageType
		}
		qPackageType := qrPackageType
		if qPackageType != "" {

			if err := r.SetQueryParam("packageType", qPackageType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
