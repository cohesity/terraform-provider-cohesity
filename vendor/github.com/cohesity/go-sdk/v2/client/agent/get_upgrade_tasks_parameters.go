// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUpgradeTasksParams creates a new GetUpgradeTasksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUpgradeTasksParams() *GetUpgradeTasksParams {
	return &GetUpgradeTasksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUpgradeTasksParamsWithTimeout creates a new GetUpgradeTasksParams object
// with the ability to set a timeout on a request.
func NewGetUpgradeTasksParamsWithTimeout(timeout time.Duration) *GetUpgradeTasksParams {
	return &GetUpgradeTasksParams{
		timeout: timeout,
	}
}

// NewGetUpgradeTasksParamsWithContext creates a new GetUpgradeTasksParams object
// with the ability to set a context for a request.
func NewGetUpgradeTasksParamsWithContext(ctx context.Context) *GetUpgradeTasksParams {
	return &GetUpgradeTasksParams{
		Context: ctx,
	}
}

// NewGetUpgradeTasksParamsWithHTTPClient creates a new GetUpgradeTasksParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUpgradeTasksParamsWithHTTPClient(client *http.Client) *GetUpgradeTasksParams {
	return &GetUpgradeTasksParams{
		HTTPClient: client,
	}
}

/*
GetUpgradeTasksParams contains all the parameters to send to the API endpoint

	for the get upgrade tasks operation.

	Typically these are written to a http.Request.
*/
type GetUpgradeTasksParams struct {

	/* Ids.

	   Specifies IDs of tasks to be fetched.
	*/
	Ids []int64

	/* IncludeTenants.

	   If true, the response will include upgrade tasks which were created by all tenants which the current user has permission to see. If false, then only upgrade tasks created by the current user will be returned.
	*/
	IncludeTenants *bool

	/* TenantIds.

	   TenantIds contains ids of the tenants for which objects are to be returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get upgrade tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUpgradeTasksParams) WithDefaults() *GetUpgradeTasksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get upgrade tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUpgradeTasksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get upgrade tasks params
func (o *GetUpgradeTasksParams) WithTimeout(timeout time.Duration) *GetUpgradeTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get upgrade tasks params
func (o *GetUpgradeTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get upgrade tasks params
func (o *GetUpgradeTasksParams) WithContext(ctx context.Context) *GetUpgradeTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get upgrade tasks params
func (o *GetUpgradeTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get upgrade tasks params
func (o *GetUpgradeTasksParams) WithHTTPClient(client *http.Client) *GetUpgradeTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get upgrade tasks params
func (o *GetUpgradeTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the get upgrade tasks params
func (o *GetUpgradeTasksParams) WithIds(ids []int64) *GetUpgradeTasksParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get upgrade tasks params
func (o *GetUpgradeTasksParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithIncludeTenants adds the includeTenants to the get upgrade tasks params
func (o *GetUpgradeTasksParams) WithIncludeTenants(includeTenants *bool) *GetUpgradeTasksParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the get upgrade tasks params
func (o *GetUpgradeTasksParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithTenantIds adds the tenantIds to the get upgrade tasks params
func (o *GetUpgradeTasksParams) WithTenantIds(tenantIds []string) *GetUpgradeTasksParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get upgrade tasks params
func (o *GetUpgradeTasksParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetUpgradeTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetUpgradeTasks binds the parameter ids
func (o *GetUpgradeTasksParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetUpgradeTasks binds the parameter tenantIds
func (o *GetUpgradeTasksParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
