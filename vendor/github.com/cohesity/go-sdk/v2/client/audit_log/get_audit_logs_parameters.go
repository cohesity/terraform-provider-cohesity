// Code generated by go-swagger; DO NOT EDIT.

package audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAuditLogsParams creates a new GetAuditLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAuditLogsParams() *GetAuditLogsParams {
	return &GetAuditLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuditLogsParamsWithTimeout creates a new GetAuditLogsParams object
// with the ability to set a timeout on a request.
func NewGetAuditLogsParamsWithTimeout(timeout time.Duration) *GetAuditLogsParams {
	return &GetAuditLogsParams{
		timeout: timeout,
	}
}

// NewGetAuditLogsParamsWithContext creates a new GetAuditLogsParams object
// with the ability to set a context for a request.
func NewGetAuditLogsParamsWithContext(ctx context.Context) *GetAuditLogsParams {
	return &GetAuditLogsParams{
		Context: ctx,
	}
}

// NewGetAuditLogsParamsWithHTTPClient creates a new GetAuditLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAuditLogsParamsWithHTTPClient(client *http.Client) *GetAuditLogsParams {
	return &GetAuditLogsParams{
		HTTPClient: client,
	}
}

/*
GetAuditLogsParams contains all the parameters to send to the API endpoint

	for the get audit logs operation.

	Typically these are written to a http.Request.
*/
type GetAuditLogsParams struct {

	/* Actions.

	   Specifies a list of actions, only audit logs containing these actions will be returned.
	*/
	Actions []string

	/* Count.

	   Specifies the number of indexed obejcts to be fetched from the specified start index.

	   Format: int64
	*/
	Count *int64

	/* Domains.

	   Specifies a list of domains, only audit logs made by user in these domains will be returned.
	*/
	Domains []string

	/* EndTimeUsecs.

	   Specifies a unix timestamp in microseconds, only audit logs made before this time will be returned.

	   Format: int64
	*/
	EndTimeUsecs *int64

	/* EntityTypes.

	   Specifies a list of entity types, only audit logs containing these entity types will be returned.
	*/
	EntityTypes []string

	/* IncludeTenants.

	   If true, the response will include Protection Groups which were created by all tenants which the current user has permission to see. If false, then only Protection Groups created by the current user will be returned.
	*/
	IncludeTenants *bool

	/* SearchString.

	   Search audit logs by 'entityName' or 'details'.
	*/
	SearchString *string

	/* StartIndex.

	   Specifies a start index. The oldest logs before this index will skipped, only audit logs from this index will be fetched.

	   Format: int64
	*/
	StartIndex *int64

	/* StartTimeUsecs.

	   Specifies a unix timestamp in microseconds, only audit logs made after this time will be returned.

	   Format: int64
	*/
	StartTimeUsecs *int64

	/* TenantIds.

	   Specifies a list of tenant ids, only audit logs made by these tenants will be returned.
	*/
	TenantIds []string

	/* Usernames.

	   Specifies a list of usernames, only audit logs made by these users will be returned.
	*/
	Usernames []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get audit logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditLogsParams) WithDefaults() *GetAuditLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get audit logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get audit logs params
func (o *GetAuditLogsParams) WithTimeout(timeout time.Duration) *GetAuditLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get audit logs params
func (o *GetAuditLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get audit logs params
func (o *GetAuditLogsParams) WithContext(ctx context.Context) *GetAuditLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get audit logs params
func (o *GetAuditLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get audit logs params
func (o *GetAuditLogsParams) WithHTTPClient(client *http.Client) *GetAuditLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get audit logs params
func (o *GetAuditLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActions adds the actions to the get audit logs params
func (o *GetAuditLogsParams) WithActions(actions []string) *GetAuditLogsParams {
	o.SetActions(actions)
	return o
}

// SetActions adds the actions to the get audit logs params
func (o *GetAuditLogsParams) SetActions(actions []string) {
	o.Actions = actions
}

// WithCount adds the count to the get audit logs params
func (o *GetAuditLogsParams) WithCount(count *int64) *GetAuditLogsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get audit logs params
func (o *GetAuditLogsParams) SetCount(count *int64) {
	o.Count = count
}

// WithDomains adds the domains to the get audit logs params
func (o *GetAuditLogsParams) WithDomains(domains []string) *GetAuditLogsParams {
	o.SetDomains(domains)
	return o
}

// SetDomains adds the domains to the get audit logs params
func (o *GetAuditLogsParams) SetDomains(domains []string) {
	o.Domains = domains
}

// WithEndTimeUsecs adds the endTimeUsecs to the get audit logs params
func (o *GetAuditLogsParams) WithEndTimeUsecs(endTimeUsecs *int64) *GetAuditLogsParams {
	o.SetEndTimeUsecs(endTimeUsecs)
	return o
}

// SetEndTimeUsecs adds the endTimeUsecs to the get audit logs params
func (o *GetAuditLogsParams) SetEndTimeUsecs(endTimeUsecs *int64) {
	o.EndTimeUsecs = endTimeUsecs
}

// WithEntityTypes adds the entityTypes to the get audit logs params
func (o *GetAuditLogsParams) WithEntityTypes(entityTypes []string) *GetAuditLogsParams {
	o.SetEntityTypes(entityTypes)
	return o
}

// SetEntityTypes adds the entityTypes to the get audit logs params
func (o *GetAuditLogsParams) SetEntityTypes(entityTypes []string) {
	o.EntityTypes = entityTypes
}

// WithIncludeTenants adds the includeTenants to the get audit logs params
func (o *GetAuditLogsParams) WithIncludeTenants(includeTenants *bool) *GetAuditLogsParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the get audit logs params
func (o *GetAuditLogsParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithSearchString adds the searchString to the get audit logs params
func (o *GetAuditLogsParams) WithSearchString(searchString *string) *GetAuditLogsParams {
	o.SetSearchString(searchString)
	return o
}

// SetSearchString adds the searchString to the get audit logs params
func (o *GetAuditLogsParams) SetSearchString(searchString *string) {
	o.SearchString = searchString
}

// WithStartIndex adds the startIndex to the get audit logs params
func (o *GetAuditLogsParams) WithStartIndex(startIndex *int64) *GetAuditLogsParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the get audit logs params
func (o *GetAuditLogsParams) SetStartIndex(startIndex *int64) {
	o.StartIndex = startIndex
}

// WithStartTimeUsecs adds the startTimeUsecs to the get audit logs params
func (o *GetAuditLogsParams) WithStartTimeUsecs(startTimeUsecs *int64) *GetAuditLogsParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the get audit logs params
func (o *GetAuditLogsParams) SetStartTimeUsecs(startTimeUsecs *int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WithTenantIds adds the tenantIds to the get audit logs params
func (o *GetAuditLogsParams) WithTenantIds(tenantIds []string) *GetAuditLogsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get audit logs params
func (o *GetAuditLogsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithUsernames adds the usernames to the get audit logs params
func (o *GetAuditLogsParams) WithUsernames(usernames []string) *GetAuditLogsParams {
	o.SetUsernames(usernames)
	return o
}

// SetUsernames adds the usernames to the get audit logs params
func (o *GetAuditLogsParams) SetUsernames(usernames []string) {
	o.Usernames = usernames
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuditLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Actions != nil {

		// binding items for actions
		joinedActions := o.bindParamActions(reg)

		// query array param actions
		if err := r.SetQueryParam("actions", joinedActions...); err != nil {
			return err
		}
	}

	if o.Count != nil {

		// query param count
		var qrCount int64

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.Domains != nil {

		// binding items for domains
		joinedDomains := o.bindParamDomains(reg)

		// query array param domains
		if err := r.SetQueryParam("domains", joinedDomains...); err != nil {
			return err
		}
	}

	if o.EndTimeUsecs != nil {

		// query param endTimeUsecs
		var qrEndTimeUsecs int64

		if o.EndTimeUsecs != nil {
			qrEndTimeUsecs = *o.EndTimeUsecs
		}
		qEndTimeUsecs := swag.FormatInt64(qrEndTimeUsecs)
		if qEndTimeUsecs != "" {

			if err := r.SetQueryParam("endTimeUsecs", qEndTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.EntityTypes != nil {

		// binding items for entityTypes
		joinedEntityTypes := o.bindParamEntityTypes(reg)

		// query array param entityTypes
		if err := r.SetQueryParam("entityTypes", joinedEntityTypes...); err != nil {
			return err
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.SearchString != nil {

		// query param searchString
		var qrSearchString string

		if o.SearchString != nil {
			qrSearchString = *o.SearchString
		}
		qSearchString := qrSearchString
		if qSearchString != "" {

			if err := r.SetQueryParam("searchString", qSearchString); err != nil {
				return err
			}
		}
	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int64

		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt64(qrStartIndex)
		if qStartIndex != "" {

			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}
	}

	if o.StartTimeUsecs != nil {

		// query param startTimeUsecs
		var qrStartTimeUsecs int64

		if o.StartTimeUsecs != nil {
			qrStartTimeUsecs = *o.StartTimeUsecs
		}
		qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
		if qStartTimeUsecs != "" {

			if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.Usernames != nil {

		// binding items for usernames
		joinedUsernames := o.bindParamUsernames(reg)

		// query array param usernames
		if err := r.SetQueryParam("usernames", joinedUsernames...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAuditLogs binds the parameter actions
func (o *GetAuditLogsParams) bindParamActions(formats strfmt.Registry) []string {
	actionsIR := o.Actions

	var actionsIC []string
	for _, actionsIIR := range actionsIR { // explode []string

		actionsIIV := actionsIIR // string as string
		actionsIC = append(actionsIC, actionsIIV)
	}

	// items.CollectionFormat: ""
	actionsIS := swag.JoinByFormat(actionsIC, "")

	return actionsIS
}

// bindParamGetAuditLogs binds the parameter domains
func (o *GetAuditLogsParams) bindParamDomains(formats strfmt.Registry) []string {
	domainsIR := o.Domains

	var domainsIC []string
	for _, domainsIIR := range domainsIR { // explode []string

		domainsIIV := domainsIIR // string as string
		domainsIC = append(domainsIC, domainsIIV)
	}

	// items.CollectionFormat: ""
	domainsIS := swag.JoinByFormat(domainsIC, "")

	return domainsIS
}

// bindParamGetAuditLogs binds the parameter entityTypes
func (o *GetAuditLogsParams) bindParamEntityTypes(formats strfmt.Registry) []string {
	entityTypesIR := o.EntityTypes

	var entityTypesIC []string
	for _, entityTypesIIR := range entityTypesIR { // explode []string

		entityTypesIIV := entityTypesIIR // string as string
		entityTypesIC = append(entityTypesIC, entityTypesIIV)
	}

	// items.CollectionFormat: ""
	entityTypesIS := swag.JoinByFormat(entityTypesIC, "")

	return entityTypesIS
}

// bindParamGetAuditLogs binds the parameter tenantIds
func (o *GetAuditLogsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}

// bindParamGetAuditLogs binds the parameter usernames
func (o *GetAuditLogsParams) bindParamUsernames(formats strfmt.Registry) []string {
	usernamesIR := o.Usernames

	var usernamesIC []string
	for _, usernamesIIR := range usernamesIR { // explode []string

		usernamesIIV := usernamesIIR // string as string
		usernamesIC = append(usernamesIC, usernamesIIV)
	}

	// items.CollectionFormat: ""
	usernamesIS := swag.JoinByFormat(usernamesIC, "")

	return usernamesIS
}
