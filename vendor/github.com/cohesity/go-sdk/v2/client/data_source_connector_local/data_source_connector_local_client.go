// Code generated by go-swagger; DO NOT EDIT.

package data_source_connector_local

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new data source connector local API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new data source connector local API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new data source connector local API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for data source connector local API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDataSourceConnectorLogs(params *GetDataSourceConnectorLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataSourceConnectorLogsOK, error)

	GetDataSourceConnectorStatus(params *GetDataSourceConnectorStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataSourceConnectorStatusOK, error)

	RegisterDataSourceConnector(params *RegisterDataSourceConnectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterDataSourceConnectorNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetDataSourceConnectorLogs lists the data source connector logs

**Privileges:** ```CLUSTER_VIEW``` <br><br>Lists the logs corresponding to the data-source connector creation and registration.
*/
func (a *Client) GetDataSourceConnectorLogs(params *GetDataSourceConnectorLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataSourceConnectorLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataSourceConnectorLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataSourceConnectorLogs",
		Method:             "GET",
		PathPattern:        "/data-source-connector/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataSourceConnectorLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataSourceConnectorLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataSourceConnectorLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataSourceConnectorStatus lists the data source connector status

**Privileges:** ```CLUSTER_VIEW``` <br><br>Lists the data-source connector status, which includes registration as well as cluster-connectivity status.
*/
func (a *Client) GetDataSourceConnectorStatus(params *GetDataSourceConnectorStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataSourceConnectorStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataSourceConnectorStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataSourceConnectorStatus",
		Method:             "GET",
		PathPattern:        "/data-source-connector/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataSourceConnectorStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataSourceConnectorStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataSourceConnectorStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RegisterDataSourceConnector registers a data source connector

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Register a data-source connector with a cluster using the supplied registration token. The registration token for the data-source connection with which this connector is to be registered has to be obtained by the user by invoking the relevant '/data-source-connections' APIs.
*/
func (a *Client) RegisterDataSourceConnector(params *RegisterDataSourceConnectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterDataSourceConnectorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterDataSourceConnectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterDataSourceConnector",
		Method:             "POST",
		PathPattern:        "/data-source-connector/registration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterDataSourceConnectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterDataSourceConnectorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterDataSourceConnectorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
