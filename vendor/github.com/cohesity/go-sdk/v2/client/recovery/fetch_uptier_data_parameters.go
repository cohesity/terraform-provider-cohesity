// Code generated by go-swagger; DO NOT EDIT.

package recovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFetchUptierDataParams creates a new FetchUptierDataParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFetchUptierDataParams() *FetchUptierDataParams {
	return &FetchUptierDataParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFetchUptierDataParamsWithTimeout creates a new FetchUptierDataParams object
// with the ability to set a timeout on a request.
func NewFetchUptierDataParamsWithTimeout(timeout time.Duration) *FetchUptierDataParams {
	return &FetchUptierDataParams{
		timeout: timeout,
	}
}

// NewFetchUptierDataParamsWithContext creates a new FetchUptierDataParams object
// with the ability to set a context for a request.
func NewFetchUptierDataParamsWithContext(ctx context.Context) *FetchUptierDataParams {
	return &FetchUptierDataParams{
		Context: ctx,
	}
}

// NewFetchUptierDataParamsWithHTTPClient creates a new FetchUptierDataParams object
// with the ability to set a custom HTTPClient for a request.
func NewFetchUptierDataParamsWithHTTPClient(client *http.Client) *FetchUptierDataParams {
	return &FetchUptierDataParams{
		HTTPClient: client,
	}
}

/*
FetchUptierDataParams contains all the parameters to send to the API endpoint

	for the fetch uptier data operation.

	Typically these are written to a http.Request.
*/
type FetchUptierDataParams struct {

	/* ArchiveUID.

	   Archive UID of the current restore.
	*/
	ArchiveUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fetch uptier data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FetchUptierDataParams) WithDefaults() *FetchUptierDataParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fetch uptier data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FetchUptierDataParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the fetch uptier data params
func (o *FetchUptierDataParams) WithTimeout(timeout time.Duration) *FetchUptierDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fetch uptier data params
func (o *FetchUptierDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fetch uptier data params
func (o *FetchUptierDataParams) WithContext(ctx context.Context) *FetchUptierDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fetch uptier data params
func (o *FetchUptierDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fetch uptier data params
func (o *FetchUptierDataParams) WithHTTPClient(client *http.Client) *FetchUptierDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fetch uptier data params
func (o *FetchUptierDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchiveUID adds the archiveUID to the fetch uptier data params
func (o *FetchUptierDataParams) WithArchiveUID(archiveUID string) *FetchUptierDataParams {
	o.SetArchiveUID(archiveUID)
	return o
}

// SetArchiveUID adds the archiveUId to the fetch uptier data params
func (o *FetchUptierDataParams) SetArchiveUID(archiveUID string) {
	o.ArchiveUID = archiveUID
}

// WriteToRequest writes these params to a swagger request
func (o *FetchUptierDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param archiveUId
	qrArchiveUID := o.ArchiveUID
	qArchiveUID := qrArchiveUID
	if qArchiveUID != "" {

		if err := r.SetQueryParam("archiveUId", qArchiveUID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
