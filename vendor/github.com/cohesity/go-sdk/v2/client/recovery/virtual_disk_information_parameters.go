// Code generated by go-swagger; DO NOT EDIT.

package recovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewVirtualDiskInformationParams creates a new VirtualDiskInformationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewVirtualDiskInformationParams() *VirtualDiskInformationParams {
	return &VirtualDiskInformationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewVirtualDiskInformationParamsWithTimeout creates a new VirtualDiskInformationParams object
// with the ability to set a timeout on a request.
func NewVirtualDiskInformationParamsWithTimeout(timeout time.Duration) *VirtualDiskInformationParams {
	return &VirtualDiskInformationParams{
		timeout: timeout,
	}
}

// NewVirtualDiskInformationParamsWithContext creates a new VirtualDiskInformationParams object
// with the ability to set a context for a request.
func NewVirtualDiskInformationParamsWithContext(ctx context.Context) *VirtualDiskInformationParams {
	return &VirtualDiskInformationParams{
		Context: ctx,
	}
}

// NewVirtualDiskInformationParamsWithHTTPClient creates a new VirtualDiskInformationParams object
// with the ability to set a custom HTTPClient for a request.
func NewVirtualDiskInformationParamsWithHTTPClient(client *http.Client) *VirtualDiskInformationParams {
	return &VirtualDiskInformationParams{
		HTTPClient: client,
	}
}

/*
VirtualDiskInformationParams contains all the parameters to send to the API endpoint

	for the virtual disk information operation.

	Typically these are written to a http.Request.
*/
type VirtualDiskInformationParams struct {

	/* ClusterID.

	   Specifies the Cohesity Cluster id where the Job was created.

	   Format: int64
	*/
	ClusterID int64

	/* ClusterIncarnationID.

	   Specifies the incarnation id of the Cohesity Cluster where the Job was created.

	   Format: int64
	*/
	ClusterIncarnationID int64

	/* JobID.

	   Specifies the id of the Job that captured the snapshot.

	   Format: int64
	*/
	JobID int64

	/* ObjectID.

	   Specifies the Id of the Protection Source object.

	   Format: int64
	*/
	ObjectID int64

	/* PointInTimeUsecs.

	   Specifies the Id of the vault where snapshot was taken

	   Format: int64
	*/
	PointInTimeUsecs *int64

	/* SnapshotID.

	   Specifies the snapshot id.
	*/
	SnapshotID *string

	/* VaultID.

	   Specifies the Id of the vault where snapshot was taken

	   Format: int64
	*/
	VaultID *int64

	/* VaultName.

	   Specifies the name of the vault where snapshot was taken
	*/
	VaultName *string

	/* VaultType.

	   Specifies the External Target type.
	*/
	VaultType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the virtual disk information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VirtualDiskInformationParams) WithDefaults() *VirtualDiskInformationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the virtual disk information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VirtualDiskInformationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the virtual disk information params
func (o *VirtualDiskInformationParams) WithTimeout(timeout time.Duration) *VirtualDiskInformationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the virtual disk information params
func (o *VirtualDiskInformationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the virtual disk information params
func (o *VirtualDiskInformationParams) WithContext(ctx context.Context) *VirtualDiskInformationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the virtual disk information params
func (o *VirtualDiskInformationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the virtual disk information params
func (o *VirtualDiskInformationParams) WithHTTPClient(client *http.Client) *VirtualDiskInformationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the virtual disk information params
func (o *VirtualDiskInformationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the virtual disk information params
func (o *VirtualDiskInformationParams) WithClusterID(clusterID int64) *VirtualDiskInformationParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the virtual disk information params
func (o *VirtualDiskInformationParams) SetClusterID(clusterID int64) {
	o.ClusterID = clusterID
}

// WithClusterIncarnationID adds the clusterIncarnationID to the virtual disk information params
func (o *VirtualDiskInformationParams) WithClusterIncarnationID(clusterIncarnationID int64) *VirtualDiskInformationParams {
	o.SetClusterIncarnationID(clusterIncarnationID)
	return o
}

// SetClusterIncarnationID adds the clusterIncarnationId to the virtual disk information params
func (o *VirtualDiskInformationParams) SetClusterIncarnationID(clusterIncarnationID int64) {
	o.ClusterIncarnationID = clusterIncarnationID
}

// WithJobID adds the jobID to the virtual disk information params
func (o *VirtualDiskInformationParams) WithJobID(jobID int64) *VirtualDiskInformationParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the virtual disk information params
func (o *VirtualDiskInformationParams) SetJobID(jobID int64) {
	o.JobID = jobID
}

// WithObjectID adds the objectID to the virtual disk information params
func (o *VirtualDiskInformationParams) WithObjectID(objectID int64) *VirtualDiskInformationParams {
	o.SetObjectID(objectID)
	return o
}

// SetObjectID adds the objectId to the virtual disk information params
func (o *VirtualDiskInformationParams) SetObjectID(objectID int64) {
	o.ObjectID = objectID
}

// WithPointInTimeUsecs adds the pointInTimeUsecs to the virtual disk information params
func (o *VirtualDiskInformationParams) WithPointInTimeUsecs(pointInTimeUsecs *int64) *VirtualDiskInformationParams {
	o.SetPointInTimeUsecs(pointInTimeUsecs)
	return o
}

// SetPointInTimeUsecs adds the pointInTimeUsecs to the virtual disk information params
func (o *VirtualDiskInformationParams) SetPointInTimeUsecs(pointInTimeUsecs *int64) {
	o.PointInTimeUsecs = pointInTimeUsecs
}

// WithSnapshotID adds the snapshotID to the virtual disk information params
func (o *VirtualDiskInformationParams) WithSnapshotID(snapshotID *string) *VirtualDiskInformationParams {
	o.SetSnapshotID(snapshotID)
	return o
}

// SetSnapshotID adds the snapshotId to the virtual disk information params
func (o *VirtualDiskInformationParams) SetSnapshotID(snapshotID *string) {
	o.SnapshotID = snapshotID
}

// WithVaultID adds the vaultID to the virtual disk information params
func (o *VirtualDiskInformationParams) WithVaultID(vaultID *int64) *VirtualDiskInformationParams {
	o.SetVaultID(vaultID)
	return o
}

// SetVaultID adds the vaultId to the virtual disk information params
func (o *VirtualDiskInformationParams) SetVaultID(vaultID *int64) {
	o.VaultID = vaultID
}

// WithVaultName adds the vaultName to the virtual disk information params
func (o *VirtualDiskInformationParams) WithVaultName(vaultName *string) *VirtualDiskInformationParams {
	o.SetVaultName(vaultName)
	return o
}

// SetVaultName adds the vaultName to the virtual disk information params
func (o *VirtualDiskInformationParams) SetVaultName(vaultName *string) {
	o.VaultName = vaultName
}

// WithVaultType adds the vaultType to the virtual disk information params
func (o *VirtualDiskInformationParams) WithVaultType(vaultType *string) *VirtualDiskInformationParams {
	o.SetVaultType(vaultType)
	return o
}

// SetVaultType adds the vaultType to the virtual disk information params
func (o *VirtualDiskInformationParams) SetVaultType(vaultType *string) {
	o.VaultType = vaultType
}

// WriteToRequest writes these params to a swagger request
func (o *VirtualDiskInformationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param clusterId
	qrClusterID := o.ClusterID
	qClusterID := swag.FormatInt64(qrClusterID)
	if qClusterID != "" {

		if err := r.SetQueryParam("clusterId", qClusterID); err != nil {
			return err
		}
	}

	// query param clusterIncarnationId
	qrClusterIncarnationID := o.ClusterIncarnationID
	qClusterIncarnationID := swag.FormatInt64(qrClusterIncarnationID)
	if qClusterIncarnationID != "" {

		if err := r.SetQueryParam("clusterIncarnationId", qClusterIncarnationID); err != nil {
			return err
		}
	}

	// query param jobId
	qrJobID := o.JobID
	qJobID := swag.FormatInt64(qrJobID)
	if qJobID != "" {

		if err := r.SetQueryParam("jobId", qJobID); err != nil {
			return err
		}
	}

	// query param objectId
	qrObjectID := o.ObjectID
	qObjectID := swag.FormatInt64(qrObjectID)
	if qObjectID != "" {

		if err := r.SetQueryParam("objectId", qObjectID); err != nil {
			return err
		}
	}

	if o.PointInTimeUsecs != nil {

		// query param pointInTimeUsecs
		var qrPointInTimeUsecs int64

		if o.PointInTimeUsecs != nil {
			qrPointInTimeUsecs = *o.PointInTimeUsecs
		}
		qPointInTimeUsecs := swag.FormatInt64(qrPointInTimeUsecs)
		if qPointInTimeUsecs != "" {

			if err := r.SetQueryParam("pointInTimeUsecs", qPointInTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.SnapshotID != nil {

		// query param snapshotId
		var qrSnapshotID string

		if o.SnapshotID != nil {
			qrSnapshotID = *o.SnapshotID
		}
		qSnapshotID := qrSnapshotID
		if qSnapshotID != "" {

			if err := r.SetQueryParam("snapshotId", qSnapshotID); err != nil {
				return err
			}
		}
	}

	if o.VaultID != nil {

		// query param vaultId
		var qrVaultID int64

		if o.VaultID != nil {
			qrVaultID = *o.VaultID
		}
		qVaultID := swag.FormatInt64(qrVaultID)
		if qVaultID != "" {

			if err := r.SetQueryParam("vaultId", qVaultID); err != nil {
				return err
			}
		}
	}

	if o.VaultName != nil {

		// query param vaultName
		var qrVaultName string

		if o.VaultName != nil {
			qrVaultName = *o.VaultName
		}
		qVaultName := qrVaultName
		if qVaultName != "" {

			if err := r.SetQueryParam("vaultName", qVaultName); err != nil {
				return err
			}
		}
	}

	if o.VaultType != nil {

		// query param vaultType
		var qrVaultType string

		if o.VaultType != nil {
			qrVaultType = *o.VaultType
		}
		qVaultType := qrVaultType
		if qVaultType != "" {

			if err := r.SetQueryParam("vaultType", qVaultType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
