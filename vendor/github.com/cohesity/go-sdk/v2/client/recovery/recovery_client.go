// Code generated by go-swagger; DO NOT EDIT.

package recovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new recovery API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new recovery API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new recovery API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for recovery API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelRecoveryByID(params *CancelRecoveryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelRecoveryByIDNoContent, error)

	CreateDownloadFilesAndFoldersRecovery(params *CreateDownloadFilesAndFoldersRecoveryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDownloadFilesAndFoldersRecoveryCreated, error)

	CreateRecovery(params *CreateRecoveryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRecoveryCreated, error)

	DownloadFilesFromRecovery(params *DownloadFilesFromRecoveryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadFilesFromRecoveryOK, error)

	DownloadIndexedFile(params *DownloadIndexedFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadIndexedFileOK, error)

	FetchUptierData(params *FetchUptierDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FetchUptierDataOK, error)

	GetRecoveries(params *GetRecoveriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecoveriesOK, error)

	GetRecoveryByID(params *GetRecoveryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecoveryByIDOK, error)

	GetRecoveryDebugLogs(params *GetRecoveryDebugLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecoveryDebugLogsOK, error)

	GetRecoveryErrorsReport(params *GetRecoveryErrorsReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecoveryErrorsReportOK, error)

	TearDownRecoveryByID(params *TearDownRecoveryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TearDownRecoveryByIDNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CancelRecoveryByID cancels recovery for a given id

**Privileges:** ```RESTORE_MODIFY``` <br><br>Cancel Recovery for a given id.
*/
func (a *Client) CancelRecoveryByID(params *CancelRecoveryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelRecoveryByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelRecoveryByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelRecoveryById",
		Method:             "POST",
		PathPattern:        "/data-protect/recoveries/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelRecoveryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelRecoveryByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelRecoveryByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDownloadFilesAndFoldersRecovery creates a download files and folders recovery

**Privileges:** ```RESTORE_MODIFY``` <br><br>Creates a download files and folders recovery.
*/
func (a *Client) CreateDownloadFilesAndFoldersRecovery(params *CreateDownloadFilesAndFoldersRecoveryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDownloadFilesAndFoldersRecoveryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDownloadFilesAndFoldersRecoveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDownloadFilesAndFoldersRecovery",
		Method:             "POST",
		PathPattern:        "/data-protect/recoveries/download-files-folders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDownloadFilesAndFoldersRecoveryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDownloadFilesAndFoldersRecoveryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDownloadFilesAndFoldersRecoveryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateRecovery performs a recovery

**Privileges:** ```RESTORE_MODIFY, REMOTE_RESTORE``` <br><br>Performs a Recovery.
*/
func (a *Client) CreateRecovery(params *CreateRecoveryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRecoveryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRecoveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRecovery",
		Method:             "POST",
		PathPattern:        "/data-protect/recoveries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRecoveryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRecoveryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRecoveryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DownloadFilesFromRecovery downloads files from the given download file recovery

**Privileges:** ```RESTORE_DOWNLOAD``` <br><br>Download files from the given download file recovery.
*/
func (a *Client) DownloadFilesFromRecovery(params *DownloadFilesFromRecoveryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadFilesFromRecoveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadFilesFromRecoveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadFilesFromRecovery",
		Method:             "GET",
		PathPattern:        "/data-protect/recoveries/{id}/download-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadFilesFromRecoveryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadFilesFromRecoveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DownloadFilesFromRecoveryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DownloadIndexedFile downloads an indexed file

**Privileges:** ```RESTORE_DOWNLOAD``` <br><br>Download an indexed file from a snapshot.
*/
func (a *Client) DownloadIndexedFile(params *DownloadIndexedFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadIndexedFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadIndexedFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadIndexedFile",
		Method:             "GET",
		PathPattern:        "/data-protect/snapshots/{snapshotsId}/download-file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadIndexedFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadIndexedFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DownloadIndexedFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FetchUptierData fetches the uptier data

**Privileges:** ```RESTORE_VIEW``` <br><br>Fetches the uptier data for a restore job.
*/
func (a *Client) FetchUptierData(params *FetchUptierDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FetchUptierDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFetchUptierDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "FetchUptierData",
		Method:             "GET",
		PathPattern:        "/data-protect/recoveries/fetch-uptier-data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FetchUptierDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FetchUptierDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FetchUptierDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRecoveries lists the recoveries

**Privileges:** ```RESTORE_VIEW``` <br><br>Lists the Recoveries.
*/
func (a *Client) GetRecoveries(params *GetRecoveriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecoveriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecoveriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRecoveries",
		Method:             "GET",
		PathPattern:        "/data-protect/recoveries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecoveriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecoveriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRecoveriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRecoveryByID gets recovery for a given id

**Privileges:** ```RESTORE_VIEW``` <br><br>Get Recovery for a given id.
*/
func (a *Client) GetRecoveryByID(params *GetRecoveryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecoveryByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecoveryByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRecoveryById",
		Method:             "GET",
		PathPattern:        "/data-protect/recoveries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecoveryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecoveryByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRecoveryByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRecoveryDebugLogs gets the debug logs for a particular recovery operation

**Privileges:** ```RESTORE_VIEW``` <br><br>Get the debug logs for a particular recovery operation.
*/
func (a *Client) GetRecoveryDebugLogs(params *GetRecoveryDebugLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecoveryDebugLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecoveryDebugLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRecoveryDebugLogs",
		Method:             "GET",
		PathPattern:        "/data-protect/recoveries/{id}/debug-logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecoveryDebugLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecoveryDebugLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRecoveryDebugLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRecoveryErrorsReport gets the c s v of errors warnings for a given recovery operation

**Privileges:** ```RESTORE_VIEW``` <br><br>Get a CSV error report for given recovery operation. Each row in CSV report contains the File Path, error/warning code and error/warning message.
*/
func (a *Client) GetRecoveryErrorsReport(params *GetRecoveryErrorsReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecoveryErrorsReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecoveryErrorsReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRecoveryErrorsReport",
		Method:             "GET",
		PathPattern:        "/data-protect/recoveries/{id}/download-messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecoveryErrorsReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecoveryErrorsReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRecoveryErrorsReportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TearDownRecoveryByID tears down recovery for a given id

**Privileges:** ```RESTORE_MODIFY``` <br><br>Tear down Recovery for a given id.
*/
func (a *Client) TearDownRecoveryByID(params *TearDownRecoveryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TearDownRecoveryByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTearDownRecoveryByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TearDownRecoveryById",
		Method:             "POST",
		PathPattern:        "/data-protect/recoveries/{id}/tear-down",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TearDownRecoveryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TearDownRecoveryByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TearDownRecoveryByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
