// Code generated by go-swagger; DO NOT EDIT.

package recovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDownloadFilesFromRecoveryParams creates a new DownloadFilesFromRecoveryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDownloadFilesFromRecoveryParams() *DownloadFilesFromRecoveryParams {
	return &DownloadFilesFromRecoveryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDownloadFilesFromRecoveryParamsWithTimeout creates a new DownloadFilesFromRecoveryParams object
// with the ability to set a timeout on a request.
func NewDownloadFilesFromRecoveryParamsWithTimeout(timeout time.Duration) *DownloadFilesFromRecoveryParams {
	return &DownloadFilesFromRecoveryParams{
		timeout: timeout,
	}
}

// NewDownloadFilesFromRecoveryParamsWithContext creates a new DownloadFilesFromRecoveryParams object
// with the ability to set a context for a request.
func NewDownloadFilesFromRecoveryParamsWithContext(ctx context.Context) *DownloadFilesFromRecoveryParams {
	return &DownloadFilesFromRecoveryParams{
		Context: ctx,
	}
}

// NewDownloadFilesFromRecoveryParamsWithHTTPClient creates a new DownloadFilesFromRecoveryParams object
// with the ability to set a custom HTTPClient for a request.
func NewDownloadFilesFromRecoveryParamsWithHTTPClient(client *http.Client) *DownloadFilesFromRecoveryParams {
	return &DownloadFilesFromRecoveryParams{
		HTTPClient: client,
	}
}

/*
DownloadFilesFromRecoveryParams contains all the parameters to send to the API endpoint

	for the download files from recovery operation.

	Typically these are written to a http.Request.
*/
type DownloadFilesFromRecoveryParams struct {

	/* FileType.

	   Specifies the downloaded type, i.e: error, success_files_list
	*/
	FileType *string

	/* ID.

	   Specifies the id of a Recovery.
	*/
	ID string

	/* IncludeTenants.

	   Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.
	*/
	IncludeTenants *bool

	/* Length.

	   Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)

	   Format: int64
	*/
	Length *int64

	/* SourceName.

	   Specifies the name of the source on which restore is done
	*/
	SourceName *string

	/* StartOffset.

	   Specifies the start offset of file chunk to be downloaded.

	   Format: int64
	*/
	StartOffset *int64

	/* StartTime.

	   Specifies the start time of restore task
	*/
	StartTime *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the download files from recovery params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadFilesFromRecoveryParams) WithDefaults() *DownloadFilesFromRecoveryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the download files from recovery params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadFilesFromRecoveryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) WithTimeout(timeout time.Duration) *DownloadFilesFromRecoveryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) WithContext(ctx context.Context) *DownloadFilesFromRecoveryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) WithHTTPClient(client *http.Client) *DownloadFilesFromRecoveryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFileType adds the fileType to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) WithFileType(fileType *string) *DownloadFilesFromRecoveryParams {
	o.SetFileType(fileType)
	return o
}

// SetFileType adds the fileType to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) SetFileType(fileType *string) {
	o.FileType = fileType
}

// WithID adds the id to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) WithID(id string) *DownloadFilesFromRecoveryParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) SetID(id string) {
	o.ID = id
}

// WithIncludeTenants adds the includeTenants to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) WithIncludeTenants(includeTenants *bool) *DownloadFilesFromRecoveryParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithLength adds the length to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) WithLength(length *int64) *DownloadFilesFromRecoveryParams {
	o.SetLength(length)
	return o
}

// SetLength adds the length to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) SetLength(length *int64) {
	o.Length = length
}

// WithSourceName adds the sourceName to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) WithSourceName(sourceName *string) *DownloadFilesFromRecoveryParams {
	o.SetSourceName(sourceName)
	return o
}

// SetSourceName adds the sourceName to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) SetSourceName(sourceName *string) {
	o.SourceName = sourceName
}

// WithStartOffset adds the startOffset to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) WithStartOffset(startOffset *int64) *DownloadFilesFromRecoveryParams {
	o.SetStartOffset(startOffset)
	return o
}

// SetStartOffset adds the startOffset to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) SetStartOffset(startOffset *int64) {
	o.StartOffset = startOffset
}

// WithStartTime adds the startTime to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) WithStartTime(startTime *string) *DownloadFilesFromRecoveryParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the download files from recovery params
func (o *DownloadFilesFromRecoveryParams) SetStartTime(startTime *string) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *DownloadFilesFromRecoveryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FileType != nil {

		// query param fileType
		var qrFileType string

		if o.FileType != nil {
			qrFileType = *o.FileType
		}
		qFileType := qrFileType
		if qFileType != "" {

			if err := r.SetQueryParam("fileType", qFileType); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.Length != nil {

		// query param length
		var qrLength int64

		if o.Length != nil {
			qrLength = *o.Length
		}
		qLength := swag.FormatInt64(qrLength)
		if qLength != "" {

			if err := r.SetQueryParam("length", qLength); err != nil {
				return err
			}
		}
	}

	if o.SourceName != nil {

		// query param sourceName
		var qrSourceName string

		if o.SourceName != nil {
			qrSourceName = *o.SourceName
		}
		qSourceName := qrSourceName
		if qSourceName != "" {

			if err := r.SetQueryParam("sourceName", qSourceName); err != nil {
				return err
			}
		}
	}

	if o.StartOffset != nil {

		// query param startOffset
		var qrStartOffset int64

		if o.StartOffset != nil {
			qrStartOffset = *o.StartOffset
		}
		qStartOffset := swag.FormatInt64(qrStartOffset)
		if qStartOffset != "" {

			if err := r.SetQueryParam("startOffset", qStartOffset); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime string

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
