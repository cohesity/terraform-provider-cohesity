// Code generated by go-swagger; DO NOT EDIT.

package object

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteEntityMetadataParams creates a new DeleteEntityMetadataParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteEntityMetadataParams() *DeleteEntityMetadataParams {
	return &DeleteEntityMetadataParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteEntityMetadataParamsWithTimeout creates a new DeleteEntityMetadataParams object
// with the ability to set a timeout on a request.
func NewDeleteEntityMetadataParamsWithTimeout(timeout time.Duration) *DeleteEntityMetadataParams {
	return &DeleteEntityMetadataParams{
		timeout: timeout,
	}
}

// NewDeleteEntityMetadataParamsWithContext creates a new DeleteEntityMetadataParams object
// with the ability to set a context for a request.
func NewDeleteEntityMetadataParamsWithContext(ctx context.Context) *DeleteEntityMetadataParams {
	return &DeleteEntityMetadataParams{
		Context: ctx,
	}
}

// NewDeleteEntityMetadataParamsWithHTTPClient creates a new DeleteEntityMetadataParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteEntityMetadataParamsWithHTTPClient(client *http.Client) *DeleteEntityMetadataParams {
	return &DeleteEntityMetadataParams{
		HTTPClient: client,
	}
}

/*
DeleteEntityMetadataParams contains all the parameters to send to the API endpoint

	for the delete entity metadata operation.

	Typically these are written to a http.Request.
*/
type DeleteEntityMetadataParams struct {

	/* EnvironmentType.

	   Specifies the environment type for the Credentials metadata to be deleted. This will be only set when the metadata type is Credentials.
	*/
	EnvironmentType *string

	/* ID.

	   Specifies a unique id of the Entity.

	   Format: int64
	*/
	ID int64

	/* MetadataType.

	   Specifies the metadata type to be deleted. This is a required field currently and the API will error out if this field is not provided.
	*/
	MetadataType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete entity metadata params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteEntityMetadataParams) WithDefaults() *DeleteEntityMetadataParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete entity metadata params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteEntityMetadataParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete entity metadata params
func (o *DeleteEntityMetadataParams) WithTimeout(timeout time.Duration) *DeleteEntityMetadataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete entity metadata params
func (o *DeleteEntityMetadataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete entity metadata params
func (o *DeleteEntityMetadataParams) WithContext(ctx context.Context) *DeleteEntityMetadataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete entity metadata params
func (o *DeleteEntityMetadataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete entity metadata params
func (o *DeleteEntityMetadataParams) WithHTTPClient(client *http.Client) *DeleteEntityMetadataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete entity metadata params
func (o *DeleteEntityMetadataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentType adds the environmentType to the delete entity metadata params
func (o *DeleteEntityMetadataParams) WithEnvironmentType(environmentType *string) *DeleteEntityMetadataParams {
	o.SetEnvironmentType(environmentType)
	return o
}

// SetEnvironmentType adds the environmentType to the delete entity metadata params
func (o *DeleteEntityMetadataParams) SetEnvironmentType(environmentType *string) {
	o.EnvironmentType = environmentType
}

// WithID adds the id to the delete entity metadata params
func (o *DeleteEntityMetadataParams) WithID(id int64) *DeleteEntityMetadataParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete entity metadata params
func (o *DeleteEntityMetadataParams) SetID(id int64) {
	o.ID = id
}

// WithMetadataType adds the metadataType to the delete entity metadata params
func (o *DeleteEntityMetadataParams) WithMetadataType(metadataType *string) *DeleteEntityMetadataParams {
	o.SetMetadataType(metadataType)
	return o
}

// SetMetadataType adds the metadataType to the delete entity metadata params
func (o *DeleteEntityMetadataParams) SetMetadataType(metadataType *string) {
	o.MetadataType = metadataType
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteEntityMetadataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnvironmentType != nil {

		// query param environmentType
		var qrEnvironmentType string

		if o.EnvironmentType != nil {
			qrEnvironmentType = *o.EnvironmentType
		}
		qEnvironmentType := qrEnvironmentType
		if qEnvironmentType != "" {

			if err := r.SetQueryParam("environmentType", qEnvironmentType); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.MetadataType != nil {

		// query param metadataType
		var qrMetadataType string

		if o.MetadataType != nil {
			qrMetadataType = *o.MetadataType
		}
		qMetadataType := qrMetadataType
		if qMetadataType != "" {

			if err := r.SetQueryParam("metadataType", qMetadataType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
