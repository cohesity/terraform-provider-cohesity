// Code generated by go-swagger; DO NOT EDIT.

package object

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new object API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new object API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new object API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for object API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssociateEntityMetadata(params *AssociateEntityMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssociateEntityMetadataMultiStatus, error)

	BrowseObjectContents(params *BrowseObjectContentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BrowseObjectContentsOK, error)

	CancelObjectRuns(params *CancelObjectRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelObjectRunsMultiStatus, error)

	ConstructMetaInfo(params *ConstructMetaInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConstructMetaInfoOK, error)

	DeleteEntityMetadata(params *DeleteEntityMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEntityMetadataNoContent, error)

	FilterObjects(params *FilterObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FilterObjectsOK, error)

	GetAllIndexedObjectSnapshots(params *GetAllIndexedObjectSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIndexedObjectSnapshotsOK, error)

	GetEntityMetadata(params *GetEntityMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEntityMetadataOK, error)

	GetIndexedObjectSnapshots(params *GetIndexedObjectSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIndexedObjectSnapshotsOK, error)

	GetObjectRunByRunID(params *GetObjectRunByRunIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectRunByRunIDOK, error)

	GetObjectRuns(params *GetObjectRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectRunsOK, error)

	GetObjectSnapshotInfo(params *GetObjectSnapshotInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectSnapshotInfoOK, error)

	GetObjectSnapshotVolumeInfo(params *GetObjectSnapshotVolumeInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectSnapshotVolumeInfoOK, error)

	GetObjectSnapshots(params *GetObjectSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectSnapshotsOK, error)

	GetObjectStats(params *GetObjectStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectStatsOK, error)

	GetObjectTree(params *GetObjectTreeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectTreeOK, error)

	GetObjectsLastRun(params *GetObjectsLastRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectsLastRunOK, error)

	GetPITRangesForProtectedObject(params *GetPITRangesForProtectedObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPITRangesForProtectedObjectOK, error)

	GetProtectedObjectOfAnyTypeByID(params *GetProtectedObjectOfAnyTypeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectedObjectOfAnyTypeByIDOK, error)

	GetProtectedObjectsOfAnyType(params *GetProtectedObjectsOfAnyTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectedObjectsOfAnyTypeOK, error)

	GetSnapshotDiff(params *GetSnapshotDiffParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSnapshotDiffOK, error)

	GetSourceHierarchyObjects(params *GetSourceHierarchyObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSourceHierarchyObjectsOK, error)

	ObjectsActions(params *ObjectsActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsActionsNoContent, error)

	PerformActionOnObject(params *PerformActionOnObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PerformActionOnObjectNoContent, error)

	UpdateObjectSnapshot(params *UpdateObjectSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateObjectSnapshotOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AssociateEntityMetadata associates metadata with entity

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Associates metadata with entities in the entity hierarchy. This metadata can be of various types (eg. Credentials). Returns a list of entity id and corresponding errors encountered (if any) while associating metadata with that entity. Note that a partial success response is possible where we succeed in associating metadata with some of the entities but fail for others. The API also expects the entities being updated belong to same source.
*/
func (a *Client) AssociateEntityMetadata(params *AssociateEntityMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssociateEntityMetadataMultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociateEntityMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssociateEntityMetadata",
		Method:             "PUT",
		PathPattern:        "/data-protect/objects/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociateEntityMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociateEntityMetadataMultiStatus)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssociateEntityMetadataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BrowseObjectContents fetches the contents files and folders for the specified object

**Privileges:** ```RESTORE_VIEW``` <br><br>Fetch the contents (files & folders) of the specified path inside the specified object.
*/
func (a *Client) BrowseObjectContents(params *BrowseObjectContentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BrowseObjectContentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBrowseObjectContentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BrowseObjectContents",
		Method:             "POST",
		PathPattern:        "/data-protect/objects/{id}/browse",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BrowseObjectContentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BrowseObjectContentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BrowseObjectContentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CancelObjectRuns cancels object runs

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Cancel object runs for object based protection. This does not apply to Group based protection.
*/
func (a *Client) CancelObjectRuns(params *CancelObjectRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelObjectRunsMultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelObjectRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelObjectRuns",
		Method:             "POST",
		PathPattern:        "/data-protect/objects/runs/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelObjectRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelObjectRunsMultiStatus)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelObjectRunsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ConstructMetaInfo constructs meta info for any workflow from object snapshot and some other information

**Privileges:** ```RESTORE_VIEW``` <br><br>Construct meta info from object snapshot and some additional params.
*/
func (a *Client) ConstructMetaInfo(params *ConstructMetaInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConstructMetaInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConstructMetaInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConstructMetaInfo",
		Method:             "POST",
		PathPattern:        "/data-protect/snapshots/{snapshotId}/meta-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConstructMetaInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConstructMetaInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConstructMetaInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteEntityMetadata deletes metadata with entity

```Unknown Privileges``` <br><br>Deletes entity metadata for the given entity Id. Currently only supported for RDS and Aurora Postgres Credential metadata.
*/
func (a *Client) DeleteEntityMetadata(params *DeleteEntityMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEntityMetadataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEntityMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEntityMetadata",
		Method:             "DELETE",
		PathPattern:        "/data-protect/objects/metadata/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEntityMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEntityMetadataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteEntityMetadataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FilterObjects lists all the filtered objects

**Privileges:** ```RESTORE_VIEW``` <br><br>List all the filtered objects using given regular expressions and wildcard supported search strings. We are currenly supporting this for only SQL adapter.
*/
func (a *Client) FilterObjects(params *FilterObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FilterObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilterObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "FilterObjects",
		Method:             "POST",
		PathPattern:        "/data-protect/filter/objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FilterObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FilterObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FilterObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAllIndexedObjectSnapshots gets snapshots of indexed object

**Privileges:** ```RESTORE_VIEW``` <br><br>Get snapshots of indexed object.
*/
func (a *Client) GetAllIndexedObjectSnapshots(params *GetAllIndexedObjectSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIndexedObjectSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllIndexedObjectSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllIndexedObjectSnapshots",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/{objectId}/indexed-objects/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllIndexedObjectSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllIndexedObjectSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAllIndexedObjectSnapshotsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEntityMetadata gets metadata of entities

**Privileges:** ```PROTECTION_VIEW``` <br><br>Gets entity metadata for entities. This can be used as a input for the PUT API.
*/
func (a *Client) GetEntityMetadata(params *GetEntityMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEntityMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntityMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEntityMetadata",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/{sourceId}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEntityMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntityMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEntityMetadataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIndexedObjectSnapshots gets snapshots of indexed object

**Privileges:** ```RESTORE_VIEW``` <br><br>Get snapshots of indexed object.
*/
func (a *Client) GetIndexedObjectSnapshots(params *GetIndexedObjectSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIndexedObjectSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIndexedObjectSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIndexedObjectSnapshots",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/{objectId}/protection-groups/{protectionGroupId}/indexed-objects/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIndexedObjectSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIndexedObjectSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIndexedObjectSnapshotsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjectRunByRunID gets a run for an object

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get a run for an object.
*/
func (a *Client) GetObjectRunByRunID(params *GetObjectRunByRunIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectRunByRunIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectRunByRunIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectRunByRunId",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/{id}/runs/{runId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectRunByRunIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectRunByRunIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectRunByRunIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjectRuns gets the list of runs for an object

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get the runs for a particular object.
*/
func (a *Client) GetObjectRuns(params *GetObjectRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectRuns",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/{id}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectRunsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjectSnapshotInfo gets details of object snapshot

**Privileges:** ```RESTORE_VIEW``` <br><br>Get details of object snapshot.
*/
func (a *Client) GetObjectSnapshotInfo(params *GetObjectSnapshotInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectSnapshotInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectSnapshotInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectSnapshotInfo",
		Method:             "GET",
		PathPattern:        "/data-protect/snapshots/{snapshotId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectSnapshotInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectSnapshotInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectSnapshotInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjectSnapshotVolumeInfo gets volume info of object snapshot

**Privileges:** ```RESTORE_VIEW``` <br><br>Get volume info of object snapshot.
*/
func (a *Client) GetObjectSnapshotVolumeInfo(params *GetObjectSnapshotVolumeInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectSnapshotVolumeInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectSnapshotVolumeInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectSnapshotVolumeInfo",
		Method:             "GET",
		PathPattern:        "/data-protect/snapshots/{snapshotId}/volume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectSnapshotVolumeInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectSnapshotVolumeInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectSnapshotVolumeInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjectSnapshots lists the snapshots for a given object

**Privileges:** ```RESTORE_VIEW``` <br><br>List the snapshots for a given object.
*/
func (a *Client) GetObjectSnapshots(params *GetObjectSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectSnapshots",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/{id}/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectSnapshotsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjectStats gets stats for a given object

**Privileges:** ```RESTORE_VIEW``` <br><br>Get stats for a given object.
*/
func (a *Client) GetObjectStats(params *GetObjectStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectStats",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/{id}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjectTree gets the objects tree hierarchy for for an object

```Unknown Privileges``` <br><br>Get the objects tree hierarchy for for an Object. If the object does not have a hierarchy then a single object will be returned.
*/
func (a *Client) GetObjectTree(params *GetObjectTreeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectTreeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectTreeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectTree",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/{id}/tree",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectTreeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectTreeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectTreeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjectsLastRun gets last protection run of objects

```Unknown Privileges``` <br><br>Get last protection run of objects.
*/
func (a *Client) GetObjectsLastRun(params *GetObjectsLastRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectsLastRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectsLastRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectsLastRun",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/last-run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectsLastRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectsLastRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectsLastRunDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPITRangesForProtectedObject gets p i t ranges for an object

**Privileges:** ```RESTORE_VIEW``` <br><br>Returns the ranges in various types like time, SCN etc. within which the specified protected object can be restored to any Point in time.
*/
func (a *Client) GetPITRangesForProtectedObject(params *GetPITRangesForProtectedObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPITRangesForProtectedObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPITRangesForProtectedObjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPITRangesForProtectedObject",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/{id}/pit-ranges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPITRangesForProtectedObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPITRangesForProtectedObjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPITRangesForProtectedObjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProtectedObjectOfAnyTypeByID gets an object

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get Object configurations for given object id.
*/
func (a *Client) GetProtectedObjectOfAnyTypeByID(params *GetProtectedObjectOfAnyTypeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectedObjectOfAnyTypeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectedObjectOfAnyTypeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectedObjectOfAnyTypeById",
		Method:             "GET",
		PathPattern:        "/data-protect/objects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectedObjectOfAnyTypeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectedObjectOfAnyTypeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectedObjectOfAnyTypeByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProtectedObjectsOfAnyType gets objects

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get Objects Configurations.
*/
func (a *Client) GetProtectedObjectsOfAnyType(params *GetProtectedObjectsOfAnyTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectedObjectsOfAnyTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectedObjectsOfAnyTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectedObjectsOfAnyType",
		Method:             "GET",
		PathPattern:        "/data-protect/objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectedObjectsOfAnyTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectedObjectsOfAnyTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectedObjectsOfAnyTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSnapshotDiff gets diff between two snapshots of a given object

**Privileges:** ```ALERT_VIEW``` <br><br>Get diff (files added/deleted) between two snapshots of a given object.
*/
func (a *Client) GetSnapshotDiff(params *GetSnapshotDiffParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSnapshotDiffOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotDiffParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnapshotDiff",
		Method:             "POST",
		PathPattern:        "/data-protect/objects/{id}/snapshot-diff",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotDiffReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotDiffOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSnapshotDiffDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSourceHierarchyObjects lists objects on a source which can be used for data protection

**Privileges:** ```PROTECTION_VIEW``` <br><br>List objects which can be used for data protection.
*/
func (a *Client) GetSourceHierarchyObjects(params *GetSourceHierarchyObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSourceHierarchyObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceHierarchyObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSourceHierarchyObjects",
		Method:             "GET",
		PathPattern:        "/data-protect/sources/{sourceId}/objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSourceHierarchyObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceHierarchyObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSourceHierarchyObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ObjectsActions actions on objects

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Specifies the request to perform various actions on multiple objects.
*/
func (a *Client) ObjectsActions(params *ObjectsActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsActionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObjectsActionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ObjectsActions",
		Method:             "POST",
		PathPattern:        "/data-protect/objects/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObjectsActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObjectsActionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ObjectsActionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformActionOnObject performs an action on an object

**Privileges:** ```RESTORE_MODIFY``` <br><br>Perform an action on an object. Depending on the object environment type, different actions are available.
*/
func (a *Client) PerformActionOnObject(params *PerformActionOnObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PerformActionOnObjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformActionOnObjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformActionOnObject",
		Method:             "POST",
		PathPattern:        "/data-protect/objects/{id}/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformActionOnObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformActionOnObjectNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformActionOnObjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateObjectSnapshot updates an object snapshot

**Privileges:** ```RESTORE_MODIFY``` <br><br>Update an object snapshot.
*/
func (a *Client) UpdateObjectSnapshot(params *UpdateObjectSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateObjectSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateObjectSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateObjectSnapshot",
		Method:             "PUT",
		PathPattern:        "/data-protect/objects/{id}/snapshots/{snapshotId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateObjectSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateObjectSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateObjectSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
