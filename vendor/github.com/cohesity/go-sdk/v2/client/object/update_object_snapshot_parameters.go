// Code generated by go-swagger; DO NOT EDIT.

package object

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cohesity/go-sdk/v2/models"
)

// NewUpdateObjectSnapshotParams creates a new UpdateObjectSnapshotParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateObjectSnapshotParams() *UpdateObjectSnapshotParams {
	return &UpdateObjectSnapshotParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateObjectSnapshotParamsWithTimeout creates a new UpdateObjectSnapshotParams object
// with the ability to set a timeout on a request.
func NewUpdateObjectSnapshotParamsWithTimeout(timeout time.Duration) *UpdateObjectSnapshotParams {
	return &UpdateObjectSnapshotParams{
		timeout: timeout,
	}
}

// NewUpdateObjectSnapshotParamsWithContext creates a new UpdateObjectSnapshotParams object
// with the ability to set a context for a request.
func NewUpdateObjectSnapshotParamsWithContext(ctx context.Context) *UpdateObjectSnapshotParams {
	return &UpdateObjectSnapshotParams{
		Context: ctx,
	}
}

// NewUpdateObjectSnapshotParamsWithHTTPClient creates a new UpdateObjectSnapshotParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateObjectSnapshotParamsWithHTTPClient(client *http.Client) *UpdateObjectSnapshotParams {
	return &UpdateObjectSnapshotParams{
		HTTPClient: client,
	}
}

/*
UpdateObjectSnapshotParams contains all the parameters to send to the API endpoint

	for the update object snapshot operation.

	Typically these are written to a http.Request.
*/
type UpdateObjectSnapshotParams struct {

	/* Body.

	   Specifies the parameters update an object snapshot.
	*/
	Body *models.UpdateObjectSnapshotRequest

	/* ID.

	   Specifies the id of the Object.

	   Format: int64
	*/
	ID int64

	/* SnapshotID.

	   Specifies the id of the snapshot.<br> Note: 1. If the snapshotid of one of the apps is specified, it applies for all the databases in the Protection Run.<br> 2. In case of volume based jobs, please specify the snapshotid of the source not the database. if source snapshot is specified, applied to source snapshot. if database snapshotid is specified in case of volume based jobs, then it is applicable for host's snapshot.
	*/
	SnapshotID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update object snapshot params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateObjectSnapshotParams) WithDefaults() *UpdateObjectSnapshotParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update object snapshot params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateObjectSnapshotParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update object snapshot params
func (o *UpdateObjectSnapshotParams) WithTimeout(timeout time.Duration) *UpdateObjectSnapshotParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update object snapshot params
func (o *UpdateObjectSnapshotParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update object snapshot params
func (o *UpdateObjectSnapshotParams) WithContext(ctx context.Context) *UpdateObjectSnapshotParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update object snapshot params
func (o *UpdateObjectSnapshotParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update object snapshot params
func (o *UpdateObjectSnapshotParams) WithHTTPClient(client *http.Client) *UpdateObjectSnapshotParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update object snapshot params
func (o *UpdateObjectSnapshotParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update object snapshot params
func (o *UpdateObjectSnapshotParams) WithBody(body *models.UpdateObjectSnapshotRequest) *UpdateObjectSnapshotParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update object snapshot params
func (o *UpdateObjectSnapshotParams) SetBody(body *models.UpdateObjectSnapshotRequest) {
	o.Body = body
}

// WithID adds the id to the update object snapshot params
func (o *UpdateObjectSnapshotParams) WithID(id int64) *UpdateObjectSnapshotParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update object snapshot params
func (o *UpdateObjectSnapshotParams) SetID(id int64) {
	o.ID = id
}

// WithSnapshotID adds the snapshotID to the update object snapshot params
func (o *UpdateObjectSnapshotParams) WithSnapshotID(snapshotID string) *UpdateObjectSnapshotParams {
	o.SetSnapshotID(snapshotID)
	return o
}

// SetSnapshotID adds the snapshotId to the update object snapshot params
func (o *UpdateObjectSnapshotParams) SetSnapshotID(snapshotID string) {
	o.SnapshotID = snapshotID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateObjectSnapshotParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// path param snapshotId
	if err := r.SetPathParam("snapshotId", o.SnapshotID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
