// Code generated by go-swagger; DO NOT EDIT.

package object

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetObjectSnapshotVolumeInfoParams creates a new GetObjectSnapshotVolumeInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetObjectSnapshotVolumeInfoParams() *GetObjectSnapshotVolumeInfoParams {
	return &GetObjectSnapshotVolumeInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetObjectSnapshotVolumeInfoParamsWithTimeout creates a new GetObjectSnapshotVolumeInfoParams object
// with the ability to set a timeout on a request.
func NewGetObjectSnapshotVolumeInfoParamsWithTimeout(timeout time.Duration) *GetObjectSnapshotVolumeInfoParams {
	return &GetObjectSnapshotVolumeInfoParams{
		timeout: timeout,
	}
}

// NewGetObjectSnapshotVolumeInfoParamsWithContext creates a new GetObjectSnapshotVolumeInfoParams object
// with the ability to set a context for a request.
func NewGetObjectSnapshotVolumeInfoParamsWithContext(ctx context.Context) *GetObjectSnapshotVolumeInfoParams {
	return &GetObjectSnapshotVolumeInfoParams{
		Context: ctx,
	}
}

// NewGetObjectSnapshotVolumeInfoParamsWithHTTPClient creates a new GetObjectSnapshotVolumeInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetObjectSnapshotVolumeInfoParamsWithHTTPClient(client *http.Client) *GetObjectSnapshotVolumeInfoParams {
	return &GetObjectSnapshotVolumeInfoParams{
		HTTPClient: client,
	}
}

/*
GetObjectSnapshotVolumeInfoParams contains all the parameters to send to the API endpoint

	for the get object snapshot volume info operation.

	Typically these are written to a http.Request.
*/
type GetObjectSnapshotVolumeInfoParams struct {

	/* IncludeSupportedOnly.

	   Specifies whether to only return supported volumes.
	*/
	IncludeSupportedOnly *bool

	/* PointInTimeUsecs.

	   Specifies the point-in-time timestamp (in usecs from epoch) between snapshots for which the volume info is to be returned.

	   Format: int64
	*/
	PointInTimeUsecs *int64

	/* SnapshotID.

	   Specifies the snapshot id.
	*/
	SnapshotID string

	/* UseCachedData.

	   Specifies whether we can serve the GET request to the read replica cache. There is a lag of 15 seconds between the read replica and primary data source.
	*/
	UseCachedData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get object snapshot volume info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetObjectSnapshotVolumeInfoParams) WithDefaults() *GetObjectSnapshotVolumeInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get object snapshot volume info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetObjectSnapshotVolumeInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) WithTimeout(timeout time.Duration) *GetObjectSnapshotVolumeInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) WithContext(ctx context.Context) *GetObjectSnapshotVolumeInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) WithHTTPClient(client *http.Client) *GetObjectSnapshotVolumeInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeSupportedOnly adds the includeSupportedOnly to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) WithIncludeSupportedOnly(includeSupportedOnly *bool) *GetObjectSnapshotVolumeInfoParams {
	o.SetIncludeSupportedOnly(includeSupportedOnly)
	return o
}

// SetIncludeSupportedOnly adds the includeSupportedOnly to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) SetIncludeSupportedOnly(includeSupportedOnly *bool) {
	o.IncludeSupportedOnly = includeSupportedOnly
}

// WithPointInTimeUsecs adds the pointInTimeUsecs to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) WithPointInTimeUsecs(pointInTimeUsecs *int64) *GetObjectSnapshotVolumeInfoParams {
	o.SetPointInTimeUsecs(pointInTimeUsecs)
	return o
}

// SetPointInTimeUsecs adds the pointInTimeUsecs to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) SetPointInTimeUsecs(pointInTimeUsecs *int64) {
	o.PointInTimeUsecs = pointInTimeUsecs
}

// WithSnapshotID adds the snapshotID to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) WithSnapshotID(snapshotID string) *GetObjectSnapshotVolumeInfoParams {
	o.SetSnapshotID(snapshotID)
	return o
}

// SetSnapshotID adds the snapshotId to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) SetSnapshotID(snapshotID string) {
	o.SnapshotID = snapshotID
}

// WithUseCachedData adds the useCachedData to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) WithUseCachedData(useCachedData *bool) *GetObjectSnapshotVolumeInfoParams {
	o.SetUseCachedData(useCachedData)
	return o
}

// SetUseCachedData adds the useCachedData to the get object snapshot volume info params
func (o *GetObjectSnapshotVolumeInfoParams) SetUseCachedData(useCachedData *bool) {
	o.UseCachedData = useCachedData
}

// WriteToRequest writes these params to a swagger request
func (o *GetObjectSnapshotVolumeInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeSupportedOnly != nil {

		// query param includeSupportedOnly
		var qrIncludeSupportedOnly bool

		if o.IncludeSupportedOnly != nil {
			qrIncludeSupportedOnly = *o.IncludeSupportedOnly
		}
		qIncludeSupportedOnly := swag.FormatBool(qrIncludeSupportedOnly)
		if qIncludeSupportedOnly != "" {

			if err := r.SetQueryParam("includeSupportedOnly", qIncludeSupportedOnly); err != nil {
				return err
			}
		}
	}

	if o.PointInTimeUsecs != nil {

		// query param pointInTimeUsecs
		var qrPointInTimeUsecs int64

		if o.PointInTimeUsecs != nil {
			qrPointInTimeUsecs = *o.PointInTimeUsecs
		}
		qPointInTimeUsecs := swag.FormatInt64(qrPointInTimeUsecs)
		if qPointInTimeUsecs != "" {

			if err := r.SetQueryParam("pointInTimeUsecs", qPointInTimeUsecs); err != nil {
				return err
			}
		}
	}

	// path param snapshotId
	if err := r.SetPathParam("snapshotId", o.SnapshotID); err != nil {
		return err
	}

	if o.UseCachedData != nil {

		// query param useCachedData
		var qrUseCachedData bool

		if o.UseCachedData != nil {
			qrUseCachedData = *o.UseCachedData
		}
		qUseCachedData := swag.FormatBool(qrUseCachedData)
		if qUseCachedData != "" {

			if err := r.SetQueryParam("useCachedData", qUseCachedData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
