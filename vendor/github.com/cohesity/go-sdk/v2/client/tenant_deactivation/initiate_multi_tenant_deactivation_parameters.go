// Code generated by go-swagger; DO NOT EDIT.

package tenant_deactivation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewInitiateMultiTenantDeactivationParams creates a new InitiateMultiTenantDeactivationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewInitiateMultiTenantDeactivationParams() *InitiateMultiTenantDeactivationParams {
	return &InitiateMultiTenantDeactivationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewInitiateMultiTenantDeactivationParamsWithTimeout creates a new InitiateMultiTenantDeactivationParams object
// with the ability to set a timeout on a request.
func NewInitiateMultiTenantDeactivationParamsWithTimeout(timeout time.Duration) *InitiateMultiTenantDeactivationParams {
	return &InitiateMultiTenantDeactivationParams{
		timeout: timeout,
	}
}

// NewInitiateMultiTenantDeactivationParamsWithContext creates a new InitiateMultiTenantDeactivationParams object
// with the ability to set a context for a request.
func NewInitiateMultiTenantDeactivationParamsWithContext(ctx context.Context) *InitiateMultiTenantDeactivationParams {
	return &InitiateMultiTenantDeactivationParams{
		Context: ctx,
	}
}

// NewInitiateMultiTenantDeactivationParamsWithHTTPClient creates a new InitiateMultiTenantDeactivationParams object
// with the ability to set a custom HTTPClient for a request.
func NewInitiateMultiTenantDeactivationParamsWithHTTPClient(client *http.Client) *InitiateMultiTenantDeactivationParams {
	return &InitiateMultiTenantDeactivationParams{
		HTTPClient: client,
	}
}

/*
InitiateMultiTenantDeactivationParams contains all the parameters to send to the API endpoint

	for the initiate multi tenant deactivation operation.

	Typically these are written to a http.Request.
*/
type InitiateMultiTenantDeactivationParams struct {

	/* LivenessMode.

	   Liveness mode for the tenants on this cluster.
	*/
	LivenessMode *string

	/* OwnershipMode.

	   Ownership mode for the tenants on this cluster.
	*/
	OwnershipMode *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the initiate multi tenant deactivation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InitiateMultiTenantDeactivationParams) WithDefaults() *InitiateMultiTenantDeactivationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the initiate multi tenant deactivation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InitiateMultiTenantDeactivationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the initiate multi tenant deactivation params
func (o *InitiateMultiTenantDeactivationParams) WithTimeout(timeout time.Duration) *InitiateMultiTenantDeactivationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the initiate multi tenant deactivation params
func (o *InitiateMultiTenantDeactivationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the initiate multi tenant deactivation params
func (o *InitiateMultiTenantDeactivationParams) WithContext(ctx context.Context) *InitiateMultiTenantDeactivationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the initiate multi tenant deactivation params
func (o *InitiateMultiTenantDeactivationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the initiate multi tenant deactivation params
func (o *InitiateMultiTenantDeactivationParams) WithHTTPClient(client *http.Client) *InitiateMultiTenantDeactivationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the initiate multi tenant deactivation params
func (o *InitiateMultiTenantDeactivationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLivenessMode adds the livenessMode to the initiate multi tenant deactivation params
func (o *InitiateMultiTenantDeactivationParams) WithLivenessMode(livenessMode *string) *InitiateMultiTenantDeactivationParams {
	o.SetLivenessMode(livenessMode)
	return o
}

// SetLivenessMode adds the livenessMode to the initiate multi tenant deactivation params
func (o *InitiateMultiTenantDeactivationParams) SetLivenessMode(livenessMode *string) {
	o.LivenessMode = livenessMode
}

// WithOwnershipMode adds the ownershipMode to the initiate multi tenant deactivation params
func (o *InitiateMultiTenantDeactivationParams) WithOwnershipMode(ownershipMode *string) *InitiateMultiTenantDeactivationParams {
	o.SetOwnershipMode(ownershipMode)
	return o
}

// SetOwnershipMode adds the ownershipMode to the initiate multi tenant deactivation params
func (o *InitiateMultiTenantDeactivationParams) SetOwnershipMode(ownershipMode *string) {
	o.OwnershipMode = ownershipMode
}

// WriteToRequest writes these params to a swagger request
func (o *InitiateMultiTenantDeactivationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LivenessMode != nil {

		// query param livenessMode
		var qrLivenessMode string

		if o.LivenessMode != nil {
			qrLivenessMode = *o.LivenessMode
		}
		qLivenessMode := qrLivenessMode
		if qLivenessMode != "" {

			if err := r.SetQueryParam("livenessMode", qLivenessMode); err != nil {
				return err
			}
		}
	}

	if o.OwnershipMode != nil {

		// query param ownershipMode
		var qrOwnershipMode string

		if o.OwnershipMode != nil {
			qrOwnershipMode = *o.OwnershipMode
		}
		qOwnershipMode := qrOwnershipMode
		if qOwnershipMode != "" {

			if err := r.SetQueryParam("ownershipMode", qOwnershipMode); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
