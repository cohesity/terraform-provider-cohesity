// Code generated by go-swagger; DO NOT EDIT.

package remote_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRemoteClustersParams creates a new GetRemoteClustersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRemoteClustersParams() *GetRemoteClustersParams {
	return &GetRemoteClustersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRemoteClustersParamsWithTimeout creates a new GetRemoteClustersParams object
// with the ability to set a timeout on a request.
func NewGetRemoteClustersParamsWithTimeout(timeout time.Duration) *GetRemoteClustersParams {
	return &GetRemoteClustersParams{
		timeout: timeout,
	}
}

// NewGetRemoteClustersParamsWithContext creates a new GetRemoteClustersParams object
// with the ability to set a context for a request.
func NewGetRemoteClustersParamsWithContext(ctx context.Context) *GetRemoteClustersParams {
	return &GetRemoteClustersParams{
		Context: ctx,
	}
}

// NewGetRemoteClustersParamsWithHTTPClient creates a new GetRemoteClustersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRemoteClustersParamsWithHTTPClient(client *http.Client) *GetRemoteClustersParams {
	return &GetRemoteClustersParams{
		HTTPClient: client,
	}
}

/*
GetRemoteClustersParams contains all the parameters to send to the API endpoint

	for the get remote clusters operation.

	Typically these are written to a http.Request.
*/
type GetRemoteClustersParams struct {

	/* ClusterIds.

	   Specifies a list of Remote Cluster ids to filter.
	*/
	ClusterIds []int64

	/* ClusterNames.

	   Specifies a list of Remote Cluster names to filter.
	*/
	ClusterNames []string

	/* IncludeEncryptedCredentials.

	   If true, the response will include encrypted password.
	*/
	IncludeEncryptedCredentials *bool

	/* NodeAddresses.

	   Specifies a list of Remote Cluster IPs to filter.
	*/
	NodeAddresses []string

	/* Purpose.

	   Specifies the purpose for which the remote cluster is being registered.
	*/
	Purpose []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get remote clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRemoteClustersParams) WithDefaults() *GetRemoteClustersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get remote clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRemoteClustersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get remote clusters params
func (o *GetRemoteClustersParams) WithTimeout(timeout time.Duration) *GetRemoteClustersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get remote clusters params
func (o *GetRemoteClustersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get remote clusters params
func (o *GetRemoteClustersParams) WithContext(ctx context.Context) *GetRemoteClustersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get remote clusters params
func (o *GetRemoteClustersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get remote clusters params
func (o *GetRemoteClustersParams) WithHTTPClient(client *http.Client) *GetRemoteClustersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get remote clusters params
func (o *GetRemoteClustersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterIds adds the clusterIds to the get remote clusters params
func (o *GetRemoteClustersParams) WithClusterIds(clusterIds []int64) *GetRemoteClustersParams {
	o.SetClusterIds(clusterIds)
	return o
}

// SetClusterIds adds the clusterIds to the get remote clusters params
func (o *GetRemoteClustersParams) SetClusterIds(clusterIds []int64) {
	o.ClusterIds = clusterIds
}

// WithClusterNames adds the clusterNames to the get remote clusters params
func (o *GetRemoteClustersParams) WithClusterNames(clusterNames []string) *GetRemoteClustersParams {
	o.SetClusterNames(clusterNames)
	return o
}

// SetClusterNames adds the clusterNames to the get remote clusters params
func (o *GetRemoteClustersParams) SetClusterNames(clusterNames []string) {
	o.ClusterNames = clusterNames
}

// WithIncludeEncryptedCredentials adds the includeEncryptedCredentials to the get remote clusters params
func (o *GetRemoteClustersParams) WithIncludeEncryptedCredentials(includeEncryptedCredentials *bool) *GetRemoteClustersParams {
	o.SetIncludeEncryptedCredentials(includeEncryptedCredentials)
	return o
}

// SetIncludeEncryptedCredentials adds the includeEncryptedCredentials to the get remote clusters params
func (o *GetRemoteClustersParams) SetIncludeEncryptedCredentials(includeEncryptedCredentials *bool) {
	o.IncludeEncryptedCredentials = includeEncryptedCredentials
}

// WithNodeAddresses adds the nodeAddresses to the get remote clusters params
func (o *GetRemoteClustersParams) WithNodeAddresses(nodeAddresses []string) *GetRemoteClustersParams {
	o.SetNodeAddresses(nodeAddresses)
	return o
}

// SetNodeAddresses adds the nodeAddresses to the get remote clusters params
func (o *GetRemoteClustersParams) SetNodeAddresses(nodeAddresses []string) {
	o.NodeAddresses = nodeAddresses
}

// WithPurpose adds the purpose to the get remote clusters params
func (o *GetRemoteClustersParams) WithPurpose(purpose []string) *GetRemoteClustersParams {
	o.SetPurpose(purpose)
	return o
}

// SetPurpose adds the purpose to the get remote clusters params
func (o *GetRemoteClustersParams) SetPurpose(purpose []string) {
	o.Purpose = purpose
}

// WriteToRequest writes these params to a swagger request
func (o *GetRemoteClustersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterIds != nil {

		// binding items for clusterIds
		joinedClusterIds := o.bindParamClusterIds(reg)

		// query array param clusterIds
		if err := r.SetQueryParam("clusterIds", joinedClusterIds...); err != nil {
			return err
		}
	}

	if o.ClusterNames != nil {

		// binding items for clusterNames
		joinedClusterNames := o.bindParamClusterNames(reg)

		// query array param clusterNames
		if err := r.SetQueryParam("clusterNames", joinedClusterNames...); err != nil {
			return err
		}
	}

	if o.IncludeEncryptedCredentials != nil {

		// query param includeEncryptedCredentials
		var qrIncludeEncryptedCredentials bool

		if o.IncludeEncryptedCredentials != nil {
			qrIncludeEncryptedCredentials = *o.IncludeEncryptedCredentials
		}
		qIncludeEncryptedCredentials := swag.FormatBool(qrIncludeEncryptedCredentials)
		if qIncludeEncryptedCredentials != "" {

			if err := r.SetQueryParam("includeEncryptedCredentials", qIncludeEncryptedCredentials); err != nil {
				return err
			}
		}
	}

	if o.NodeAddresses != nil {

		// binding items for nodeAddresses
		joinedNodeAddresses := o.bindParamNodeAddresses(reg)

		// query array param nodeAddresses
		if err := r.SetQueryParam("nodeAddresses", joinedNodeAddresses...); err != nil {
			return err
		}
	}

	if o.Purpose != nil {

		// binding items for purpose
		joinedPurpose := o.bindParamPurpose(reg)

		// query array param purpose
		if err := r.SetQueryParam("purpose", joinedPurpose...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetRemoteClusters binds the parameter clusterIds
func (o *GetRemoteClustersParams) bindParamClusterIds(formats strfmt.Registry) []string {
	clusterIdsIR := o.ClusterIds

	var clusterIdsIC []string
	for _, clusterIdsIIR := range clusterIdsIR { // explode []int64

		clusterIdsIIV := swag.FormatInt64(clusterIdsIIR) // int64 as string
		clusterIdsIC = append(clusterIdsIC, clusterIdsIIV)
	}

	// items.CollectionFormat: ""
	clusterIdsIS := swag.JoinByFormat(clusterIdsIC, "")

	return clusterIdsIS
}

// bindParamGetRemoteClusters binds the parameter clusterNames
func (o *GetRemoteClustersParams) bindParamClusterNames(formats strfmt.Registry) []string {
	clusterNamesIR := o.ClusterNames

	var clusterNamesIC []string
	for _, clusterNamesIIR := range clusterNamesIR { // explode []string

		clusterNamesIIV := clusterNamesIIR // string as string
		clusterNamesIC = append(clusterNamesIC, clusterNamesIIV)
	}

	// items.CollectionFormat: ""
	clusterNamesIS := swag.JoinByFormat(clusterNamesIC, "")

	return clusterNamesIS
}

// bindParamGetRemoteClusters binds the parameter nodeAddresses
func (o *GetRemoteClustersParams) bindParamNodeAddresses(formats strfmt.Registry) []string {
	nodeAddressesIR := o.NodeAddresses

	var nodeAddressesIC []string
	for _, nodeAddressesIIR := range nodeAddressesIR { // explode []string

		nodeAddressesIIV := nodeAddressesIIR // string as string
		nodeAddressesIC = append(nodeAddressesIC, nodeAddressesIIV)
	}

	// items.CollectionFormat: ""
	nodeAddressesIS := swag.JoinByFormat(nodeAddressesIC, "")

	return nodeAddressesIS
}

// bindParamGetRemoteClusters binds the parameter purpose
func (o *GetRemoteClustersParams) bindParamPurpose(formats strfmt.Registry) []string {
	purposeIR := o.Purpose

	var purposeIC []string
	for _, purposeIIR := range purposeIR { // explode []string

		purposeIIV := purposeIIR // string as string
		purposeIC = append(purposeIC, purposeIIV)
	}

	// items.CollectionFormat: ""
	purposeIS := swag.JoinByFormat(purposeIC, "")

	return purposeIS
}
