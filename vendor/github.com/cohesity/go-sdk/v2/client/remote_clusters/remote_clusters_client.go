// Code generated by go-swagger; DO NOT EDIT.

package remote_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new remote clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new remote clusters API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new remote clusters API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for remote clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteRemoteCluster(params *DeleteRemoteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRemoteClusterNoContent, error)

	GetRemoteClusterByID(params *GetRemoteClusterByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteClusterByIDOK, error)

	GetRemoteClusters(params *GetRemoteClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteClustersOK, error)

	RegisterRemoteCluster(params *RegisterRemoteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterRemoteClusterCreated, error)

	UpdateRemoteCluster(params *UpdateRemoteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRemoteClusterOK, error)

	ValidateRemoteCluster(params *ValidateRemoteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateRemoteClusterOK, *ValidateRemoteClusterNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteRemoteCluster unregisters a remote cluster

**Privileges:** ```CLUSTER_REMOTE_MODIFY``` <br><br>Unregister an external Remote Cluster.
*/
func (a *Client) DeleteRemoteCluster(params *DeleteRemoteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRemoteClusterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRemoteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRemoteCluster",
		Method:             "DELETE",
		PathPattern:        "/remote-clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRemoteClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRemoteClusterNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteRemoteClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRemoteClusterByID gets remote cluster config by id

**Privileges:** ```CLUSTER_REMOTE_VIEW``` <br><br>Get Remote Cluster config by cluster id.
*/
func (a *Client) GetRemoteClusterByID(params *GetRemoteClusterByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteClusterByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteClusterByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRemoteClusterById",
		Method:             "GET",
		PathPattern:        "/remote-clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRemoteClusterByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteClusterByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRemoteClusterByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRemoteClusters gets all registered remote clusters

**Privileges:** ```CLUSTER_REMOTE_VIEW``` <br><br>List the Remote Clusters that are registered on this local Cluster and that matches the filter criteria specified using parameters.
*/
func (a *Client) GetRemoteClusters(params *GetRemoteClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRemoteClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRemoteClusters",
		Method:             "GET",
		PathPattern:        "/remote-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRemoteClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRemoteClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RegisterRemoteCluster registers a remote cluster

**Privileges:** ```CLUSTER_REMOTE_MODIFY``` <br><br>Register a Remote Cluster on this local cluster for remote access and/or replication.
*/
func (a *Client) RegisterRemoteCluster(params *RegisterRemoteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterRemoteClusterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterRemoteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterRemoteCluster",
		Method:             "POST",
		PathPattern:        "/remote-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterRemoteClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterRemoteClusterCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterRemoteClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateRemoteCluster updates a remote cluster config

**Privileges:** ```CLUSTER_REMOTE_MODIFY``` <br><br>Update the connection settings of the specified Remote Cluster that is registered on this Cluster.
*/
func (a *Client) UpdateRemoteCluster(params *UpdateRemoteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRemoteClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRemoteCluster",
		Method:             "PUT",
		PathPattern:        "/remote-clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRemoteClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRemoteClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateRemoteClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ValidateRemoteCluster validates remote cluster config

**Privileges:** ```CLUSTER_REMOTE_MODIFY``` <br><br>Validate a Remote Cluster credentials. If includeRemoteClusterMetadata is true, response will include the remote cluster metadata.
*/
func (a *Client) ValidateRemoteCluster(params *ValidateRemoteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateRemoteClusterOK, *ValidateRemoteClusterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateRemoteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ValidateRemoteCluster",
		Method:             "POST",
		PathPattern:        "/remote-clusters/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateRemoteClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateRemoteClusterOK:
		return value, nil, nil
	case *ValidateRemoteClusterNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateRemoteClusterDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
