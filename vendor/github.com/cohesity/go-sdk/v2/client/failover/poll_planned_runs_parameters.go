// Code generated by go-swagger; DO NOT EDIT.

package failover

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPollPlannedRunsParams creates a new PollPlannedRunsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPollPlannedRunsParams() *PollPlannedRunsParams {
	return &PollPlannedRunsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPollPlannedRunsParamsWithTimeout creates a new PollPlannedRunsParams object
// with the ability to set a timeout on a request.
func NewPollPlannedRunsParamsWithTimeout(timeout time.Duration) *PollPlannedRunsParams {
	return &PollPlannedRunsParams{
		timeout: timeout,
	}
}

// NewPollPlannedRunsParamsWithContext creates a new PollPlannedRunsParams object
// with the ability to set a context for a request.
func NewPollPlannedRunsParamsWithContext(ctx context.Context) *PollPlannedRunsParams {
	return &PollPlannedRunsParams{
		Context: ctx,
	}
}

// NewPollPlannedRunsParamsWithHTTPClient creates a new PollPlannedRunsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPollPlannedRunsParamsWithHTTPClient(client *http.Client) *PollPlannedRunsParams {
	return &PollPlannedRunsParams{
		HTTPClient: client,
	}
}

/*
PollPlannedRunsParams contains all the parameters to send to the API endpoint

	for the poll planned runs operation.

	Typically these are written to a http.Request.
*/
type PollPlannedRunsParams struct {

	/* FailoverIds.

	   Get runs for specific failover workflows.
	*/
	FailoverIds []string

	/* IncludeTenants.

	   If true, the response will include Protection Groups which were created by all tenants which the current user has permission to see. If false, then only Protection Groups created by the current user will be returned.
	*/
	IncludeTenants *bool

	/* TenantIds.

	   TenantIds contains ids of the tenants for which objects are to be returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the poll planned runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PollPlannedRunsParams) WithDefaults() *PollPlannedRunsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the poll planned runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PollPlannedRunsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the poll planned runs params
func (o *PollPlannedRunsParams) WithTimeout(timeout time.Duration) *PollPlannedRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the poll planned runs params
func (o *PollPlannedRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the poll planned runs params
func (o *PollPlannedRunsParams) WithContext(ctx context.Context) *PollPlannedRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the poll planned runs params
func (o *PollPlannedRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the poll planned runs params
func (o *PollPlannedRunsParams) WithHTTPClient(client *http.Client) *PollPlannedRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the poll planned runs params
func (o *PollPlannedRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFailoverIds adds the failoverIds to the poll planned runs params
func (o *PollPlannedRunsParams) WithFailoverIds(failoverIds []string) *PollPlannedRunsParams {
	o.SetFailoverIds(failoverIds)
	return o
}

// SetFailoverIds adds the failoverIds to the poll planned runs params
func (o *PollPlannedRunsParams) SetFailoverIds(failoverIds []string) {
	o.FailoverIds = failoverIds
}

// WithIncludeTenants adds the includeTenants to the poll planned runs params
func (o *PollPlannedRunsParams) WithIncludeTenants(includeTenants *bool) *PollPlannedRunsParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the poll planned runs params
func (o *PollPlannedRunsParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithTenantIds adds the tenantIds to the poll planned runs params
func (o *PollPlannedRunsParams) WithTenantIds(tenantIds []string) *PollPlannedRunsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the poll planned runs params
func (o *PollPlannedRunsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *PollPlannedRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FailoverIds != nil {

		// binding items for failoverIds
		joinedFailoverIds := o.bindParamFailoverIds(reg)

		// query array param failoverIds
		if err := r.SetQueryParam("failoverIds", joinedFailoverIds...); err != nil {
			return err
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPollPlannedRuns binds the parameter failoverIds
func (o *PollPlannedRunsParams) bindParamFailoverIds(formats strfmt.Registry) []string {
	failoverIdsIR := o.FailoverIds

	var failoverIdsIC []string
	for _, failoverIdsIIR := range failoverIdsIR { // explode []string

		failoverIdsIIV := failoverIdsIIR // string as string
		failoverIdsIC = append(failoverIdsIC, failoverIdsIIV)
	}

	// items.CollectionFormat: ""
	failoverIdsIS := swag.JoinByFormat(failoverIdsIC, "")

	return failoverIdsIS
}

// bindParamPollPlannedRuns binds the parameter tenantIds
func (o *PollPlannedRunsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
