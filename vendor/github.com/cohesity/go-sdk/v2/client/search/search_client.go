// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new search API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new search API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SearchIndexedObjects(params *SearchIndexedObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIndexedObjectsOK, error)

	SearchObjects(params *SearchObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchObjectsOK, error)

	SearchProtectedObjects(params *SearchProtectedObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProtectedObjectsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SearchIndexedObjects lists indexed objects

**Privileges:** ```RESTORE_VIEW``` <br><br>List all the indexed objects like files and folders, emails, mailboxes etc., that match the specified search and filter criteria from protected objects.
*/
func (a *Client) SearchIndexedObjects(params *SearchIndexedObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIndexedObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchIndexedObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchIndexedObjects",
		Method:             "POST",
		PathPattern:        "/data-protect/search/indexed-objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchIndexedObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchIndexedObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchIndexedObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchObjects lists objects

**Privileges:** ```OBJECT_SEARCH``` <br><br>List objects.
*/
func (a *Client) SearchObjects(params *SearchObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchObjects",
		Method:             "GET",
		PathPattern:        "/data-protect/search/objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchProtectedObjects lists protected objects

**Privileges:** ```RESTORE_VIEW``` <br><br>List protected objects and corresponding detail information from registered sources filtered by specified query parameters. If no search pattern or filter parameters are specified, all protected objects currently found are returned.
*/
func (a *Client) SearchProtectedObjects(params *SearchProtectedObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProtectedObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProtectedObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchProtectedObjects",
		Method:             "GET",
		PathPattern:        "/data-protect/search/protected-objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchProtectedObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchProtectedObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchProtectedObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
