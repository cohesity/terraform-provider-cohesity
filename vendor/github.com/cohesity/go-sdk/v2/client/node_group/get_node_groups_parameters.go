// Code generated by go-swagger; DO NOT EDIT.

package node_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNodeGroupsParams creates a new GetNodeGroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNodeGroupsParams() *GetNodeGroupsParams {
	return &GetNodeGroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNodeGroupsParamsWithTimeout creates a new GetNodeGroupsParams object
// with the ability to set a timeout on a request.
func NewGetNodeGroupsParamsWithTimeout(timeout time.Duration) *GetNodeGroupsParams {
	return &GetNodeGroupsParams{
		timeout: timeout,
	}
}

// NewGetNodeGroupsParamsWithContext creates a new GetNodeGroupsParams object
// with the ability to set a context for a request.
func NewGetNodeGroupsParamsWithContext(ctx context.Context) *GetNodeGroupsParams {
	return &GetNodeGroupsParams{
		Context: ctx,
	}
}

// NewGetNodeGroupsParamsWithHTTPClient creates a new GetNodeGroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNodeGroupsParamsWithHTTPClient(client *http.Client) *GetNodeGroupsParams {
	return &GetNodeGroupsParams{
		HTTPClient: client,
	}
}

/*
GetNodeGroupsParams contains all the parameters to send to the API endpoint

	for the get node groups operation.

	Typically these are written to a http.Request.
*/
type GetNodeGroupsParams struct {

	/* GroupNames.

	   Filter node groups by a list of node group names.
	*/
	GroupNames []string

	/* GroupType.

	   Filter node groups by a node group type.

	   Format: int32
	*/
	GroupType *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get node groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNodeGroupsParams) WithDefaults() *GetNodeGroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get node groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNodeGroupsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get node groups params
func (o *GetNodeGroupsParams) WithTimeout(timeout time.Duration) *GetNodeGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get node groups params
func (o *GetNodeGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get node groups params
func (o *GetNodeGroupsParams) WithContext(ctx context.Context) *GetNodeGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get node groups params
func (o *GetNodeGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get node groups params
func (o *GetNodeGroupsParams) WithHTTPClient(client *http.Client) *GetNodeGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get node groups params
func (o *GetNodeGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupNames adds the groupNames to the get node groups params
func (o *GetNodeGroupsParams) WithGroupNames(groupNames []string) *GetNodeGroupsParams {
	o.SetGroupNames(groupNames)
	return o
}

// SetGroupNames adds the groupNames to the get node groups params
func (o *GetNodeGroupsParams) SetGroupNames(groupNames []string) {
	o.GroupNames = groupNames
}

// WithGroupType adds the groupType to the get node groups params
func (o *GetNodeGroupsParams) WithGroupType(groupType *int32) *GetNodeGroupsParams {
	o.SetGroupType(groupType)
	return o
}

// SetGroupType adds the groupType to the get node groups params
func (o *GetNodeGroupsParams) SetGroupType(groupType *int32) {
	o.GroupType = groupType
}

// WriteToRequest writes these params to a swagger request
func (o *GetNodeGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.GroupNames != nil {

		// binding items for groupNames
		joinedGroupNames := o.bindParamGroupNames(reg)

		// query array param groupNames
		if err := r.SetQueryParam("groupNames", joinedGroupNames...); err != nil {
			return err
		}
	}

	if o.GroupType != nil {

		// query param groupType
		var qrGroupType int32

		if o.GroupType != nil {
			qrGroupType = *o.GroupType
		}
		qGroupType := swag.FormatInt32(qrGroupType)
		if qGroupType != "" {

			if err := r.SetQueryParam("groupType", qGroupType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetNodeGroups binds the parameter groupNames
func (o *GetNodeGroupsParams) bindParamGroupNames(formats strfmt.Registry) []string {
	groupNamesIR := o.GroupNames

	var groupNamesIC []string
	for _, groupNamesIIR := range groupNamesIR { // explode []string

		groupNamesIIV := groupNamesIIR // string as string
		groupNamesIC = append(groupNamesIC, groupNamesIIV)
	}

	// items.CollectionFormat: ""
	groupNamesIS := swag.JoinByFormat(groupNamesIC, "")

	return groupNamesIS
}
