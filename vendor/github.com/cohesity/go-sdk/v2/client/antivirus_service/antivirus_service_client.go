// Code generated by go-swagger; DO NOT EDIT.

package antivirus_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new antivirus service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new antivirus service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new antivirus service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for antivirus service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAntivirusGroup(params *CreateAntivirusGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAntivirusGroupCreated, error)

	DeleteAntivirusGroup(params *DeleteAntivirusGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAntivirusGroupNoContent, error)

	DeleteInfectedFiles(params *DeleteInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInfectedFilesCreated, error)

	DeleteInfectedObjects(params *DeleteInfectedObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInfectedObjectsCreated, error)

	GetAntivirusServiceGroups(params *GetAntivirusServiceGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAntivirusServiceGroupsOK, error)

	GetIcapURIConnectionStatus(params *GetIcapURIConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIcapURIConnectionStatusOK, error)

	GetInfectedFiles(params *GetInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInfectedFilesOK, error)

	UpdateAntivirusGroup(params *UpdateAntivirusGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAntivirusGroupOK, error)

	UpdateInfectedFiles(params *UpdateInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateInfectedFilesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAntivirusGroup creates an antivirus service group

**Privileges:** ```CLUSTER_VIEW``` <br><br>Create Antivirus Service group.
*/
func (a *Client) CreateAntivirusGroup(params *CreateAntivirusGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAntivirusGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAntivirusGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAntivirusGroup",
		Method:             "POST",
		PathPattern:        "/antivirus-service/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAntivirusGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAntivirusGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAntivirusGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAntivirusGroup deletes an antivirus service group

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Deletes an Antivirus service group based on given id.
*/
func (a *Client) DeleteAntivirusGroup(params *DeleteAntivirusGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAntivirusGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAntivirusGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAntivirusGroup",
		Method:             "DELETE",
		PathPattern:        "/antivirus-service/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAntivirusGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAntivirusGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAntivirusGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteInfectedFiles deletes infected files

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Delete infected files.
*/
func (a *Client) DeleteInfectedFiles(params *DeleteInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInfectedFilesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInfectedFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteInfectedFiles",
		Method:             "DELETE",
		PathPattern:        "/antivirus-service/infected-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInfectedFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInfectedFilesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteInfectedFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteInfectedObjects deletes infected objects permanently

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Delete infected objects permanently.
*/
func (a *Client) DeleteInfectedObjects(params *DeleteInfectedObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInfectedObjectsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInfectedObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteInfectedObjects",
		Method:             "DELETE",
		PathPattern:        "/antivirus-service/infected-objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInfectedObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInfectedObjectsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteInfectedObjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAntivirusServiceGroups gets antivirus service groups

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get Antivirus Service groups.
*/
func (a *Client) GetAntivirusServiceGroups(params *GetAntivirusServiceGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAntivirusServiceGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAntivirusServiceGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAntivirusServiceGroups",
		Method:             "GET",
		PathPattern:        "/antivirus-service/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAntivirusServiceGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAntivirusServiceGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAntivirusServiceGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIcapURIConnectionStatus gets i c a p Uri connection status

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get ICAP Uri connection status.
*/
func (a *Client) GetIcapURIConnectionStatus(params *GetIcapURIConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIcapURIConnectionStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIcapURIConnectionStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIcapUriConnectionStatus",
		Method:             "GET",
		PathPattern:        "/antivirus-service/icap-uri-connection-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIcapURIConnectionStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIcapURIConnectionStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIcapURIConnectionStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInfectedFiles gets infected entities

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get infected entities.
*/
func (a *Client) GetInfectedFiles(params *GetInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInfectedFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfectedFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInfectedFiles",
		Method:             "GET",
		PathPattern:        "/antivirus-service/infected-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInfectedFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInfectedFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInfectedFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAntivirusGroup updates an antivirus service group with given parameters or if state is specified enable or disable given group

**Privileges:** ```CLUSTER_VIEW``` <br><br>Update an Antivirus Service group.
*/
func (a *Client) UpdateAntivirusGroup(params *UpdateAntivirusGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAntivirusGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAntivirusGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAntivirusGroup",
		Method:             "PUT",
		PathPattern:        "/antivirus-service/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAntivirusGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAntivirusGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAntivirusGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateInfectedFiles updates infected entities state

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Update infected entities state.
*/
func (a *Client) UpdateInfectedFiles(params *UpdateInfectedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateInfectedFilesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInfectedFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateInfectedFiles",
		Method:             "PUT",
		PathPattern:        "/antivirus-service/infected-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInfectedFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInfectedFilesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateInfectedFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
