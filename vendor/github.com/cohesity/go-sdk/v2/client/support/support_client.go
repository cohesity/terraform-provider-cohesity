// Code generated by go-swagger; DO NOT EDIT.

package support

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new support API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new support API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new support API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for support API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetSupportUserConfig(params *GetSupportUserConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSupportUserConfigOK, error)

	UpdateSupportUserConfig(params *UpdateSupportUserConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSupportUserConfigOK, error)

	ValidateSupportUserCreds(params *ValidateSupportUserCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateSupportUserCredsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetSupportUserConfig gets support user configuration

**Privileges:** ```CLUSTER_VIEW``` <br><br>Cohesity provides a support user account for improved security and you need to use the support user account to log in to the Cohesity cluster bash shell using SSH. This endpoint returns the current support user configuration on the Cohesity cluster.
*/
func (a *Client) GetSupportUserConfig(params *GetSupportUserConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSupportUserConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportUserConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSupportUserConfig",
		Method:             "GET",
		PathPattern:        "/support-user/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSupportUserConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupportUserConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSupportUserConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSupportUserConfig updates support user configuration

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Update support user's configuration. This allows you to update the support user's password and/or grant sudo access to the user.
*/
func (a *Client) UpdateSupportUserConfig(params *UpdateSupportUserConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSupportUserConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSupportUserConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSupportUserConfig",
		Method:             "PUT",
		PathPattern:        "/support-user/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSupportUserConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSupportUserConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSupportUserConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ValidateSupportUserCreds validates the support user credentials

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Validates the support user credentials.
*/
func (a *Client) ValidateSupportUserCreds(params *ValidateSupportUserCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateSupportUserCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateSupportUserCredsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ValidateSupportUserCreds",
		Method:             "POST",
		PathPattern:        "/support-user/config/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateSupportUserCredsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateSupportUserCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateSupportUserCredsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
