// Code generated by go-swagger; DO NOT EDIT.

package syslog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new syslog API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new syslog API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new syslog API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for syslog API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddSyslogServer(params *AddSyslogServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSyslogServerCreated, error)

	GetSupportedSyslogProgramNames(params *GetSupportedSyslogProgramNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSupportedSyslogProgramNamesOK, error)

	GetSyslogAuditTags(params *GetSyslogAuditTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSyslogAuditTagsOK, error)

	GetSyslogServerByID(params *GetSyslogServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSyslogServerByIDOK, error)

	GetSyslogServerStatusByID(params *GetSyslogServerStatusByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSyslogServerStatusByIDOK, error)

	GetSyslogServers(params *GetSyslogServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSyslogServersOK, error)

	PatchSyslogServerByID(params *PatchSyslogServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchSyslogServerByIDOK, error)

	RemoveSyslogServer(params *RemoveSyslogServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSyslogServerNoContent, error)

	RemoveSyslogServers(params *RemoveSyslogServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSyslogServersNoContent, error)

	UpdateSyslogAuditTags(params *UpdateSyslogAuditTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSyslogAuditTagsOK, error)

	UpdateSyslogServerByID(params *UpdateSyslogServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSyslogServerByIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddSyslogServer adds syslog server

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Add a new syslog server
*/
func (a *Client) AddSyslogServer(params *AddSyslogServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSyslogServerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSyslogServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddSyslogServer",
		Method:             "POST",
		PathPattern:        "/syslog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSyslogServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSyslogServerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddSyslogServerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSupportedSyslogProgramNames gets supported program names

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get supported program names to configure for a syslog server.
*/
func (a *Client) GetSupportedSyslogProgramNames(params *GetSupportedSyslogProgramNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSupportedSyslogProgramNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportedSyslogProgramNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSupportedSyslogProgramNames",
		Method:             "GET",
		PathPattern:        "/syslog/program-names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSupportedSyslogProgramNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupportedSyslogProgramNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSupportedSyslogProgramNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSyslogAuditTags gets cluster audit tags

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get cluster audit tags.
*/
func (a *Client) GetSyslogAuditTags(params *GetSyslogAuditTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSyslogAuditTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSyslogAuditTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSyslogAuditTags",
		Method:             "GET",
		PathPattern:        "/syslog/audit-tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSyslogAuditTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSyslogAuditTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSyslogAuditTagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSyslogServerByID gets a syslog server by id

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get a syslog server by id.
*/
func (a *Client) GetSyslogServerByID(params *GetSyslogServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSyslogServerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSyslogServerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSyslogServerById",
		Method:             "GET",
		PathPattern:        "/syslog/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSyslogServerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSyslogServerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSyslogServerByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSyslogServerStatusByID gets a syslog server reachability status

**Privileges:** ```CLUSTER_VIEW``` <br><br>Check syslog server reachability by given Id.
*/
func (a *Client) GetSyslogServerStatusByID(params *GetSyslogServerStatusByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSyslogServerStatusByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSyslogServerStatusByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSyslogServerStatusById",
		Method:             "GET",
		PathPattern:        "/syslog/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSyslogServerStatusByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSyslogServerStatusByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSyslogServerStatusByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSyslogServers gets list of syslog servers

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get list of syslog servers.
*/
func (a *Client) GetSyslogServers(params *GetSyslogServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSyslogServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSyslogServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSyslogServers",
		Method:             "GET",
		PathPattern:        "/syslog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSyslogServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSyslogServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSyslogServersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchSyslogServerByID patches a syslog server by id

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Patch syslog server by id.
*/
func (a *Client) PatchSyslogServerByID(params *PatchSyslogServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchSyslogServerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSyslogServerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchSyslogServerById",
		Method:             "PATCH",
		PathPattern:        "/syslog/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSyslogServerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSyslogServerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchSyslogServerByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RemoveSyslogServer removes syslog server by id

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Delete syslog server by id.
*/
func (a *Client) RemoveSyslogServer(params *RemoveSyslogServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSyslogServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSyslogServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveSyslogServer",
		Method:             "DELETE",
		PathPattern:        "/syslog/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveSyslogServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveSyslogServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveSyslogServerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RemoveSyslogServers removes syslog servers

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Delete all syslog servers.
*/
func (a *Client) RemoveSyslogServers(params *RemoveSyslogServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSyslogServersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSyslogServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveSyslogServers",
		Method:             "DELETE",
		PathPattern:        "/syslog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveSyslogServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveSyslogServersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveSyslogServersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSyslogAuditTags updates cluster audit tags

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Update cluster audit tags.
*/
func (a *Client) UpdateSyslogAuditTags(params *UpdateSyslogAuditTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSyslogAuditTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSyslogAuditTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSyslogAuditTags",
		Method:             "POST",
		PathPattern:        "/syslog/audit-tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSyslogAuditTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSyslogAuditTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSyslogAuditTagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSyslogServerByID updates a syslog server by id

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Update syslog server by id.
*/
func (a *Client) UpdateSyslogServerByID(params *UpdateSyslogServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSyslogServerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSyslogServerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSyslogServerById",
		Method:             "PUT",
		PathPattern:        "/syslog/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSyslogServerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSyslogServerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSyslogServerByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
