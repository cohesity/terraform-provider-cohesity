// Code generated by go-swagger; DO NOT EDIT.

package syslog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cohesity/go-sdk/v2/models"
)

// GetSupportedSyslogProgramNamesReader is a Reader for the GetSupportedSyslogProgramNames structure.
type GetSupportedSyslogProgramNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSupportedSyslogProgramNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSupportedSyslogProgramNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetSupportedSyslogProgramNamesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSupportedSyslogProgramNamesOK creates a GetSupportedSyslogProgramNamesOK with default headers values
func NewGetSupportedSyslogProgramNamesOK() *GetSupportedSyslogProgramNamesOK {
	return &GetSupportedSyslogProgramNamesOK{}
}

/*
GetSupportedSyslogProgramNamesOK describes a response with status code 200, with default header values.

Success
*/
type GetSupportedSyslogProgramNamesOK struct {
	Payload []string
}

// IsSuccess returns true when this get supported syslog program names o k response has a 2xx status code
func (o *GetSupportedSyslogProgramNamesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get supported syslog program names o k response has a 3xx status code
func (o *GetSupportedSyslogProgramNamesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get supported syslog program names o k response has a 4xx status code
func (o *GetSupportedSyslogProgramNamesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get supported syslog program names o k response has a 5xx status code
func (o *GetSupportedSyslogProgramNamesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get supported syslog program names o k response a status code equal to that given
func (o *GetSupportedSyslogProgramNamesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get supported syslog program names o k response
func (o *GetSupportedSyslogProgramNamesOK) Code() int {
	return 200
}

func (o *GetSupportedSyslogProgramNamesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /syslog/program-names][%d] getSupportedSyslogProgramNamesOK %s", 200, payload)
}

func (o *GetSupportedSyslogProgramNamesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /syslog/program-names][%d] getSupportedSyslogProgramNamesOK %s", 200, payload)
}

func (o *GetSupportedSyslogProgramNamesOK) GetPayload() []string {
	return o.Payload
}

func (o *GetSupportedSyslogProgramNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSupportedSyslogProgramNamesDefault creates a GetSupportedSyslogProgramNamesDefault with default headers values
func NewGetSupportedSyslogProgramNamesDefault(code int) *GetSupportedSyslogProgramNamesDefault {
	return &GetSupportedSyslogProgramNamesDefault{
		_statusCode: code,
	}
}

/*
GetSupportedSyslogProgramNamesDefault describes a response with status code -1, with default header values.

Error
*/
type GetSupportedSyslogProgramNamesDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get supported syslog program names default response has a 2xx status code
func (o *GetSupportedSyslogProgramNamesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get supported syslog program names default response has a 3xx status code
func (o *GetSupportedSyslogProgramNamesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get supported syslog program names default response has a 4xx status code
func (o *GetSupportedSyslogProgramNamesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get supported syslog program names default response has a 5xx status code
func (o *GetSupportedSyslogProgramNamesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get supported syslog program names default response a status code equal to that given
func (o *GetSupportedSyslogProgramNamesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get supported syslog program names default response
func (o *GetSupportedSyslogProgramNamesDefault) Code() int {
	return o._statusCode
}

func (o *GetSupportedSyslogProgramNamesDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /syslog/program-names][%d] GetSupportedSyslogProgramNames default %s", o._statusCode, payload)
}

func (o *GetSupportedSyslogProgramNamesDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /syslog/program-names][%d] GetSupportedSyslogProgramNames default %s", o._statusCode, payload)
}

func (o *GetSupportedSyslogProgramNamesDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSupportedSyslogProgramNamesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
