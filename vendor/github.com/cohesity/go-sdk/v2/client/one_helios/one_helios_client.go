// Code generated by go-swagger; DO NOT EDIT.

package one_helios

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new one helios API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new one helios API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new one helios API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for one helios API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetServicesStatus(params *GetServicesStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesStatusOK, error)

	InstallLogs(params *InstallLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstallLogsOK, error)

	PerformServiceAction(params *PerformServiceActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PerformServiceActionOK, error)

	ServicesHealth(params *ServicesHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesHealthOK, error)

	UpgradeLogs(params *UpgradeLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeLogsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetServicesStatus gets status of an ondemand service

```Unknown Privileges``` <br><br>Status for an ondemand service and images available.
*/
func (a *Client) GetServicesStatus(params *GetServicesStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServicesStatus",
		Method:             "GET",
		PathPattern:        "/helios/services/ondemand/{serviceName}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServicesStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	InstallLogs gets helios install logs

	**Privileges:** ```CLUSTER_VIEW``` <br><br>"Fetches install logs for services in the Helios platform."

"Returns an InstallLogsResponse object containing the install version,"
"install status for each service, and related messages."
*/
func (a *Client) InstallLogs(params *InstallLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstallLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstallLogs",
		Method:             "GET",
		PathPattern:        "/helios/services/install/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstallLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InstallLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformServiceAction performs action to enable disable an on demand service

```Unknown Privileges``` <br><br>
*/
func (a *Client) PerformServiceAction(params *PerformServiceActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PerformServiceActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformServiceActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformServiceAction",
		Method:             "PUT",
		PathPattern:        "/helios/services/ondemand/{serviceName}/action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformServiceActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformServiceActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformServiceActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	ServicesHealth gets health status for services

	**Privileges:** ```CLUSTER_VIEW``` <br><br>"Fetches the health status for various services in the Helios"

"platform. Returns a ServicesHealthGetResponse object containing the"
"overall health status and health status for each service."
*/
func (a *Client) ServicesHealth(params *ServicesHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServicesHealth",
		Method:             "GET",
		PathPattern:        "/helios/health/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServicesHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServicesHealthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpgradeLogs gets helios upgrade logs

	**Privileges:** ```CLUSTER_VIEW``` <br><br>"Fetches upgrade logs for services in the Helios platform."

"Returns an UpgradeLogsResponse object containing the upgrade version,"
"upgrade status for each service, and related messages."
*/
func (a *Client) UpgradeLogs(params *UpgradeLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradeLogs",
		Method:             "GET",
		PathPattern:        "/helios/services/upgrade/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
