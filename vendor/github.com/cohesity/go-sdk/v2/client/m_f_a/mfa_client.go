// Code generated by go-swagger; DO NOT EDIT.

package m_f_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new m f a API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new m f a API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new m f a API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for m f a API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEmailOtp(params *CreateEmailOtpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEmailOtpNoContent, error)

	CreateTotpKey(params *CreateTotpKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTotpKeyCreated, error)

	GetMFAConfig(params *GetMFAConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMFAConfigOK, error)

	GetSupportMFAConfig(params *GetSupportMFAConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSupportMFAConfigOK, error)

	SendEmailOtp(params *SendEmailOtpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SendEmailOtpNoContent, error)

	SendSupportEmailOtp(params *SendSupportEmailOtpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SendSupportEmailOtpNoContent, error)

	UpdateMFAConfig(params *UpdateMFAConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMFAConfigNoContent, error)

	UpdateSupportMFAConfig(params *UpdateSupportMFAConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSupportMFAConfigOK, error)

	VerifySupportUserTotp(params *VerifySupportUserTotpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifySupportUserTotpOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateEmailOtp creates a new o t p to be sent to the user email

```No Privileges Required``` <br><br>Creates a new One Time Password for the user email. This is used for API login.
*/
func (a *Client) CreateEmailOtp(params *CreateEmailOtpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEmailOtpNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEmailOtpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateEmailOtp",
		Method:             "POST",
		PathPattern:        "/email-otp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEmailOtpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEmailOtpNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateEmailOtpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTotpKey creates a new t o t p secret URI and store the secret key

```No Privileges Required``` <br><br>Create a TOTP key.
*/
func (a *Client) CreateTotpKey(params *CreateTotpKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTotpKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTotpKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTotpKey",
		Method:             "POST",
		PathPattern:        "/totp-key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTotpKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTotpKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTotpKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMFAConfig returns the current m f a configuration

```No Privileges Required``` <br><br>Returns the current MFA configuration for the cluster.
*/
func (a *Client) GetMFAConfig(params *GetMFAConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMFAConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMFAConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMFAConfig",
		Method:             "GET",
		PathPattern:        "/mfa-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMFAConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMFAConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMFAConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSupportMFAConfig returns the current m f a configuration

**Privileges:** ```CLUSTER_VIEW``` <br><br>Returns the current MFA configuration for support user.
*/
func (a *Client) GetSupportMFAConfig(params *GetSupportMFAConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSupportMFAConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportMFAConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSupportMFAConfig",
		Method:             "GET",
		PathPattern:        "/support-user/mfa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSupportMFAConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupportMFAConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSupportMFAConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SendEmailOtp creates a new o t p to be sent to the user email

```No Privileges Required``` <br><br>Creates a new One Time Password for the user email
*/
func (a *Client) SendEmailOtp(params *SendEmailOtpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SendEmailOtpNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendEmailOtpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SendEmailOtp",
		Method:             "POST",
		PathPattern:        "/send-email-otp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendEmailOtpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendEmailOtpNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SendEmailOtpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SendSupportEmailOtp creates a new o t p to be sent to the linux support user email

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Creates a new one time password for linux support user email
*/
func (a *Client) SendSupportEmailOtp(params *SendSupportEmailOtpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SendSupportEmailOtpNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendSupportEmailOtpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SendSupportEmailOtp",
		Method:             "POST",
		PathPattern:        "/support-user/send-email-otp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendSupportEmailOtpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendSupportEmailOtpNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SendSupportEmailOtpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateMFAConfig stores the updated m f a configuration

**Privileges:** ```MFA_MODIFY``` <br><br>Stores the updated MFA configuration for the cluster.
*/
func (a *Client) UpdateMFAConfig(params *UpdateMFAConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMFAConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMFAConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMFAConfig",
		Method:             "PUT",
		PathPattern:        "/mfa-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMFAConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMFAConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMFAConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSupportMFAConfig stores the updated m f a configuration

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Update MFA configuration for support user.
*/
func (a *Client) UpdateSupportMFAConfig(params *UpdateSupportMFAConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSupportMFAConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSupportMFAConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSupportMFAConfig",
		Method:             "PATCH",
		PathPattern:        "/support-user/mfa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSupportMFAConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSupportMFAConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSupportMFAConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
VerifySupportUserTotp verifies the totp code for support user

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Verify totp code for support user.
*/
func (a *Client) VerifySupportUserTotp(params *VerifySupportUserTotpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifySupportUserTotpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifySupportUserTotpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VerifySupportUserTotp",
		Method:             "POST",
		PathPattern:        "/support-user/verify-totp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerifySupportUserTotpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifySupportUserTotpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VerifySupportUserTotpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
