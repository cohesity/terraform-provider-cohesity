// Code generated by go-swagger; DO NOT EDIT.

package kerberos_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetKerberosProvidersParams creates a new GetKerberosProvidersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetKerberosProvidersParams() *GetKerberosProvidersParams {
	return &GetKerberosProvidersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetKerberosProvidersParamsWithTimeout creates a new GetKerberosProvidersParams object
// with the ability to set a timeout on a request.
func NewGetKerberosProvidersParamsWithTimeout(timeout time.Duration) *GetKerberosProvidersParams {
	return &GetKerberosProvidersParams{
		timeout: timeout,
	}
}

// NewGetKerberosProvidersParamsWithContext creates a new GetKerberosProvidersParams object
// with the ability to set a context for a request.
func NewGetKerberosProvidersParamsWithContext(ctx context.Context) *GetKerberosProvidersParams {
	return &GetKerberosProvidersParams{
		Context: ctx,
	}
}

// NewGetKerberosProvidersParamsWithHTTPClient creates a new GetKerberosProvidersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetKerberosProvidersParamsWithHTTPClient(client *http.Client) *GetKerberosProvidersParams {
	return &GetKerberosProvidersParams{
		HTTPClient: client,
	}
}

/*
GetKerberosProvidersParams contains all the parameters to send to the API endpoint

	for the get kerberos providers operation.

	Typically these are written to a http.Request.
*/
type GetKerberosProvidersParams struct {

	/* HasLDAP.

	   Filter by whether LDAP is associated with the provider.
	*/
	HasLDAP *bool

	/* Ids.

	   Filter by a list of Kerberos Provider Ids.
	*/
	Ids []int64

	/* KdcServers.

	   Filter by a list of KDC servers.
	*/
	KdcServers []string

	/* RealmNames.

	   Filter by a list of realm names.
	*/
	RealmNames []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get kerberos providers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKerberosProvidersParams) WithDefaults() *GetKerberosProvidersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get kerberos providers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKerberosProvidersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get kerberos providers params
func (o *GetKerberosProvidersParams) WithTimeout(timeout time.Duration) *GetKerberosProvidersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get kerberos providers params
func (o *GetKerberosProvidersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get kerberos providers params
func (o *GetKerberosProvidersParams) WithContext(ctx context.Context) *GetKerberosProvidersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get kerberos providers params
func (o *GetKerberosProvidersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get kerberos providers params
func (o *GetKerberosProvidersParams) WithHTTPClient(client *http.Client) *GetKerberosProvidersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get kerberos providers params
func (o *GetKerberosProvidersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHasLDAP adds the hasLDAP to the get kerberos providers params
func (o *GetKerberosProvidersParams) WithHasLDAP(hasLDAP *bool) *GetKerberosProvidersParams {
	o.SetHasLDAP(hasLDAP)
	return o
}

// SetHasLDAP adds the hasLDAP to the get kerberos providers params
func (o *GetKerberosProvidersParams) SetHasLDAP(hasLDAP *bool) {
	o.HasLDAP = hasLDAP
}

// WithIds adds the ids to the get kerberos providers params
func (o *GetKerberosProvidersParams) WithIds(ids []int64) *GetKerberosProvidersParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get kerberos providers params
func (o *GetKerberosProvidersParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithKdcServers adds the kdcServers to the get kerberos providers params
func (o *GetKerberosProvidersParams) WithKdcServers(kdcServers []string) *GetKerberosProvidersParams {
	o.SetKdcServers(kdcServers)
	return o
}

// SetKdcServers adds the kdcServers to the get kerberos providers params
func (o *GetKerberosProvidersParams) SetKdcServers(kdcServers []string) {
	o.KdcServers = kdcServers
}

// WithRealmNames adds the realmNames to the get kerberos providers params
func (o *GetKerberosProvidersParams) WithRealmNames(realmNames []string) *GetKerberosProvidersParams {
	o.SetRealmNames(realmNames)
	return o
}

// SetRealmNames adds the realmNames to the get kerberos providers params
func (o *GetKerberosProvidersParams) SetRealmNames(realmNames []string) {
	o.RealmNames = realmNames
}

// WriteToRequest writes these params to a swagger request
func (o *GetKerberosProvidersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HasLDAP != nil {

		// query param hasLDAP
		var qrHasLDAP bool

		if o.HasLDAP != nil {
			qrHasLDAP = *o.HasLDAP
		}
		qHasLDAP := swag.FormatBool(qrHasLDAP)
		if qHasLDAP != "" {

			if err := r.SetQueryParam("hasLDAP", qHasLDAP); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.KdcServers != nil {

		// binding items for kdcServers
		joinedKdcServers := o.bindParamKdcServers(reg)

		// query array param kdcServers
		if err := r.SetQueryParam("kdcServers", joinedKdcServers...); err != nil {
			return err
		}
	}

	if o.RealmNames != nil {

		// binding items for realmNames
		joinedRealmNames := o.bindParamRealmNames(reg)

		// query array param realmNames
		if err := r.SetQueryParam("realmNames", joinedRealmNames...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetKerberosProviders binds the parameter ids
func (o *GetKerberosProvidersParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetKerberosProviders binds the parameter kdcServers
func (o *GetKerberosProvidersParams) bindParamKdcServers(formats strfmt.Registry) []string {
	kdcServersIR := o.KdcServers

	var kdcServersIC []string
	for _, kdcServersIIR := range kdcServersIR { // explode []string

		kdcServersIIV := kdcServersIIR // string as string
		kdcServersIC = append(kdcServersIC, kdcServersIIV)
	}

	// items.CollectionFormat: ""
	kdcServersIS := swag.JoinByFormat(kdcServersIC, "")

	return kdcServersIS
}

// bindParamGetKerberosProviders binds the parameter realmNames
func (o *GetKerberosProvidersParams) bindParamRealmNames(formats strfmt.Registry) []string {
	realmNamesIR := o.RealmNames

	var realmNamesIC []string
	for _, realmNamesIIR := range realmNamesIR { // explode []string

		realmNamesIIV := realmNamesIIR // string as string
		realmNamesIC = append(realmNamesIC, realmNamesIIV)
	}

	// items.CollectionFormat: ""
	realmNamesIS := swag.JoinByFormat(realmNamesIC, "")

	return realmNamesIS
}
