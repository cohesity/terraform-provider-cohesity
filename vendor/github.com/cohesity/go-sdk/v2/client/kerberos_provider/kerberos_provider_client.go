// Code generated by go-swagger; DO NOT EDIT.

package kerberos_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new kerberos provider API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new kerberos provider API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new kerberos provider API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for kerberos provider API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetKerberosProviderByID(params *GetKerberosProviderByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKerberosProviderByIDOK, error)

	GetKerberosProviders(params *GetKerberosProvidersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKerberosProvidersOK, error)

	RegisterKerberosProvider(params *RegisterKerberosProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterKerberosProviderCreated, error)

	UnregisterKerberosProvider(params *UnregisterKerberosProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnregisterKerberosProviderOK, error)

	UpdateKerberosProvider(params *UpdateKerberosProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKerberosProviderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetKerberosProviderByID gets the registered kerberos provider by id

**Privileges:** ```KERBEROS_VIEW``` <br><br>Get the Registered Kerberos Provider by id.
*/
func (a *Client) GetKerberosProviderByID(params *GetKerberosProviderByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKerberosProviderByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKerberosProviderByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKerberosProviderById",
		Method:             "GET",
		PathPattern:        "/kerberos-providers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKerberosProviderByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKerberosProviderByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKerberosProviderByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetKerberosProviders gets the list of kerberos providers

**Privileges:** ```KERBEROS_VIEW``` <br><br>Get the list of Kerberos Authentication Providers.
*/
func (a *Client) GetKerberosProviders(params *GetKerberosProvidersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKerberosProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKerberosProvidersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKerberosProviders",
		Method:             "GET",
		PathPattern:        "/kerberos-providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKerberosProvidersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKerberosProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKerberosProvidersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RegisterKerberosProvider registers a kerberos authentication provider

**Privileges:** ```KERBEROS_MODIFY``` <br><br>Register a Kerberos Authentication Provider.
*/
func (a *Client) RegisterKerberosProvider(params *RegisterKerberosProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterKerberosProviderCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterKerberosProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterKerberosProvider",
		Method:             "POST",
		PathPattern:        "/kerberos-providers/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterKerberosProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterKerberosProviderCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterKerberosProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnregisterKerberosProvider unregisters a kerberos provider

**Privileges:** ```KERBEROS_MODIFY``` <br><br>Unregister a Kerberos Provider.
*/
func (a *Client) UnregisterKerberosProvider(params *UnregisterKerberosProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnregisterKerberosProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnregisterKerberosProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UnregisterKerberosProvider",
		Method:             "POST",
		PathPattern:        "/kerberos-providers/{id}/unregister",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnregisterKerberosProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnregisterKerberosProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnregisterKerberosProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateKerberosProvider updates the kerberos provider registration

**Privileges:** ```KERBEROS_MODIFY``` <br><br>Update the Kerberos Provider Registration.
*/
func (a *Client) UpdateKerberosProvider(params *UpdateKerberosProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKerberosProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKerberosProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateKerberosProvider",
		Method:             "PUT",
		PathPattern:        "/kerberos-providers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateKerberosProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKerberosProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateKerberosProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
