// Code generated by go-swagger; DO NOT EDIT.

package data_source_connector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new data source connector API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new data source connector API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new data source connector API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for data source connector API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDataSourceConnector(params *DeleteDataSourceConnectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataSourceConnectorNoContent, error)

	GetConnectorMetadata(params *GetConnectorMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectorMetadataOK, error)

	GetDataSourceConnectors(params *GetDataSourceConnectorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataSourceConnectorsOK, error)

	PatchDataSourceConnector(params *PatchDataSourceConnectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchDataSourceConnectorOK, error)

	UpdateConnectorMetadata(params *UpdateConnectorMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateConnectorMetadataCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteDataSourceConnector deletes a data source connector using its ID

**Privileges:** ```DATA_SOURCE_CONNECTOR_MODIFY``` <br><br>Delete the data-source connector specified by the ID in the request path.
*/
func (a *Client) DeleteDataSourceConnector(params *DeleteDataSourceConnectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataSourceConnectorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataSourceConnectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataSourceConnector",
		Method:             "DELETE",
		PathPattern:        "/data-source-connectors/{connectorId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataSourceConnectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataSourceConnectorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDataSourceConnectorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetConnectorMetadata **Privileges:** ```DATA_SOURCE_CONNECTION_VIEW, CLUSTER_VIEW``` <br><br>Get information about the available connectors.
*/
func (a *Client) GetConnectorMetadata(params *GetConnectorMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectorMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectorMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetConnectorMetadata",
		Method:             "GET",
		PathPattern:        "/data-source-connectors/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConnectorMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConnectorMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetConnectorMetadataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataSourceConnectors gets data source connectors

**Privileges:** ```DATA_SOURCE_CONNECTOR_VIEW, CLUSTER_VIEW``` <br><br>Gets all specified data-source connectors.
*/
func (a *Client) GetDataSourceConnectors(params *GetDataSourceConnectorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataSourceConnectorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataSourceConnectorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataSourceConnectors",
		Method:             "GET",
		PathPattern:        "/data-source-connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataSourceConnectorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataSourceConnectorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataSourceConnectorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchDataSourceConnector patches a data source connector using its ID

**Privileges:** ```DATA_SOURCE_CONNECTOR_MODIFY``` <br><br>Patch the data-source connector specified by the ID in the request path.
*/
func (a *Client) PatchDataSourceConnector(params *PatchDataSourceConnectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchDataSourceConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDataSourceConnectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchDataSourceConnector",
		Method:             "PATCH",
		PathPattern:        "/data-source-connectors/{connectorId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDataSourceConnectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDataSourceConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchDataSourceConnectorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateConnectorMetadata **Privileges:** ```CLUSTER_MODIFY``` <br><br>Update information about the available connectors.
*/
func (a *Client) UpdateConnectorMetadata(params *UpdateConnectorMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateConnectorMetadataCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConnectorMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateConnectorMetadata",
		Method:             "PUT",
		PathPattern:        "/data-source-connectors/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateConnectorMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConnectorMetadataCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateConnectorMetadataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
