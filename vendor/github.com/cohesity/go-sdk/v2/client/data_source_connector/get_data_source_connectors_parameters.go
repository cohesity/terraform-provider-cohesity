// Code generated by go-swagger; DO NOT EDIT.

package data_source_connector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDataSourceConnectorsParams creates a new GetDataSourceConnectorsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDataSourceConnectorsParams() *GetDataSourceConnectorsParams {
	return &GetDataSourceConnectorsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDataSourceConnectorsParamsWithTimeout creates a new GetDataSourceConnectorsParams object
// with the ability to set a timeout on a request.
func NewGetDataSourceConnectorsParamsWithTimeout(timeout time.Duration) *GetDataSourceConnectorsParams {
	return &GetDataSourceConnectorsParams{
		timeout: timeout,
	}
}

// NewGetDataSourceConnectorsParamsWithContext creates a new GetDataSourceConnectorsParams object
// with the ability to set a context for a request.
func NewGetDataSourceConnectorsParamsWithContext(ctx context.Context) *GetDataSourceConnectorsParams {
	return &GetDataSourceConnectorsParams{
		Context: ctx,
	}
}

// NewGetDataSourceConnectorsParamsWithHTTPClient creates a new GetDataSourceConnectorsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDataSourceConnectorsParamsWithHTTPClient(client *http.Client) *GetDataSourceConnectorsParams {
	return &GetDataSourceConnectorsParams{
		HTTPClient: client,
	}
}

/*
GetDataSourceConnectorsParams contains all the parameters to send to the API endpoint

	for the get data source connectors operation.

	Typically these are written to a http.Request.
*/
type GetDataSourceConnectorsParams struct {

	/* ConnectionID.

	   Specifies the ID of the connection, connectors belonging to which are to be fetched.
	*/
	ConnectionID *string

	/* ConnectorIds.

	   Specifies the unique IDs of the connectors which are to be fetched.
	*/
	ConnectorIds []string

	/* ConnectorNames.

	   Specifies the names of the connectors which are to be fetched.
	*/
	ConnectorNames []string

	/* TenantID.

	   Specifies the ID of the tenant for which the connectors are to be fetched.
	*/
	TenantID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get data source connectors params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDataSourceConnectorsParams) WithDefaults() *GetDataSourceConnectorsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get data source connectors params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDataSourceConnectorsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get data source connectors params
func (o *GetDataSourceConnectorsParams) WithTimeout(timeout time.Duration) *GetDataSourceConnectorsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get data source connectors params
func (o *GetDataSourceConnectorsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get data source connectors params
func (o *GetDataSourceConnectorsParams) WithContext(ctx context.Context) *GetDataSourceConnectorsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get data source connectors params
func (o *GetDataSourceConnectorsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get data source connectors params
func (o *GetDataSourceConnectorsParams) WithHTTPClient(client *http.Client) *GetDataSourceConnectorsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get data source connectors params
func (o *GetDataSourceConnectorsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionID adds the connectionID to the get data source connectors params
func (o *GetDataSourceConnectorsParams) WithConnectionID(connectionID *string) *GetDataSourceConnectorsParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the get data source connectors params
func (o *GetDataSourceConnectorsParams) SetConnectionID(connectionID *string) {
	o.ConnectionID = connectionID
}

// WithConnectorIds adds the connectorIds to the get data source connectors params
func (o *GetDataSourceConnectorsParams) WithConnectorIds(connectorIds []string) *GetDataSourceConnectorsParams {
	o.SetConnectorIds(connectorIds)
	return o
}

// SetConnectorIds adds the connectorIds to the get data source connectors params
func (o *GetDataSourceConnectorsParams) SetConnectorIds(connectorIds []string) {
	o.ConnectorIds = connectorIds
}

// WithConnectorNames adds the connectorNames to the get data source connectors params
func (o *GetDataSourceConnectorsParams) WithConnectorNames(connectorNames []string) *GetDataSourceConnectorsParams {
	o.SetConnectorNames(connectorNames)
	return o
}

// SetConnectorNames adds the connectorNames to the get data source connectors params
func (o *GetDataSourceConnectorsParams) SetConnectorNames(connectorNames []string) {
	o.ConnectorNames = connectorNames
}

// WithTenantID adds the tenantID to the get data source connectors params
func (o *GetDataSourceConnectorsParams) WithTenantID(tenantID *string) *GetDataSourceConnectorsParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the get data source connectors params
func (o *GetDataSourceConnectorsParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDataSourceConnectorsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConnectionID != nil {

		// query param connectionId
		var qrConnectionID string

		if o.ConnectionID != nil {
			qrConnectionID = *o.ConnectionID
		}
		qConnectionID := qrConnectionID
		if qConnectionID != "" {

			if err := r.SetQueryParam("connectionId", qConnectionID); err != nil {
				return err
			}
		}
	}

	if o.ConnectorIds != nil {

		// binding items for connectorIds
		joinedConnectorIds := o.bindParamConnectorIds(reg)

		// query array param connectorIds
		if err := r.SetQueryParam("connectorIds", joinedConnectorIds...); err != nil {
			return err
		}
	}

	if o.ConnectorNames != nil {

		// binding items for connectorNames
		joinedConnectorNames := o.bindParamConnectorNames(reg)

		// query array param connectorNames
		if err := r.SetQueryParam("connectorNames", joinedConnectorNames...); err != nil {
			return err
		}
	}

	if o.TenantID != nil {

		// query param tenantId
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenantId", qTenantID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetDataSourceConnectors binds the parameter connectorIds
func (o *GetDataSourceConnectorsParams) bindParamConnectorIds(formats strfmt.Registry) []string {
	connectorIdsIR := o.ConnectorIds

	var connectorIdsIC []string
	for _, connectorIdsIIR := range connectorIdsIR { // explode []string

		connectorIdsIIV := connectorIdsIIR // string as string
		connectorIdsIC = append(connectorIdsIC, connectorIdsIIV)
	}

	// items.CollectionFormat: ""
	connectorIdsIS := swag.JoinByFormat(connectorIdsIC, "")

	return connectorIdsIS
}

// bindParamGetDataSourceConnectors binds the parameter connectorNames
func (o *GetDataSourceConnectorsParams) bindParamConnectorNames(formats strfmt.Registry) []string {
	connectorNamesIR := o.ConnectorNames

	var connectorNamesIC []string
	for _, connectorNamesIIR := range connectorNamesIR { // explode []string

		connectorNamesIIV := connectorNamesIIR // string as string
		connectorNamesIC = append(connectorNamesIC, connectorNamesIIV)
	}

	// items.CollectionFormat: ""
	connectorNamesIS := swag.JoinByFormat(connectorNamesIC, "")

	return connectorNamesIS
}
