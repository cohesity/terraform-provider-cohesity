// Code generated by go-swagger; DO NOT EDIT.

package view

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewsParams creates a new GetViewsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewsParams() *GetViewsParams {
	return &GetViewsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewsParamsWithTimeout creates a new GetViewsParams object
// with the ability to set a timeout on a request.
func NewGetViewsParamsWithTimeout(timeout time.Duration) *GetViewsParams {
	return &GetViewsParams{
		timeout: timeout,
	}
}

// NewGetViewsParamsWithContext creates a new GetViewsParams object
// with the ability to set a context for a request.
func NewGetViewsParamsWithContext(ctx context.Context) *GetViewsParams {
	return &GetViewsParams{
		Context: ctx,
	}
}

// NewGetViewsParamsWithHTTPClient creates a new GetViewsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewsParamsWithHTTPClient(client *http.Client) *GetViewsParams {
	return &GetViewsParams{
		HTTPClient: client,
	}
}

/*
GetViewsParams contains all the parameters to send to the API endpoint

	for the get views operation.

	Typically these are written to a http.Request.
*/
type GetViewsParams struct {

	/* Categories.

	   Filter by a list of View categories.
	*/
	Categories []string

	/* FilerAuditLogEnabled.

	     If set to true, only views with filer audit log enabled will be returned.
	If set to false, only views with filer audit log disabled will be returned.
	*/
	FilerAuditLogEnabled *bool

	/* IncludeDeletedProtectionGroups.

	     Specifies if deleted Protection Groups information needs to be returned along with
	view metadata. By default, deleted Protection Groups are not returned. This is only
	applied if used along with any view protection related parameter.
	*/
	IncludeDeletedProtectionGroups *bool

	/* IncludeFileCountBySize.

	   Whether to include View file count by size.
	*/
	IncludeFileCountBySize *bool

	/* IncludeInactive.

	     Specifies if inactive Views on this Remote Cluster (which have
	Snapshots copied by replication) should also be returned.
	Inactive Views are not counted towards the maxCount.
	By default, this field is set to false.
	*/
	IncludeInactive *bool

	/* IncludeInternalViews.

	     Specifies if internal Views created by the Cohesity Cluster are
	also returned. In addition, regular Views are returned.
	*/
	IncludeInternalViews *bool

	/* IncludeProtectionGroups.

	     Specifies if Protection Groups information needs to be returned along with
	view metadata. By default, if not set or set to true, Group information is
	returned.
	*/
	IncludeProtectionGroups *bool

	/* IncludeS3MigrationOnly.

	   Specifies whether to return only views which have a s3 migration state or are eligible for migration.
	*/
	IncludeS3MigrationOnly *bool

	/* IncludeStats.

	     If set to true, stats of views will be returned. By default this parameter
	is set to false.
	*/
	IncludeStats *bool

	/* IncludeTenants.

	     IncludeTenants specifies if objects of all the tenants under the
	hierarchy of the logged in user's organization should be returned.
	*/
	IncludeTenants *bool

	/* IncludeViewsWithAntivirusEnabledOnly.

	     If set to true, the list will contain only the views for which antivirus
	scan is enabled.
	*/
	IncludeViewsWithAntivirusEnabledOnly *bool

	/* IncludeViewsWithDataLockEnabledOnly.

	     If set to true, the list will contain only the views for which either
	file level data lock is enabled or view level data lock is enabled.
	*/
	IncludeViewsWithDataLockEnabledOnly *bool

	/* InternalAccessSids.

	     Sids of restricted principals who can access the view. This is an
	internal field and therefore does not have json tag.
	*/
	InternalAccessSids []string

	/* IsProtected.

	   Specifies the protection status of Views. If set to true, only protected Views will be returned. If set to false, only unprotected Views will be returned.
	*/
	IsProtected *bool

	/* LastRunAnyStatuses.

	   Filter by last any run status of the view.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Skipped' indicates that the run was skipped.
	*/
	LastRunAnyStatuses []string

	/* LastRunArchivalStatuses.

	   Filter by last cloud archival run status of the view.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Skipped' indicates that the run was skipped.
	*/
	LastRunArchivalStatuses []string

	/* LastRunLocalBackupStatuses.

	   Filter by last local backup run status of the view.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Skipped' indicates that the run was skipped.
	*/
	LastRunLocalBackupStatuses []string

	/* LastRunReplicationStatuses.

	   Filter by last remote replication run status of the view.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Skipped' indicates that the run was skipped.
	*/
	LastRunReplicationStatuses []string

	/* MatchAliasNames.

	   If true, view aliases are also matched with the names in viewNames.
	*/
	MatchAliasNames *bool

	/* MatchPartialNames.

	     If true, the names in viewNames are matched by any partial rather than
	exactly matched.
	*/
	MatchPartialNames *bool

	/* MaxCount.

	   Specifies a limit on the number of Views returned.

	   Format: int32
	*/
	MaxCount *int32

	/* MaxViewID.

	     If the number of Views to return exceeds the maxCount specified in the
	original request, specify the id of the last View
	from the viewList in the previous response
	to get the next set of Views.

	     Format: int64
	*/
	MaxViewID *int64

	/* ProtectionGroupIds.

	     This field will be deprecated. Filter by Protection Group ids.
	Return Views that are being protected by listed Groups, which are specified by ids.
	If both protectionGroupIds and viewProtectionGroupIds are specified, only
	viewProtectionGroupIds will be used.
	*/
	ProtectionGroupIds []int64

	/* ProtocolAccesses.

	     Filter by a list of protocol accesses. Only views with
	protocol accesses in these specified accesses list will be returned.
	*/
	ProtocolAccesses []string

	/* QosPrincipalIds.

	     qosPrincipalIds contains ids of the QoS principal for which
	views are to be returned.
	*/
	QosPrincipalIds []int64

	/* SortByLogicalUsage.

	   If set to true, the list is sorted descending by logical usage.
	*/
	SortByLogicalUsage *bool

	/* StorageDomainIds.

	   Filter by a list of Storage Domains (View Boxes) specified by id.
	*/
	StorageDomainIds []int64

	/* StorageDomainNames.

	   Filter by a list of View Box names.
	*/
	StorageDomainNames []string

	/* SummaryOnly.

	     Whether to get only view summary including 'name', 'viewId',
	'storageDomainName', 'storageDomainId' and 'tenantId'.
	*/
	SummaryOnly *bool

	/* TenantIds.

	     TenantIds contains ids of the tenants for which objects are to be
	returned.
	*/
	TenantIds []string

	/* UseCachedData.

	   Specifies whether we can serve the GET request to the read replica cache. There is a lag of 15 seconds between the read replica and primary data source.
	*/
	UseCachedData *bool

	/* ViewCountOnly.

	     Whether to get just the total number of views with the given input
	filters. If the flag is true, we ignore the parameter 'maxViews' for the
	count. Also, if flag is true, list of views will not be returned.
	*/
	ViewCountOnly *bool

	/* ViewIds.

	   Filter by a list of View ids.
	*/
	ViewIds []int64

	/* ViewNames.

	   Filter by a list of View names.
	*/
	ViewNames []string

	/* ViewProtectionGroupIds.

	     Filter by Protection Group ids. Return Views that are being protected by
	listed Groups, which are specified by ids.
	*/
	ViewProtectionGroupIds []string

	/* ViewProtectionTypes.

	   Filter by a list of View protection types. Supported types: [Local Archival ReplicationOut ReplicationIn UnProtected]. UnProtected is mutually exclusive from remaining types.
	*/
	ViewProtectionTypes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get views params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewsParams) WithDefaults() *GetViewsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get views params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get views params
func (o *GetViewsParams) WithTimeout(timeout time.Duration) *GetViewsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get views params
func (o *GetViewsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get views params
func (o *GetViewsParams) WithContext(ctx context.Context) *GetViewsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get views params
func (o *GetViewsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get views params
func (o *GetViewsParams) WithHTTPClient(client *http.Client) *GetViewsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get views params
func (o *GetViewsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategories adds the categories to the get views params
func (o *GetViewsParams) WithCategories(categories []string) *GetViewsParams {
	o.SetCategories(categories)
	return o
}

// SetCategories adds the categories to the get views params
func (o *GetViewsParams) SetCategories(categories []string) {
	o.Categories = categories
}

// WithFilerAuditLogEnabled adds the filerAuditLogEnabled to the get views params
func (o *GetViewsParams) WithFilerAuditLogEnabled(filerAuditLogEnabled *bool) *GetViewsParams {
	o.SetFilerAuditLogEnabled(filerAuditLogEnabled)
	return o
}

// SetFilerAuditLogEnabled adds the filerAuditLogEnabled to the get views params
func (o *GetViewsParams) SetFilerAuditLogEnabled(filerAuditLogEnabled *bool) {
	o.FilerAuditLogEnabled = filerAuditLogEnabled
}

// WithIncludeDeletedProtectionGroups adds the includeDeletedProtectionGroups to the get views params
func (o *GetViewsParams) WithIncludeDeletedProtectionGroups(includeDeletedProtectionGroups *bool) *GetViewsParams {
	o.SetIncludeDeletedProtectionGroups(includeDeletedProtectionGroups)
	return o
}

// SetIncludeDeletedProtectionGroups adds the includeDeletedProtectionGroups to the get views params
func (o *GetViewsParams) SetIncludeDeletedProtectionGroups(includeDeletedProtectionGroups *bool) {
	o.IncludeDeletedProtectionGroups = includeDeletedProtectionGroups
}

// WithIncludeFileCountBySize adds the includeFileCountBySize to the get views params
func (o *GetViewsParams) WithIncludeFileCountBySize(includeFileCountBySize *bool) *GetViewsParams {
	o.SetIncludeFileCountBySize(includeFileCountBySize)
	return o
}

// SetIncludeFileCountBySize adds the includeFileCountBySize to the get views params
func (o *GetViewsParams) SetIncludeFileCountBySize(includeFileCountBySize *bool) {
	o.IncludeFileCountBySize = includeFileCountBySize
}

// WithIncludeInactive adds the includeInactive to the get views params
func (o *GetViewsParams) WithIncludeInactive(includeInactive *bool) *GetViewsParams {
	o.SetIncludeInactive(includeInactive)
	return o
}

// SetIncludeInactive adds the includeInactive to the get views params
func (o *GetViewsParams) SetIncludeInactive(includeInactive *bool) {
	o.IncludeInactive = includeInactive
}

// WithIncludeInternalViews adds the includeInternalViews to the get views params
func (o *GetViewsParams) WithIncludeInternalViews(includeInternalViews *bool) *GetViewsParams {
	o.SetIncludeInternalViews(includeInternalViews)
	return o
}

// SetIncludeInternalViews adds the includeInternalViews to the get views params
func (o *GetViewsParams) SetIncludeInternalViews(includeInternalViews *bool) {
	o.IncludeInternalViews = includeInternalViews
}

// WithIncludeProtectionGroups adds the includeProtectionGroups to the get views params
func (o *GetViewsParams) WithIncludeProtectionGroups(includeProtectionGroups *bool) *GetViewsParams {
	o.SetIncludeProtectionGroups(includeProtectionGroups)
	return o
}

// SetIncludeProtectionGroups adds the includeProtectionGroups to the get views params
func (o *GetViewsParams) SetIncludeProtectionGroups(includeProtectionGroups *bool) {
	o.IncludeProtectionGroups = includeProtectionGroups
}

// WithIncludeS3MigrationOnly adds the includeS3MigrationOnly to the get views params
func (o *GetViewsParams) WithIncludeS3MigrationOnly(includeS3MigrationOnly *bool) *GetViewsParams {
	o.SetIncludeS3MigrationOnly(includeS3MigrationOnly)
	return o
}

// SetIncludeS3MigrationOnly adds the includeS3MigrationOnly to the get views params
func (o *GetViewsParams) SetIncludeS3MigrationOnly(includeS3MigrationOnly *bool) {
	o.IncludeS3MigrationOnly = includeS3MigrationOnly
}

// WithIncludeStats adds the includeStats to the get views params
func (o *GetViewsParams) WithIncludeStats(includeStats *bool) *GetViewsParams {
	o.SetIncludeStats(includeStats)
	return o
}

// SetIncludeStats adds the includeStats to the get views params
func (o *GetViewsParams) SetIncludeStats(includeStats *bool) {
	o.IncludeStats = includeStats
}

// WithIncludeTenants adds the includeTenants to the get views params
func (o *GetViewsParams) WithIncludeTenants(includeTenants *bool) *GetViewsParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the get views params
func (o *GetViewsParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithIncludeViewsWithAntivirusEnabledOnly adds the includeViewsWithAntivirusEnabledOnly to the get views params
func (o *GetViewsParams) WithIncludeViewsWithAntivirusEnabledOnly(includeViewsWithAntivirusEnabledOnly *bool) *GetViewsParams {
	o.SetIncludeViewsWithAntivirusEnabledOnly(includeViewsWithAntivirusEnabledOnly)
	return o
}

// SetIncludeViewsWithAntivirusEnabledOnly adds the includeViewsWithAntivirusEnabledOnly to the get views params
func (o *GetViewsParams) SetIncludeViewsWithAntivirusEnabledOnly(includeViewsWithAntivirusEnabledOnly *bool) {
	o.IncludeViewsWithAntivirusEnabledOnly = includeViewsWithAntivirusEnabledOnly
}

// WithIncludeViewsWithDataLockEnabledOnly adds the includeViewsWithDataLockEnabledOnly to the get views params
func (o *GetViewsParams) WithIncludeViewsWithDataLockEnabledOnly(includeViewsWithDataLockEnabledOnly *bool) *GetViewsParams {
	o.SetIncludeViewsWithDataLockEnabledOnly(includeViewsWithDataLockEnabledOnly)
	return o
}

// SetIncludeViewsWithDataLockEnabledOnly adds the includeViewsWithDataLockEnabledOnly to the get views params
func (o *GetViewsParams) SetIncludeViewsWithDataLockEnabledOnly(includeViewsWithDataLockEnabledOnly *bool) {
	o.IncludeViewsWithDataLockEnabledOnly = includeViewsWithDataLockEnabledOnly
}

// WithInternalAccessSids adds the internalAccessSids to the get views params
func (o *GetViewsParams) WithInternalAccessSids(internalAccessSids []string) *GetViewsParams {
	o.SetInternalAccessSids(internalAccessSids)
	return o
}

// SetInternalAccessSids adds the internalAccessSids to the get views params
func (o *GetViewsParams) SetInternalAccessSids(internalAccessSids []string) {
	o.InternalAccessSids = internalAccessSids
}

// WithIsProtected adds the isProtected to the get views params
func (o *GetViewsParams) WithIsProtected(isProtected *bool) *GetViewsParams {
	o.SetIsProtected(isProtected)
	return o
}

// SetIsProtected adds the isProtected to the get views params
func (o *GetViewsParams) SetIsProtected(isProtected *bool) {
	o.IsProtected = isProtected
}

// WithLastRunAnyStatuses adds the lastRunAnyStatuses to the get views params
func (o *GetViewsParams) WithLastRunAnyStatuses(lastRunAnyStatuses []string) *GetViewsParams {
	o.SetLastRunAnyStatuses(lastRunAnyStatuses)
	return o
}

// SetLastRunAnyStatuses adds the lastRunAnyStatuses to the get views params
func (o *GetViewsParams) SetLastRunAnyStatuses(lastRunAnyStatuses []string) {
	o.LastRunAnyStatuses = lastRunAnyStatuses
}

// WithLastRunArchivalStatuses adds the lastRunArchivalStatuses to the get views params
func (o *GetViewsParams) WithLastRunArchivalStatuses(lastRunArchivalStatuses []string) *GetViewsParams {
	o.SetLastRunArchivalStatuses(lastRunArchivalStatuses)
	return o
}

// SetLastRunArchivalStatuses adds the lastRunArchivalStatuses to the get views params
func (o *GetViewsParams) SetLastRunArchivalStatuses(lastRunArchivalStatuses []string) {
	o.LastRunArchivalStatuses = lastRunArchivalStatuses
}

// WithLastRunLocalBackupStatuses adds the lastRunLocalBackupStatuses to the get views params
func (o *GetViewsParams) WithLastRunLocalBackupStatuses(lastRunLocalBackupStatuses []string) *GetViewsParams {
	o.SetLastRunLocalBackupStatuses(lastRunLocalBackupStatuses)
	return o
}

// SetLastRunLocalBackupStatuses adds the lastRunLocalBackupStatuses to the get views params
func (o *GetViewsParams) SetLastRunLocalBackupStatuses(lastRunLocalBackupStatuses []string) {
	o.LastRunLocalBackupStatuses = lastRunLocalBackupStatuses
}

// WithLastRunReplicationStatuses adds the lastRunReplicationStatuses to the get views params
func (o *GetViewsParams) WithLastRunReplicationStatuses(lastRunReplicationStatuses []string) *GetViewsParams {
	o.SetLastRunReplicationStatuses(lastRunReplicationStatuses)
	return o
}

// SetLastRunReplicationStatuses adds the lastRunReplicationStatuses to the get views params
func (o *GetViewsParams) SetLastRunReplicationStatuses(lastRunReplicationStatuses []string) {
	o.LastRunReplicationStatuses = lastRunReplicationStatuses
}

// WithMatchAliasNames adds the matchAliasNames to the get views params
func (o *GetViewsParams) WithMatchAliasNames(matchAliasNames *bool) *GetViewsParams {
	o.SetMatchAliasNames(matchAliasNames)
	return o
}

// SetMatchAliasNames adds the matchAliasNames to the get views params
func (o *GetViewsParams) SetMatchAliasNames(matchAliasNames *bool) {
	o.MatchAliasNames = matchAliasNames
}

// WithMatchPartialNames adds the matchPartialNames to the get views params
func (o *GetViewsParams) WithMatchPartialNames(matchPartialNames *bool) *GetViewsParams {
	o.SetMatchPartialNames(matchPartialNames)
	return o
}

// SetMatchPartialNames adds the matchPartialNames to the get views params
func (o *GetViewsParams) SetMatchPartialNames(matchPartialNames *bool) {
	o.MatchPartialNames = matchPartialNames
}

// WithMaxCount adds the maxCount to the get views params
func (o *GetViewsParams) WithMaxCount(maxCount *int32) *GetViewsParams {
	o.SetMaxCount(maxCount)
	return o
}

// SetMaxCount adds the maxCount to the get views params
func (o *GetViewsParams) SetMaxCount(maxCount *int32) {
	o.MaxCount = maxCount
}

// WithMaxViewID adds the maxViewID to the get views params
func (o *GetViewsParams) WithMaxViewID(maxViewID *int64) *GetViewsParams {
	o.SetMaxViewID(maxViewID)
	return o
}

// SetMaxViewID adds the maxViewId to the get views params
func (o *GetViewsParams) SetMaxViewID(maxViewID *int64) {
	o.MaxViewID = maxViewID
}

// WithProtectionGroupIds adds the protectionGroupIds to the get views params
func (o *GetViewsParams) WithProtectionGroupIds(protectionGroupIds []int64) *GetViewsParams {
	o.SetProtectionGroupIds(protectionGroupIds)
	return o
}

// SetProtectionGroupIds adds the protectionGroupIds to the get views params
func (o *GetViewsParams) SetProtectionGroupIds(protectionGroupIds []int64) {
	o.ProtectionGroupIds = protectionGroupIds
}

// WithProtocolAccesses adds the protocolAccesses to the get views params
func (o *GetViewsParams) WithProtocolAccesses(protocolAccesses []string) *GetViewsParams {
	o.SetProtocolAccesses(protocolAccesses)
	return o
}

// SetProtocolAccesses adds the protocolAccesses to the get views params
func (o *GetViewsParams) SetProtocolAccesses(protocolAccesses []string) {
	o.ProtocolAccesses = protocolAccesses
}

// WithQosPrincipalIds adds the qosPrincipalIds to the get views params
func (o *GetViewsParams) WithQosPrincipalIds(qosPrincipalIds []int64) *GetViewsParams {
	o.SetQosPrincipalIds(qosPrincipalIds)
	return o
}

// SetQosPrincipalIds adds the qosPrincipalIds to the get views params
func (o *GetViewsParams) SetQosPrincipalIds(qosPrincipalIds []int64) {
	o.QosPrincipalIds = qosPrincipalIds
}

// WithSortByLogicalUsage adds the sortByLogicalUsage to the get views params
func (o *GetViewsParams) WithSortByLogicalUsage(sortByLogicalUsage *bool) *GetViewsParams {
	o.SetSortByLogicalUsage(sortByLogicalUsage)
	return o
}

// SetSortByLogicalUsage adds the sortByLogicalUsage to the get views params
func (o *GetViewsParams) SetSortByLogicalUsage(sortByLogicalUsage *bool) {
	o.SortByLogicalUsage = sortByLogicalUsage
}

// WithStorageDomainIds adds the storageDomainIds to the get views params
func (o *GetViewsParams) WithStorageDomainIds(storageDomainIds []int64) *GetViewsParams {
	o.SetStorageDomainIds(storageDomainIds)
	return o
}

// SetStorageDomainIds adds the storageDomainIds to the get views params
func (o *GetViewsParams) SetStorageDomainIds(storageDomainIds []int64) {
	o.StorageDomainIds = storageDomainIds
}

// WithStorageDomainNames adds the storageDomainNames to the get views params
func (o *GetViewsParams) WithStorageDomainNames(storageDomainNames []string) *GetViewsParams {
	o.SetStorageDomainNames(storageDomainNames)
	return o
}

// SetStorageDomainNames adds the storageDomainNames to the get views params
func (o *GetViewsParams) SetStorageDomainNames(storageDomainNames []string) {
	o.StorageDomainNames = storageDomainNames
}

// WithSummaryOnly adds the summaryOnly to the get views params
func (o *GetViewsParams) WithSummaryOnly(summaryOnly *bool) *GetViewsParams {
	o.SetSummaryOnly(summaryOnly)
	return o
}

// SetSummaryOnly adds the summaryOnly to the get views params
func (o *GetViewsParams) SetSummaryOnly(summaryOnly *bool) {
	o.SummaryOnly = summaryOnly
}

// WithTenantIds adds the tenantIds to the get views params
func (o *GetViewsParams) WithTenantIds(tenantIds []string) *GetViewsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get views params
func (o *GetViewsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithUseCachedData adds the useCachedData to the get views params
func (o *GetViewsParams) WithUseCachedData(useCachedData *bool) *GetViewsParams {
	o.SetUseCachedData(useCachedData)
	return o
}

// SetUseCachedData adds the useCachedData to the get views params
func (o *GetViewsParams) SetUseCachedData(useCachedData *bool) {
	o.UseCachedData = useCachedData
}

// WithViewCountOnly adds the viewCountOnly to the get views params
func (o *GetViewsParams) WithViewCountOnly(viewCountOnly *bool) *GetViewsParams {
	o.SetViewCountOnly(viewCountOnly)
	return o
}

// SetViewCountOnly adds the viewCountOnly to the get views params
func (o *GetViewsParams) SetViewCountOnly(viewCountOnly *bool) {
	o.ViewCountOnly = viewCountOnly
}

// WithViewIds adds the viewIds to the get views params
func (o *GetViewsParams) WithViewIds(viewIds []int64) *GetViewsParams {
	o.SetViewIds(viewIds)
	return o
}

// SetViewIds adds the viewIds to the get views params
func (o *GetViewsParams) SetViewIds(viewIds []int64) {
	o.ViewIds = viewIds
}

// WithViewNames adds the viewNames to the get views params
func (o *GetViewsParams) WithViewNames(viewNames []string) *GetViewsParams {
	o.SetViewNames(viewNames)
	return o
}

// SetViewNames adds the viewNames to the get views params
func (o *GetViewsParams) SetViewNames(viewNames []string) {
	o.ViewNames = viewNames
}

// WithViewProtectionGroupIds adds the viewProtectionGroupIds to the get views params
func (o *GetViewsParams) WithViewProtectionGroupIds(viewProtectionGroupIds []string) *GetViewsParams {
	o.SetViewProtectionGroupIds(viewProtectionGroupIds)
	return o
}

// SetViewProtectionGroupIds adds the viewProtectionGroupIds to the get views params
func (o *GetViewsParams) SetViewProtectionGroupIds(viewProtectionGroupIds []string) {
	o.ViewProtectionGroupIds = viewProtectionGroupIds
}

// WithViewProtectionTypes adds the viewProtectionTypes to the get views params
func (o *GetViewsParams) WithViewProtectionTypes(viewProtectionTypes []string) *GetViewsParams {
	o.SetViewProtectionTypes(viewProtectionTypes)
	return o
}

// SetViewProtectionTypes adds the viewProtectionTypes to the get views params
func (o *GetViewsParams) SetViewProtectionTypes(viewProtectionTypes []string) {
	o.ViewProtectionTypes = viewProtectionTypes
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Categories != nil {

		// binding items for categories
		joinedCategories := o.bindParamCategories(reg)

		// query array param categories
		if err := r.SetQueryParam("categories", joinedCategories...); err != nil {
			return err
		}
	}

	if o.FilerAuditLogEnabled != nil {

		// query param filerAuditLogEnabled
		var qrFilerAuditLogEnabled bool

		if o.FilerAuditLogEnabled != nil {
			qrFilerAuditLogEnabled = *o.FilerAuditLogEnabled
		}
		qFilerAuditLogEnabled := swag.FormatBool(qrFilerAuditLogEnabled)
		if qFilerAuditLogEnabled != "" {

			if err := r.SetQueryParam("filerAuditLogEnabled", qFilerAuditLogEnabled); err != nil {
				return err
			}
		}
	}

	if o.IncludeDeletedProtectionGroups != nil {

		// query param includeDeletedProtectionGroups
		var qrIncludeDeletedProtectionGroups bool

		if o.IncludeDeletedProtectionGroups != nil {
			qrIncludeDeletedProtectionGroups = *o.IncludeDeletedProtectionGroups
		}
		qIncludeDeletedProtectionGroups := swag.FormatBool(qrIncludeDeletedProtectionGroups)
		if qIncludeDeletedProtectionGroups != "" {

			if err := r.SetQueryParam("includeDeletedProtectionGroups", qIncludeDeletedProtectionGroups); err != nil {
				return err
			}
		}
	}

	if o.IncludeFileCountBySize != nil {

		// query param includeFileCountBySize
		var qrIncludeFileCountBySize bool

		if o.IncludeFileCountBySize != nil {
			qrIncludeFileCountBySize = *o.IncludeFileCountBySize
		}
		qIncludeFileCountBySize := swag.FormatBool(qrIncludeFileCountBySize)
		if qIncludeFileCountBySize != "" {

			if err := r.SetQueryParam("includeFileCountBySize", qIncludeFileCountBySize); err != nil {
				return err
			}
		}
	}

	if o.IncludeInactive != nil {

		// query param includeInactive
		var qrIncludeInactive bool

		if o.IncludeInactive != nil {
			qrIncludeInactive = *o.IncludeInactive
		}
		qIncludeInactive := swag.FormatBool(qrIncludeInactive)
		if qIncludeInactive != "" {

			if err := r.SetQueryParam("includeInactive", qIncludeInactive); err != nil {
				return err
			}
		}
	}

	if o.IncludeInternalViews != nil {

		// query param includeInternalViews
		var qrIncludeInternalViews bool

		if o.IncludeInternalViews != nil {
			qrIncludeInternalViews = *o.IncludeInternalViews
		}
		qIncludeInternalViews := swag.FormatBool(qrIncludeInternalViews)
		if qIncludeInternalViews != "" {

			if err := r.SetQueryParam("includeInternalViews", qIncludeInternalViews); err != nil {
				return err
			}
		}
	}

	if o.IncludeProtectionGroups != nil {

		// query param includeProtectionGroups
		var qrIncludeProtectionGroups bool

		if o.IncludeProtectionGroups != nil {
			qrIncludeProtectionGroups = *o.IncludeProtectionGroups
		}
		qIncludeProtectionGroups := swag.FormatBool(qrIncludeProtectionGroups)
		if qIncludeProtectionGroups != "" {

			if err := r.SetQueryParam("includeProtectionGroups", qIncludeProtectionGroups); err != nil {
				return err
			}
		}
	}

	if o.IncludeS3MigrationOnly != nil {

		// query param includeS3MigrationOnly
		var qrIncludeS3MigrationOnly bool

		if o.IncludeS3MigrationOnly != nil {
			qrIncludeS3MigrationOnly = *o.IncludeS3MigrationOnly
		}
		qIncludeS3MigrationOnly := swag.FormatBool(qrIncludeS3MigrationOnly)
		if qIncludeS3MigrationOnly != "" {

			if err := r.SetQueryParam("includeS3MigrationOnly", qIncludeS3MigrationOnly); err != nil {
				return err
			}
		}
	}

	if o.IncludeStats != nil {

		// query param includeStats
		var qrIncludeStats bool

		if o.IncludeStats != nil {
			qrIncludeStats = *o.IncludeStats
		}
		qIncludeStats := swag.FormatBool(qrIncludeStats)
		if qIncludeStats != "" {

			if err := r.SetQueryParam("includeStats", qIncludeStats); err != nil {
				return err
			}
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.IncludeViewsWithAntivirusEnabledOnly != nil {

		// query param includeViewsWithAntivirusEnabledOnly
		var qrIncludeViewsWithAntivirusEnabledOnly bool

		if o.IncludeViewsWithAntivirusEnabledOnly != nil {
			qrIncludeViewsWithAntivirusEnabledOnly = *o.IncludeViewsWithAntivirusEnabledOnly
		}
		qIncludeViewsWithAntivirusEnabledOnly := swag.FormatBool(qrIncludeViewsWithAntivirusEnabledOnly)
		if qIncludeViewsWithAntivirusEnabledOnly != "" {

			if err := r.SetQueryParam("includeViewsWithAntivirusEnabledOnly", qIncludeViewsWithAntivirusEnabledOnly); err != nil {
				return err
			}
		}
	}

	if o.IncludeViewsWithDataLockEnabledOnly != nil {

		// query param includeViewsWithDataLockEnabledOnly
		var qrIncludeViewsWithDataLockEnabledOnly bool

		if o.IncludeViewsWithDataLockEnabledOnly != nil {
			qrIncludeViewsWithDataLockEnabledOnly = *o.IncludeViewsWithDataLockEnabledOnly
		}
		qIncludeViewsWithDataLockEnabledOnly := swag.FormatBool(qrIncludeViewsWithDataLockEnabledOnly)
		if qIncludeViewsWithDataLockEnabledOnly != "" {

			if err := r.SetQueryParam("includeViewsWithDataLockEnabledOnly", qIncludeViewsWithDataLockEnabledOnly); err != nil {
				return err
			}
		}
	}

	if o.InternalAccessSids != nil {

		// binding items for internalAccessSids
		joinedInternalAccessSids := o.bindParamInternalAccessSids(reg)

		// query array param internalAccessSids
		if err := r.SetQueryParam("internalAccessSids", joinedInternalAccessSids...); err != nil {
			return err
		}
	}

	if o.IsProtected != nil {

		// query param isProtected
		var qrIsProtected bool

		if o.IsProtected != nil {
			qrIsProtected = *o.IsProtected
		}
		qIsProtected := swag.FormatBool(qrIsProtected)
		if qIsProtected != "" {

			if err := r.SetQueryParam("isProtected", qIsProtected); err != nil {
				return err
			}
		}
	}

	if o.LastRunAnyStatuses != nil {

		// binding items for lastRunAnyStatuses
		joinedLastRunAnyStatuses := o.bindParamLastRunAnyStatuses(reg)

		// query array param lastRunAnyStatuses
		if err := r.SetQueryParam("lastRunAnyStatuses", joinedLastRunAnyStatuses...); err != nil {
			return err
		}
	}

	if o.LastRunArchivalStatuses != nil {

		// binding items for lastRunArchivalStatuses
		joinedLastRunArchivalStatuses := o.bindParamLastRunArchivalStatuses(reg)

		// query array param lastRunArchivalStatuses
		if err := r.SetQueryParam("lastRunArchivalStatuses", joinedLastRunArchivalStatuses...); err != nil {
			return err
		}
	}

	if o.LastRunLocalBackupStatuses != nil {

		// binding items for lastRunLocalBackupStatuses
		joinedLastRunLocalBackupStatuses := o.bindParamLastRunLocalBackupStatuses(reg)

		// query array param lastRunLocalBackupStatuses
		if err := r.SetQueryParam("lastRunLocalBackupStatuses", joinedLastRunLocalBackupStatuses...); err != nil {
			return err
		}
	}

	if o.LastRunReplicationStatuses != nil {

		// binding items for lastRunReplicationStatuses
		joinedLastRunReplicationStatuses := o.bindParamLastRunReplicationStatuses(reg)

		// query array param lastRunReplicationStatuses
		if err := r.SetQueryParam("lastRunReplicationStatuses", joinedLastRunReplicationStatuses...); err != nil {
			return err
		}
	}

	if o.MatchAliasNames != nil {

		// query param matchAliasNames
		var qrMatchAliasNames bool

		if o.MatchAliasNames != nil {
			qrMatchAliasNames = *o.MatchAliasNames
		}
		qMatchAliasNames := swag.FormatBool(qrMatchAliasNames)
		if qMatchAliasNames != "" {

			if err := r.SetQueryParam("matchAliasNames", qMatchAliasNames); err != nil {
				return err
			}
		}
	}

	if o.MatchPartialNames != nil {

		// query param matchPartialNames
		var qrMatchPartialNames bool

		if o.MatchPartialNames != nil {
			qrMatchPartialNames = *o.MatchPartialNames
		}
		qMatchPartialNames := swag.FormatBool(qrMatchPartialNames)
		if qMatchPartialNames != "" {

			if err := r.SetQueryParam("matchPartialNames", qMatchPartialNames); err != nil {
				return err
			}
		}
	}

	if o.MaxCount != nil {

		// query param maxCount
		var qrMaxCount int32

		if o.MaxCount != nil {
			qrMaxCount = *o.MaxCount
		}
		qMaxCount := swag.FormatInt32(qrMaxCount)
		if qMaxCount != "" {

			if err := r.SetQueryParam("maxCount", qMaxCount); err != nil {
				return err
			}
		}
	}

	if o.MaxViewID != nil {

		// query param maxViewId
		var qrMaxViewID int64

		if o.MaxViewID != nil {
			qrMaxViewID = *o.MaxViewID
		}
		qMaxViewID := swag.FormatInt64(qrMaxViewID)
		if qMaxViewID != "" {

			if err := r.SetQueryParam("maxViewId", qMaxViewID); err != nil {
				return err
			}
		}
	}

	if o.ProtectionGroupIds != nil {

		// binding items for protectionGroupIds
		joinedProtectionGroupIds := o.bindParamProtectionGroupIds(reg)

		// query array param protectionGroupIds
		if err := r.SetQueryParam("protectionGroupIds", joinedProtectionGroupIds...); err != nil {
			return err
		}
	}

	if o.ProtocolAccesses != nil {

		// binding items for protocolAccesses
		joinedProtocolAccesses := o.bindParamProtocolAccesses(reg)

		// query array param protocolAccesses
		if err := r.SetQueryParam("protocolAccesses", joinedProtocolAccesses...); err != nil {
			return err
		}
	}

	if o.QosPrincipalIds != nil {

		// binding items for qosPrincipalIds
		joinedQosPrincipalIds := o.bindParamQosPrincipalIds(reg)

		// query array param qosPrincipalIds
		if err := r.SetQueryParam("qosPrincipalIds", joinedQosPrincipalIds...); err != nil {
			return err
		}
	}

	if o.SortByLogicalUsage != nil {

		// query param sortByLogicalUsage
		var qrSortByLogicalUsage bool

		if o.SortByLogicalUsage != nil {
			qrSortByLogicalUsage = *o.SortByLogicalUsage
		}
		qSortByLogicalUsage := swag.FormatBool(qrSortByLogicalUsage)
		if qSortByLogicalUsage != "" {

			if err := r.SetQueryParam("sortByLogicalUsage", qSortByLogicalUsage); err != nil {
				return err
			}
		}
	}

	if o.StorageDomainIds != nil {

		// binding items for storageDomainIds
		joinedStorageDomainIds := o.bindParamStorageDomainIds(reg)

		// query array param storageDomainIds
		if err := r.SetQueryParam("storageDomainIds", joinedStorageDomainIds...); err != nil {
			return err
		}
	}

	if o.StorageDomainNames != nil {

		// binding items for storageDomainNames
		joinedStorageDomainNames := o.bindParamStorageDomainNames(reg)

		// query array param storageDomainNames
		if err := r.SetQueryParam("storageDomainNames", joinedStorageDomainNames...); err != nil {
			return err
		}
	}

	if o.SummaryOnly != nil {

		// query param summaryOnly
		var qrSummaryOnly bool

		if o.SummaryOnly != nil {
			qrSummaryOnly = *o.SummaryOnly
		}
		qSummaryOnly := swag.FormatBool(qrSummaryOnly)
		if qSummaryOnly != "" {

			if err := r.SetQueryParam("summaryOnly", qSummaryOnly); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.UseCachedData != nil {

		// query param useCachedData
		var qrUseCachedData bool

		if o.UseCachedData != nil {
			qrUseCachedData = *o.UseCachedData
		}
		qUseCachedData := swag.FormatBool(qrUseCachedData)
		if qUseCachedData != "" {

			if err := r.SetQueryParam("useCachedData", qUseCachedData); err != nil {
				return err
			}
		}
	}

	if o.ViewCountOnly != nil {

		// query param viewCountOnly
		var qrViewCountOnly bool

		if o.ViewCountOnly != nil {
			qrViewCountOnly = *o.ViewCountOnly
		}
		qViewCountOnly := swag.FormatBool(qrViewCountOnly)
		if qViewCountOnly != "" {

			if err := r.SetQueryParam("viewCountOnly", qViewCountOnly); err != nil {
				return err
			}
		}
	}

	if o.ViewIds != nil {

		// binding items for viewIds
		joinedViewIds := o.bindParamViewIds(reg)

		// query array param viewIds
		if err := r.SetQueryParam("viewIds", joinedViewIds...); err != nil {
			return err
		}
	}

	if o.ViewNames != nil {

		// binding items for viewNames
		joinedViewNames := o.bindParamViewNames(reg)

		// query array param viewNames
		if err := r.SetQueryParam("viewNames", joinedViewNames...); err != nil {
			return err
		}
	}

	if o.ViewProtectionGroupIds != nil {

		// binding items for viewProtectionGroupIds
		joinedViewProtectionGroupIds := o.bindParamViewProtectionGroupIds(reg)

		// query array param viewProtectionGroupIds
		if err := r.SetQueryParam("viewProtectionGroupIds", joinedViewProtectionGroupIds...); err != nil {
			return err
		}
	}

	if o.ViewProtectionTypes != nil {

		// binding items for viewProtectionTypes
		joinedViewProtectionTypes := o.bindParamViewProtectionTypes(reg)

		// query array param viewProtectionTypes
		if err := r.SetQueryParam("viewProtectionTypes", joinedViewProtectionTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetViews binds the parameter categories
func (o *GetViewsParams) bindParamCategories(formats strfmt.Registry) []string {
	categoriesIR := o.Categories

	var categoriesIC []string
	for _, categoriesIIR := range categoriesIR { // explode []string

		categoriesIIV := categoriesIIR // string as string
		categoriesIC = append(categoriesIC, categoriesIIV)
	}

	// items.CollectionFormat: ""
	categoriesIS := swag.JoinByFormat(categoriesIC, "")

	return categoriesIS
}

// bindParamGetViews binds the parameter internalAccessSids
func (o *GetViewsParams) bindParamInternalAccessSids(formats strfmt.Registry) []string {
	internalAccessSidsIR := o.InternalAccessSids

	var internalAccessSidsIC []string
	for _, internalAccessSidsIIR := range internalAccessSidsIR { // explode []string

		internalAccessSidsIIV := internalAccessSidsIIR // string as string
		internalAccessSidsIC = append(internalAccessSidsIC, internalAccessSidsIIV)
	}

	// items.CollectionFormat: ""
	internalAccessSidsIS := swag.JoinByFormat(internalAccessSidsIC, "")

	return internalAccessSidsIS
}

// bindParamGetViews binds the parameter lastRunAnyStatuses
func (o *GetViewsParams) bindParamLastRunAnyStatuses(formats strfmt.Registry) []string {
	lastRunAnyStatusesIR := o.LastRunAnyStatuses

	var lastRunAnyStatusesIC []string
	for _, lastRunAnyStatusesIIR := range lastRunAnyStatusesIR { // explode []string

		lastRunAnyStatusesIIV := lastRunAnyStatusesIIR // string as string
		lastRunAnyStatusesIC = append(lastRunAnyStatusesIC, lastRunAnyStatusesIIV)
	}

	// items.CollectionFormat: ""
	lastRunAnyStatusesIS := swag.JoinByFormat(lastRunAnyStatusesIC, "")

	return lastRunAnyStatusesIS
}

// bindParamGetViews binds the parameter lastRunArchivalStatuses
func (o *GetViewsParams) bindParamLastRunArchivalStatuses(formats strfmt.Registry) []string {
	lastRunArchivalStatusesIR := o.LastRunArchivalStatuses

	var lastRunArchivalStatusesIC []string
	for _, lastRunArchivalStatusesIIR := range lastRunArchivalStatusesIR { // explode []string

		lastRunArchivalStatusesIIV := lastRunArchivalStatusesIIR // string as string
		lastRunArchivalStatusesIC = append(lastRunArchivalStatusesIC, lastRunArchivalStatusesIIV)
	}

	// items.CollectionFormat: ""
	lastRunArchivalStatusesIS := swag.JoinByFormat(lastRunArchivalStatusesIC, "")

	return lastRunArchivalStatusesIS
}

// bindParamGetViews binds the parameter lastRunLocalBackupStatuses
func (o *GetViewsParams) bindParamLastRunLocalBackupStatuses(formats strfmt.Registry) []string {
	lastRunLocalBackupStatusesIR := o.LastRunLocalBackupStatuses

	var lastRunLocalBackupStatusesIC []string
	for _, lastRunLocalBackupStatusesIIR := range lastRunLocalBackupStatusesIR { // explode []string

		lastRunLocalBackupStatusesIIV := lastRunLocalBackupStatusesIIR // string as string
		lastRunLocalBackupStatusesIC = append(lastRunLocalBackupStatusesIC, lastRunLocalBackupStatusesIIV)
	}

	// items.CollectionFormat: ""
	lastRunLocalBackupStatusesIS := swag.JoinByFormat(lastRunLocalBackupStatusesIC, "")

	return lastRunLocalBackupStatusesIS
}

// bindParamGetViews binds the parameter lastRunReplicationStatuses
func (o *GetViewsParams) bindParamLastRunReplicationStatuses(formats strfmt.Registry) []string {
	lastRunReplicationStatusesIR := o.LastRunReplicationStatuses

	var lastRunReplicationStatusesIC []string
	for _, lastRunReplicationStatusesIIR := range lastRunReplicationStatusesIR { // explode []string

		lastRunReplicationStatusesIIV := lastRunReplicationStatusesIIR // string as string
		lastRunReplicationStatusesIC = append(lastRunReplicationStatusesIC, lastRunReplicationStatusesIIV)
	}

	// items.CollectionFormat: ""
	lastRunReplicationStatusesIS := swag.JoinByFormat(lastRunReplicationStatusesIC, "")

	return lastRunReplicationStatusesIS
}

// bindParamGetViews binds the parameter protectionGroupIds
func (o *GetViewsParams) bindParamProtectionGroupIds(formats strfmt.Registry) []string {
	protectionGroupIdsIR := o.ProtectionGroupIds

	var protectionGroupIdsIC []string
	for _, protectionGroupIdsIIR := range protectionGroupIdsIR { // explode []int64

		protectionGroupIdsIIV := swag.FormatInt64(protectionGroupIdsIIR) // int64 as string
		protectionGroupIdsIC = append(protectionGroupIdsIC, protectionGroupIdsIIV)
	}

	// items.CollectionFormat: ""
	protectionGroupIdsIS := swag.JoinByFormat(protectionGroupIdsIC, "")

	return protectionGroupIdsIS
}

// bindParamGetViews binds the parameter protocolAccesses
func (o *GetViewsParams) bindParamProtocolAccesses(formats strfmt.Registry) []string {
	protocolAccessesIR := o.ProtocolAccesses

	var protocolAccessesIC []string
	for _, protocolAccessesIIR := range protocolAccessesIR { // explode []string

		protocolAccessesIIV := protocolAccessesIIR // string as string
		protocolAccessesIC = append(protocolAccessesIC, protocolAccessesIIV)
	}

	// items.CollectionFormat: ""
	protocolAccessesIS := swag.JoinByFormat(protocolAccessesIC, "")

	return protocolAccessesIS
}

// bindParamGetViews binds the parameter qosPrincipalIds
func (o *GetViewsParams) bindParamQosPrincipalIds(formats strfmt.Registry) []string {
	qosPrincipalIdsIR := o.QosPrincipalIds

	var qosPrincipalIdsIC []string
	for _, qosPrincipalIdsIIR := range qosPrincipalIdsIR { // explode []int64

		qosPrincipalIdsIIV := swag.FormatInt64(qosPrincipalIdsIIR) // int64 as string
		qosPrincipalIdsIC = append(qosPrincipalIdsIC, qosPrincipalIdsIIV)
	}

	// items.CollectionFormat: ""
	qosPrincipalIdsIS := swag.JoinByFormat(qosPrincipalIdsIC, "")

	return qosPrincipalIdsIS
}

// bindParamGetViews binds the parameter storageDomainIds
func (o *GetViewsParams) bindParamStorageDomainIds(formats strfmt.Registry) []string {
	storageDomainIdsIR := o.StorageDomainIds

	var storageDomainIdsIC []string
	for _, storageDomainIdsIIR := range storageDomainIdsIR { // explode []int64

		storageDomainIdsIIV := swag.FormatInt64(storageDomainIdsIIR) // int64 as string
		storageDomainIdsIC = append(storageDomainIdsIC, storageDomainIdsIIV)
	}

	// items.CollectionFormat: ""
	storageDomainIdsIS := swag.JoinByFormat(storageDomainIdsIC, "")

	return storageDomainIdsIS
}

// bindParamGetViews binds the parameter storageDomainNames
func (o *GetViewsParams) bindParamStorageDomainNames(formats strfmt.Registry) []string {
	storageDomainNamesIR := o.StorageDomainNames

	var storageDomainNamesIC []string
	for _, storageDomainNamesIIR := range storageDomainNamesIR { // explode []string

		storageDomainNamesIIV := storageDomainNamesIIR // string as string
		storageDomainNamesIC = append(storageDomainNamesIC, storageDomainNamesIIV)
	}

	// items.CollectionFormat: ""
	storageDomainNamesIS := swag.JoinByFormat(storageDomainNamesIC, "")

	return storageDomainNamesIS
}

// bindParamGetViews binds the parameter tenantIds
func (o *GetViewsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}

// bindParamGetViews binds the parameter viewIds
func (o *GetViewsParams) bindParamViewIds(formats strfmt.Registry) []string {
	viewIdsIR := o.ViewIds

	var viewIdsIC []string
	for _, viewIdsIIR := range viewIdsIR { // explode []int64

		viewIdsIIV := swag.FormatInt64(viewIdsIIR) // int64 as string
		viewIdsIC = append(viewIdsIC, viewIdsIIV)
	}

	// items.CollectionFormat: ""
	viewIdsIS := swag.JoinByFormat(viewIdsIC, "")

	return viewIdsIS
}

// bindParamGetViews binds the parameter viewNames
func (o *GetViewsParams) bindParamViewNames(formats strfmt.Registry) []string {
	viewNamesIR := o.ViewNames

	var viewNamesIC []string
	for _, viewNamesIIR := range viewNamesIR { // explode []string

		viewNamesIIV := viewNamesIIR // string as string
		viewNamesIC = append(viewNamesIC, viewNamesIIV)
	}

	// items.CollectionFormat: ""
	viewNamesIS := swag.JoinByFormat(viewNamesIC, "")

	return viewNamesIS
}

// bindParamGetViews binds the parameter viewProtectionGroupIds
func (o *GetViewsParams) bindParamViewProtectionGroupIds(formats strfmt.Registry) []string {
	viewProtectionGroupIdsIR := o.ViewProtectionGroupIds

	var viewProtectionGroupIdsIC []string
	for _, viewProtectionGroupIdsIIR := range viewProtectionGroupIdsIR { // explode []string

		viewProtectionGroupIdsIIV := viewProtectionGroupIdsIIR // string as string
		viewProtectionGroupIdsIC = append(viewProtectionGroupIdsIC, viewProtectionGroupIdsIIV)
	}

	// items.CollectionFormat: ""
	viewProtectionGroupIdsIS := swag.JoinByFormat(viewProtectionGroupIdsIC, "")

	return viewProtectionGroupIdsIS
}

// bindParamGetViews binds the parameter viewProtectionTypes
func (o *GetViewsParams) bindParamViewProtectionTypes(formats strfmt.Registry) []string {
	viewProtectionTypesIR := o.ViewProtectionTypes

	var viewProtectionTypesIC []string
	for _, viewProtectionTypesIIR := range viewProtectionTypesIR { // explode []string

		viewProtectionTypesIIV := viewProtectionTypesIIR // string as string
		viewProtectionTypesIC = append(viewProtectionTypesIC, viewProtectionTypesIIV)
	}

	// items.CollectionFormat: ""
	viewProtectionTypesIS := swag.JoinByFormat(viewProtectionTypesIC, "")

	return viewProtectionTypesIS
}
