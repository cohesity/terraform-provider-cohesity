// Code generated by go-swagger; DO NOT EDIT.

package view

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListSmbFileOpensParams creates a new ListSmbFileOpensParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListSmbFileOpensParams() *ListSmbFileOpensParams {
	return &ListSmbFileOpensParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListSmbFileOpensParamsWithTimeout creates a new ListSmbFileOpensParams object
// with the ability to set a timeout on a request.
func NewListSmbFileOpensParamsWithTimeout(timeout time.Duration) *ListSmbFileOpensParams {
	return &ListSmbFileOpensParams{
		timeout: timeout,
	}
}

// NewListSmbFileOpensParamsWithContext creates a new ListSmbFileOpensParams object
// with the ability to set a context for a request.
func NewListSmbFileOpensParamsWithContext(ctx context.Context) *ListSmbFileOpensParams {
	return &ListSmbFileOpensParams{
		Context: ctx,
	}
}

// NewListSmbFileOpensParamsWithHTTPClient creates a new ListSmbFileOpensParams object
// with the ability to set a custom HTTPClient for a request.
func NewListSmbFileOpensParamsWithHTTPClient(client *http.Client) *ListSmbFileOpensParams {
	return &ListSmbFileOpensParams{
		HTTPClient: client,
	}
}

/*
ListSmbFileOpensParams contains all the parameters to send to the API endpoint

	for the list smb file opens operation.

	Typically these are written to a http.Request.
*/
type ListSmbFileOpensParams struct {

	/* Cookie.

	   Specifies the Pagination Cookie returned in the previous response.
	*/
	Cookie *string

	/* FilePath.

	   Specifies the filepath in the Cohesity View relative to the root filesystem. If this field is specified, viewName field must also be specified.
	*/
	FilePath *string

	/* MaxCount.

	   Specifies the maximum number of active file opens to return in the response. This field cannot be set above 1000. If this is not set, maximum of 1000 entries are returned.

	   Format: int32
	*/
	MaxCount *int32

	/* ViewName.

	   Specifies the name of the Cohesity View in which to search. If a view name is not specified, all the views in the Cluster are searched. This field is mandatory if filePath field is specified.
	*/
	ViewName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list smb file opens params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListSmbFileOpensParams) WithDefaults() *ListSmbFileOpensParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list smb file opens params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListSmbFileOpensParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list smb file opens params
func (o *ListSmbFileOpensParams) WithTimeout(timeout time.Duration) *ListSmbFileOpensParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list smb file opens params
func (o *ListSmbFileOpensParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list smb file opens params
func (o *ListSmbFileOpensParams) WithContext(ctx context.Context) *ListSmbFileOpensParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list smb file opens params
func (o *ListSmbFileOpensParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list smb file opens params
func (o *ListSmbFileOpensParams) WithHTTPClient(client *http.Client) *ListSmbFileOpensParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list smb file opens params
func (o *ListSmbFileOpensParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCookie adds the cookie to the list smb file opens params
func (o *ListSmbFileOpensParams) WithCookie(cookie *string) *ListSmbFileOpensParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the list smb file opens params
func (o *ListSmbFileOpensParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithFilePath adds the filePath to the list smb file opens params
func (o *ListSmbFileOpensParams) WithFilePath(filePath *string) *ListSmbFileOpensParams {
	o.SetFilePath(filePath)
	return o
}

// SetFilePath adds the filePath to the list smb file opens params
func (o *ListSmbFileOpensParams) SetFilePath(filePath *string) {
	o.FilePath = filePath
}

// WithMaxCount adds the maxCount to the list smb file opens params
func (o *ListSmbFileOpensParams) WithMaxCount(maxCount *int32) *ListSmbFileOpensParams {
	o.SetMaxCount(maxCount)
	return o
}

// SetMaxCount adds the maxCount to the list smb file opens params
func (o *ListSmbFileOpensParams) SetMaxCount(maxCount *int32) {
	o.MaxCount = maxCount
}

// WithViewName adds the viewName to the list smb file opens params
func (o *ListSmbFileOpensParams) WithViewName(viewName *string) *ListSmbFileOpensParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the list smb file opens params
func (o *ListSmbFileOpensParams) SetViewName(viewName *string) {
	o.ViewName = viewName
}

// WriteToRequest writes these params to a swagger request
func (o *ListSmbFileOpensParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.FilePath != nil {

		// query param filePath
		var qrFilePath string

		if o.FilePath != nil {
			qrFilePath = *o.FilePath
		}
		qFilePath := qrFilePath
		if qFilePath != "" {

			if err := r.SetQueryParam("filePath", qFilePath); err != nil {
				return err
			}
		}
	}

	if o.MaxCount != nil {

		// query param maxCount
		var qrMaxCount int32

		if o.MaxCount != nil {
			qrMaxCount = *o.MaxCount
		}
		qMaxCount := swag.FormatInt32(qrMaxCount)
		if qMaxCount != "" {

			if err := r.SetQueryParam("maxCount", qMaxCount); err != nil {
				return err
			}
		}
	}

	if o.ViewName != nil {

		// query param viewName
		var qrViewName string

		if o.ViewName != nil {
			qrViewName = *o.ViewName
		}
		qViewName := qrViewName
		if qViewName != "" {

			if err := r.SetQueryParam("viewName", qViewName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
