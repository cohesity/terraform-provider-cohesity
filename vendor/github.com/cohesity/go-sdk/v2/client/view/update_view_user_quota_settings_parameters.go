// Code generated by go-swagger; DO NOT EDIT.

package view

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cohesity/go-sdk/v2/models"
)

// NewUpdateViewUserQuotaSettingsParams creates a new UpdateViewUserQuotaSettingsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateViewUserQuotaSettingsParams() *UpdateViewUserQuotaSettingsParams {
	return &UpdateViewUserQuotaSettingsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateViewUserQuotaSettingsParamsWithTimeout creates a new UpdateViewUserQuotaSettingsParams object
// with the ability to set a timeout on a request.
func NewUpdateViewUserQuotaSettingsParamsWithTimeout(timeout time.Duration) *UpdateViewUserQuotaSettingsParams {
	return &UpdateViewUserQuotaSettingsParams{
		timeout: timeout,
	}
}

// NewUpdateViewUserQuotaSettingsParamsWithContext creates a new UpdateViewUserQuotaSettingsParams object
// with the ability to set a context for a request.
func NewUpdateViewUserQuotaSettingsParamsWithContext(ctx context.Context) *UpdateViewUserQuotaSettingsParams {
	return &UpdateViewUserQuotaSettingsParams{
		Context: ctx,
	}
}

// NewUpdateViewUserQuotaSettingsParamsWithHTTPClient creates a new UpdateViewUserQuotaSettingsParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateViewUserQuotaSettingsParamsWithHTTPClient(client *http.Client) *UpdateViewUserQuotaSettingsParams {
	return &UpdateViewUserQuotaSettingsParams{
		HTTPClient: client,
	}
}

/*
UpdateViewUserQuotaSettingsParams contains all the parameters to send to the API endpoint

	for the update view user quota settings operation.

	Typically these are written to a http.Request.
*/
type UpdateViewUserQuotaSettingsParams struct {

	/* Body.

	   Specifies the parameters to enable/disable or update the default quota config on the view.
	*/
	Body *models.ViewUserQuotaSettings

	/* ViewID.

	   Specifies the View id.

	   Format: int64
	*/
	ViewID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update view user quota settings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateViewUserQuotaSettingsParams) WithDefaults() *UpdateViewUserQuotaSettingsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update view user quota settings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateViewUserQuotaSettingsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update view user quota settings params
func (o *UpdateViewUserQuotaSettingsParams) WithTimeout(timeout time.Duration) *UpdateViewUserQuotaSettingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update view user quota settings params
func (o *UpdateViewUserQuotaSettingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update view user quota settings params
func (o *UpdateViewUserQuotaSettingsParams) WithContext(ctx context.Context) *UpdateViewUserQuotaSettingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update view user quota settings params
func (o *UpdateViewUserQuotaSettingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update view user quota settings params
func (o *UpdateViewUserQuotaSettingsParams) WithHTTPClient(client *http.Client) *UpdateViewUserQuotaSettingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update view user quota settings params
func (o *UpdateViewUserQuotaSettingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update view user quota settings params
func (o *UpdateViewUserQuotaSettingsParams) WithBody(body *models.ViewUserQuotaSettings) *UpdateViewUserQuotaSettingsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update view user quota settings params
func (o *UpdateViewUserQuotaSettingsParams) SetBody(body *models.ViewUserQuotaSettings) {
	o.Body = body
}

// WithViewID adds the viewID to the update view user quota settings params
func (o *UpdateViewUserQuotaSettingsParams) WithViewID(viewID int64) *UpdateViewUserQuotaSettingsParams {
	o.SetViewID(viewID)
	return o
}

// SetViewID adds the viewId to the update view user quota settings params
func (o *UpdateViewUserQuotaSettingsParams) SetViewID(viewID int64) {
	o.ViewID = viewID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateViewUserQuotaSettingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param viewId
	if err := r.SetPathParam("viewId", swag.FormatInt64(o.ViewID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
