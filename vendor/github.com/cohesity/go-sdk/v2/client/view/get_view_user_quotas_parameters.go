// Code generated by go-swagger; DO NOT EDIT.

package view

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewUserQuotasParams creates a new GetViewUserQuotasParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewUserQuotasParams() *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewUserQuotasParamsWithTimeout creates a new GetViewUserQuotasParams object
// with the ability to set a timeout on a request.
func NewGetViewUserQuotasParamsWithTimeout(timeout time.Duration) *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		timeout: timeout,
	}
}

// NewGetViewUserQuotasParamsWithContext creates a new GetViewUserQuotasParams object
// with the ability to set a context for a request.
func NewGetViewUserQuotasParamsWithContext(ctx context.Context) *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		Context: ctx,
	}
}

// NewGetViewUserQuotasParamsWithHTTPClient creates a new GetViewUserQuotasParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewUserQuotasParamsWithHTTPClient(client *http.Client) *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		HTTPClient: client,
	}
}

/*
GetViewUserQuotasParams contains all the parameters to send to the API endpoint

	for the get view user quotas operation.

	Typically these are written to a http.Request.
*/
type GetViewUserQuotasParams struct {

	/* Cookie.

	   Specifies the cookie. If there are more results than maxCount, response will include a cookie with has to be set as part of the next GET request.
	*/
	Cookie *string

	/* ExcludeUsersWithinAlertThreshold.

	   This field can be set only when includeUsage is set to true. By default, all the users with logical usage > 0 will be returned in the result. If this field is set to true, only the list of users who has exceeded the alert threshold will be returned.
	*/
	ExcludeUsersWithinAlertThreshold *bool

	/* IncludeUsage.

	   If set to true, the logical usage info is included only for users with quota overrides. By default, it is set to false
	*/
	IncludeUsage *bool

	/* IncludeUserWithQuotaOverridesOnly.

	   If set to true, the result will only contain user with user quota override enabled. By default, this field is set to false, and it's only in effect when 'SummaryOnly' is set to false.
	*/
	IncludeUserWithQuotaOverridesOnly *bool

	/* MaxCount.

	   Specifies a limit on the number of quotas returned. If maxCount is not set, response will have a maximum of 100 results. This parameter will be ignored if 'topQuotas' is set.

	   Format: int64
	*/
	MaxCount *int64

	/* OutputFormat.

	   OutputFormat is the Output format for the output. If it is not specified, default is json.
	*/
	OutputFormat *string

	/* Sid.

	   Specifies the user identifier of a SMB user. If a valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided.
	*/
	Sid *string

	/* SummaryOnly.

	   Specifies a flag to just return a summary. If set to true, it returns the summary of users for a view. By default, it is set to false.
	*/
	SummaryOnly *bool

	/* TopQuotas.

	   TopQuotas is the quotas sorted by quota usage in descending order. This parameter defines number of results to be returned. No pagination cookie is returned if this parameter is set.

	   Format: int64
	*/
	TopQuotas *int64

	/* UnixUID.

	   Specifies the user identifier of an Unix user. If a valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided.

	   Format: uint32
	*/
	UnixUID *uint32

	/* ViewID.

	   Specifies the View id.

	   Format: int64
	*/
	ViewID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get view user quotas params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewUserQuotasParams) WithDefaults() *GetViewUserQuotasParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get view user quotas params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewUserQuotasParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get view user quotas params
func (o *GetViewUserQuotasParams) WithTimeout(timeout time.Duration) *GetViewUserQuotasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get view user quotas params
func (o *GetViewUserQuotasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get view user quotas params
func (o *GetViewUserQuotasParams) WithContext(ctx context.Context) *GetViewUserQuotasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get view user quotas params
func (o *GetViewUserQuotasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get view user quotas params
func (o *GetViewUserQuotasParams) WithHTTPClient(client *http.Client) *GetViewUserQuotasParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get view user quotas params
func (o *GetViewUserQuotasParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCookie adds the cookie to the get view user quotas params
func (o *GetViewUserQuotasParams) WithCookie(cookie *string) *GetViewUserQuotasParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the get view user quotas params
func (o *GetViewUserQuotasParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithExcludeUsersWithinAlertThreshold adds the excludeUsersWithinAlertThreshold to the get view user quotas params
func (o *GetViewUserQuotasParams) WithExcludeUsersWithinAlertThreshold(excludeUsersWithinAlertThreshold *bool) *GetViewUserQuotasParams {
	o.SetExcludeUsersWithinAlertThreshold(excludeUsersWithinAlertThreshold)
	return o
}

// SetExcludeUsersWithinAlertThreshold adds the excludeUsersWithinAlertThreshold to the get view user quotas params
func (o *GetViewUserQuotasParams) SetExcludeUsersWithinAlertThreshold(excludeUsersWithinAlertThreshold *bool) {
	o.ExcludeUsersWithinAlertThreshold = excludeUsersWithinAlertThreshold
}

// WithIncludeUsage adds the includeUsage to the get view user quotas params
func (o *GetViewUserQuotasParams) WithIncludeUsage(includeUsage *bool) *GetViewUserQuotasParams {
	o.SetIncludeUsage(includeUsage)
	return o
}

// SetIncludeUsage adds the includeUsage to the get view user quotas params
func (o *GetViewUserQuotasParams) SetIncludeUsage(includeUsage *bool) {
	o.IncludeUsage = includeUsage
}

// WithIncludeUserWithQuotaOverridesOnly adds the includeUserWithQuotaOverridesOnly to the get view user quotas params
func (o *GetViewUserQuotasParams) WithIncludeUserWithQuotaOverridesOnly(includeUserWithQuotaOverridesOnly *bool) *GetViewUserQuotasParams {
	o.SetIncludeUserWithQuotaOverridesOnly(includeUserWithQuotaOverridesOnly)
	return o
}

// SetIncludeUserWithQuotaOverridesOnly adds the includeUserWithQuotaOverridesOnly to the get view user quotas params
func (o *GetViewUserQuotasParams) SetIncludeUserWithQuotaOverridesOnly(includeUserWithQuotaOverridesOnly *bool) {
	o.IncludeUserWithQuotaOverridesOnly = includeUserWithQuotaOverridesOnly
}

// WithMaxCount adds the maxCount to the get view user quotas params
func (o *GetViewUserQuotasParams) WithMaxCount(maxCount *int64) *GetViewUserQuotasParams {
	o.SetMaxCount(maxCount)
	return o
}

// SetMaxCount adds the maxCount to the get view user quotas params
func (o *GetViewUserQuotasParams) SetMaxCount(maxCount *int64) {
	o.MaxCount = maxCount
}

// WithOutputFormat adds the outputFormat to the get view user quotas params
func (o *GetViewUserQuotasParams) WithOutputFormat(outputFormat *string) *GetViewUserQuotasParams {
	o.SetOutputFormat(outputFormat)
	return o
}

// SetOutputFormat adds the outputFormat to the get view user quotas params
func (o *GetViewUserQuotasParams) SetOutputFormat(outputFormat *string) {
	o.OutputFormat = outputFormat
}

// WithSid adds the sid to the get view user quotas params
func (o *GetViewUserQuotasParams) WithSid(sid *string) *GetViewUserQuotasParams {
	o.SetSid(sid)
	return o
}

// SetSid adds the sid to the get view user quotas params
func (o *GetViewUserQuotasParams) SetSid(sid *string) {
	o.Sid = sid
}

// WithSummaryOnly adds the summaryOnly to the get view user quotas params
func (o *GetViewUserQuotasParams) WithSummaryOnly(summaryOnly *bool) *GetViewUserQuotasParams {
	o.SetSummaryOnly(summaryOnly)
	return o
}

// SetSummaryOnly adds the summaryOnly to the get view user quotas params
func (o *GetViewUserQuotasParams) SetSummaryOnly(summaryOnly *bool) {
	o.SummaryOnly = summaryOnly
}

// WithTopQuotas adds the topQuotas to the get view user quotas params
func (o *GetViewUserQuotasParams) WithTopQuotas(topQuotas *int64) *GetViewUserQuotasParams {
	o.SetTopQuotas(topQuotas)
	return o
}

// SetTopQuotas adds the topQuotas to the get view user quotas params
func (o *GetViewUserQuotasParams) SetTopQuotas(topQuotas *int64) {
	o.TopQuotas = topQuotas
}

// WithUnixUID adds the unixUID to the get view user quotas params
func (o *GetViewUserQuotasParams) WithUnixUID(unixUID *uint32) *GetViewUserQuotasParams {
	o.SetUnixUID(unixUID)
	return o
}

// SetUnixUID adds the unixUid to the get view user quotas params
func (o *GetViewUserQuotasParams) SetUnixUID(unixUID *uint32) {
	o.UnixUID = unixUID
}

// WithViewID adds the viewID to the get view user quotas params
func (o *GetViewUserQuotasParams) WithViewID(viewID int64) *GetViewUserQuotasParams {
	o.SetViewID(viewID)
	return o
}

// SetViewID adds the viewId to the get view user quotas params
func (o *GetViewUserQuotasParams) SetViewID(viewID int64) {
	o.ViewID = viewID
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewUserQuotasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.ExcludeUsersWithinAlertThreshold != nil {

		// query param excludeUsersWithinAlertThreshold
		var qrExcludeUsersWithinAlertThreshold bool

		if o.ExcludeUsersWithinAlertThreshold != nil {
			qrExcludeUsersWithinAlertThreshold = *o.ExcludeUsersWithinAlertThreshold
		}
		qExcludeUsersWithinAlertThreshold := swag.FormatBool(qrExcludeUsersWithinAlertThreshold)
		if qExcludeUsersWithinAlertThreshold != "" {

			if err := r.SetQueryParam("excludeUsersWithinAlertThreshold", qExcludeUsersWithinAlertThreshold); err != nil {
				return err
			}
		}
	}

	if o.IncludeUsage != nil {

		// query param includeUsage
		var qrIncludeUsage bool

		if o.IncludeUsage != nil {
			qrIncludeUsage = *o.IncludeUsage
		}
		qIncludeUsage := swag.FormatBool(qrIncludeUsage)
		if qIncludeUsage != "" {

			if err := r.SetQueryParam("includeUsage", qIncludeUsage); err != nil {
				return err
			}
		}
	}

	if o.IncludeUserWithQuotaOverridesOnly != nil {

		// query param includeUserWithQuotaOverridesOnly
		var qrIncludeUserWithQuotaOverridesOnly bool

		if o.IncludeUserWithQuotaOverridesOnly != nil {
			qrIncludeUserWithQuotaOverridesOnly = *o.IncludeUserWithQuotaOverridesOnly
		}
		qIncludeUserWithQuotaOverridesOnly := swag.FormatBool(qrIncludeUserWithQuotaOverridesOnly)
		if qIncludeUserWithQuotaOverridesOnly != "" {

			if err := r.SetQueryParam("includeUserWithQuotaOverridesOnly", qIncludeUserWithQuotaOverridesOnly); err != nil {
				return err
			}
		}
	}

	if o.MaxCount != nil {

		// query param maxCount
		var qrMaxCount int64

		if o.MaxCount != nil {
			qrMaxCount = *o.MaxCount
		}
		qMaxCount := swag.FormatInt64(qrMaxCount)
		if qMaxCount != "" {

			if err := r.SetQueryParam("maxCount", qMaxCount); err != nil {
				return err
			}
		}
	}

	if o.OutputFormat != nil {

		// query param outputFormat
		var qrOutputFormat string

		if o.OutputFormat != nil {
			qrOutputFormat = *o.OutputFormat
		}
		qOutputFormat := qrOutputFormat
		if qOutputFormat != "" {

			if err := r.SetQueryParam("outputFormat", qOutputFormat); err != nil {
				return err
			}
		}
	}

	if o.Sid != nil {

		// query param sid
		var qrSid string

		if o.Sid != nil {
			qrSid = *o.Sid
		}
		qSid := qrSid
		if qSid != "" {

			if err := r.SetQueryParam("sid", qSid); err != nil {
				return err
			}
		}
	}

	if o.SummaryOnly != nil {

		// query param summaryOnly
		var qrSummaryOnly bool

		if o.SummaryOnly != nil {
			qrSummaryOnly = *o.SummaryOnly
		}
		qSummaryOnly := swag.FormatBool(qrSummaryOnly)
		if qSummaryOnly != "" {

			if err := r.SetQueryParam("summaryOnly", qSummaryOnly); err != nil {
				return err
			}
		}
	}

	if o.TopQuotas != nil {

		// query param topQuotas
		var qrTopQuotas int64

		if o.TopQuotas != nil {
			qrTopQuotas = *o.TopQuotas
		}
		qTopQuotas := swag.FormatInt64(qrTopQuotas)
		if qTopQuotas != "" {

			if err := r.SetQueryParam("topQuotas", qTopQuotas); err != nil {
				return err
			}
		}
	}

	if o.UnixUID != nil {

		// query param unixUid
		var qrUnixUID uint32

		if o.UnixUID != nil {
			qrUnixUID = *o.UnixUID
		}
		qUnixUID := swag.FormatUint32(qrUnixUID)
		if qUnixUID != "" {

			if err := r.SetQueryParam("unixUid", qUnixUID); err != nil {
				return err
			}
		}
	}

	// path param viewId
	if err := r.SetPathParam("viewId", swag.FormatInt64(o.ViewID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
