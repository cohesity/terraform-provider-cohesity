// Code generated by go-swagger; DO NOT EDIT.

package view

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewUserQuotasParams creates a new GetViewUserQuotasParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewUserQuotasParams() *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewUserQuotasParamsWithTimeout creates a new GetViewUserQuotasParams object
// with the ability to set a timeout on a request.
func NewGetViewUserQuotasParamsWithTimeout(timeout time.Duration) *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		timeout: timeout,
	}
}

// NewGetViewUserQuotasParamsWithContext creates a new GetViewUserQuotasParams object
// with the ability to set a context for a request.
func NewGetViewUserQuotasParamsWithContext(ctx context.Context) *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		Context: ctx,
	}
}

// NewGetViewUserQuotasParamsWithHTTPClient creates a new GetViewUserQuotasParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewUserQuotasParamsWithHTTPClient(client *http.Client) *GetViewUserQuotasParams {
	return &GetViewUserQuotasParams{
		HTTPClient: client,
	}
}

/*
GetViewUserQuotasParams contains all the parameters to send to the API endpoint

	for the get view user quotas operation.

	Typically these are written to a http.Request.
*/
type GetViewUserQuotasParams struct {

	/* Cookie.

	   Specifies the cookie. If there are more results than maxCount, response will include a cookie with has to be set as part of the next GET request.
	*/
	Cookie *string

	/* MaxCount.

	   Specifies a limit on the number of quotas returned. If maxCount is not set, response will have a maximum of 100 results.

	   Format: int64
	*/
	MaxCount *int64

	/* Sid.

	   Specifies the user identifier of a SMB user. If a valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided.
	*/
	Sid *string

	/* UnixUID.

	   Specifies the user identifier of an Unix user. If a valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided.

	   Format: uint32
	*/
	UnixUID *uint32

	/* ViewID.

	   Specifies the View id.

	   Format: int64
	*/
	ViewID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get view user quotas params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewUserQuotasParams) WithDefaults() *GetViewUserQuotasParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get view user quotas params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewUserQuotasParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get view user quotas params
func (o *GetViewUserQuotasParams) WithTimeout(timeout time.Duration) *GetViewUserQuotasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get view user quotas params
func (o *GetViewUserQuotasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get view user quotas params
func (o *GetViewUserQuotasParams) WithContext(ctx context.Context) *GetViewUserQuotasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get view user quotas params
func (o *GetViewUserQuotasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get view user quotas params
func (o *GetViewUserQuotasParams) WithHTTPClient(client *http.Client) *GetViewUserQuotasParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get view user quotas params
func (o *GetViewUserQuotasParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCookie adds the cookie to the get view user quotas params
func (o *GetViewUserQuotasParams) WithCookie(cookie *string) *GetViewUserQuotasParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the get view user quotas params
func (o *GetViewUserQuotasParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithMaxCount adds the maxCount to the get view user quotas params
func (o *GetViewUserQuotasParams) WithMaxCount(maxCount *int64) *GetViewUserQuotasParams {
	o.SetMaxCount(maxCount)
	return o
}

// SetMaxCount adds the maxCount to the get view user quotas params
func (o *GetViewUserQuotasParams) SetMaxCount(maxCount *int64) {
	o.MaxCount = maxCount
}

// WithSid adds the sid to the get view user quotas params
func (o *GetViewUserQuotasParams) WithSid(sid *string) *GetViewUserQuotasParams {
	o.SetSid(sid)
	return o
}

// SetSid adds the sid to the get view user quotas params
func (o *GetViewUserQuotasParams) SetSid(sid *string) {
	o.Sid = sid
}

// WithUnixUID adds the unixUID to the get view user quotas params
func (o *GetViewUserQuotasParams) WithUnixUID(unixUID *uint32) *GetViewUserQuotasParams {
	o.SetUnixUID(unixUID)
	return o
}

// SetUnixUID adds the unixUid to the get view user quotas params
func (o *GetViewUserQuotasParams) SetUnixUID(unixUID *uint32) {
	o.UnixUID = unixUID
}

// WithViewID adds the viewID to the get view user quotas params
func (o *GetViewUserQuotasParams) WithViewID(viewID int64) *GetViewUserQuotasParams {
	o.SetViewID(viewID)
	return o
}

// SetViewID adds the viewId to the get view user quotas params
func (o *GetViewUserQuotasParams) SetViewID(viewID int64) {
	o.ViewID = viewID
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewUserQuotasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.MaxCount != nil {

		// query param maxCount
		var qrMaxCount int64

		if o.MaxCount != nil {
			qrMaxCount = *o.MaxCount
		}
		qMaxCount := swag.FormatInt64(qrMaxCount)
		if qMaxCount != "" {

			if err := r.SetQueryParam("maxCount", qMaxCount); err != nil {
				return err
			}
		}
	}

	if o.Sid != nil {

		// query param sid
		var qrSid string

		if o.Sid != nil {
			qrSid = *o.Sid
		}
		qSid := qrSid
		if qSid != "" {

			if err := r.SetQueryParam("sid", qSid); err != nil {
				return err
			}
		}
	}

	if o.UnixUID != nil {

		// query param unixUid
		var qrUnixUID uint32

		if o.UnixUID != nil {
			qrUnixUID = *o.UnixUID
		}
		qUnixUID := swag.FormatUint32(qrUnixUID)
		if qUnixUID != "" {

			if err := r.SetQueryParam("unixUid", qUnixUID); err != nil {
				return err
			}
		}
	}

	// path param viewId
	if err := r.SetPathParam("viewId", swag.FormatInt64(o.ViewID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
