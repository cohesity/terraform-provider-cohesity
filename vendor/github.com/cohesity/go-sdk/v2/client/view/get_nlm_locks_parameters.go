// Code generated by go-swagger; DO NOT EDIT.

package view

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNlmLocksParams creates a new GetNlmLocksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNlmLocksParams() *GetNlmLocksParams {
	return &GetNlmLocksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNlmLocksParamsWithTimeout creates a new GetNlmLocksParams object
// with the ability to set a timeout on a request.
func NewGetNlmLocksParamsWithTimeout(timeout time.Duration) *GetNlmLocksParams {
	return &GetNlmLocksParams{
		timeout: timeout,
	}
}

// NewGetNlmLocksParamsWithContext creates a new GetNlmLocksParams object
// with the ability to set a context for a request.
func NewGetNlmLocksParamsWithContext(ctx context.Context) *GetNlmLocksParams {
	return &GetNlmLocksParams{
		Context: ctx,
	}
}

// NewGetNlmLocksParamsWithHTTPClient creates a new GetNlmLocksParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNlmLocksParamsWithHTTPClient(client *http.Client) *GetNlmLocksParams {
	return &GetNlmLocksParams{
		HTTPClient: client,
	}
}

/*
GetNlmLocksParams contains all the parameters to send to the API endpoint

	for the get nlm locks operation.

	Typically these are written to a http.Request.
*/
type GetNlmLocksParams struct {

	/* Cookie.

	     Specifies the pagination cookie. If this is set, next set of locks
	just after the previous response are returned. If this is
	not set, first set of NLM locks are returned."
	*/
	Cookie *string

	/* FilePath.

	     Specifies the filepath in the view relative to the root filesystem.
	If this field is specified, viewName field must also be specified.
	*/
	FilePath *string

	/* MaxCount.

	     Specifies the maximum number of NLM locks to return in the response.
	By default, maxCount is set to 1000. At any given instance, maxCount
	value cannot be set to more than 1000.

	     Format: int32
	*/
	MaxCount *int32

	/* ViewName.

	     Specifies the name of the View in which to search.
	If a view name is not specified, all the views in the Cluster
	is searched. This field is mandatory if filePath field is specified.
	*/
	ViewName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get nlm locks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNlmLocksParams) WithDefaults() *GetNlmLocksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get nlm locks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNlmLocksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get nlm locks params
func (o *GetNlmLocksParams) WithTimeout(timeout time.Duration) *GetNlmLocksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nlm locks params
func (o *GetNlmLocksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nlm locks params
func (o *GetNlmLocksParams) WithContext(ctx context.Context) *GetNlmLocksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nlm locks params
func (o *GetNlmLocksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nlm locks params
func (o *GetNlmLocksParams) WithHTTPClient(client *http.Client) *GetNlmLocksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nlm locks params
func (o *GetNlmLocksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCookie adds the cookie to the get nlm locks params
func (o *GetNlmLocksParams) WithCookie(cookie *string) *GetNlmLocksParams {
	o.SetCookie(cookie)
	return o
}

// SetCookie adds the cookie to the get nlm locks params
func (o *GetNlmLocksParams) SetCookie(cookie *string) {
	o.Cookie = cookie
}

// WithFilePath adds the filePath to the get nlm locks params
func (o *GetNlmLocksParams) WithFilePath(filePath *string) *GetNlmLocksParams {
	o.SetFilePath(filePath)
	return o
}

// SetFilePath adds the filePath to the get nlm locks params
func (o *GetNlmLocksParams) SetFilePath(filePath *string) {
	o.FilePath = filePath
}

// WithMaxCount adds the maxCount to the get nlm locks params
func (o *GetNlmLocksParams) WithMaxCount(maxCount *int32) *GetNlmLocksParams {
	o.SetMaxCount(maxCount)
	return o
}

// SetMaxCount adds the maxCount to the get nlm locks params
func (o *GetNlmLocksParams) SetMaxCount(maxCount *int32) {
	o.MaxCount = maxCount
}

// WithViewName adds the viewName to the get nlm locks params
func (o *GetNlmLocksParams) WithViewName(viewName *string) *GetNlmLocksParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the get nlm locks params
func (o *GetNlmLocksParams) SetViewName(viewName *string) {
	o.ViewName = viewName
}

// WriteToRequest writes these params to a swagger request
func (o *GetNlmLocksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cookie != nil {

		// query param cookie
		var qrCookie string

		if o.Cookie != nil {
			qrCookie = *o.Cookie
		}
		qCookie := qrCookie
		if qCookie != "" {

			if err := r.SetQueryParam("cookie", qCookie); err != nil {
				return err
			}
		}
	}

	if o.FilePath != nil {

		// query param filePath
		var qrFilePath string

		if o.FilePath != nil {
			qrFilePath = *o.FilePath
		}
		qFilePath := qrFilePath
		if qFilePath != "" {

			if err := r.SetQueryParam("filePath", qFilePath); err != nil {
				return err
			}
		}
	}

	if o.MaxCount != nil {

		// query param maxCount
		var qrMaxCount int32

		if o.MaxCount != nil {
			qrMaxCount = *o.MaxCount
		}
		qMaxCount := swag.FormatInt32(qrMaxCount)
		if qMaxCount != "" {

			if err := r.SetQueryParam("maxCount", qMaxCount); err != nil {
				return err
			}
		}
	}

	if o.ViewName != nil {

		// query param viewName
		var qrViewName string

		if o.ViewName != nil {
			qrViewName = *o.ViewName
		}
		qViewName := qrViewName
		if qViewName != "" {

			if err := r.SetQueryParam("viewName", qViewName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
