// Code generated by go-swagger; DO NOT EDIT.

package view

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new view API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new view API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new view API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for view API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddViewUserQuotaOverrides(params *AddViewUserQuotaOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddViewUserQuotaOverridesCreated, error)

	ClearNlmLocks(params *ClearNlmLocksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClearNlmLocksNoContent, error)

	CloneView(params *CloneViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneViewCreated, error)

	CloneViewDirectory(params *CloneViewDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneViewDirectoryNoContent, error)

	CloseSmbFileOpen(params *CloseSmbFileOpenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloseSmbFileOpenNoContent, error)

	CreateShare(params *CreateShareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateShareCreated, error)

	CreateView(params *CreateViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewCreated, error)

	CreateViewTemplate(params *CreateViewTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewTemplateCreated, error)

	DeleteShare(params *DeleteShareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteShareNoContent, error)

	DeleteView(params *DeleteViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewNoContent, error)

	DeleteViewDirectoryQuota(params *DeleteViewDirectoryQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewDirectoryQuotaNoContent, error)

	DeleteViewTemplate(params *DeleteViewTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewTemplateNoContent, error)

	DeleteViewUserQuotaOverrides(params *DeleteViewUserQuotaOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewUserQuotaOverridesNoContent, error)

	GetFileLockStatus(params *GetFileLockStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileLockStatusOK, error)

	GetNlmLocks(params *GetNlmLocksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNlmLocksOK, error)

	GetQosPolicies(params *GetQosPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQosPoliciesOK, error)

	GetShares(params *GetSharesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSharesOK, error)

	GetViewByID(params *GetViewByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewByIDOK, error)

	GetViewClients(params *GetViewClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewClientsOK, error)

	GetViewClientsSummary(params *GetViewClientsSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewClientsSummaryOK, error)

	GetViewDirectoryQuotas(params *GetViewDirectoryQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewDirectoryQuotasOK, error)

	GetViewUserQuotas(params *GetViewUserQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewUserQuotasOK, error)

	GetViews(params *GetViewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewsOK, error)

	GetViewsSummary(params *GetViewsSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewsSummaryOK, error)

	ListSmbFileOpens(params *ListSmbFileOpensParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSmbFileOpensOK, error)

	LockFile(params *LockFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockFileCreated, error)

	OverwriteView(params *OverwriteViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverwriteViewNoContent, error)

	ReadViewTemplateByID(params *ReadViewTemplateByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadViewTemplateByIDOK, error)

	ReadViewTemplates(params *ReadViewTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadViewTemplatesOK, error)

	UpdateShare(params *UpdateShareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateShareOK, error)

	UpdateView(params *UpdateViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewOK, error)

	UpdateViewDirectoryQuota(params *UpdateViewDirectoryQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewDirectoryQuotaOK, error)

	UpdateViewTemplate(params *UpdateViewTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewTemplateOK, error)

	UpdateViewUserQuotaOverride(params *UpdateViewUserQuotaOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewUserQuotaOverrideOK, error)

	UpdateViewUserQuotaSettings(params *UpdateViewUserQuotaSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewUserQuotaSettingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddViewUserQuotaOverrides adds user quota overrides

**Privileges:** ```STORAGE_MODIFY``` <br><br>Specifies the parameters to override the user quota on the view. User quota on the view should be enabled before setting a user override.
*/
func (a *Client) AddViewUserQuotaOverrides(params *AddViewUserQuotaOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddViewUserQuotaOverridesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddViewUserQuotaOverridesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddViewUserQuotaOverrides",
		Method:             "POST",
		PathPattern:        "/file-services/views/{viewId}/user-quotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddViewUserQuotaOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddViewUserQuotaOverridesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddViewUserQuotaOverridesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClearNlmLocks clears n l m locks

**Privileges:** ```STORAGE_MODIFY``` <br><br>Clear NLM locks that match the filter criteria specified using parameters
*/
func (a *Client) ClearNlmLocks(params *ClearNlmLocksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClearNlmLocksNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClearNlmLocksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClearNlmLocks",
		Method:             "DELETE",
		PathPattern:        "/file-services/nlm-locks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClearNlmLocksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClearNlmLocksNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClearNlmLocksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloneView clones view

**Privileges:** ```STORAGE_MODIFY, CLONE_MODIFY``` <br><br>Clone View.
*/
func (a *Client) CloneView(params *CloneViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneViewCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneView",
		Method:             "POST",
		PathPattern:        "/file-services/views/{id}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneViewCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloneViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloneViewDirectory clones view directory

**Privileges:** ```STORAGE_MODIFY``` <br><br>Clone View Directory.
*/
func (a *Client) CloneViewDirectory(params *CloneViewDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneViewDirectoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneViewDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneViewDirectory",
		Method:             "POST",
		PathPattern:        "/file-services/views/clone-directory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneViewDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneViewDirectoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloneViewDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CloseSmbFileOpen closes s m b file open

**Privileges:** ```STORAGE_MODIFY``` <br><br>Close an active SMB file open.
*/
func (a *Client) CloseSmbFileOpen(params *CloseSmbFileOpenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloseSmbFileOpenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloseSmbFileOpenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloseSmbFileOpen",
		Method:             "DELETE",
		PathPattern:        "/file-services/smb-file-opens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloseSmbFileOpenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloseSmbFileOpenNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloseSmbFileOpenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateShare creates a share

**Privileges:** ```STORAGE_MODIFY``` <br><br>Create a Share.
*/
func (a *Client) CreateShare(params *CreateShareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateShareCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateShareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateShare",
		Method:             "POST",
		PathPattern:        "/file-services/shares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateShareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateShareCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateShareDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateView creates a view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Creates a View.
*/
func (a *Client) CreateView(params *CreateViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateView",
		Method:             "POST",
		PathPattern:        "/file-services/views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateViewCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateViewTemplate creates a view template

**Privileges:** ```STORAGE_DOMAIN_MODIFY``` <br><br>Creates a View Template.
*/
func (a *Client) CreateViewTemplate(params *CreateViewTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateViewTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateViewTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateViewTemplate",
		Method:             "POST",
		PathPattern:        "/file-services/view-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateViewTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateViewTemplateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateViewTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteShare deletes a share

**Privileges:** ```STORAGE_MODIFY``` <br><br>Delete a Share.
*/
func (a *Client) DeleteShare(params *DeleteShareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteShareNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteShareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteShare",
		Method:             "DELETE",
		PathPattern:        "/file-services/shares/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteShareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteShareNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteShareDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteView deletes a view

```No Privileges Required``` <br><br>Deletes a View based on given id.
*/
func (a *Client) DeleteView(params *DeleteViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteView",
		Method:             "DELETE",
		PathPattern:        "/file-services/views/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteViewNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteViewDirectoryQuota deletes directory quota for the view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Delete directory quota for the View.
*/
func (a *Client) DeleteViewDirectoryQuota(params *DeleteViewDirectoryQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewDirectoryQuotaNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteViewDirectoryQuotaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteViewDirectoryQuota",
		Method:             "DELETE",
		PathPattern:        "/file-services/views/{id}/directory-quotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteViewDirectoryQuotaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteViewDirectoryQuotaNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteViewDirectoryQuotaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteViewTemplate deletes a view template

**Privileges:** ```STORAGE_DOMAIN_MODIFY``` <br><br>Deletes a view template based on given template id.
*/
func (a *Client) DeleteViewTemplate(params *DeleteViewTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteViewTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteViewTemplate",
		Method:             "DELETE",
		PathPattern:        "/file-services/view-template/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteViewTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteViewTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteViewTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteViewUserQuotaOverrides deletes user quota overrides

**Privileges:** ```STORAGE_MODIFY``` <br><br>Specifies the parameters to delete user quotas on the view.
*/
func (a *Client) DeleteViewUserQuotaOverrides(params *DeleteViewUserQuotaOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteViewUserQuotaOverridesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteViewUserQuotaOverridesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteViewUserQuotaOverrides",
		Method:             "DELETE",
		PathPattern:        "/file-services/views/{viewId}/user-quotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteViewUserQuotaOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteViewUserQuotaOverridesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteViewUserQuotaOverridesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFileLockStatus gets file lock status

**Privileges:** ```STORAGE_VIEW``` <br><br>Get the lock status of a file in a view.
*/
func (a *Client) GetFileLockStatus(params *GetFileLockStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileLockStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileLockStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFileLockStatus",
		Method:             "GET",
		PathPattern:        "/file-services/views/{id}/file-lock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileLockStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileLockStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFileLockStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNlmLocks gets n l m locks

**Privileges:** ```STORAGE_VIEW``` <br><br>Get the list of NLM locks in the views.
*/
func (a *Client) GetNlmLocks(params *GetNlmLocksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNlmLocksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNlmLocksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNlmLocks",
		Method:             "GET",
		PathPattern:        "/file-services/nlm-locks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNlmLocksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNlmLocksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNlmLocksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetQosPolicies gets qo s policies

**Privileges:** ```STORAGE_VIEW``` <br><br>Get the list of QoS policies on the Cohesity cluster.
*/
func (a *Client) GetQosPolicies(params *GetQosPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQosPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQosPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQosPolicies",
		Method:             "GET",
		PathPattern:        "/file-services/qos-policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQosPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQosPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetQosPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetShares gets shares

**Privileges:** ```STORAGE_VIEW``` <br><br>If no parameters are specified, all shares on the Cohesity Cluster are returned. Specifying share name/prefix filters the results that are returned. NOTE: If maxCount is set and the number of Shares returned exceeds the maxCount, there are more Share to return. To get the next set of Views, send another request and specify the pagination cookie from the previous response. If maxCount is not specified, the first 2000 Shares.
*/
func (a *Client) GetShares(params *GetSharesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSharesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSharesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetShares",
		Method:             "GET",
		PathPattern:        "/file-services/shares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSharesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSharesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSharesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewByID gets a view by Id

**Privileges:** ```STORAGE_VIEW``` <br><br>Get a View based on given Id.
*/
func (a *Client) GetViewByID(params *GetViewByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewById",
		Method:             "GET",
		PathPattern:        "/file-services/views/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewClients gets view clients

**Privileges:** ```STORAGE_VIEW``` <br><br>Get View Clients.
*/
func (a *Client) GetViewClients(params *GetViewClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewClients",
		Method:             "GET",
		PathPattern:        "/file-services/view-clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewClientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewClientsSummary gets view clients summary

**Privileges:** ```STORAGE_VIEW``` <br><br>Get View Clients Summary.
*/
func (a *Client) GetViewClientsSummary(params *GetViewClientsSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewClientsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewClientsSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewClientsSummary",
		Method:             "GET",
		PathPattern:        "/file-services/view-clients/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewClientsSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewClientsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewClientsSummaryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewDirectoryQuotas gets directory quotas for the view

**Privileges:** ```STORAGE_VIEW``` <br><br>Get directory quotas for the View.
*/
func (a *Client) GetViewDirectoryQuotas(params *GetViewDirectoryQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewDirectoryQuotasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewDirectoryQuotasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewDirectoryQuotas",
		Method:             "GET",
		PathPattern:        "/file-services/views/{id}/directory-quotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewDirectoryQuotasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewDirectoryQuotasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewDirectoryQuotasDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewUserQuotas gets view user quotas

**Privileges:** ```STORAGE_VIEW``` <br><br>Get user quotas for the View.
*/
func (a *Client) GetViewUserQuotas(params *GetViewUserQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewUserQuotasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewUserQuotasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewUserQuotas",
		Method:             "GET",
		PathPattern:        "/file-services/views/{viewId}/user-quotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewUserQuotasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewUserQuotasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewUserQuotasDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetViews lists views

	**Privileges:** ```STORAGE_VIEW``` <br><br>If no parameters are specified, all Views on the Cohesity Cluster are returned.

Specifying parameters filters the results that are returned.
NOTE: If maxCount is set and the number of Views returned exceeds the maxCount,
there are more Views to return.
To get the next set of Views, send another request and specify the id of the
last View returned in viewList from the previous response.
*/
func (a *Client) GetViews(params *GetViewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViews",
		Method:             "GET",
		PathPattern:        "/file-services/views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewsSummary gets views summary

**Privileges:** ```STORAGE_VIEW``` <br><br>Get Views summary.
*/
func (a *Client) GetViewsSummary(params *GetViewsSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewsSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewsSummary",
		Method:             "GET",
		PathPattern:        "/file-services/views-summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewsSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewsSummaryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListSmbFileOpens gets s m b file opens

**Privileges:** ```STORAGE_VIEW``` <br><br>Get SMB active file opens on a Cohesity View.
*/
func (a *Client) ListSmbFileOpens(params *ListSmbFileOpensParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSmbFileOpensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSmbFileOpensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListSmbFileOpens",
		Method:             "GET",
		PathPattern:        "/file-services/smb-file-opens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSmbFileOpensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSmbFileOpensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSmbFileOpensDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LockFile creates a file lock

**Privileges:** ```STORAGE_MODIFY``` <br><br>Locks a file in a view and returns the lock status of the file.
*/
func (a *Client) LockFile(params *LockFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockFileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LockFile",
		Method:             "POST",
		PathPattern:        "/file-services/views/{id}/file-lock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LockFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockFileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LockFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OverwriteView overwrites view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Overwrite View.
*/
func (a *Client) OverwriteView(params *OverwriteViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverwriteViewNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverwriteViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OverwriteView",
		Method:             "POST",
		PathPattern:        "/file-services/views/{id}/overwrite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OverwriteViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OverwriteViewNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OverwriteViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadViewTemplateByID reads a view template by Id

**Privileges:** ```STORAGE_DOMAIN_VIEW``` <br><br>Reads a view template based on given template id.
*/
func (a *Client) ReadViewTemplateByID(params *ReadViewTemplateByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadViewTemplateByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadViewTemplateByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadViewTemplateById",
		Method:             "GET",
		PathPattern:        "/file-services/view-template/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadViewTemplateByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadViewTemplateByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadViewTemplateByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	ReadViewTemplates lists view templates

	**Privileges:** ```STORAGE_DOMAIN_VIEW``` <br><br>All view templates on the Cohesity Cluster are returned.

Specifying parameters filters the results that are returned.
*/
func (a *Client) ReadViewTemplates(params *ReadViewTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReadViewTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadViewTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadViewTemplates",
		Method:             "GET",
		PathPattern:        "/file-services/view-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadViewTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadViewTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadViewTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateShare updates a share

**Privileges:** ```STORAGE_MODIFY``` <br><br>Update a Share.
*/
func (a *Client) UpdateShare(params *UpdateShareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateShareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateShareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateShare",
		Method:             "PUT",
		PathPattern:        "/file-services/shares/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateShareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateShareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateShareDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateView updates a view

```No Privileges Required``` <br><br>Updates a View based on given id.
*/
func (a *Client) UpdateView(params *UpdateViewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateView",
		Method:             "PUT",
		PathPattern:        "/file-services/views/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateViewDirectoryQuota updates directory quota for the view

**Privileges:** ```STORAGE_MODIFY``` <br><br>Update directory quota for the View.
*/
func (a *Client) UpdateViewDirectoryQuota(params *UpdateViewDirectoryQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewDirectoryQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewDirectoryQuotaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateViewDirectoryQuota",
		Method:             "PUT",
		PathPattern:        "/file-services/views/{id}/directory-quotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewDirectoryQuotaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewDirectoryQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewDirectoryQuotaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateViewTemplate updates a view template

**Privileges:** ```STORAGE_DOMAIN_MODIFY``` <br><br>Updates a View Template.
*/
func (a *Client) UpdateViewTemplate(params *UpdateViewTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateViewTemplate",
		Method:             "PUT",
		PathPattern:        "/file-services/view-template/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateViewUserQuotaOverride updates user quota override

**Privileges:** ```STORAGE_MODIFY``` <br><br>Update user quota. To use this API, User quota settings should be enabled on the View and there should be a user quota override added for this user.
*/
func (a *Client) UpdateViewUserQuotaOverride(params *UpdateViewUserQuotaOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewUserQuotaOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewUserQuotaOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateViewUserQuotaOverride",
		Method:             "PUT",
		PathPattern:        "/file-services/views/{viewId}/user-quotas/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewUserQuotaOverrideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewUserQuotaOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewUserQuotaOverrideDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateViewUserQuotaSettings updates view user quota settings

**Privileges:** ```STORAGE_MODIFY``` <br><br>Specifies parameters to update View user quota settings.
*/
func (a *Client) UpdateViewUserQuotaSettings(params *UpdateViewUserQuotaSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateViewUserQuotaSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewUserQuotaSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateViewUserQuotaSettings",
		Method:             "PUT",
		PathPattern:        "/file-services/views/{viewId}/user-quotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateViewUserQuotaSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewUserQuotaSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateViewUserQuotaSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
