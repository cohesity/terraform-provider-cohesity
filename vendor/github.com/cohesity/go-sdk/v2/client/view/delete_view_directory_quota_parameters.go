// Code generated by go-swagger; DO NOT EDIT.

package view

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteViewDirectoryQuotaParams creates a new DeleteViewDirectoryQuotaParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteViewDirectoryQuotaParams() *DeleteViewDirectoryQuotaParams {
	return &DeleteViewDirectoryQuotaParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteViewDirectoryQuotaParamsWithTimeout creates a new DeleteViewDirectoryQuotaParams object
// with the ability to set a timeout on a request.
func NewDeleteViewDirectoryQuotaParamsWithTimeout(timeout time.Duration) *DeleteViewDirectoryQuotaParams {
	return &DeleteViewDirectoryQuotaParams{
		timeout: timeout,
	}
}

// NewDeleteViewDirectoryQuotaParamsWithContext creates a new DeleteViewDirectoryQuotaParams object
// with the ability to set a context for a request.
func NewDeleteViewDirectoryQuotaParamsWithContext(ctx context.Context) *DeleteViewDirectoryQuotaParams {
	return &DeleteViewDirectoryQuotaParams{
		Context: ctx,
	}
}

// NewDeleteViewDirectoryQuotaParamsWithHTTPClient creates a new DeleteViewDirectoryQuotaParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteViewDirectoryQuotaParamsWithHTTPClient(client *http.Client) *DeleteViewDirectoryQuotaParams {
	return &DeleteViewDirectoryQuotaParams{
		HTTPClient: client,
	}
}

/*
DeleteViewDirectoryQuotaParams contains all the parameters to send to the API endpoint

	for the delete view directory quota operation.

	Typically these are written to a http.Request.
*/
type DeleteViewDirectoryQuotaParams struct {

	/* DeleteAllDirectoryQuotas.

	   Specifies whether to delete all directory quotas for this view. Exactly one of 'directoryPath' and 'deleteAllDirectoryQuotas' should be provided.
	*/
	DeleteAllDirectoryQuotas *bool

	/* DirectoryPath.

	   Specifies the directory path to delete. Exactly one of 'directoryPath' and 'deleteAllDirectoryQuotas' should be provided.
	*/
	DirectoryPath *string

	/* ID.

	   Specifies the View id.

	   Format: int64
	*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete view directory quota params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteViewDirectoryQuotaParams) WithDefaults() *DeleteViewDirectoryQuotaParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete view directory quota params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteViewDirectoryQuotaParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) WithTimeout(timeout time.Duration) *DeleteViewDirectoryQuotaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) WithContext(ctx context.Context) *DeleteViewDirectoryQuotaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) WithHTTPClient(client *http.Client) *DeleteViewDirectoryQuotaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeleteAllDirectoryQuotas adds the deleteAllDirectoryQuotas to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) WithDeleteAllDirectoryQuotas(deleteAllDirectoryQuotas *bool) *DeleteViewDirectoryQuotaParams {
	o.SetDeleteAllDirectoryQuotas(deleteAllDirectoryQuotas)
	return o
}

// SetDeleteAllDirectoryQuotas adds the deleteAllDirectoryQuotas to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) SetDeleteAllDirectoryQuotas(deleteAllDirectoryQuotas *bool) {
	o.DeleteAllDirectoryQuotas = deleteAllDirectoryQuotas
}

// WithDirectoryPath adds the directoryPath to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) WithDirectoryPath(directoryPath *string) *DeleteViewDirectoryQuotaParams {
	o.SetDirectoryPath(directoryPath)
	return o
}

// SetDirectoryPath adds the directoryPath to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) SetDirectoryPath(directoryPath *string) {
	o.DirectoryPath = directoryPath
}

// WithID adds the id to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) WithID(id int64) *DeleteViewDirectoryQuotaParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete view directory quota params
func (o *DeleteViewDirectoryQuotaParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteViewDirectoryQuotaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeleteAllDirectoryQuotas != nil {

		// query param deleteAllDirectoryQuotas
		var qrDeleteAllDirectoryQuotas bool

		if o.DeleteAllDirectoryQuotas != nil {
			qrDeleteAllDirectoryQuotas = *o.DeleteAllDirectoryQuotas
		}
		qDeleteAllDirectoryQuotas := swag.FormatBool(qrDeleteAllDirectoryQuotas)
		if qDeleteAllDirectoryQuotas != "" {

			if err := r.SetQueryParam("deleteAllDirectoryQuotas", qDeleteAllDirectoryQuotas); err != nil {
				return err
			}
		}
	}

	if o.DirectoryPath != nil {

		// query param directoryPath
		var qrDirectoryPath string

		if o.DirectoryPath != nil {
			qrDirectoryPath = *o.DirectoryPath
		}
		qDirectoryPath := qrDirectoryPath
		if qDirectoryPath != "" {

			if err := r.SetQueryParam("directoryPath", qDirectoryPath); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
