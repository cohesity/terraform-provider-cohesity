// Code generated by go-swagger; DO NOT EDIT.

package view

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewClientsParams creates a new GetViewClientsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewClientsParams() *GetViewClientsParams {
	return &GetViewClientsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewClientsParamsWithTimeout creates a new GetViewClientsParams object
// with the ability to set a timeout on a request.
func NewGetViewClientsParamsWithTimeout(timeout time.Duration) *GetViewClientsParams {
	return &GetViewClientsParams{
		timeout: timeout,
	}
}

// NewGetViewClientsParamsWithContext creates a new GetViewClientsParams object
// with the ability to set a context for a request.
func NewGetViewClientsParamsWithContext(ctx context.Context) *GetViewClientsParams {
	return &GetViewClientsParams{
		Context: ctx,
	}
}

// NewGetViewClientsParamsWithHTTPClient creates a new GetViewClientsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewClientsParamsWithHTTPClient(client *http.Client) *GetViewClientsParams {
	return &GetViewClientsParams{
		HTTPClient: client,
	}
}

/*
GetViewClientsParams contains all the parameters to send to the API endpoint

	for the get view clients operation.

	Typically these are written to a http.Request.
*/
type GetViewClientsParams struct {

	/* MaxCount.

	   Specifies the maximum number of connections to return for SMB and NFS protocols respectively.

	   Format: int32
	*/
	MaxCount *int32

	/* NodeIP.

	   Specifies a node ip. Only clients connected to this node will be returned.
	*/
	NodeIP *string

	/* Protocols.

	   Specifies a list of protocols to filter the clients.
	*/
	Protocols []string

	/* ViewIds.

	   Specifies a list of View ids. Only clients connected to these Views will be returned.
	*/
	ViewIds []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get view clients params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewClientsParams) WithDefaults() *GetViewClientsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get view clients params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewClientsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get view clients params
func (o *GetViewClientsParams) WithTimeout(timeout time.Duration) *GetViewClientsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get view clients params
func (o *GetViewClientsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get view clients params
func (o *GetViewClientsParams) WithContext(ctx context.Context) *GetViewClientsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get view clients params
func (o *GetViewClientsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get view clients params
func (o *GetViewClientsParams) WithHTTPClient(client *http.Client) *GetViewClientsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get view clients params
func (o *GetViewClientsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMaxCount adds the maxCount to the get view clients params
func (o *GetViewClientsParams) WithMaxCount(maxCount *int32) *GetViewClientsParams {
	o.SetMaxCount(maxCount)
	return o
}

// SetMaxCount adds the maxCount to the get view clients params
func (o *GetViewClientsParams) SetMaxCount(maxCount *int32) {
	o.MaxCount = maxCount
}

// WithNodeIP adds the nodeIP to the get view clients params
func (o *GetViewClientsParams) WithNodeIP(nodeIP *string) *GetViewClientsParams {
	o.SetNodeIP(nodeIP)
	return o
}

// SetNodeIP adds the nodeIp to the get view clients params
func (o *GetViewClientsParams) SetNodeIP(nodeIP *string) {
	o.NodeIP = nodeIP
}

// WithProtocols adds the protocols to the get view clients params
func (o *GetViewClientsParams) WithProtocols(protocols []string) *GetViewClientsParams {
	o.SetProtocols(protocols)
	return o
}

// SetProtocols adds the protocols to the get view clients params
func (o *GetViewClientsParams) SetProtocols(protocols []string) {
	o.Protocols = protocols
}

// WithViewIds adds the viewIds to the get view clients params
func (o *GetViewClientsParams) WithViewIds(viewIds []int64) *GetViewClientsParams {
	o.SetViewIds(viewIds)
	return o
}

// SetViewIds adds the viewIds to the get view clients params
func (o *GetViewClientsParams) SetViewIds(viewIds []int64) {
	o.ViewIds = viewIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewClientsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MaxCount != nil {

		// query param maxCount
		var qrMaxCount int32

		if o.MaxCount != nil {
			qrMaxCount = *o.MaxCount
		}
		qMaxCount := swag.FormatInt32(qrMaxCount)
		if qMaxCount != "" {

			if err := r.SetQueryParam("maxCount", qMaxCount); err != nil {
				return err
			}
		}
	}

	if o.NodeIP != nil {

		// query param nodeIp
		var qrNodeIP string

		if o.NodeIP != nil {
			qrNodeIP = *o.NodeIP
		}
		qNodeIP := qrNodeIP
		if qNodeIP != "" {

			if err := r.SetQueryParam("nodeIp", qNodeIP); err != nil {
				return err
			}
		}
	}

	if o.Protocols != nil {

		// binding items for protocols
		joinedProtocols := o.bindParamProtocols(reg)

		// query array param protocols
		if err := r.SetQueryParam("protocols", joinedProtocols...); err != nil {
			return err
		}
	}

	if o.ViewIds != nil {

		// binding items for viewIds
		joinedViewIds := o.bindParamViewIds(reg)

		// query array param viewIds
		if err := r.SetQueryParam("viewIds", joinedViewIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetViewClients binds the parameter protocols
func (o *GetViewClientsParams) bindParamProtocols(formats strfmt.Registry) []string {
	protocolsIR := o.Protocols

	var protocolsIC []string
	for _, protocolsIIR := range protocolsIR { // explode []string

		protocolsIIV := protocolsIIR // string as string
		protocolsIC = append(protocolsIC, protocolsIIV)
	}

	// items.CollectionFormat: ""
	protocolsIS := swag.JoinByFormat(protocolsIC, "")

	return protocolsIS
}

// bindParamGetViewClients binds the parameter viewIds
func (o *GetViewClientsParams) bindParamViewIds(formats strfmt.Registry) []string {
	viewIdsIR := o.ViewIds

	var viewIdsIC []string
	for _, viewIdsIIR := range viewIdsIR { // explode []int64

		viewIdsIIV := swag.FormatInt64(viewIdsIIR) // int64 as string
		viewIdsIC = append(viewIdsIC, viewIdsIIV)
	}

	// items.CollectionFormat: ""
	viewIdsIS := swag.JoinByFormat(viewIdsIC, "")

	return viewIdsIS
}
