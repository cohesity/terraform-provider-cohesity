// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cohesity/go-sdk/v2/models"
)

// UpdateAlertNotificationRuleReader is a Reader for the UpdateAlertNotificationRule structure.
type UpdateAlertNotificationRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAlertNotificationRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAlertNotificationRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateAlertNotificationRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateAlertNotificationRuleOK creates a UpdateAlertNotificationRuleOK with default headers values
func NewUpdateAlertNotificationRuleOK() *UpdateAlertNotificationRuleOK {
	return &UpdateAlertNotificationRuleOK{}
}

/*
UpdateAlertNotificationRuleOK describes a response with status code 200, with default header values.

Success
*/
type UpdateAlertNotificationRuleOK struct {
	Payload *models.NotificationRule
}

// IsSuccess returns true when this update alert notification rule o k response has a 2xx status code
func (o *UpdateAlertNotificationRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update alert notification rule o k response has a 3xx status code
func (o *UpdateAlertNotificationRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update alert notification rule o k response has a 4xx status code
func (o *UpdateAlertNotificationRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update alert notification rule o k response has a 5xx status code
func (o *UpdateAlertNotificationRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update alert notification rule o k response a status code equal to that given
func (o *UpdateAlertNotificationRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update alert notification rule o k response
func (o *UpdateAlertNotificationRuleOK) Code() int {
	return 200
}

func (o *UpdateAlertNotificationRuleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alerts/config/notification-rules/{id}][%d] updateAlertNotificationRuleOK %s", 200, payload)
}

func (o *UpdateAlertNotificationRuleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alerts/config/notification-rules/{id}][%d] updateAlertNotificationRuleOK %s", 200, payload)
}

func (o *UpdateAlertNotificationRuleOK) GetPayload() *models.NotificationRule {
	return o.Payload
}

func (o *UpdateAlertNotificationRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotificationRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotificationRuleDefault creates a UpdateAlertNotificationRuleDefault with default headers values
func NewUpdateAlertNotificationRuleDefault(code int) *UpdateAlertNotificationRuleDefault {
	return &UpdateAlertNotificationRuleDefault{
		_statusCode: code,
	}
}

/*
UpdateAlertNotificationRuleDefault describes a response with status code -1, with default header values.

Error
*/
type UpdateAlertNotificationRuleDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this update alert notification rule default response has a 2xx status code
func (o *UpdateAlertNotificationRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update alert notification rule default response has a 3xx status code
func (o *UpdateAlertNotificationRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update alert notification rule default response has a 4xx status code
func (o *UpdateAlertNotificationRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update alert notification rule default response has a 5xx status code
func (o *UpdateAlertNotificationRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update alert notification rule default response a status code equal to that given
func (o *UpdateAlertNotificationRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update alert notification rule default response
func (o *UpdateAlertNotificationRuleDefault) Code() int {
	return o._statusCode
}

func (o *UpdateAlertNotificationRuleDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alerts/config/notification-rules/{id}][%d] UpdateAlertNotificationRule default %s", o._statusCode, payload)
}

func (o *UpdateAlertNotificationRuleDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alerts/config/notification-rules/{id}][%d] UpdateAlertNotificationRule default %s", o._statusCode, payload)
}

func (o *UpdateAlertNotificationRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAlertNotificationRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
