// Code generated by go-swagger; DO NOT EDIT.

package protection_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProtectionGroupsParams creates a new GetProtectionGroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProtectionGroupsParams() *GetProtectionGroupsParams {
	return &GetProtectionGroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProtectionGroupsParamsWithTimeout creates a new GetProtectionGroupsParams object
// with the ability to set a timeout on a request.
func NewGetProtectionGroupsParamsWithTimeout(timeout time.Duration) *GetProtectionGroupsParams {
	return &GetProtectionGroupsParams{
		timeout: timeout,
	}
}

// NewGetProtectionGroupsParamsWithContext creates a new GetProtectionGroupsParams object
// with the ability to set a context for a request.
func NewGetProtectionGroupsParamsWithContext(ctx context.Context) *GetProtectionGroupsParams {
	return &GetProtectionGroupsParams{
		Context: ctx,
	}
}

// NewGetProtectionGroupsParamsWithHTTPClient creates a new GetProtectionGroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProtectionGroupsParamsWithHTTPClient(client *http.Client) *GetProtectionGroupsParams {
	return &GetProtectionGroupsParams{
		HTTPClient: client,
	}
}

/*
GetProtectionGroupsParams contains all the parameters to send to the API endpoint

	for the get protection groups operation.

	Typically these are written to a http.Request.
*/
type GetProtectionGroupsParams struct {

	/* Environments.

	   Filter by environment types such as 'kVMware', 'kView', etc. Only Protection Groups protecting the specified environment types are returned.
	*/
	Environments []string

	/* Ids.

	   Filter by a list of Protection Group ids.
	*/
	Ids []string

	/* IncludeGroupsWithDatalockOnly.

	   Whether to only return Protection Groups with a datalock.
	*/
	IncludeGroupsWithDatalockOnly *bool

	/* IncludeLastRunInfo.

	   If true, the response will include last run info. If it is false or not specified, the last run info won't be returned.
	*/
	IncludeLastRunInfo *bool

	/* IncludeTenants.

	   If true, the response will include Protection Groups which were created by all tenants which the current user has permission to see. If false, then only Protection Groups created by the current user will be returned.
	*/
	IncludeTenants *bool

	/* IsActive.

	   Filter by Inactive or Active Protection Groups. If not set, all Inactive and Active Protection Groups are returned. If true, only Active Protection Groups are returned. If false, only Inactive Protection Groups are returned. When you create a Protection Group on a Primary Cluster with a replication schedule, the Cluster creates an Inactive copy of the Protection Group on the Remote Cluster. In addition, when an Active and running Protection Group is deactivated, the Protection Group becomes Inactive.
	*/
	IsActive *bool

	/* IsDeleted.

	   If true, return only Protection Groups that have been deleted but still have Snapshots associated with them. If false, return all Protection Groups except those Protection Groups that have been deleted and still have Snapshots associated with them. A Protection Group that is deleted with all its Snapshots is not returned for either of these cases.
	*/
	IsDeleted *bool

	/* IsLastRunSLAViolated.

	   If true, return Protection Groups for which last run SLA was violated.
	*/
	IsLastRunSLAViolated *bool

	/* IsPaused.

	   Filter by paused or non paused Protection Groups, If not set, all paused and non paused Protection Groups are returned. If true, only paused Protection Groups are returned. If false, only non paused Protection Groups are returned.
	*/
	IsPaused *bool

	/* LastRunAnyStatus.

	   Filter by last any run status.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Paused' indicates that the ongoing run has been paused.<br> 'Skipped' indicates that the run was skipped.
	*/
	LastRunAnyStatus []string

	/* LastRunArchivalStatus.

	   Filter by last cloud archival run status.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Paused' indicates that the ongoing run has been paused.<br> 'Skipped' indicates that the run was skipped.
	*/
	LastRunArchivalStatus []string

	/* LastRunCloudSpinStatus.

	   Filter by last cloud spin run status.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Paused' indicates that the ongoing run has been paused.<br> 'Skipped' indicates that the run was skipped.
	*/
	LastRunCloudSpinStatus []string

	/* LastRunLocalBackupStatus.

	   Filter by last local backup run status.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Paused' indicates that the ongoing run has been paused.<br> 'Skipped' indicates that the run was skipped.
	*/
	LastRunLocalBackupStatus []string

	/* LastRunReplicationStatus.

	   Filter by last remote replication run status.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Paused' indicates that the ongoing run has been paused.<br> 'Skipped' indicates that the run was skipped.
	*/
	LastRunReplicationStatus []string

	/* MaxResultCount.

	   Identifies the max number of items to be returned. This is specifically to be used with pagination.

	   Format: int64
	*/
	MaxResultCount *int64

	/* Names.

	   Filter by a list of Protection Group names.
	*/
	Names []string

	// Office365Workloads.
	Office365Workloads []string

	/* PaginationCookie.

	   Specifies the cookie to fetch the set page of results
	*/
	PaginationCookie *string

	/* PolicyIds.

	   Filter by Policy ids that are associated with Protection Groups. Only Protection Groups associated with the specified Policy ids, are returned.
	*/
	PolicyIds []string

	/* PruneExcludedSourceIds.

	   If true, the response will not include the list of excluded source IDs in groups that contain this field. This can be set to true in order to improve performance if excluded source IDs are not needed by the user.
	*/
	PruneExcludedSourceIds *bool

	/* PruneSourceIds.

	   If true, the response will exclude the list of source IDs within the group specified.
	*/
	PruneSourceIds *bool

	/* RequestInitiatorType.

	   Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
	*/
	RequestInitiatorType *string

	/* SourceIds.

	   Filter by Source ids that are associated with Protection Groups. Only Protection Groups associated with the specified Source ids, are returned.
	*/
	SourceIds []int64

	/* StorageDomainID.

	   Filter by Storage Domain id. Only Protection Groups writing data to this Storage Domain will be returned.

	   Format: int64
	*/
	StorageDomainID *int64

	/* TenantIds.

	   TenantIds contains ids of the tenants for which objects are to be returned.
	*/
	TenantIds []string

	/* UseCachedData.

	   Specifies whether we can serve the GET request from the read replica cache. There is a lag of 15 seconds between the read replica and primary data source.
	*/
	UseCachedData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get protection groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionGroupsParams) WithDefaults() *GetProtectionGroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get protection groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionGroupsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get protection groups params
func (o *GetProtectionGroupsParams) WithTimeout(timeout time.Duration) *GetProtectionGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get protection groups params
func (o *GetProtectionGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get protection groups params
func (o *GetProtectionGroupsParams) WithContext(ctx context.Context) *GetProtectionGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get protection groups params
func (o *GetProtectionGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get protection groups params
func (o *GetProtectionGroupsParams) WithHTTPClient(client *http.Client) *GetProtectionGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get protection groups params
func (o *GetProtectionGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironments adds the environments to the get protection groups params
func (o *GetProtectionGroupsParams) WithEnvironments(environments []string) *GetProtectionGroupsParams {
	o.SetEnvironments(environments)
	return o
}

// SetEnvironments adds the environments to the get protection groups params
func (o *GetProtectionGroupsParams) SetEnvironments(environments []string) {
	o.Environments = environments
}

// WithIds adds the ids to the get protection groups params
func (o *GetProtectionGroupsParams) WithIds(ids []string) *GetProtectionGroupsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get protection groups params
func (o *GetProtectionGroupsParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithIncludeGroupsWithDatalockOnly adds the includeGroupsWithDatalockOnly to the get protection groups params
func (o *GetProtectionGroupsParams) WithIncludeGroupsWithDatalockOnly(includeGroupsWithDatalockOnly *bool) *GetProtectionGroupsParams {
	o.SetIncludeGroupsWithDatalockOnly(includeGroupsWithDatalockOnly)
	return o
}

// SetIncludeGroupsWithDatalockOnly adds the includeGroupsWithDatalockOnly to the get protection groups params
func (o *GetProtectionGroupsParams) SetIncludeGroupsWithDatalockOnly(includeGroupsWithDatalockOnly *bool) {
	o.IncludeGroupsWithDatalockOnly = includeGroupsWithDatalockOnly
}

// WithIncludeLastRunInfo adds the includeLastRunInfo to the get protection groups params
func (o *GetProtectionGroupsParams) WithIncludeLastRunInfo(includeLastRunInfo *bool) *GetProtectionGroupsParams {
	o.SetIncludeLastRunInfo(includeLastRunInfo)
	return o
}

// SetIncludeLastRunInfo adds the includeLastRunInfo to the get protection groups params
func (o *GetProtectionGroupsParams) SetIncludeLastRunInfo(includeLastRunInfo *bool) {
	o.IncludeLastRunInfo = includeLastRunInfo
}

// WithIncludeTenants adds the includeTenants to the get protection groups params
func (o *GetProtectionGroupsParams) WithIncludeTenants(includeTenants *bool) *GetProtectionGroupsParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the get protection groups params
func (o *GetProtectionGroupsParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithIsActive adds the isActive to the get protection groups params
func (o *GetProtectionGroupsParams) WithIsActive(isActive *bool) *GetProtectionGroupsParams {
	o.SetIsActive(isActive)
	return o
}

// SetIsActive adds the isActive to the get protection groups params
func (o *GetProtectionGroupsParams) SetIsActive(isActive *bool) {
	o.IsActive = isActive
}

// WithIsDeleted adds the isDeleted to the get protection groups params
func (o *GetProtectionGroupsParams) WithIsDeleted(isDeleted *bool) *GetProtectionGroupsParams {
	o.SetIsDeleted(isDeleted)
	return o
}

// SetIsDeleted adds the isDeleted to the get protection groups params
func (o *GetProtectionGroupsParams) SetIsDeleted(isDeleted *bool) {
	o.IsDeleted = isDeleted
}

// WithIsLastRunSLAViolated adds the isLastRunSLAViolated to the get protection groups params
func (o *GetProtectionGroupsParams) WithIsLastRunSLAViolated(isLastRunSLAViolated *bool) *GetProtectionGroupsParams {
	o.SetIsLastRunSLAViolated(isLastRunSLAViolated)
	return o
}

// SetIsLastRunSLAViolated adds the isLastRunSlaViolated to the get protection groups params
func (o *GetProtectionGroupsParams) SetIsLastRunSLAViolated(isLastRunSLAViolated *bool) {
	o.IsLastRunSLAViolated = isLastRunSLAViolated
}

// WithIsPaused adds the isPaused to the get protection groups params
func (o *GetProtectionGroupsParams) WithIsPaused(isPaused *bool) *GetProtectionGroupsParams {
	o.SetIsPaused(isPaused)
	return o
}

// SetIsPaused adds the isPaused to the get protection groups params
func (o *GetProtectionGroupsParams) SetIsPaused(isPaused *bool) {
	o.IsPaused = isPaused
}

// WithLastRunAnyStatus adds the lastRunAnyStatus to the get protection groups params
func (o *GetProtectionGroupsParams) WithLastRunAnyStatus(lastRunAnyStatus []string) *GetProtectionGroupsParams {
	o.SetLastRunAnyStatus(lastRunAnyStatus)
	return o
}

// SetLastRunAnyStatus adds the lastRunAnyStatus to the get protection groups params
func (o *GetProtectionGroupsParams) SetLastRunAnyStatus(lastRunAnyStatus []string) {
	o.LastRunAnyStatus = lastRunAnyStatus
}

// WithLastRunArchivalStatus adds the lastRunArchivalStatus to the get protection groups params
func (o *GetProtectionGroupsParams) WithLastRunArchivalStatus(lastRunArchivalStatus []string) *GetProtectionGroupsParams {
	o.SetLastRunArchivalStatus(lastRunArchivalStatus)
	return o
}

// SetLastRunArchivalStatus adds the lastRunArchivalStatus to the get protection groups params
func (o *GetProtectionGroupsParams) SetLastRunArchivalStatus(lastRunArchivalStatus []string) {
	o.LastRunArchivalStatus = lastRunArchivalStatus
}

// WithLastRunCloudSpinStatus adds the lastRunCloudSpinStatus to the get protection groups params
func (o *GetProtectionGroupsParams) WithLastRunCloudSpinStatus(lastRunCloudSpinStatus []string) *GetProtectionGroupsParams {
	o.SetLastRunCloudSpinStatus(lastRunCloudSpinStatus)
	return o
}

// SetLastRunCloudSpinStatus adds the lastRunCloudSpinStatus to the get protection groups params
func (o *GetProtectionGroupsParams) SetLastRunCloudSpinStatus(lastRunCloudSpinStatus []string) {
	o.LastRunCloudSpinStatus = lastRunCloudSpinStatus
}

// WithLastRunLocalBackupStatus adds the lastRunLocalBackupStatus to the get protection groups params
func (o *GetProtectionGroupsParams) WithLastRunLocalBackupStatus(lastRunLocalBackupStatus []string) *GetProtectionGroupsParams {
	o.SetLastRunLocalBackupStatus(lastRunLocalBackupStatus)
	return o
}

// SetLastRunLocalBackupStatus adds the lastRunLocalBackupStatus to the get protection groups params
func (o *GetProtectionGroupsParams) SetLastRunLocalBackupStatus(lastRunLocalBackupStatus []string) {
	o.LastRunLocalBackupStatus = lastRunLocalBackupStatus
}

// WithLastRunReplicationStatus adds the lastRunReplicationStatus to the get protection groups params
func (o *GetProtectionGroupsParams) WithLastRunReplicationStatus(lastRunReplicationStatus []string) *GetProtectionGroupsParams {
	o.SetLastRunReplicationStatus(lastRunReplicationStatus)
	return o
}

// SetLastRunReplicationStatus adds the lastRunReplicationStatus to the get protection groups params
func (o *GetProtectionGroupsParams) SetLastRunReplicationStatus(lastRunReplicationStatus []string) {
	o.LastRunReplicationStatus = lastRunReplicationStatus
}

// WithMaxResultCount adds the maxResultCount to the get protection groups params
func (o *GetProtectionGroupsParams) WithMaxResultCount(maxResultCount *int64) *GetProtectionGroupsParams {
	o.SetMaxResultCount(maxResultCount)
	return o
}

// SetMaxResultCount adds the maxResultCount to the get protection groups params
func (o *GetProtectionGroupsParams) SetMaxResultCount(maxResultCount *int64) {
	o.MaxResultCount = maxResultCount
}

// WithNames adds the names to the get protection groups params
func (o *GetProtectionGroupsParams) WithNames(names []string) *GetProtectionGroupsParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the get protection groups params
func (o *GetProtectionGroupsParams) SetNames(names []string) {
	o.Names = names
}

// WithOffice365Workloads adds the office365Workloads to the get protection groups params
func (o *GetProtectionGroupsParams) WithOffice365Workloads(office365Workloads []string) *GetProtectionGroupsParams {
	o.SetOffice365Workloads(office365Workloads)
	return o
}

// SetOffice365Workloads adds the office365Workloads to the get protection groups params
func (o *GetProtectionGroupsParams) SetOffice365Workloads(office365Workloads []string) {
	o.Office365Workloads = office365Workloads
}

// WithPaginationCookie adds the paginationCookie to the get protection groups params
func (o *GetProtectionGroupsParams) WithPaginationCookie(paginationCookie *string) *GetProtectionGroupsParams {
	o.SetPaginationCookie(paginationCookie)
	return o
}

// SetPaginationCookie adds the paginationCookie to the get protection groups params
func (o *GetProtectionGroupsParams) SetPaginationCookie(paginationCookie *string) {
	o.PaginationCookie = paginationCookie
}

// WithPolicyIds adds the policyIds to the get protection groups params
func (o *GetProtectionGroupsParams) WithPolicyIds(policyIds []string) *GetProtectionGroupsParams {
	o.SetPolicyIds(policyIds)
	return o
}

// SetPolicyIds adds the policyIds to the get protection groups params
func (o *GetProtectionGroupsParams) SetPolicyIds(policyIds []string) {
	o.PolicyIds = policyIds
}

// WithPruneExcludedSourceIds adds the pruneExcludedSourceIds to the get protection groups params
func (o *GetProtectionGroupsParams) WithPruneExcludedSourceIds(pruneExcludedSourceIds *bool) *GetProtectionGroupsParams {
	o.SetPruneExcludedSourceIds(pruneExcludedSourceIds)
	return o
}

// SetPruneExcludedSourceIds adds the pruneExcludedSourceIds to the get protection groups params
func (o *GetProtectionGroupsParams) SetPruneExcludedSourceIds(pruneExcludedSourceIds *bool) {
	o.PruneExcludedSourceIds = pruneExcludedSourceIds
}

// WithPruneSourceIds adds the pruneSourceIds to the get protection groups params
func (o *GetProtectionGroupsParams) WithPruneSourceIds(pruneSourceIds *bool) *GetProtectionGroupsParams {
	o.SetPruneSourceIds(pruneSourceIds)
	return o
}

// SetPruneSourceIds adds the pruneSourceIds to the get protection groups params
func (o *GetProtectionGroupsParams) SetPruneSourceIds(pruneSourceIds *bool) {
	o.PruneSourceIds = pruneSourceIds
}

// WithRequestInitiatorType adds the requestInitiatorType to the get protection groups params
func (o *GetProtectionGroupsParams) WithRequestInitiatorType(requestInitiatorType *string) *GetProtectionGroupsParams {
	o.SetRequestInitiatorType(requestInitiatorType)
	return o
}

// SetRequestInitiatorType adds the requestInitiatorType to the get protection groups params
func (o *GetProtectionGroupsParams) SetRequestInitiatorType(requestInitiatorType *string) {
	o.RequestInitiatorType = requestInitiatorType
}

// WithSourceIds adds the sourceIds to the get protection groups params
func (o *GetProtectionGroupsParams) WithSourceIds(sourceIds []int64) *GetProtectionGroupsParams {
	o.SetSourceIds(sourceIds)
	return o
}

// SetSourceIds adds the sourceIds to the get protection groups params
func (o *GetProtectionGroupsParams) SetSourceIds(sourceIds []int64) {
	o.SourceIds = sourceIds
}

// WithStorageDomainID adds the storageDomainID to the get protection groups params
func (o *GetProtectionGroupsParams) WithStorageDomainID(storageDomainID *int64) *GetProtectionGroupsParams {
	o.SetStorageDomainID(storageDomainID)
	return o
}

// SetStorageDomainID adds the storageDomainId to the get protection groups params
func (o *GetProtectionGroupsParams) SetStorageDomainID(storageDomainID *int64) {
	o.StorageDomainID = storageDomainID
}

// WithTenantIds adds the tenantIds to the get protection groups params
func (o *GetProtectionGroupsParams) WithTenantIds(tenantIds []string) *GetProtectionGroupsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get protection groups params
func (o *GetProtectionGroupsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithUseCachedData adds the useCachedData to the get protection groups params
func (o *GetProtectionGroupsParams) WithUseCachedData(useCachedData *bool) *GetProtectionGroupsParams {
	o.SetUseCachedData(useCachedData)
	return o
}

// SetUseCachedData adds the useCachedData to the get protection groups params
func (o *GetProtectionGroupsParams) SetUseCachedData(useCachedData *bool) {
	o.UseCachedData = useCachedData
}

// WriteToRequest writes these params to a swagger request
func (o *GetProtectionGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Environments != nil {

		// binding items for environments
		joinedEnvironments := o.bindParamEnvironments(reg)

		// query array param environments
		if err := r.SetQueryParam("environments", joinedEnvironments...); err != nil {
			return err
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IncludeGroupsWithDatalockOnly != nil {

		// query param includeGroupsWithDatalockOnly
		var qrIncludeGroupsWithDatalockOnly bool

		if o.IncludeGroupsWithDatalockOnly != nil {
			qrIncludeGroupsWithDatalockOnly = *o.IncludeGroupsWithDatalockOnly
		}
		qIncludeGroupsWithDatalockOnly := swag.FormatBool(qrIncludeGroupsWithDatalockOnly)
		if qIncludeGroupsWithDatalockOnly != "" {

			if err := r.SetQueryParam("includeGroupsWithDatalockOnly", qIncludeGroupsWithDatalockOnly); err != nil {
				return err
			}
		}
	}

	if o.IncludeLastRunInfo != nil {

		// query param includeLastRunInfo
		var qrIncludeLastRunInfo bool

		if o.IncludeLastRunInfo != nil {
			qrIncludeLastRunInfo = *o.IncludeLastRunInfo
		}
		qIncludeLastRunInfo := swag.FormatBool(qrIncludeLastRunInfo)
		if qIncludeLastRunInfo != "" {

			if err := r.SetQueryParam("includeLastRunInfo", qIncludeLastRunInfo); err != nil {
				return err
			}
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.IsActive != nil {

		// query param isActive
		var qrIsActive bool

		if o.IsActive != nil {
			qrIsActive = *o.IsActive
		}
		qIsActive := swag.FormatBool(qrIsActive)
		if qIsActive != "" {

			if err := r.SetQueryParam("isActive", qIsActive); err != nil {
				return err
			}
		}
	}

	if o.IsDeleted != nil {

		// query param isDeleted
		var qrIsDeleted bool

		if o.IsDeleted != nil {
			qrIsDeleted = *o.IsDeleted
		}
		qIsDeleted := swag.FormatBool(qrIsDeleted)
		if qIsDeleted != "" {

			if err := r.SetQueryParam("isDeleted", qIsDeleted); err != nil {
				return err
			}
		}
	}

	if o.IsLastRunSLAViolated != nil {

		// query param isLastRunSlaViolated
		var qrIsLastRunSLAViolated bool

		if o.IsLastRunSLAViolated != nil {
			qrIsLastRunSLAViolated = *o.IsLastRunSLAViolated
		}
		qIsLastRunSLAViolated := swag.FormatBool(qrIsLastRunSLAViolated)
		if qIsLastRunSLAViolated != "" {

			if err := r.SetQueryParam("isLastRunSlaViolated", qIsLastRunSLAViolated); err != nil {
				return err
			}
		}
	}

	if o.IsPaused != nil {

		// query param isPaused
		var qrIsPaused bool

		if o.IsPaused != nil {
			qrIsPaused = *o.IsPaused
		}
		qIsPaused := swag.FormatBool(qrIsPaused)
		if qIsPaused != "" {

			if err := r.SetQueryParam("isPaused", qIsPaused); err != nil {
				return err
			}
		}
	}

	if o.LastRunAnyStatus != nil {

		// binding items for lastRunAnyStatus
		joinedLastRunAnyStatus := o.bindParamLastRunAnyStatus(reg)

		// query array param lastRunAnyStatus
		if err := r.SetQueryParam("lastRunAnyStatus", joinedLastRunAnyStatus...); err != nil {
			return err
		}
	}

	if o.LastRunArchivalStatus != nil {

		// binding items for lastRunArchivalStatus
		joinedLastRunArchivalStatus := o.bindParamLastRunArchivalStatus(reg)

		// query array param lastRunArchivalStatus
		if err := r.SetQueryParam("lastRunArchivalStatus", joinedLastRunArchivalStatus...); err != nil {
			return err
		}
	}

	if o.LastRunCloudSpinStatus != nil {

		// binding items for lastRunCloudSpinStatus
		joinedLastRunCloudSpinStatus := o.bindParamLastRunCloudSpinStatus(reg)

		// query array param lastRunCloudSpinStatus
		if err := r.SetQueryParam("lastRunCloudSpinStatus", joinedLastRunCloudSpinStatus...); err != nil {
			return err
		}
	}

	if o.LastRunLocalBackupStatus != nil {

		// binding items for lastRunLocalBackupStatus
		joinedLastRunLocalBackupStatus := o.bindParamLastRunLocalBackupStatus(reg)

		// query array param lastRunLocalBackupStatus
		if err := r.SetQueryParam("lastRunLocalBackupStatus", joinedLastRunLocalBackupStatus...); err != nil {
			return err
		}
	}

	if o.LastRunReplicationStatus != nil {

		// binding items for lastRunReplicationStatus
		joinedLastRunReplicationStatus := o.bindParamLastRunReplicationStatus(reg)

		// query array param lastRunReplicationStatus
		if err := r.SetQueryParam("lastRunReplicationStatus", joinedLastRunReplicationStatus...); err != nil {
			return err
		}
	}

	if o.MaxResultCount != nil {

		// query param maxResultCount
		var qrMaxResultCount int64

		if o.MaxResultCount != nil {
			qrMaxResultCount = *o.MaxResultCount
		}
		qMaxResultCount := swag.FormatInt64(qrMaxResultCount)
		if qMaxResultCount != "" {

			if err := r.SetQueryParam("maxResultCount", qMaxResultCount); err != nil {
				return err
			}
		}
	}

	if o.Names != nil {

		// binding items for names
		joinedNames := o.bindParamNames(reg)

		// query array param names
		if err := r.SetQueryParam("names", joinedNames...); err != nil {
			return err
		}
	}

	if o.Office365Workloads != nil {

		// binding items for office365Workloads
		joinedOffice365Workloads := o.bindParamOffice365Workloads(reg)

		// query array param office365Workloads
		if err := r.SetQueryParam("office365Workloads", joinedOffice365Workloads...); err != nil {
			return err
		}
	}

	if o.PaginationCookie != nil {

		// query param paginationCookie
		var qrPaginationCookie string

		if o.PaginationCookie != nil {
			qrPaginationCookie = *o.PaginationCookie
		}
		qPaginationCookie := qrPaginationCookie
		if qPaginationCookie != "" {

			if err := r.SetQueryParam("paginationCookie", qPaginationCookie); err != nil {
				return err
			}
		}
	}

	if o.PolicyIds != nil {

		// binding items for policyIds
		joinedPolicyIds := o.bindParamPolicyIds(reg)

		// query array param policyIds
		if err := r.SetQueryParam("policyIds", joinedPolicyIds...); err != nil {
			return err
		}
	}

	if o.PruneExcludedSourceIds != nil {

		// query param pruneExcludedSourceIds
		var qrPruneExcludedSourceIds bool

		if o.PruneExcludedSourceIds != nil {
			qrPruneExcludedSourceIds = *o.PruneExcludedSourceIds
		}
		qPruneExcludedSourceIds := swag.FormatBool(qrPruneExcludedSourceIds)
		if qPruneExcludedSourceIds != "" {

			if err := r.SetQueryParam("pruneExcludedSourceIds", qPruneExcludedSourceIds); err != nil {
				return err
			}
		}
	}

	if o.PruneSourceIds != nil {

		// query param pruneSourceIds
		var qrPruneSourceIds bool

		if o.PruneSourceIds != nil {
			qrPruneSourceIds = *o.PruneSourceIds
		}
		qPruneSourceIds := swag.FormatBool(qrPruneSourceIds)
		if qPruneSourceIds != "" {

			if err := r.SetQueryParam("pruneSourceIds", qPruneSourceIds); err != nil {
				return err
			}
		}
	}

	if o.RequestInitiatorType != nil {

		// header param requestInitiatorType
		if err := r.SetHeaderParam("requestInitiatorType", *o.RequestInitiatorType); err != nil {
			return err
		}
	}

	if o.SourceIds != nil {

		// binding items for sourceIds
		joinedSourceIds := o.bindParamSourceIds(reg)

		// query array param sourceIds
		if err := r.SetQueryParam("sourceIds", joinedSourceIds...); err != nil {
			return err
		}
	}

	if o.StorageDomainID != nil {

		// query param storageDomainId
		var qrStorageDomainID int64

		if o.StorageDomainID != nil {
			qrStorageDomainID = *o.StorageDomainID
		}
		qStorageDomainID := swag.FormatInt64(qrStorageDomainID)
		if qStorageDomainID != "" {

			if err := r.SetQueryParam("storageDomainId", qStorageDomainID); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.UseCachedData != nil {

		// query param useCachedData
		var qrUseCachedData bool

		if o.UseCachedData != nil {
			qrUseCachedData = *o.UseCachedData
		}
		qUseCachedData := swag.FormatBool(qrUseCachedData)
		if qUseCachedData != "" {

			if err := r.SetQueryParam("useCachedData", qUseCachedData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetProtectionGroups binds the parameter environments
func (o *GetProtectionGroupsParams) bindParamEnvironments(formats strfmt.Registry) []string {
	environmentsIR := o.Environments

	var environmentsIC []string
	for _, environmentsIIR := range environmentsIR { // explode []string

		environmentsIIV := environmentsIIR // string as string
		environmentsIC = append(environmentsIC, environmentsIIV)
	}

	// items.CollectionFormat: ""
	environmentsIS := swag.JoinByFormat(environmentsIC, "")

	return environmentsIS
}

// bindParamGetProtectionGroups binds the parameter ids
func (o *GetProtectionGroupsParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetProtectionGroups binds the parameter lastRunAnyStatus
func (o *GetProtectionGroupsParams) bindParamLastRunAnyStatus(formats strfmt.Registry) []string {
	lastRunAnyStatusIR := o.LastRunAnyStatus

	var lastRunAnyStatusIC []string
	for _, lastRunAnyStatusIIR := range lastRunAnyStatusIR { // explode []string

		lastRunAnyStatusIIV := lastRunAnyStatusIIR // string as string
		lastRunAnyStatusIC = append(lastRunAnyStatusIC, lastRunAnyStatusIIV)
	}

	// items.CollectionFormat: ""
	lastRunAnyStatusIS := swag.JoinByFormat(lastRunAnyStatusIC, "")

	return lastRunAnyStatusIS
}

// bindParamGetProtectionGroups binds the parameter lastRunArchivalStatus
func (o *GetProtectionGroupsParams) bindParamLastRunArchivalStatus(formats strfmt.Registry) []string {
	lastRunArchivalStatusIR := o.LastRunArchivalStatus

	var lastRunArchivalStatusIC []string
	for _, lastRunArchivalStatusIIR := range lastRunArchivalStatusIR { // explode []string

		lastRunArchivalStatusIIV := lastRunArchivalStatusIIR // string as string
		lastRunArchivalStatusIC = append(lastRunArchivalStatusIC, lastRunArchivalStatusIIV)
	}

	// items.CollectionFormat: ""
	lastRunArchivalStatusIS := swag.JoinByFormat(lastRunArchivalStatusIC, "")

	return lastRunArchivalStatusIS
}

// bindParamGetProtectionGroups binds the parameter lastRunCloudSpinStatus
func (o *GetProtectionGroupsParams) bindParamLastRunCloudSpinStatus(formats strfmt.Registry) []string {
	lastRunCloudSpinStatusIR := o.LastRunCloudSpinStatus

	var lastRunCloudSpinStatusIC []string
	for _, lastRunCloudSpinStatusIIR := range lastRunCloudSpinStatusIR { // explode []string

		lastRunCloudSpinStatusIIV := lastRunCloudSpinStatusIIR // string as string
		lastRunCloudSpinStatusIC = append(lastRunCloudSpinStatusIC, lastRunCloudSpinStatusIIV)
	}

	// items.CollectionFormat: ""
	lastRunCloudSpinStatusIS := swag.JoinByFormat(lastRunCloudSpinStatusIC, "")

	return lastRunCloudSpinStatusIS
}

// bindParamGetProtectionGroups binds the parameter lastRunLocalBackupStatus
func (o *GetProtectionGroupsParams) bindParamLastRunLocalBackupStatus(formats strfmt.Registry) []string {
	lastRunLocalBackupStatusIR := o.LastRunLocalBackupStatus

	var lastRunLocalBackupStatusIC []string
	for _, lastRunLocalBackupStatusIIR := range lastRunLocalBackupStatusIR { // explode []string

		lastRunLocalBackupStatusIIV := lastRunLocalBackupStatusIIR // string as string
		lastRunLocalBackupStatusIC = append(lastRunLocalBackupStatusIC, lastRunLocalBackupStatusIIV)
	}

	// items.CollectionFormat: ""
	lastRunLocalBackupStatusIS := swag.JoinByFormat(lastRunLocalBackupStatusIC, "")

	return lastRunLocalBackupStatusIS
}

// bindParamGetProtectionGroups binds the parameter lastRunReplicationStatus
func (o *GetProtectionGroupsParams) bindParamLastRunReplicationStatus(formats strfmt.Registry) []string {
	lastRunReplicationStatusIR := o.LastRunReplicationStatus

	var lastRunReplicationStatusIC []string
	for _, lastRunReplicationStatusIIR := range lastRunReplicationStatusIR { // explode []string

		lastRunReplicationStatusIIV := lastRunReplicationStatusIIR // string as string
		lastRunReplicationStatusIC = append(lastRunReplicationStatusIC, lastRunReplicationStatusIIV)
	}

	// items.CollectionFormat: ""
	lastRunReplicationStatusIS := swag.JoinByFormat(lastRunReplicationStatusIC, "")

	return lastRunReplicationStatusIS
}

// bindParamGetProtectionGroups binds the parameter names
func (o *GetProtectionGroupsParams) bindParamNames(formats strfmt.Registry) []string {
	namesIR := o.Names

	var namesIC []string
	for _, namesIIR := range namesIR { // explode []string

		namesIIV := namesIIR // string as string
		namesIC = append(namesIC, namesIIV)
	}

	// items.CollectionFormat: ""
	namesIS := swag.JoinByFormat(namesIC, "")

	return namesIS
}

// bindParamGetProtectionGroups binds the parameter office365Workloads
func (o *GetProtectionGroupsParams) bindParamOffice365Workloads(formats strfmt.Registry) []string {
	office365WorkloadsIR := o.Office365Workloads

	var office365WorkloadsIC []string
	for _, office365WorkloadsIIR := range office365WorkloadsIR { // explode []string

		office365WorkloadsIIV := office365WorkloadsIIR // string as string
		office365WorkloadsIC = append(office365WorkloadsIC, office365WorkloadsIIV)
	}

	// items.CollectionFormat: ""
	office365WorkloadsIS := swag.JoinByFormat(office365WorkloadsIC, "")

	return office365WorkloadsIS
}

// bindParamGetProtectionGroups binds the parameter policyIds
func (o *GetProtectionGroupsParams) bindParamPolicyIds(formats strfmt.Registry) []string {
	policyIdsIR := o.PolicyIds

	var policyIdsIC []string
	for _, policyIdsIIR := range policyIdsIR { // explode []string

		policyIdsIIV := policyIdsIIR // string as string
		policyIdsIC = append(policyIdsIC, policyIdsIIV)
	}

	// items.CollectionFormat: ""
	policyIdsIS := swag.JoinByFormat(policyIdsIC, "")

	return policyIdsIS
}

// bindParamGetProtectionGroups binds the parameter sourceIds
func (o *GetProtectionGroupsParams) bindParamSourceIds(formats strfmt.Registry) []string {
	sourceIdsIR := o.SourceIds

	var sourceIdsIC []string
	for _, sourceIdsIIR := range sourceIdsIR { // explode []int64

		sourceIdsIIV := swag.FormatInt64(sourceIdsIIR) // int64 as string
		sourceIdsIC = append(sourceIdsIC, sourceIdsIIV)
	}

	// items.CollectionFormat: ""
	sourceIdsIS := swag.JoinByFormat(sourceIdsIC, "")

	return sourceIdsIS
}

// bindParamGetProtectionGroups binds the parameter tenantIds
func (o *GetProtectionGroupsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
