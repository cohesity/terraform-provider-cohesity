// Code generated by go-swagger; DO NOT EDIT.

package protection_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProtectionGroupRunParams creates a new GetProtectionGroupRunParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProtectionGroupRunParams() *GetProtectionGroupRunParams {
	return &GetProtectionGroupRunParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProtectionGroupRunParamsWithTimeout creates a new GetProtectionGroupRunParams object
// with the ability to set a timeout on a request.
func NewGetProtectionGroupRunParamsWithTimeout(timeout time.Duration) *GetProtectionGroupRunParams {
	return &GetProtectionGroupRunParams{
		timeout: timeout,
	}
}

// NewGetProtectionGroupRunParamsWithContext creates a new GetProtectionGroupRunParams object
// with the ability to set a context for a request.
func NewGetProtectionGroupRunParamsWithContext(ctx context.Context) *GetProtectionGroupRunParams {
	return &GetProtectionGroupRunParams{
		Context: ctx,
	}
}

// NewGetProtectionGroupRunParamsWithHTTPClient creates a new GetProtectionGroupRunParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProtectionGroupRunParamsWithHTTPClient(client *http.Client) *GetProtectionGroupRunParams {
	return &GetProtectionGroupRunParams{
		HTTPClient: client,
	}
}

/*
GetProtectionGroupRunParams contains all the parameters to send to the API endpoint

	for the get protection group run operation.

	Typically these are written to a http.Request.
*/
type GetProtectionGroupRunParams struct {

	/* ID.

	   Specifies a unique id of the Protection Group.
	*/
	ID string

	/* IncludeObjectDetails.

	   Specifies if the result includes the object details for a protection run. If set to true, details of the protected object will be returned. If set to false or not specified, details will not be returned.
	*/
	IncludeObjectDetails *bool

	/* IncludeTenants.

	   If true, the response will include Protection Group Runs which were created by all tenants which the current user has permission to see. If false, then only Protection Groups created by the current user will be returned. If it's not specified, it is true by default.
	*/
	IncludeTenants *bool

	/* RequestInitiatorType.

	   Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
	*/
	RequestInitiatorType *string

	/* RunID.

	   Specifies a unique run id of the Protection Group run.
	*/
	RunID string

	/* TenantIds.

	   TenantIds contains ids of the tenants for which the run is to be returned.
	*/
	TenantIds []string

	/* UseCachedData.

	   Specifies whether we can serve the GET request from the read replica cache. There is a lag of 15 seconds between the read replica and primary data source.
	*/
	UseCachedData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get protection group run params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionGroupRunParams) WithDefaults() *GetProtectionGroupRunParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get protection group run params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionGroupRunParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get protection group run params
func (o *GetProtectionGroupRunParams) WithTimeout(timeout time.Duration) *GetProtectionGroupRunParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get protection group run params
func (o *GetProtectionGroupRunParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get protection group run params
func (o *GetProtectionGroupRunParams) WithContext(ctx context.Context) *GetProtectionGroupRunParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get protection group run params
func (o *GetProtectionGroupRunParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get protection group run params
func (o *GetProtectionGroupRunParams) WithHTTPClient(client *http.Client) *GetProtectionGroupRunParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get protection group run params
func (o *GetProtectionGroupRunParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get protection group run params
func (o *GetProtectionGroupRunParams) WithID(id string) *GetProtectionGroupRunParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get protection group run params
func (o *GetProtectionGroupRunParams) SetID(id string) {
	o.ID = id
}

// WithIncludeObjectDetails adds the includeObjectDetails to the get protection group run params
func (o *GetProtectionGroupRunParams) WithIncludeObjectDetails(includeObjectDetails *bool) *GetProtectionGroupRunParams {
	o.SetIncludeObjectDetails(includeObjectDetails)
	return o
}

// SetIncludeObjectDetails adds the includeObjectDetails to the get protection group run params
func (o *GetProtectionGroupRunParams) SetIncludeObjectDetails(includeObjectDetails *bool) {
	o.IncludeObjectDetails = includeObjectDetails
}

// WithIncludeTenants adds the includeTenants to the get protection group run params
func (o *GetProtectionGroupRunParams) WithIncludeTenants(includeTenants *bool) *GetProtectionGroupRunParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the get protection group run params
func (o *GetProtectionGroupRunParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithRequestInitiatorType adds the requestInitiatorType to the get protection group run params
func (o *GetProtectionGroupRunParams) WithRequestInitiatorType(requestInitiatorType *string) *GetProtectionGroupRunParams {
	o.SetRequestInitiatorType(requestInitiatorType)
	return o
}

// SetRequestInitiatorType adds the requestInitiatorType to the get protection group run params
func (o *GetProtectionGroupRunParams) SetRequestInitiatorType(requestInitiatorType *string) {
	o.RequestInitiatorType = requestInitiatorType
}

// WithRunID adds the runID to the get protection group run params
func (o *GetProtectionGroupRunParams) WithRunID(runID string) *GetProtectionGroupRunParams {
	o.SetRunID(runID)
	return o
}

// SetRunID adds the runId to the get protection group run params
func (o *GetProtectionGroupRunParams) SetRunID(runID string) {
	o.RunID = runID
}

// WithTenantIds adds the tenantIds to the get protection group run params
func (o *GetProtectionGroupRunParams) WithTenantIds(tenantIds []string) *GetProtectionGroupRunParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get protection group run params
func (o *GetProtectionGroupRunParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithUseCachedData adds the useCachedData to the get protection group run params
func (o *GetProtectionGroupRunParams) WithUseCachedData(useCachedData *bool) *GetProtectionGroupRunParams {
	o.SetUseCachedData(useCachedData)
	return o
}

// SetUseCachedData adds the useCachedData to the get protection group run params
func (o *GetProtectionGroupRunParams) SetUseCachedData(useCachedData *bool) {
	o.UseCachedData = useCachedData
}

// WriteToRequest writes these params to a swagger request
func (o *GetProtectionGroupRunParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IncludeObjectDetails != nil {

		// query param includeObjectDetails
		var qrIncludeObjectDetails bool

		if o.IncludeObjectDetails != nil {
			qrIncludeObjectDetails = *o.IncludeObjectDetails
		}
		qIncludeObjectDetails := swag.FormatBool(qrIncludeObjectDetails)
		if qIncludeObjectDetails != "" {

			if err := r.SetQueryParam("includeObjectDetails", qIncludeObjectDetails); err != nil {
				return err
			}
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.RequestInitiatorType != nil {

		// header param requestInitiatorType
		if err := r.SetHeaderParam("requestInitiatorType", *o.RequestInitiatorType); err != nil {
			return err
		}
	}

	// path param runId
	if err := r.SetPathParam("runId", o.RunID); err != nil {
		return err
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.UseCachedData != nil {

		// query param useCachedData
		var qrUseCachedData bool

		if o.UseCachedData != nil {
			qrUseCachedData = *o.UseCachedData
		}
		qUseCachedData := swag.FormatBool(qrUseCachedData)
		if qUseCachedData != "" {

			if err := r.SetQueryParam("useCachedData", qUseCachedData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetProtectionGroupRun binds the parameter tenantIds
func (o *GetProtectionGroupRunParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
