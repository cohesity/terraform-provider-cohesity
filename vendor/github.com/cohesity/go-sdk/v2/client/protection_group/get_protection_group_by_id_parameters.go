// Code generated by go-swagger; DO NOT EDIT.

package protection_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProtectionGroupByIDParams creates a new GetProtectionGroupByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProtectionGroupByIDParams() *GetProtectionGroupByIDParams {
	return &GetProtectionGroupByIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProtectionGroupByIDParamsWithTimeout creates a new GetProtectionGroupByIDParams object
// with the ability to set a timeout on a request.
func NewGetProtectionGroupByIDParamsWithTimeout(timeout time.Duration) *GetProtectionGroupByIDParams {
	return &GetProtectionGroupByIDParams{
		timeout: timeout,
	}
}

// NewGetProtectionGroupByIDParamsWithContext creates a new GetProtectionGroupByIDParams object
// with the ability to set a context for a request.
func NewGetProtectionGroupByIDParamsWithContext(ctx context.Context) *GetProtectionGroupByIDParams {
	return &GetProtectionGroupByIDParams{
		Context: ctx,
	}
}

// NewGetProtectionGroupByIDParamsWithHTTPClient creates a new GetProtectionGroupByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProtectionGroupByIDParamsWithHTTPClient(client *http.Client) *GetProtectionGroupByIDParams {
	return &GetProtectionGroupByIDParams{
		HTTPClient: client,
	}
}

/*
GetProtectionGroupByIDParams contains all the parameters to send to the API endpoint

	for the get protection group by Id operation.

	Typically these are written to a http.Request.
*/
type GetProtectionGroupByIDParams struct {

	/* ID.

	   Specifies a unique id of the Protection Group.
	*/
	ID string

	/* IncludeLastRunInfo.

	   If true, the response will include last run info. If it is false or not specified, the last run info won't be returned.
	*/
	IncludeLastRunInfo *bool

	/* PruneExcludedSourceIds.

	   If true, the response will not include the list of excluded source IDs in groups that contain this field. This can be set to true in order to improve performance if excluded source IDs are not needed by the user.
	*/
	PruneExcludedSourceIds *bool

	/* PruneSourceIds.

	   If true, the response will exclude the list of source IDs within the group specified.
	*/
	PruneSourceIds *bool

	/* RequestInitiatorType.

	   Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
	*/
	RequestInitiatorType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get protection group by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionGroupByIDParams) WithDefaults() *GetProtectionGroupByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get protection group by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionGroupByIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) WithTimeout(timeout time.Duration) *GetProtectionGroupByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) WithContext(ctx context.Context) *GetProtectionGroupByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) WithHTTPClient(client *http.Client) *GetProtectionGroupByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) WithID(id string) *GetProtectionGroupByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) SetID(id string) {
	o.ID = id
}

// WithIncludeLastRunInfo adds the includeLastRunInfo to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) WithIncludeLastRunInfo(includeLastRunInfo *bool) *GetProtectionGroupByIDParams {
	o.SetIncludeLastRunInfo(includeLastRunInfo)
	return o
}

// SetIncludeLastRunInfo adds the includeLastRunInfo to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) SetIncludeLastRunInfo(includeLastRunInfo *bool) {
	o.IncludeLastRunInfo = includeLastRunInfo
}

// WithPruneExcludedSourceIds adds the pruneExcludedSourceIds to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) WithPruneExcludedSourceIds(pruneExcludedSourceIds *bool) *GetProtectionGroupByIDParams {
	o.SetPruneExcludedSourceIds(pruneExcludedSourceIds)
	return o
}

// SetPruneExcludedSourceIds adds the pruneExcludedSourceIds to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) SetPruneExcludedSourceIds(pruneExcludedSourceIds *bool) {
	o.PruneExcludedSourceIds = pruneExcludedSourceIds
}

// WithPruneSourceIds adds the pruneSourceIds to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) WithPruneSourceIds(pruneSourceIds *bool) *GetProtectionGroupByIDParams {
	o.SetPruneSourceIds(pruneSourceIds)
	return o
}

// SetPruneSourceIds adds the pruneSourceIds to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) SetPruneSourceIds(pruneSourceIds *bool) {
	o.PruneSourceIds = pruneSourceIds
}

// WithRequestInitiatorType adds the requestInitiatorType to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) WithRequestInitiatorType(requestInitiatorType *string) *GetProtectionGroupByIDParams {
	o.SetRequestInitiatorType(requestInitiatorType)
	return o
}

// SetRequestInitiatorType adds the requestInitiatorType to the get protection group by Id params
func (o *GetProtectionGroupByIDParams) SetRequestInitiatorType(requestInitiatorType *string) {
	o.RequestInitiatorType = requestInitiatorType
}

// WriteToRequest writes these params to a swagger request
func (o *GetProtectionGroupByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IncludeLastRunInfo != nil {

		// query param includeLastRunInfo
		var qrIncludeLastRunInfo bool

		if o.IncludeLastRunInfo != nil {
			qrIncludeLastRunInfo = *o.IncludeLastRunInfo
		}
		qIncludeLastRunInfo := swag.FormatBool(qrIncludeLastRunInfo)
		if qIncludeLastRunInfo != "" {

			if err := r.SetQueryParam("includeLastRunInfo", qIncludeLastRunInfo); err != nil {
				return err
			}
		}
	}

	if o.PruneExcludedSourceIds != nil {

		// query param pruneExcludedSourceIds
		var qrPruneExcludedSourceIds bool

		if o.PruneExcludedSourceIds != nil {
			qrPruneExcludedSourceIds = *o.PruneExcludedSourceIds
		}
		qPruneExcludedSourceIds := swag.FormatBool(qrPruneExcludedSourceIds)
		if qPruneExcludedSourceIds != "" {

			if err := r.SetQueryParam("pruneExcludedSourceIds", qPruneExcludedSourceIds); err != nil {
				return err
			}
		}
	}

	if o.PruneSourceIds != nil {

		// query param pruneSourceIds
		var qrPruneSourceIds bool

		if o.PruneSourceIds != nil {
			qrPruneSourceIds = *o.PruneSourceIds
		}
		qPruneSourceIds := swag.FormatBool(qrPruneSourceIds)
		if qPruneSourceIds != "" {

			if err := r.SetQueryParam("pruneSourceIds", qPruneSourceIds); err != nil {
				return err
			}
		}
	}

	if o.RequestInitiatorType != nil {

		// header param requestInitiatorType
		if err := r.SetHeaderParam("requestInitiatorType", *o.RequestInitiatorType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
