// Code generated by go-swagger; DO NOT EDIT.

package protection_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProtectionGroupRunsParams creates a new GetProtectionGroupRunsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProtectionGroupRunsParams() *GetProtectionGroupRunsParams {
	return &GetProtectionGroupRunsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProtectionGroupRunsParamsWithTimeout creates a new GetProtectionGroupRunsParams object
// with the ability to set a timeout on a request.
func NewGetProtectionGroupRunsParamsWithTimeout(timeout time.Duration) *GetProtectionGroupRunsParams {
	return &GetProtectionGroupRunsParams{
		timeout: timeout,
	}
}

// NewGetProtectionGroupRunsParamsWithContext creates a new GetProtectionGroupRunsParams object
// with the ability to set a context for a request.
func NewGetProtectionGroupRunsParamsWithContext(ctx context.Context) *GetProtectionGroupRunsParams {
	return &GetProtectionGroupRunsParams{
		Context: ctx,
	}
}

// NewGetProtectionGroupRunsParamsWithHTTPClient creates a new GetProtectionGroupRunsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProtectionGroupRunsParamsWithHTTPClient(client *http.Client) *GetProtectionGroupRunsParams {
	return &GetProtectionGroupRunsParams{
		HTTPClient: client,
	}
}

/*
GetProtectionGroupRunsParams contains all the parameters to send to the API endpoint

	for the get protection group runs operation.

	Typically these are written to a http.Request.
*/
type GetProtectionGroupRunsParams struct {

	/* ArchivalRunStatus.

	   Specifies a list of archival status, runs matching the status will be returned.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Paused' indicates that the ongoing run has been paused.<br> 'Skipped' indicates that the run was skipped.
	*/
	ArchivalRunStatus []string

	/* CloudSpinRunStatus.

	   Specifies a list of cloud spin status, runs matching the status will be returned.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Paused' indicates that the ongoing run has been paused.<br> 'Skipped' indicates that the run was skipped.
	*/
	CloudSpinRunStatus []string

	/* EndTimeUsecs.

	   End time for time range filter. Specify the end time as a Unix epoch Timestamp (in microseconds), only runs executing before this time will be returned. By default it is current time.

	   Format: int64
	*/
	EndTimeUsecs *int64

	/* ExcludeNonRestorableRuns.

	   Specifies whether to exclude non restorable runs. Run is treated restorable only if there is atleast one object snapshot (which may be either a local or an archival snapshot) which is not deleted or expired. Default value is false.
	*/
	ExcludeNonRestorableRuns *bool

	/* FilterByCopyTaskEndTime.

	   If true, then the details of the runs for which any copyTask completed in the given timerange will be returned. Only one of filterByEndTime and filterByCopyTaskEndTime can be set.
	*/
	FilterByCopyTaskEndTime *bool

	/* FilterByEndTime.

	   If true, the runs with backup end time within the specified time range will be returned. Otherwise, the runs with start time in the time range are returned.
	*/
	FilterByEndTime *bool

	/* ID.

	   Specifies a unique id of the Protection Group.
	*/
	ID string

	/* IncludeObjectDetails.

	   Specifies if the result includes the object details for each protection run. If set to true, details of the protected object will be returned. If set to false or not specified, details will not be returned.
	*/
	IncludeObjectDetails *bool

	/* IncludeTenants.

	   If true, the response will include Protection Group Runs which were created by all tenants which the current user has permission to see. If false, then only Protection Group Runs created by the current user will be returned.
	*/
	IncludeTenants *bool

	/* LocalBackupRunStatus.

	   Specifies a list of local backup status, runs matching the status will be returned.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Paused' indicates that the ongoing run has been paused.<br> 'Skipped' indicates that the run was skipped.
	*/
	LocalBackupRunStatus []string

	/* NumRuns.

	   Specifies the max number of runs. If not specified, at most 100 runs will be returned.

	   Format: int64
	*/
	NumRuns *int64

	/* OnlyReturnSuccessfulCopyRun.

	   If set to false, all copy_tasks in any given valid state will be considered. If left empty or set to true, only successful copy_tasks would be considered. Note: this field is only considered when, filterByCopyTaskEndTime is set to true, or else it is ignored.
	*/
	OnlyReturnSuccessfulCopyRun *bool

	/* ReplicationRunStatus.

	   Specifies a list of replication status, runs matching the status will be returned.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Paused' indicates that the ongoing run has been paused.<br> 'Skipped' indicates that the run was skipped.
	*/
	ReplicationRunStatus []string

	/* RequestInitiatorType.

	   Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
	*/
	RequestInitiatorType *string

	/* RunID.

	   Specifies the protection run id.
	*/
	RunID *string

	/* RunTags.

	   Specifies a list of tags for protection runs. If this is specified, only the runs which match these tags will be returned.
	*/
	RunTags []string

	/* RunTypes.

	   Filter by run type. Only protection run matching the specified types will be returned.
	*/
	RunTypes []string

	/* SnapshotTargetTypes.

	   Specifies the snapshot's target type which should be filtered. Note: this field is only considered when, filterByCopyTaskEndTime is set to true, or else it is ignored.
	*/
	SnapshotTargetTypes []string

	/* StartTimeUsecs.

	   Start time for time range filter. Specify the start time as a Unix epoch Timestamp (in microseconds), only runs executing after this time will be returned. By default it is endTimeUsecs minus an hour.

	   Format: int64
	*/
	StartTimeUsecs *int64

	/* TenantIds.

	   TenantIds contains ids of the tenants for which objects are to be returned.
	*/
	TenantIds []string

	/* UseCachedData.

	   Specifies whether we can serve the GET request from the read replica cache. There is a lag of 15 seconds between the read replica and primary data source.
	*/
	UseCachedData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get protection group runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionGroupRunsParams) WithDefaults() *GetProtectionGroupRunsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get protection group runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionGroupRunsParams) SetDefaults() {
	var (
		excludeNonRestorableRunsDefault = bool(false)
	)

	val := GetProtectionGroupRunsParams{
		ExcludeNonRestorableRuns: &excludeNonRestorableRunsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithTimeout(timeout time.Duration) *GetProtectionGroupRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithContext(ctx context.Context) *GetProtectionGroupRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithHTTPClient(client *http.Client) *GetProtectionGroupRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchivalRunStatus adds the archivalRunStatus to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithArchivalRunStatus(archivalRunStatus []string) *GetProtectionGroupRunsParams {
	o.SetArchivalRunStatus(archivalRunStatus)
	return o
}

// SetArchivalRunStatus adds the archivalRunStatus to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetArchivalRunStatus(archivalRunStatus []string) {
	o.ArchivalRunStatus = archivalRunStatus
}

// WithCloudSpinRunStatus adds the cloudSpinRunStatus to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithCloudSpinRunStatus(cloudSpinRunStatus []string) *GetProtectionGroupRunsParams {
	o.SetCloudSpinRunStatus(cloudSpinRunStatus)
	return o
}

// SetCloudSpinRunStatus adds the cloudSpinRunStatus to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetCloudSpinRunStatus(cloudSpinRunStatus []string) {
	o.CloudSpinRunStatus = cloudSpinRunStatus
}

// WithEndTimeUsecs adds the endTimeUsecs to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithEndTimeUsecs(endTimeUsecs *int64) *GetProtectionGroupRunsParams {
	o.SetEndTimeUsecs(endTimeUsecs)
	return o
}

// SetEndTimeUsecs adds the endTimeUsecs to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetEndTimeUsecs(endTimeUsecs *int64) {
	o.EndTimeUsecs = endTimeUsecs
}

// WithExcludeNonRestorableRuns adds the excludeNonRestorableRuns to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithExcludeNonRestorableRuns(excludeNonRestorableRuns *bool) *GetProtectionGroupRunsParams {
	o.SetExcludeNonRestorableRuns(excludeNonRestorableRuns)
	return o
}

// SetExcludeNonRestorableRuns adds the excludeNonRestorableRuns to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetExcludeNonRestorableRuns(excludeNonRestorableRuns *bool) {
	o.ExcludeNonRestorableRuns = excludeNonRestorableRuns
}

// WithFilterByCopyTaskEndTime adds the filterByCopyTaskEndTime to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithFilterByCopyTaskEndTime(filterByCopyTaskEndTime *bool) *GetProtectionGroupRunsParams {
	o.SetFilterByCopyTaskEndTime(filterByCopyTaskEndTime)
	return o
}

// SetFilterByCopyTaskEndTime adds the filterByCopyTaskEndTime to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetFilterByCopyTaskEndTime(filterByCopyTaskEndTime *bool) {
	o.FilterByCopyTaskEndTime = filterByCopyTaskEndTime
}

// WithFilterByEndTime adds the filterByEndTime to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithFilterByEndTime(filterByEndTime *bool) *GetProtectionGroupRunsParams {
	o.SetFilterByEndTime(filterByEndTime)
	return o
}

// SetFilterByEndTime adds the filterByEndTime to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetFilterByEndTime(filterByEndTime *bool) {
	o.FilterByEndTime = filterByEndTime
}

// WithID adds the id to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithID(id string) *GetProtectionGroupRunsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetID(id string) {
	o.ID = id
}

// WithIncludeObjectDetails adds the includeObjectDetails to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithIncludeObjectDetails(includeObjectDetails *bool) *GetProtectionGroupRunsParams {
	o.SetIncludeObjectDetails(includeObjectDetails)
	return o
}

// SetIncludeObjectDetails adds the includeObjectDetails to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetIncludeObjectDetails(includeObjectDetails *bool) {
	o.IncludeObjectDetails = includeObjectDetails
}

// WithIncludeTenants adds the includeTenants to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithIncludeTenants(includeTenants *bool) *GetProtectionGroupRunsParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithLocalBackupRunStatus adds the localBackupRunStatus to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithLocalBackupRunStatus(localBackupRunStatus []string) *GetProtectionGroupRunsParams {
	o.SetLocalBackupRunStatus(localBackupRunStatus)
	return o
}

// SetLocalBackupRunStatus adds the localBackupRunStatus to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetLocalBackupRunStatus(localBackupRunStatus []string) {
	o.LocalBackupRunStatus = localBackupRunStatus
}

// WithNumRuns adds the numRuns to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithNumRuns(numRuns *int64) *GetProtectionGroupRunsParams {
	o.SetNumRuns(numRuns)
	return o
}

// SetNumRuns adds the numRuns to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetNumRuns(numRuns *int64) {
	o.NumRuns = numRuns
}

// WithOnlyReturnSuccessfulCopyRun adds the onlyReturnSuccessfulCopyRun to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithOnlyReturnSuccessfulCopyRun(onlyReturnSuccessfulCopyRun *bool) *GetProtectionGroupRunsParams {
	o.SetOnlyReturnSuccessfulCopyRun(onlyReturnSuccessfulCopyRun)
	return o
}

// SetOnlyReturnSuccessfulCopyRun adds the onlyReturnSuccessfulCopyRun to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetOnlyReturnSuccessfulCopyRun(onlyReturnSuccessfulCopyRun *bool) {
	o.OnlyReturnSuccessfulCopyRun = onlyReturnSuccessfulCopyRun
}

// WithReplicationRunStatus adds the replicationRunStatus to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithReplicationRunStatus(replicationRunStatus []string) *GetProtectionGroupRunsParams {
	o.SetReplicationRunStatus(replicationRunStatus)
	return o
}

// SetReplicationRunStatus adds the replicationRunStatus to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetReplicationRunStatus(replicationRunStatus []string) {
	o.ReplicationRunStatus = replicationRunStatus
}

// WithRequestInitiatorType adds the requestInitiatorType to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithRequestInitiatorType(requestInitiatorType *string) *GetProtectionGroupRunsParams {
	o.SetRequestInitiatorType(requestInitiatorType)
	return o
}

// SetRequestInitiatorType adds the requestInitiatorType to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetRequestInitiatorType(requestInitiatorType *string) {
	o.RequestInitiatorType = requestInitiatorType
}

// WithRunID adds the runID to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithRunID(runID *string) *GetProtectionGroupRunsParams {
	o.SetRunID(runID)
	return o
}

// SetRunID adds the runId to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetRunID(runID *string) {
	o.RunID = runID
}

// WithRunTags adds the runTags to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithRunTags(runTags []string) *GetProtectionGroupRunsParams {
	o.SetRunTags(runTags)
	return o
}

// SetRunTags adds the runTags to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetRunTags(runTags []string) {
	o.RunTags = runTags
}

// WithRunTypes adds the runTypes to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithRunTypes(runTypes []string) *GetProtectionGroupRunsParams {
	o.SetRunTypes(runTypes)
	return o
}

// SetRunTypes adds the runTypes to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetRunTypes(runTypes []string) {
	o.RunTypes = runTypes
}

// WithSnapshotTargetTypes adds the snapshotTargetTypes to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithSnapshotTargetTypes(snapshotTargetTypes []string) *GetProtectionGroupRunsParams {
	o.SetSnapshotTargetTypes(snapshotTargetTypes)
	return o
}

// SetSnapshotTargetTypes adds the snapshotTargetTypes to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetSnapshotTargetTypes(snapshotTargetTypes []string) {
	o.SnapshotTargetTypes = snapshotTargetTypes
}

// WithStartTimeUsecs adds the startTimeUsecs to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithStartTimeUsecs(startTimeUsecs *int64) *GetProtectionGroupRunsParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetStartTimeUsecs(startTimeUsecs *int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WithTenantIds adds the tenantIds to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithTenantIds(tenantIds []string) *GetProtectionGroupRunsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithUseCachedData adds the useCachedData to the get protection group runs params
func (o *GetProtectionGroupRunsParams) WithUseCachedData(useCachedData *bool) *GetProtectionGroupRunsParams {
	o.SetUseCachedData(useCachedData)
	return o
}

// SetUseCachedData adds the useCachedData to the get protection group runs params
func (o *GetProtectionGroupRunsParams) SetUseCachedData(useCachedData *bool) {
	o.UseCachedData = useCachedData
}

// WriteToRequest writes these params to a swagger request
func (o *GetProtectionGroupRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ArchivalRunStatus != nil {

		// binding items for archivalRunStatus
		joinedArchivalRunStatus := o.bindParamArchivalRunStatus(reg)

		// query array param archivalRunStatus
		if err := r.SetQueryParam("archivalRunStatus", joinedArchivalRunStatus...); err != nil {
			return err
		}
	}

	if o.CloudSpinRunStatus != nil {

		// binding items for cloudSpinRunStatus
		joinedCloudSpinRunStatus := o.bindParamCloudSpinRunStatus(reg)

		// query array param cloudSpinRunStatus
		if err := r.SetQueryParam("cloudSpinRunStatus", joinedCloudSpinRunStatus...); err != nil {
			return err
		}
	}

	if o.EndTimeUsecs != nil {

		// query param endTimeUsecs
		var qrEndTimeUsecs int64

		if o.EndTimeUsecs != nil {
			qrEndTimeUsecs = *o.EndTimeUsecs
		}
		qEndTimeUsecs := swag.FormatInt64(qrEndTimeUsecs)
		if qEndTimeUsecs != "" {

			if err := r.SetQueryParam("endTimeUsecs", qEndTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.ExcludeNonRestorableRuns != nil {

		// query param excludeNonRestorableRuns
		var qrExcludeNonRestorableRuns bool

		if o.ExcludeNonRestorableRuns != nil {
			qrExcludeNonRestorableRuns = *o.ExcludeNonRestorableRuns
		}
		qExcludeNonRestorableRuns := swag.FormatBool(qrExcludeNonRestorableRuns)
		if qExcludeNonRestorableRuns != "" {

			if err := r.SetQueryParam("excludeNonRestorableRuns", qExcludeNonRestorableRuns); err != nil {
				return err
			}
		}
	}

	if o.FilterByCopyTaskEndTime != nil {

		// query param filterByCopyTaskEndTime
		var qrFilterByCopyTaskEndTime bool

		if o.FilterByCopyTaskEndTime != nil {
			qrFilterByCopyTaskEndTime = *o.FilterByCopyTaskEndTime
		}
		qFilterByCopyTaskEndTime := swag.FormatBool(qrFilterByCopyTaskEndTime)
		if qFilterByCopyTaskEndTime != "" {

			if err := r.SetQueryParam("filterByCopyTaskEndTime", qFilterByCopyTaskEndTime); err != nil {
				return err
			}
		}
	}

	if o.FilterByEndTime != nil {

		// query param filterByEndTime
		var qrFilterByEndTime bool

		if o.FilterByEndTime != nil {
			qrFilterByEndTime = *o.FilterByEndTime
		}
		qFilterByEndTime := swag.FormatBool(qrFilterByEndTime)
		if qFilterByEndTime != "" {

			if err := r.SetQueryParam("filterByEndTime", qFilterByEndTime); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IncludeObjectDetails != nil {

		// query param includeObjectDetails
		var qrIncludeObjectDetails bool

		if o.IncludeObjectDetails != nil {
			qrIncludeObjectDetails = *o.IncludeObjectDetails
		}
		qIncludeObjectDetails := swag.FormatBool(qrIncludeObjectDetails)
		if qIncludeObjectDetails != "" {

			if err := r.SetQueryParam("includeObjectDetails", qIncludeObjectDetails); err != nil {
				return err
			}
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.LocalBackupRunStatus != nil {

		// binding items for localBackupRunStatus
		joinedLocalBackupRunStatus := o.bindParamLocalBackupRunStatus(reg)

		// query array param localBackupRunStatus
		if err := r.SetQueryParam("localBackupRunStatus", joinedLocalBackupRunStatus...); err != nil {
			return err
		}
	}

	if o.NumRuns != nil {

		// query param numRuns
		var qrNumRuns int64

		if o.NumRuns != nil {
			qrNumRuns = *o.NumRuns
		}
		qNumRuns := swag.FormatInt64(qrNumRuns)
		if qNumRuns != "" {

			if err := r.SetQueryParam("numRuns", qNumRuns); err != nil {
				return err
			}
		}
	}

	if o.OnlyReturnSuccessfulCopyRun != nil {

		// query param onlyReturnSuccessfulCopyRun
		var qrOnlyReturnSuccessfulCopyRun bool

		if o.OnlyReturnSuccessfulCopyRun != nil {
			qrOnlyReturnSuccessfulCopyRun = *o.OnlyReturnSuccessfulCopyRun
		}
		qOnlyReturnSuccessfulCopyRun := swag.FormatBool(qrOnlyReturnSuccessfulCopyRun)
		if qOnlyReturnSuccessfulCopyRun != "" {

			if err := r.SetQueryParam("onlyReturnSuccessfulCopyRun", qOnlyReturnSuccessfulCopyRun); err != nil {
				return err
			}
		}
	}

	if o.ReplicationRunStatus != nil {

		// binding items for replicationRunStatus
		joinedReplicationRunStatus := o.bindParamReplicationRunStatus(reg)

		// query array param replicationRunStatus
		if err := r.SetQueryParam("replicationRunStatus", joinedReplicationRunStatus...); err != nil {
			return err
		}
	}

	if o.RequestInitiatorType != nil {

		// header param requestInitiatorType
		if err := r.SetHeaderParam("requestInitiatorType", *o.RequestInitiatorType); err != nil {
			return err
		}
	}

	if o.RunID != nil {

		// query param runId
		var qrRunID string

		if o.RunID != nil {
			qrRunID = *o.RunID
		}
		qRunID := qrRunID
		if qRunID != "" {

			if err := r.SetQueryParam("runId", qRunID); err != nil {
				return err
			}
		}
	}

	if o.RunTags != nil {

		// binding items for runTags
		joinedRunTags := o.bindParamRunTags(reg)

		// query array param runTags
		if err := r.SetQueryParam("runTags", joinedRunTags...); err != nil {
			return err
		}
	}

	if o.RunTypes != nil {

		// binding items for runTypes
		joinedRunTypes := o.bindParamRunTypes(reg)

		// query array param runTypes
		if err := r.SetQueryParam("runTypes", joinedRunTypes...); err != nil {
			return err
		}
	}

	if o.SnapshotTargetTypes != nil {

		// binding items for snapshotTargetTypes
		joinedSnapshotTargetTypes := o.bindParamSnapshotTargetTypes(reg)

		// query array param snapshotTargetTypes
		if err := r.SetQueryParam("snapshotTargetTypes", joinedSnapshotTargetTypes...); err != nil {
			return err
		}
	}

	if o.StartTimeUsecs != nil {

		// query param startTimeUsecs
		var qrStartTimeUsecs int64

		if o.StartTimeUsecs != nil {
			qrStartTimeUsecs = *o.StartTimeUsecs
		}
		qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
		if qStartTimeUsecs != "" {

			if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.UseCachedData != nil {

		// query param useCachedData
		var qrUseCachedData bool

		if o.UseCachedData != nil {
			qrUseCachedData = *o.UseCachedData
		}
		qUseCachedData := swag.FormatBool(qrUseCachedData)
		if qUseCachedData != "" {

			if err := r.SetQueryParam("useCachedData", qUseCachedData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetProtectionGroupRuns binds the parameter archivalRunStatus
func (o *GetProtectionGroupRunsParams) bindParamArchivalRunStatus(formats strfmt.Registry) []string {
	archivalRunStatusIR := o.ArchivalRunStatus

	var archivalRunStatusIC []string
	for _, archivalRunStatusIIR := range archivalRunStatusIR { // explode []string

		archivalRunStatusIIV := archivalRunStatusIIR // string as string
		archivalRunStatusIC = append(archivalRunStatusIC, archivalRunStatusIIV)
	}

	// items.CollectionFormat: ""
	archivalRunStatusIS := swag.JoinByFormat(archivalRunStatusIC, "")

	return archivalRunStatusIS
}

// bindParamGetProtectionGroupRuns binds the parameter cloudSpinRunStatus
func (o *GetProtectionGroupRunsParams) bindParamCloudSpinRunStatus(formats strfmt.Registry) []string {
	cloudSpinRunStatusIR := o.CloudSpinRunStatus

	var cloudSpinRunStatusIC []string
	for _, cloudSpinRunStatusIIR := range cloudSpinRunStatusIR { // explode []string

		cloudSpinRunStatusIIV := cloudSpinRunStatusIIR // string as string
		cloudSpinRunStatusIC = append(cloudSpinRunStatusIC, cloudSpinRunStatusIIV)
	}

	// items.CollectionFormat: ""
	cloudSpinRunStatusIS := swag.JoinByFormat(cloudSpinRunStatusIC, "")

	return cloudSpinRunStatusIS
}

// bindParamGetProtectionGroupRuns binds the parameter localBackupRunStatus
func (o *GetProtectionGroupRunsParams) bindParamLocalBackupRunStatus(formats strfmt.Registry) []string {
	localBackupRunStatusIR := o.LocalBackupRunStatus

	var localBackupRunStatusIC []string
	for _, localBackupRunStatusIIR := range localBackupRunStatusIR { // explode []string

		localBackupRunStatusIIV := localBackupRunStatusIIR // string as string
		localBackupRunStatusIC = append(localBackupRunStatusIC, localBackupRunStatusIIV)
	}

	// items.CollectionFormat: ""
	localBackupRunStatusIS := swag.JoinByFormat(localBackupRunStatusIC, "")

	return localBackupRunStatusIS
}

// bindParamGetProtectionGroupRuns binds the parameter replicationRunStatus
func (o *GetProtectionGroupRunsParams) bindParamReplicationRunStatus(formats strfmt.Registry) []string {
	replicationRunStatusIR := o.ReplicationRunStatus

	var replicationRunStatusIC []string
	for _, replicationRunStatusIIR := range replicationRunStatusIR { // explode []string

		replicationRunStatusIIV := replicationRunStatusIIR // string as string
		replicationRunStatusIC = append(replicationRunStatusIC, replicationRunStatusIIV)
	}

	// items.CollectionFormat: ""
	replicationRunStatusIS := swag.JoinByFormat(replicationRunStatusIC, "")

	return replicationRunStatusIS
}

// bindParamGetProtectionGroupRuns binds the parameter runTags
func (o *GetProtectionGroupRunsParams) bindParamRunTags(formats strfmt.Registry) []string {
	runTagsIR := o.RunTags

	var runTagsIC []string
	for _, runTagsIIR := range runTagsIR { // explode []string

		runTagsIIV := runTagsIIR // string as string
		runTagsIC = append(runTagsIC, runTagsIIV)
	}

	// items.CollectionFormat: ""
	runTagsIS := swag.JoinByFormat(runTagsIC, "")

	return runTagsIS
}

// bindParamGetProtectionGroupRuns binds the parameter runTypes
func (o *GetProtectionGroupRunsParams) bindParamRunTypes(formats strfmt.Registry) []string {
	runTypesIR := o.RunTypes

	var runTypesIC []string
	for _, runTypesIIR := range runTypesIR { // explode []string

		runTypesIIV := runTypesIIR // string as string
		runTypesIC = append(runTypesIC, runTypesIIV)
	}

	// items.CollectionFormat: ""
	runTypesIS := swag.JoinByFormat(runTypesIC, "")

	return runTypesIS
}

// bindParamGetProtectionGroupRuns binds the parameter snapshotTargetTypes
func (o *GetProtectionGroupRunsParams) bindParamSnapshotTargetTypes(formats strfmt.Registry) []string {
	snapshotTargetTypesIR := o.SnapshotTargetTypes

	var snapshotTargetTypesIC []string
	for _, snapshotTargetTypesIIR := range snapshotTargetTypesIR { // explode []string

		snapshotTargetTypesIIV := snapshotTargetTypesIIR // string as string
		snapshotTargetTypesIC = append(snapshotTargetTypesIC, snapshotTargetTypesIIV)
	}

	// items.CollectionFormat: ""
	snapshotTargetTypesIS := swag.JoinByFormat(snapshotTargetTypesIC, "")

	return snapshotTargetTypesIS
}

// bindParamGetProtectionGroupRuns binds the parameter tenantIds
func (o *GetProtectionGroupRunsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
