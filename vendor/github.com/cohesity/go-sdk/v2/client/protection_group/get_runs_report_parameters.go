// Code generated by go-swagger; DO NOT EDIT.

package protection_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRunsReportParams creates a new GetRunsReportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRunsReportParams() *GetRunsReportParams {
	return &GetRunsReportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRunsReportParamsWithTimeout creates a new GetRunsReportParams object
// with the ability to set a timeout on a request.
func NewGetRunsReportParamsWithTimeout(timeout time.Duration) *GetRunsReportParams {
	return &GetRunsReportParams{
		timeout: timeout,
	}
}

// NewGetRunsReportParamsWithContext creates a new GetRunsReportParams object
// with the ability to set a context for a request.
func NewGetRunsReportParamsWithContext(ctx context.Context) *GetRunsReportParams {
	return &GetRunsReportParams{
		Context: ctx,
	}
}

// NewGetRunsReportParamsWithHTTPClient creates a new GetRunsReportParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRunsReportParamsWithHTTPClient(client *http.Client) *GetRunsReportParams {
	return &GetRunsReportParams{
		HTTPClient: client,
	}
}

/*
GetRunsReportParams contains all the parameters to send to the API endpoint

	for the get runs report operation.

	Typically these are written to a http.Request.
*/
type GetRunsReportParams struct {

	/* FileType.

	   Specifies the downloaded type, i.e: success_files_list, default: success_files_list
	*/
	FileType *string

	/* ID.

	   Specifies a unique id of the Protection Group.
	*/
	ID string

	/* Name.

	   Specifies the name of the source being backed up
	*/
	Name *string

	/* ObjectID.

	   Specifies the id of the object for which errors/warnings are to be returned.
	*/
	ObjectID string

	/* RunID.

	   Specifies a unique run id of the Protection Group run.
	*/
	RunID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get runs report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRunsReportParams) WithDefaults() *GetRunsReportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get runs report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRunsReportParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get runs report params
func (o *GetRunsReportParams) WithTimeout(timeout time.Duration) *GetRunsReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get runs report params
func (o *GetRunsReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get runs report params
func (o *GetRunsReportParams) WithContext(ctx context.Context) *GetRunsReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get runs report params
func (o *GetRunsReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get runs report params
func (o *GetRunsReportParams) WithHTTPClient(client *http.Client) *GetRunsReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get runs report params
func (o *GetRunsReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFileType adds the fileType to the get runs report params
func (o *GetRunsReportParams) WithFileType(fileType *string) *GetRunsReportParams {
	o.SetFileType(fileType)
	return o
}

// SetFileType adds the fileType to the get runs report params
func (o *GetRunsReportParams) SetFileType(fileType *string) {
	o.FileType = fileType
}

// WithID adds the id to the get runs report params
func (o *GetRunsReportParams) WithID(id string) *GetRunsReportParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get runs report params
func (o *GetRunsReportParams) SetID(id string) {
	o.ID = id
}

// WithName adds the name to the get runs report params
func (o *GetRunsReportParams) WithName(name *string) *GetRunsReportParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get runs report params
func (o *GetRunsReportParams) SetName(name *string) {
	o.Name = name
}

// WithObjectID adds the objectID to the get runs report params
func (o *GetRunsReportParams) WithObjectID(objectID string) *GetRunsReportParams {
	o.SetObjectID(objectID)
	return o
}

// SetObjectID adds the objectId to the get runs report params
func (o *GetRunsReportParams) SetObjectID(objectID string) {
	o.ObjectID = objectID
}

// WithRunID adds the runID to the get runs report params
func (o *GetRunsReportParams) WithRunID(runID string) *GetRunsReportParams {
	o.SetRunID(runID)
	return o
}

// SetRunID adds the runId to the get runs report params
func (o *GetRunsReportParams) SetRunID(runID string) {
	o.RunID = runID
}

// WriteToRequest writes these params to a swagger request
func (o *GetRunsReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FileType != nil {

		// query param fileType
		var qrFileType string

		if o.FileType != nil {
			qrFileType = *o.FileType
		}
		qFileType := qrFileType
		if qFileType != "" {

			if err := r.SetQueryParam("fileType", qFileType); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	// path param objectId
	if err := r.SetPathParam("objectId", o.ObjectID); err != nil {
		return err
	}

	// path param runId
	if err := r.SetPathParam("runId", o.RunID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
