// Code generated by go-swagger; DO NOT EDIT.

package protection_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProtectionRunsParams creates a new GetProtectionRunsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProtectionRunsParams() *GetProtectionRunsParams {
	return &GetProtectionRunsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProtectionRunsParamsWithTimeout creates a new GetProtectionRunsParams object
// with the ability to set a timeout on a request.
func NewGetProtectionRunsParamsWithTimeout(timeout time.Duration) *GetProtectionRunsParams {
	return &GetProtectionRunsParams{
		timeout: timeout,
	}
}

// NewGetProtectionRunsParamsWithContext creates a new GetProtectionRunsParams object
// with the ability to set a context for a request.
func NewGetProtectionRunsParamsWithContext(ctx context.Context) *GetProtectionRunsParams {
	return &GetProtectionRunsParams{
		Context: ctx,
	}
}

// NewGetProtectionRunsParamsWithHTTPClient creates a new GetProtectionRunsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProtectionRunsParamsWithHTTPClient(client *http.Client) *GetProtectionRunsParams {
	return &GetProtectionRunsParams{
		HTTPClient: client,
	}
}

/*
GetProtectionRunsParams contains all the parameters to send to the API endpoint

	for the get protection runs operation.

	Typically these are written to a http.Request.
*/
type GetProtectionRunsParams struct {

	/* EndTimeUsecs.

	   End time for time range filter. Specify the end time as a Unix epoch Timestamp (in microseconds), only runs executing before this time will be returned. By default it is current time.

	   Format: int64
	*/
	EndTimeUsecs *int64

	/* RunStatus.

	   Specifies a list of status, runs matching the status will be returned.<br> 'Running' indicates that the run is still running.<br> 'Canceled' indicates that the run has been canceled.<br> 'Canceling' indicates that the run is in the process of being canceled.<br> 'Failed' indicates that the run has failed.<br> 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening.<br> 'Succeeded' indicates that the run has finished successfully.<br> 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.<br> 'Skipped' indicates that the run was skipped.
	*/
	RunStatus []string

	/* StartTimeUsecs.

	   Start time for time range filter. Specify the start time as a Unix epoch Timestamp (in microseconds), only runs executing after this time will be returned. By default it is endTimeUsecs minus an hour.

	   Format: int64
	*/
	StartTimeUsecs *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get protection runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionRunsParams) WithDefaults() *GetProtectionRunsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get protection runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionRunsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get protection runs params
func (o *GetProtectionRunsParams) WithTimeout(timeout time.Duration) *GetProtectionRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get protection runs params
func (o *GetProtectionRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get protection runs params
func (o *GetProtectionRunsParams) WithContext(ctx context.Context) *GetProtectionRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get protection runs params
func (o *GetProtectionRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get protection runs params
func (o *GetProtectionRunsParams) WithHTTPClient(client *http.Client) *GetProtectionRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get protection runs params
func (o *GetProtectionRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTimeUsecs adds the endTimeUsecs to the get protection runs params
func (o *GetProtectionRunsParams) WithEndTimeUsecs(endTimeUsecs *int64) *GetProtectionRunsParams {
	o.SetEndTimeUsecs(endTimeUsecs)
	return o
}

// SetEndTimeUsecs adds the endTimeUsecs to the get protection runs params
func (o *GetProtectionRunsParams) SetEndTimeUsecs(endTimeUsecs *int64) {
	o.EndTimeUsecs = endTimeUsecs
}

// WithRunStatus adds the runStatus to the get protection runs params
func (o *GetProtectionRunsParams) WithRunStatus(runStatus []string) *GetProtectionRunsParams {
	o.SetRunStatus(runStatus)
	return o
}

// SetRunStatus adds the runStatus to the get protection runs params
func (o *GetProtectionRunsParams) SetRunStatus(runStatus []string) {
	o.RunStatus = runStatus
}

// WithStartTimeUsecs adds the startTimeUsecs to the get protection runs params
func (o *GetProtectionRunsParams) WithStartTimeUsecs(startTimeUsecs *int64) *GetProtectionRunsParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the get protection runs params
func (o *GetProtectionRunsParams) SetStartTimeUsecs(startTimeUsecs *int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WriteToRequest writes these params to a swagger request
func (o *GetProtectionRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTimeUsecs != nil {

		// query param endTimeUsecs
		var qrEndTimeUsecs int64

		if o.EndTimeUsecs != nil {
			qrEndTimeUsecs = *o.EndTimeUsecs
		}
		qEndTimeUsecs := swag.FormatInt64(qrEndTimeUsecs)
		if qEndTimeUsecs != "" {

			if err := r.SetQueryParam("endTimeUsecs", qEndTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.RunStatus != nil {

		// binding items for runStatus
		joinedRunStatus := o.bindParamRunStatus(reg)

		// query array param runStatus
		if err := r.SetQueryParam("runStatus", joinedRunStatus...); err != nil {
			return err
		}
	}

	if o.StartTimeUsecs != nil {

		// query param startTimeUsecs
		var qrStartTimeUsecs int64

		if o.StartTimeUsecs != nil {
			qrStartTimeUsecs = *o.StartTimeUsecs
		}
		qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
		if qStartTimeUsecs != "" {

			if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetProtectionRuns binds the parameter runStatus
func (o *GetProtectionRunsParams) bindParamRunStatus(formats strfmt.Registry) []string {
	runStatusIR := o.RunStatus

	var runStatusIC []string
	for _, runStatusIIR := range runStatusIR { // explode []string

		runStatusIIV := runStatusIIR // string as string
		runStatusIC = append(runStatusIC, runStatusIIV)
	}

	// items.CollectionFormat: ""
	runStatusIS := swag.JoinByFormat(runStatusIC, "")

	return runStatusIS
}
