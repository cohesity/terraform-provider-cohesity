// Code generated by go-swagger; DO NOT EDIT.

package active_directory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetActiveDirectoryByIDParams creates a new GetActiveDirectoryByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetActiveDirectoryByIDParams() *GetActiveDirectoryByIDParams {
	return &GetActiveDirectoryByIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetActiveDirectoryByIDParamsWithTimeout creates a new GetActiveDirectoryByIDParams object
// with the ability to set a timeout on a request.
func NewGetActiveDirectoryByIDParamsWithTimeout(timeout time.Duration) *GetActiveDirectoryByIDParams {
	return &GetActiveDirectoryByIDParams{
		timeout: timeout,
	}
}

// NewGetActiveDirectoryByIDParamsWithContext creates a new GetActiveDirectoryByIDParams object
// with the ability to set a context for a request.
func NewGetActiveDirectoryByIDParamsWithContext(ctx context.Context) *GetActiveDirectoryByIDParams {
	return &GetActiveDirectoryByIDParams{
		Context: ctx,
	}
}

// NewGetActiveDirectoryByIDParamsWithHTTPClient creates a new GetActiveDirectoryByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetActiveDirectoryByIDParamsWithHTTPClient(client *http.Client) *GetActiveDirectoryByIDParams {
	return &GetActiveDirectoryByIDParams{
		HTTPClient: client,
	}
}

/*
GetActiveDirectoryByIDParams contains all the parameters to send to the API endpoint

	for the get active directory by Id operation.

	Typically these are written to a http.Request.
*/
type GetActiveDirectoryByIDParams struct {

	/* ID.

	   Specifies id of an Active Directory.

	   Format: int64
	*/
	ID int64

	/* IncludeCentrifyZones.

	   Specifies whether to include Centrify Zones of the Active Directory in response.
	*/
	IncludeCentrifyZones *bool

	/* IncludeDomainControllers.

	   Specifies whether to include Domain Controllers of the Active Directory in response.
	*/
	IncludeDomainControllers *bool

	/* IncludeSecurityPrincipals.

	   Specifies whether to include Security Principals of the Active Directory in response.
	*/
	IncludeSecurityPrincipals *bool

	/* ObjectClass.

	   Specifies a list of object classes, only security principals with object class in this list will be returned. This field is appliciable if 'includeSecurityPrincipals' is set to true.
	*/
	ObjectClass []string

	/* Prefix.

	   Specifies a prefix, only security principals with name or sAMAccountName having this prefix (ignoring cases) will be returned. This field is appliciable and mandatory if 'includeSecurityPrincipals' is set to true.
	*/
	Prefix *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get active directory by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetActiveDirectoryByIDParams) WithDefaults() *GetActiveDirectoryByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get active directory by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetActiveDirectoryByIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) WithTimeout(timeout time.Duration) *GetActiveDirectoryByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) WithContext(ctx context.Context) *GetActiveDirectoryByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) WithHTTPClient(client *http.Client) *GetActiveDirectoryByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) WithID(id int64) *GetActiveDirectoryByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) SetID(id int64) {
	o.ID = id
}

// WithIncludeCentrifyZones adds the includeCentrifyZones to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) WithIncludeCentrifyZones(includeCentrifyZones *bool) *GetActiveDirectoryByIDParams {
	o.SetIncludeCentrifyZones(includeCentrifyZones)
	return o
}

// SetIncludeCentrifyZones adds the includeCentrifyZones to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) SetIncludeCentrifyZones(includeCentrifyZones *bool) {
	o.IncludeCentrifyZones = includeCentrifyZones
}

// WithIncludeDomainControllers adds the includeDomainControllers to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) WithIncludeDomainControllers(includeDomainControllers *bool) *GetActiveDirectoryByIDParams {
	o.SetIncludeDomainControllers(includeDomainControllers)
	return o
}

// SetIncludeDomainControllers adds the includeDomainControllers to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) SetIncludeDomainControllers(includeDomainControllers *bool) {
	o.IncludeDomainControllers = includeDomainControllers
}

// WithIncludeSecurityPrincipals adds the includeSecurityPrincipals to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) WithIncludeSecurityPrincipals(includeSecurityPrincipals *bool) *GetActiveDirectoryByIDParams {
	o.SetIncludeSecurityPrincipals(includeSecurityPrincipals)
	return o
}

// SetIncludeSecurityPrincipals adds the includeSecurityPrincipals to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) SetIncludeSecurityPrincipals(includeSecurityPrincipals *bool) {
	o.IncludeSecurityPrincipals = includeSecurityPrincipals
}

// WithObjectClass adds the objectClass to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) WithObjectClass(objectClass []string) *GetActiveDirectoryByIDParams {
	o.SetObjectClass(objectClass)
	return o
}

// SetObjectClass adds the objectClass to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) SetObjectClass(objectClass []string) {
	o.ObjectClass = objectClass
}

// WithPrefix adds the prefix to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) WithPrefix(prefix *string) *GetActiveDirectoryByIDParams {
	o.SetPrefix(prefix)
	return o
}

// SetPrefix adds the prefix to the get active directory by Id params
func (o *GetActiveDirectoryByIDParams) SetPrefix(prefix *string) {
	o.Prefix = prefix
}

// WriteToRequest writes these params to a swagger request
func (o *GetActiveDirectoryByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IncludeCentrifyZones != nil {

		// query param includeCentrifyZones
		var qrIncludeCentrifyZones bool

		if o.IncludeCentrifyZones != nil {
			qrIncludeCentrifyZones = *o.IncludeCentrifyZones
		}
		qIncludeCentrifyZones := swag.FormatBool(qrIncludeCentrifyZones)
		if qIncludeCentrifyZones != "" {

			if err := r.SetQueryParam("includeCentrifyZones", qIncludeCentrifyZones); err != nil {
				return err
			}
		}
	}

	if o.IncludeDomainControllers != nil {

		// query param includeDomainControllers
		var qrIncludeDomainControllers bool

		if o.IncludeDomainControllers != nil {
			qrIncludeDomainControllers = *o.IncludeDomainControllers
		}
		qIncludeDomainControllers := swag.FormatBool(qrIncludeDomainControllers)
		if qIncludeDomainControllers != "" {

			if err := r.SetQueryParam("includeDomainControllers", qIncludeDomainControllers); err != nil {
				return err
			}
		}
	}

	if o.IncludeSecurityPrincipals != nil {

		// query param includeSecurityPrincipals
		var qrIncludeSecurityPrincipals bool

		if o.IncludeSecurityPrincipals != nil {
			qrIncludeSecurityPrincipals = *o.IncludeSecurityPrincipals
		}
		qIncludeSecurityPrincipals := swag.FormatBool(qrIncludeSecurityPrincipals)
		if qIncludeSecurityPrincipals != "" {

			if err := r.SetQueryParam("includeSecurityPrincipals", qIncludeSecurityPrincipals); err != nil {
				return err
			}
		}
	}

	if o.ObjectClass != nil {

		// binding items for objectClass
		joinedObjectClass := o.bindParamObjectClass(reg)

		// query array param objectClass
		if err := r.SetQueryParam("objectClass", joinedObjectClass...); err != nil {
			return err
		}
	}

	if o.Prefix != nil {

		// query param prefix
		var qrPrefix string

		if o.Prefix != nil {
			qrPrefix = *o.Prefix
		}
		qPrefix := qrPrefix
		if qPrefix != "" {

			if err := r.SetQueryParam("prefix", qPrefix); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetActiveDirectoryByID binds the parameter objectClass
func (o *GetActiveDirectoryByIDParams) bindParamObjectClass(formats strfmt.Registry) []string {
	objectClassIR := o.ObjectClass

	var objectClassIC []string
	for _, objectClassIIR := range objectClassIR { // explode []string

		objectClassIIV := objectClassIIR // string as string
		objectClassIC = append(objectClassIC, objectClassIIV)
	}

	// items.CollectionFormat: ""
	objectClassIS := swag.JoinByFormat(objectClassIC, "")

	return objectClassIS
}
