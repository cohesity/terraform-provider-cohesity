// Code generated by go-swagger; DO NOT EDIT.

package active_directory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetActiveDirectoryParams creates a new GetActiveDirectoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetActiveDirectoryParams() *GetActiveDirectoryParams {
	return &GetActiveDirectoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetActiveDirectoryParamsWithTimeout creates a new GetActiveDirectoryParams object
// with the ability to set a timeout on a request.
func NewGetActiveDirectoryParamsWithTimeout(timeout time.Duration) *GetActiveDirectoryParams {
	return &GetActiveDirectoryParams{
		timeout: timeout,
	}
}

// NewGetActiveDirectoryParamsWithContext creates a new GetActiveDirectoryParams object
// with the ability to set a context for a request.
func NewGetActiveDirectoryParamsWithContext(ctx context.Context) *GetActiveDirectoryParams {
	return &GetActiveDirectoryParams{
		Context: ctx,
	}
}

// NewGetActiveDirectoryParamsWithHTTPClient creates a new GetActiveDirectoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetActiveDirectoryParamsWithHTTPClient(client *http.Client) *GetActiveDirectoryParams {
	return &GetActiveDirectoryParams{
		HTTPClient: client,
	}
}

/*
GetActiveDirectoryParams contains all the parameters to send to the API endpoint

	for the get active directory operation.

	Typically these are written to a http.Request.
*/
type GetActiveDirectoryParams struct {

	/* DomainNames.

	   Filter by a list of Active Directory domain names.
	*/
	DomainNames []string

	/* Ids.

	   Filter by a list of Active Directory Ids.
	*/
	Ids []int64

	/* IncludeTenants.

	   If true, the response will include Active Directories which were created by all tenants which the current user has permission to see. If false, then only Active Directories created by the current user will be returned.
	*/
	IncludeTenants *bool

	/* TenantIds.

	   TenantIds contains ids of the tenants for which Active Directories are to be returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get active directory params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetActiveDirectoryParams) WithDefaults() *GetActiveDirectoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get active directory params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetActiveDirectoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get active directory params
func (o *GetActiveDirectoryParams) WithTimeout(timeout time.Duration) *GetActiveDirectoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get active directory params
func (o *GetActiveDirectoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get active directory params
func (o *GetActiveDirectoryParams) WithContext(ctx context.Context) *GetActiveDirectoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get active directory params
func (o *GetActiveDirectoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get active directory params
func (o *GetActiveDirectoryParams) WithHTTPClient(client *http.Client) *GetActiveDirectoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get active directory params
func (o *GetActiveDirectoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainNames adds the domainNames to the get active directory params
func (o *GetActiveDirectoryParams) WithDomainNames(domainNames []string) *GetActiveDirectoryParams {
	o.SetDomainNames(domainNames)
	return o
}

// SetDomainNames adds the domainNames to the get active directory params
func (o *GetActiveDirectoryParams) SetDomainNames(domainNames []string) {
	o.DomainNames = domainNames
}

// WithIds adds the ids to the get active directory params
func (o *GetActiveDirectoryParams) WithIds(ids []int64) *GetActiveDirectoryParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get active directory params
func (o *GetActiveDirectoryParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithIncludeTenants adds the includeTenants to the get active directory params
func (o *GetActiveDirectoryParams) WithIncludeTenants(includeTenants *bool) *GetActiveDirectoryParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the get active directory params
func (o *GetActiveDirectoryParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithTenantIds adds the tenantIds to the get active directory params
func (o *GetActiveDirectoryParams) WithTenantIds(tenantIds []string) *GetActiveDirectoryParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get active directory params
func (o *GetActiveDirectoryParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetActiveDirectoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DomainNames != nil {

		// binding items for domainNames
		joinedDomainNames := o.bindParamDomainNames(reg)

		// query array param domainNames
		if err := r.SetQueryParam("domainNames", joinedDomainNames...); err != nil {
			return err
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetActiveDirectory binds the parameter domainNames
func (o *GetActiveDirectoryParams) bindParamDomainNames(formats strfmt.Registry) []string {
	domainNamesIR := o.DomainNames

	var domainNamesIC []string
	for _, domainNamesIIR := range domainNamesIR { // explode []string

		domainNamesIIV := domainNamesIIR // string as string
		domainNamesIC = append(domainNamesIC, domainNamesIIV)
	}

	// items.CollectionFormat: ""
	domainNamesIS := swag.JoinByFormat(domainNamesIC, "")

	return domainNamesIS
}

// bindParamGetActiveDirectory binds the parameter ids
func (o *GetActiveDirectoryParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetActiveDirectory binds the parameter tenantIds
func (o *GetActiveDirectoryParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
