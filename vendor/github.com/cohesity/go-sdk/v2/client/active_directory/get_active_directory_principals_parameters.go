// Code generated by go-swagger; DO NOT EDIT.

package active_directory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetActiveDirectoryPrincipalsParams creates a new GetActiveDirectoryPrincipalsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetActiveDirectoryPrincipalsParams() *GetActiveDirectoryPrincipalsParams {
	return &GetActiveDirectoryPrincipalsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetActiveDirectoryPrincipalsParamsWithTimeout creates a new GetActiveDirectoryPrincipalsParams object
// with the ability to set a timeout on a request.
func NewGetActiveDirectoryPrincipalsParamsWithTimeout(timeout time.Duration) *GetActiveDirectoryPrincipalsParams {
	return &GetActiveDirectoryPrincipalsParams{
		timeout: timeout,
	}
}

// NewGetActiveDirectoryPrincipalsParamsWithContext creates a new GetActiveDirectoryPrincipalsParams object
// with the ability to set a context for a request.
func NewGetActiveDirectoryPrincipalsParamsWithContext(ctx context.Context) *GetActiveDirectoryPrincipalsParams {
	return &GetActiveDirectoryPrincipalsParams{
		Context: ctx,
	}
}

// NewGetActiveDirectoryPrincipalsParamsWithHTTPClient creates a new GetActiveDirectoryPrincipalsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetActiveDirectoryPrincipalsParamsWithHTTPClient(client *http.Client) *GetActiveDirectoryPrincipalsParams {
	return &GetActiveDirectoryPrincipalsParams{
		HTTPClient: client,
	}
}

/*
GetActiveDirectoryPrincipalsParams contains all the parameters to send to the API endpoint

	for the get active directory principals operation.

	Typically these are written to a http.Request.
*/
type GetActiveDirectoryPrincipalsParams struct {

	/* DomainName.

	   Specifies the domain name of the principals to search. If specified the principals in that domain are searched. Domain could be an Active Directory domain joined by the Cluster or any one of the trusted domains of the Active Directory domain or the LOCAL domain. If not specified, all the domains are searched.
	*/
	DomainName *string

	/* IncludeComputers.

	   Specifies if Computer/GMSA accounts need to be included in this search.
	*/
	IncludeComputers *bool

	/* IncludeServiceAccounts.

	   Specifies if service accounts should be included in the search result.
	*/
	IncludeServiceAccounts *bool

	/* ObjectClass.

	   Specifies the type of principal, a user or a group.
	*/
	ObjectClass *string

	/* SearchTerm.

	   Optionally filter by matching a substring. Only principals with a name or sAMAccountName that matches part or all of the specified substring are returned. If specified, a 'sids' parameter should not be specified
	*/
	SearchTerm *string

	/* Sids.

	   Optionally filter by a list of security identifiers (SIDs) found in the specified domain. Only principals matching the specified SIDs are returned. If specified, a 'searchTerm' parameter should not be specified. Note: Duplicate SIDs will be ignored.
	*/
	Sids []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get active directory principals params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetActiveDirectoryPrincipalsParams) WithDefaults() *GetActiveDirectoryPrincipalsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get active directory principals params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetActiveDirectoryPrincipalsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) WithTimeout(timeout time.Duration) *GetActiveDirectoryPrincipalsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) WithContext(ctx context.Context) *GetActiveDirectoryPrincipalsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) WithHTTPClient(client *http.Client) *GetActiveDirectoryPrincipalsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainName adds the domainName to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) WithDomainName(domainName *string) *GetActiveDirectoryPrincipalsParams {
	o.SetDomainName(domainName)
	return o
}

// SetDomainName adds the domainName to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) SetDomainName(domainName *string) {
	o.DomainName = domainName
}

// WithIncludeComputers adds the includeComputers to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) WithIncludeComputers(includeComputers *bool) *GetActiveDirectoryPrincipalsParams {
	o.SetIncludeComputers(includeComputers)
	return o
}

// SetIncludeComputers adds the includeComputers to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) SetIncludeComputers(includeComputers *bool) {
	o.IncludeComputers = includeComputers
}

// WithIncludeServiceAccounts adds the includeServiceAccounts to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) WithIncludeServiceAccounts(includeServiceAccounts *bool) *GetActiveDirectoryPrincipalsParams {
	o.SetIncludeServiceAccounts(includeServiceAccounts)
	return o
}

// SetIncludeServiceAccounts adds the includeServiceAccounts to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) SetIncludeServiceAccounts(includeServiceAccounts *bool) {
	o.IncludeServiceAccounts = includeServiceAccounts
}

// WithObjectClass adds the objectClass to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) WithObjectClass(objectClass *string) *GetActiveDirectoryPrincipalsParams {
	o.SetObjectClass(objectClass)
	return o
}

// SetObjectClass adds the objectClass to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) SetObjectClass(objectClass *string) {
	o.ObjectClass = objectClass
}

// WithSearchTerm adds the searchTerm to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) WithSearchTerm(searchTerm *string) *GetActiveDirectoryPrincipalsParams {
	o.SetSearchTerm(searchTerm)
	return o
}

// SetSearchTerm adds the searchTerm to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) SetSearchTerm(searchTerm *string) {
	o.SearchTerm = searchTerm
}

// WithSids adds the sids to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) WithSids(sids []string) *GetActiveDirectoryPrincipalsParams {
	o.SetSids(sids)
	return o
}

// SetSids adds the sids to the get active directory principals params
func (o *GetActiveDirectoryPrincipalsParams) SetSids(sids []string) {
	o.Sids = sids
}

// WriteToRequest writes these params to a swagger request
func (o *GetActiveDirectoryPrincipalsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DomainName != nil {

		// query param domainName
		var qrDomainName string

		if o.DomainName != nil {
			qrDomainName = *o.DomainName
		}
		qDomainName := qrDomainName
		if qDomainName != "" {

			if err := r.SetQueryParam("domainName", qDomainName); err != nil {
				return err
			}
		}
	}

	if o.IncludeComputers != nil {

		// query param includeComputers
		var qrIncludeComputers bool

		if o.IncludeComputers != nil {
			qrIncludeComputers = *o.IncludeComputers
		}
		qIncludeComputers := swag.FormatBool(qrIncludeComputers)
		if qIncludeComputers != "" {

			if err := r.SetQueryParam("includeComputers", qIncludeComputers); err != nil {
				return err
			}
		}
	}

	if o.IncludeServiceAccounts != nil {

		// query param includeServiceAccounts
		var qrIncludeServiceAccounts bool

		if o.IncludeServiceAccounts != nil {
			qrIncludeServiceAccounts = *o.IncludeServiceAccounts
		}
		qIncludeServiceAccounts := swag.FormatBool(qrIncludeServiceAccounts)
		if qIncludeServiceAccounts != "" {

			if err := r.SetQueryParam("includeServiceAccounts", qIncludeServiceAccounts); err != nil {
				return err
			}
		}
	}

	if o.ObjectClass != nil {

		// query param objectClass
		var qrObjectClass string

		if o.ObjectClass != nil {
			qrObjectClass = *o.ObjectClass
		}
		qObjectClass := qrObjectClass
		if qObjectClass != "" {

			if err := r.SetQueryParam("objectClass", qObjectClass); err != nil {
				return err
			}
		}
	}

	if o.SearchTerm != nil {

		// query param searchTerm
		var qrSearchTerm string

		if o.SearchTerm != nil {
			qrSearchTerm = *o.SearchTerm
		}
		qSearchTerm := qrSearchTerm
		if qSearchTerm != "" {

			if err := r.SetQueryParam("searchTerm", qSearchTerm); err != nil {
				return err
			}
		}
	}

	if o.Sids != nil {

		// binding items for sids
		joinedSids := o.bindParamSids(reg)

		// query array param sids
		if err := r.SetQueryParam("sids", joinedSids...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetActiveDirectoryPrincipals binds the parameter sids
func (o *GetActiveDirectoryPrincipalsParams) bindParamSids(formats strfmt.Registry) []string {
	sidsIR := o.Sids

	var sidsIC []string
	for _, sidsIIR := range sidsIR { // explode []string

		sidsIIV := sidsIIR // string as string
		sidsIC = append(sidsIC, sidsIIV)
	}

	// items.CollectionFormat: ""
	sidsIS := swag.JoinByFormat(sidsIC, "")

	return sidsIS
}
