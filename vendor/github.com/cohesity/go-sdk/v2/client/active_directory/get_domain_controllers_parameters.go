// Code generated by go-swagger; DO NOT EDIT.

package active_directory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDomainControllersParams creates a new GetDomainControllersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDomainControllersParams() *GetDomainControllersParams {
	return &GetDomainControllersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDomainControllersParamsWithTimeout creates a new GetDomainControllersParams object
// with the ability to set a timeout on a request.
func NewGetDomainControllersParamsWithTimeout(timeout time.Duration) *GetDomainControllersParams {
	return &GetDomainControllersParams{
		timeout: timeout,
	}
}

// NewGetDomainControllersParamsWithContext creates a new GetDomainControllersParams object
// with the ability to set a context for a request.
func NewGetDomainControllersParamsWithContext(ctx context.Context) *GetDomainControllersParams {
	return &GetDomainControllersParams{
		Context: ctx,
	}
}

// NewGetDomainControllersParamsWithHTTPClient creates a new GetDomainControllersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDomainControllersParamsWithHTTPClient(client *http.Client) *GetDomainControllersParams {
	return &GetDomainControllersParams{
		HTTPClient: client,
	}
}

/*
GetDomainControllersParams contains all the parameters to send to the API endpoint

	for the get domain controllers operation.

	Typically these are written to a http.Request.
*/
type GetDomainControllersParams struct {

	/* ConnectionID.

	   Specifies the Id of the connection which the connector belongs to.

	   Format: int64
	*/
	ConnectionID *int64

	/* DomainNames.

	   Specifies a list of domain names.
	*/
	DomainNames []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get domain controllers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDomainControllersParams) WithDefaults() *GetDomainControllersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get domain controllers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDomainControllersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get domain controllers params
func (o *GetDomainControllersParams) WithTimeout(timeout time.Duration) *GetDomainControllersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get domain controllers params
func (o *GetDomainControllersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get domain controllers params
func (o *GetDomainControllersParams) WithContext(ctx context.Context) *GetDomainControllersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get domain controllers params
func (o *GetDomainControllersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get domain controllers params
func (o *GetDomainControllersParams) WithHTTPClient(client *http.Client) *GetDomainControllersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get domain controllers params
func (o *GetDomainControllersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionID adds the connectionID to the get domain controllers params
func (o *GetDomainControllersParams) WithConnectionID(connectionID *int64) *GetDomainControllersParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the get domain controllers params
func (o *GetDomainControllersParams) SetConnectionID(connectionID *int64) {
	o.ConnectionID = connectionID
}

// WithDomainNames adds the domainNames to the get domain controllers params
func (o *GetDomainControllersParams) WithDomainNames(domainNames []string) *GetDomainControllersParams {
	o.SetDomainNames(domainNames)
	return o
}

// SetDomainNames adds the domainNames to the get domain controllers params
func (o *GetDomainControllersParams) SetDomainNames(domainNames []string) {
	o.DomainNames = domainNames
}

// WriteToRequest writes these params to a swagger request
func (o *GetDomainControllersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConnectionID != nil {

		// query param connectionId
		var qrConnectionID int64

		if o.ConnectionID != nil {
			qrConnectionID = *o.ConnectionID
		}
		qConnectionID := swag.FormatInt64(qrConnectionID)
		if qConnectionID != "" {

			if err := r.SetQueryParam("connectionId", qConnectionID); err != nil {
				return err
			}
		}
	}

	if o.DomainNames != nil {

		// binding items for domainNames
		joinedDomainNames := o.bindParamDomainNames(reg)

		// query array param domainNames
		if err := r.SetQueryParam("domainNames", joinedDomainNames...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetDomainControllers binds the parameter domainNames
func (o *GetDomainControllersParams) bindParamDomainNames(formats strfmt.Registry) []string {
	domainNamesIR := o.DomainNames

	var domainNamesIC []string
	for _, domainNamesIIR := range domainNamesIR { // explode []string

		domainNamesIIV := domainNamesIIR // string as string
		domainNamesIC = append(domainNamesIC, domainNamesIIV)
	}

	// items.CollectionFormat: ""
	domainNamesIS := swag.JoinByFormat(domainNamesIC, "")

	return domainNamesIS
}
