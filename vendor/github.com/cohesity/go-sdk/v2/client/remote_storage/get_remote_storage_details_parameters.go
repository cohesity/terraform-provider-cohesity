// Code generated by go-swagger; DO NOT EDIT.

package remote_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRemoteStorageDetailsParams creates a new GetRemoteStorageDetailsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRemoteStorageDetailsParams() *GetRemoteStorageDetailsParams {
	return &GetRemoteStorageDetailsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRemoteStorageDetailsParamsWithTimeout creates a new GetRemoteStorageDetailsParams object
// with the ability to set a timeout on a request.
func NewGetRemoteStorageDetailsParamsWithTimeout(timeout time.Duration) *GetRemoteStorageDetailsParams {
	return &GetRemoteStorageDetailsParams{
		timeout: timeout,
	}
}

// NewGetRemoteStorageDetailsParamsWithContext creates a new GetRemoteStorageDetailsParams object
// with the ability to set a context for a request.
func NewGetRemoteStorageDetailsParamsWithContext(ctx context.Context) *GetRemoteStorageDetailsParams {
	return &GetRemoteStorageDetailsParams{
		Context: ctx,
	}
}

// NewGetRemoteStorageDetailsParamsWithHTTPClient creates a new GetRemoteStorageDetailsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRemoteStorageDetailsParamsWithHTTPClient(client *http.Client) *GetRemoteStorageDetailsParams {
	return &GetRemoteStorageDetailsParams{
		HTTPClient: client,
	}
}

/*
GetRemoteStorageDetailsParams contains all the parameters to send to the API endpoint

	for the get remote storage details operation.

	Typically these are written to a http.Request.
*/
type GetRemoteStorageDetailsParams struct {

	/* ID.

	   Specifies the id of the registered remote storage.

	   Format: int64
	*/
	ID int64

	/* IncludeArrayInfo.

	   Includes flashblade specific info like name, software os and version of pure flashblade.
	*/
	IncludeArrayInfo *bool

	/* IncludeAvailableDataVips.

	   Specifies whether to include available data vips on remote storage.
	*/
	IncludeAvailableDataVips *bool

	/* IncludeAvailableSpace.

	   Specifies whether to include available capacity on remote storage.
	*/
	IncludeAvailableSpace *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get remote storage details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRemoteStorageDetailsParams) WithDefaults() *GetRemoteStorageDetailsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get remote storage details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRemoteStorageDetailsParams) SetDefaults() {
	var (
		includeArrayInfoDefault = bool(false)

		includeAvailableDataVipsDefault = bool(false)

		includeAvailableSpaceDefault = bool(false)
	)

	val := GetRemoteStorageDetailsParams{
		IncludeArrayInfo:         &includeArrayInfoDefault,
		IncludeAvailableDataVips: &includeAvailableDataVipsDefault,
		IncludeAvailableSpace:    &includeAvailableSpaceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) WithTimeout(timeout time.Duration) *GetRemoteStorageDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) WithContext(ctx context.Context) *GetRemoteStorageDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) WithHTTPClient(client *http.Client) *GetRemoteStorageDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) WithID(id int64) *GetRemoteStorageDetailsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) SetID(id int64) {
	o.ID = id
}

// WithIncludeArrayInfo adds the includeArrayInfo to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) WithIncludeArrayInfo(includeArrayInfo *bool) *GetRemoteStorageDetailsParams {
	o.SetIncludeArrayInfo(includeArrayInfo)
	return o
}

// SetIncludeArrayInfo adds the includeArrayInfo to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) SetIncludeArrayInfo(includeArrayInfo *bool) {
	o.IncludeArrayInfo = includeArrayInfo
}

// WithIncludeAvailableDataVips adds the includeAvailableDataVips to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) WithIncludeAvailableDataVips(includeAvailableDataVips *bool) *GetRemoteStorageDetailsParams {
	o.SetIncludeAvailableDataVips(includeAvailableDataVips)
	return o
}

// SetIncludeAvailableDataVips adds the includeAvailableDataVips to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) SetIncludeAvailableDataVips(includeAvailableDataVips *bool) {
	o.IncludeAvailableDataVips = includeAvailableDataVips
}

// WithIncludeAvailableSpace adds the includeAvailableSpace to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) WithIncludeAvailableSpace(includeAvailableSpace *bool) *GetRemoteStorageDetailsParams {
	o.SetIncludeAvailableSpace(includeAvailableSpace)
	return o
}

// SetIncludeAvailableSpace adds the includeAvailableSpace to the get remote storage details params
func (o *GetRemoteStorageDetailsParams) SetIncludeAvailableSpace(includeAvailableSpace *bool) {
	o.IncludeAvailableSpace = includeAvailableSpace
}

// WriteToRequest writes these params to a swagger request
func (o *GetRemoteStorageDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IncludeArrayInfo != nil {

		// query param includeArrayInfo
		var qrIncludeArrayInfo bool

		if o.IncludeArrayInfo != nil {
			qrIncludeArrayInfo = *o.IncludeArrayInfo
		}
		qIncludeArrayInfo := swag.FormatBool(qrIncludeArrayInfo)
		if qIncludeArrayInfo != "" {

			if err := r.SetQueryParam("includeArrayInfo", qIncludeArrayInfo); err != nil {
				return err
			}
		}
	}

	if o.IncludeAvailableDataVips != nil {

		// query param includeAvailableDataVips
		var qrIncludeAvailableDataVips bool

		if o.IncludeAvailableDataVips != nil {
			qrIncludeAvailableDataVips = *o.IncludeAvailableDataVips
		}
		qIncludeAvailableDataVips := swag.FormatBool(qrIncludeAvailableDataVips)
		if qIncludeAvailableDataVips != "" {

			if err := r.SetQueryParam("includeAvailableDataVips", qIncludeAvailableDataVips); err != nil {
				return err
			}
		}
	}

	if o.IncludeAvailableSpace != nil {

		// query param includeAvailableSpace
		var qrIncludeAvailableSpace bool

		if o.IncludeAvailableSpace != nil {
			qrIncludeAvailableSpace = *o.IncludeAvailableSpace
		}
		qIncludeAvailableSpace := swag.FormatBool(qrIncludeAvailableSpace)
		if qIncludeAvailableSpace != "" {

			if err := r.SetQueryParam("includeAvailableSpace", qIncludeAvailableSpace); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
