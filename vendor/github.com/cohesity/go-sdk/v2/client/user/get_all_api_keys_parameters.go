// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllAPIKeysParams creates a new GetAllAPIKeysParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllAPIKeysParams() *GetAllAPIKeysParams {
	return &GetAllAPIKeysParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllAPIKeysParamsWithTimeout creates a new GetAllAPIKeysParams object
// with the ability to set a timeout on a request.
func NewGetAllAPIKeysParamsWithTimeout(timeout time.Duration) *GetAllAPIKeysParams {
	return &GetAllAPIKeysParams{
		timeout: timeout,
	}
}

// NewGetAllAPIKeysParamsWithContext creates a new GetAllAPIKeysParams object
// with the ability to set a context for a request.
func NewGetAllAPIKeysParamsWithContext(ctx context.Context) *GetAllAPIKeysParams {
	return &GetAllAPIKeysParams{
		Context: ctx,
	}
}

// NewGetAllAPIKeysParamsWithHTTPClient creates a new GetAllAPIKeysParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllAPIKeysParamsWithHTTPClient(client *http.Client) *GetAllAPIKeysParams {
	return &GetAllAPIKeysParams{
		HTTPClient: client,
	}
}

/*
GetAllAPIKeysParams contains all the parameters to send to the API endpoint

	for the get all API keys operation.

	Typically these are written to a http.Request.
*/
type GetAllAPIKeysParams struct {

	/* Ids.

	   Filter by API Key Ids
	*/
	Ids []string

	/* IsActive.

	   If true, the response will only include API keys which are active. Returns all keys if the query param is not set.
	*/
	IsActive *bool

	/* IsExpired.

	   If true, the response will only include API keys which has been expired. Returns all keys if the query param is not set.
	*/
	IsExpired *bool

	/* OwnerSids.

	   Filter by list of owner (user) SIDs
	*/
	OwnerSids []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all API keys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllAPIKeysParams) WithDefaults() *GetAllAPIKeysParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all API keys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllAPIKeysParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get all API keys params
func (o *GetAllAPIKeysParams) WithTimeout(timeout time.Duration) *GetAllAPIKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all API keys params
func (o *GetAllAPIKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all API keys params
func (o *GetAllAPIKeysParams) WithContext(ctx context.Context) *GetAllAPIKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all API keys params
func (o *GetAllAPIKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all API keys params
func (o *GetAllAPIKeysParams) WithHTTPClient(client *http.Client) *GetAllAPIKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all API keys params
func (o *GetAllAPIKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the get all API keys params
func (o *GetAllAPIKeysParams) WithIds(ids []string) *GetAllAPIKeysParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get all API keys params
func (o *GetAllAPIKeysParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithIsActive adds the isActive to the get all API keys params
func (o *GetAllAPIKeysParams) WithIsActive(isActive *bool) *GetAllAPIKeysParams {
	o.SetIsActive(isActive)
	return o
}

// SetIsActive adds the isActive to the get all API keys params
func (o *GetAllAPIKeysParams) SetIsActive(isActive *bool) {
	o.IsActive = isActive
}

// WithIsExpired adds the isExpired to the get all API keys params
func (o *GetAllAPIKeysParams) WithIsExpired(isExpired *bool) *GetAllAPIKeysParams {
	o.SetIsExpired(isExpired)
	return o
}

// SetIsExpired adds the isExpired to the get all API keys params
func (o *GetAllAPIKeysParams) SetIsExpired(isExpired *bool) {
	o.IsExpired = isExpired
}

// WithOwnerSids adds the ownerSids to the get all API keys params
func (o *GetAllAPIKeysParams) WithOwnerSids(ownerSids []string) *GetAllAPIKeysParams {
	o.SetOwnerSids(ownerSids)
	return o
}

// SetOwnerSids adds the ownerSids to the get all API keys params
func (o *GetAllAPIKeysParams) SetOwnerSids(ownerSids []string) {
	o.OwnerSids = ownerSids
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllAPIKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IsActive != nil {

		// query param isActive
		var qrIsActive bool

		if o.IsActive != nil {
			qrIsActive = *o.IsActive
		}
		qIsActive := swag.FormatBool(qrIsActive)
		if qIsActive != "" {

			if err := r.SetQueryParam("isActive", qIsActive); err != nil {
				return err
			}
		}
	}

	if o.IsExpired != nil {

		// query param isExpired
		var qrIsExpired bool

		if o.IsExpired != nil {
			qrIsExpired = *o.IsExpired
		}
		qIsExpired := swag.FormatBool(qrIsExpired)
		if qIsExpired != "" {

			if err := r.SetQueryParam("isExpired", qIsExpired); err != nil {
				return err
			}
		}
	}

	if o.OwnerSids != nil {

		// binding items for ownerSids
		joinedOwnerSids := o.bindParamOwnerSids(reg)

		// query array param ownerSids
		if err := r.SetQueryParam("ownerSids", joinedOwnerSids...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAllAPIKeys binds the parameter ids
func (o *GetAllAPIKeysParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetAllAPIKeys binds the parameter ownerSids
func (o *GetAllAPIKeysParams) bindParamOwnerSids(formats strfmt.Registry) []string {
	ownerSidsIR := o.OwnerSids

	var ownerSidsIC []string
	for _, ownerSidsIIR := range ownerSidsIR { // explode []string

		ownerSidsIIV := ownerSidsIIR // string as string
		ownerSidsIC = append(ownerSidsIC, ownerSidsIIV)
	}

	// items.CollectionFormat: ""
	ownerSidsIS := swag.JoinByFormat(ownerSidsIC, "")

	return ownerSidsIS
}
