// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetGroupsParams creates a new GetGroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetGroupsParams() *GetGroupsParams {
	return &GetGroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetGroupsParamsWithTimeout creates a new GetGroupsParams object
// with the ability to set a timeout on a request.
func NewGetGroupsParamsWithTimeout(timeout time.Duration) *GetGroupsParams {
	return &GetGroupsParams{
		timeout: timeout,
	}
}

// NewGetGroupsParamsWithContext creates a new GetGroupsParams object
// with the ability to set a context for a request.
func NewGetGroupsParamsWithContext(ctx context.Context) *GetGroupsParams {
	return &GetGroupsParams{
		Context: ctx,
	}
}

// NewGetGroupsParamsWithHTTPClient creates a new GetGroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetGroupsParamsWithHTTPClient(client *http.Client) *GetGroupsParams {
	return &GetGroupsParams{
		HTTPClient: client,
	}
}

/*
GetGroupsParams contains all the parameters to send to the API endpoint

	for the get groups operation.

	Typically these are written to a http.Request.
*/
type GetGroupsParams struct {

	/* Domain.

	   Specifies the group domain to filter.
	*/
	Domain *string

	/* IncludeTenants.

	   IncludeTenants specifies if groups of all the tenants under the hierarchy of the logged in user's organization should be returned.
	*/
	IncludeTenants *bool

	/* MatchPartialNames.

	   If true, the names in group names are matched by any partial rather than exactly matched. Default is false.
	*/
	MatchPartialNames *bool

	/* Names.

	   Specifies a list of group names to filter.
	*/
	Names []string

	/* Roles.

	   Specifies a list of roles to filter.
	*/
	Roles []string

	/* Sids.

	   Specifies a list of sids to filter.
	*/
	Sids []string

	/* TenantIds.

	   TenantIds contains ids of the tenants for which groups are to be returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGroupsParams) WithDefaults() *GetGroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGroupsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get groups params
func (o *GetGroupsParams) WithTimeout(timeout time.Duration) *GetGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get groups params
func (o *GetGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get groups params
func (o *GetGroupsParams) WithContext(ctx context.Context) *GetGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get groups params
func (o *GetGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get groups params
func (o *GetGroupsParams) WithHTTPClient(client *http.Client) *GetGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get groups params
func (o *GetGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomain adds the domain to the get groups params
func (o *GetGroupsParams) WithDomain(domain *string) *GetGroupsParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the get groups params
func (o *GetGroupsParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithIncludeTenants adds the includeTenants to the get groups params
func (o *GetGroupsParams) WithIncludeTenants(includeTenants *bool) *GetGroupsParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the get groups params
func (o *GetGroupsParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithMatchPartialNames adds the matchPartialNames to the get groups params
func (o *GetGroupsParams) WithMatchPartialNames(matchPartialNames *bool) *GetGroupsParams {
	o.SetMatchPartialNames(matchPartialNames)
	return o
}

// SetMatchPartialNames adds the matchPartialNames to the get groups params
func (o *GetGroupsParams) SetMatchPartialNames(matchPartialNames *bool) {
	o.MatchPartialNames = matchPartialNames
}

// WithNames adds the names to the get groups params
func (o *GetGroupsParams) WithNames(names []string) *GetGroupsParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the get groups params
func (o *GetGroupsParams) SetNames(names []string) {
	o.Names = names
}

// WithRoles adds the roles to the get groups params
func (o *GetGroupsParams) WithRoles(roles []string) *GetGroupsParams {
	o.SetRoles(roles)
	return o
}

// SetRoles adds the roles to the get groups params
func (o *GetGroupsParams) SetRoles(roles []string) {
	o.Roles = roles
}

// WithSids adds the sids to the get groups params
func (o *GetGroupsParams) WithSids(sids []string) *GetGroupsParams {
	o.SetSids(sids)
	return o
}

// SetSids adds the sids to the get groups params
func (o *GetGroupsParams) SetSids(sids []string) {
	o.Sids = sids
}

// WithTenantIds adds the tenantIds to the get groups params
func (o *GetGroupsParams) WithTenantIds(tenantIds []string) *GetGroupsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get groups params
func (o *GetGroupsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Domain != nil {

		// query param domain
		var qrDomain string

		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {

			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.MatchPartialNames != nil {

		// query param matchPartialNames
		var qrMatchPartialNames bool

		if o.MatchPartialNames != nil {
			qrMatchPartialNames = *o.MatchPartialNames
		}
		qMatchPartialNames := swag.FormatBool(qrMatchPartialNames)
		if qMatchPartialNames != "" {

			if err := r.SetQueryParam("matchPartialNames", qMatchPartialNames); err != nil {
				return err
			}
		}
	}

	if o.Names != nil {

		// binding items for names
		joinedNames := o.bindParamNames(reg)

		// query array param names
		if err := r.SetQueryParam("names", joinedNames...); err != nil {
			return err
		}
	}

	if o.Roles != nil {

		// binding items for roles
		joinedRoles := o.bindParamRoles(reg)

		// query array param roles
		if err := r.SetQueryParam("roles", joinedRoles...); err != nil {
			return err
		}
	}

	if o.Sids != nil {

		// binding items for sids
		joinedSids := o.bindParamSids(reg)

		// query array param sids
		if err := r.SetQueryParam("sids", joinedSids...); err != nil {
			return err
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetGroups binds the parameter names
func (o *GetGroupsParams) bindParamNames(formats strfmt.Registry) []string {
	namesIR := o.Names

	var namesIC []string
	for _, namesIIR := range namesIR { // explode []string

		namesIIV := namesIIR // string as string
		namesIC = append(namesIC, namesIIV)
	}

	// items.CollectionFormat: ""
	namesIS := swag.JoinByFormat(namesIC, "")

	return namesIS
}

// bindParamGetGroups binds the parameter roles
func (o *GetGroupsParams) bindParamRoles(formats strfmt.Registry) []string {
	rolesIR := o.Roles

	var rolesIC []string
	for _, rolesIIR := range rolesIR { // explode []string

		rolesIIV := rolesIIR // string as string
		rolesIC = append(rolesIC, rolesIIV)
	}

	// items.CollectionFormat: ""
	rolesIS := swag.JoinByFormat(rolesIC, "")

	return rolesIS
}

// bindParamGetGroups binds the parameter sids
func (o *GetGroupsParams) bindParamSids(formats strfmt.Registry) []string {
	sidsIR := o.Sids

	var sidsIC []string
	for _, sidsIIR := range sidsIR { // explode []string

		sidsIIV := sidsIIR // string as string
		sidsIC = append(sidsIC, sidsIIV)
	}

	// items.CollectionFormat: ""
	sidsIS := swag.JoinByFormat(sidsIC, "")

	return sidsIS
}

// bindParamGetGroups binds the parameter tenantIds
func (o *GetGroupsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
