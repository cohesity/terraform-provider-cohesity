// Code generated by go-swagger; DO NOT EDIT.

package tenant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new tenant API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new tenant API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new tenant API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for tenant API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssignPropertiesToTenant(params *AssignPropertiesToTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssignPropertiesToTenantOK, error)

	CreateTenant(params *CreateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTenantCreated, error)

	DeleteTenant(params *DeleteTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTenantNoContent, error)

	GetAssignedPropertiesForTenant(params *GetAssignedPropertiesForTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAssignedPropertiesForTenantOK, error)

	GetOnPremTenantConfig(params *GetOnPremTenantConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnPremTenantConfigOK, error)

	GetTenantSwift(params *GetTenantSwiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantSwiftOK, error)

	ListTenants(params *ListTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTenantsOK, error)

	PerformTenantAction(params *PerformTenantActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PerformTenantActionOK, error)

	RegisterSwift(params *RegisterSwiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterSwiftNoContent, error)

	UnregisterSwift(params *UnregisterSwiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnregisterSwiftNoContent, error)

	UpdateOnPremTenantConfig(params *UpdateOnPremTenantConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOnPremTenantConfigOK, error)

	UpdateTenant(params *UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantOK, error)

	UpdateTenantSwift(params *UpdateTenantSwiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantSwiftOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	AssignPropertiesToTenant updates assginment of properties for a tenant

	```Unknown Privileges``` <br><br>Assign/Unassign properties like storage domain, entities, policies etc.

to the tenant.
The API expects a list of all the assignments (policies etc.) that are
supposed to be associated to the Tenant. The list of assignments passed
get assigned to the Tenant and anything else that was already assigned
gets unassigned.
In case a few objects fail the assignment and some objects get assigned,
error is returned for all assignments except for policies.
*/
func (a *Client) AssignPropertiesToTenant(params *AssignPropertiesToTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssignPropertiesToTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignPropertiesToTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssignPropertiesToTenant",
		Method:             "PUT",
		PathPattern:        "/tenants/{id}/assignments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignPropertiesToTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignPropertiesToTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignPropertiesToTenantDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTenant creates a new tenant

**Privileges:** ```ORGANIZATION_MODIFY``` <br><br>
*/
func (a *Client) CreateTenant(params *CreateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTenantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTenant",
		Method:             "POST",
		PathPattern:        "/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTenantDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTenant deletes tenant with given ID

```Unknown Privileges``` <br><br>
*/
func (a *Client) DeleteTenant(params *DeleteTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTenantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTenant",
		Method:             "DELETE",
		PathPattern:        "/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTenantNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTenantDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetAssignedPropertiesForTenant gets tenant assignments

	```Unknown Privileges``` <br><br>Get all assigned properties like storage domain, entities, policies,

objects, views etc for a given tenant.
*/
func (a *Client) GetAssignedPropertiesForTenant(params *GetAssignedPropertiesForTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAssignedPropertiesForTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssignedPropertiesForTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssignedPropertiesForTenant",
		Method:             "GET",
		PathPattern:        "/tenants/{id}/assignments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssignedPropertiesForTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssignedPropertiesForTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAssignedPropertiesForTenantDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetOnPremTenantConfig gets tenants config

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get Tenant related configurations for the cluster.
*/
func (a *Client) GetOnPremTenantConfig(params *GetOnPremTenantConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnPremTenantConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnPremTenantConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnPremTenantConfig",
		Method:             "GET",
		PathPattern:        "/clusters/tenant-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnPremTenantConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnPremTenantConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOnPremTenantConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantSwift gets a swift configuration

**Privileges:** ```KEYSTONE_VIEW``` <br><br>Get a Swift configuration.
*/
func (a *Client) GetTenantSwift(params *GetTenantSwiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantSwiftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantSwiftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTenantSwift",
		Method:             "GET",
		PathPattern:        "/tenants/swift",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTenantSwiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantSwiftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantSwiftDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListTenants gets a list of tenants

**Privileges:** ```ORGANIZATION_VIEW``` <br><br>
*/
func (a *Client) ListTenants(params *ListTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTenantsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTenants",
		Method:             "GET",
		PathPattern:        "/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTenantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTenantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTenantsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PerformTenantAction performs actions on a tenant

```Unknown Privileges``` <br><br>Perform actions like activate and deactivate on a given Tenant.
*/
func (a *Client) PerformTenantAction(params *PerformTenantActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PerformTenantActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformTenantActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PerformTenantAction",
		Method:             "POST",
		PathPattern:        "/tenants/{id}/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformTenantActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PerformTenantActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PerformTenantActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RegisterSwift registers swift service on a keystone server

**Privileges:** ```KEYSTONE_MODIFY``` <br><br>Register Swift service on Keystone server.
*/
func (a *Client) RegisterSwift(params *RegisterSwiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterSwiftNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterSwiftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterSwift",
		Method:             "POST",
		PathPattern:        "/tenants/swift/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterSwiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterSwiftNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterSwiftDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnregisterSwift unregisters swift service from a keystone server

**Privileges:** ```KEYSTONE_MODIFY``` <br><br>Unregister Swift service from Keystone server.
*/
func (a *Client) UnregisterSwift(params *UnregisterSwiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnregisterSwiftNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnregisterSwiftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UnregisterSwift",
		Method:             "POST",
		PathPattern:        "/tenants/swift/unregister",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnregisterSwiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnregisterSwiftNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnregisterSwiftDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateOnPremTenantConfig updates tenants config

**Privileges:** ```CLUSTER_MODIFY``` <br><br>Update Tenant related configurations for the cluster.
*/
func (a *Client) UpdateOnPremTenantConfig(params *UpdateOnPremTenantConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOnPremTenantConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOnPremTenantConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateOnPremTenantConfig",
		Method:             "POST",
		PathPattern:        "/clusters/tenant-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOnPremTenantConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOnPremTenantConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateOnPremTenantConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTenant updates tenant

```Unknown Privileges``` <br><br>Update Tenant's properties.
*/
func (a *Client) UpdateTenant(params *UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenant",
		Method:             "PUT",
		PathPattern:        "/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTenantSwift updates a swift configuration

**Privileges:** ```KEYSTONE_MODIFY``` <br><br>Update a Swift configuration.
*/
func (a *Client) UpdateTenantSwift(params *UpdateTenantSwiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantSwiftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantSwiftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTenantSwift",
		Method:             "PUT",
		PathPattern:        "/tenants/swift",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantSwiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantSwiftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTenantSwiftDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
