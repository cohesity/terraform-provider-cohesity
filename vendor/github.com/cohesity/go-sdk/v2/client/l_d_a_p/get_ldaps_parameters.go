// Code generated by go-swagger; DO NOT EDIT.

package l_d_a_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLdapsParams creates a new GetLdapsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLdapsParams() *GetLdapsParams {
	return &GetLdapsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLdapsParamsWithTimeout creates a new GetLdapsParams object
// with the ability to set a timeout on a request.
func NewGetLdapsParamsWithTimeout(timeout time.Duration) *GetLdapsParams {
	return &GetLdapsParams{
		timeout: timeout,
	}
}

// NewGetLdapsParamsWithContext creates a new GetLdapsParams object
// with the ability to set a context for a request.
func NewGetLdapsParamsWithContext(ctx context.Context) *GetLdapsParams {
	return &GetLdapsParams{
		Context: ctx,
	}
}

// NewGetLdapsParamsWithHTTPClient creates a new GetLdapsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLdapsParamsWithHTTPClient(client *http.Client) *GetLdapsParams {
	return &GetLdapsParams{
		HTTPClient: client,
	}
}

/*
GetLdapsParams contains all the parameters to send to the API endpoint

	for the get ldaps operation.

	Typically these are written to a http.Request.
*/
type GetLdapsParams struct {

	/* Ids.

	   Specifies a list of ids to filter.
	*/
	Ids []int64

	/* IncludeTenants.

	   IncludeTenants specifies if LDAPs of all the tenants under the hierarchy of the logged in user's organization should be returned.
	*/
	IncludeTenants *bool

	/* TenantIds.

	   TenantIds contains ids of the tenants for which LDAPs are to be returned.
	*/
	TenantIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get ldaps params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLdapsParams) WithDefaults() *GetLdapsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get ldaps params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLdapsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get ldaps params
func (o *GetLdapsParams) WithTimeout(timeout time.Duration) *GetLdapsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ldaps params
func (o *GetLdapsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ldaps params
func (o *GetLdapsParams) WithContext(ctx context.Context) *GetLdapsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ldaps params
func (o *GetLdapsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ldaps params
func (o *GetLdapsParams) WithHTTPClient(client *http.Client) *GetLdapsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ldaps params
func (o *GetLdapsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the get ldaps params
func (o *GetLdapsParams) WithIds(ids []int64) *GetLdapsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get ldaps params
func (o *GetLdapsParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithIncludeTenants adds the includeTenants to the get ldaps params
func (o *GetLdapsParams) WithIncludeTenants(includeTenants *bool) *GetLdapsParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the get ldaps params
func (o *GetLdapsParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithTenantIds adds the tenantIds to the get ldaps params
func (o *GetLdapsParams) WithTenantIds(tenantIds []string) *GetLdapsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get ldaps params
func (o *GetLdapsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetLdapsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetLdaps binds the parameter ids
func (o *GetLdapsParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetLdaps binds the parameter tenantIds
func (o *GetLdapsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
