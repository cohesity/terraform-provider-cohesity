// Code generated by go-swagger; DO NOT EDIT.

package data_tiering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCapacityTrendAnalysisParams creates a new GetCapacityTrendAnalysisParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCapacityTrendAnalysisParams() *GetCapacityTrendAnalysisParams {
	return &GetCapacityTrendAnalysisParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCapacityTrendAnalysisParamsWithTimeout creates a new GetCapacityTrendAnalysisParams object
// with the ability to set a timeout on a request.
func NewGetCapacityTrendAnalysisParamsWithTimeout(timeout time.Duration) *GetCapacityTrendAnalysisParams {
	return &GetCapacityTrendAnalysisParams{
		timeout: timeout,
	}
}

// NewGetCapacityTrendAnalysisParamsWithContext creates a new GetCapacityTrendAnalysisParams object
// with the ability to set a context for a request.
func NewGetCapacityTrendAnalysisParamsWithContext(ctx context.Context) *GetCapacityTrendAnalysisParams {
	return &GetCapacityTrendAnalysisParams{
		Context: ctx,
	}
}

// NewGetCapacityTrendAnalysisParamsWithHTTPClient creates a new GetCapacityTrendAnalysisParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCapacityTrendAnalysisParamsWithHTTPClient(client *http.Client) *GetCapacityTrendAnalysisParams {
	return &GetCapacityTrendAnalysisParams{
		HTTPClient: client,
	}
}

/*
GetCapacityTrendAnalysisParams contains all the parameters to send to the API endpoint

	for the get capacity trend analysis operation.

	Typically these are written to a http.Request.
*/
type GetCapacityTrendAnalysisParams struct {

	/* EndTimeUsecs.

	   Filter by a end time. Specify the end time as a Unix epoch Timestamp (in microseconds).

	   Format: int64
	*/
	EndTimeUsecs *int64

	/* SourceID.

	   Filter by source id. If specified, this will only return the capacity trend analysis of the specific source.

	   Format: int64
	*/
	SourceID *int64

	/* StartTimeUsecs.

	   Filter by a start time. Specify the start time as a Unix epoch Timestamp (in microseconds).

	   Format: int64
	*/
	StartTimeUsecs *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get capacity trend analysis params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCapacityTrendAnalysisParams) WithDefaults() *GetCapacityTrendAnalysisParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get capacity trend analysis params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCapacityTrendAnalysisParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) WithTimeout(timeout time.Duration) *GetCapacityTrendAnalysisParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) WithContext(ctx context.Context) *GetCapacityTrendAnalysisParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) WithHTTPClient(client *http.Client) *GetCapacityTrendAnalysisParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTimeUsecs adds the endTimeUsecs to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) WithEndTimeUsecs(endTimeUsecs *int64) *GetCapacityTrendAnalysisParams {
	o.SetEndTimeUsecs(endTimeUsecs)
	return o
}

// SetEndTimeUsecs adds the endTimeUsecs to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) SetEndTimeUsecs(endTimeUsecs *int64) {
	o.EndTimeUsecs = endTimeUsecs
}

// WithSourceID adds the sourceID to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) WithSourceID(sourceID *int64) *GetCapacityTrendAnalysisParams {
	o.SetSourceID(sourceID)
	return o
}

// SetSourceID adds the sourceId to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) SetSourceID(sourceID *int64) {
	o.SourceID = sourceID
}

// WithStartTimeUsecs adds the startTimeUsecs to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) WithStartTimeUsecs(startTimeUsecs *int64) *GetCapacityTrendAnalysisParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the get capacity trend analysis params
func (o *GetCapacityTrendAnalysisParams) SetStartTimeUsecs(startTimeUsecs *int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WriteToRequest writes these params to a swagger request
func (o *GetCapacityTrendAnalysisParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTimeUsecs != nil {

		// query param endTimeUsecs
		var qrEndTimeUsecs int64

		if o.EndTimeUsecs != nil {
			qrEndTimeUsecs = *o.EndTimeUsecs
		}
		qEndTimeUsecs := swag.FormatInt64(qrEndTimeUsecs)
		if qEndTimeUsecs != "" {

			if err := r.SetQueryParam("endTimeUsecs", qEndTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.SourceID != nil {

		// query param sourceId
		var qrSourceID int64

		if o.SourceID != nil {
			qrSourceID = *o.SourceID
		}
		qSourceID := swag.FormatInt64(qrSourceID)
		if qSourceID != "" {

			if err := r.SetQueryParam("sourceId", qSourceID); err != nil {
				return err
			}
		}
	}

	if o.StartTimeUsecs != nil {

		// query param startTimeUsecs
		var qrStartTimeUsecs int64

		if o.StartTimeUsecs != nil {
			qrStartTimeUsecs = *o.StartTimeUsecs
		}
		qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
		if qStartTimeUsecs != "" {

			if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
