// Code generated by go-swagger; DO NOT EDIT.

package data_tiering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDataTieringAnalysisGroupRunsParams creates a new GetDataTieringAnalysisGroupRunsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDataTieringAnalysisGroupRunsParams() *GetDataTieringAnalysisGroupRunsParams {
	return &GetDataTieringAnalysisGroupRunsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDataTieringAnalysisGroupRunsParamsWithTimeout creates a new GetDataTieringAnalysisGroupRunsParams object
// with the ability to set a timeout on a request.
func NewGetDataTieringAnalysisGroupRunsParamsWithTimeout(timeout time.Duration) *GetDataTieringAnalysisGroupRunsParams {
	return &GetDataTieringAnalysisGroupRunsParams{
		timeout: timeout,
	}
}

// NewGetDataTieringAnalysisGroupRunsParamsWithContext creates a new GetDataTieringAnalysisGroupRunsParams object
// with the ability to set a context for a request.
func NewGetDataTieringAnalysisGroupRunsParamsWithContext(ctx context.Context) *GetDataTieringAnalysisGroupRunsParams {
	return &GetDataTieringAnalysisGroupRunsParams{
		Context: ctx,
	}
}

// NewGetDataTieringAnalysisGroupRunsParamsWithHTTPClient creates a new GetDataTieringAnalysisGroupRunsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDataTieringAnalysisGroupRunsParamsWithHTTPClient(client *http.Client) *GetDataTieringAnalysisGroupRunsParams {
	return &GetDataTieringAnalysisGroupRunsParams{
		HTTPClient: client,
	}
}

/*
GetDataTieringAnalysisGroupRunsParams contains all the parameters to send to the API endpoint

	for the get data tiering analysis group runs operation.

	Typically these are written to a http.Request.
*/
type GetDataTieringAnalysisGroupRunsParams struct {

	/* ID.

	   Specifies a unique id of the data tiering analysis group.
	*/
	ID string

	/* RunIds.

	   Filter by a list of analysis group run ids.
	*/
	RunIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get data tiering analysis group runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDataTieringAnalysisGroupRunsParams) WithDefaults() *GetDataTieringAnalysisGroupRunsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get data tiering analysis group runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDataTieringAnalysisGroupRunsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get data tiering analysis group runs params
func (o *GetDataTieringAnalysisGroupRunsParams) WithTimeout(timeout time.Duration) *GetDataTieringAnalysisGroupRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get data tiering analysis group runs params
func (o *GetDataTieringAnalysisGroupRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get data tiering analysis group runs params
func (o *GetDataTieringAnalysisGroupRunsParams) WithContext(ctx context.Context) *GetDataTieringAnalysisGroupRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get data tiering analysis group runs params
func (o *GetDataTieringAnalysisGroupRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get data tiering analysis group runs params
func (o *GetDataTieringAnalysisGroupRunsParams) WithHTTPClient(client *http.Client) *GetDataTieringAnalysisGroupRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get data tiering analysis group runs params
func (o *GetDataTieringAnalysisGroupRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get data tiering analysis group runs params
func (o *GetDataTieringAnalysisGroupRunsParams) WithID(id string) *GetDataTieringAnalysisGroupRunsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get data tiering analysis group runs params
func (o *GetDataTieringAnalysisGroupRunsParams) SetID(id string) {
	o.ID = id
}

// WithRunIds adds the runIds to the get data tiering analysis group runs params
func (o *GetDataTieringAnalysisGroupRunsParams) WithRunIds(runIds []string) *GetDataTieringAnalysisGroupRunsParams {
	o.SetRunIds(runIds)
	return o
}

// SetRunIds adds the runIds to the get data tiering analysis group runs params
func (o *GetDataTieringAnalysisGroupRunsParams) SetRunIds(runIds []string) {
	o.RunIds = runIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetDataTieringAnalysisGroupRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.RunIds != nil {

		// binding items for runIds
		joinedRunIds := o.bindParamRunIds(reg)

		// query array param runIds
		if err := r.SetQueryParam("runIds", joinedRunIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetDataTieringAnalysisGroupRuns binds the parameter runIds
func (o *GetDataTieringAnalysisGroupRunsParams) bindParamRunIds(formats strfmt.Registry) []string {
	runIdsIR := o.RunIds

	var runIdsIC []string
	for _, runIdsIIR := range runIdsIR { // explode []string

		runIdsIIV := runIdsIIR // string as string
		runIdsIC = append(runIdsIC, runIdsIIV)
	}

	// items.CollectionFormat: ""
	runIdsIS := swag.JoinByFormat(runIdsIC, "")

	return runIdsIS
}
