// Code generated by go-swagger; DO NOT EDIT.

package data_tiering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new data tiering API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new data tiering API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new data tiering API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for data tiering API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelDataTieringAnalysisGroupRun(params *CancelDataTieringAnalysisGroupRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelDataTieringAnalysisGroupRunAccepted, error)

	CancelDataTieringTaskRun(params *CancelDataTieringTaskRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelDataTieringTaskRunAccepted, error)

	CreateDataTieringAnalysisGroup(params *CreateDataTieringAnalysisGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataTieringAnalysisGroupCreated, error)

	CreateDataTieringAnalysisGroupRun(params *CreateDataTieringAnalysisGroupRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataTieringAnalysisGroupRunAccepted, error)

	CreateDataTieringTask(params *CreateDataTieringTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataTieringTaskCreated, error)

	CreateDataTieringTaskRun(params *CreateDataTieringTaskRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataTieringTaskRunAccepted, error)

	DeleteDataTieringAnalysisGroup(params *DeleteDataTieringAnalysisGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataTieringAnalysisGroupNoContent, error)

	DeleteDataTieringTask(params *DeleteDataTieringTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataTieringTaskNoContent, error)

	GetCapacityTrendAnalysis(params *GetCapacityTrendAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCapacityTrendAnalysisOK, error)

	GetDataTieringAnalysisGroupByID(params *GetDataTieringAnalysisGroupByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringAnalysisGroupByIDOK, error)

	GetDataTieringAnalysisGroupRuns(params *GetDataTieringAnalysisGroupRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringAnalysisGroupRunsOK, error)

	GetDataTieringAnalysisGroups(params *GetDataTieringAnalysisGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringAnalysisGroupsOK, error)

	GetDataTieringAnalysisGroupsDefaultConfig(params *GetDataTieringAnalysisGroupsDefaultConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringAnalysisGroupsDefaultConfigOK, error)

	GetDataTieringTaskByID(params *GetDataTieringTaskByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringTaskByIDOK, error)

	GetDataTieringTasks(params *GetDataTieringTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringTasksOK, error)

	UpdateDataTieringAnalysisGroup(params *UpdateDataTieringAnalysisGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataTieringAnalysisGroupOK, error)

	UpdateDataTieringAnalysisGroupTagsConfig(params *UpdateDataTieringAnalysisGroupTagsConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataTieringAnalysisGroupTagsConfigOK, error)

	UpdateDataTieringAnalysisGroupsState(params *UpdateDataTieringAnalysisGroupsStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataTieringAnalysisGroupsStateOK, error)

	UpdateDataTieringTask(params *UpdateDataTieringTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataTieringTaskOK, error)

	UpdateDataTieringTasksState(params *UpdateDataTieringTasksStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataTieringTasksStateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CancelDataTieringAnalysisGroupRun cancels data tiering analysis run

	**Privileges:** ```PROTECTION_JOB_OPERATE``` <br><br>Cancel data tiering analysis run for given analysis group ID

and run ID
*/
func (a *Client) CancelDataTieringAnalysisGroupRun(params *CancelDataTieringAnalysisGroupRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelDataTieringAnalysisGroupRunAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelDataTieringAnalysisGroupRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelDataTieringAnalysisGroupRun",
		Method:             "POST",
		PathPattern:        "/data-tiering/analysis-groups/{id}/runs/{runId}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelDataTieringAnalysisGroupRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelDataTieringAnalysisGroupRunAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelDataTieringAnalysisGroupRunDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CancelDataTieringTaskRun cancels data tiering task

**Privileges:** ```PROTECTION_JOB_OPERATE``` <br><br>Cancel data tiering task run for given data tiering task id and run id.
*/
func (a *Client) CancelDataTieringTaskRun(params *CancelDataTieringTaskRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelDataTieringTaskRunAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelDataTieringTaskRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelDataTieringTaskRun",
		Method:             "POST",
		PathPattern:        "/data-tiering/tasks/{id}/runs/{runId}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelDataTieringTaskRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelDataTieringTaskRunAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelDataTieringTaskRunDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDataTieringAnalysisGroup creates a data tiering analysis group

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Create a data tiering analysis group.
*/
func (a *Client) CreateDataTieringAnalysisGroup(params *CreateDataTieringAnalysisGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataTieringAnalysisGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataTieringAnalysisGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataTieringAnalysisGroup",
		Method:             "POST",
		PathPattern:        "/data-tiering/analysis-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataTieringAnalysisGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataTieringAnalysisGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDataTieringAnalysisGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDataTieringAnalysisGroupRun creates a data tiering analysis group run

**Privileges:** ```PROTECTION_JOB_OPERATE``` <br><br>Create a data tiering analysis group run.
*/
func (a *Client) CreateDataTieringAnalysisGroupRun(params *CreateDataTieringAnalysisGroupRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataTieringAnalysisGroupRunAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataTieringAnalysisGroupRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataTieringAnalysisGroupRun",
		Method:             "POST",
		PathPattern:        "/data-tiering/analysis-groups/{id}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataTieringAnalysisGroupRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataTieringAnalysisGroupRunAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDataTieringAnalysisGroupRunDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDataTieringTask creates a data tiering task

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Create a data tiering task.
*/
func (a *Client) CreateDataTieringTask(params *CreateDataTieringTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataTieringTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataTieringTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataTieringTask",
		Method:             "POST",
		PathPattern:        "/data-tiering/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataTieringTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataTieringTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDataTieringTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDataTieringTaskRun creates a data tiering tasks run

**Privileges:** ```PROTECTION_JOB_OPERATE``` <br><br>Create a data tiering tasks run.
*/
func (a *Client) CreateDataTieringTaskRun(params *CreateDataTieringTaskRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataTieringTaskRunAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataTieringTaskRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataTieringTaskRun",
		Method:             "POST",
		PathPattern:        "/data-tiering/tasks/{id}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataTieringTaskRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataTieringTaskRunAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDataTieringTaskRunDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	DeleteDataTieringAnalysisGroup deletes data tiering analysis group

	**Privileges:** ```PROTECTION_MODIFY``` <br><br>Returns NoContentResponse if the data tiering analysis group is

deleted.
*/
func (a *Client) DeleteDataTieringAnalysisGroup(params *DeleteDataTieringAnalysisGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataTieringAnalysisGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataTieringAnalysisGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataTieringAnalysisGroup",
		Method:             "DELETE",
		PathPattern:        "/data-tiering/analysis-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataTieringAnalysisGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataTieringAnalysisGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDataTieringAnalysisGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDataTieringTask deletes the data tiering task

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Returns Success if the data tiering task is deleted.
*/
func (a *Client) DeleteDataTieringTask(params *DeleteDataTieringTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataTieringTaskNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataTieringTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataTieringTask",
		Method:             "DELETE",
		PathPattern:        "/data-tiering/tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataTieringTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataTieringTaskNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDataTieringTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetCapacityTrendAnalysis gets capacity trend analysis for all sources or a specific source

	**Privileges:** ```PROTECTION_VIEW``` <br><br>Get capacity trend analysis for the given time range, and for the given

source or set of sources.
*/
func (a *Client) GetCapacityTrendAnalysis(params *GetCapacityTrendAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCapacityTrendAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCapacityTrendAnalysisParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCapacityTrendAnalysis",
		Method:             "GET",
		PathPattern:        "/data-tiering/capacity-trend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCapacityTrendAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCapacityTrendAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCapacityTrendAnalysisDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataTieringAnalysisGroupByID gets data tiering analysis group by id

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get data tiering analysis group by id.
*/
func (a *Client) GetDataTieringAnalysisGroupByID(params *GetDataTieringAnalysisGroupByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringAnalysisGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataTieringAnalysisGroupByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataTieringAnalysisGroupById",
		Method:             "GET",
		PathPattern:        "/data-tiering/analysis-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataTieringAnalysisGroupByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataTieringAnalysisGroupByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataTieringAnalysisGroupByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataTieringAnalysisGroupRuns gets data tiering analysis group runs

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get data tiering analysis group runs for an analysis group.
*/
func (a *Client) GetDataTieringAnalysisGroupRuns(params *GetDataTieringAnalysisGroupRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringAnalysisGroupRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataTieringAnalysisGroupRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataTieringAnalysisGroupRuns",
		Method:             "GET",
		PathPattern:        "/data-tiering/analysis-groups/{id}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataTieringAnalysisGroupRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataTieringAnalysisGroupRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataTieringAnalysisGroupRunsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataTieringAnalysisGroups gets the list of data tiering analysis groups

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get list of all data tiering analysis groups.
*/
func (a *Client) GetDataTieringAnalysisGroups(params *GetDataTieringAnalysisGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringAnalysisGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataTieringAnalysisGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataTieringAnalysisGroups",
		Method:             "GET",
		PathPattern:        "/data-tiering/analysis-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataTieringAnalysisGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataTieringAnalysisGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataTieringAnalysisGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetDataTieringAnalysisGroupsDefaultConfig gets the default config of data tiering analysis groups

	**Privileges:** ```PROTECTION_VIEW``` <br><br>Get default grouping configuration for data tiering

analysis groups.
*/
func (a *Client) GetDataTieringAnalysisGroupsDefaultConfig(params *GetDataTieringAnalysisGroupsDefaultConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringAnalysisGroupsDefaultConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataTieringAnalysisGroupsDefaultConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataTieringAnalysisGroupsDefaultConfig",
		Method:             "GET",
		PathPattern:        "/data-tiering/analysis-groups/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataTieringAnalysisGroupsDefaultConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataTieringAnalysisGroupsDefaultConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataTieringAnalysisGroupsDefaultConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataTieringTaskByID gets data tiering task by id

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get data tiering task by id.
*/
func (a *Client) GetDataTieringTaskByID(params *GetDataTieringTaskByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringTaskByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataTieringTaskByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataTieringTaskById",
		Method:             "GET",
		PathPattern:        "/data-tiering/tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataTieringTaskByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataTieringTaskByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataTieringTaskByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataTieringTasks gets the list of data tiering tasks

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get the list of data tiering tasks.
*/
func (a *Client) GetDataTieringTasks(params *GetDataTieringTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataTieringTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataTieringTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataTieringTasks",
		Method:             "GET",
		PathPattern:        "/data-tiering/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataTieringTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataTieringTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataTieringTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDataTieringAnalysisGroup updates a data tiering analysis group currently it supports updating sources and schedule only

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Update a data tiering analysis group.
*/
func (a *Client) UpdateDataTieringAnalysisGroup(params *UpdateDataTieringAnalysisGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataTieringAnalysisGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDataTieringAnalysisGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDataTieringAnalysisGroup",
		Method:             "PUT",
		PathPattern:        "/data-tiering/analysis-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDataTieringAnalysisGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDataTieringAnalysisGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDataTieringAnalysisGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDataTieringAnalysisGroupTagsConfig updates data tiering analysis group config

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Update data tiering analysis group config.
*/
func (a *Client) UpdateDataTieringAnalysisGroupTagsConfig(params *UpdateDataTieringAnalysisGroupTagsConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataTieringAnalysisGroupTagsConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDataTieringAnalysisGroupTagsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDataTieringAnalysisGroupTagsConfig",
		Method:             "PUT",
		PathPattern:        "/data-tiering/analysis-groups/{id}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDataTieringAnalysisGroupTagsConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDataTieringAnalysisGroupTagsConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDataTieringAnalysisGroupTagsConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateDataTieringAnalysisGroupsState updates data tiering analysis groups state

	**Privileges:** ```PROTECTION_JOB_OPERATE``` <br><br>Perform actions like pause or resume on the data tiering analysis

groups for the specified sources.
*/
func (a *Client) UpdateDataTieringAnalysisGroupsState(params *UpdateDataTieringAnalysisGroupsStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataTieringAnalysisGroupsStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDataTieringAnalysisGroupsStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDataTieringAnalysisGroupsState",
		Method:             "POST",
		PathPattern:        "/data-tiering/analysis-groups/states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDataTieringAnalysisGroupsStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDataTieringAnalysisGroupsStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDataTieringAnalysisGroupsStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDataTieringTask updates a data tiering task

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Update a data tiering task.
*/
func (a *Client) UpdateDataTieringTask(params *UpdateDataTieringTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataTieringTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDataTieringTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDataTieringTask",
		Method:             "PUT",
		PathPattern:        "/data-tiering/tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDataTieringTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDataTieringTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDataTieringTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDataTieringTasksState updates data tiering source analysis tasks state

**Privileges:** ```PROTECTION_JOB_OPERATE``` <br><br>Perform actions like pause or resume on the data tiering tasks.
*/
func (a *Client) UpdateDataTieringTasksState(params *UpdateDataTieringTasksStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDataTieringTasksStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDataTieringTasksStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDataTieringTasksState",
		Method:             "POST",
		PathPattern:        "/data-tiering/tasks/states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDataTieringTasksStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDataTieringTasksStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDataTieringTasksStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
