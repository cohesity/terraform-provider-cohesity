// Code generated by go-swagger; DO NOT EDIT.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetMicrosoft365SelfServiceConfigParams creates a new GetMicrosoft365SelfServiceConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMicrosoft365SelfServiceConfigParams() *GetMicrosoft365SelfServiceConfigParams {
	return &GetMicrosoft365SelfServiceConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMicrosoft365SelfServiceConfigParamsWithTimeout creates a new GetMicrosoft365SelfServiceConfigParams object
// with the ability to set a timeout on a request.
func NewGetMicrosoft365SelfServiceConfigParamsWithTimeout(timeout time.Duration) *GetMicrosoft365SelfServiceConfigParams {
	return &GetMicrosoft365SelfServiceConfigParams{
		timeout: timeout,
	}
}

// NewGetMicrosoft365SelfServiceConfigParamsWithContext creates a new GetMicrosoft365SelfServiceConfigParams object
// with the ability to set a context for a request.
func NewGetMicrosoft365SelfServiceConfigParamsWithContext(ctx context.Context) *GetMicrosoft365SelfServiceConfigParams {
	return &GetMicrosoft365SelfServiceConfigParams{
		Context: ctx,
	}
}

// NewGetMicrosoft365SelfServiceConfigParamsWithHTTPClient creates a new GetMicrosoft365SelfServiceConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMicrosoft365SelfServiceConfigParamsWithHTTPClient(client *http.Client) *GetMicrosoft365SelfServiceConfigParams {
	return &GetMicrosoft365SelfServiceConfigParams{
		HTTPClient: client,
	}
}

/*
GetMicrosoft365SelfServiceConfigParams contains all the parameters to send to the API endpoint

	for the get microsoft365 self service config operation.

	Typically these are written to a http.Request.
*/
type GetMicrosoft365SelfServiceConfigParams struct {

	/* TenantID.

	   Specifies the Cohesity Tenant ID for the source owner.
	*/
	TenantID string

	/* WorkloadType.

	   Specifies the workload type as filter for fetching Self-Service configuration types.
	*/
	WorkloadType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get microsoft365 self service config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMicrosoft365SelfServiceConfigParams) WithDefaults() *GetMicrosoft365SelfServiceConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get microsoft365 self service config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMicrosoft365SelfServiceConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get microsoft365 self service config params
func (o *GetMicrosoft365SelfServiceConfigParams) WithTimeout(timeout time.Duration) *GetMicrosoft365SelfServiceConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get microsoft365 self service config params
func (o *GetMicrosoft365SelfServiceConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get microsoft365 self service config params
func (o *GetMicrosoft365SelfServiceConfigParams) WithContext(ctx context.Context) *GetMicrosoft365SelfServiceConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get microsoft365 self service config params
func (o *GetMicrosoft365SelfServiceConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get microsoft365 self service config params
func (o *GetMicrosoft365SelfServiceConfigParams) WithHTTPClient(client *http.Client) *GetMicrosoft365SelfServiceConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get microsoft365 self service config params
func (o *GetMicrosoft365SelfServiceConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTenantID adds the tenantID to the get microsoft365 self service config params
func (o *GetMicrosoft365SelfServiceConfigParams) WithTenantID(tenantID string) *GetMicrosoft365SelfServiceConfigParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the get microsoft365 self service config params
func (o *GetMicrosoft365SelfServiceConfigParams) SetTenantID(tenantID string) {
	o.TenantID = tenantID
}

// WithWorkloadType adds the workloadType to the get microsoft365 self service config params
func (o *GetMicrosoft365SelfServiceConfigParams) WithWorkloadType(workloadType *string) *GetMicrosoft365SelfServiceConfigParams {
	o.SetWorkloadType(workloadType)
	return o
}

// SetWorkloadType adds the workloadType to the get microsoft365 self service config params
func (o *GetMicrosoft365SelfServiceConfigParams) SetWorkloadType(workloadType *string) {
	o.WorkloadType = workloadType
}

// WriteToRequest writes these params to a swagger request
func (o *GetMicrosoft365SelfServiceConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param tenantId
	qrTenantID := o.TenantID
	qTenantID := qrTenantID
	if qTenantID != "" {

		if err := r.SetQueryParam("tenantId", qTenantID); err != nil {
			return err
		}
	}

	if o.WorkloadType != nil {

		// query param workloadType
		var qrWorkloadType string

		if o.WorkloadType != nil {
			qrWorkloadType = *o.WorkloadType
		}
		qWorkloadType := qrWorkloadType
		if qWorkloadType != "" {

			if err := r.SetQueryParam("workloadType", qWorkloadType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
