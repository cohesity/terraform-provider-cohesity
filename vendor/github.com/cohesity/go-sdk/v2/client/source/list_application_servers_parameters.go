// Code generated by go-swagger; DO NOT EDIT.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListApplicationServersParams creates a new ListApplicationServersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListApplicationServersParams() *ListApplicationServersParams {
	return &ListApplicationServersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListApplicationServersParamsWithTimeout creates a new ListApplicationServersParams object
// with the ability to set a timeout on a request.
func NewListApplicationServersParamsWithTimeout(timeout time.Duration) *ListApplicationServersParams {
	return &ListApplicationServersParams{
		timeout: timeout,
	}
}

// NewListApplicationServersParamsWithContext creates a new ListApplicationServersParams object
// with the ability to set a context for a request.
func NewListApplicationServersParamsWithContext(ctx context.Context) *ListApplicationServersParams {
	return &ListApplicationServersParams{
		Context: ctx,
	}
}

// NewListApplicationServersParamsWithHTTPClient creates a new ListApplicationServersParams object
// with the ability to set a custom HTTPClient for a request.
func NewListApplicationServersParamsWithHTTPClient(client *http.Client) *ListApplicationServersParams {
	return &ListApplicationServersParams{
		HTTPClient: client,
	}
}

/*
ListApplicationServersParams contains all the parameters to send to the API endpoint

	for the list application servers operation.

	Typically these are written to a http.Request.
*/
type ListApplicationServersParams struct {

	/* AfterCursorEntityID.

	   Specifies the entity id starting from which the items are to be returned

	   Format: int64
	*/
	AfterCursorEntityID *int64

	/* ApplicationEnvironment.

	   Specifies the types of applications such as 'kSQL', 'kExchange', 'kAD' etc. running on the Protection Source.
	*/
	ApplicationEnvironment string

	/* BeforeCursorEntityID.

	   Specifies the entity id upto which the items are to be returned

	   Format: int64
	*/
	BeforeCursorEntityID *int64

	/* Environment.

	   Specifies the environment of the Protection Source tree.
	*/
	Environment *string

	/* NextEntityID.

	   Specifies the entity id for the Node at any level within the Source entity hierarchy whose children are to be paginated.

	   Format: int64
	*/
	NextEntityID *int64

	/* NodeID.

	   Specifies the Protection Source Id of the entity in the Protection Source tree hosting the applications.

	   Format: int64
	*/
	NodeID *int64

	/* PageSize.

	   Specifies the maximum number of entities to be returned within the page.

	   Format: int64
	*/
	PageSize *int64

	/* RootNodeID.

	   Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server.

	   Format: int64
	*/
	RootNodeID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list application servers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListApplicationServersParams) WithDefaults() *ListApplicationServersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list application servers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListApplicationServersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list application servers params
func (o *ListApplicationServersParams) WithTimeout(timeout time.Duration) *ListApplicationServersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list application servers params
func (o *ListApplicationServersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list application servers params
func (o *ListApplicationServersParams) WithContext(ctx context.Context) *ListApplicationServersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list application servers params
func (o *ListApplicationServersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list application servers params
func (o *ListApplicationServersParams) WithHTTPClient(client *http.Client) *ListApplicationServersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list application servers params
func (o *ListApplicationServersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfterCursorEntityID adds the afterCursorEntityID to the list application servers params
func (o *ListApplicationServersParams) WithAfterCursorEntityID(afterCursorEntityID *int64) *ListApplicationServersParams {
	o.SetAfterCursorEntityID(afterCursorEntityID)
	return o
}

// SetAfterCursorEntityID adds the afterCursorEntityId to the list application servers params
func (o *ListApplicationServersParams) SetAfterCursorEntityID(afterCursorEntityID *int64) {
	o.AfterCursorEntityID = afterCursorEntityID
}

// WithApplicationEnvironment adds the applicationEnvironment to the list application servers params
func (o *ListApplicationServersParams) WithApplicationEnvironment(applicationEnvironment string) *ListApplicationServersParams {
	o.SetApplicationEnvironment(applicationEnvironment)
	return o
}

// SetApplicationEnvironment adds the applicationEnvironment to the list application servers params
func (o *ListApplicationServersParams) SetApplicationEnvironment(applicationEnvironment string) {
	o.ApplicationEnvironment = applicationEnvironment
}

// WithBeforeCursorEntityID adds the beforeCursorEntityID to the list application servers params
func (o *ListApplicationServersParams) WithBeforeCursorEntityID(beforeCursorEntityID *int64) *ListApplicationServersParams {
	o.SetBeforeCursorEntityID(beforeCursorEntityID)
	return o
}

// SetBeforeCursorEntityID adds the beforeCursorEntityId to the list application servers params
func (o *ListApplicationServersParams) SetBeforeCursorEntityID(beforeCursorEntityID *int64) {
	o.BeforeCursorEntityID = beforeCursorEntityID
}

// WithEnvironment adds the environment to the list application servers params
func (o *ListApplicationServersParams) WithEnvironment(environment *string) *ListApplicationServersParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the list application servers params
func (o *ListApplicationServersParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithNextEntityID adds the nextEntityID to the list application servers params
func (o *ListApplicationServersParams) WithNextEntityID(nextEntityID *int64) *ListApplicationServersParams {
	o.SetNextEntityID(nextEntityID)
	return o
}

// SetNextEntityID adds the nextEntityId to the list application servers params
func (o *ListApplicationServersParams) SetNextEntityID(nextEntityID *int64) {
	o.NextEntityID = nextEntityID
}

// WithNodeID adds the nodeID to the list application servers params
func (o *ListApplicationServersParams) WithNodeID(nodeID *int64) *ListApplicationServersParams {
	o.SetNodeID(nodeID)
	return o
}

// SetNodeID adds the nodeId to the list application servers params
func (o *ListApplicationServersParams) SetNodeID(nodeID *int64) {
	o.NodeID = nodeID
}

// WithPageSize adds the pageSize to the list application servers params
func (o *ListApplicationServersParams) WithPageSize(pageSize *int64) *ListApplicationServersParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list application servers params
func (o *ListApplicationServersParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithRootNodeID adds the rootNodeID to the list application servers params
func (o *ListApplicationServersParams) WithRootNodeID(rootNodeID int64) *ListApplicationServersParams {
	o.SetRootNodeID(rootNodeID)
	return o
}

// SetRootNodeID adds the rootNodeId to the list application servers params
func (o *ListApplicationServersParams) SetRootNodeID(rootNodeID int64) {
	o.RootNodeID = rootNodeID
}

// WriteToRequest writes these params to a swagger request
func (o *ListApplicationServersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AfterCursorEntityID != nil {

		// query param afterCursorEntityId
		var qrAfterCursorEntityID int64

		if o.AfterCursorEntityID != nil {
			qrAfterCursorEntityID = *o.AfterCursorEntityID
		}
		qAfterCursorEntityID := swag.FormatInt64(qrAfterCursorEntityID)
		if qAfterCursorEntityID != "" {

			if err := r.SetQueryParam("afterCursorEntityId", qAfterCursorEntityID); err != nil {
				return err
			}
		}
	}

	// query param applicationEnvironment
	qrApplicationEnvironment := o.ApplicationEnvironment
	qApplicationEnvironment := qrApplicationEnvironment
	if qApplicationEnvironment != "" {

		if err := r.SetQueryParam("applicationEnvironment", qApplicationEnvironment); err != nil {
			return err
		}
	}

	if o.BeforeCursorEntityID != nil {

		// query param beforeCursorEntityId
		var qrBeforeCursorEntityID int64

		if o.BeforeCursorEntityID != nil {
			qrBeforeCursorEntityID = *o.BeforeCursorEntityID
		}
		qBeforeCursorEntityID := swag.FormatInt64(qrBeforeCursorEntityID)
		if qBeforeCursorEntityID != "" {

			if err := r.SetQueryParam("beforeCursorEntityId", qBeforeCursorEntityID); err != nil {
				return err
			}
		}
	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string

		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {

			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}
	}

	if o.NextEntityID != nil {

		// query param nextEntityId
		var qrNextEntityID int64

		if o.NextEntityID != nil {
			qrNextEntityID = *o.NextEntityID
		}
		qNextEntityID := swag.FormatInt64(qrNextEntityID)
		if qNextEntityID != "" {

			if err := r.SetQueryParam("nextEntityId", qNextEntityID); err != nil {
				return err
			}
		}
	}

	if o.NodeID != nil {

		// query param nodeId
		var qrNodeID int64

		if o.NodeID != nil {
			qrNodeID = *o.NodeID
		}
		qNodeID := swag.FormatInt64(qrNodeID)
		if qNodeID != "" {

			if err := r.SetQueryParam("nodeId", qNodeID); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	// query param rootNodeId
	qrRootNodeID := o.RootNodeID
	qRootNodeID := swag.FormatInt64(qrRootNodeID)
	if qRootNodeID != "" {

		if err := r.SetQueryParam("rootNodeId", qRootNodeID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
