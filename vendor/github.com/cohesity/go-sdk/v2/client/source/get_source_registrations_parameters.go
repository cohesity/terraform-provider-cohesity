// Code generated by go-swagger; DO NOT EDIT.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSourceRegistrationsParams creates a new GetSourceRegistrationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSourceRegistrationsParams() *GetSourceRegistrationsParams {
	return &GetSourceRegistrationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSourceRegistrationsParamsWithTimeout creates a new GetSourceRegistrationsParams object
// with the ability to set a timeout on a request.
func NewGetSourceRegistrationsParamsWithTimeout(timeout time.Duration) *GetSourceRegistrationsParams {
	return &GetSourceRegistrationsParams{
		timeout: timeout,
	}
}

// NewGetSourceRegistrationsParamsWithContext creates a new GetSourceRegistrationsParams object
// with the ability to set a context for a request.
func NewGetSourceRegistrationsParamsWithContext(ctx context.Context) *GetSourceRegistrationsParams {
	return &GetSourceRegistrationsParams{
		Context: ctx,
	}
}

// NewGetSourceRegistrationsParamsWithHTTPClient creates a new GetSourceRegistrationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSourceRegistrationsParamsWithHTTPClient(client *http.Client) *GetSourceRegistrationsParams {
	return &GetSourceRegistrationsParams{
		HTTPClient: client,
	}
}

/*
GetSourceRegistrationsParams contains all the parameters to send to the API endpoint

	for the get source registrations operation.

	Typically these are written to a http.Request.
*/
type GetSourceRegistrationsParams struct {

	/* EncryptionKey.

	   Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must be specified.
	*/
	EncryptionKey *string

	/* Ids.

	   Ids specifies the list of source registration ids to return. If left empty, every source registration will be returned by default.
	*/
	Ids []int64

	/* IgnoreTenantMigrationInProgressCheck.

	   If true, tenant migration check will be ignored
	*/
	IgnoreTenantMigrationInProgressCheck *bool

	/* IncludeExternalMetadata.

	   If true, the external entity metadata like maintenance mode config for the registered sources will be included.
	*/
	IncludeExternalMetadata *bool

	/* IncludeSourceCredentials.

	   If true, the encrypted crednetial for the registered sources will be included. Credential is first encrypted with internal key and then reencrypted with user supplied encryption key.
	*/
	IncludeSourceCredentials *bool

	/* IncludeTenants.

	   If true, the response will include Registrations which were created by all tenants which the current user has permission to see. If false, then only Registrations created by the current user will be returned.
	*/
	IncludeTenants *bool

	/* TenantIds.

	   TenantIds contains ids of the tenants for which objects are to be returned.
	*/
	TenantIds []string

	/* UseCachedData.

	   Specifies whether we can serve the GET request from the read replica cache. There is a lag of 15 seconds between the read replica and primary data source.
	*/
	UseCachedData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get source registrations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSourceRegistrationsParams) WithDefaults() *GetSourceRegistrationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get source registrations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSourceRegistrationsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get source registrations params
func (o *GetSourceRegistrationsParams) WithTimeout(timeout time.Duration) *GetSourceRegistrationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get source registrations params
func (o *GetSourceRegistrationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get source registrations params
func (o *GetSourceRegistrationsParams) WithContext(ctx context.Context) *GetSourceRegistrationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get source registrations params
func (o *GetSourceRegistrationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get source registrations params
func (o *GetSourceRegistrationsParams) WithHTTPClient(client *http.Client) *GetSourceRegistrationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get source registrations params
func (o *GetSourceRegistrationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEncryptionKey adds the encryptionKey to the get source registrations params
func (o *GetSourceRegistrationsParams) WithEncryptionKey(encryptionKey *string) *GetSourceRegistrationsParams {
	o.SetEncryptionKey(encryptionKey)
	return o
}

// SetEncryptionKey adds the encryptionKey to the get source registrations params
func (o *GetSourceRegistrationsParams) SetEncryptionKey(encryptionKey *string) {
	o.EncryptionKey = encryptionKey
}

// WithIds adds the ids to the get source registrations params
func (o *GetSourceRegistrationsParams) WithIds(ids []int64) *GetSourceRegistrationsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get source registrations params
func (o *GetSourceRegistrationsParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithIgnoreTenantMigrationInProgressCheck adds the ignoreTenantMigrationInProgressCheck to the get source registrations params
func (o *GetSourceRegistrationsParams) WithIgnoreTenantMigrationInProgressCheck(ignoreTenantMigrationInProgressCheck *bool) *GetSourceRegistrationsParams {
	o.SetIgnoreTenantMigrationInProgressCheck(ignoreTenantMigrationInProgressCheck)
	return o
}

// SetIgnoreTenantMigrationInProgressCheck adds the ignoreTenantMigrationInProgressCheck to the get source registrations params
func (o *GetSourceRegistrationsParams) SetIgnoreTenantMigrationInProgressCheck(ignoreTenantMigrationInProgressCheck *bool) {
	o.IgnoreTenantMigrationInProgressCheck = ignoreTenantMigrationInProgressCheck
}

// WithIncludeExternalMetadata adds the includeExternalMetadata to the get source registrations params
func (o *GetSourceRegistrationsParams) WithIncludeExternalMetadata(includeExternalMetadata *bool) *GetSourceRegistrationsParams {
	o.SetIncludeExternalMetadata(includeExternalMetadata)
	return o
}

// SetIncludeExternalMetadata adds the includeExternalMetadata to the get source registrations params
func (o *GetSourceRegistrationsParams) SetIncludeExternalMetadata(includeExternalMetadata *bool) {
	o.IncludeExternalMetadata = includeExternalMetadata
}

// WithIncludeSourceCredentials adds the includeSourceCredentials to the get source registrations params
func (o *GetSourceRegistrationsParams) WithIncludeSourceCredentials(includeSourceCredentials *bool) *GetSourceRegistrationsParams {
	o.SetIncludeSourceCredentials(includeSourceCredentials)
	return o
}

// SetIncludeSourceCredentials adds the includeSourceCredentials to the get source registrations params
func (o *GetSourceRegistrationsParams) SetIncludeSourceCredentials(includeSourceCredentials *bool) {
	o.IncludeSourceCredentials = includeSourceCredentials
}

// WithIncludeTenants adds the includeTenants to the get source registrations params
func (o *GetSourceRegistrationsParams) WithIncludeTenants(includeTenants *bool) *GetSourceRegistrationsParams {
	o.SetIncludeTenants(includeTenants)
	return o
}

// SetIncludeTenants adds the includeTenants to the get source registrations params
func (o *GetSourceRegistrationsParams) SetIncludeTenants(includeTenants *bool) {
	o.IncludeTenants = includeTenants
}

// WithTenantIds adds the tenantIds to the get source registrations params
func (o *GetSourceRegistrationsParams) WithTenantIds(tenantIds []string) *GetSourceRegistrationsParams {
	o.SetTenantIds(tenantIds)
	return o
}

// SetTenantIds adds the tenantIds to the get source registrations params
func (o *GetSourceRegistrationsParams) SetTenantIds(tenantIds []string) {
	o.TenantIds = tenantIds
}

// WithUseCachedData adds the useCachedData to the get source registrations params
func (o *GetSourceRegistrationsParams) WithUseCachedData(useCachedData *bool) *GetSourceRegistrationsParams {
	o.SetUseCachedData(useCachedData)
	return o
}

// SetUseCachedData adds the useCachedData to the get source registrations params
func (o *GetSourceRegistrationsParams) SetUseCachedData(useCachedData *bool) {
	o.UseCachedData = useCachedData
}

// WriteToRequest writes these params to a swagger request
func (o *GetSourceRegistrationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EncryptionKey != nil {

		// query param encryptionKey
		var qrEncryptionKey string

		if o.EncryptionKey != nil {
			qrEncryptionKey = *o.EncryptionKey
		}
		qEncryptionKey := qrEncryptionKey
		if qEncryptionKey != "" {

			if err := r.SetQueryParam("encryptionKey", qEncryptionKey); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.IgnoreTenantMigrationInProgressCheck != nil {

		// query param ignoreTenantMigrationInProgressCheck
		var qrIgnoreTenantMigrationInProgressCheck bool

		if o.IgnoreTenantMigrationInProgressCheck != nil {
			qrIgnoreTenantMigrationInProgressCheck = *o.IgnoreTenantMigrationInProgressCheck
		}
		qIgnoreTenantMigrationInProgressCheck := swag.FormatBool(qrIgnoreTenantMigrationInProgressCheck)
		if qIgnoreTenantMigrationInProgressCheck != "" {

			if err := r.SetQueryParam("ignoreTenantMigrationInProgressCheck", qIgnoreTenantMigrationInProgressCheck); err != nil {
				return err
			}
		}
	}

	if o.IncludeExternalMetadata != nil {

		// query param includeExternalMetadata
		var qrIncludeExternalMetadata bool

		if o.IncludeExternalMetadata != nil {
			qrIncludeExternalMetadata = *o.IncludeExternalMetadata
		}
		qIncludeExternalMetadata := swag.FormatBool(qrIncludeExternalMetadata)
		if qIncludeExternalMetadata != "" {

			if err := r.SetQueryParam("includeExternalMetadata", qIncludeExternalMetadata); err != nil {
				return err
			}
		}
	}

	if o.IncludeSourceCredentials != nil {

		// query param includeSourceCredentials
		var qrIncludeSourceCredentials bool

		if o.IncludeSourceCredentials != nil {
			qrIncludeSourceCredentials = *o.IncludeSourceCredentials
		}
		qIncludeSourceCredentials := swag.FormatBool(qrIncludeSourceCredentials)
		if qIncludeSourceCredentials != "" {

			if err := r.SetQueryParam("includeSourceCredentials", qIncludeSourceCredentials); err != nil {
				return err
			}
		}
	}

	if o.IncludeTenants != nil {

		// query param includeTenants
		var qrIncludeTenants bool

		if o.IncludeTenants != nil {
			qrIncludeTenants = *o.IncludeTenants
		}
		qIncludeTenants := swag.FormatBool(qrIncludeTenants)
		if qIncludeTenants != "" {

			if err := r.SetQueryParam("includeTenants", qIncludeTenants); err != nil {
				return err
			}
		}
	}

	if o.TenantIds != nil {

		// binding items for tenantIds
		joinedTenantIds := o.bindParamTenantIds(reg)

		// query array param tenantIds
		if err := r.SetQueryParam("tenantIds", joinedTenantIds...); err != nil {
			return err
		}
	}

	if o.UseCachedData != nil {

		// query param useCachedData
		var qrUseCachedData bool

		if o.UseCachedData != nil {
			qrUseCachedData = *o.UseCachedData
		}
		qUseCachedData := swag.FormatBool(qrUseCachedData)
		if qUseCachedData != "" {

			if err := r.SetQueryParam("useCachedData", qUseCachedData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetSourceRegistrations binds the parameter ids
func (o *GetSourceRegistrationsParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetSourceRegistrations binds the parameter tenantIds
func (o *GetSourceRegistrationsParams) bindParamTenantIds(formats strfmt.Registry) []string {
	tenantIdsIR := o.TenantIds

	var tenantIdsIC []string
	for _, tenantIdsIIR := range tenantIdsIR { // explode []string

		tenantIdsIIV := tenantIdsIIR // string as string
		tenantIdsIC = append(tenantIdsIC, tenantIdsIIV)
	}

	// items.CollectionFormat: ""
	tenantIdsIS := swag.JoinByFormat(tenantIdsIC, "")

	return tenantIdsIS
}
