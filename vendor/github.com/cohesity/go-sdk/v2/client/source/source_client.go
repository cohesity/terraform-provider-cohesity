// Code generated by go-swagger; DO NOT EDIT.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new source API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new source API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new source API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for source API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAzureApplications(params *CreateAzureApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureApplicationsCreated, error)

	CreateOrUpdateAzureApplications(params *CreateOrUpdateAzureApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrUpdateAzureApplicationsCreated, error)

	DeleteM365SelfServiceConfig(params *DeleteM365SelfServiceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteM365SelfServiceConfigNoContent, error)

	DeleteProtectionSourceRegistration(params *DeleteProtectionSourceRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProtectionSourceRegistrationNoContent, error)

	GenerateM365DeviceAccessToken(params *GenerateM365DeviceAccessTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateM365DeviceAccessTokenCreated, error)

	GenerateM365DeviceCode(params *GenerateM365DeviceCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateM365DeviceCodeCreated, error)

	GetMicrosoft365SelfServiceConfig(params *GetMicrosoft365SelfServiceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMicrosoft365SelfServiceConfigOK, error)

	GetProtectionSourceRegistration(params *GetProtectionSourceRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionSourceRegistrationOK, error)

	GetProtectionSources(params *GetProtectionSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionSourcesOK, error)

	GetSourceAttributeFilters(params *GetSourceAttributeFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSourceAttributeFiltersOK, error)

	GetSourceRegistrations(params *GetSourceRegistrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSourceRegistrationsOK, error)

	GetVdcDetails(params *GetVdcDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVdcDetailsOK, error)

	PatchProtectionSourceRegistration(params *PatchProtectionSourceRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchProtectionSourceRegistrationOK, error)

	ProtectionSourceByID(params *ProtectionSourceByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProtectionSourceByIDOK, error)

	RefreshProtectionSourceByID(params *RefreshProtectionSourceByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshProtectionSourceByIDNoContent, error)

	RegisterProtectionSource(params *RegisterProtectionSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterProtectionSourceCreated, error)

	TestConnectionProtectionSource(params *TestConnectionProtectionSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestConnectionProtectionSourceOK, error)

	UpdateM365SelfServiceConfig(params *UpdateM365SelfServiceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateM365SelfServiceConfigOK, *UpdateM365SelfServiceConfigCreated, error)

	UpdateProtectionSourceRegistration(params *UpdateProtectionSourceRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProtectionSourceRegistrationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAzureApplications creates microsoft 365 azure applications for a given domain

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Creates Microsoft 365 Azure Applications
*/
func (a *Client) CreateAzureApplications(params *CreateAzureApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureApplicationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAzureApplications",
		Method:             "POST",
		PathPattern:        "/data-protect/sources/microsoft365/azure-applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureApplicationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAzureApplicationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateOrUpdateAzureApplications creates update microsoft 365 azure applications for a given domain

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Creates/Updates Microsoft 365 Azure Applications
*/
func (a *Client) CreateOrUpdateAzureApplications(params *CreateOrUpdateAzureApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrUpdateAzureApplicationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateAzureApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOrUpdateAzureApplications",
		Method:             "PUT",
		PathPattern:        "/data-protect/sources/microsoft365/azure-applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrUpdateAzureApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrUpdateAzureApplicationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOrUpdateAzureApplicationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteM365SelfServiceConfig deletes the self service configuration for a microsoft365 source

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Delete the configuration for Self-Service for a Microsoft365 source. This includes deletion of both Mailbox & OneDrive workload configuration.
*/
func (a *Client) DeleteM365SelfServiceConfig(params *DeleteM365SelfServiceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteM365SelfServiceConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteM365SelfServiceConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteM365SelfServiceConfig",
		Method:             "DELETE",
		PathPattern:        "/data-protect/sources/microsoft365/self-service-config/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteM365SelfServiceConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteM365SelfServiceConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteM365SelfServiceConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteProtectionSourceRegistration deletes protection source registration

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Delete Protection Source Registration.
*/
func (a *Client) DeleteProtectionSourceRegistration(params *DeleteProtectionSourceRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProtectionSourceRegistrationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProtectionSourceRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProtectionSourceRegistration",
		Method:             "DELETE",
		PathPattern:        "/data-protect/sources/registrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProtectionSourceRegistrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProtectionSourceRegistrationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProtectionSourceRegistrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GenerateM365DeviceAccessToken generates access token for microsoft365 device authorization grant flow

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Generates the access token if the device code has been granted authorization as part of device login flow.
*/
func (a *Client) GenerateM365DeviceAccessToken(params *GenerateM365DeviceAccessTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateM365DeviceAccessTokenCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateM365DeviceAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GenerateM365DeviceAccessToken",
		Method:             "POST",
		PathPattern:        "/data-protect/sources/microsoft365/auth/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateM365DeviceAccessTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateM365DeviceAccessTokenCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GenerateM365DeviceAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GenerateM365DeviceCode generates device code for microsoft365 device authorization grant flow

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Generates User and Device code for Microsoft365 Device Authorization Grant for a given domain.
*/
func (a *Client) GenerateM365DeviceCode(params *GenerateM365DeviceCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateM365DeviceCodeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateM365DeviceCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GenerateM365DeviceCode",
		Method:             "POST",
		PathPattern:        "/data-protect/sources/microsoft365/auth/device-code",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateM365DeviceCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateM365DeviceCodeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GenerateM365DeviceCodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMicrosoft365SelfServiceConfig gets the list of microsoft365 self service configurations

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get the list of Self-Service configurations for all Microsoft365 sources for the given tenant ID.
*/
func (a *Client) GetMicrosoft365SelfServiceConfig(params *GetMicrosoft365SelfServiceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMicrosoft365SelfServiceConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicrosoft365SelfServiceConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMicrosoft365SelfServiceConfig",
		Method:             "GET",
		PathPattern:        "/data-protect/sources/microsoft365/self-service-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMicrosoft365SelfServiceConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMicrosoft365SelfServiceConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMicrosoft365SelfServiceConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProtectionSourceRegistration gets a protection source registration

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get a Protection Source registration.
*/
func (a *Client) GetProtectionSourceRegistration(params *GetProtectionSourceRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionSourceRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionSourceRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionSourceRegistration",
		Method:             "GET",
		PathPattern:        "/data-protect/sources/registrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionSourceRegistrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionSourceRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionSourceRegistrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProtectionSources gets a list of protection sources

```Unknown Privileges``` <br><br>Get a List of Protection Sources.
*/
func (a *Client) GetProtectionSources(params *GetProtectionSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionSourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionSources",
		Method:             "GET",
		PathPattern:        "/data-protect/sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionSourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionSourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSourceAttributeFilters lists attribute filters for a source

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get a List of attribute filters for leaf entities within a a source
*/
func (a *Client) GetSourceAttributeFilters(params *GetSourceAttributeFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSourceAttributeFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceAttributeFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSourceAttributeFilters",
		Method:             "GET",
		PathPattern:        "/data-protect/sources/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSourceAttributeFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceAttributeFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSourceAttributeFiltersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSourceRegistrations gets the list of protection source registrations

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get the list of Protection Source registrations.
*/
func (a *Client) GetSourceRegistrations(params *GetSourceRegistrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSourceRegistrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceRegistrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSourceRegistrations",
		Method:             "GET",
		PathPattern:        "/data-protect/sources/registrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSourceRegistrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceRegistrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSourceRegistrationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVdcDetails gets v d c details

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get the details such as catelogs, Org networks associated with a VMware virtual datacenter (VDC).
*/
func (a *Client) GetVdcDetails(params *GetVdcDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVdcDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVdcDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVdcDetails",
		Method:             "GET",
		PathPattern:        "/data-protect/sources/virtual-datacenter/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVdcDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVdcDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVdcDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchProtectionSourceRegistration performs partial update on protection source registration currently this API is supported only for cassandra

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Patches a Protection Source.
*/
func (a *Client) PatchProtectionSourceRegistration(params *PatchProtectionSourceRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchProtectionSourceRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProtectionSourceRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchProtectionSourceRegistration",
		Method:             "PATCH",
		PathPattern:        "/data-protect/sources/registrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchProtectionSourceRegistrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchProtectionSourceRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchProtectionSourceRegistrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProtectionSourceByID gets a protection sources

```Unknown Privileges``` <br><br>Get a Protection Source.
*/
func (a *Client) ProtectionSourceByID(params *ProtectionSourceByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProtectionSourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProtectionSourceByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProtectionSourceById",
		Method:             "GET",
		PathPattern:        "/data-protect/sources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProtectionSourceByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProtectionSourceByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProtectionSourceByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RefreshProtectionSourceByID refreshes a protection source

**Privileges:** ```PROTECTION_VIEW``` <br><br>Refresh a Protection Source.
*/
func (a *Client) RefreshProtectionSourceByID(params *RefreshProtectionSourceByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshProtectionSourceByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshProtectionSourceByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RefreshProtectionSourceById",
		Method:             "POST",
		PathPattern:        "/data-protect/sources/{id}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshProtectionSourceByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshProtectionSourceByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RefreshProtectionSourceByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RegisterProtectionSource registers a protection source

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Register a Protection Source.
*/
func (a *Client) RegisterProtectionSource(params *RegisterProtectionSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterProtectionSourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterProtectionSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RegisterProtectionSource",
		Method:             "POST",
		PathPattern:        "/data-protect/sources/registrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterProtectionSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterProtectionSourceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterProtectionSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TestConnectionProtectionSource tests connection to a source

**Privileges:** ```PROTECTION_VIEW``` <br><br>Test connection to a source.
*/
func (a *Client) TestConnectionProtectionSource(params *TestConnectionProtectionSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestConnectionProtectionSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestConnectionProtectionSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TestConnectionProtectionSource",
		Method:             "POST",
		PathPattern:        "/data-protect/sources/test-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TestConnectionProtectionSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestConnectionProtectionSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TestConnectionProtectionSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateM365SelfServiceConfig creates or update the self service configuration for a microsoft365 source

**Privileges:** ```PROTECTION_MODIFY``` <br><br>Create or Update the configuration for enabling Self-Service for a Microsoft365 source through Security Groups. The configuration can be done for Mailbox & OneDrive workload only.
*/
func (a *Client) UpdateM365SelfServiceConfig(params *UpdateM365SelfServiceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateM365SelfServiceConfigOK, *UpdateM365SelfServiceConfigCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateM365SelfServiceConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateM365SelfServiceConfig",
		Method:             "PUT",
		PathPattern:        "/data-protect/sources/microsoft365/self-service-config/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateM365SelfServiceConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateM365SelfServiceConfigOK:
		return value, nil, nil
	case *UpdateM365SelfServiceConfigCreated:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateM365SelfServiceConfigDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateProtectionSourceRegistration updates protection source registration

**Privileges:** ```PROTECTION_SOURCE_MODIFY``` <br><br>Update Protection Source registration.
*/
func (a *Client) UpdateProtectionSourceRegistration(params *UpdateProtectionSourceRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProtectionSourceRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProtectionSourceRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateProtectionSourceRegistration",
		Method:             "PUT",
		PathPattern:        "/data-protect/sources/registrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProtectionSourceRegistrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProtectionSourceRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateProtectionSourceRegistrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
