// Code generated by go-swagger; DO NOT EDIT.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateM365BackupControllerParams creates a new UpdateM365BackupControllerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateM365BackupControllerParams() *UpdateM365BackupControllerParams {
	return &UpdateM365BackupControllerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateM365BackupControllerParamsWithTimeout creates a new UpdateM365BackupControllerParams object
// with the ability to set a timeout on a request.
func NewUpdateM365BackupControllerParamsWithTimeout(timeout time.Duration) *UpdateM365BackupControllerParams {
	return &UpdateM365BackupControllerParams{
		timeout: timeout,
	}
}

// NewUpdateM365BackupControllerParamsWithContext creates a new UpdateM365BackupControllerParams object
// with the ability to set a context for a request.
func NewUpdateM365BackupControllerParamsWithContext(ctx context.Context) *UpdateM365BackupControllerParams {
	return &UpdateM365BackupControllerParams{
		Context: ctx,
	}
}

// NewUpdateM365BackupControllerParamsWithHTTPClient creates a new UpdateM365BackupControllerParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateM365BackupControllerParamsWithHTTPClient(client *http.Client) *UpdateM365BackupControllerParams {
	return &UpdateM365BackupControllerParams{
		HTTPClient: client,
	}
}

/*
UpdateM365BackupControllerParams contains all the parameters to send to the API endpoint

	for the update m365 backup controller operation.

	Typically these are written to a http.Request.
*/
type UpdateM365BackupControllerParams struct {

	/* AzureToken.

	   Specifies the JWT obtained through user with the scope as BackupRestore-Control.ReadWrite.All
	*/
	AzureToken string

	/* ID.

	   Specifies the Service App ID for the registered M365 Backup Controller when Cohesity App is the active Controller.
	*/
	ID string

	/* State.

	   Specifies the state of the Backup Controller. The state parameter can only be either set to Active/Inactive within the request. The other states like PendingInactive & PendingActive are not applicable.
	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update m365 backup controller params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateM365BackupControllerParams) WithDefaults() *UpdateM365BackupControllerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update m365 backup controller params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateM365BackupControllerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) WithTimeout(timeout time.Duration) *UpdateM365BackupControllerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) WithContext(ctx context.Context) *UpdateM365BackupControllerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) WithHTTPClient(client *http.Client) *UpdateM365BackupControllerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAzureToken adds the azureToken to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) WithAzureToken(azureToken string) *UpdateM365BackupControllerParams {
	o.SetAzureToken(azureToken)
	return o
}

// SetAzureToken adds the azureToken to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) SetAzureToken(azureToken string) {
	o.AzureToken = azureToken
}

// WithID adds the id to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) WithID(id string) *UpdateM365BackupControllerParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) SetID(id string) {
	o.ID = id
}

// WithState adds the state to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) WithState(state *string) *UpdateM365BackupControllerParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the update m365 backup controller params
func (o *UpdateM365BackupControllerParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateM365BackupControllerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param azureToken
	if err := r.SetHeaderParam("azureToken", o.AzureToken); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
