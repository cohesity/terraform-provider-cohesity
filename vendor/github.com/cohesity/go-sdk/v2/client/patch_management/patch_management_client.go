// Code generated by go-swagger; DO NOT EDIT.

package patch_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new patch management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new patch management API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new patch management API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for patch management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeMultipartFormData sets the Content-Type header to "multipart/form-data".
func WithContentTypeMultipartFormData(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"multipart/form-data"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ApplyPatches(params *ApplyPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyPatchesCreated, error)

	GetAppliedPatches(params *GetAppliedPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAppliedPatchesOK, error)

	GetAvailablePatches(params *GetAvailablePatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailablePatchesOK, error)

	GetPatchOperationStatus(params *GetPatchOperationStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPatchOperationStatusOK, error)

	GetPatchesHistory(params *GetPatchesHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPatchesHistoryOK, error)

	ImportPatches(params *ImportPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportPatchesCreated, error)

	RevertPatches(params *RevertPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevertPatchesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ApplyPatches applies patches

**Privileges:** ```CLUSTER_MAINTENANCE``` <br><br>Apply a service patch and its dependencies.
*/
func (a *Client) ApplyPatches(params *ApplyPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyPatchesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ApplyPatches",
		Method:             "POST",
		PathPattern:        "/patch-management/available-patches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplyPatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplyPatchesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ApplyPatchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAppliedPatches gets applied patches

**Privileges:** ```CLUSTER_MAINTENANCE``` <br><br>Returns a list of currently applied patches that are running on the cluster.
*/
func (a *Client) GetAppliedPatches(params *GetAppliedPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAppliedPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppliedPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAppliedPatches",
		Method:             "GET",
		PathPattern:        "/patch-management/applied-patches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppliedPatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppliedPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppliedPatchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAvailablePatches gets available patches

**Privileges:** ```CLUSTER_MAINTENANCE``` <br><br>Returns a list of patches that are available and ready to apply on the cluster.
*/
func (a *Client) GetAvailablePatches(params *GetAvailablePatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailablePatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailablePatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAvailablePatches",
		Method:             "GET",
		PathPattern:        "/patch-management/available-patches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAvailablePatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvailablePatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAvailablePatchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPatchOperationStatus gets patch operation status

**Privileges:** ```CLUSTER_MAINTENANCE``` <br><br>Returns the status of the current or the last patch operation. There can be only one active patch operation at any given time.
*/
func (a *Client) GetPatchOperationStatus(params *GetPatchOperationStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPatchOperationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatchOperationStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPatchOperationStatus",
		Method:             "GET",
		PathPattern:        "/patch-management/operation-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPatchOperationStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatchOperationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPatchOperationStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPatchesHistory gets patches history

**Privileges:** ```CLUSTER_MAINTENANCE``` <br><br>Get the history of all the patch management operations.
*/
func (a *Client) GetPatchesHistory(params *GetPatchesHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPatchesHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatchesHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPatchesHistory",
		Method:             "GET",
		PathPattern:        "/patch-management/patches-history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPatchesHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatchesHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPatchesHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ImportPatches imports patches

**Privileges:** ```CLUSTER_MAINTENANCE``` <br><br>Import a patch or a hotfix to the cluster.
*/
func (a *Client) ImportPatches(params *ImportPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportPatchesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportPatches",
		Method:             "PUT",
		PathPattern:        "/patch-management/available-patches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportPatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportPatchesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ImportPatchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RevertPatches reverts patches

**Privileges:** ```CLUSTER_MAINTENANCE``` <br><br>Revert an applied service patch and its dependencies.
*/
func (a *Client) RevertPatches(params *RevertPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevertPatchesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevertPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RevertPatches",
		Method:             "POST",
		PathPattern:        "/patch-management/applied-patches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevertPatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevertPatchesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RevertPatchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
