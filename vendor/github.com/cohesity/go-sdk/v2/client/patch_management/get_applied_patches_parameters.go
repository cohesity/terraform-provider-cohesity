// Code generated by go-swagger; DO NOT EDIT.

package patch_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAppliedPatchesParams creates a new GetAppliedPatchesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAppliedPatchesParams() *GetAppliedPatchesParams {
	return &GetAppliedPatchesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppliedPatchesParamsWithTimeout creates a new GetAppliedPatchesParams object
// with the ability to set a timeout on a request.
func NewGetAppliedPatchesParamsWithTimeout(timeout time.Duration) *GetAppliedPatchesParams {
	return &GetAppliedPatchesParams{
		timeout: timeout,
	}
}

// NewGetAppliedPatchesParamsWithContext creates a new GetAppliedPatchesParams object
// with the ability to set a context for a request.
func NewGetAppliedPatchesParamsWithContext(ctx context.Context) *GetAppliedPatchesParams {
	return &GetAppliedPatchesParams{
		Context: ctx,
	}
}

// NewGetAppliedPatchesParamsWithHTTPClient creates a new GetAppliedPatchesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAppliedPatchesParamsWithHTTPClient(client *http.Client) *GetAppliedPatchesParams {
	return &GetAppliedPatchesParams{
		HTTPClient: client,
	}
}

/*
GetAppliedPatchesParams contains all the parameters to send to the API endpoint

	for the get applied patches operation.

	Typically these are written to a http.Request.
*/
type GetAppliedPatchesParams struct {

	/* IncludeDetails.

	   Specifies whether to return the details of all the fixes in the patch. By default, returns only the most recent fix made for the service in the patch.
	*/
	IncludeDetails *bool

	/* Service.

	   Specifies optional service name whose current patch is returned. If it is not specified, all the applied patches are returned.
	*/
	Service *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get applied patches params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAppliedPatchesParams) WithDefaults() *GetAppliedPatchesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get applied patches params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAppliedPatchesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get applied patches params
func (o *GetAppliedPatchesParams) WithTimeout(timeout time.Duration) *GetAppliedPatchesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get applied patches params
func (o *GetAppliedPatchesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get applied patches params
func (o *GetAppliedPatchesParams) WithContext(ctx context.Context) *GetAppliedPatchesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get applied patches params
func (o *GetAppliedPatchesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get applied patches params
func (o *GetAppliedPatchesParams) WithHTTPClient(client *http.Client) *GetAppliedPatchesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get applied patches params
func (o *GetAppliedPatchesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeDetails adds the includeDetails to the get applied patches params
func (o *GetAppliedPatchesParams) WithIncludeDetails(includeDetails *bool) *GetAppliedPatchesParams {
	o.SetIncludeDetails(includeDetails)
	return o
}

// SetIncludeDetails adds the includeDetails to the get applied patches params
func (o *GetAppliedPatchesParams) SetIncludeDetails(includeDetails *bool) {
	o.IncludeDetails = includeDetails
}

// WithService adds the service to the get applied patches params
func (o *GetAppliedPatchesParams) WithService(service *string) *GetAppliedPatchesParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the get applied patches params
func (o *GetAppliedPatchesParams) SetService(service *string) {
	o.Service = service
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppliedPatchesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeDetails != nil {

		// query param includeDetails
		var qrIncludeDetails bool

		if o.IncludeDetails != nil {
			qrIncludeDetails = *o.IncludeDetails
		}
		qIncludeDetails := swag.FormatBool(qrIncludeDetails)
		if qIncludeDetails != "" {

			if err := r.SetQueryParam("includeDetails", qIncludeDetails); err != nil {
				return err
			}
		}
	}

	if o.Service != nil {

		// query param service
		var qrService string

		if o.Service != nil {
			qrService = *o.Service
		}
		qService := qrService
		if qService != "" {

			if err := r.SetQueryParam("service", qService); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
