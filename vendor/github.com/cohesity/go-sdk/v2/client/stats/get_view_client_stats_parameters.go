// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetViewClientStatsParams creates a new GetViewClientStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetViewClientStatsParams() *GetViewClientStatsParams {
	return &GetViewClientStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetViewClientStatsParamsWithTimeout creates a new GetViewClientStatsParams object
// with the ability to set a timeout on a request.
func NewGetViewClientStatsParamsWithTimeout(timeout time.Duration) *GetViewClientStatsParams {
	return &GetViewClientStatsParams{
		timeout: timeout,
	}
}

// NewGetViewClientStatsParamsWithContext creates a new GetViewClientStatsParams object
// with the ability to set a context for a request.
func NewGetViewClientStatsParamsWithContext(ctx context.Context) *GetViewClientStatsParams {
	return &GetViewClientStatsParams{
		Context: ctx,
	}
}

// NewGetViewClientStatsParamsWithHTTPClient creates a new GetViewClientStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetViewClientStatsParamsWithHTTPClient(client *http.Client) *GetViewClientStatsParams {
	return &GetViewClientStatsParams{
		HTTPClient: client,
	}
}

/*
GetViewClientStatsParams contains all the parameters to send to the API endpoint

	for the get view client stats operation.

	Typically these are written to a http.Request.
*/
type GetViewClientStatsParams struct {

	/* LastHours.

	   Specifies the last hours of stats to sort.

	   Format: int64
	*/
	LastHours *int64

	/* Metric.

	   Specifies the metric to which stats has to be sorted.
	*/
	Metric *string

	/* NumTopViewClients.

	   Specifies the number of view clients for which stats has to be computed. Specifying this field will return the Views sorted in the descending order on the metric specified. If specified, minimum value is 1. If not specified, all view clients will be returned. If metric is not specified, this parameter must also not be specified.

	   Format: int64
	*/
	NumTopViewClients *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get view client stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewClientStatsParams) WithDefaults() *GetViewClientStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get view client stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetViewClientStatsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get view client stats params
func (o *GetViewClientStatsParams) WithTimeout(timeout time.Duration) *GetViewClientStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get view client stats params
func (o *GetViewClientStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get view client stats params
func (o *GetViewClientStatsParams) WithContext(ctx context.Context) *GetViewClientStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get view client stats params
func (o *GetViewClientStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get view client stats params
func (o *GetViewClientStatsParams) WithHTTPClient(client *http.Client) *GetViewClientStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get view client stats params
func (o *GetViewClientStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLastHours adds the lastHours to the get view client stats params
func (o *GetViewClientStatsParams) WithLastHours(lastHours *int64) *GetViewClientStatsParams {
	o.SetLastHours(lastHours)
	return o
}

// SetLastHours adds the lastHours to the get view client stats params
func (o *GetViewClientStatsParams) SetLastHours(lastHours *int64) {
	o.LastHours = lastHours
}

// WithMetric adds the metric to the get view client stats params
func (o *GetViewClientStatsParams) WithMetric(metric *string) *GetViewClientStatsParams {
	o.SetMetric(metric)
	return o
}

// SetMetric adds the metric to the get view client stats params
func (o *GetViewClientStatsParams) SetMetric(metric *string) {
	o.Metric = metric
}

// WithNumTopViewClients adds the numTopViewClients to the get view client stats params
func (o *GetViewClientStatsParams) WithNumTopViewClients(numTopViewClients *int64) *GetViewClientStatsParams {
	o.SetNumTopViewClients(numTopViewClients)
	return o
}

// SetNumTopViewClients adds the numTopViewClients to the get view client stats params
func (o *GetViewClientStatsParams) SetNumTopViewClients(numTopViewClients *int64) {
	o.NumTopViewClients = numTopViewClients
}

// WriteToRequest writes these params to a swagger request
func (o *GetViewClientStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LastHours != nil {

		// query param lastHours
		var qrLastHours int64

		if o.LastHours != nil {
			qrLastHours = *o.LastHours
		}
		qLastHours := swag.FormatInt64(qrLastHours)
		if qLastHours != "" {

			if err := r.SetQueryParam("lastHours", qLastHours); err != nil {
				return err
			}
		}
	}

	if o.Metric != nil {

		// query param metric
		var qrMetric string

		if o.Metric != nil {
			qrMetric = *o.Metric
		}
		qMetric := qrMetric
		if qMetric != "" {

			if err := r.SetQueryParam("metric", qMetric); err != nil {
				return err
			}
		}
	}

	if o.NumTopViewClients != nil {

		// query param numTopViewClients
		var qrNumTopViewClients int64

		if o.NumTopViewClients != nil {
			qrNumTopViewClients = *o.NumTopViewClients
		}
		qNumTopViewClients := swag.FormatInt64(qrNumTopViewClients)
		if qNumTopViewClients != "" {

			if err := r.SetQueryParam("numTopViewClients", qNumTopViewClients); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
