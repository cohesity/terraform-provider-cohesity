// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTopViewsStatsParams creates a new GetTopViewsStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTopViewsStatsParams() *GetTopViewsStatsParams {
	return &GetTopViewsStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTopViewsStatsParamsWithTimeout creates a new GetTopViewsStatsParams object
// with the ability to set a timeout on a request.
func NewGetTopViewsStatsParamsWithTimeout(timeout time.Duration) *GetTopViewsStatsParams {
	return &GetTopViewsStatsParams{
		timeout: timeout,
	}
}

// NewGetTopViewsStatsParamsWithContext creates a new GetTopViewsStatsParams object
// with the ability to set a context for a request.
func NewGetTopViewsStatsParamsWithContext(ctx context.Context) *GetTopViewsStatsParams {
	return &GetTopViewsStatsParams{
		Context: ctx,
	}
}

// NewGetTopViewsStatsParamsWithHTTPClient creates a new GetTopViewsStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTopViewsStatsParamsWithHTTPClient(client *http.Client) *GetTopViewsStatsParams {
	return &GetTopViewsStatsParams{
		HTTPClient: client,
	}
}

/*
GetTopViewsStatsParams contains all the parameters to send to the API endpoint

	for the get top views stats operation.

	Typically these are written to a http.Request.
*/
type GetTopViewsStatsParams struct {

	/* LastHours.

	   Specifies the last hours of stats to sort. Defaults to 24.

	   Format: int64
	   Default: 24
	*/
	LastHours *int64

	/* Metric.

	   Specifies the metric to which stats has to be sorted. Defaults to kNumBytesRead.

	   Default: "kNumBytesRead"
	*/
	Metric *string

	/* NumTopViews.

	   Specifies the number of view for which stats has to be computed. Returned Views will be sorted in descending order based on the 'metric' param. Minimum value has to be 1. Defaults to 100.

	   Format: int64
	   Default: 100
	*/
	NumTopViews *int64

	/* Protocol.

	   Specifies the protocol to sort. Defaults to kAny.

	   Default: "kAny"
	*/
	Protocol *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get top views stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTopViewsStatsParams) WithDefaults() *GetTopViewsStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get top views stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTopViewsStatsParams) SetDefaults() {
	var (
		lastHoursDefault = int64(24)

		metricDefault = string("kNumBytesRead")

		numTopViewsDefault = int64(100)

		protocolDefault = string("kAny")
	)

	val := GetTopViewsStatsParams{
		LastHours:   &lastHoursDefault,
		Metric:      &metricDefault,
		NumTopViews: &numTopViewsDefault,
		Protocol:    &protocolDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get top views stats params
func (o *GetTopViewsStatsParams) WithTimeout(timeout time.Duration) *GetTopViewsStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get top views stats params
func (o *GetTopViewsStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get top views stats params
func (o *GetTopViewsStatsParams) WithContext(ctx context.Context) *GetTopViewsStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get top views stats params
func (o *GetTopViewsStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get top views stats params
func (o *GetTopViewsStatsParams) WithHTTPClient(client *http.Client) *GetTopViewsStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get top views stats params
func (o *GetTopViewsStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLastHours adds the lastHours to the get top views stats params
func (o *GetTopViewsStatsParams) WithLastHours(lastHours *int64) *GetTopViewsStatsParams {
	o.SetLastHours(lastHours)
	return o
}

// SetLastHours adds the lastHours to the get top views stats params
func (o *GetTopViewsStatsParams) SetLastHours(lastHours *int64) {
	o.LastHours = lastHours
}

// WithMetric adds the metric to the get top views stats params
func (o *GetTopViewsStatsParams) WithMetric(metric *string) *GetTopViewsStatsParams {
	o.SetMetric(metric)
	return o
}

// SetMetric adds the metric to the get top views stats params
func (o *GetTopViewsStatsParams) SetMetric(metric *string) {
	o.Metric = metric
}

// WithNumTopViews adds the numTopViews to the get top views stats params
func (o *GetTopViewsStatsParams) WithNumTopViews(numTopViews *int64) *GetTopViewsStatsParams {
	o.SetNumTopViews(numTopViews)
	return o
}

// SetNumTopViews adds the numTopViews to the get top views stats params
func (o *GetTopViewsStatsParams) SetNumTopViews(numTopViews *int64) {
	o.NumTopViews = numTopViews
}

// WithProtocol adds the protocol to the get top views stats params
func (o *GetTopViewsStatsParams) WithProtocol(protocol *string) *GetTopViewsStatsParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the get top views stats params
func (o *GetTopViewsStatsParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WriteToRequest writes these params to a swagger request
func (o *GetTopViewsStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LastHours != nil {

		// query param lastHours
		var qrLastHours int64

		if o.LastHours != nil {
			qrLastHours = *o.LastHours
		}
		qLastHours := swag.FormatInt64(qrLastHours)
		if qLastHours != "" {

			if err := r.SetQueryParam("lastHours", qLastHours); err != nil {
				return err
			}
		}
	}

	if o.Metric != nil {

		// query param metric
		var qrMetric string

		if o.Metric != nil {
			qrMetric = *o.Metric
		}
		qMetric := qrMetric
		if qMetric != "" {

			if err := r.SetQueryParam("metric", qMetric); err != nil {
				return err
			}
		}
	}

	if o.NumTopViews != nil {

		// query param numTopViews
		var qrNumTopViews int64

		if o.NumTopViews != nil {
			qrNumTopViews = *o.NumTopViews
		}
		qNumTopViews := swag.FormatInt64(qrNumTopViews)
		if qNumTopViews != "" {

			if err := r.SetQueryParam("numTopViews", qNumTopViews); err != nil {
				return err
			}
		}
	}

	if o.Protocol != nil {

		// query param protocol
		var qrProtocol string

		if o.Protocol != nil {
			qrProtocol = *o.Protocol
		}
		qProtocol := qrProtocol
		if qProtocol != "" {

			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
