// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProtectionRunsStatsParams creates a new GetProtectionRunsStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProtectionRunsStatsParams() *GetProtectionRunsStatsParams {
	return &GetProtectionRunsStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProtectionRunsStatsParamsWithTimeout creates a new GetProtectionRunsStatsParams object
// with the ability to set a timeout on a request.
func NewGetProtectionRunsStatsParamsWithTimeout(timeout time.Duration) *GetProtectionRunsStatsParams {
	return &GetProtectionRunsStatsParams{
		timeout: timeout,
	}
}

// NewGetProtectionRunsStatsParamsWithContext creates a new GetProtectionRunsStatsParams object
// with the ability to set a context for a request.
func NewGetProtectionRunsStatsParamsWithContext(ctx context.Context) *GetProtectionRunsStatsParams {
	return &GetProtectionRunsStatsParams{
		Context: ctx,
	}
}

// NewGetProtectionRunsStatsParamsWithHTTPClient creates a new GetProtectionRunsStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProtectionRunsStatsParamsWithHTTPClient(client *http.Client) *GetProtectionRunsStatsParams {
	return &GetProtectionRunsStatsParams{
		HTTPClient: client,
	}
}

/*
GetProtectionRunsStatsParams contains all the parameters to send to the API endpoint

	for the get protection runs stats operation.

	Typically these are written to a http.Request.
*/
type GetProtectionRunsStatsParams struct {

	/* EndTimeUsecs.

	   Specify the end time as a Unix epoch Timestamp (in microseconds), only runs executing before this time will be counted. By default it is current time.

	   Format: int64
	*/
	EndTimeUsecs *int64

	/* RunStatus.

	   Specifies a list of status, runs matching the status will be returned. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Failed' indicates that the run has failed. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.
	*/
	RunStatus []string

	/* StartTimeUsecs.

	   Specify the start time as a Unix epoch Timestamp (in microseconds), only runs executing after this time will be counted. By default it is current time minus a day.

	   Format: int64
	*/
	StartTimeUsecs *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get protection runs stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionRunsStatsParams) WithDefaults() *GetProtectionRunsStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get protection runs stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProtectionRunsStatsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) WithTimeout(timeout time.Duration) *GetProtectionRunsStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) WithContext(ctx context.Context) *GetProtectionRunsStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) WithHTTPClient(client *http.Client) *GetProtectionRunsStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTimeUsecs adds the endTimeUsecs to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) WithEndTimeUsecs(endTimeUsecs *int64) *GetProtectionRunsStatsParams {
	o.SetEndTimeUsecs(endTimeUsecs)
	return o
}

// SetEndTimeUsecs adds the endTimeUsecs to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) SetEndTimeUsecs(endTimeUsecs *int64) {
	o.EndTimeUsecs = endTimeUsecs
}

// WithRunStatus adds the runStatus to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) WithRunStatus(runStatus []string) *GetProtectionRunsStatsParams {
	o.SetRunStatus(runStatus)
	return o
}

// SetRunStatus adds the runStatus to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) SetRunStatus(runStatus []string) {
	o.RunStatus = runStatus
}

// WithStartTimeUsecs adds the startTimeUsecs to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) WithStartTimeUsecs(startTimeUsecs *int64) *GetProtectionRunsStatsParams {
	o.SetStartTimeUsecs(startTimeUsecs)
	return o
}

// SetStartTimeUsecs adds the startTimeUsecs to the get protection runs stats params
func (o *GetProtectionRunsStatsParams) SetStartTimeUsecs(startTimeUsecs *int64) {
	o.StartTimeUsecs = startTimeUsecs
}

// WriteToRequest writes these params to a swagger request
func (o *GetProtectionRunsStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTimeUsecs != nil {

		// query param endTimeUsecs
		var qrEndTimeUsecs int64

		if o.EndTimeUsecs != nil {
			qrEndTimeUsecs = *o.EndTimeUsecs
		}
		qEndTimeUsecs := swag.FormatInt64(qrEndTimeUsecs)
		if qEndTimeUsecs != "" {

			if err := r.SetQueryParam("endTimeUsecs", qEndTimeUsecs); err != nil {
				return err
			}
		}
	}

	if o.RunStatus != nil {

		// binding items for runStatus
		joinedRunStatus := o.bindParamRunStatus(reg)

		// query array param runStatus
		if err := r.SetQueryParam("runStatus", joinedRunStatus...); err != nil {
			return err
		}
	}

	if o.StartTimeUsecs != nil {

		// query param startTimeUsecs
		var qrStartTimeUsecs int64

		if o.StartTimeUsecs != nil {
			qrStartTimeUsecs = *o.StartTimeUsecs
		}
		qStartTimeUsecs := swag.FormatInt64(qrStartTimeUsecs)
		if qStartTimeUsecs != "" {

			if err := r.SetQueryParam("startTimeUsecs", qStartTimeUsecs); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetProtectionRunsStats binds the parameter runStatus
func (o *GetProtectionRunsStatsParams) bindParamRunStatus(formats strfmt.Registry) []string {
	runStatusIR := o.RunStatus

	var runStatusIC []string
	for _, runStatusIIR := range runStatusIR { // explode []string

		runStatusIIV := runStatusIIR // string as string
		runStatusIC = append(runStatusIC, runStatusIIV)
	}

	// items.CollectionFormat: ""
	runStatusIS := swag.JoinByFormat(runStatusIC, "")

	return runStatusIS
}
