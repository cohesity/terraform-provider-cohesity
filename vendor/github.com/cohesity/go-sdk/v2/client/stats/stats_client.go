// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new stats API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new stats API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new stats API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for stats API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetClusterStorageStats(params *GetClusterStorageStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterStorageStatsOK, error)

	GetFilesStats(params *GetFilesStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilesStatsOK, error)

	GetProtectionRunsStats(params *GetProtectionRunsStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionRunsStatsOK, error)

	GetTimeSeriesStats(params *GetTimeSeriesStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTimeSeriesStatsOK, error)

	GetViewClientStats(params *GetViewClientStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewClientStatsOK, error)

	GetViewsStats(params *GetViewsStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewsStatsOK, error)

	GetWorkloadStats(params *GetWorkloadStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkloadStatsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetClusterStorageStats gets cluster storage stats

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get Cluster Storage Stats.
*/
func (a *Client) GetClusterStorageStats(params *GetClusterStorageStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterStorageStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterStorageStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterStorageStats",
		Method:             "GET",
		PathPattern:        "/stats/cluster-storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterStorageStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterStorageStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterStorageStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFilesStats gets stats of files

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get Stats of files.
*/
func (a *Client) GetFilesStats(params *GetFilesStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilesStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFilesStats",
		Method:             "GET",
		PathPattern:        "/stats/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilesStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFilesStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetProtectionRunsStats gets statistics of protection runs

**Privileges:** ```PROTECTION_VIEW``` <br><br>Get statistics of protection runs.
*/
func (a *Client) GetProtectionRunsStats(params *GetProtectionRunsStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProtectionRunsStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtectionRunsStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProtectionRunsStats",
		Method:             "GET",
		PathPattern:        "/stats/protection-runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProtectionRunsStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtectionRunsStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProtectionRunsStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTimeSeriesStats gets time series stats

**Privileges:** ```CLUSTER_VIEW, TENANT_VIEW, STORAGE_DOMAIN_VIEW, STORAGE_VIEW, PROTECTION_VIEW``` <br><br>Get Time Series Stats.
*/
func (a *Client) GetTimeSeriesStats(params *GetTimeSeriesStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTimeSeriesStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimeSeriesStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTimeSeriesStats",
		Method:             "GET",
		PathPattern:        "/stats/time-series-stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTimeSeriesStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTimeSeriesStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTimeSeriesStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewClientStats gets stats of view clients

**Privileges:** ```STORAGE_VIEW``` <br><br>Get Stats of View Clients.
*/
func (a *Client) GetViewClientStats(params *GetViewClientStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewClientStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewClientStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewClientStats",
		Method:             "GET",
		PathPattern:        "/stats/view-clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewClientStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewClientStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewClientStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetViewsStats gets views stats

**Privileges:** ```STORAGE_VIEW``` <br><br>Get Views Stats.
*/
func (a *Client) GetViewsStats(params *GetViewsStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetViewsStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewsStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewsStats",
		Method:             "GET",
		PathPattern:        "/stats/views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetViewsStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewsStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetViewsStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWorkloadStats gets workload stats schema

**Privileges:** ```CLUSTER_VIEW``` <br><br>Get Workload Stats Schema. API will provide the high level information about different Workloads on Cohesity cluster along with their Entity Ids.
*/
func (a *Client) GetWorkloadStats(params *GetWorkloadStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkloadStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkloadStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWorkloadStats",
		Method:             "GET",
		PathPattern:        "/stats/workload-stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkloadStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkloadStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkloadStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
