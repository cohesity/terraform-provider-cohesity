// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTimeSeriesStatsParams creates a new GetTimeSeriesStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTimeSeriesStatsParams() *GetTimeSeriesStatsParams {
	return &GetTimeSeriesStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTimeSeriesStatsParamsWithTimeout creates a new GetTimeSeriesStatsParams object
// with the ability to set a timeout on a request.
func NewGetTimeSeriesStatsParamsWithTimeout(timeout time.Duration) *GetTimeSeriesStatsParams {
	return &GetTimeSeriesStatsParams{
		timeout: timeout,
	}
}

// NewGetTimeSeriesStatsParamsWithContext creates a new GetTimeSeriesStatsParams object
// with the ability to set a context for a request.
func NewGetTimeSeriesStatsParamsWithContext(ctx context.Context) *GetTimeSeriesStatsParams {
	return &GetTimeSeriesStatsParams{
		Context: ctx,
	}
}

// NewGetTimeSeriesStatsParamsWithHTTPClient creates a new GetTimeSeriesStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTimeSeriesStatsParamsWithHTTPClient(client *http.Client) *GetTimeSeriesStatsParams {
	return &GetTimeSeriesStatsParams{
		HTTPClient: client,
	}
}

/*
GetTimeSeriesStatsParams contains all the parameters to send to the API endpoint

	for the get time series stats operation.

	Typically these are written to a http.Request.
*/
type GetTimeSeriesStatsParams struct {

	/* EndTimeMsecs.

	   Specifies the end time of series stats, by default it is current time.

	   Format: int64
	*/
	EndTimeMsecs *int64

	/* EntityID.

	   Specifies the entity id.
	*/
	EntityID string

	/* MetricNames.

	   Specifies a list of metric names.
	*/
	MetricNames []string

	/* RollupFunction.

	   Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs.
	*/
	RollupFunction *string

	/* RollupIntervalSecs.

	   Specifies the time interval granularity for the specified rollup function.

	   Format: int32
	*/
	RollupIntervalSecs *int32

	/* SchemaName.

	   Specifies the schema name.
	*/
	SchemaName string

	/* StartTimeMsecs.

	   Specifies the start time of series stats.

	   Format: int64
	*/
	StartTimeMsecs int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get time series stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTimeSeriesStatsParams) WithDefaults() *GetTimeSeriesStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get time series stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTimeSeriesStatsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get time series stats params
func (o *GetTimeSeriesStatsParams) WithTimeout(timeout time.Duration) *GetTimeSeriesStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get time series stats params
func (o *GetTimeSeriesStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get time series stats params
func (o *GetTimeSeriesStatsParams) WithContext(ctx context.Context) *GetTimeSeriesStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get time series stats params
func (o *GetTimeSeriesStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get time series stats params
func (o *GetTimeSeriesStatsParams) WithHTTPClient(client *http.Client) *GetTimeSeriesStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get time series stats params
func (o *GetTimeSeriesStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTimeMsecs adds the endTimeMsecs to the get time series stats params
func (o *GetTimeSeriesStatsParams) WithEndTimeMsecs(endTimeMsecs *int64) *GetTimeSeriesStatsParams {
	o.SetEndTimeMsecs(endTimeMsecs)
	return o
}

// SetEndTimeMsecs adds the endTimeMsecs to the get time series stats params
func (o *GetTimeSeriesStatsParams) SetEndTimeMsecs(endTimeMsecs *int64) {
	o.EndTimeMsecs = endTimeMsecs
}

// WithEntityID adds the entityID to the get time series stats params
func (o *GetTimeSeriesStatsParams) WithEntityID(entityID string) *GetTimeSeriesStatsParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the get time series stats params
func (o *GetTimeSeriesStatsParams) SetEntityID(entityID string) {
	o.EntityID = entityID
}

// WithMetricNames adds the metricNames to the get time series stats params
func (o *GetTimeSeriesStatsParams) WithMetricNames(metricNames []string) *GetTimeSeriesStatsParams {
	o.SetMetricNames(metricNames)
	return o
}

// SetMetricNames adds the metricNames to the get time series stats params
func (o *GetTimeSeriesStatsParams) SetMetricNames(metricNames []string) {
	o.MetricNames = metricNames
}

// WithRollupFunction adds the rollupFunction to the get time series stats params
func (o *GetTimeSeriesStatsParams) WithRollupFunction(rollupFunction *string) *GetTimeSeriesStatsParams {
	o.SetRollupFunction(rollupFunction)
	return o
}

// SetRollupFunction adds the rollupFunction to the get time series stats params
func (o *GetTimeSeriesStatsParams) SetRollupFunction(rollupFunction *string) {
	o.RollupFunction = rollupFunction
}

// WithRollupIntervalSecs adds the rollupIntervalSecs to the get time series stats params
func (o *GetTimeSeriesStatsParams) WithRollupIntervalSecs(rollupIntervalSecs *int32) *GetTimeSeriesStatsParams {
	o.SetRollupIntervalSecs(rollupIntervalSecs)
	return o
}

// SetRollupIntervalSecs adds the rollupIntervalSecs to the get time series stats params
func (o *GetTimeSeriesStatsParams) SetRollupIntervalSecs(rollupIntervalSecs *int32) {
	o.RollupIntervalSecs = rollupIntervalSecs
}

// WithSchemaName adds the schemaName to the get time series stats params
func (o *GetTimeSeriesStatsParams) WithSchemaName(schemaName string) *GetTimeSeriesStatsParams {
	o.SetSchemaName(schemaName)
	return o
}

// SetSchemaName adds the schemaName to the get time series stats params
func (o *GetTimeSeriesStatsParams) SetSchemaName(schemaName string) {
	o.SchemaName = schemaName
}

// WithStartTimeMsecs adds the startTimeMsecs to the get time series stats params
func (o *GetTimeSeriesStatsParams) WithStartTimeMsecs(startTimeMsecs int64) *GetTimeSeriesStatsParams {
	o.SetStartTimeMsecs(startTimeMsecs)
	return o
}

// SetStartTimeMsecs adds the startTimeMsecs to the get time series stats params
func (o *GetTimeSeriesStatsParams) SetStartTimeMsecs(startTimeMsecs int64) {
	o.StartTimeMsecs = startTimeMsecs
}

// WriteToRequest writes these params to a swagger request
func (o *GetTimeSeriesStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTimeMsecs != nil {

		// query param endTimeMsecs
		var qrEndTimeMsecs int64

		if o.EndTimeMsecs != nil {
			qrEndTimeMsecs = *o.EndTimeMsecs
		}
		qEndTimeMsecs := swag.FormatInt64(qrEndTimeMsecs)
		if qEndTimeMsecs != "" {

			if err := r.SetQueryParam("endTimeMsecs", qEndTimeMsecs); err != nil {
				return err
			}
		}
	}

	// query param entityId
	qrEntityID := o.EntityID
	qEntityID := qrEntityID
	if qEntityID != "" {

		if err := r.SetQueryParam("entityId", qEntityID); err != nil {
			return err
		}
	}

	if o.MetricNames != nil {

		// binding items for metricNames
		joinedMetricNames := o.bindParamMetricNames(reg)

		// query array param metricNames
		if err := r.SetQueryParam("metricNames", joinedMetricNames...); err != nil {
			return err
		}
	}

	if o.RollupFunction != nil {

		// query param rollupFunction
		var qrRollupFunction string

		if o.RollupFunction != nil {
			qrRollupFunction = *o.RollupFunction
		}
		qRollupFunction := qrRollupFunction
		if qRollupFunction != "" {

			if err := r.SetQueryParam("rollupFunction", qRollupFunction); err != nil {
				return err
			}
		}
	}

	if o.RollupIntervalSecs != nil {

		// query param rollupIntervalSecs
		var qrRollupIntervalSecs int32

		if o.RollupIntervalSecs != nil {
			qrRollupIntervalSecs = *o.RollupIntervalSecs
		}
		qRollupIntervalSecs := swag.FormatInt32(qrRollupIntervalSecs)
		if qRollupIntervalSecs != "" {

			if err := r.SetQueryParam("rollupIntervalSecs", qRollupIntervalSecs); err != nil {
				return err
			}
		}
	}

	// query param schemaName
	qrSchemaName := o.SchemaName
	qSchemaName := qrSchemaName
	if qSchemaName != "" {

		if err := r.SetQueryParam("schemaName", qSchemaName); err != nil {
			return err
		}
	}

	// query param startTimeMsecs
	qrStartTimeMsecs := o.StartTimeMsecs
	qStartTimeMsecs := swag.FormatInt64(qrStartTimeMsecs)
	if qStartTimeMsecs != "" {

		if err := r.SetQueryParam("startTimeMsecs", qStartTimeMsecs); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetTimeSeriesStats binds the parameter metricNames
func (o *GetTimeSeriesStatsParams) bindParamMetricNames(formats strfmt.Registry) []string {
	metricNamesIR := o.MetricNames

	var metricNamesIC []string
	for _, metricNamesIIR := range metricNamesIR { // explode []string

		metricNamesIIV := metricNamesIIR // string as string
		metricNamesIC = append(metricNamesIC, metricNamesIIV)
	}

	// items.CollectionFormat: ""
	metricNamesIS := swag.JoinByFormat(metricNamesIC, "")

	return metricNamesIS
}
